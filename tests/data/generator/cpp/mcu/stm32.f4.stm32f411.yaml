- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_ADC_COMMON_H\n#define DRAL_STM32F411_ADC_COMMON_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass adc_common\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40012300;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CsrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ovr3 = FieldModel<address, 21, 1>;\n    using strt3\
    \ = FieldModel<address, 20, 1>;\n    using jstrt3 = FieldModel<address, 19, 1>;\n\
    \    using jeoc3 = FieldModel<address, 18, 1>;\n    using eoc3 = FieldModel<address,\
    \ 17, 1>;\n    using awd3 = FieldModel<address, 16, 1>;\n    using ovr2 = FieldModel<address,\
    \ 13, 1>;\n    using strt2 = FieldModel<address, 12, 1>;\n    using jstrt2 = FieldModel<address,\
    \ 11, 1>;\n    using jeoc2 = FieldModel<address, 10, 1>;\n    using eoc2 = FieldModel<address,\
    \ 9, 1>;\n    using awd2 = FieldModel<address, 8, 1>;\n    using ovr1 = FieldModel<address,\
    \ 5, 1>;\n    using strt1 = FieldModel<address, 4, 1>;\n    using jstrt1 = FieldModel<address,\
    \ 3, 1>;\n    using jeoc1 = FieldModel<address, 2, 1>;\n    using eoc1 = FieldModel<address,\
    \ 1, 1>;\n    using awd1 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<21, 1> ovr3;\n      BitFieldModel<20,\
    \ 1> strt3;\n      BitFieldModel<19, 1> jstrt3;\n      BitFieldModel<18, 1> jeoc3;\n\
    \      BitFieldModel<17, 1> eoc3;\n      BitFieldModel<16, 1> awd3;\n      BitFieldModel<13,\
    \ 1> ovr2;\n      BitFieldModel<12, 1> strt2;\n      BitFieldModel<11, 1> jstrt2;\n\
    \      BitFieldModel<10, 1> jeoc2;\n      BitFieldModel<9, 1> eoc2;\n      BitFieldModel<8,\
    \ 1> awd2;\n      BitFieldModel<5, 1> ovr1;\n      BitFieldModel<4, 1> strt1;\n\
    \      BitFieldModel<3, 1> jstrt1;\n      BitFieldModel<2, 1> jeoc1;\n      BitFieldModel<1,\
    \ 1> eoc1;\n      BitFieldModel<0, 1> awd1;\n    };\n  };\n\npublic:\n  using\
    \ csr = CsrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class CcrReg : public RegisterModel<address>\n  {\n  public:\n    using tsvrefe\
    \ = FieldModel<address, 23, 1>;\n    using vbate = FieldModel<address, 22, 1>;\n\
    \    using adcpre = FieldModel<address, 16, 2>;\n    using dma = FieldModel<address,\
    \ 14, 2>;\n    using dds = FieldModel<address, 13, 1>;\n    using delay = FieldModel<address,\
    \ 8, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<23,\
    \ 1> tsvrefe;\n      BitFieldModel<22, 1> vbate;\n      BitFieldModel<16, 2> adcpre;\n\
    \      BitFieldModel<14, 2> dma;\n      BitFieldModel<13, 1> dds;\n      BitFieldModel<8,\
    \ 4> delay;\n    };\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x0004>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_ADC_COMMON_H */\n"
  name: ADC_Common
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_ADC1_H\n#define DRAL_STM32F411_ADC1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass adc1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40012000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ovr = FieldModel<address, 5, 1>;\n    using strt =\
    \ FieldModel<address, 4, 1>;\n    using jstrt = FieldModel<address, 3, 1>;\n \
    \   using jeoc = FieldModel<address, 2, 1>;\n    using eoc = FieldModel<address,\
    \ 1, 1>;\n    using awd = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<5, 1> ovr;\n      BitFieldModel<4,\
    \ 1> strt;\n      BitFieldModel<3, 1> jstrt;\n      BitFieldModel<2, 1> jeoc;\n\
    \      BitFieldModel<1, 1> eoc;\n      BitFieldModel<0, 1> awd;\n    };\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Cr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using ovrie = FieldModel<address, 26, 1>;\n    using res = FieldModel<address,\
    \ 24, 2>;\n    using awden = FieldModel<address, 23, 1>;\n    using jawden = FieldModel<address,\
    \ 22, 1>;\n    using discnum = FieldModel<address, 13, 3>;\n    using jdiscen\
    \ = FieldModel<address, 12, 1>;\n    using discen = FieldModel<address, 11, 1>;\n\
    \    using jauto = FieldModel<address, 10, 1>;\n    using awdsgl = FieldModel<address,\
    \ 9, 1>;\n    using scan = FieldModel<address, 8, 1>;\n    using jeocie = FieldModel<address,\
    \ 7, 1>;\n    using awdie = FieldModel<address, 6, 1>;\n    using eocie = FieldModel<address,\
    \ 5, 1>;\n    using awdch = FieldModel<address, 0, 5>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<26, 1> ovrie;\n     \
    \ BitFieldModel<24, 2> res;\n      BitFieldModel<23, 1> awden;\n      BitFieldModel<22,\
    \ 1> jawden;\n      BitFieldModel<13, 3> discnum;\n      BitFieldModel<12, 1>\
    \ jdiscen;\n      BitFieldModel<11, 1> discen;\n      BitFieldModel<10, 1> jauto;\n\
    \      BitFieldModel<9, 1> awdsgl;\n      BitFieldModel<8, 1> scan;\n      BitFieldModel<7,\
    \ 1> jeocie;\n      BitFieldModel<6, 1> awdie;\n      BitFieldModel<5, 1> eocie;\n\
    \      BitFieldModel<0, 5> awdch;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using swstart = FieldModel<address,\
    \ 30, 1>;\n    using exten = FieldModel<address, 28, 2>;\n    using extsel = FieldModel<address,\
    \ 24, 4>;\n    using jswstart = FieldModel<address, 22, 1>;\n    using jexten\
    \ = FieldModel<address, 20, 2>;\n    using jextsel = FieldModel<address, 16, 4>;\n\
    \    using align = FieldModel<address, 11, 1>;\n    using eocs = FieldModel<address,\
    \ 10, 1>;\n    using dds = FieldModel<address, 9, 1>;\n    using dma = FieldModel<address,\
    \ 8, 1>;\n    using cont = FieldModel<address, 1, 1>;\n    using adon = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 1> swstart;\n      BitFieldModel<28, 2> exten;\n      BitFieldModel<24, 4> extsel;\n\
    \      BitFieldModel<22, 1> jswstart;\n      BitFieldModel<20, 2> jexten;\n  \
    \    BitFieldModel<16, 4> jextsel;\n      BitFieldModel<11, 1> align;\n      BitFieldModel<10,\
    \ 1> eocs;\n      BitFieldModel<9, 1> dds;\n      BitFieldModel<8, 1> dma;\n \
    \     BitFieldModel<1, 1> cont;\n      BitFieldModel<0, 1> adon;\n    };\n  };\n\
    \npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Smpr1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using smpx_x = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 32> smpx_x;\n    };\n  };\n\
    \npublic:\n  using smpr1 = Smpr1Reg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Smpr2Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using smpx_x = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 32> smpx_x;\n    };\n  };\n\
    \npublic:\n  using smpr2 = Smpr2Reg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Jofr1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using joffset1 = FieldModel<address, 0, 12>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 12> joffset1;\n    };\n\
    \  };\n\npublic:\n  using jofr1 = Jofr1Reg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Jofr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using joffset2 = FieldModel<address, 0, 12>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 12> joffset2;\n\
    \    };\n  };\n\npublic:\n  using jofr2 = Jofr2Reg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class Jofr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using joffset3 = FieldModel<address, 0, 12>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 12> joffset3;\n\
    \    };\n  };\n\npublic:\n  using jofr3 = Jofr3Reg<BaseAddress + 0x001C>;\n\n\
    private:\n  template<uint32_t address>\n  class Jofr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using joffset4 = FieldModel<address, 0, 12>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 12> joffset4;\n\
    \    };\n  };\n\npublic:\n  using jofr4 = Jofr4Reg<BaseAddress + 0x0020>;\n\n\
    private:\n  template<uint32_t address>\n  class HtrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ht = FieldModel<address, 0, 12>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 12> ht;\n  \
    \  };\n  };\n\npublic:\n  using htr = HtrReg<BaseAddress + 0x0024>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class LtrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lt = FieldModel<address, 0, 12>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 12> lt;\n  \
    \  };\n  };\n\npublic:\n  using ltr = LtrReg<BaseAddress + 0x0028>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Sqr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using l = FieldModel<address, 20, 4>;\n    using sq16 = FieldModel<address,\
    \ 15, 5>;\n    using sq15 = FieldModel<address, 10, 5>;\n    using sq14 = FieldModel<address,\
    \ 5, 5>;\n    using sq13 = FieldModel<address, 0, 5>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<20, 4> l;\n      BitFieldModel<15,\
    \ 5> sq16;\n      BitFieldModel<10, 5> sq15;\n      BitFieldModel<5, 5> sq14;\n\
    \      BitFieldModel<0, 5> sq13;\n    };\n  };\n\npublic:\n  using sqr1 = Sqr1Reg<BaseAddress\
    \ + 0x002C>;\n\nprivate:\n  template<uint32_t address>\n  class Sqr2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using sq12 = FieldModel<address,\
    \ 25, 5>;\n    using sq11 = FieldModel<address, 20, 5>;\n    using sq10 = FieldModel<address,\
    \ 15, 5>;\n    using sq9 = FieldModel<address, 10, 5>;\n    using sq8 = FieldModel<address,\
    \ 5, 5>;\n    using sq7 = FieldModel<address, 0, 5>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<25, 5> sq12;\n      BitFieldModel<20,\
    \ 5> sq11;\n      BitFieldModel<15, 5> sq10;\n      BitFieldModel<10, 5> sq9;\n\
    \      BitFieldModel<5, 5> sq8;\n      BitFieldModel<0, 5> sq7;\n    };\n  };\n\
    \npublic:\n  using sqr2 = Sqr2Reg<BaseAddress + 0x0030>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Sqr3Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using sq6 = FieldModel<address, 25, 5>;\n    using sq5 = FieldModel<address,\
    \ 20, 5>;\n    using sq4 = FieldModel<address, 15, 5>;\n    using sq3 = FieldModel<address,\
    \ 10, 5>;\n    using sq2 = FieldModel<address, 5, 5>;\n    using sq1 = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 5> sq6;\n      BitFieldModel<20, 5> sq5;\n      BitFieldModel<15, 5> sq4;\n\
    \      BitFieldModel<10, 5> sq3;\n      BitFieldModel<5, 5> sq2;\n      BitFieldModel<0,\
    \ 5> sq1;\n    };\n  };\n\npublic:\n  using sqr3 = Sqr3Reg<BaseAddress + 0x0034>;\n\
    \nprivate:\n  template<uint32_t address>\n  class JsqrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using jl = FieldModel<address, 20, 2>;\n    using jsq4 =\
    \ FieldModel<address, 15, 5>;\n    using jsq3 = FieldModel<address, 10, 5>;\n\
    \    using jsq2 = FieldModel<address, 5, 5>;\n    using jsq1 = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<20,\
    \ 2> jl;\n      BitFieldModel<15, 5> jsq4;\n      BitFieldModel<10, 5> jsq3;\n\
    \      BitFieldModel<5, 5> jsq2;\n      BitFieldModel<0, 5> jsq1;\n    };\n  };\n\
    \npublic:\n  using jsqr = JsqrReg<BaseAddress + 0x0038>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Jdr1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using jdata = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<0, 16> jdata;\n    };\n  };\n\
    \npublic:\n  using jdr1 = Jdr1Reg<BaseAddress + 0x003C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Jdr2Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using jdata = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<0, 16> jdata;\n    };\n  };\n\
    \npublic:\n  using jdr2 = Jdr2Reg<BaseAddress + 0x0040>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Jdr3Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using jdata = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<0, 16> jdata;\n    };\n  };\n\
    \npublic:\n  using jdr3 = Jdr3Reg<BaseAddress + 0x0044>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Jdr4Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using jdata = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<0, 16> jdata;\n    };\n  };\n\
    \npublic:\n  using jdr4 = Jdr4Reg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using data = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 16> data;\n    };\n  };\n\npublic:\n\
    \  using dr = DrReg<BaseAddress + 0x004C>;\nprivate:\n  template<uint32_t address,\
    \ uint32_t bankOffset>\n  class SmprxBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using smpx_x = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using smprx = SmprxBankReg<BaseAddress + 0x000C, 0x0004>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class JdrxBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using jdata\
    \ = FieldModel<address, 0, 16, bankOffset>;\n  };\n\npublic:\n  using jdrx = JdrxBankReg<BaseAddress\
    \ + 0x003C, 0x0004>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_ADC1_H */\n"
  name: ADC1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_CRC_H\n#define DRAL_STM32F411_CRC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass crc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40023000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 32>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> dr;\n  \
    \  };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class IdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using idr = FieldModel<address, 0, 8>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 8> idr;\n  \
    \  };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cr = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> cr;\n    };\n \
    \ };\n\npublic:\n  using cr = CrReg<BaseAddress + 0x0008>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_CRC_H */\n"
  name: CRC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DBG_H\n#define DRAL_STM32F411_DBG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass dbg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE0042000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Dbgmcu_idcodeReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dev_id = FieldModel<address, 0, 12>;\n    using rev_id\
    \ = FieldModel<address, 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 12> dev_id;\n      BitFieldModel<16, 16> rev_id;\n\
    \    };\n  };\n\npublic:\n  using dbgmcu_idcode = Dbgmcu_idcodeReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n  class Dbgmcu_crReg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using dbg_sleep = FieldModel<address,\
    \ 0, 1>;\n    using dbg_stop = FieldModel<address, 1, 1>;\n    using dbg_standby\
    \ = FieldModel<address, 2, 1>;\n    using trace_ioen = FieldModel<address, 5,\
    \ 1>;\n    using trace_mode = FieldModel<address, 6, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> dbg_sleep;\n  \
    \    BitFieldModel<1, 1> dbg_stop;\n      BitFieldModel<2, 1> dbg_standby;\n \
    \     BitFieldModel<5, 1> trace_ioen;\n      BitFieldModel<6, 2> trace_mode;\n\
    \    };\n  };\n\npublic:\n  using dbgmcu_cr = Dbgmcu_crReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dbgmcu_apb1_fzReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbg_tim2_stop = FieldModel<address, 0, 1>;\n    using\
    \ dbg_tim3_stop = FieldModel<address, 1, 1>;\n    using dbg_tim4_stop = FieldModel<address,\
    \ 2, 1>;\n    using dbg_tim5_stop = FieldModel<address, 3, 1>;\n    using dbg_rtc_stop\
    \ = FieldModel<address, 10, 1>;\n    using dbg_wwdg_stop = FieldModel<address,\
    \ 11, 1>;\n    using dbg_iwdeg_stop = FieldModel<address, 12, 1>;\n    using dbg_i2c1_smbus_timeout\
    \ = FieldModel<address, 21, 1>;\n    using dbg_i2c2_smbus_timeout = FieldModel<address,\
    \ 22, 1>;\n    using dbg_i2c3smbus_timeout = FieldModel<address, 23, 1>;\n\n \
    \ public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> dbg_tim2_stop;\n      BitFieldModel<1, 1> dbg_tim3_stop;\n      BitFieldModel<2,\
    \ 1> dbg_tim4_stop;\n      BitFieldModel<3, 1> dbg_tim5_stop;\n      BitFieldModel<10,\
    \ 1> dbg_rtc_stop;\n      BitFieldModel<11, 1> dbg_wwdg_stop;\n      BitFieldModel<12,\
    \ 1> dbg_iwdeg_stop;\n      BitFieldModel<21, 1> dbg_i2c1_smbus_timeout;\n   \
    \   BitFieldModel<22, 1> dbg_i2c2_smbus_timeout;\n      BitFieldModel<23, 1> dbg_i2c3smbus_timeout;\n\
    \    };\n  };\n\npublic:\n  using dbgmcu_apb1_fz = Dbgmcu_apb1_fzReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class Dbgmcu_apb2_fzReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using dbg_tim1_stop = FieldModel<address,\
    \ 0, 1>;\n    using dbg_tim9_stop = FieldModel<address, 16, 1>;\n    using dbg_tim10_stop\
    \ = FieldModel<address, 17, 1>;\n    using dbg_tim11_stop = FieldModel<address,\
    \ 18, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> dbg_tim1_stop;\n      BitFieldModel<16, 1> dbg_tim9_stop;\n      BitFieldModel<17,\
    \ 1> dbg_tim10_stop;\n      BitFieldModel<18, 1> dbg_tim11_stop;\n    };\n  };\n\
    \npublic:\n  using dbgmcu_apb2_fz = Dbgmcu_apb2_fzReg<BaseAddress + 0x000C>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_DBG_H */\n"
  name: DBG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_EXTI_H\n#define DRAL_STM32F411_EXTI_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass exti\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ImrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mr0 = FieldModel<address, 0, 1>;\n    using mr1 = FieldModel<address,\
    \ 1, 1>;\n    using mr2 = FieldModel<address, 2, 1>;\n    using mr3 = FieldModel<address,\
    \ 3, 1>;\n    using mr4 = FieldModel<address, 4, 1>;\n    using mr5 = FieldModel<address,\
    \ 5, 1>;\n    using mr6 = FieldModel<address, 6, 1>;\n    using mr7 = FieldModel<address,\
    \ 7, 1>;\n    using mr8 = FieldModel<address, 8, 1>;\n    using mr9 = FieldModel<address,\
    \ 9, 1>;\n    using mr10 = FieldModel<address, 10, 1>;\n    using mr11 = FieldModel<address,\
    \ 11, 1>;\n    using mr12 = FieldModel<address, 12, 1>;\n    using mr13 = FieldModel<address,\
    \ 13, 1>;\n    using mr14 = FieldModel<address, 14, 1>;\n    using mr15 = FieldModel<address,\
    \ 15, 1>;\n    using mr16 = FieldModel<address, 16, 1>;\n    using mr17 = FieldModel<address,\
    \ 17, 1>;\n    using mr18 = FieldModel<address, 18, 1>;\n    using mr19 = FieldModel<address,\
    \ 19, 1>;\n    using mr20 = FieldModel<address, 20, 1>;\n    using mr21 = FieldModel<address,\
    \ 21, 1>;\n    using mr22 = FieldModel<address, 22, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> mr0;\n      BitFieldModel<1,\
    \ 1> mr1;\n      BitFieldModel<2, 1> mr2;\n      BitFieldModel<3, 1> mr3;\n  \
    \    BitFieldModel<4, 1> mr4;\n      BitFieldModel<5, 1> mr5;\n      BitFieldModel<6,\
    \ 1> mr6;\n      BitFieldModel<7, 1> mr7;\n      BitFieldModel<8, 1> mr8;\n  \
    \    BitFieldModel<9, 1> mr9;\n      BitFieldModel<10, 1> mr10;\n      BitFieldModel<11,\
    \ 1> mr11;\n      BitFieldModel<12, 1> mr12;\n      BitFieldModel<13, 1> mr13;\n\
    \      BitFieldModel<14, 1> mr14;\n      BitFieldModel<15, 1> mr15;\n      BitFieldModel<16,\
    \ 1> mr16;\n      BitFieldModel<17, 1> mr17;\n      BitFieldModel<18, 1> mr18;\n\
    \      BitFieldModel<19, 1> mr19;\n      BitFieldModel<20, 1> mr20;\n      BitFieldModel<21,\
    \ 1> mr21;\n      BitFieldModel<22, 1> mr22;\n    };\n  };\n\npublic:\n  using\
    \ imr = ImrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class EmrReg : public RegisterModel<address>\n  {\n  public:\n    using mr0\
    \ = FieldModel<address, 0, 1>;\n    using mr1 = FieldModel<address, 1, 1>;\n \
    \   using mr2 = FieldModel<address, 2, 1>;\n    using mr3 = FieldModel<address,\
    \ 3, 1>;\n    using mr4 = FieldModel<address, 4, 1>;\n    using mr5 = FieldModel<address,\
    \ 5, 1>;\n    using mr6 = FieldModel<address, 6, 1>;\n    using mr7 = FieldModel<address,\
    \ 7, 1>;\n    using mr8 = FieldModel<address, 8, 1>;\n    using mr9 = FieldModel<address,\
    \ 9, 1>;\n    using mr10 = FieldModel<address, 10, 1>;\n    using mr11 = FieldModel<address,\
    \ 11, 1>;\n    using mr12 = FieldModel<address, 12, 1>;\n    using mr13 = FieldModel<address,\
    \ 13, 1>;\n    using mr14 = FieldModel<address, 14, 1>;\n    using mr15 = FieldModel<address,\
    \ 15, 1>;\n    using mr16 = FieldModel<address, 16, 1>;\n    using mr17 = FieldModel<address,\
    \ 17, 1>;\n    using mr18 = FieldModel<address, 18, 1>;\n    using mr19 = FieldModel<address,\
    \ 19, 1>;\n    using mr20 = FieldModel<address, 20, 1>;\n    using mr21 = FieldModel<address,\
    \ 21, 1>;\n    using mr22 = FieldModel<address, 22, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> mr0;\n      BitFieldModel<1,\
    \ 1> mr1;\n      BitFieldModel<2, 1> mr2;\n      BitFieldModel<3, 1> mr3;\n  \
    \    BitFieldModel<4, 1> mr4;\n      BitFieldModel<5, 1> mr5;\n      BitFieldModel<6,\
    \ 1> mr6;\n      BitFieldModel<7, 1> mr7;\n      BitFieldModel<8, 1> mr8;\n  \
    \    BitFieldModel<9, 1> mr9;\n      BitFieldModel<10, 1> mr10;\n      BitFieldModel<11,\
    \ 1> mr11;\n      BitFieldModel<12, 1> mr12;\n      BitFieldModel<13, 1> mr13;\n\
    \      BitFieldModel<14, 1> mr14;\n      BitFieldModel<15, 1> mr15;\n      BitFieldModel<16,\
    \ 1> mr16;\n      BitFieldModel<17, 1> mr17;\n      BitFieldModel<18, 1> mr18;\n\
    \      BitFieldModel<19, 1> mr19;\n      BitFieldModel<20, 1> mr20;\n      BitFieldModel<21,\
    \ 1> mr21;\n      BitFieldModel<22, 1> mr22;\n    };\n  };\n\npublic:\n  using\
    \ emr = EmrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class RtsrReg : public RegisterModel<address>\n  {\n  public:\n    using tr0\
    \ = FieldModel<address, 0, 1>;\n    using tr1 = FieldModel<address, 1, 1>;\n \
    \   using tr2 = FieldModel<address, 2, 1>;\n    using tr3 = FieldModel<address,\
    \ 3, 1>;\n    using tr4 = FieldModel<address, 4, 1>;\n    using tr5 = FieldModel<address,\
    \ 5, 1>;\n    using tr6 = FieldModel<address, 6, 1>;\n    using tr7 = FieldModel<address,\
    \ 7, 1>;\n    using tr8 = FieldModel<address, 8, 1>;\n    using tr9 = FieldModel<address,\
    \ 9, 1>;\n    using tr10 = FieldModel<address, 10, 1>;\n    using tr11 = FieldModel<address,\
    \ 11, 1>;\n    using tr12 = FieldModel<address, 12, 1>;\n    using tr13 = FieldModel<address,\
    \ 13, 1>;\n    using tr14 = FieldModel<address, 14, 1>;\n    using tr15 = FieldModel<address,\
    \ 15, 1>;\n    using tr16 = FieldModel<address, 16, 1>;\n    using tr17 = FieldModel<address,\
    \ 17, 1>;\n    using tr18 = FieldModel<address, 18, 1>;\n    using tr19 = FieldModel<address,\
    \ 19, 1>;\n    using tr20 = FieldModel<address, 20, 1>;\n    using tr21 = FieldModel<address,\
    \ 21, 1>;\n    using tr22 = FieldModel<address, 22, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> tr0;\n      BitFieldModel<1,\
    \ 1> tr1;\n      BitFieldModel<2, 1> tr2;\n      BitFieldModel<3, 1> tr3;\n  \
    \    BitFieldModel<4, 1> tr4;\n      BitFieldModel<5, 1> tr5;\n      BitFieldModel<6,\
    \ 1> tr6;\n      BitFieldModel<7, 1> tr7;\n      BitFieldModel<8, 1> tr8;\n  \
    \    BitFieldModel<9, 1> tr9;\n      BitFieldModel<10, 1> tr10;\n      BitFieldModel<11,\
    \ 1> tr11;\n      BitFieldModel<12, 1> tr12;\n      BitFieldModel<13, 1> tr13;\n\
    \      BitFieldModel<14, 1> tr14;\n      BitFieldModel<15, 1> tr15;\n      BitFieldModel<16,\
    \ 1> tr16;\n      BitFieldModel<17, 1> tr17;\n      BitFieldModel<18, 1> tr18;\n\
    \      BitFieldModel<19, 1> tr19;\n      BitFieldModel<20, 1> tr20;\n      BitFieldModel<21,\
    \ 1> tr21;\n      BitFieldModel<22, 1> tr22;\n    };\n  };\n\npublic:\n  using\
    \ rtsr = RtsrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class FtsrReg : public RegisterModel<address>\n  {\n  public:\n    using tr0\
    \ = FieldModel<address, 0, 1>;\n    using tr1 = FieldModel<address, 1, 1>;\n \
    \   using tr2 = FieldModel<address, 2, 1>;\n    using tr3 = FieldModel<address,\
    \ 3, 1>;\n    using tr4 = FieldModel<address, 4, 1>;\n    using tr5 = FieldModel<address,\
    \ 5, 1>;\n    using tr6 = FieldModel<address, 6, 1>;\n    using tr7 = FieldModel<address,\
    \ 7, 1>;\n    using tr8 = FieldModel<address, 8, 1>;\n    using tr9 = FieldModel<address,\
    \ 9, 1>;\n    using tr10 = FieldModel<address, 10, 1>;\n    using tr11 = FieldModel<address,\
    \ 11, 1>;\n    using tr12 = FieldModel<address, 12, 1>;\n    using tr13 = FieldModel<address,\
    \ 13, 1>;\n    using tr14 = FieldModel<address, 14, 1>;\n    using tr15 = FieldModel<address,\
    \ 15, 1>;\n    using tr16 = FieldModel<address, 16, 1>;\n    using tr17 = FieldModel<address,\
    \ 17, 1>;\n    using tr18 = FieldModel<address, 18, 1>;\n    using tr19 = FieldModel<address,\
    \ 19, 1>;\n    using tr20 = FieldModel<address, 20, 1>;\n    using tr21 = FieldModel<address,\
    \ 21, 1>;\n    using tr22 = FieldModel<address, 22, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> tr0;\n      BitFieldModel<1,\
    \ 1> tr1;\n      BitFieldModel<2, 1> tr2;\n      BitFieldModel<3, 1> tr3;\n  \
    \    BitFieldModel<4, 1> tr4;\n      BitFieldModel<5, 1> tr5;\n      BitFieldModel<6,\
    \ 1> tr6;\n      BitFieldModel<7, 1> tr7;\n      BitFieldModel<8, 1> tr8;\n  \
    \    BitFieldModel<9, 1> tr9;\n      BitFieldModel<10, 1> tr10;\n      BitFieldModel<11,\
    \ 1> tr11;\n      BitFieldModel<12, 1> tr12;\n      BitFieldModel<13, 1> tr13;\n\
    \      BitFieldModel<14, 1> tr14;\n      BitFieldModel<15, 1> tr15;\n      BitFieldModel<16,\
    \ 1> tr16;\n      BitFieldModel<17, 1> tr17;\n      BitFieldModel<18, 1> tr18;\n\
    \      BitFieldModel<19, 1> tr19;\n      BitFieldModel<20, 1> tr20;\n      BitFieldModel<21,\
    \ 1> tr21;\n      BitFieldModel<22, 1> tr22;\n    };\n  };\n\npublic:\n  using\
    \ ftsr = FtsrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SwierReg : public RegisterModel<address>\n  {\n  public:\n    using swier0\
    \ = FieldModel<address, 0, 1>;\n    using swier1 = FieldModel<address, 1, 1>;\n\
    \    using swier2 = FieldModel<address, 2, 1>;\n    using swier3 = FieldModel<address,\
    \ 3, 1>;\n    using swier4 = FieldModel<address, 4, 1>;\n    using swier5 = FieldModel<address,\
    \ 5, 1>;\n    using swier6 = FieldModel<address, 6, 1>;\n    using swier7 = FieldModel<address,\
    \ 7, 1>;\n    using swier8 = FieldModel<address, 8, 1>;\n    using swier9 = FieldModel<address,\
    \ 9, 1>;\n    using swier10 = FieldModel<address, 10, 1>;\n    using swier11 =\
    \ FieldModel<address, 11, 1>;\n    using swier12 = FieldModel<address, 12, 1>;\n\
    \    using swier13 = FieldModel<address, 13, 1>;\n    using swier14 = FieldModel<address,\
    \ 14, 1>;\n    using swier15 = FieldModel<address, 15, 1>;\n    using swier16\
    \ = FieldModel<address, 16, 1>;\n    using swier17 = FieldModel<address, 17, 1>;\n\
    \    using swier18 = FieldModel<address, 18, 1>;\n    using swier19 = FieldModel<address,\
    \ 19, 1>;\n    using swier20 = FieldModel<address, 20, 1>;\n    using swier21\
    \ = FieldModel<address, 21, 1>;\n    using swier22 = FieldModel<address, 22, 1>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> swier0;\n      BitFieldModel<1, 1> swier1;\n      BitFieldModel<2, 1> swier2;\n\
    \      BitFieldModel<3, 1> swier3;\n      BitFieldModel<4, 1> swier4;\n      BitFieldModel<5,\
    \ 1> swier5;\n      BitFieldModel<6, 1> swier6;\n      BitFieldModel<7, 1> swier7;\n\
    \      BitFieldModel<8, 1> swier8;\n      BitFieldModel<9, 1> swier9;\n      BitFieldModel<10,\
    \ 1> swier10;\n      BitFieldModel<11, 1> swier11;\n      BitFieldModel<12, 1>\
    \ swier12;\n      BitFieldModel<13, 1> swier13;\n      BitFieldModel<14, 1> swier14;\n\
    \      BitFieldModel<15, 1> swier15;\n      BitFieldModel<16, 1> swier16;\n  \
    \    BitFieldModel<17, 1> swier17;\n      BitFieldModel<18, 1> swier18;\n    \
    \  BitFieldModel<19, 1> swier19;\n      BitFieldModel<20, 1> swier20;\n      BitFieldModel<21,\
    \ 1> swier21;\n      BitFieldModel<22, 1> swier22;\n    };\n  };\n\npublic:\n\
    \  using swier = SwierReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class PrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using pr0 = FieldModel<address, 0, 1>;\n    using pr1 = FieldModel<address,\
    \ 1, 1>;\n    using pr2 = FieldModel<address, 2, 1>;\n    using pr3 = FieldModel<address,\
    \ 3, 1>;\n    using pr4 = FieldModel<address, 4, 1>;\n    using pr5 = FieldModel<address,\
    \ 5, 1>;\n    using pr6 = FieldModel<address, 6, 1>;\n    using pr7 = FieldModel<address,\
    \ 7, 1>;\n    using pr8 = FieldModel<address, 8, 1>;\n    using pr9 = FieldModel<address,\
    \ 9, 1>;\n    using pr10 = FieldModel<address, 10, 1>;\n    using pr11 = FieldModel<address,\
    \ 11, 1>;\n    using pr12 = FieldModel<address, 12, 1>;\n    using pr13 = FieldModel<address,\
    \ 13, 1>;\n    using pr14 = FieldModel<address, 14, 1>;\n    using pr15 = FieldModel<address,\
    \ 15, 1>;\n    using pr16 = FieldModel<address, 16, 1>;\n    using pr17 = FieldModel<address,\
    \ 17, 1>;\n    using pr18 = FieldModel<address, 18, 1>;\n    using pr19 = FieldModel<address,\
    \ 19, 1>;\n    using pr20 = FieldModel<address, 20, 1>;\n    using pr21 = FieldModel<address,\
    \ 21, 1>;\n    using pr22 = FieldModel<address, 22, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> pr0;\n      BitFieldModel<1,\
    \ 1> pr1;\n      BitFieldModel<2, 1> pr2;\n      BitFieldModel<3, 1> pr3;\n  \
    \    BitFieldModel<4, 1> pr4;\n      BitFieldModel<5, 1> pr5;\n      BitFieldModel<6,\
    \ 1> pr6;\n      BitFieldModel<7, 1> pr7;\n      BitFieldModel<8, 1> pr8;\n  \
    \    BitFieldModel<9, 1> pr9;\n      BitFieldModel<10, 1> pr10;\n      BitFieldModel<11,\
    \ 1> pr11;\n      BitFieldModel<12, 1> pr12;\n      BitFieldModel<13, 1> pr13;\n\
    \      BitFieldModel<14, 1> pr14;\n      BitFieldModel<15, 1> pr15;\n      BitFieldModel<16,\
    \ 1> pr16;\n      BitFieldModel<17, 1> pr17;\n      BitFieldModel<18, 1> pr18;\n\
    \      BitFieldModel<19, 1> pr19;\n      BitFieldModel<20, 1> pr20;\n      BitFieldModel<21,\
    \ 1> pr21;\n      BitFieldModel<22, 1> pr22;\n    };\n  };\n\npublic:\n  using\
    \ pr = PrReg<BaseAddress + 0x0014>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_EXTI_H\
    \ */\n"
  name: EXTI
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FLASH_H\n#define DRAL_STM32F411_FLASH_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass flash\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40023C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using latency = FieldModel<address, 0, 3>;\n    using prften\
    \ = FieldModel<address, 8, 1>;\n    using icen = FieldModel<address, 9, 1>;\n\
    \    using dcen = FieldModel<address, 10, 1>;\n    using icrst = FieldModel<address,\
    \ 11, 1>;\n    using dcrst = FieldModel<address, 12, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 3> latency;\n    \
    \  BitFieldModel<8, 1> prften;\n      BitFieldModel<9, 1> icen;\n      BitFieldModel<10,\
    \ 1> dcen;\n      BitFieldModel<11, 1> icrst;\n      BitFieldModel<12, 1> dcrst;\n\
    \    };\n  };\n\npublic:\n  using acr = AcrReg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class KeyrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using key = FieldModel<address, 0, 32>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> key;\n\
    \    };\n  };\n\npublic:\n  using keyr = KeyrReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class OptkeyrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using optkey = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> optkey;\n\
    \    };\n  };\n\npublic:\n  using optkeyr = OptkeyrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using eop = FieldModel<address, 0, 1>;\n    using operr =\
    \ FieldModel<address, 1, 1>;\n    using wrperr = FieldModel<address, 4, 1>;\n\
    \    using pgaerr = FieldModel<address, 5, 1>;\n    using pgperr = FieldModel<address,\
    \ 6, 1>;\n    using pgserr = FieldModel<address, 7, 1>;\n    using bsy = FieldModel<address,\
    \ 16, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> eop;\n      BitFieldModel<1, 1> operr;\n      BitFieldModel<4, 1> wrperr;\n\
    \      BitFieldModel<5, 1> pgaerr;\n      BitFieldModel<6, 1> pgperr;\n      BitFieldModel<7,\
    \ 1> pgserr;\n      BitFieldModel<16, 1> bsy;\n    };\n  };\n\npublic:\n  using\
    \ sr = SrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class CrReg : public RegisterModel<address>\n  {\n  public:\n    using pg =\
    \ FieldModel<address, 0, 1>;\n    using ser = FieldModel<address, 1, 1>;\n   \
    \ using mer = FieldModel<address, 2, 1>;\n    using snb = FieldModel<address,\
    \ 3, 4>;\n    using psize = FieldModel<address, 8, 2>;\n    using strt = FieldModel<address,\
    \ 16, 1>;\n    using eopie = FieldModel<address, 24, 1>;\n    using errie = FieldModel<address,\
    \ 25, 1>;\n    using lock = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> pg;\n      BitFieldModel<1,\
    \ 1> ser;\n      BitFieldModel<2, 1> mer;\n      BitFieldModel<3, 4> snb;\n  \
    \    BitFieldModel<8, 2> psize;\n      BitFieldModel<16, 1> strt;\n      BitFieldModel<24,\
    \ 1> eopie;\n      BitFieldModel<25, 1> errie;\n      BitFieldModel<31, 1> lock;\n\
    \    };\n  };\n\npublic:\n  using cr = CrReg<BaseAddress + 0x0010>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class OptcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using optlock = FieldModel<address, 0, 1>;\n    using optstrt\
    \ = FieldModel<address, 1, 1>;\n    using bor_lev = FieldModel<address, 2, 2>;\n\
    \    using wdg_sw = FieldModel<address, 5, 1>;\n    using nrst_stop = FieldModel<address,\
    \ 6, 1>;\n    using nrst_stdby = FieldModel<address, 7, 1>;\n    using rdp = FieldModel<address,\
    \ 8, 8>;\n    using nwrp = FieldModel<address, 16, 12>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> optlock;\n    \
    \  BitFieldModel<1, 1> optstrt;\n      BitFieldModel<2, 2> bor_lev;\n      BitFieldModel<5,\
    \ 1> wdg_sw;\n      BitFieldModel<6, 1> nrst_stop;\n      BitFieldModel<7, 1>\
    \ nrst_stdby;\n      BitFieldModel<8, 8> rdp;\n      BitFieldModel<16, 12> nwrp;\n\
    \    };\n  };\n\npublic:\n  using optcr = OptcrReg<BaseAddress + 0x0014>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_FLASH_H */\n"
  name: FLASH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_IWDG_H\n#define DRAL_STM32F411_IWDG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass iwdg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class KrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using key = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> key;\n\
    \    };\n  };\n\npublic:\n  using kr = KrReg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class PrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pr = FieldModel<address, 0, 3>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 3> pr;\n    };\n \
    \ };\n\npublic:\n  using pr = PrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class RlrReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using rl = FieldModel<address, 0, 12>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 12> rl;\n    };\n  };\n\npublic:\n\
    \  using rlr = RlrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class SrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using rvu = FieldModel<address, 1, 1>;\n    using pvu = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<1,\
    \ 1> rvu;\n      BitFieldModel<0, 1> pvu;\n    };\n  };\n\npublic:\n  using sr\
    \ = SrReg<BaseAddress + 0x000C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_IWDG_H\
    \ */\n"
  name: IWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_DEVICE_H\n#define DRAL_STM32F411_OTG_FS_DEVICE_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_device\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Fs_dcfgReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dspd = FieldModel<address, 0, 2>;\n    using nzlsohsk\
    \ = FieldModel<address, 2, 1>;\n    using dad = FieldModel<address, 4, 7>;\n \
    \   using pfivl = FieldModel<address, 11, 2>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<0, 2> dspd;\n      BitFieldModel<2,\
    \ 1> nzlsohsk;\n      BitFieldModel<4, 7> dad;\n      BitFieldModel<11, 2> pfivl;\n\
    \    };\n  };\n\npublic:\n  using fs_dcfg = Fs_dcfgReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_dctlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rwusig = FieldModel<address, 0, 1>;\n    using sdis\
    \ = FieldModel<address, 1, 1>;\n    using ginsts = FieldModel<address, 2, 1>;\n\
    \    using gonsts = FieldModel<address, 3, 1>;\n    using tctl = FieldModel<address,\
    \ 4, 3>;\n    using sginak = FieldModel<address, 7, 1>;\n    using cginak = FieldModel<address,\
    \ 8, 1>;\n    using sgonak = FieldModel<address, 9, 1>;\n    using cgonak = FieldModel<address,\
    \ 10, 1>;\n    using poprgdne = FieldModel<address, 11, 1>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> rwusig;\n\
    \      BitFieldModel<1, 1> sdis;\n      BitFieldModel<2, 1> ginsts;\n      BitFieldModel<3,\
    \ 1> gonsts;\n      BitFieldModel<4, 3> tctl;\n      BitFieldModel<7, 1> sginak;\n\
    \      BitFieldModel<8, 1> cginak;\n      BitFieldModel<9, 1> sgonak;\n      BitFieldModel<10,\
    \ 1> cgonak;\n      BitFieldModel<11, 1> poprgdne;\n    };\n  };\n\npublic:\n\
    \  using fs_dctl = Fs_dctlReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_dstsReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using suspsts = FieldModel<address, 0, 1>;\n    using enumspd = FieldModel<address,\
    \ 1, 2>;\n    using eerr = FieldModel<address, 3, 1>;\n    using fnsof = FieldModel<address,\
    \ 8, 14>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> suspsts;\n      BitFieldModel<1, 2> enumspd;\n      BitFieldModel<3, 1> eerr;\n\
    \      BitFieldModel<8, 14> fnsof;\n    };\n  };\n\npublic:\n  using fs_dsts =\
    \ Fs_dstsReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_diepmskReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ xfrcm = FieldModel<address, 0, 1>;\n    using epdm = FieldModel<address, 1,\
    \ 1>;\n    using tom = FieldModel<address, 3, 1>;\n    using ittxfemsk = FieldModel<address,\
    \ 4, 1>;\n    using inepnmm = FieldModel<address, 5, 1>;\n    using inepnem =\
    \ FieldModel<address, 6, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 1> xfrcm;\n      BitFieldModel<1, 1> epdm;\n\
    \      BitFieldModel<3, 1> tom;\n      BitFieldModel<4, 1> ittxfemsk;\n      BitFieldModel<5,\
    \ 1> inepnmm;\n      BitFieldModel<6, 1> inepnem;\n    };\n  };\n\npublic:\n \
    \ using fs_diepmsk = Fs_diepmskReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_doepmskReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrcm = FieldModel<address, 0, 1>;\n    using epdm = FieldModel<address,\
    \ 1, 1>;\n    using stupm = FieldModel<address, 3, 1>;\n    using otepdm = FieldModel<address,\
    \ 4, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrcm;\n      BitFieldModel<1, 1> epdm;\n      BitFieldModel<3, 1> stupm;\n\
    \      BitFieldModel<4, 1> otepdm;\n    };\n  };\n\npublic:\n  using fs_doepmsk\
    \ = Fs_doepmskReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_daintReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ iepint = FieldModel<address, 0, 16>;\n    using oepint = FieldModel<address,\
    \ 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> iepint;\n      BitFieldModel<16, 16> oepint;\n    };\n  };\n\npublic:\n\
    \  using fs_daint = Fs_daintReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_daintmskReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using iepm = FieldModel<address, 0, 16>;\n    using oepm = FieldModel<address,\
    \ 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> iepm;\n      BitFieldModel<16, 16> oepm;\n    };\n  };\n\npublic:\n  using\
    \ fs_daintmsk = Fs_daintmskReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DvbusdisReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using vbusdt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 16> vbusdt;\n    };\n  };\n\
    \npublic:\n  using dvbusdis = DvbusdisReg<BaseAddress + 0x0028>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DvbuspulseReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dvbusp = FieldModel<address, 0, 12>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 12> dvbusp;\n\
    \    };\n  };\n\npublic:\n  using dvbuspulse = DvbuspulseReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DiepempmskReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptxfem = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ineptxfem;\n\
    \    };\n  };\n\npublic:\n  using diepempmsk = DiepempmskReg<BaseAddress + 0x0034>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_diepctl0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mpsiz = FieldModel<address, 0, 2>;\n    using usbaep\
    \ = FieldModel<address, 15, 1>;\n    using naksts = FieldModel<address, 17, 1>;\n\
    \    using eptyp = FieldModel<address, 18, 2>;\n    using stall = FieldModel<address,\
    \ 21, 1>;\n    using txfnum = FieldModel<address, 22, 4>;\n    using cnak = FieldModel<address,\
    \ 26, 1>;\n    using snak = FieldModel<address, 27, 1>;\n    using epdis = FieldModel<address,\
    \ 30, 1>;\n    using epena = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 2> mpsiz;\n      BitFieldModel<15,\
    \ 1> usbaep;\n      BitFieldModel<17, 1> naksts;\n      BitFieldModel<18, 2> eptyp;\n\
    \      BitFieldModel<21, 1> stall;\n      BitFieldModel<22, 4> txfnum;\n     \
    \ BitFieldModel<26, 1> cnak;\n      BitFieldModel<27, 1> snak;\n      BitFieldModel<30,\
    \ 1> epdis;\n      BitFieldModel<31, 1> epena;\n    };\n  };\n\npublic:\n  using\
    \ fs_diepctl0 = Fs_diepctl0Reg<BaseAddress + 0x0100>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Diepctl1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using epena = FieldModel<address, 31, 1>;\n    using epdis = FieldModel<address,\
    \ 30, 1>;\n    using soddfrm_sd1pid = FieldModel<address, 29, 1>;\n    using sd0pid_sevnfrm\
    \ = FieldModel<address, 28, 1>;\n    using snak = FieldModel<address, 27, 1>;\n\
    \    using cnak = FieldModel<address, 26, 1>;\n    using txfnum = FieldModel<address,\
    \ 22, 4>;\n    using stall = FieldModel<address, 21, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using naksts = FieldModel<address, 17, 1>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 1>;\n    using usbaep = FieldModel<address, 15, 1>;\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<31, 1> epena;\n      BitFieldModel<30,\
    \ 1> epdis;\n      BitFieldModel<29, 1> soddfrm_sd1pid;\n      BitFieldModel<28,\
    \ 1> sd0pid_sevnfrm;\n      BitFieldModel<27, 1> snak;\n      BitFieldModel<26,\
    \ 1> cnak;\n      BitFieldModel<22, 4> txfnum;\n      BitFieldModel<21, 1> stall;\n\
    \      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<17, 1> naksts;\n     \
    \ BitFieldModel<16, 1> eonum_dpid;\n      BitFieldModel<15, 1> usbaep;\n     \
    \ BitFieldModel<0, 11> mpsiz;\n    };\n  };\n\npublic:\n  using diepctl1 = Diepctl1Reg<BaseAddress\
    \ + 0x0120>;\n\nprivate:\n  template<uint32_t address>\n  class Diepctl2Reg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using epena = FieldModel<address,\
    \ 31, 1>;\n    using epdis = FieldModel<address, 30, 1>;\n    using soddfrm =\
    \ FieldModel<address, 29, 1>;\n    using sd0pid_sevnfrm = FieldModel<address,\
    \ 28, 1>;\n    using snak = FieldModel<address, 27, 1>;\n    using cnak = FieldModel<address,\
    \ 26, 1>;\n    using txfnum = FieldModel<address, 22, 4>;\n    using stall = FieldModel<address,\
    \ 21, 1>;\n    using eptyp = FieldModel<address, 18, 2>;\n    using naksts = FieldModel<address,\
    \ 17, 1>;\n    using eonum_dpid = FieldModel<address, 16, 1>;\n    using usbaep\
    \ = FieldModel<address, 15, 1>;\n    using mpsiz = FieldModel<address, 0, 11>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<31,\
    \ 1> epena;\n      BitFieldModel<30, 1> epdis;\n      BitFieldModel<29, 1> soddfrm;\n\
    \      BitFieldModel<28, 1> sd0pid_sevnfrm;\n      BitFieldModel<27, 1> snak;\n\
    \      BitFieldModel<26, 1> cnak;\n      BitFieldModel<22, 4> txfnum;\n      BitFieldModel<21,\
    \ 1> stall;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<17, 1> naksts;\n\
    \      BitFieldModel<16, 1> eonum_dpid;\n      BitFieldModel<15, 1> usbaep;\n\
    \      BitFieldModel<0, 11> mpsiz;\n    };\n  };\n\npublic:\n  using diepctl2\
    \ = Diepctl2Reg<BaseAddress + 0x0140>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Diepctl3Reg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ epena = FieldModel<address, 31, 1>;\n    using epdis = FieldModel<address, 30,\
    \ 1>;\n    using soddfrm = FieldModel<address, 29, 1>;\n    using sd0pid_sevnfrm\
    \ = FieldModel<address, 28, 1>;\n    using snak = FieldModel<address, 27, 1>;\n\
    \    using cnak = FieldModel<address, 26, 1>;\n    using txfnum = FieldModel<address,\
    \ 22, 4>;\n    using stall = FieldModel<address, 21, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using naksts = FieldModel<address, 17, 1>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 1>;\n    using usbaep = FieldModel<address, 15, 1>;\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<31, 1> epena;\n      BitFieldModel<30,\
    \ 1> epdis;\n      BitFieldModel<29, 1> soddfrm;\n      BitFieldModel<28, 1> sd0pid_sevnfrm;\n\
    \      BitFieldModel<27, 1> snak;\n      BitFieldModel<26, 1> cnak;\n      BitFieldModel<22,\
    \ 4> txfnum;\n      BitFieldModel<21, 1> stall;\n      BitFieldModel<18, 2> eptyp;\n\
    \      BitFieldModel<17, 1> naksts;\n      BitFieldModel<16, 1> eonum_dpid;\n\
    \      BitFieldModel<15, 1> usbaep;\n      BitFieldModel<0, 11> mpsiz;\n    };\n\
    \  };\n\npublic:\n  using diepctl3 = Diepctl3Reg<BaseAddress + 0x0160>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepctl0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using epena = FieldModel<address, 31, 1>;\n    using epdis\
    \ = FieldModel<address, 30, 1>;\n    using snak = FieldModel<address, 27, 1>;\n\
    \    using cnak = FieldModel<address, 26, 1>;\n    using stall = FieldModel<address,\
    \ 21, 1>;\n    using snpm = FieldModel<address, 20, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using naksts = FieldModel<address, 17, 1>;\n    using usbaep =\
    \ FieldModel<address, 15, 1>;\n    using mpsiz = FieldModel<address, 0, 2>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<31,\
    \ 1> epena;\n      BitFieldModel<30, 1> epdis;\n      BitFieldModel<27, 1> snak;\n\
    \      BitFieldModel<26, 1> cnak;\n      BitFieldModel<21, 1> stall;\n      BitFieldModel<20,\
    \ 1> snpm;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<17, 1> naksts;\n\
    \      BitFieldModel<15, 1> usbaep;\n      BitFieldModel<0, 2> mpsiz;\n    };\n\
    \  };\n\npublic:\n  using doepctl0 = Doepctl0Reg<BaseAddress + 0x0300>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepctl1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using epena = FieldModel<address, 31, 1>;\n    using epdis\
    \ = FieldModel<address, 30, 1>;\n    using soddfrm = FieldModel<address, 29, 1>;\n\
    \    using sd0pid_sevnfrm = FieldModel<address, 28, 1>;\n    using snak = FieldModel<address,\
    \ 27, 1>;\n    using cnak = FieldModel<address, 26, 1>;\n    using stall = FieldModel<address,\
    \ 21, 1>;\n    using snpm = FieldModel<address, 20, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using naksts = FieldModel<address, 17, 1>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 1>;\n    using usbaep = FieldModel<address, 15, 1>;\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<31, 1> epena;\n      BitFieldModel<30,\
    \ 1> epdis;\n      BitFieldModel<29, 1> soddfrm;\n      BitFieldModel<28, 1> sd0pid_sevnfrm;\n\
    \      BitFieldModel<27, 1> snak;\n      BitFieldModel<26, 1> cnak;\n      BitFieldModel<21,\
    \ 1> stall;\n      BitFieldModel<20, 1> snpm;\n      BitFieldModel<18, 2> eptyp;\n\
    \      BitFieldModel<17, 1> naksts;\n      BitFieldModel<16, 1> eonum_dpid;\n\
    \      BitFieldModel<15, 1> usbaep;\n      BitFieldModel<0, 11> mpsiz;\n    };\n\
    \  };\n\npublic:\n  using doepctl1 = Doepctl1Reg<BaseAddress + 0x0320>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepctl2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using epena = FieldModel<address, 31, 1>;\n    using epdis\
    \ = FieldModel<address, 30, 1>;\n    using soddfrm = FieldModel<address, 29, 1>;\n\
    \    using sd0pid_sevnfrm = FieldModel<address, 28, 1>;\n    using snak = FieldModel<address,\
    \ 27, 1>;\n    using cnak = FieldModel<address, 26, 1>;\n    using stall = FieldModel<address,\
    \ 21, 1>;\n    using snpm = FieldModel<address, 20, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using naksts = FieldModel<address, 17, 1>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 1>;\n    using usbaep = FieldModel<address, 15, 1>;\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<31, 1> epena;\n      BitFieldModel<30,\
    \ 1> epdis;\n      BitFieldModel<29, 1> soddfrm;\n      BitFieldModel<28, 1> sd0pid_sevnfrm;\n\
    \      BitFieldModel<27, 1> snak;\n      BitFieldModel<26, 1> cnak;\n      BitFieldModel<21,\
    \ 1> stall;\n      BitFieldModel<20, 1> snpm;\n      BitFieldModel<18, 2> eptyp;\n\
    \      BitFieldModel<17, 1> naksts;\n      BitFieldModel<16, 1> eonum_dpid;\n\
    \      BitFieldModel<15, 1> usbaep;\n      BitFieldModel<0, 11> mpsiz;\n    };\n\
    \  };\n\npublic:\n  using doepctl2 = Doepctl2Reg<BaseAddress + 0x0340>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepctl3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using epena = FieldModel<address, 31, 1>;\n    using epdis\
    \ = FieldModel<address, 30, 1>;\n    using soddfrm = FieldModel<address, 29, 1>;\n\
    \    using sd0pid_sevnfrm = FieldModel<address, 28, 1>;\n    using snak = FieldModel<address,\
    \ 27, 1>;\n    using cnak = FieldModel<address, 26, 1>;\n    using stall = FieldModel<address,\
    \ 21, 1>;\n    using snpm = FieldModel<address, 20, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using naksts = FieldModel<address, 17, 1>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 1>;\n    using usbaep = FieldModel<address, 15, 1>;\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<31, 1> epena;\n      BitFieldModel<30,\
    \ 1> epdis;\n      BitFieldModel<29, 1> soddfrm;\n      BitFieldModel<28, 1> sd0pid_sevnfrm;\n\
    \      BitFieldModel<27, 1> snak;\n      BitFieldModel<26, 1> cnak;\n      BitFieldModel<21,\
    \ 1> stall;\n      BitFieldModel<20, 1> snpm;\n      BitFieldModel<18, 2> eptyp;\n\
    \      BitFieldModel<17, 1> naksts;\n      BitFieldModel<16, 1> eonum_dpid;\n\
    \      BitFieldModel<15, 1> usbaep;\n      BitFieldModel<0, 11> mpsiz;\n    };\n\
    \  };\n\npublic:\n  using doepctl3 = Doepctl3Reg<BaseAddress + 0x0360>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Diepint0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txfe = FieldModel<address, 7, 1>;\n    using inepne\
    \ = FieldModel<address, 6, 1>;\n    using ittxfe = FieldModel<address, 4, 1>;\n\
    \    using toc = FieldModel<address, 3, 1>;\n    using epdisd = FieldModel<address,\
    \ 1, 1>;\n    using xfrc = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<7, 1> txfe;\n      BitFieldModel<6,\
    \ 1> inepne;\n      BitFieldModel<4, 1> ittxfe;\n      BitFieldModel<3, 1> toc;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using diepint0 = Diepint0Reg<BaseAddress + 0x0108>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Diepint1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txfe = FieldModel<address, 7, 1>;\n    using inepne\
    \ = FieldModel<address, 6, 1>;\n    using ittxfe = FieldModel<address, 4, 1>;\n\
    \    using toc = FieldModel<address, 3, 1>;\n    using epdisd = FieldModel<address,\
    \ 1, 1>;\n    using xfrc = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<7, 1> txfe;\n      BitFieldModel<6,\
    \ 1> inepne;\n      BitFieldModel<4, 1> ittxfe;\n      BitFieldModel<3, 1> toc;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using diepint1 = Diepint1Reg<BaseAddress + 0x0128>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Diepint2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txfe = FieldModel<address, 7, 1>;\n    using inepne\
    \ = FieldModel<address, 6, 1>;\n    using ittxfe = FieldModel<address, 4, 1>;\n\
    \    using toc = FieldModel<address, 3, 1>;\n    using epdisd = FieldModel<address,\
    \ 1, 1>;\n    using xfrc = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<7, 1> txfe;\n      BitFieldModel<6,\
    \ 1> inepne;\n      BitFieldModel<4, 1> ittxfe;\n      BitFieldModel<3, 1> toc;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using diepint2 = Diepint2Reg<BaseAddress + 0x0148>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Diepint3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txfe = FieldModel<address, 7, 1>;\n    using inepne\
    \ = FieldModel<address, 6, 1>;\n    using ittxfe = FieldModel<address, 4, 1>;\n\
    \    using toc = FieldModel<address, 3, 1>;\n    using epdisd = FieldModel<address,\
    \ 1, 1>;\n    using xfrc = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<7, 1> txfe;\n      BitFieldModel<6,\
    \ 1> inepne;\n      BitFieldModel<4, 1> ittxfe;\n      BitFieldModel<3, 1> toc;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using diepint3 = Diepint3Reg<BaseAddress + 0x0168>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepint0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using b2bstup = FieldModel<address, 6, 1>;\n    using otepdis\
    \ = FieldModel<address, 4, 1>;\n    using stup = FieldModel<address, 3, 1>;\n\
    \    using epdisd = FieldModel<address, 1, 1>;\n    using xfrc = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<6,\
    \ 1> b2bstup;\n      BitFieldModel<4, 1> otepdis;\n      BitFieldModel<3, 1> stup;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using doepint0 = Doepint0Reg<BaseAddress + 0x0308>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepint1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using b2bstup = FieldModel<address, 6, 1>;\n    using otepdis\
    \ = FieldModel<address, 4, 1>;\n    using stup = FieldModel<address, 3, 1>;\n\
    \    using epdisd = FieldModel<address, 1, 1>;\n    using xfrc = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<6,\
    \ 1> b2bstup;\n      BitFieldModel<4, 1> otepdis;\n      BitFieldModel<3, 1> stup;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using doepint1 = Doepint1Reg<BaseAddress + 0x0328>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepint2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using b2bstup = FieldModel<address, 6, 1>;\n    using otepdis\
    \ = FieldModel<address, 4, 1>;\n    using stup = FieldModel<address, 3, 1>;\n\
    \    using epdisd = FieldModel<address, 1, 1>;\n    using xfrc = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<6,\
    \ 1> b2bstup;\n      BitFieldModel<4, 1> otepdis;\n      BitFieldModel<3, 1> stup;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using doepint2 = Doepint2Reg<BaseAddress + 0x0348>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Doepint3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using b2bstup = FieldModel<address, 6, 1>;\n    using otepdis\
    \ = FieldModel<address, 4, 1>;\n    using stup = FieldModel<address, 3, 1>;\n\
    \    using epdisd = FieldModel<address, 1, 1>;\n    using xfrc = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<6,\
    \ 1> b2bstup;\n      BitFieldModel<4, 1> otepdis;\n      BitFieldModel<3, 1> stup;\n\
    \      BitFieldModel<1, 1> epdisd;\n      BitFieldModel<0, 1> xfrc;\n    };\n\
    \  };\n\npublic:\n  using doepint3 = Doepint3Reg<BaseAddress + 0x0368>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Dieptsiz0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pktcnt = FieldModel<address, 19, 2>;\n    using xfrsiz\
    \ = FieldModel<address, 0, 7>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<19, 2> pktcnt;\n      BitFieldModel<0, 7> xfrsiz;\n\
    \    };\n  };\n\npublic:\n  using dieptsiz0 = Dieptsiz0Reg<BaseAddress + 0x0110>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Doeptsiz0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using stupcnt = FieldModel<address, 29, 2>;\n    using pktcnt\
    \ = FieldModel<address, 19, 1>;\n    using xfrsiz = FieldModel<address, 0, 7>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<29,\
    \ 2> stupcnt;\n      BitFieldModel<19, 1> pktcnt;\n      BitFieldModel<0, 7> xfrsiz;\n\
    \    };\n  };\n\npublic:\n  using doeptsiz0 = Doeptsiz0Reg<BaseAddress + 0x0310>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dieptsiz1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mcnt = FieldModel<address, 29, 2>;\n    using pktcnt\
    \ = FieldModel<address, 19, 10>;\n    using xfrsiz = FieldModel<address, 0, 19>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<29,\
    \ 2> mcnt;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<0, 19> xfrsiz;\n\
    \    };\n  };\n\npublic:\n  using dieptsiz1 = Dieptsiz1Reg<BaseAddress + 0x0130>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dieptsiz2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mcnt = FieldModel<address, 29, 2>;\n    using pktcnt\
    \ = FieldModel<address, 19, 10>;\n    using xfrsiz = FieldModel<address, 0, 19>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<29,\
    \ 2> mcnt;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<0, 19> xfrsiz;\n\
    \    };\n  };\n\npublic:\n  using dieptsiz2 = Dieptsiz2Reg<BaseAddress + 0x0150>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dieptsiz3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mcnt = FieldModel<address, 29, 2>;\n    using pktcnt\
    \ = FieldModel<address, 19, 10>;\n    using xfrsiz = FieldModel<address, 0, 19>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<29,\
    \ 2> mcnt;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<0, 19> xfrsiz;\n\
    \    };\n  };\n\npublic:\n  using dieptsiz3 = Dieptsiz3Reg<BaseAddress + 0x0170>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dtxfsts0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptfsav = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ineptfsav;\n\
    \    };\n  };\n\npublic:\n  using dtxfsts0 = Dtxfsts0Reg<BaseAddress + 0x0118>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dtxfsts1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptfsav = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ineptfsav;\n\
    \    };\n  };\n\npublic:\n  using dtxfsts1 = Dtxfsts1Reg<BaseAddress + 0x0138>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dtxfsts2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptfsav = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ineptfsav;\n\
    \    };\n  };\n\npublic:\n  using dtxfsts2 = Dtxfsts2Reg<BaseAddress + 0x0158>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Dtxfsts3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptfsav = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ineptfsav;\n\
    \    };\n  };\n\npublic:\n  using dtxfsts3 = Dtxfsts3Reg<BaseAddress + 0x0178>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Doeptsiz1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxdpid_stupcnt = FieldModel<address, 29, 2>;\n    using\
    \ pktcnt = FieldModel<address, 19, 10>;\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<29,\
    \ 2> rxdpid_stupcnt;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n    };\n  };\n\npublic:\n  using doeptsiz1 = Doeptsiz1Reg<BaseAddress\
    \ + 0x0330>;\n\nprivate:\n  template<uint32_t address>\n  class Doeptsiz2Reg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using rxdpid_stupcnt = FieldModel<address,\
    \ 29, 2>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using xfrsiz =\
    \ FieldModel<address, 0, 19>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<29, 2> rxdpid_stupcnt;\n      BitFieldModel<19,\
    \ 10> pktcnt;\n      BitFieldModel<0, 19> xfrsiz;\n    };\n  };\n\npublic:\n \
    \ using doeptsiz2 = Doeptsiz2Reg<BaseAddress + 0x0350>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Doeptsiz3Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using rxdpid_stupcnt = FieldModel<address, 29, 2>;\n    using pktcnt = FieldModel<address,\
    \ 19, 10>;\n    using xfrsiz = FieldModel<address, 0, 19>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<0, 19> xfrsiz;\n   \
    \ };\n  };\n\npublic:\n  using doeptsiz3 = Doeptsiz3Reg<BaseAddress + 0x0370>;\n\
    private:\n  template<uint32_t address, uint32_t bankOffset>\n  class DiepctlxBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using epena\
    \ = FieldModel<address, 31, 1, bankOffset>;\n    using epdis = FieldModel<address,\
    \ 30, 1, bankOffset>;\n    using soddfrm = FieldModel<address, 29, 1, bankOffset>;\n\
    \    using sd0pid_sevnfrm = FieldModel<address, 28, 1, bankOffset>;\n    using\
    \ snak = FieldModel<address, 27, 1, bankOffset>;\n    using cnak = FieldModel<address,\
    \ 26, 1, bankOffset>;\n    using txfnum = FieldModel<address, 22, 4, bankOffset>;\n\
    \    using stall = FieldModel<address, 21, 1, bankOffset>;\n    using eptyp =\
    \ FieldModel<address, 18, 2, bankOffset>;\n    using naksts = FieldModel<address,\
    \ 17, 1, bankOffset>;\n    using eonum_dpid = FieldModel<address, 16, 1, bankOffset>;\n\
    \    using usbaep = FieldModel<address, 15, 1, bankOffset>;\n    using mpsiz =\
    \ FieldModel<address, 0, 11, bankOffset>;\n  };\n\npublic:\n  using diepctlx =\
    \ DiepctlxBankReg<BaseAddress + 0x0140, 0x0020>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class DoepctlxBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using epena = FieldModel<address, 31, 1, bankOffset>;\n\
    \    using epdis = FieldModel<address, 30, 1, bankOffset>;\n    using soddfrm\
    \ = FieldModel<address, 29, 1, bankOffset>;\n    using sd0pid_sevnfrm = FieldModel<address,\
    \ 28, 1, bankOffset>;\n    using snak = FieldModel<address, 27, 1, bankOffset>;\n\
    \    using cnak = FieldModel<address, 26, 1, bankOffset>;\n    using stall = FieldModel<address,\
    \ 21, 1, bankOffset>;\n    using snpm = FieldModel<address, 20, 1, bankOffset>;\n\
    \    using eptyp = FieldModel<address, 18, 2, bankOffset>;\n    using naksts =\
    \ FieldModel<address, 17, 1, bankOffset>;\n    using eonum_dpid = FieldModel<address,\
    \ 16, 1, bankOffset>;\n    using usbaep = FieldModel<address, 15, 1, bankOffset>;\n\
    \    using mpsiz = FieldModel<address, 0, 11, bankOffset>;\n  };\n\npublic:\n\
    \  using doepctlx = DoepctlxBankReg<BaseAddress + 0x0320, 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address, uint32_t bankOffset>\n  class DiepintxBankReg :\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using txfe\
    \ = FieldModel<address, 7, 1, bankOffset>;\n    using inepne = FieldModel<address,\
    \ 6, 1, bankOffset>;\n    using ittxfe = FieldModel<address, 4, 1, bankOffset>;\n\
    \    using toc = FieldModel<address, 3, 1, bankOffset>;\n    using epdisd = FieldModel<address,\
    \ 1, 1, bankOffset>;\n    using xfrc = FieldModel<address, 0, 1, bankOffset>;\n\
    \  };\n\npublic:\n  using diepintx = DiepintxBankReg<BaseAddress + 0x0108, 0x0020>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class DoepintxBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using b2bstup\
    \ = FieldModel<address, 6, 1, bankOffset>;\n    using otepdis = FieldModel<address,\
    \ 4, 1, bankOffset>;\n    using stup = FieldModel<address, 3, 1, bankOffset>;\n\
    \    using epdisd = FieldModel<address, 1, 1, bankOffset>;\n    using xfrc = FieldModel<address,\
    \ 0, 1, bankOffset>;\n  };\n\npublic:\n  using doepintx = DoepintxBankReg<BaseAddress\
    \ + 0x0308, 0x0020>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n\
    \  class DieptsizxBankReg : public RegisterBankModel<address, bankOffset>\n  {\n\
    \  public:\n    using mcnt = FieldModel<address, 29, 2, bankOffset>;\n    using\
    \ pktcnt = FieldModel<address, 19, 10, bankOffset>;\n    using xfrsiz = FieldModel<address,\
    \ 0, 19, bankOffset>;\n  };\n\npublic:\n  using dieptsizx = DieptsizxBankReg<BaseAddress\
    \ + 0x0130, 0x0020>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n\
    \  class DtxfstsxBankReg : public RegisterBankModel<address, bankOffset>\n  {\n\
    \  public:\n    using ineptfsav = FieldModel<address, 0, 16, bankOffset>;\n  };\n\
    \npublic:\n  using dtxfstsx = DtxfstsxBankReg<BaseAddress + 0x0118, 0x0020>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class DoeptsizxBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using rxdpid_stupcnt\
    \ = FieldModel<address, 29, 2, bankOffset>;\n    using pktcnt = FieldModel<address,\
    \ 19, 10, bankOffset>;\n    using xfrsiz = FieldModel<address, 0, 19, bankOffset>;\n\
    \  };\n\npublic:\n  using doeptsizx = DoeptsizxBankReg<BaseAddress + 0x0330, 0x0020>;\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_DEVICE_H */\n"
  name: OTG_FS_DEVICE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_GLOBAL_H\n#define DRAL_STM32F411_OTG_FS_GLOBAL_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_global\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Fs_gotgctlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using srqscs = FieldModel<address, 0, 1>;\n    using srq\
    \ = FieldModel<address, 1, 1>;\n    using avaloen = FieldModel<address, 4, 1>;\n\
    \    using bvaloen = FieldModel<address, 6, 1>;\n    using bvaloval = FieldModel<address,\
    \ 7, 1>;\n    using hngscs = FieldModel<address, 8, 1>;\n    using hnprq = FieldModel<address,\
    \ 9, 1>;\n    using hshnpen = FieldModel<address, 10, 1>;\n    using dhnpen =\
    \ FieldModel<address, 11, 1>;\n    using cidsts = FieldModel<address, 16, 1>;\n\
    \    using dbct = FieldModel<address, 17, 1>;\n    using asvld = FieldModel<address,\
    \ 18, 1>;\n    using bsvld = FieldModel<address, 19, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> srqscs;\n     \
    \ BitFieldModel<1, 1> srq;\n      BitFieldModel<4, 1> avaloen;\n      BitFieldModel<6,\
    \ 1> bvaloen;\n      BitFieldModel<7, 1> bvaloval;\n      BitFieldModel<8, 1>\
    \ hngscs;\n      BitFieldModel<9, 1> hnprq;\n      BitFieldModel<10, 1> hshnpen;\n\
    \      BitFieldModel<11, 1> dhnpen;\n      BitFieldModel<16, 1> cidsts;\n    \
    \  BitFieldModel<17, 1> dbct;\n      BitFieldModel<18, 1> asvld;\n      BitFieldModel<19,\
    \ 1> bsvld;\n    };\n  };\n\npublic:\n  using fs_gotgctl = Fs_gotgctlReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_gotgintReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using sedet = FieldModel<address,\
    \ 2, 1>;\n    using srsschg = FieldModel<address, 8, 1>;\n    using hnsschg =\
    \ FieldModel<address, 9, 1>;\n    using hngdet = FieldModel<address, 17, 1>;\n\
    \    using adtochg = FieldModel<address, 18, 1>;\n    using dbcdne = FieldModel<address,\
    \ 19, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<2,\
    \ 1> sedet;\n      BitFieldModel<8, 1> srsschg;\n      BitFieldModel<9, 1> hnsschg;\n\
    \      BitFieldModel<17, 1> hngdet;\n      BitFieldModel<18, 1> adtochg;\n   \
    \   BitFieldModel<19, 1> dbcdne;\n    };\n  };\n\npublic:\n  using fs_gotgint\
    \ = Fs_gotgintReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_gahbcfgReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ gint = FieldModel<address, 0, 1>;\n    using txfelvl = FieldModel<address, 7,\
    \ 1>;\n    using ptxfelvl = FieldModel<address, 8, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> gint;\n      BitFieldModel<7,\
    \ 1> txfelvl;\n      BitFieldModel<8, 1> ptxfelvl;\n    };\n  };\n\npublic:\n\
    \  using fs_gahbcfg = Fs_gahbcfgReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_gusbcfgReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using tocal = FieldModel<address, 0, 3>;\n    using physel = FieldModel<address,\
    \ 6, 1>;\n    using srpcap = FieldModel<address, 8, 1>;\n    using hnpcap = FieldModel<address,\
    \ 9, 1>;\n    using trdt = FieldModel<address, 10, 4>;\n    using fhmod = FieldModel<address,\
    \ 29, 1>;\n    using fdmod = FieldModel<address, 30, 1>;\n    using ctxpkt = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 3> tocal;\n      BitFieldModel<6, 1> physel;\n      BitFieldModel<8, 1> srpcap;\n\
    \      BitFieldModel<9, 1> hnpcap;\n      BitFieldModel<10, 4> trdt;\n      BitFieldModel<29,\
    \ 1> fhmod;\n      BitFieldModel<30, 1> fdmod;\n      BitFieldModel<31, 1> ctxpkt;\n\
    \    };\n  };\n\npublic:\n  using fs_gusbcfg = Fs_gusbcfgReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_grstctlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using csrst = FieldModel<address, 0, 1>;\n    using hsrst\
    \ = FieldModel<address, 1, 1>;\n    using fcrst = FieldModel<address, 2, 1>;\n\
    \    using rxfflsh = FieldModel<address, 4, 1>;\n    using txfflsh = FieldModel<address,\
    \ 5, 1>;\n    using txfnum = FieldModel<address, 6, 5>;\n    using ahbidl = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> csrst;\n      BitFieldModel<1, 1> hsrst;\n      BitFieldModel<2, 1> fcrst;\n\
    \      BitFieldModel<4, 1> rxfflsh;\n      BitFieldModel<5, 1> txfflsh;\n    \
    \  BitFieldModel<6, 5> txfnum;\n      BitFieldModel<31, 1> ahbidl;\n    };\n \
    \ };\n\npublic:\n  using fs_grstctl = Fs_grstctlReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class Fs_gintstsReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cmod = FieldModel<address, 0, 1>;\n    using mmis =\
    \ FieldModel<address, 1, 1>;\n    using otgint = FieldModel<address, 2, 1>;\n\
    \    using sof = FieldModel<address, 3, 1>;\n    using rxflvl = FieldModel<address,\
    \ 4, 1>;\n    using nptxfe = FieldModel<address, 5, 1>;\n    using ginakeff =\
    \ FieldModel<address, 6, 1>;\n    using goutnakeff = FieldModel<address, 7, 1>;\n\
    \    using esusp = FieldModel<address, 10, 1>;\n    using usbsusp = FieldModel<address,\
    \ 11, 1>;\n    using usbrst = FieldModel<address, 12, 1>;\n    using enumdne =\
    \ FieldModel<address, 13, 1>;\n    using isoodrp = FieldModel<address, 14, 1>;\n\
    \    using eopf = FieldModel<address, 15, 1>;\n    using iepint = FieldModel<address,\
    \ 18, 1>;\n    using oepint = FieldModel<address, 19, 1>;\n    using iisoixfr\
    \ = FieldModel<address, 20, 1>;\n    using ipxfr_incompisoout = FieldModel<address,\
    \ 21, 1>;\n    using hprtint = FieldModel<address, 24, 1>;\n    using hcint =\
    \ FieldModel<address, 25, 1>;\n    using ptxfe = FieldModel<address, 26, 1>;\n\
    \    using cidschg = FieldModel<address, 28, 1>;\n    using discint = FieldModel<address,\
    \ 29, 1>;\n    using srqint = FieldModel<address, 30, 1>;\n    using wkupint =\
    \ FieldModel<address, 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 1> cmod;\n      BitFieldModel<1, 1> mmis;\n \
    \     BitFieldModel<2, 1> otgint;\n      BitFieldModel<3, 1> sof;\n      BitFieldModel<4,\
    \ 1> rxflvl;\n      BitFieldModel<5, 1> nptxfe;\n      BitFieldModel<6, 1> ginakeff;\n\
    \      BitFieldModel<7, 1> goutnakeff;\n      BitFieldModel<10, 1> esusp;\n  \
    \    BitFieldModel<11, 1> usbsusp;\n      BitFieldModel<12, 1> usbrst;\n     \
    \ BitFieldModel<13, 1> enumdne;\n      BitFieldModel<14, 1> isoodrp;\n      BitFieldModel<15,\
    \ 1> eopf;\n      BitFieldModel<18, 1> iepint;\n      BitFieldModel<19, 1> oepint;\n\
    \      BitFieldModel<20, 1> iisoixfr;\n      BitFieldModel<21, 1> ipxfr_incompisoout;\n\
    \      BitFieldModel<24, 1> hprtint;\n      BitFieldModel<25, 1> hcint;\n    \
    \  BitFieldModel<26, 1> ptxfe;\n      BitFieldModel<28, 1> cidschg;\n      BitFieldModel<29,\
    \ 1> discint;\n      BitFieldModel<30, 1> srqint;\n      BitFieldModel<31, 1>\
    \ wkupint;\n    };\n  };\n\npublic:\n  using fs_gintsts = Fs_gintstsReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_gintmskReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using mmism = FieldModel<address,\
    \ 1, 1>;\n    using otgint = FieldModel<address, 2, 1>;\n    using sofm = FieldModel<address,\
    \ 3, 1>;\n    using rxflvlm = FieldModel<address, 4, 1>;\n    using nptxfem =\
    \ FieldModel<address, 5, 1>;\n    using ginakeffm = FieldModel<address, 6, 1>;\n\
    \    using gonakeffm = FieldModel<address, 7, 1>;\n    using esuspm = FieldModel<address,\
    \ 10, 1>;\n    using usbsuspm = FieldModel<address, 11, 1>;\n    using usbrst\
    \ = FieldModel<address, 12, 1>;\n    using enumdnem = FieldModel<address, 13,\
    \ 1>;\n    using isoodrpm = FieldModel<address, 14, 1>;\n    using eopfm = FieldModel<address,\
    \ 15, 1>;\n    using epmism = FieldModel<address, 17, 1>;\n    using iepint =\
    \ FieldModel<address, 18, 1>;\n    using oepint = FieldModel<address, 19, 1>;\n\
    \    using iisoixfrm = FieldModel<address, 20, 1>;\n    using ipxfrm_iisooxfrm\
    \ = FieldModel<address, 21, 1>;\n    using prtim = FieldModel<address, 24, 1>;\n\
    \    using hcim = FieldModel<address, 25, 1>;\n    using ptxfem = FieldModel<address,\
    \ 26, 1>;\n    using cidschgm = FieldModel<address, 28, 1>;\n    using discint\
    \ = FieldModel<address, 29, 1>;\n    using srqim = FieldModel<address, 30, 1>;\n\
    \    using wuim = FieldModel<address, 31, 1>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<1, 1> mmism;\n      BitFieldModel<2,\
    \ 1> otgint;\n      BitFieldModel<3, 1> sofm;\n      BitFieldModel<4, 1> rxflvlm;\n\
    \      BitFieldModel<5, 1> nptxfem;\n      BitFieldModel<6, 1> ginakeffm;\n  \
    \    BitFieldModel<7, 1> gonakeffm;\n      BitFieldModel<10, 1> esuspm;\n    \
    \  BitFieldModel<11, 1> usbsuspm;\n      BitFieldModel<12, 1> usbrst;\n      BitFieldModel<13,\
    \ 1> enumdnem;\n      BitFieldModel<14, 1> isoodrpm;\n      BitFieldModel<15,\
    \ 1> eopfm;\n      BitFieldModel<17, 1> epmism;\n      BitFieldModel<18, 1> iepint;\n\
    \      BitFieldModel<19, 1> oepint;\n      BitFieldModel<20, 1> iisoixfrm;\n \
    \     BitFieldModel<21, 1> ipxfrm_iisooxfrm;\n      BitFieldModel<24, 1> prtim;\n\
    \      BitFieldModel<25, 1> hcim;\n      BitFieldModel<26, 1> ptxfem;\n      BitFieldModel<28,\
    \ 1> cidschgm;\n      BitFieldModel<29, 1> discint;\n      BitFieldModel<30, 1>\
    \ srqim;\n      BitFieldModel<31, 1> wuim;\n    };\n  };\n\npublic:\n  using fs_gintmsk\
    \ = Fs_gintmskReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_grxstsr_deviceReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using epnum = FieldModel<address, 0, 4>;\n    using bcnt = FieldModel<address,\
    \ 4, 11>;\n    using dpid = FieldModel<address, 15, 2>;\n    using pktsts = FieldModel<address,\
    \ 17, 4>;\n    using frmnum = FieldModel<address, 21, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 4> epnum;\n      BitFieldModel<4,\
    \ 11> bcnt;\n      BitFieldModel<15, 2> dpid;\n      BitFieldModel<17, 4> pktsts;\n\
    \      BitFieldModel<21, 4> frmnum;\n    };\n  };\n\npublic:\n  using fs_grxstsr_device\
    \ = Fs_grxstsr_deviceReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_grxstsp_deviceReg : public RegisterModel<address>\n  {\n\
    \  public:\n    using epnum = FieldModel<address, 0, 4>;\n    using bcnt = FieldModel<address,\
    \ 4, 11>;\n    using dpid = FieldModel<address, 15, 2>;\n    using pktsts = FieldModel<address,\
    \ 17, 4>;\n    using frmnum = FieldModel<address, 21, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 4> epnum;\n      BitFieldModel<4,\
    \ 11> bcnt;\n      BitFieldModel<15, 2> dpid;\n      BitFieldModel<17, 4> pktsts;\n\
    \      BitFieldModel<21, 4> frmnum;\n    };\n  };\n\npublic:\n  using fs_grxstsp_device\
    \ = Fs_grxstsp_deviceReg<BaseAddress + 0x0020>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_grxstsr_hostReg : public RegisterModel<address>\n  {\n\
    \  public:\n    using epnum = FieldModel<address, 0, 4>;\n    using bcnt = FieldModel<address,\
    \ 4, 11>;\n    using dpid = FieldModel<address, 15, 2>;\n    using pktsts = FieldModel<address,\
    \ 17, 4>;\n    using frmnum = FieldModel<address, 21, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 4> epnum;\n      BitFieldModel<4,\
    \ 11> bcnt;\n      BitFieldModel<15, 2> dpid;\n      BitFieldModel<17, 4> pktsts;\n\
    \      BitFieldModel<21, 4> frmnum;\n    };\n  };\n\npublic:\n  using fs_grxstsr_host\
    \ = Fs_grxstsr_hostReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_grxstsp_hostReg : public RegisterModel<address>\n  {\n\
    \  public:\n    using epnum = FieldModel<address, 0, 4>;\n    using bcnt = FieldModel<address,\
    \ 4, 11>;\n    using dpid = FieldModel<address, 15, 2>;\n    using pktsts = FieldModel<address,\
    \ 17, 4>;\n    using frmnum = FieldModel<address, 21, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 4> epnum;\n      BitFieldModel<4,\
    \ 11> bcnt;\n      BitFieldModel<15, 2> dpid;\n      BitFieldModel<17, 4> pktsts;\n\
    \      BitFieldModel<21, 4> frmnum;\n    };\n  };\n\npublic:\n  using fs_grxstsp_host\
    \ = Fs_grxstsp_hostReg<BaseAddress + 0x0020>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_grxfsizReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using rxfd = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<0, 16> rxfd;\n    };\n  };\n\n\
    public:\n  using fs_grxfsiz = Fs_grxfsizReg<BaseAddress + 0x0024>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Fs_gnptxfsiz_deviceReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tx0fsa = FieldModel<address, 0, 16>;\n    using tx0fd\
    \ = FieldModel<address, 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> tx0fsa;\n      BitFieldModel<16, 16> tx0fd;\n\
    \    };\n  };\n\npublic:\n  using fs_gnptxfsiz_device = Fs_gnptxfsiz_deviceReg<BaseAddress\
    \ + 0x0028>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_gnptxfsiz_hostReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using nptxfsa = FieldModel<address,\
    \ 0, 16>;\n    using nptxfd = FieldModel<address, 16, 16>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> nptxfsa;\n   \
    \   BitFieldModel<16, 16> nptxfd;\n    };\n  };\n\npublic:\n  using fs_gnptxfsiz_host\
    \ = Fs_gnptxfsiz_hostReg<BaseAddress + 0x0028>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_gnptxstsReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using nptxfsav = FieldModel<address, 0, 16>;\n    using nptqxsav = FieldModel<address,\
    \ 16, 8>;\n    using nptxqtop = FieldModel<address, 24, 7>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> nptxfsav;\n\
    \      BitFieldModel<16, 8> nptqxsav;\n      BitFieldModel<24, 7> nptxqtop;\n\
    \    };\n  };\n\npublic:\n  using fs_gnptxsts = Fs_gnptxstsReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_gccfgReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pwrdwn = FieldModel<address, 16, 1>;\n    using vbusasen\
    \ = FieldModel<address, 18, 1>;\n    using vbusbsen = FieldModel<address, 19,\
    \ 1>;\n    using sofouten = FieldModel<address, 20, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 1> pwrdwn;\n    \
    \  BitFieldModel<18, 1> vbusasen;\n      BitFieldModel<19, 1> vbusbsen;\n    \
    \  BitFieldModel<20, 1> sofouten;\n    };\n  };\n\npublic:\n  using fs_gccfg =\
    \ Fs_gccfgReg<BaseAddress + 0x0038>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_cidReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ product_id = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> product_id;\n    };\n  };\n\
    \npublic:\n  using fs_cid = Fs_cidReg<BaseAddress + 0x003C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_hptxfsizReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ptxsa = FieldModel<address, 0, 16>;\n    using ptxfsiz = FieldModel<address,\
    \ 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ptxsa;\n      BitFieldModel<16, 16> ptxfsiz;\n    };\n  };\n\npublic:\n\
    \  using fs_hptxfsiz = Fs_hptxfsizReg<BaseAddress + 0x0100>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_dieptxf1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ineptxsa = FieldModel<address, 0, 16>;\n    using ineptxfd = FieldModel<address,\
    \ 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ineptxsa;\n      BitFieldModel<16, 16> ineptxfd;\n    };\n  };\n\npublic:\n\
    \  using fs_dieptxf1 = Fs_dieptxf1Reg<BaseAddress + 0x0104>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_dieptxf2Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ineptxsa = FieldModel<address, 0, 16>;\n    using ineptxfd = FieldModel<address,\
    \ 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ineptxsa;\n      BitFieldModel<16, 16> ineptxfd;\n    };\n  };\n\npublic:\n\
    \  using fs_dieptxf2 = Fs_dieptxf2Reg<BaseAddress + 0x0108>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_dieptxf3Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ineptxsa = FieldModel<address, 0, 16>;\n    using ineptxfd = FieldModel<address,\
    \ 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ineptxsa;\n      BitFieldModel<16, 16> ineptxfd;\n    };\n  };\n\npublic:\n\
    \  using fs_dieptxf3 = Fs_dieptxf3Reg<BaseAddress + 0x010C>;\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class Fs_grxstsx_deviceBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using epnum = FieldModel<address, 0, 4, bankOffset>;\n\
    \    using bcnt = FieldModel<address, 4, 11, bankOffset>;\n    using dpid = FieldModel<address,\
    \ 15, 2, bankOffset>;\n    using pktsts = FieldModel<address, 17, 4, bankOffset>;\n\
    \    using frmnum = FieldModel<address, 21, 4, bankOffset>;\n  };\n\npublic:\n\
    \  using fs_grxstsx_device = Fs_grxstsx_deviceBankReg<BaseAddress + 0x001C, 0x0004>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class Fs_grxstsx_hostBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using epnum\
    \ = FieldModel<address, 0, 4, bankOffset>;\n    using bcnt = FieldModel<address,\
    \ 4, 11, bankOffset>;\n    using dpid = FieldModel<address, 15, 2, bankOffset>;\n\
    \    using pktsts = FieldModel<address, 17, 4, bankOffset>;\n    using frmnum\
    \ = FieldModel<address, 21, 4, bankOffset>;\n  };\n\npublic:\n  using fs_grxstsx_host\
    \ = Fs_grxstsx_hostBankReg<BaseAddress + 0x001C, 0x0004>;\n};\n\n}\n\n#endif /*\
    \ DRAL_STM32F411_OTG_FS_GLOBAL_H */\n"
  name: OTG_FS_GLOBAL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_HOST_H\n#define DRAL_STM32F411_OTG_FS_HOST_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_host\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Fs_hcfgReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using fslspcs = FieldModel<address, 0, 2>;\n    using fslss\
    \ = FieldModel<address, 2, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 2> fslspcs;\n      BitFieldModel<2, 1> fslss;\n\
    \    };\n  };\n\npublic:\n  using fs_hcfg = Fs_hcfgReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class HfirReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using frivl = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> frivl;\n\
    \    };\n  };\n\npublic:\n  using hfir = HfirReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Fs_hfnumReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using frnum = FieldModel<address, 0, 16>;\n    using ftrem\
    \ = FieldModel<address, 16, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> frnum;\n      BitFieldModel<16, 16> ftrem;\n\
    \    };\n  };\n\npublic:\n  using fs_hfnum = Fs_hfnumReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hptxstsReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ptxfsavl = FieldModel<address, 0, 16>;\n    using ptxqsav\
    \ = FieldModel<address, 16, 8>;\n    using ptxqtop = FieldModel<address, 24, 8>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ptxfsavl;\n      BitFieldModel<16, 8> ptxqsav;\n      BitFieldModel<24,\
    \ 8> ptxqtop;\n    };\n  };\n\npublic:\n  using fs_hptxsts = Fs_hptxstsReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class HaintReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using haint = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> haint;\n    };\n  };\n\npublic:\n  using haint = HaintReg<BaseAddress +\
    \ 0x0014>;\n\nprivate:\n  template<uint32_t address>\n  class HaintmskReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using haintm = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> haintm;\n    };\n  };\n\npublic:\n  using haintmsk = HaintmskReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hprtReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using pcsts = FieldModel<address,\
    \ 0, 1>;\n    using pcdet = FieldModel<address, 1, 1>;\n    using pena = FieldModel<address,\
    \ 2, 1>;\n    using penchng = FieldModel<address, 3, 1>;\n    using poca = FieldModel<address,\
    \ 4, 1>;\n    using pocchng = FieldModel<address, 5, 1>;\n    using pres = FieldModel<address,\
    \ 6, 1>;\n    using psusp = FieldModel<address, 7, 1>;\n    using prst = FieldModel<address,\
    \ 8, 1>;\n    using plsts = FieldModel<address, 10, 2>;\n    using ppwr = FieldModel<address,\
    \ 12, 1>;\n    using ptctl = FieldModel<address, 13, 4>;\n    using pspd = FieldModel<address,\
    \ 17, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> pcsts;\n      BitFieldModel<1, 1> pcdet;\n      BitFieldModel<2, 1> pena;\n\
    \      BitFieldModel<3, 1> penchng;\n      BitFieldModel<4, 1> poca;\n      BitFieldModel<5,\
    \ 1> pocchng;\n      BitFieldModel<6, 1> pres;\n      BitFieldModel<7, 1> psusp;\n\
    \      BitFieldModel<8, 1> prst;\n      BitFieldModel<10, 2> plsts;\n      BitFieldModel<12,\
    \ 1> ppwr;\n      BitFieldModel<13, 4> ptctl;\n      BitFieldModel<17, 2> pspd;\n\
    \    };\n  };\n\npublic:\n  using fs_hprt = Fs_hprtReg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcchar0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum\
    \ = FieldModel<address, 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n\
    \    using lsdev = FieldModel<address, 17, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using mcnt = FieldModel<address, 20, 2>;\n    using dad = FieldModel<address,\
    \ 22, 7>;\n    using oddfrm = FieldModel<address, 29, 1>;\n    using chdis = FieldModel<address,\
    \ 30, 1>;\n    using chena = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 11> mpsiz;\n     \
    \ BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n      BitFieldModel<17,\
    \ 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20, 2> mcnt;\n\
    \      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n      BitFieldModel<30,\
    \ 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n  };\n\npublic:\n  using\
    \ fs_hcchar0 = Fs_hcchar0Reg<BaseAddress + 0x0100>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_hcchar1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum = FieldModel<address,\
    \ 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n    using lsdev = FieldModel<address,\
    \ 17, 1>;\n    using eptyp = FieldModel<address, 18, 2>;\n    using mcnt = FieldModel<address,\
    \ 20, 2>;\n    using dad = FieldModel<address, 22, 7>;\n    using oddfrm = FieldModel<address,\
    \ 29, 1>;\n    using chdis = FieldModel<address, 30, 1>;\n    using chena = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 11> mpsiz;\n      BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n\
    \      BitFieldModel<17, 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20,\
    \ 2> mcnt;\n      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n\
    \      BitFieldModel<30, 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n\
    \  };\n\npublic:\n  using fs_hcchar1 = Fs_hcchar1Reg<BaseAddress + 0x0120>;\n\n\
    private:\n  template<uint32_t address>\n  class Fs_hcchar2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum\
    \ = FieldModel<address, 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n\
    \    using lsdev = FieldModel<address, 17, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using mcnt = FieldModel<address, 20, 2>;\n    using dad = FieldModel<address,\
    \ 22, 7>;\n    using oddfrm = FieldModel<address, 29, 1>;\n    using chdis = FieldModel<address,\
    \ 30, 1>;\n    using chena = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 11> mpsiz;\n     \
    \ BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n      BitFieldModel<17,\
    \ 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20, 2> mcnt;\n\
    \      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n      BitFieldModel<30,\
    \ 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n  };\n\npublic:\n  using\
    \ fs_hcchar2 = Fs_hcchar2Reg<BaseAddress + 0x0140>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_hcchar3Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum = FieldModel<address,\
    \ 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n    using lsdev = FieldModel<address,\
    \ 17, 1>;\n    using eptyp = FieldModel<address, 18, 2>;\n    using mcnt = FieldModel<address,\
    \ 20, 2>;\n    using dad = FieldModel<address, 22, 7>;\n    using oddfrm = FieldModel<address,\
    \ 29, 1>;\n    using chdis = FieldModel<address, 30, 1>;\n    using chena = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 11> mpsiz;\n      BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n\
    \      BitFieldModel<17, 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20,\
    \ 2> mcnt;\n      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n\
    \      BitFieldModel<30, 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n\
    \  };\n\npublic:\n  using fs_hcchar3 = Fs_hcchar3Reg<BaseAddress + 0x0160>;\n\n\
    private:\n  template<uint32_t address>\n  class Fs_hcchar4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum\
    \ = FieldModel<address, 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n\
    \    using lsdev = FieldModel<address, 17, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using mcnt = FieldModel<address, 20, 2>;\n    using dad = FieldModel<address,\
    \ 22, 7>;\n    using oddfrm = FieldModel<address, 29, 1>;\n    using chdis = FieldModel<address,\
    \ 30, 1>;\n    using chena = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 11> mpsiz;\n     \
    \ BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n      BitFieldModel<17,\
    \ 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20, 2> mcnt;\n\
    \      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n      BitFieldModel<30,\
    \ 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n  };\n\npublic:\n  using\
    \ fs_hcchar4 = Fs_hcchar4Reg<BaseAddress + 0x0180>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_hcchar5Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum = FieldModel<address,\
    \ 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n    using lsdev = FieldModel<address,\
    \ 17, 1>;\n    using eptyp = FieldModel<address, 18, 2>;\n    using mcnt = FieldModel<address,\
    \ 20, 2>;\n    using dad = FieldModel<address, 22, 7>;\n    using oddfrm = FieldModel<address,\
    \ 29, 1>;\n    using chdis = FieldModel<address, 30, 1>;\n    using chena = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 11> mpsiz;\n      BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n\
    \      BitFieldModel<17, 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20,\
    \ 2> mcnt;\n      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n\
    \      BitFieldModel<30, 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n\
    \  };\n\npublic:\n  using fs_hcchar5 = Fs_hcchar5Reg<BaseAddress + 0x01A0>;\n\n\
    private:\n  template<uint32_t address>\n  class Fs_hcchar6Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum\
    \ = FieldModel<address, 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n\
    \    using lsdev = FieldModel<address, 17, 1>;\n    using eptyp = FieldModel<address,\
    \ 18, 2>;\n    using mcnt = FieldModel<address, 20, 2>;\n    using dad = FieldModel<address,\
    \ 22, 7>;\n    using oddfrm = FieldModel<address, 29, 1>;\n    using chdis = FieldModel<address,\
    \ 30, 1>;\n    using chena = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 11> mpsiz;\n     \
    \ BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n      BitFieldModel<17,\
    \ 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20, 2> mcnt;\n\
    \      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n      BitFieldModel<30,\
    \ 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n  };\n\npublic:\n  using\
    \ fs_hcchar6 = Fs_hcchar6Reg<BaseAddress + 0x01C0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Fs_hcchar7Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 11>;\n    using epnum = FieldModel<address,\
    \ 11, 4>;\n    using epdir = FieldModel<address, 15, 1>;\n    using lsdev = FieldModel<address,\
    \ 17, 1>;\n    using eptyp = FieldModel<address, 18, 2>;\n    using mcnt = FieldModel<address,\
    \ 20, 2>;\n    using dad = FieldModel<address, 22, 7>;\n    using oddfrm = FieldModel<address,\
    \ 29, 1>;\n    using chdis = FieldModel<address, 30, 1>;\n    using chena = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 11> mpsiz;\n      BitFieldModel<11, 4> epnum;\n      BitFieldModel<15, 1> epdir;\n\
    \      BitFieldModel<17, 1> lsdev;\n      BitFieldModel<18, 2> eptyp;\n      BitFieldModel<20,\
    \ 2> mcnt;\n      BitFieldModel<22, 7> dad;\n      BitFieldModel<29, 1> oddfrm;\n\
    \      BitFieldModel<30, 1> chdis;\n      BitFieldModel<31, 1> chena;\n    };\n\
    \  };\n\npublic:\n  using fs_hcchar7 = Fs_hcchar7Reg<BaseAddress + 0x01E0>;\n\n\
    private:\n  template<uint32_t address>\n  class Fs_hcint0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 1>;\n    using chh =\
    \ FieldModel<address, 1, 1>;\n    using stall = FieldModel<address, 3, 1>;\n \
    \   using nak = FieldModel<address, 4, 1>;\n    using ack = FieldModel<address,\
    \ 5, 1>;\n    using txerr = FieldModel<address, 7, 1>;\n    using bberr = FieldModel<address,\
    \ 8, 1>;\n    using frmor = FieldModel<address, 9, 1>;\n    using dterr = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrc;\n      BitFieldModel<1, 1> chh;\n      BitFieldModel<3, 1> stall;\n\
    \      BitFieldModel<4, 1> nak;\n      BitFieldModel<5, 1> ack;\n      BitFieldModel<7,\
    \ 1> txerr;\n      BitFieldModel<8, 1> bberr;\n      BitFieldModel<9, 1> frmor;\n\
    \      BitFieldModel<10, 1> dterr;\n    };\n  };\n\npublic:\n  using fs_hcint0\
    \ = Fs_hcint0Reg<BaseAddress + 0x0108>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcint1Reg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ xfrc = FieldModel<address, 0, 1>;\n    using chh = FieldModel<address, 1, 1>;\n\
    \    using stall = FieldModel<address, 3, 1>;\n    using nak = FieldModel<address,\
    \ 4, 1>;\n    using ack = FieldModel<address, 5, 1>;\n    using txerr = FieldModel<address,\
    \ 7, 1>;\n    using bberr = FieldModel<address, 8, 1>;\n    using frmor = FieldModel<address,\
    \ 9, 1>;\n    using dterr = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrc;\n      BitFieldModel<1,\
    \ 1> chh;\n      BitFieldModel<3, 1> stall;\n      BitFieldModel<4, 1> nak;\n\
    \      BitFieldModel<5, 1> ack;\n      BitFieldModel<7, 1> txerr;\n      BitFieldModel<8,\
    \ 1> bberr;\n      BitFieldModel<9, 1> frmor;\n      BitFieldModel<10, 1> dterr;\n\
    \    };\n  };\n\npublic:\n  using fs_hcint1 = Fs_hcint1Reg<BaseAddress + 0x0128>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcint2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 1>;\n    using chh =\
    \ FieldModel<address, 1, 1>;\n    using stall = FieldModel<address, 3, 1>;\n \
    \   using nak = FieldModel<address, 4, 1>;\n    using ack = FieldModel<address,\
    \ 5, 1>;\n    using txerr = FieldModel<address, 7, 1>;\n    using bberr = FieldModel<address,\
    \ 8, 1>;\n    using frmor = FieldModel<address, 9, 1>;\n    using dterr = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrc;\n      BitFieldModel<1, 1> chh;\n      BitFieldModel<3, 1> stall;\n\
    \      BitFieldModel<4, 1> nak;\n      BitFieldModel<5, 1> ack;\n      BitFieldModel<7,\
    \ 1> txerr;\n      BitFieldModel<8, 1> bberr;\n      BitFieldModel<9, 1> frmor;\n\
    \      BitFieldModel<10, 1> dterr;\n    };\n  };\n\npublic:\n  using fs_hcint2\
    \ = Fs_hcint2Reg<BaseAddress + 0x0148>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcint3Reg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ xfrc = FieldModel<address, 0, 1>;\n    using chh = FieldModel<address, 1, 1>;\n\
    \    using stall = FieldModel<address, 3, 1>;\n    using nak = FieldModel<address,\
    \ 4, 1>;\n    using ack = FieldModel<address, 5, 1>;\n    using txerr = FieldModel<address,\
    \ 7, 1>;\n    using bberr = FieldModel<address, 8, 1>;\n    using frmor = FieldModel<address,\
    \ 9, 1>;\n    using dterr = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrc;\n      BitFieldModel<1,\
    \ 1> chh;\n      BitFieldModel<3, 1> stall;\n      BitFieldModel<4, 1> nak;\n\
    \      BitFieldModel<5, 1> ack;\n      BitFieldModel<7, 1> txerr;\n      BitFieldModel<8,\
    \ 1> bberr;\n      BitFieldModel<9, 1> frmor;\n      BitFieldModel<10, 1> dterr;\n\
    \    };\n  };\n\npublic:\n  using fs_hcint3 = Fs_hcint3Reg<BaseAddress + 0x0168>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcint4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 1>;\n    using chh =\
    \ FieldModel<address, 1, 1>;\n    using stall = FieldModel<address, 3, 1>;\n \
    \   using nak = FieldModel<address, 4, 1>;\n    using ack = FieldModel<address,\
    \ 5, 1>;\n    using txerr = FieldModel<address, 7, 1>;\n    using bberr = FieldModel<address,\
    \ 8, 1>;\n    using frmor = FieldModel<address, 9, 1>;\n    using dterr = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrc;\n      BitFieldModel<1, 1> chh;\n      BitFieldModel<3, 1> stall;\n\
    \      BitFieldModel<4, 1> nak;\n      BitFieldModel<5, 1> ack;\n      BitFieldModel<7,\
    \ 1> txerr;\n      BitFieldModel<8, 1> bberr;\n      BitFieldModel<9, 1> frmor;\n\
    \      BitFieldModel<10, 1> dterr;\n    };\n  };\n\npublic:\n  using fs_hcint4\
    \ = Fs_hcint4Reg<BaseAddress + 0x0188>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcint5Reg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ xfrc = FieldModel<address, 0, 1>;\n    using chh = FieldModel<address, 1, 1>;\n\
    \    using stall = FieldModel<address, 3, 1>;\n    using nak = FieldModel<address,\
    \ 4, 1>;\n    using ack = FieldModel<address, 5, 1>;\n    using txerr = FieldModel<address,\
    \ 7, 1>;\n    using bberr = FieldModel<address, 8, 1>;\n    using frmor = FieldModel<address,\
    \ 9, 1>;\n    using dterr = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrc;\n      BitFieldModel<1,\
    \ 1> chh;\n      BitFieldModel<3, 1> stall;\n      BitFieldModel<4, 1> nak;\n\
    \      BitFieldModel<5, 1> ack;\n      BitFieldModel<7, 1> txerr;\n      BitFieldModel<8,\
    \ 1> bberr;\n      BitFieldModel<9, 1> frmor;\n      BitFieldModel<10, 1> dterr;\n\
    \    };\n  };\n\npublic:\n  using fs_hcint5 = Fs_hcint5Reg<BaseAddress + 0x01A8>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcint6Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 1>;\n    using chh =\
    \ FieldModel<address, 1, 1>;\n    using stall = FieldModel<address, 3, 1>;\n \
    \   using nak = FieldModel<address, 4, 1>;\n    using ack = FieldModel<address,\
    \ 5, 1>;\n    using txerr = FieldModel<address, 7, 1>;\n    using bberr = FieldModel<address,\
    \ 8, 1>;\n    using frmor = FieldModel<address, 9, 1>;\n    using dterr = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrc;\n      BitFieldModel<1, 1> chh;\n      BitFieldModel<3, 1> stall;\n\
    \      BitFieldModel<4, 1> nak;\n      BitFieldModel<5, 1> ack;\n      BitFieldModel<7,\
    \ 1> txerr;\n      BitFieldModel<8, 1> bberr;\n      BitFieldModel<9, 1> frmor;\n\
    \      BitFieldModel<10, 1> dterr;\n    };\n  };\n\npublic:\n  using fs_hcint6\
    \ = Fs_hcint6Reg<BaseAddress + 0x01C8>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcint7Reg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ xfrc = FieldModel<address, 0, 1>;\n    using chh = FieldModel<address, 1, 1>;\n\
    \    using stall = FieldModel<address, 3, 1>;\n    using nak = FieldModel<address,\
    \ 4, 1>;\n    using ack = FieldModel<address, 5, 1>;\n    using txerr = FieldModel<address,\
    \ 7, 1>;\n    using bberr = FieldModel<address, 8, 1>;\n    using frmor = FieldModel<address,\
    \ 9, 1>;\n    using dterr = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrc;\n      BitFieldModel<1,\
    \ 1> chh;\n      BitFieldModel<3, 1> stall;\n      BitFieldModel<4, 1> nak;\n\
    \      BitFieldModel<5, 1> ack;\n      BitFieldModel<7, 1> txerr;\n      BitFieldModel<8,\
    \ 1> bberr;\n      BitFieldModel<9, 1> frmor;\n      BitFieldModel<10, 1> dterr;\n\
    \    };\n  };\n\npublic:\n  using fs_hcint7 = Fs_hcint7Reg<BaseAddress + 0x01E8>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcintmsk0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrcm = FieldModel<address, 0, 1>;\n    using chhm\
    \ = FieldModel<address, 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n\
    \    using nakm = FieldModel<address, 4, 1>;\n    using ackm = FieldModel<address,\
    \ 5, 1>;\n    using nyet = FieldModel<address, 6, 1>;\n    using txerrm = FieldModel<address,\
    \ 7, 1>;\n    using bberrm = FieldModel<address, 8, 1>;\n    using frmorm = FieldModel<address,\
    \ 9, 1>;\n    using dterrm = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrcm;\n      BitFieldModel<1,\
    \ 1> chhm;\n      BitFieldModel<3, 1> stallm;\n      BitFieldModel<4, 1> nakm;\n\
    \      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6, 1> nyet;\n      BitFieldModel<7,\
    \ 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n      BitFieldModel<9, 1> frmorm;\n\
    \      BitFieldModel<10, 1> dterrm;\n    };\n  };\n\npublic:\n  using fs_hcintmsk0\
    \ = Fs_hcintmsk0Reg<BaseAddress + 0x010C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcintmsk1Reg : public RegisterModel<address>\n  {\n  public:\n   \
    \ using xfrcm = FieldModel<address, 0, 1>;\n    using chhm = FieldModel<address,\
    \ 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n    using nakm = FieldModel<address,\
    \ 4, 1>;\n    using ackm = FieldModel<address, 5, 1>;\n    using nyet = FieldModel<address,\
    \ 6, 1>;\n    using txerrm = FieldModel<address, 7, 1>;\n    using bberrm = FieldModel<address,\
    \ 8, 1>;\n    using frmorm = FieldModel<address, 9, 1>;\n    using dterrm = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrcm;\n      BitFieldModel<1, 1> chhm;\n      BitFieldModel<3, 1> stallm;\n\
    \      BitFieldModel<4, 1> nakm;\n      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6,\
    \ 1> nyet;\n      BitFieldModel<7, 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n\
    \      BitFieldModel<9, 1> frmorm;\n      BitFieldModel<10, 1> dterrm;\n    };\n\
    \  };\n\npublic:\n  using fs_hcintmsk1 = Fs_hcintmsk1Reg<BaseAddress + 0x012C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcintmsk2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrcm = FieldModel<address, 0, 1>;\n    using chhm\
    \ = FieldModel<address, 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n\
    \    using nakm = FieldModel<address, 4, 1>;\n    using ackm = FieldModel<address,\
    \ 5, 1>;\n    using nyet = FieldModel<address, 6, 1>;\n    using txerrm = FieldModel<address,\
    \ 7, 1>;\n    using bberrm = FieldModel<address, 8, 1>;\n    using frmorm = FieldModel<address,\
    \ 9, 1>;\n    using dterrm = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrcm;\n      BitFieldModel<1,\
    \ 1> chhm;\n      BitFieldModel<3, 1> stallm;\n      BitFieldModel<4, 1> nakm;\n\
    \      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6, 1> nyet;\n      BitFieldModel<7,\
    \ 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n      BitFieldModel<9, 1> frmorm;\n\
    \      BitFieldModel<10, 1> dterrm;\n    };\n  };\n\npublic:\n  using fs_hcintmsk2\
    \ = Fs_hcintmsk2Reg<BaseAddress + 0x014C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcintmsk3Reg : public RegisterModel<address>\n  {\n  public:\n   \
    \ using xfrcm = FieldModel<address, 0, 1>;\n    using chhm = FieldModel<address,\
    \ 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n    using nakm = FieldModel<address,\
    \ 4, 1>;\n    using ackm = FieldModel<address, 5, 1>;\n    using nyet = FieldModel<address,\
    \ 6, 1>;\n    using txerrm = FieldModel<address, 7, 1>;\n    using bberrm = FieldModel<address,\
    \ 8, 1>;\n    using frmorm = FieldModel<address, 9, 1>;\n    using dterrm = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrcm;\n      BitFieldModel<1, 1> chhm;\n      BitFieldModel<3, 1> stallm;\n\
    \      BitFieldModel<4, 1> nakm;\n      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6,\
    \ 1> nyet;\n      BitFieldModel<7, 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n\
    \      BitFieldModel<9, 1> frmorm;\n      BitFieldModel<10, 1> dterrm;\n    };\n\
    \  };\n\npublic:\n  using fs_hcintmsk3 = Fs_hcintmsk3Reg<BaseAddress + 0x016C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcintmsk4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrcm = FieldModel<address, 0, 1>;\n    using chhm\
    \ = FieldModel<address, 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n\
    \    using nakm = FieldModel<address, 4, 1>;\n    using ackm = FieldModel<address,\
    \ 5, 1>;\n    using nyet = FieldModel<address, 6, 1>;\n    using txerrm = FieldModel<address,\
    \ 7, 1>;\n    using bberrm = FieldModel<address, 8, 1>;\n    using frmorm = FieldModel<address,\
    \ 9, 1>;\n    using dterrm = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrcm;\n      BitFieldModel<1,\
    \ 1> chhm;\n      BitFieldModel<3, 1> stallm;\n      BitFieldModel<4, 1> nakm;\n\
    \      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6, 1> nyet;\n      BitFieldModel<7,\
    \ 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n      BitFieldModel<9, 1> frmorm;\n\
    \      BitFieldModel<10, 1> dterrm;\n    };\n  };\n\npublic:\n  using fs_hcintmsk4\
    \ = Fs_hcintmsk4Reg<BaseAddress + 0x018C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcintmsk5Reg : public RegisterModel<address>\n  {\n  public:\n   \
    \ using xfrcm = FieldModel<address, 0, 1>;\n    using chhm = FieldModel<address,\
    \ 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n    using nakm = FieldModel<address,\
    \ 4, 1>;\n    using ackm = FieldModel<address, 5, 1>;\n    using nyet = FieldModel<address,\
    \ 6, 1>;\n    using txerrm = FieldModel<address, 7, 1>;\n    using bberrm = FieldModel<address,\
    \ 8, 1>;\n    using frmorm = FieldModel<address, 9, 1>;\n    using dterrm = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrcm;\n      BitFieldModel<1, 1> chhm;\n      BitFieldModel<3, 1> stallm;\n\
    \      BitFieldModel<4, 1> nakm;\n      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6,\
    \ 1> nyet;\n      BitFieldModel<7, 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n\
    \      BitFieldModel<9, 1> frmorm;\n      BitFieldModel<10, 1> dterrm;\n    };\n\
    \  };\n\npublic:\n  using fs_hcintmsk5 = Fs_hcintmsk5Reg<BaseAddress + 0x01AC>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hcintmsk6Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrcm = FieldModel<address, 0, 1>;\n    using chhm\
    \ = FieldModel<address, 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n\
    \    using nakm = FieldModel<address, 4, 1>;\n    using ackm = FieldModel<address,\
    \ 5, 1>;\n    using nyet = FieldModel<address, 6, 1>;\n    using txerrm = FieldModel<address,\
    \ 7, 1>;\n    using bberrm = FieldModel<address, 8, 1>;\n    using frmorm = FieldModel<address,\
    \ 9, 1>;\n    using dterrm = FieldModel<address, 10, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> xfrcm;\n      BitFieldModel<1,\
    \ 1> chhm;\n      BitFieldModel<3, 1> stallm;\n      BitFieldModel<4, 1> nakm;\n\
    \      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6, 1> nyet;\n      BitFieldModel<7,\
    \ 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n      BitFieldModel<9, 1> frmorm;\n\
    \      BitFieldModel<10, 1> dterrm;\n    };\n  };\n\npublic:\n  using fs_hcintmsk6\
    \ = Fs_hcintmsk6Reg<BaseAddress + 0x01CC>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Fs_hcintmsk7Reg : public RegisterModel<address>\n  {\n  public:\n   \
    \ using xfrcm = FieldModel<address, 0, 1>;\n    using chhm = FieldModel<address,\
    \ 1, 1>;\n    using stallm = FieldModel<address, 3, 1>;\n    using nakm = FieldModel<address,\
    \ 4, 1>;\n    using ackm = FieldModel<address, 5, 1>;\n    using nyet = FieldModel<address,\
    \ 6, 1>;\n    using txerrm = FieldModel<address, 7, 1>;\n    using bberrm = FieldModel<address,\
    \ 8, 1>;\n    using frmorm = FieldModel<address, 9, 1>;\n    using dterrm = FieldModel<address,\
    \ 10, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> xfrcm;\n      BitFieldModel<1, 1> chhm;\n      BitFieldModel<3, 1> stallm;\n\
    \      BitFieldModel<4, 1> nakm;\n      BitFieldModel<5, 1> ackm;\n      BitFieldModel<6,\
    \ 1> nyet;\n      BitFieldModel<7, 1> txerrm;\n      BitFieldModel<8, 1> bberrm;\n\
    \      BitFieldModel<9, 1> frmorm;\n      BitFieldModel<10, 1> dterrm;\n    };\n\
    \  };\n\npublic:\n  using fs_hcintmsk7 = Fs_hcintmsk7Reg<BaseAddress + 0x01EC>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrsiz = FieldModel<address, 0, 19>;\n    using pktcnt\
    \ = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address, 29, 2>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz0 = Fs_hctsiz0Reg<BaseAddress\
    \ + 0x0110>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz1Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz1 = Fs_hctsiz1Reg<BaseAddress\
    \ + 0x0130>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz2Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz2 = Fs_hctsiz2Reg<BaseAddress\
    \ + 0x0150>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz3Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz3 = Fs_hctsiz3Reg<BaseAddress\
    \ + 0x0170>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz4Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz4 = Fs_hctsiz4Reg<BaseAddress\
    \ + 0x0190>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz5Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz5 = Fs_hctsiz5Reg<BaseAddress\
    \ + 0x01B0>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz6Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz6 = Fs_hctsiz6Reg<BaseAddress\
    \ + 0x01D0>;\n\nprivate:\n  template<uint32_t address>\n  class Fs_hctsiz7Reg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 19>;\n    using pktcnt = FieldModel<address, 19, 10>;\n    using dpid = FieldModel<address,\
    \ 29, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 19> xfrsiz;\n      BitFieldModel<19, 10> pktcnt;\n      BitFieldModel<29, 2>\
    \ dpid;\n    };\n  };\n\npublic:\n  using fs_hctsiz7 = Fs_hctsiz7Reg<BaseAddress\
    \ + 0x01F0>;\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class\
    \ Fs_hccharxBankReg : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 11, bankOffset>;\n    using epnum =\
    \ FieldModel<address, 11, 4, bankOffset>;\n    using epdir = FieldModel<address,\
    \ 15, 1, bankOffset>;\n    using lsdev = FieldModel<address, 17, 1, bankOffset>;\n\
    \    using eptyp = FieldModel<address, 18, 2, bankOffset>;\n    using mcnt = FieldModel<address,\
    \ 20, 2, bankOffset>;\n    using dad = FieldModel<address, 22, 7, bankOffset>;\n\
    \    using oddfrm = FieldModel<address, 29, 1, bankOffset>;\n    using chdis =\
    \ FieldModel<address, 30, 1, bankOffset>;\n    using chena = FieldModel<address,\
    \ 31, 1, bankOffset>;\n  };\n\npublic:\n  using fs_hccharx = Fs_hccharxBankReg<BaseAddress\
    \ + 0x0100, 0x0020>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n\
    \  class Fs_hcintxBankReg : public RegisterBankModel<address, bankOffset>\n  {\n\
    \  public:\n    using xfrc = FieldModel<address, 0, 1, bankOffset>;\n    using\
    \ chh = FieldModel<address, 1, 1, bankOffset>;\n    using stall = FieldModel<address,\
    \ 3, 1, bankOffset>;\n    using nak = FieldModel<address, 4, 1, bankOffset>;\n\
    \    using ack = FieldModel<address, 5, 1, bankOffset>;\n    using txerr = FieldModel<address,\
    \ 7, 1, bankOffset>;\n    using bberr = FieldModel<address, 8, 1, bankOffset>;\n\
    \    using frmor = FieldModel<address, 9, 1, bankOffset>;\n    using dterr = FieldModel<address,\
    \ 10, 1, bankOffset>;\n  };\n\npublic:\n  using fs_hcintx = Fs_hcintxBankReg<BaseAddress\
    \ + 0x0108, 0x0020>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n\
    \  class Fs_hcintmskxBankReg : public RegisterBankModel<address, bankOffset>\n\
    \  {\n  public:\n    using xfrcm = FieldModel<address, 0, 1, bankOffset>;\n  \
    \  using chhm = FieldModel<address, 1, 1, bankOffset>;\n    using stallm = FieldModel<address,\
    \ 3, 1, bankOffset>;\n    using nakm = FieldModel<address, 4, 1, bankOffset>;\n\
    \    using ackm = FieldModel<address, 5, 1, bankOffset>;\n    using nyet = FieldModel<address,\
    \ 6, 1, bankOffset>;\n    using txerrm = FieldModel<address, 7, 1, bankOffset>;\n\
    \    using bberrm = FieldModel<address, 8, 1, bankOffset>;\n    using frmorm =\
    \ FieldModel<address, 9, 1, bankOffset>;\n    using dterrm = FieldModel<address,\
    \ 10, 1, bankOffset>;\n  };\n\npublic:\n  using fs_hcintmskx = Fs_hcintmskxBankReg<BaseAddress\
    \ + 0x010C, 0x0020>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n\
    \  class Fs_hctsizxBankReg : public RegisterBankModel<address, bankOffset>\n \
    \ {\n  public:\n    using xfrsiz = FieldModel<address, 0, 19, bankOffset>;\n \
    \   using pktcnt = FieldModel<address, 19, 10, bankOffset>;\n    using dpid =\
    \ FieldModel<address, 29, 2, bankOffset>;\n  };\n\npublic:\n  using fs_hctsizx\
    \ = Fs_hctsizxBankReg<BaseAddress + 0x0110, 0x0020>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_HOST_H\
    \ */\n"
  name: OTG_FS_HOST
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_PWRCLK_H\n#define DRAL_STM32F411_OTG_FS_PWRCLK_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_pwrclk\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000E00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Fs_pcgcctlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using stppclk = FieldModel<address, 0, 1>;\n    using gatehclk\
    \ = FieldModel<address, 1, 1>;\n    using physusp = FieldModel<address, 4, 1>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> stppclk;\n      BitFieldModel<1, 1> gatehclk;\n      BitFieldModel<4, 1>\
    \ physusp;\n    };\n  };\n\npublic:\n  using fs_pcgcctl = Fs_pcgcctlReg<BaseAddress\
    \ + 0x0000>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_PWRCLK_H */\n"
  name: OTG_FS_PWRCLK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_PWR_H\n#define DRAL_STM32F411_PWR_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass pwr\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40007000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using vos = FieldModel<address, 14, 2>;\n    using adcdc1\
    \ = FieldModel<address, 13, 1>;\n    using fpds = FieldModel<address, 9, 1>;\n\
    \    using dbp = FieldModel<address, 8, 1>;\n    using pls = FieldModel<address,\
    \ 5, 3>;\n    using pvde = FieldModel<address, 4, 1>;\n    using csbf = FieldModel<address,\
    \ 3, 1>;\n    using cwuf = FieldModel<address, 2, 1>;\n    using pdds = FieldModel<address,\
    \ 1, 1>;\n    using lpds = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<14, 2> vos;\n      BitFieldModel<13,\
    \ 1> adcdc1;\n      BitFieldModel<9, 1> fpds;\n      BitFieldModel<8, 1> dbp;\n\
    \      BitFieldModel<5, 3> pls;\n      BitFieldModel<4, 1> pvde;\n      BitFieldModel<3,\
    \ 1> csbf;\n      BitFieldModel<2, 1> cwuf;\n      BitFieldModel<1, 1> pdds;\n\
    \      BitFieldModel<0, 1> lpds;\n    };\n  };\n\npublic:\n  using cr = CrReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n  class CsrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using wuf = FieldModel<address,\
    \ 0, 1>;\n    using sbf = FieldModel<address, 1, 1>;\n    using pvdo = FieldModel<address,\
    \ 2, 1>;\n    using brr = FieldModel<address, 3, 1>;\n    using ewup = FieldModel<address,\
    \ 8, 1>;\n    using bre = FieldModel<address, 9, 1>;\n    using vosrdy = FieldModel<address,\
    \ 14, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> wuf;\n      BitFieldModel<1, 1> sbf;\n      BitFieldModel<2, 1> pvdo;\n \
    \     BitFieldModel<3, 1> brr;\n      BitFieldModel<8, 1> ewup;\n      BitFieldModel<9,\
    \ 1> bre;\n      BitFieldModel<14, 1> vosrdy;\n    };\n  };\n\npublic:\n  using\
    \ csr = CsrReg<BaseAddress + 0x0004>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_PWR_H\
    \ */\n"
  name: PWR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_RCC_H\n#define DRAL_STM32F411_RCC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass rcc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40023800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using plli2srdy = FieldModel<address, 27, 1>;\n    using\
    \ plli2son = FieldModel<address, 26, 1>;\n    using pllrdy = FieldModel<address,\
    \ 25, 1>;\n    using pllon = FieldModel<address, 24, 1>;\n    using csson = FieldModel<address,\
    \ 19, 1>;\n    using hsebyp = FieldModel<address, 18, 1>;\n    using hserdy =\
    \ FieldModel<address, 17, 1>;\n    using hseon = FieldModel<address, 16, 1>;\n\
    \    using hsical = FieldModel<address, 8, 8>;\n    using hsitrim = FieldModel<address,\
    \ 3, 5>;\n    using hsirdy = FieldModel<address, 1, 1>;\n    using hsion = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<27,\
    \ 1> plli2srdy;\n      BitFieldModel<26, 1> plli2son;\n      BitFieldModel<25,\
    \ 1> pllrdy;\n      BitFieldModel<24, 1> pllon;\n      BitFieldModel<19, 1> csson;\n\
    \      BitFieldModel<18, 1> hsebyp;\n      BitFieldModel<17, 1> hserdy;\n    \
    \  BitFieldModel<16, 1> hseon;\n      BitFieldModel<8, 8> hsical;\n      BitFieldModel<3,\
    \ 5> hsitrim;\n      BitFieldModel<1, 1> hsirdy;\n      BitFieldModel<0, 1> hsion;\n\
    \    };\n  };\n\npublic:\n  using cr = CrReg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class PllcfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pllq3 = FieldModel<address, 27, 1>;\n    using pllq2\
    \ = FieldModel<address, 26, 1>;\n    using pllq1 = FieldModel<address, 25, 1>;\n\
    \    using pllq0 = FieldModel<address, 24, 1>;\n    using pllsrc = FieldModel<address,\
    \ 22, 1>;\n    using pllp1 = FieldModel<address, 17, 1>;\n    using pllp0 = FieldModel<address,\
    \ 16, 1>;\n    using plln8 = FieldModel<address, 14, 1>;\n    using plln7 = FieldModel<address,\
    \ 13, 1>;\n    using plln6 = FieldModel<address, 12, 1>;\n    using plln5 = FieldModel<address,\
    \ 11, 1>;\n    using plln4 = FieldModel<address, 10, 1>;\n    using plln3 = FieldModel<address,\
    \ 9, 1>;\n    using plln2 = FieldModel<address, 8, 1>;\n    using plln1 = FieldModel<address,\
    \ 7, 1>;\n    using plln0 = FieldModel<address, 6, 1>;\n    using pllm5 = FieldModel<address,\
    \ 5, 1>;\n    using pllm4 = FieldModel<address, 4, 1>;\n    using pllm3 = FieldModel<address,\
    \ 3, 1>;\n    using pllm2 = FieldModel<address, 2, 1>;\n    using pllm1 = FieldModel<address,\
    \ 1, 1>;\n    using pllm0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> pllq3;\n     \
    \ BitFieldModel<26, 1> pllq2;\n      BitFieldModel<25, 1> pllq1;\n      BitFieldModel<24,\
    \ 1> pllq0;\n      BitFieldModel<22, 1> pllsrc;\n      BitFieldModel<17, 1> pllp1;\n\
    \      BitFieldModel<16, 1> pllp0;\n      BitFieldModel<14, 1> plln8;\n      BitFieldModel<13,\
    \ 1> plln7;\n      BitFieldModel<12, 1> plln6;\n      BitFieldModel<11, 1> plln5;\n\
    \      BitFieldModel<10, 1> plln4;\n      BitFieldModel<9, 1> plln3;\n      BitFieldModel<8,\
    \ 1> plln2;\n      BitFieldModel<7, 1> plln1;\n      BitFieldModel<6, 1> plln0;\n\
    \      BitFieldModel<5, 1> pllm5;\n      BitFieldModel<4, 1> pllm4;\n      BitFieldModel<3,\
    \ 1> pllm3;\n      BitFieldModel<2, 1> pllm2;\n      BitFieldModel<1, 1> pllm1;\n\
    \      BitFieldModel<0, 1> pllm0;\n    };\n  };\n\npublic:\n  using pllcfgr =\
    \ PllcfgrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class CfgrReg : public RegisterModel<address>\n  {\n  public:\n    using mco2\
    \ = FieldModel<address, 30, 2>;\n    using mco2pre = FieldModel<address, 27, 3>;\n\
    \    using mco1pre = FieldModel<address, 24, 3>;\n    using i2ssrc = FieldModel<address,\
    \ 23, 1>;\n    using mco1 = FieldModel<address, 21, 2>;\n    using rtcpre = FieldModel<address,\
    \ 16, 5>;\n    using ppre2 = FieldModel<address, 13, 3>;\n    using ppre1 = FieldModel<address,\
    \ 10, 3>;\n    using hpre = FieldModel<address, 4, 4>;\n    using sws1 = FieldModel<address,\
    \ 3, 1>;\n    using sws0 = FieldModel<address, 2, 1>;\n    using sw1 = FieldModel<address,\
    \ 1, 1>;\n    using sw0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<30, 2> mco2;\n      BitFieldModel<27,\
    \ 3> mco2pre;\n      BitFieldModel<24, 3> mco1pre;\n      BitFieldModel<23, 1>\
    \ i2ssrc;\n      BitFieldModel<21, 2> mco1;\n      BitFieldModel<16, 5> rtcpre;\n\
    \      BitFieldModel<13, 3> ppre2;\n      BitFieldModel<10, 3> ppre1;\n      BitFieldModel<4,\
    \ 4> hpre;\n      BitFieldModel<3, 1> sws1;\n      BitFieldModel<2, 1> sws0;\n\
    \      BitFieldModel<1, 1> sw1;\n      BitFieldModel<0, 1> sw0;\n    };\n  };\n\
    \npublic:\n  using cfgr = CfgrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class CirReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using cssc = FieldModel<address, 23, 1>;\n    using plli2srdyc = FieldModel<address,\
    \ 21, 1>;\n    using pllrdyc = FieldModel<address, 20, 1>;\n    using hserdyc\
    \ = FieldModel<address, 19, 1>;\n    using hsirdyc = FieldModel<address, 18, 1>;\n\
    \    using lserdyc = FieldModel<address, 17, 1>;\n    using lsirdyc = FieldModel<address,\
    \ 16, 1>;\n    using plli2srdyie = FieldModel<address, 13, 1>;\n    using pllrdyie\
    \ = FieldModel<address, 12, 1>;\n    using hserdyie = FieldModel<address, 11,\
    \ 1>;\n    using hsirdyie = FieldModel<address, 10, 1>;\n    using lserdyie =\
    \ FieldModel<address, 9, 1>;\n    using lsirdyie = FieldModel<address, 8, 1>;\n\
    \    using cssf = FieldModel<address, 7, 1>;\n    using plli2srdyf = FieldModel<address,\
    \ 5, 1>;\n    using pllrdyf = FieldModel<address, 4, 1>;\n    using hserdyf =\
    \ FieldModel<address, 3, 1>;\n    using hsirdyf = FieldModel<address, 2, 1>;\n\
    \    using lserdyf = FieldModel<address, 1, 1>;\n    using lsirdyf = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<23,\
    \ 1> cssc;\n      BitFieldModel<21, 1> plli2srdyc;\n      BitFieldModel<20, 1>\
    \ pllrdyc;\n      BitFieldModel<19, 1> hserdyc;\n      BitFieldModel<18, 1> hsirdyc;\n\
    \      BitFieldModel<17, 1> lserdyc;\n      BitFieldModel<16, 1> lsirdyc;\n  \
    \    BitFieldModel<13, 1> plli2srdyie;\n      BitFieldModel<12, 1> pllrdyie;\n\
    \      BitFieldModel<11, 1> hserdyie;\n      BitFieldModel<10, 1> hsirdyie;\n\
    \      BitFieldModel<9, 1> lserdyie;\n      BitFieldModel<8, 1> lsirdyie;\n  \
    \    BitFieldModel<7, 1> cssf;\n      BitFieldModel<5, 1> plli2srdyf;\n      BitFieldModel<4,\
    \ 1> pllrdyf;\n      BitFieldModel<3, 1> hserdyf;\n      BitFieldModel<2, 1> hsirdyf;\n\
    \      BitFieldModel<1, 1> lserdyf;\n      BitFieldModel<0, 1> lsirdyf;\n    };\n\
    \  };\n\npublic:\n  using cir = CirReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ahb1rstrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using dma2rst = FieldModel<address, 22, 1>;\n    using dma1rst = FieldModel<address,\
    \ 21, 1>;\n    using crcrst = FieldModel<address, 12, 1>;\n    using gpiohrst\
    \ = FieldModel<address, 7, 1>;\n    using gpioerst = FieldModel<address, 4, 1>;\n\
    \    using gpiodrst = FieldModel<address, 3, 1>;\n    using gpiocrst = FieldModel<address,\
    \ 2, 1>;\n    using gpiobrst = FieldModel<address, 1, 1>;\n    using gpioarst\
    \ = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<22, 1> dma2rst;\n      BitFieldModel<21, 1> dma1rst;\n\
    \      BitFieldModel<12, 1> crcrst;\n      BitFieldModel<7, 1> gpiohrst;\n   \
    \   BitFieldModel<4, 1> gpioerst;\n      BitFieldModel<3, 1> gpiodrst;\n     \
    \ BitFieldModel<2, 1> gpiocrst;\n      BitFieldModel<1, 1> gpiobrst;\n      BitFieldModel<0,\
    \ 1> gpioarst;\n    };\n  };\n\npublic:\n  using ahb1rstr = Ahb1rstrReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class Ahb2rstrReg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using otgfsrst = FieldModel<address,\
    \ 7, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> otgfsrst;\n    };\n  };\n\npublic:\n  using ahb2rstr = Ahb2rstrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n  class Apb1rstrReg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using pwrrst = FieldModel<address,\
    \ 28, 1>;\n    using i2c3rst = FieldModel<address, 23, 1>;\n    using i2c2rst\
    \ = FieldModel<address, 22, 1>;\n    using i2c1rst = FieldModel<address, 21, 1>;\n\
    \    using uart2rst = FieldModel<address, 17, 1>;\n    using spi3rst = FieldModel<address,\
    \ 15, 1>;\n    using spi2rst = FieldModel<address, 14, 1>;\n    using wwdgrst\
    \ = FieldModel<address, 11, 1>;\n    using tim5rst = FieldModel<address, 3, 1>;\n\
    \    using tim4rst = FieldModel<address, 2, 1>;\n    using tim3rst = FieldModel<address,\
    \ 1, 1>;\n    using tim2rst = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 1> pwrrst;\n    \
    \  BitFieldModel<23, 1> i2c3rst;\n      BitFieldModel<22, 1> i2c2rst;\n      BitFieldModel<21,\
    \ 1> i2c1rst;\n      BitFieldModel<17, 1> uart2rst;\n      BitFieldModel<15, 1>\
    \ spi3rst;\n      BitFieldModel<14, 1> spi2rst;\n      BitFieldModel<11, 1> wwdgrst;\n\
    \      BitFieldModel<3, 1> tim5rst;\n      BitFieldModel<2, 1> tim4rst;\n    \
    \  BitFieldModel<1, 1> tim3rst;\n      BitFieldModel<0, 1> tim2rst;\n    };\n\
    \  };\n\npublic:\n  using apb1rstr = Apb1rstrReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Apb2rstrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tim11rst = FieldModel<address, 18, 1>;\n    using tim10rst\
    \ = FieldModel<address, 17, 1>;\n    using tim9rst = FieldModel<address, 16, 1>;\n\
    \    using syscfgrst = FieldModel<address, 14, 1>;\n    using spi1rst = FieldModel<address,\
    \ 12, 1>;\n    using sdiorst = FieldModel<address, 11, 1>;\n    using adcrst =\
    \ FieldModel<address, 8, 1>;\n    using usart6rst = FieldModel<address, 5, 1>;\n\
    \    using usart1rst = FieldModel<address, 4, 1>;\n    using tim1rst = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<18,\
    \ 1> tim11rst;\n      BitFieldModel<17, 1> tim10rst;\n      BitFieldModel<16,\
    \ 1> tim9rst;\n      BitFieldModel<14, 1> syscfgrst;\n      BitFieldModel<12,\
    \ 1> spi1rst;\n      BitFieldModel<11, 1> sdiorst;\n      BitFieldModel<8, 1>\
    \ adcrst;\n      BitFieldModel<5, 1> usart6rst;\n      BitFieldModel<4, 1> usart1rst;\n\
    \      BitFieldModel<0, 1> tim1rst;\n    };\n  };\n\npublic:\n  using apb2rstr\
    \ = Apb2rstrReg<BaseAddress + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ahb1enrReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ dma2en = FieldModel<address, 22, 1>;\n    using dma1en = FieldModel<address,\
    \ 21, 1>;\n    using crcen = FieldModel<address, 12, 1>;\n    using gpiohen =\
    \ FieldModel<address, 7, 1>;\n    using gpioeen = FieldModel<address, 4, 1>;\n\
    \    using gpioden = FieldModel<address, 3, 1>;\n    using gpiocen = FieldModel<address,\
    \ 2, 1>;\n    using gpioben = FieldModel<address, 1, 1>;\n    using gpioaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<22, 1> dma2en;\n      BitFieldModel<21, 1> dma1en;\n\
    \      BitFieldModel<12, 1> crcen;\n      BitFieldModel<7, 1> gpiohen;\n     \
    \ BitFieldModel<4, 1> gpioeen;\n      BitFieldModel<3, 1> gpioden;\n      BitFieldModel<2,\
    \ 1> gpiocen;\n      BitFieldModel<1, 1> gpioben;\n      BitFieldModel<0, 1> gpioaen;\n\
    \    };\n  };\n\npublic:\n  using ahb1enr = Ahb1enrReg<BaseAddress + 0x0030>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ahb2enrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using otgfsen = FieldModel<address, 7, 1>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7, 1> otgfsen;\n\
    \    };\n  };\n\npublic:\n  using ahb2enr = Ahb2enrReg<BaseAddress + 0x0034>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Apb1enrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pwren = FieldModel<address, 28, 1>;\n    using i2c3en\
    \ = FieldModel<address, 23, 1>;\n    using i2c2en = FieldModel<address, 22, 1>;\n\
    \    using i2c1en = FieldModel<address, 21, 1>;\n    using usart2en = FieldModel<address,\
    \ 17, 1>;\n    using spi3en = FieldModel<address, 15, 1>;\n    using spi2en =\
    \ FieldModel<address, 14, 1>;\n    using wwdgen = FieldModel<address, 11, 1>;\n\
    \    using tim5en = FieldModel<address, 3, 1>;\n    using tim4en = FieldModel<address,\
    \ 2, 1>;\n    using tim3en = FieldModel<address, 1, 1>;\n    using tim2en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 1> pwren;\n      BitFieldModel<23, 1> i2c3en;\n      BitFieldModel<22, 1> i2c2en;\n\
    \      BitFieldModel<21, 1> i2c1en;\n      BitFieldModel<17, 1> usart2en;\n  \
    \    BitFieldModel<15, 1> spi3en;\n      BitFieldModel<14, 1> spi2en;\n      BitFieldModel<11,\
    \ 1> wwdgen;\n      BitFieldModel<3, 1> tim5en;\n      BitFieldModel<2, 1> tim4en;\n\
    \      BitFieldModel<1, 1> tim3en;\n      BitFieldModel<0, 1> tim2en;\n    };\n\
    \  };\n\npublic:\n  using apb1enr = Apb1enrReg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Apb2enrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tim1en = FieldModel<address, 0, 1>;\n    using usart1en\
    \ = FieldModel<address, 4, 1>;\n    using usart6en = FieldModel<address, 5, 1>;\n\
    \    using adc1en = FieldModel<address, 8, 1>;\n    using sdioen = FieldModel<address,\
    \ 11, 1>;\n    using spi1en = FieldModel<address, 12, 1>;\n    using spi4en =\
    \ FieldModel<address, 13, 1>;\n    using syscfgen = FieldModel<address, 14, 1>;\n\
    \    using tim9en = FieldModel<address, 16, 1>;\n    using tim10en = FieldModel<address,\
    \ 17, 1>;\n    using tim11en = FieldModel<address, 18, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> tim1en;\n     \
    \ BitFieldModel<4, 1> usart1en;\n      BitFieldModel<5, 1> usart6en;\n      BitFieldModel<8,\
    \ 1> adc1en;\n      BitFieldModel<11, 1> sdioen;\n      BitFieldModel<12, 1> spi1en;\n\
    \      BitFieldModel<13, 1> spi4en;\n      BitFieldModel<14, 1> syscfgen;\n  \
    \    BitFieldModel<16, 1> tim9en;\n      BitFieldModel<17, 1> tim10en;\n     \
    \ BitFieldModel<18, 1> tim11en;\n    };\n  };\n\npublic:\n  using apb2enr = Apb2enrReg<BaseAddress\
    \ + 0x0044>;\n\nprivate:\n  template<uint32_t address>\n  class Ahb1lpenrReg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using dma2lpen = FieldModel<address,\
    \ 22, 1>;\n    using dma1lpen = FieldModel<address, 21, 1>;\n    using sram1lpen\
    \ = FieldModel<address, 16, 1>;\n    using flitflpen = FieldModel<address, 15,\
    \ 1>;\n    using crclpen = FieldModel<address, 12, 1>;\n    using gpiohlpen =\
    \ FieldModel<address, 7, 1>;\n    using gpioelpen = FieldModel<address, 4, 1>;\n\
    \    using gpiodlpen = FieldModel<address, 3, 1>;\n    using gpioclpen = FieldModel<address,\
    \ 2, 1>;\n    using gpioblpen = FieldModel<address, 1, 1>;\n    using gpioalpen\
    \ = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<22, 1> dma2lpen;\n      BitFieldModel<21, 1> dma1lpen;\n\
    \      BitFieldModel<16, 1> sram1lpen;\n      BitFieldModel<15, 1> flitflpen;\n\
    \      BitFieldModel<12, 1> crclpen;\n      BitFieldModel<7, 1> gpiohlpen;\n \
    \     BitFieldModel<4, 1> gpioelpen;\n      BitFieldModel<3, 1> gpiodlpen;\n \
    \     BitFieldModel<2, 1> gpioclpen;\n      BitFieldModel<1, 1> gpioblpen;\n \
    \     BitFieldModel<0, 1> gpioalpen;\n    };\n  };\n\npublic:\n  using ahb1lpenr\
    \ = Ahb1lpenrReg<BaseAddress + 0x0050>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ahb2lpenrReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ otgfslpen = FieldModel<address, 7, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<7, 1> otgfslpen;\n    };\n  };\n\n\
    public:\n  using ahb2lpenr = Ahb2lpenrReg<BaseAddress + 0x0054>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Apb1lpenrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pwrlpen = FieldModel<address, 28, 1>;\n    using i2c3lpen\
    \ = FieldModel<address, 23, 1>;\n    using i2c2lpen = FieldModel<address, 22,\
    \ 1>;\n    using i2c1lpen = FieldModel<address, 21, 1>;\n    using usart2lpen\
    \ = FieldModel<address, 17, 1>;\n    using spi3lpen = FieldModel<address, 15,\
    \ 1>;\n    using spi2lpen = FieldModel<address, 14, 1>;\n    using wwdglpen =\
    \ FieldModel<address, 11, 1>;\n    using tim5lpen = FieldModel<address, 3, 1>;\n\
    \    using tim4lpen = FieldModel<address, 2, 1>;\n    using tim3lpen = FieldModel<address,\
    \ 1, 1>;\n    using tim2lpen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 1> pwrlpen;\n   \
    \   BitFieldModel<23, 1> i2c3lpen;\n      BitFieldModel<22, 1> i2c2lpen;\n   \
    \   BitFieldModel<21, 1> i2c1lpen;\n      BitFieldModel<17, 1> usart2lpen;\n \
    \     BitFieldModel<15, 1> spi3lpen;\n      BitFieldModel<14, 1> spi2lpen;\n \
    \     BitFieldModel<11, 1> wwdglpen;\n      BitFieldModel<3, 1> tim5lpen;\n  \
    \    BitFieldModel<2, 1> tim4lpen;\n      BitFieldModel<1, 1> tim3lpen;\n    \
    \  BitFieldModel<0, 1> tim2lpen;\n    };\n  };\n\npublic:\n  using apb1lpenr =\
    \ Apb1lpenrReg<BaseAddress + 0x0060>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Apb2lpenrReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ tim1lpen = FieldModel<address, 0, 1>;\n    using usart1lpen = FieldModel<address,\
    \ 4, 1>;\n    using usart6lpen = FieldModel<address, 5, 1>;\n    using adc1lpen\
    \ = FieldModel<address, 8, 1>;\n    using sdiolpen = FieldModel<address, 11, 1>;\n\
    \    using spi1lpen = FieldModel<address, 12, 1>;\n    using spi4lpen = FieldModel<address,\
    \ 13, 1>;\n    using syscfglpen = FieldModel<address, 14, 1>;\n    using tim9lpen\
    \ = FieldModel<address, 16, 1>;\n    using tim10lpen = FieldModel<address, 17,\
    \ 1>;\n    using tim11lpen = FieldModel<address, 18, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 1> tim1lpen;\n   \
    \   BitFieldModel<4, 1> usart1lpen;\n      BitFieldModel<5, 1> usart6lpen;\n \
    \     BitFieldModel<8, 1> adc1lpen;\n      BitFieldModel<11, 1> sdiolpen;\n  \
    \    BitFieldModel<12, 1> spi1lpen;\n      BitFieldModel<13, 1> spi4lpen;\n  \
    \    BitFieldModel<14, 1> syscfglpen;\n      BitFieldModel<16, 1> tim9lpen;\n\
    \      BitFieldModel<17, 1> tim10lpen;\n      BitFieldModel<18, 1> tim11lpen;\n\
    \    };\n  };\n\npublic:\n  using apb2lpenr = Apb2lpenrReg<BaseAddress + 0x0064>;\n\
    \nprivate:\n  template<uint32_t address>\n  class BdcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bdrst = FieldModel<address, 16, 1>;\n    using rtcen\
    \ = FieldModel<address, 15, 1>;\n    using rtcsel1 = FieldModel<address, 9, 1>;\n\
    \    using rtcsel0 = FieldModel<address, 8, 1>;\n    using lsebyp = FieldModel<address,\
    \ 2, 1>;\n    using lserdy = FieldModel<address, 1, 1>;\n    using lseon = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> bdrst;\n      BitFieldModel<15, 1> rtcen;\n      BitFieldModel<9, 1> rtcsel1;\n\
    \      BitFieldModel<8, 1> rtcsel0;\n      BitFieldModel<2, 1> lsebyp;\n     \
    \ BitFieldModel<1, 1> lserdy;\n      BitFieldModel<0, 1> lseon;\n    };\n  };\n\
    \npublic:\n  using bdcr = BdcrReg<BaseAddress + 0x0070>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class CsrReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using lpwrrstf = FieldModel<address, 31, 1>;\n    using wwdgrstf = FieldModel<address,\
    \ 30, 1>;\n    using wdgrstf = FieldModel<address, 29, 1>;\n    using sftrstf\
    \ = FieldModel<address, 28, 1>;\n    using porrstf = FieldModel<address, 27, 1>;\n\
    \    using padrstf = FieldModel<address, 26, 1>;\n    using borrstf = FieldModel<address,\
    \ 25, 1>;\n    using rmvf = FieldModel<address, 24, 1>;\n    using lsirdy = FieldModel<address,\
    \ 1, 1>;\n    using lsion = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<31, 1> lpwrrstf;\n  \
    \    BitFieldModel<30, 1> wwdgrstf;\n      BitFieldModel<29, 1> wdgrstf;\n   \
    \   BitFieldModel<28, 1> sftrstf;\n      BitFieldModel<27, 1> porrstf;\n     \
    \ BitFieldModel<26, 1> padrstf;\n      BitFieldModel<25, 1> borrstf;\n      BitFieldModel<24,\
    \ 1> rmvf;\n      BitFieldModel<1, 1> lsirdy;\n      BitFieldModel<0, 1> lsion;\n\
    \    };\n  };\n\npublic:\n  using csr = CsrReg<BaseAddress + 0x0074>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SscgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using sscgen = FieldModel<address, 31, 1>;\n    using spreadsel\
    \ = FieldModel<address, 30, 1>;\n    using incstep = FieldModel<address, 13, 15>;\n\
    \    using modper = FieldModel<address, 0, 13>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> sscgen;\n      BitFieldModel<30,\
    \ 1> spreadsel;\n      BitFieldModel<13, 15> incstep;\n      BitFieldModel<0,\
    \ 13> modper;\n    };\n  };\n\npublic:\n  using sscgr = SscgrReg<BaseAddress +\
    \ 0x0080>;\n\nprivate:\n  template<uint32_t address>\n  class Plli2scfgrReg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using plli2srx = FieldModel<address,\
    \ 28, 3>;\n    using plli2snx = FieldModel<address, 6, 9>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 3> plli2srx;\n  \
    \    BitFieldModel<6, 9> plli2snx;\n    };\n  };\n\npublic:\n  using plli2scfgr\
    \ = Plli2scfgrReg<BaseAddress + 0x0084>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_RCC_H\
    \ */\n"
  name: RCC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_RTC_H\n#define DRAL_STM32F411_RTC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass rtc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40002800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class TrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pm = FieldModel<address, 22, 1>;\n    using ht = FieldModel<address,\
    \ 20, 2>;\n    using hu = FieldModel<address, 16, 4>;\n    using mnt = FieldModel<address,\
    \ 12, 3>;\n    using mnu = FieldModel<address, 8, 4>;\n    using st = FieldModel<address,\
    \ 4, 3>;\n    using su = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<22, 1> pm;\n      BitFieldModel<20,\
    \ 2> ht;\n      BitFieldModel<16, 4> hu;\n      BitFieldModel<12, 3> mnt;\n  \
    \    BitFieldModel<8, 4> mnu;\n      BitFieldModel<4, 3> st;\n      BitFieldModel<0,\
    \ 4> su;\n    };\n  };\n\npublic:\n  using tr = TrReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using yt = FieldModel<address, 20, 4>;\n    using yu = FieldModel<address,\
    \ 16, 4>;\n    using wdu = FieldModel<address, 13, 3>;\n    using mt = FieldModel<address,\
    \ 12, 1>;\n    using mu = FieldModel<address, 8, 4>;\n    using dt = FieldModel<address,\
    \ 4, 2>;\n    using du = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<20, 4> yt;\n      BitFieldModel<16,\
    \ 4> yu;\n      BitFieldModel<13, 3> wdu;\n      BitFieldModel<12, 1> mt;\n  \
    \    BitFieldModel<8, 4> mu;\n      BitFieldModel<4, 2> dt;\n      BitFieldModel<0,\
    \ 4> du;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using coe = FieldModel<address, 23, 1>;\n    using osel =\
    \ FieldModel<address, 21, 2>;\n    using pol = FieldModel<address, 20, 1>;\n \
    \   using cosel = FieldModel<address, 19, 1>;\n    using bkp = FieldModel<address,\
    \ 18, 1>;\n    using sub1h = FieldModel<address, 17, 1>;\n    using add1h = FieldModel<address,\
    \ 16, 1>;\n    using tsie = FieldModel<address, 15, 1>;\n    using wutie = FieldModel<address,\
    \ 14, 1>;\n    using alrbie = FieldModel<address, 13, 1>;\n    using alraie =\
    \ FieldModel<address, 12, 1>;\n    using tse = FieldModel<address, 11, 1>;\n \
    \   using wute = FieldModel<address, 10, 1>;\n    using alrbe = FieldModel<address,\
    \ 9, 1>;\n    using alrae = FieldModel<address, 8, 1>;\n    using dce = FieldModel<address,\
    \ 7, 1>;\n    using fmt = FieldModel<address, 6, 1>;\n    using bypshad = FieldModel<address,\
    \ 5, 1>;\n    using refckon = FieldModel<address, 4, 1>;\n    using tsedge = FieldModel<address,\
    \ 3, 1>;\n    using wcksel = FieldModel<address, 0, 3>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<23, 1> coe;\n      BitFieldModel<21,\
    \ 2> osel;\n      BitFieldModel<20, 1> pol;\n      BitFieldModel<19, 1> cosel;\n\
    \      BitFieldModel<18, 1> bkp;\n      BitFieldModel<17, 1> sub1h;\n      BitFieldModel<16,\
    \ 1> add1h;\n      BitFieldModel<15, 1> tsie;\n      BitFieldModel<14, 1> wutie;\n\
    \      BitFieldModel<13, 1> alrbie;\n      BitFieldModel<12, 1> alraie;\n    \
    \  BitFieldModel<11, 1> tse;\n      BitFieldModel<10, 1> wute;\n      BitFieldModel<9,\
    \ 1> alrbe;\n      BitFieldModel<8, 1> alrae;\n      BitFieldModel<7, 1> dce;\n\
    \      BitFieldModel<6, 1> fmt;\n      BitFieldModel<5, 1> bypshad;\n      BitFieldModel<4,\
    \ 1> refckon;\n      BitFieldModel<3, 1> tsedge;\n      BitFieldModel<0, 3> wcksel;\n\
    \    };\n  };\n\npublic:\n  using cr = CrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class IsrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using alrawf = FieldModel<address, 0, 1>;\n    using alrbwf\
    \ = FieldModel<address, 1, 1>;\n    using wutwf = FieldModel<address, 2, 1>;\n\
    \    using shpf = FieldModel<address, 3, 1>;\n    using inits = FieldModel<address,\
    \ 4, 1>;\n    using rsf = FieldModel<address, 5, 1>;\n    using initf = FieldModel<address,\
    \ 6, 1>;\n    using init = FieldModel<address, 7, 1>;\n    using alraf = FieldModel<address,\
    \ 8, 1>;\n    using alrbf = FieldModel<address, 9, 1>;\n    using wutf = FieldModel<address,\
    \ 10, 1>;\n    using tsf = FieldModel<address, 11, 1>;\n    using tsovf = FieldModel<address,\
    \ 12, 1>;\n    using tamp1f = FieldModel<address, 13, 1>;\n    using tamp2f =\
    \ FieldModel<address, 14, 1>;\n    using recalpf = FieldModel<address, 16, 1>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> alrawf;\n      BitFieldModel<1, 1> alrbwf;\n      BitFieldModel<2, 1> wutwf;\n\
    \      BitFieldModel<3, 1> shpf;\n      BitFieldModel<4, 1> inits;\n      BitFieldModel<5,\
    \ 1> rsf;\n      BitFieldModel<6, 1> initf;\n      BitFieldModel<7, 1> init;\n\
    \      BitFieldModel<8, 1> alraf;\n      BitFieldModel<9, 1> alrbf;\n      BitFieldModel<10,\
    \ 1> wutf;\n      BitFieldModel<11, 1> tsf;\n      BitFieldModel<12, 1> tsovf;\n\
    \      BitFieldModel<13, 1> tamp1f;\n      BitFieldModel<14, 1> tamp2f;\n    \
    \  BitFieldModel<16, 1> recalpf;\n    };\n  };\n\npublic:\n  using isr = IsrReg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n  class PrerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using prediv_a = FieldModel<address,\
    \ 16, 7>;\n    using prediv_s = FieldModel<address, 0, 15>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 7> prediv_a;\n\
    \      BitFieldModel<0, 15> prediv_s;\n    };\n  };\n\npublic:\n  using prer =\
    \ PrerReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n \
    \ class WutrReg : public RegisterModel<address>\n  {\n  public:\n    using wut\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> wut;\n    };\n  };\n\npublic:\n  using wutr\
    \ = WutrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class CalibrReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ dcs = FieldModel<address, 7, 1>;\n    using dc = FieldModel<address, 0, 5>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> dcs;\n      BitFieldModel<0, 5> dc;\n    };\n  };\n\npublic:\n  using calibr\
    \ = CalibrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AlrmarReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ msk4 = FieldModel<address, 31, 1>;\n    using wdsel = FieldModel<address, 30,\
    \ 1>;\n    using dt = FieldModel<address, 28, 2>;\n    using du = FieldModel<address,\
    \ 24, 4>;\n    using msk3 = FieldModel<address, 23, 1>;\n    using pm = FieldModel<address,\
    \ 22, 1>;\n    using ht = FieldModel<address, 20, 2>;\n    using hu = FieldModel<address,\
    \ 16, 4>;\n    using msk2 = FieldModel<address, 15, 1>;\n    using mnt = FieldModel<address,\
    \ 12, 3>;\n    using mnu = FieldModel<address, 8, 4>;\n    using msk1 = FieldModel<address,\
    \ 7, 1>;\n    using st = FieldModel<address, 4, 3>;\n    using su = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<31,\
    \ 1> msk4;\n      BitFieldModel<30, 1> wdsel;\n      BitFieldModel<28, 2> dt;\n\
    \      BitFieldModel<24, 4> du;\n      BitFieldModel<23, 1> msk3;\n      BitFieldModel<22,\
    \ 1> pm;\n      BitFieldModel<20, 2> ht;\n      BitFieldModel<16, 4> hu;\n   \
    \   BitFieldModel<15, 1> msk2;\n      BitFieldModel<12, 3> mnt;\n      BitFieldModel<8,\
    \ 4> mnu;\n      BitFieldModel<7, 1> msk1;\n      BitFieldModel<4, 3> st;\n  \
    \    BitFieldModel<0, 4> su;\n    };\n  };\n\npublic:\n  using alrmar = AlrmarReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class AlrmbrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using msk4 = FieldModel<address,\
    \ 31, 1>;\n    using wdsel = FieldModel<address, 30, 1>;\n    using dt = FieldModel<address,\
    \ 28, 2>;\n    using du = FieldModel<address, 24, 4>;\n    using msk3 = FieldModel<address,\
    \ 23, 1>;\n    using pm = FieldModel<address, 22, 1>;\n    using ht = FieldModel<address,\
    \ 20, 2>;\n    using hu = FieldModel<address, 16, 4>;\n    using msk2 = FieldModel<address,\
    \ 15, 1>;\n    using mnt = FieldModel<address, 12, 3>;\n    using mnu = FieldModel<address,\
    \ 8, 4>;\n    using msk1 = FieldModel<address, 7, 1>;\n    using st = FieldModel<address,\
    \ 4, 3>;\n    using su = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> msk4;\n      BitFieldModel<30,\
    \ 1> wdsel;\n      BitFieldModel<28, 2> dt;\n      BitFieldModel<24, 4> du;\n\
    \      BitFieldModel<23, 1> msk3;\n      BitFieldModel<22, 1> pm;\n      BitFieldModel<20,\
    \ 2> ht;\n      BitFieldModel<16, 4> hu;\n      BitFieldModel<15, 1> msk2;\n \
    \     BitFieldModel<12, 3> mnt;\n      BitFieldModel<8, 4> mnu;\n      BitFieldModel<7,\
    \ 1> msk1;\n      BitFieldModel<4, 3> st;\n      BitFieldModel<0, 4> su;\n   \
    \ };\n  };\n\npublic:\n  using alrmbr = AlrmbrReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class WprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using key = FieldModel<address, 0, 8>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 8> key;\n  \
    \  };\n  };\n\npublic:\n  using wpr = WprReg<BaseAddress + 0x0024>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SsrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ss = FieldModel<address, 0, 16>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ss;\n  \
    \  };\n  };\n\npublic:\n  using ssr = SsrReg<BaseAddress + 0x0028>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ShiftrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using add1s = FieldModel<address, 31, 1>;\n    using subfs\
    \ = FieldModel<address, 0, 15>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<31, 1> add1s;\n      BitFieldModel<0, 15> subfs;\n\
    \    };\n  };\n\npublic:\n  using shiftr = ShiftrReg<BaseAddress + 0x002C>;\n\n\
    private:\n  template<uint32_t address>\n  class TstrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pm = FieldModel<address, 22, 1>;\n    using ht = FieldModel<address,\
    \ 20, 2>;\n    using hu = FieldModel<address, 16, 4>;\n    using mnt = FieldModel<address,\
    \ 12, 3>;\n    using mnu = FieldModel<address, 8, 4>;\n    using st = FieldModel<address,\
    \ 4, 3>;\n    using su = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<22, 1> pm;\n      BitFieldModel<20,\
    \ 2> ht;\n      BitFieldModel<16, 4> hu;\n      BitFieldModel<12, 3> mnt;\n  \
    \    BitFieldModel<8, 4> mnu;\n      BitFieldModel<4, 3> st;\n      BitFieldModel<0,\
    \ 4> su;\n    };\n  };\n\npublic:\n  using tstr = TstrReg<BaseAddress + 0x0030>;\n\
    \nprivate:\n  template<uint32_t address>\n  class TsdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using wdu = FieldModel<address, 13, 3>;\n    using mt = FieldModel<address,\
    \ 12, 1>;\n    using mu = FieldModel<address, 8, 4>;\n    using dt = FieldModel<address,\
    \ 4, 2>;\n    using du = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<13, 3> wdu;\n      BitFieldModel<12,\
    \ 1> mt;\n      BitFieldModel<8, 4> mu;\n      BitFieldModel<4, 2> dt;\n     \
    \ BitFieldModel<0, 4> du;\n    };\n  };\n\npublic:\n  using tsdr = TsdrReg<BaseAddress\
    \ + 0x0034>;\n\nprivate:\n  template<uint32_t address>\n  class TsssrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using ss = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ss;\n    };\n  };\n\npublic:\n  using tsssr = TsssrReg<BaseAddress + 0x0038>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CalrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using calp = FieldModel<address, 15, 1>;\n    using calw8\
    \ = FieldModel<address, 14, 1>;\n    using calw16 = FieldModel<address, 13, 1>;\n\
    \    using calm = FieldModel<address, 0, 9>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<15, 1> calp;\n      BitFieldModel<14,\
    \ 1> calw8;\n      BitFieldModel<13, 1> calw16;\n      BitFieldModel<0, 9> calm;\n\
    \    };\n  };\n\npublic:\n  using calr = CalrReg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class TafcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using alarmouttype = FieldModel<address, 18, 1>;\n    using\
    \ tsinsel = FieldModel<address, 17, 1>;\n    using tamp1insel = FieldModel<address,\
    \ 16, 1>;\n    using tamppudis = FieldModel<address, 15, 1>;\n    using tampprch\
    \ = FieldModel<address, 13, 2>;\n    using tampflt = FieldModel<address, 11, 2>;\n\
    \    using tampfreq = FieldModel<address, 8, 3>;\n    using tampts = FieldModel<address,\
    \ 7, 1>;\n    using tamp2trg = FieldModel<address, 4, 1>;\n    using tamp2e =\
    \ FieldModel<address, 3, 1>;\n    using tampie = FieldModel<address, 2, 1>;\n\
    \    using tamp1trg = FieldModel<address, 1, 1>;\n    using tamp1e = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<18,\
    \ 1> alarmouttype;\n      BitFieldModel<17, 1> tsinsel;\n      BitFieldModel<16,\
    \ 1> tamp1insel;\n      BitFieldModel<15, 1> tamppudis;\n      BitFieldModel<13,\
    \ 2> tampprch;\n      BitFieldModel<11, 2> tampflt;\n      BitFieldModel<8, 3>\
    \ tampfreq;\n      BitFieldModel<7, 1> tampts;\n      BitFieldModel<4, 1> tamp2trg;\n\
    \      BitFieldModel<3, 1> tamp2e;\n      BitFieldModel<2, 1> tampie;\n      BitFieldModel<1,\
    \ 1> tamp1trg;\n      BitFieldModel<0, 1> tamp1e;\n    };\n  };\n\npublic:\n \
    \ using tafcr = TafcrReg<BaseAddress + 0x0040>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class AlrmassrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using maskss = FieldModel<address, 24, 4>;\n    using ss = FieldModel<address,\
    \ 0, 15>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<24,\
    \ 4> maskss;\n      BitFieldModel<0, 15> ss;\n    };\n  };\n\npublic:\n  using\
    \ alrmassr = AlrmassrReg<BaseAddress + 0x0044>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class AlrmbssrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using maskss = FieldModel<address, 24, 4>;\n    using ss = FieldModel<address,\
    \ 0, 15>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<24,\
    \ 4> maskss;\n      BitFieldModel<0, 15> ss;\n    };\n  };\n\npublic:\n  using\
    \ alrmbssr = AlrmbssrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp0rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp0r = Bkp0rReg<BaseAddress + 0x0050>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp1rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp1r = Bkp1rReg<BaseAddress + 0x0054>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp2rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp2r = Bkp2rReg<BaseAddress + 0x0058>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp3rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp3r = Bkp3rReg<BaseAddress + 0x005C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp4rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp4r = Bkp4rReg<BaseAddress + 0x0060>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp5rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp5r = Bkp5rReg<BaseAddress + 0x0064>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp6rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp6r = Bkp6rReg<BaseAddress + 0x0068>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp7rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp7r = Bkp7rReg<BaseAddress + 0x006C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp8rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp8r = Bkp8rReg<BaseAddress + 0x0070>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp9rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp9r = Bkp9rReg<BaseAddress + 0x0074>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp10rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp10r = Bkp10rReg<BaseAddress + 0x0078>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp11rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp11r = Bkp11rReg<BaseAddress + 0x007C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp12rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp12r = Bkp12rReg<BaseAddress + 0x0080>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp13rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp13r = Bkp13rReg<BaseAddress + 0x0084>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp14rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp14r = Bkp14rReg<BaseAddress + 0x0088>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp15rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp15r = Bkp15rReg<BaseAddress + 0x008C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp16rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp16r = Bkp16rReg<BaseAddress + 0x0090>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp17rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp17r = Bkp17rReg<BaseAddress + 0x0094>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp18rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp18r = Bkp18rReg<BaseAddress + 0x0098>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Bkp19rReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> bkp;\n    };\n  };\n\n\
    public:\n  using bkp19r = Bkp19rReg<BaseAddress + 0x009C>;\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class AlrmxssrBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using maskss = FieldModel<address, 24, 4, bankOffset>;\n\
    \    using ss = FieldModel<address, 0, 15, bankOffset>;\n  };\n\npublic:\n  using\
    \ alrmxssr = AlrmxssrBankReg<BaseAddress + 0x0044, 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class BkpxrBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using bkp = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using bkpxr = BkpxrBankReg<BaseAddress + 0x0050, 0x0004>;\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_RTC_H */\n"
  name: RTC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SDIO_H\n#define DRAL_STM32F411_SDIO_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass sdio\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40012C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class PowerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using pwrctrl = FieldModel<address, 0, 2>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 2> pwrctrl;\n\
    \    };\n  };\n\npublic:\n  using power = PowerReg<BaseAddress + 0x0000>;\n\n\
    private:\n  template<uint32_t address>\n  class ClkcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using hwfc_en = FieldModel<address, 14, 1>;\n    using negedge\
    \ = FieldModel<address, 13, 1>;\n    using widbus = FieldModel<address, 11, 2>;\n\
    \    using bypass = FieldModel<address, 10, 1>;\n    using pwrsav = FieldModel<address,\
    \ 9, 1>;\n    using clken = FieldModel<address, 8, 1>;\n    using clkdiv = FieldModel<address,\
    \ 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> hwfc_en;\n      BitFieldModel<13, 1> negedge;\n      BitFieldModel<11, 2>\
    \ widbus;\n      BitFieldModel<10, 1> bypass;\n      BitFieldModel<9, 1> pwrsav;\n\
    \      BitFieldModel<8, 1> clken;\n      BitFieldModel<0, 8> clkdiv;\n    };\n\
    \  };\n\npublic:\n  using clkcr = ClkcrReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ArgReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cmdarg = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> cmdarg;\n\
    \    };\n  };\n\npublic:\n  using arg = ArgReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CmdReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ce_atacmd = FieldModel<address, 14, 1>;\n    using\
    \ nien = FieldModel<address, 13, 1>;\n    using encmdcompl = FieldModel<address,\
    \ 12, 1>;\n    using sdiosuspend = FieldModel<address, 11, 1>;\n    using cpsmen\
    \ = FieldModel<address, 10, 1>;\n    using waitpend = FieldModel<address, 9, 1>;\n\
    \    using waitint = FieldModel<address, 8, 1>;\n    using waitresp = FieldModel<address,\
    \ 6, 2>;\n    using cmdindex = FieldModel<address, 0, 6>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<14, 1> ce_atacmd;\n \
    \     BitFieldModel<13, 1> nien;\n      BitFieldModel<12, 1> encmdcompl;\n   \
    \   BitFieldModel<11, 1> sdiosuspend;\n      BitFieldModel<10, 1> cpsmen;\n  \
    \    BitFieldModel<9, 1> waitpend;\n      BitFieldModel<8, 1> waitint;\n     \
    \ BitFieldModel<6, 2> waitresp;\n      BitFieldModel<0, 6> cmdindex;\n    };\n\
    \  };\n\npublic:\n  using cmd = CmdReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class RespcmdReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using respcmd = FieldModel<address, 0, 6>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 6> respcmd;\n    };\n  };\n\
    \npublic:\n  using respcmd = RespcmdReg<BaseAddress + 0x0010>;\n\nprivate:\n \
    \ template<uint32_t address>\n  class Resp1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus1 = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> cardstatus1;\n\
    \    };\n  };\n\npublic:\n  using resp1 = Resp1Reg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class Resp2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus2 = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> cardstatus2;\n\
    \    };\n  };\n\npublic:\n  using resp2 = Resp2Reg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class Resp3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus3 = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> cardstatus3;\n\
    \    };\n  };\n\npublic:\n  using resp3 = Resp3Reg<BaseAddress + 0x001C>;\n\n\
    private:\n  template<uint32_t address>\n  class Resp4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus4 = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> cardstatus4;\n\
    \    };\n  };\n\npublic:\n  using resp4 = Resp4Reg<BaseAddress + 0x0020>;\n\n\
    private:\n  template<uint32_t address>\n  class DtimerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using datatime = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> datatime;\n\
    \    };\n  };\n\npublic:\n  using dtimer = DtimerReg<BaseAddress + 0x0024>;\n\n\
    private:\n  template<uint32_t address>\n  class DlenReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using datalength = FieldModel<address, 0, 25>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 25> datalength;\n\
    \    };\n  };\n\npublic:\n  using dlen = DlenReg<BaseAddress + 0x0028>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DctrlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using sdioen = FieldModel<address, 11, 1>;\n    using rwmod\
    \ = FieldModel<address, 10, 1>;\n    using rwstop = FieldModel<address, 9, 1>;\n\
    \    using rwstart = FieldModel<address, 8, 1>;\n    using dblocksize = FieldModel<address,\
    \ 4, 4>;\n    using dmaen = FieldModel<address, 3, 1>;\n    using dtmode = FieldModel<address,\
    \ 2, 1>;\n    using dtdir = FieldModel<address, 1, 1>;\n    using dten = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<11,\
    \ 1> sdioen;\n      BitFieldModel<10, 1> rwmod;\n      BitFieldModel<9, 1> rwstop;\n\
    \      BitFieldModel<8, 1> rwstart;\n      BitFieldModel<4, 4> dblocksize;\n \
    \     BitFieldModel<3, 1> dmaen;\n      BitFieldModel<2, 1> dtmode;\n      BitFieldModel<1,\
    \ 1> dtdir;\n      BitFieldModel<0, 1> dten;\n    };\n  };\n\npublic:\n  using\
    \ dctrl = DctrlReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DcountReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ datacount = FieldModel<address, 0, 25>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 25> datacount;\n    };\n  };\n\n\
    public:\n  using dcount = DcountReg<BaseAddress + 0x0030>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class StaReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using ceataend = FieldModel<address, 23, 1>;\n    using sdioit = FieldModel<address,\
    \ 22, 1>;\n    using rxdavl = FieldModel<address, 21, 1>;\n    using txdavl =\
    \ FieldModel<address, 20, 1>;\n    using rxfifoe = FieldModel<address, 19, 1>;\n\
    \    using txfifoe = FieldModel<address, 18, 1>;\n    using rxfifof = FieldModel<address,\
    \ 17, 1>;\n    using txfifof = FieldModel<address, 16, 1>;\n    using rxfifohf\
    \ = FieldModel<address, 15, 1>;\n    using txfifohe = FieldModel<address, 14,\
    \ 1>;\n    using rxact = FieldModel<address, 13, 1>;\n    using txact = FieldModel<address,\
    \ 12, 1>;\n    using cmdact = FieldModel<address, 11, 1>;\n    using dbckend =\
    \ FieldModel<address, 10, 1>;\n    using stbiterr = FieldModel<address, 9, 1>;\n\
    \    using dataend = FieldModel<address, 8, 1>;\n    using cmdsent = FieldModel<address,\
    \ 7, 1>;\n    using cmdrend = FieldModel<address, 6, 1>;\n    using rxoverr =\
    \ FieldModel<address, 5, 1>;\n    using txunderr = FieldModel<address, 4, 1>;\n\
    \    using dtimeout = FieldModel<address, 3, 1>;\n    using ctimeout = FieldModel<address,\
    \ 2, 1>;\n    using dcrcfail = FieldModel<address, 1, 1>;\n    using ccrcfail\
    \ = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<23, 1> ceataend;\n      BitFieldModel<22, 1> sdioit;\n\
    \      BitFieldModel<21, 1> rxdavl;\n      BitFieldModel<20, 1> txdavl;\n    \
    \  BitFieldModel<19, 1> rxfifoe;\n      BitFieldModel<18, 1> txfifoe;\n      BitFieldModel<17,\
    \ 1> rxfifof;\n      BitFieldModel<16, 1> txfifof;\n      BitFieldModel<15, 1>\
    \ rxfifohf;\n      BitFieldModel<14, 1> txfifohe;\n      BitFieldModel<13, 1>\
    \ rxact;\n      BitFieldModel<12, 1> txact;\n      BitFieldModel<11, 1> cmdact;\n\
    \      BitFieldModel<10, 1> dbckend;\n      BitFieldModel<9, 1> stbiterr;\n  \
    \    BitFieldModel<8, 1> dataend;\n      BitFieldModel<7, 1> cmdsent;\n      BitFieldModel<6,\
    \ 1> cmdrend;\n      BitFieldModel<5, 1> rxoverr;\n      BitFieldModel<4, 1> txunderr;\n\
    \      BitFieldModel<3, 1> dtimeout;\n      BitFieldModel<2, 1> ctimeout;\n  \
    \    BitFieldModel<1, 1> dcrcfail;\n      BitFieldModel<0, 1> ccrcfail;\n    };\n\
    \  };\n\npublic:\n  using sta = StaReg<BaseAddress + 0x0034>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class IcrReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using ceataendc = FieldModel<address, 23, 1>;\n    using sdioitc = FieldModel<address,\
    \ 22, 1>;\n    using dbckendc = FieldModel<address, 10, 1>;\n    using stbiterrc\
    \ = FieldModel<address, 9, 1>;\n    using dataendc = FieldModel<address, 8, 1>;\n\
    \    using cmdsentc = FieldModel<address, 7, 1>;\n    using cmdrendc = FieldModel<address,\
    \ 6, 1>;\n    using rxoverrc = FieldModel<address, 5, 1>;\n    using txunderrc\
    \ = FieldModel<address, 4, 1>;\n    using dtimeoutc = FieldModel<address, 3, 1>;\n\
    \    using ctimeoutc = FieldModel<address, 2, 1>;\n    using dcrcfailc = FieldModel<address,\
    \ 1, 1>;\n    using ccrcfailc = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<23, 1> ceataendc;\n \
    \     BitFieldModel<22, 1> sdioitc;\n      BitFieldModel<10, 1> dbckendc;\n  \
    \    BitFieldModel<9, 1> stbiterrc;\n      BitFieldModel<8, 1> dataendc;\n   \
    \   BitFieldModel<7, 1> cmdsentc;\n      BitFieldModel<6, 1> cmdrendc;\n     \
    \ BitFieldModel<5, 1> rxoverrc;\n      BitFieldModel<4, 1> txunderrc;\n      BitFieldModel<3,\
    \ 1> dtimeoutc;\n      BitFieldModel<2, 1> ctimeoutc;\n      BitFieldModel<1,\
    \ 1> dcrcfailc;\n      BitFieldModel<0, 1> ccrcfailc;\n    };\n  };\n\npublic:\n\
    \  using icr = IcrReg<BaseAddress + 0x0038>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class MaskReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ceataendie = FieldModel<address, 23, 1>;\n    using sdioitie = FieldModel<address,\
    \ 22, 1>;\n    using rxdavlie = FieldModel<address, 21, 1>;\n    using txdavlie\
    \ = FieldModel<address, 20, 1>;\n    using rxfifoeie = FieldModel<address, 19,\
    \ 1>;\n    using txfifoeie = FieldModel<address, 18, 1>;\n    using rxfifofie\
    \ = FieldModel<address, 17, 1>;\n    using txfifofie = FieldModel<address, 16,\
    \ 1>;\n    using rxfifohfie = FieldModel<address, 15, 1>;\n    using txfifoheie\
    \ = FieldModel<address, 14, 1>;\n    using rxactie = FieldModel<address, 13, 1>;\n\
    \    using txactie = FieldModel<address, 12, 1>;\n    using cmdactie = FieldModel<address,\
    \ 11, 1>;\n    using dbckendie = FieldModel<address, 10, 1>;\n    using stbiterrie\
    \ = FieldModel<address, 9, 1>;\n    using dataendie = FieldModel<address, 8, 1>;\n\
    \    using cmdsentie = FieldModel<address, 7, 1>;\n    using cmdrendie = FieldModel<address,\
    \ 6, 1>;\n    using rxoverrie = FieldModel<address, 5, 1>;\n    using txunderrie\
    \ = FieldModel<address, 4, 1>;\n    using dtimeoutie = FieldModel<address, 3,\
    \ 1>;\n    using ctimeoutie = FieldModel<address, 2, 1>;\n    using dcrcfailie\
    \ = FieldModel<address, 1, 1>;\n    using ccrcfailie = FieldModel<address, 0,\
    \ 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<23,\
    \ 1> ceataendie;\n      BitFieldModel<22, 1> sdioitie;\n      BitFieldModel<21,\
    \ 1> rxdavlie;\n      BitFieldModel<20, 1> txdavlie;\n      BitFieldModel<19,\
    \ 1> rxfifoeie;\n      BitFieldModel<18, 1> txfifoeie;\n      BitFieldModel<17,\
    \ 1> rxfifofie;\n      BitFieldModel<16, 1> txfifofie;\n      BitFieldModel<15,\
    \ 1> rxfifohfie;\n      BitFieldModel<14, 1> txfifoheie;\n      BitFieldModel<13,\
    \ 1> rxactie;\n      BitFieldModel<12, 1> txactie;\n      BitFieldModel<11, 1>\
    \ cmdactie;\n      BitFieldModel<10, 1> dbckendie;\n      BitFieldModel<9, 1>\
    \ stbiterrie;\n      BitFieldModel<8, 1> dataendie;\n      BitFieldModel<7, 1>\
    \ cmdsentie;\n      BitFieldModel<6, 1> cmdrendie;\n      BitFieldModel<5, 1>\
    \ rxoverrie;\n      BitFieldModel<4, 1> txunderrie;\n      BitFieldModel<3, 1>\
    \ dtimeoutie;\n      BitFieldModel<2, 1> ctimeoutie;\n      BitFieldModel<1, 1>\
    \ dcrcfailie;\n      BitFieldModel<0, 1> ccrcfailie;\n    };\n  };\n\npublic:\n\
    \  using mask = MaskReg<BaseAddress + 0x003C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class FifocntReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using fifocount = FieldModel<address, 0, 24>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 24> fifocount;\n    };\n\
    \  };\n\npublic:\n  using fifocnt = FifocntReg<BaseAddress + 0x0048>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class FifoReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using fifodata = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> fifodata;\n\
    \    };\n  };\n\npublic:\n  using fifo = FifoReg<BaseAddress + 0x0080>;\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_SDIO_H */\n"
  name: SDIO
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SYSCFG_H\n#define DRAL_STM32F411_SYSCFG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass syscfg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class MemrmReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mem_mode = FieldModel<address, 0, 2>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 2> mem_mode;\n\
    \    };\n  };\n\npublic:\n  using memrm = MemrmReg<BaseAddress + 0x0000>;\n\n\
    private:\n  template<uint32_t address>\n  class PmcReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using adc1dc2 = FieldModel<address, 16, 1>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 1> adc1dc2;\n\
    \    };\n  };\n\npublic:\n  using pmc = PmcReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Exticr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using exti3 = FieldModel<address, 12, 4>;\n    using exti2\
    \ = FieldModel<address, 8, 4>;\n    using exti1 = FieldModel<address, 4, 4>;\n\
    \    using exti0 = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<12, 4> exti3;\n      BitFieldModel<8,\
    \ 4> exti2;\n      BitFieldModel<4, 4> exti1;\n      BitFieldModel<0, 4> exti0;\n\
    \    };\n  };\n\npublic:\n  using exticr1 = Exticr1Reg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Exticr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using exti7 = FieldModel<address, 12, 4>;\n    using exti6\
    \ = FieldModel<address, 8, 4>;\n    using exti5 = FieldModel<address, 4, 4>;\n\
    \    using exti4 = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<12, 4> exti7;\n      BitFieldModel<8,\
    \ 4> exti6;\n      BitFieldModel<4, 4> exti5;\n      BitFieldModel<0, 4> exti4;\n\
    \    };\n  };\n\npublic:\n  using exticr2 = Exticr2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Exticr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using exti11 = FieldModel<address, 12, 4>;\n    using exti10\
    \ = FieldModel<address, 8, 4>;\n    using exti9 = FieldModel<address, 4, 4>;\n\
    \    using exti8 = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<12, 4> exti11;\n      BitFieldModel<8,\
    \ 4> exti10;\n      BitFieldModel<4, 4> exti9;\n      BitFieldModel<0, 4> exti8;\n\
    \    };\n  };\n\npublic:\n  using exticr3 = Exticr3Reg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Exticr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using exti15 = FieldModel<address, 12, 4>;\n    using exti14\
    \ = FieldModel<address, 8, 4>;\n    using exti13 = FieldModel<address, 4, 4>;\n\
    \    using exti12 = FieldModel<address, 0, 4>;\n\n  public:\n    union reg\n \
    \   {\n      uint32_t value;\n      BitFieldModel<12, 4> exti15;\n      BitFieldModel<8,\
    \ 4> exti14;\n      BitFieldModel<4, 4> exti13;\n      BitFieldModel<0, 4> exti12;\n\
    \    };\n  };\n\npublic:\n  using exticr4 = Exticr4Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CmpcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ready = FieldModel<address, 8, 1>;\n    using cmp_pd\
    \ = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<8, 1> ready;\n      BitFieldModel<0, 1> cmp_pd;\n\
    \    };\n  };\n\npublic:\n  using cmpcr = CmpcrReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SYSCFG_H */\n"
  name: SYSCFG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM1_H\n#define DRAL_STM32F411_TIM1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40010000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using cms = FieldModel<address, 5, 2>;\n   \
    \ using dir = FieldModel<address, 4, 1>;\n    using opm = FieldModel<address,\
    \ 3, 1>;\n    using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<5, 2> cms;\n      BitFieldModel<4, 1> dir;\n \
    \     BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n      BitFieldModel<1,\
    \ 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n    using ois4\
    \ = FieldModel<address, 14, 1>;\n    using ois3n = FieldModel<address, 13, 1>;\n\
    \    using ois3 = FieldModel<address, 12, 1>;\n    using ois2n = FieldModel<address,\
    \ 11, 1>;\n    using ois2 = FieldModel<address, 10, 1>;\n    using ois1n = FieldModel<address,\
    \ 9, 1>;\n    using ois1 = FieldModel<address, 8, 1>;\n    using ti1s = FieldModel<address,\
    \ 7, 1>;\n    using mms = FieldModel<address, 4, 3>;\n    using ccds = FieldModel<address,\
    \ 3, 1>;\n    using ccus = FieldModel<address, 2, 1>;\n    using ccpc = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> ois4;\n      BitFieldModel<13, 1> ois3n;\n      BitFieldModel<12, 1> ois3;\n\
    \      BitFieldModel<11, 1> ois2n;\n      BitFieldModel<10, 1> ois2;\n      BitFieldModel<9,\
    \ 1> ois1n;\n      BitFieldModel<8, 1> ois1;\n      BitFieldModel<7, 1> ti1s;\n\
    \      BitFieldModel<4, 3> mms;\n      BitFieldModel<3, 1> ccds;\n      BitFieldModel<2,\
    \ 1> ccus;\n      BitFieldModel<0, 1> ccpc;\n    };\n  };\n\npublic:\n  using\
    \ cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n    using etp\
    \ = FieldModel<address, 15, 1>;\n    using ece = FieldModel<address, 14, 1>;\n\
    \    using etps = FieldModel<address, 12, 2>;\n    using etf = FieldModel<address,\
    \ 8, 4>;\n    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> etp;\n      BitFieldModel<14,\
    \ 1> ece;\n      BitFieldModel<12, 2> etps;\n      BitFieldModel<8, 4> etf;\n\
    \      BitFieldModel<7, 1> msm;\n      BitFieldModel<4, 3> ts;\n      BitFieldModel<0,\
    \ 3> sms;\n    };\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DierReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 1>;\n    using comde\
    \ = FieldModel<address, 13, 1>;\n    using cc4de = FieldModel<address, 12, 1>;\n\
    \    using cc3de = FieldModel<address, 11, 1>;\n    using cc2de = FieldModel<address,\
    \ 10, 1>;\n    using cc1de = FieldModel<address, 9, 1>;\n    using ude = FieldModel<address,\
    \ 8, 1>;\n    using bie = FieldModel<address, 7, 1>;\n    using tie = FieldModel<address,\
    \ 6, 1>;\n    using comie = FieldModel<address, 5, 1>;\n    using cc4ie = FieldModel<address,\
    \ 4, 1>;\n    using cc3ie = FieldModel<address, 3, 1>;\n    using cc2ie = FieldModel<address,\
    \ 2, 1>;\n    using cc1ie = FieldModel<address, 1, 1>;\n    using uie = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> tde;\n      BitFieldModel<13, 1> comde;\n      BitFieldModel<12, 1> cc4de;\n\
    \      BitFieldModel<11, 1> cc3de;\n      BitFieldModel<10, 1> cc2de;\n      BitFieldModel<9,\
    \ 1> cc1de;\n      BitFieldModel<8, 1> ude;\n      BitFieldModel<7, 1> bie;\n\
    \      BitFieldModel<6, 1> tie;\n      BitFieldModel<5, 1> comie;\n      BitFieldModel<4,\
    \ 1> cc4ie;\n      BitFieldModel<3, 1> cc3ie;\n      BitFieldModel<2, 1> cc2ie;\n\
    \      BitFieldModel<1, 1> cc1ie;\n      BitFieldModel<0, 1> uie;\n    };\n  };\n\
    \npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class SrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using cc4of = FieldModel<address, 12, 1>;\n    using cc3of = FieldModel<address,\
    \ 11, 1>;\n    using cc2of = FieldModel<address, 10, 1>;\n    using cc1of = FieldModel<address,\
    \ 9, 1>;\n    using bif = FieldModel<address, 7, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using comif = FieldModel<address, 5, 1>;\n    using cc4if = FieldModel<address,\
    \ 4, 1>;\n    using cc3if = FieldModel<address, 3, 1>;\n    using cc2if = FieldModel<address,\
    \ 2, 1>;\n    using cc1if = FieldModel<address, 1, 1>;\n    using uif = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 1> cc4of;\n      BitFieldModel<11, 1> cc3of;\n      BitFieldModel<10, 1> cc2of;\n\
    \      BitFieldModel<9, 1> cc1of;\n      BitFieldModel<7, 1> bif;\n      BitFieldModel<6,\
    \ 1> tif;\n      BitFieldModel<5, 1> comif;\n      BitFieldModel<4, 1> cc4if;\n\
    \      BitFieldModel<3, 1> cc3if;\n      BitFieldModel<2, 1> cc2if;\n      BitFieldModel<1,\
    \ 1> cc1if;\n      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using\
    \ sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class EgrReg : public RegisterModel<address>\n  {\n  public:\n    using bg\
    \ = FieldModel<address, 7, 1>;\n    using tg = FieldModel<address, 6, 1>;\n  \
    \  using comg = FieldModel<address, 5, 1>;\n    using cc4g = FieldModel<address,\
    \ 4, 1>;\n    using cc3g = FieldModel<address, 3, 1>;\n    using cc2g = FieldModel<address,\
    \ 2, 1>;\n    using cc1g = FieldModel<address, 1, 1>;\n    using ug = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> bg;\n      BitFieldModel<6, 1> tg;\n      BitFieldModel<5, 1> comg;\n   \
    \   BitFieldModel<4, 1> cc4g;\n      BitFieldModel<3, 1> cc3g;\n      BitFieldModel<2,\
    \ 1> cc2g;\n      BitFieldModel<1, 1> cc1g;\n      BitFieldModel<0, 1> ug;\n \
    \   };\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccmr1_outputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using oc2ce = FieldModel<address, 15, 1>;\n    using oc2m\
    \ = FieldModel<address, 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n\
    \    using oc2fe = FieldModel<address, 10, 1>;\n    using cc2s = FieldModel<address,\
    \ 8, 2>;\n    using oc1ce = FieldModel<address, 7, 1>;\n    using oc1m = FieldModel<address,\
    \ 4, 3>;\n    using oc1pe = FieldModel<address, 3, 1>;\n    using oc1fe = FieldModel<address,\
    \ 2, 1>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc2ce;\n     \
    \ BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11, 1> oc2pe;\n      BitFieldModel<10,\
    \ 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<7, 1> oc1ce;\n\
    \      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n      BitFieldModel<2,\
    \ 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic2f = FieldModel<address, 12, 4>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using ic1f = FieldModel<address,\
    \ 4, 4>;\n    using icpcs = FieldModel<address, 2, 2>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic2f;\n      BitFieldModel<10, 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n\
    \      BitFieldModel<4, 4> ic1f;\n      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0,\
    \ 2> cc1s;\n    };\n  };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n  class Ccmr2_outputReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using oc4ce = FieldModel<address,\
    \ 15, 1>;\n    using oc4m = FieldModel<address, 12, 3>;\n    using oc4pe = FieldModel<address,\
    \ 11, 1>;\n    using oc4fe = FieldModel<address, 10, 1>;\n    using cc4s = FieldModel<address,\
    \ 8, 2>;\n    using oc3ce = FieldModel<address, 7, 1>;\n    using oc3m = FieldModel<address,\
    \ 4, 3>;\n    using oc3pe = FieldModel<address, 3, 1>;\n    using oc3fe = FieldModel<address,\
    \ 2, 1>;\n    using cc3s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc4ce;\n     \
    \ BitFieldModel<12, 3> oc4m;\n      BitFieldModel<11, 1> oc4pe;\n      BitFieldModel<10,\
    \ 1> oc4fe;\n      BitFieldModel<8, 2> cc4s;\n      BitFieldModel<7, 1> oc3ce;\n\
    \      BitFieldModel<4, 3> oc3m;\n      BitFieldModel<3, 1> oc3pe;\n      BitFieldModel<2,\
    \ 1> oc3fe;\n      BitFieldModel<0, 2> cc3s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr2_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic4f = FieldModel<address, 12, 4>;\n    using ic4psc = FieldModel<address,\
    \ 10, 2>;\n    using cc4s = FieldModel<address, 8, 2>;\n    using ic3f = FieldModel<address,\
    \ 4, 4>;\n    using ic3psc = FieldModel<address, 2, 2>;\n    using cc3s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic4f;\n      BitFieldModel<10, 2> ic4psc;\n      BitFieldModel<8, 2> cc4s;\n\
    \      BitFieldModel<4, 4> ic3f;\n      BitFieldModel<2, 2> ic3psc;\n      BitFieldModel<0,\
    \ 2> cc3s;\n    };\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4p = FieldModel<address,\
    \ 13, 1>;\n    using cc4e = FieldModel<address, 12, 1>;\n    using cc3np = FieldModel<address,\
    \ 11, 1>;\n    using cc3ne = FieldModel<address, 10, 1>;\n    using cc3p = FieldModel<address,\
    \ 9, 1>;\n    using cc3e = FieldModel<address, 8, 1>;\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2ne = FieldModel<address, 6, 1>;\n    using cc2p = FieldModel<address,\
    \ 5, 1>;\n    using cc2e = FieldModel<address, 4, 1>;\n    using cc1np = FieldModel<address,\
    \ 3, 1>;\n    using cc1ne = FieldModel<address, 2, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<13, 1> cc4p;\n      BitFieldModel<12,\
    \ 1> cc4e;\n      BitFieldModel<11, 1> cc3np;\n      BitFieldModel<10, 1> cc3ne;\n\
    \      BitFieldModel<9, 1> cc3p;\n      BitFieldModel<8, 1> cc3e;\n      BitFieldModel<7,\
    \ 1> cc2np;\n      BitFieldModel<6, 1> cc2ne;\n      BitFieldModel<5, 1> cc2p;\n\
    \      BitFieldModel<4, 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<2,\
    \ 1> cc1ne;\n      BitFieldModel<1, 1> cc1p;\n      BitFieldModel<0, 1> cc1e;\n\
    \    };\n  };\n\npublic:\n  using ccer = CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CntReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cnt = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> cnt;\n\
    \    };\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress + 0x0024>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class PscReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using psc = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> psc;\n\
    \    };\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ArrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> arr;\n\
    \    };\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr1;\n\
    \    };\n  };\n\npublic:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr2 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr2;\n\
    \    };\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr3;\n\
    \    };\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr4;\n\
    \    };\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 5>;\n    using dba = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 5> dbl;\n      BitFieldModel<0, 5> dba;\n    };\n  };\n\npublic:\n  using dcr\
    \ = DcrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DmarReg : public RegisterModel<address>\n  {\n  public:\n    using dmab\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> dmab;\n    };\n  };\n\npublic:\n  using dmar\
    \ = DmarReg<BaseAddress + 0x004C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class RcrReg : public RegisterModel<address>\n  {\n  public:\n    using rep\
    \ = FieldModel<address, 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 8> rep;\n    };\n  };\n\npublic:\n  using rcr\
    \ = RcrReg<BaseAddress + 0x0030>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class BdtrReg : public RegisterModel<address>\n  {\n  public:\n    using moe\
    \ = FieldModel<address, 15, 1>;\n    using aoe = FieldModel<address, 14, 1>;\n\
    \    using bkp = FieldModel<address, 13, 1>;\n    using bke = FieldModel<address,\
    \ 12, 1>;\n    using ossr = FieldModel<address, 11, 1>;\n    using ossi = FieldModel<address,\
    \ 10, 1>;\n    using lock = FieldModel<address, 8, 2>;\n    using dtg = FieldModel<address,\
    \ 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> moe;\n      BitFieldModel<14, 1> aoe;\n      BitFieldModel<13, 1> bkp;\n\
    \      BitFieldModel<12, 1> bke;\n      BitFieldModel<11, 1> ossr;\n      BitFieldModel<10,\
    \ 1> ossi;\n      BitFieldModel<8, 2> lock;\n      BitFieldModel<0, 8> dtg;\n\
    \    };\n  };\n\npublic:\n  using bdtr = BdtrReg<BaseAddress + 0x0044>;\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_TIM1_H */\n"
  name: TIM1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM8_H\n#define DRAL_STM32F411_TIM8_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim8\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40010400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using cms = FieldModel<address, 5, 2>;\n   \
    \ using dir = FieldModel<address, 4, 1>;\n    using opm = FieldModel<address,\
    \ 3, 1>;\n    using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<5, 2> cms;\n      BitFieldModel<4, 1> dir;\n \
    \     BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n      BitFieldModel<1,\
    \ 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n    using ois4\
    \ = FieldModel<address, 14, 1>;\n    using ois3n = FieldModel<address, 13, 1>;\n\
    \    using ois3 = FieldModel<address, 12, 1>;\n    using ois2n = FieldModel<address,\
    \ 11, 1>;\n    using ois2 = FieldModel<address, 10, 1>;\n    using ois1n = FieldModel<address,\
    \ 9, 1>;\n    using ois1 = FieldModel<address, 8, 1>;\n    using ti1s = FieldModel<address,\
    \ 7, 1>;\n    using mms = FieldModel<address, 4, 3>;\n    using ccds = FieldModel<address,\
    \ 3, 1>;\n    using ccus = FieldModel<address, 2, 1>;\n    using ccpc = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> ois4;\n      BitFieldModel<13, 1> ois3n;\n      BitFieldModel<12, 1> ois3;\n\
    \      BitFieldModel<11, 1> ois2n;\n      BitFieldModel<10, 1> ois2;\n      BitFieldModel<9,\
    \ 1> ois1n;\n      BitFieldModel<8, 1> ois1;\n      BitFieldModel<7, 1> ti1s;\n\
    \      BitFieldModel<4, 3> mms;\n      BitFieldModel<3, 1> ccds;\n      BitFieldModel<2,\
    \ 1> ccus;\n      BitFieldModel<0, 1> ccpc;\n    };\n  };\n\npublic:\n  using\
    \ cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n    using etp\
    \ = FieldModel<address, 15, 1>;\n    using ece = FieldModel<address, 14, 1>;\n\
    \    using etps = FieldModel<address, 12, 2>;\n    using etf = FieldModel<address,\
    \ 8, 4>;\n    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> etp;\n      BitFieldModel<14,\
    \ 1> ece;\n      BitFieldModel<12, 2> etps;\n      BitFieldModel<8, 4> etf;\n\
    \      BitFieldModel<7, 1> msm;\n      BitFieldModel<4, 3> ts;\n      BitFieldModel<0,\
    \ 3> sms;\n    };\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DierReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 1>;\n    using comde\
    \ = FieldModel<address, 13, 1>;\n    using cc4de = FieldModel<address, 12, 1>;\n\
    \    using cc3de = FieldModel<address, 11, 1>;\n    using cc2de = FieldModel<address,\
    \ 10, 1>;\n    using cc1de = FieldModel<address, 9, 1>;\n    using ude = FieldModel<address,\
    \ 8, 1>;\n    using bie = FieldModel<address, 7, 1>;\n    using tie = FieldModel<address,\
    \ 6, 1>;\n    using comie = FieldModel<address, 5, 1>;\n    using cc4ie = FieldModel<address,\
    \ 4, 1>;\n    using cc3ie = FieldModel<address, 3, 1>;\n    using cc2ie = FieldModel<address,\
    \ 2, 1>;\n    using cc1ie = FieldModel<address, 1, 1>;\n    using uie = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> tde;\n      BitFieldModel<13, 1> comde;\n      BitFieldModel<12, 1> cc4de;\n\
    \      BitFieldModel<11, 1> cc3de;\n      BitFieldModel<10, 1> cc2de;\n      BitFieldModel<9,\
    \ 1> cc1de;\n      BitFieldModel<8, 1> ude;\n      BitFieldModel<7, 1> bie;\n\
    \      BitFieldModel<6, 1> tie;\n      BitFieldModel<5, 1> comie;\n      BitFieldModel<4,\
    \ 1> cc4ie;\n      BitFieldModel<3, 1> cc3ie;\n      BitFieldModel<2, 1> cc2ie;\n\
    \      BitFieldModel<1, 1> cc1ie;\n      BitFieldModel<0, 1> uie;\n    };\n  };\n\
    \npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class SrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using cc4of = FieldModel<address, 12, 1>;\n    using cc3of = FieldModel<address,\
    \ 11, 1>;\n    using cc2of = FieldModel<address, 10, 1>;\n    using cc1of = FieldModel<address,\
    \ 9, 1>;\n    using bif = FieldModel<address, 7, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using comif = FieldModel<address, 5, 1>;\n    using cc4if = FieldModel<address,\
    \ 4, 1>;\n    using cc3if = FieldModel<address, 3, 1>;\n    using cc2if = FieldModel<address,\
    \ 2, 1>;\n    using cc1if = FieldModel<address, 1, 1>;\n    using uif = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 1> cc4of;\n      BitFieldModel<11, 1> cc3of;\n      BitFieldModel<10, 1> cc2of;\n\
    \      BitFieldModel<9, 1> cc1of;\n      BitFieldModel<7, 1> bif;\n      BitFieldModel<6,\
    \ 1> tif;\n      BitFieldModel<5, 1> comif;\n      BitFieldModel<4, 1> cc4if;\n\
    \      BitFieldModel<3, 1> cc3if;\n      BitFieldModel<2, 1> cc2if;\n      BitFieldModel<1,\
    \ 1> cc1if;\n      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using\
    \ sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class EgrReg : public RegisterModel<address>\n  {\n  public:\n    using bg\
    \ = FieldModel<address, 7, 1>;\n    using tg = FieldModel<address, 6, 1>;\n  \
    \  using comg = FieldModel<address, 5, 1>;\n    using cc4g = FieldModel<address,\
    \ 4, 1>;\n    using cc3g = FieldModel<address, 3, 1>;\n    using cc2g = FieldModel<address,\
    \ 2, 1>;\n    using cc1g = FieldModel<address, 1, 1>;\n    using ug = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> bg;\n      BitFieldModel<6, 1> tg;\n      BitFieldModel<5, 1> comg;\n   \
    \   BitFieldModel<4, 1> cc4g;\n      BitFieldModel<3, 1> cc3g;\n      BitFieldModel<2,\
    \ 1> cc2g;\n      BitFieldModel<1, 1> cc1g;\n      BitFieldModel<0, 1> ug;\n \
    \   };\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccmr1_outputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using oc2ce = FieldModel<address, 15, 1>;\n    using oc2m\
    \ = FieldModel<address, 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n\
    \    using oc2fe = FieldModel<address, 10, 1>;\n    using cc2s = FieldModel<address,\
    \ 8, 2>;\n    using oc1ce = FieldModel<address, 7, 1>;\n    using oc1m = FieldModel<address,\
    \ 4, 3>;\n    using oc1pe = FieldModel<address, 3, 1>;\n    using oc1fe = FieldModel<address,\
    \ 2, 1>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc2ce;\n     \
    \ BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11, 1> oc2pe;\n      BitFieldModel<10,\
    \ 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<7, 1> oc1ce;\n\
    \      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n      BitFieldModel<2,\
    \ 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic2f = FieldModel<address, 12, 4>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using ic1f = FieldModel<address,\
    \ 4, 4>;\n    using icpcs = FieldModel<address, 2, 2>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic2f;\n      BitFieldModel<10, 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n\
    \      BitFieldModel<4, 4> ic1f;\n      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0,\
    \ 2> cc1s;\n    };\n  };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n  class Ccmr2_outputReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using oc4ce = FieldModel<address,\
    \ 15, 1>;\n    using oc4m = FieldModel<address, 12, 3>;\n    using oc4pe = FieldModel<address,\
    \ 11, 1>;\n    using oc4fe = FieldModel<address, 10, 1>;\n    using cc4s = FieldModel<address,\
    \ 8, 2>;\n    using oc3ce = FieldModel<address, 7, 1>;\n    using oc3m = FieldModel<address,\
    \ 4, 3>;\n    using oc3pe = FieldModel<address, 3, 1>;\n    using oc3fe = FieldModel<address,\
    \ 2, 1>;\n    using cc3s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc4ce;\n     \
    \ BitFieldModel<12, 3> oc4m;\n      BitFieldModel<11, 1> oc4pe;\n      BitFieldModel<10,\
    \ 1> oc4fe;\n      BitFieldModel<8, 2> cc4s;\n      BitFieldModel<7, 1> oc3ce;\n\
    \      BitFieldModel<4, 3> oc3m;\n      BitFieldModel<3, 1> oc3pe;\n      BitFieldModel<2,\
    \ 1> oc3fe;\n      BitFieldModel<0, 2> cc3s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr2_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic4f = FieldModel<address, 12, 4>;\n    using ic4psc = FieldModel<address,\
    \ 10, 2>;\n    using cc4s = FieldModel<address, 8, 2>;\n    using ic3f = FieldModel<address,\
    \ 4, 4>;\n    using ic3psc = FieldModel<address, 2, 2>;\n    using cc3s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic4f;\n      BitFieldModel<10, 2> ic4psc;\n      BitFieldModel<8, 2> cc4s;\n\
    \      BitFieldModel<4, 4> ic3f;\n      BitFieldModel<2, 2> ic3psc;\n      BitFieldModel<0,\
    \ 2> cc3s;\n    };\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4p = FieldModel<address,\
    \ 13, 1>;\n    using cc4e = FieldModel<address, 12, 1>;\n    using cc3np = FieldModel<address,\
    \ 11, 1>;\n    using cc3ne = FieldModel<address, 10, 1>;\n    using cc3p = FieldModel<address,\
    \ 9, 1>;\n    using cc3e = FieldModel<address, 8, 1>;\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2ne = FieldModel<address, 6, 1>;\n    using cc2p = FieldModel<address,\
    \ 5, 1>;\n    using cc2e = FieldModel<address, 4, 1>;\n    using cc1np = FieldModel<address,\
    \ 3, 1>;\n    using cc1ne = FieldModel<address, 2, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<13, 1> cc4p;\n      BitFieldModel<12,\
    \ 1> cc4e;\n      BitFieldModel<11, 1> cc3np;\n      BitFieldModel<10, 1> cc3ne;\n\
    \      BitFieldModel<9, 1> cc3p;\n      BitFieldModel<8, 1> cc3e;\n      BitFieldModel<7,\
    \ 1> cc2np;\n      BitFieldModel<6, 1> cc2ne;\n      BitFieldModel<5, 1> cc2p;\n\
    \      BitFieldModel<4, 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<2,\
    \ 1> cc1ne;\n      BitFieldModel<1, 1> cc1p;\n      BitFieldModel<0, 1> cc1e;\n\
    \    };\n  };\n\npublic:\n  using ccer = CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CntReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cnt = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> cnt;\n\
    \    };\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress + 0x0024>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class PscReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using psc = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> psc;\n\
    \    };\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ArrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 16>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> arr;\n\
    \    };\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr1;\n\
    \    };\n  };\n\npublic:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr2 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr2;\n\
    \    };\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr3;\n\
    \    };\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4 = FieldModel<address, 0, 16>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr4;\n\
    \    };\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 5>;\n    using dba = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 5> dbl;\n      BitFieldModel<0, 5> dba;\n    };\n  };\n\npublic:\n  using dcr\
    \ = DcrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DmarReg : public RegisterModel<address>\n  {\n  public:\n    using dmab\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> dmab;\n    };\n  };\n\npublic:\n  using dmar\
    \ = DmarReg<BaseAddress + 0x004C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class RcrReg : public RegisterModel<address>\n  {\n  public:\n    using rep\
    \ = FieldModel<address, 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 8> rep;\n    };\n  };\n\npublic:\n  using rcr\
    \ = RcrReg<BaseAddress + 0x0030>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class BdtrReg : public RegisterModel<address>\n  {\n  public:\n    using moe\
    \ = FieldModel<address, 15, 1>;\n    using aoe = FieldModel<address, 14, 1>;\n\
    \    using bkp = FieldModel<address, 13, 1>;\n    using bke = FieldModel<address,\
    \ 12, 1>;\n    using ossr = FieldModel<address, 11, 1>;\n    using ossi = FieldModel<address,\
    \ 10, 1>;\n    using lock = FieldModel<address, 8, 2>;\n    using dtg = FieldModel<address,\
    \ 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> moe;\n      BitFieldModel<14, 1> aoe;\n      BitFieldModel<13, 1> bkp;\n\
    \      BitFieldModel<12, 1> bke;\n      BitFieldModel<11, 1> ossr;\n      BitFieldModel<10,\
    \ 1> ossi;\n      BitFieldModel<8, 2> lock;\n      BitFieldModel<0, 8> dtg;\n\
    \    };\n  };\n\npublic:\n  using bdtr = BdtrReg<BaseAddress + 0x0044>;\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_TIM8_H */\n"
  name: TIM8
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM10_H\n#define DRAL_STM32F411_TIM10_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim10\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40014400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using urs = FieldModel<address, 2, 1>;\n   \
    \ using udis = FieldModel<address, 1, 1>;\n    using cen = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 2> ckd;\n      BitFieldModel<7, 1> arpe;\n      BitFieldModel<2, 1> urs;\n \
    \     BitFieldModel<1, 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\
    \npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DierReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using cc1ie = FieldModel<address, 1, 1>;\n    using uie = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<1,\
    \ 1> cc1ie;\n      BitFieldModel<0, 1> uie;\n    };\n  };\n\npublic:\n  using\
    \ dier = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SrReg : public RegisterModel<address>\n  {\n  public:\n    using cc1of\
    \ = FieldModel<address, 9, 1>;\n    using cc1if = FieldModel<address, 1, 1>;\n\
    \    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<9, 1> cc1of;\n      BitFieldModel<1,\
    \ 1> cc1if;\n      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using\
    \ sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class EgrReg : public RegisterModel<address>\n  {\n  public:\n    using cc1g\
    \ = FieldModel<address, 1, 1>;\n    using ug = FieldModel<address, 0, 1>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<1,\
    \ 1> cc1g;\n      BitFieldModel<0, 1> ug;\n    };\n  };\n\npublic:\n  using egr\
    \ = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ccmr1_outputReg : public RegisterModel<address>\n  {\n  public:\n   \
    \ using oc1m = FieldModel<address, 4, 3>;\n    using oc1pe = FieldModel<address,\
    \ 3, 1>;\n    using oc1fe = FieldModel<address, 2, 1>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<4,\
    \ 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n      BitFieldModel<2, 1> oc1fe;\n\
    \      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using ccmr1_output\
    \ = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ccmr1_inputReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic1f = FieldModel<address, 4, 4>;\n    using icpcs = FieldModel<address, 2,\
    \ 2>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<4, 4> ic1f;\n      BitFieldModel<2,\
    \ 2> icpcs;\n      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class CcerReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<1,\
    \ 1> cc1p;\n      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\npublic:\n  using\
    \ ccer = CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class CntReg : public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> cnt;\n    };\n  };\n\npublic:\n  using cnt\
    \ = CntReg<BaseAddress + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PscReg : public RegisterModel<address>\n  {\n  public:\n    using psc\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> psc;\n    };\n  };\n\npublic:\n  using psc\
    \ = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class ArrReg : public RegisterModel<address>\n  {\n  public:\n    using arr\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> arr;\n    };\n  };\n\npublic:\n  using arr\
    \ = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ccr1Reg : public RegisterModel<address>\n  {\n  public:\n    using ccr1\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> ccr1;\n    };\n  };\n\npublic:\n  using ccr1\
    \ = Ccr1Reg<BaseAddress + 0x0034>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM10_H\
    \ */\n"
  name: TIM10
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM11_H\n#define DRAL_STM32F411_TIM11_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim11\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40014800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using urs = FieldModel<address, 2, 1>;\n   \
    \ using udis = FieldModel<address, 1, 1>;\n    using cen = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 2> ckd;\n      BitFieldModel<7, 1> arpe;\n      BitFieldModel<2, 1> urs;\n \
    \     BitFieldModel<1, 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\
    \npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DierReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using cc1ie = FieldModel<address, 1, 1>;\n    using uie = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<1,\
    \ 1> cc1ie;\n      BitFieldModel<0, 1> uie;\n    };\n  };\n\npublic:\n  using\
    \ dier = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SrReg : public RegisterModel<address>\n  {\n  public:\n    using cc1of\
    \ = FieldModel<address, 9, 1>;\n    using cc1if = FieldModel<address, 1, 1>;\n\
    \    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<9, 1> cc1of;\n      BitFieldModel<1,\
    \ 1> cc1if;\n      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using\
    \ sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class EgrReg : public RegisterModel<address>\n  {\n  public:\n    using cc1g\
    \ = FieldModel<address, 1, 1>;\n    using ug = FieldModel<address, 0, 1>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<1,\
    \ 1> cc1g;\n      BitFieldModel<0, 1> ug;\n    };\n  };\n\npublic:\n  using egr\
    \ = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ccmr1_outputReg : public RegisterModel<address>\n  {\n  public:\n   \
    \ using oc1m = FieldModel<address, 4, 3>;\n    using oc1pe = FieldModel<address,\
    \ 3, 1>;\n    using oc1fe = FieldModel<address, 2, 1>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<4,\
    \ 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n      BitFieldModel<2, 1> oc1fe;\n\
    \      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using ccmr1_output\
    \ = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ccmr1_inputReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic1f = FieldModel<address, 4, 4>;\n    using icpcs = FieldModel<address, 2,\
    \ 2>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<4, 4> ic1f;\n      BitFieldModel<2,\
    \ 2> icpcs;\n      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class CcerReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<1,\
    \ 1> cc1p;\n      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\npublic:\n  using\
    \ ccer = CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class CntReg : public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> cnt;\n    };\n  };\n\npublic:\n  using cnt\
    \ = CntReg<BaseAddress + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PscReg : public RegisterModel<address>\n  {\n  public:\n    using psc\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> psc;\n    };\n  };\n\npublic:\n  using psc\
    \ = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class ArrReg : public RegisterModel<address>\n  {\n  public:\n    using arr\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> arr;\n    };\n  };\n\npublic:\n  using arr\
    \ = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Ccr1Reg : public RegisterModel<address>\n  {\n  public:\n    using ccr1\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> ccr1;\n    };\n  };\n\npublic:\n  using ccr1\
    \ = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OrReg : public RegisterModel<address>\n  {\n  public:\n    using rmp\
    \ = FieldModel<address, 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 2> rmp;\n    };\n  };\n\npublic:\n  using or_\
    \ = OrReg<BaseAddress + 0x0050>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM11_H\
    \ */\n"
  name: TIM11
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM2_H\n#define DRAL_STM32F411_TIM2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using cms = FieldModel<address, 5, 2>;\n   \
    \ using dir = FieldModel<address, 4, 1>;\n    using opm = FieldModel<address,\
    \ 3, 1>;\n    using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<5, 2> cms;\n      BitFieldModel<4, 1> dir;\n \
    \     BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n      BitFieldModel<1,\
    \ 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n    using ti1s\
    \ = FieldModel<address, 7, 1>;\n    using mms = FieldModel<address, 4, 3>;\n \
    \   using ccds = FieldModel<address, 3, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<7, 1> ti1s;\n      BitFieldModel<4,\
    \ 3> mms;\n      BitFieldModel<3, 1> ccds;\n    };\n  };\n\npublic:\n  using cr2\
    \ = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n    using etp\
    \ = FieldModel<address, 15, 1>;\n    using ece = FieldModel<address, 14, 1>;\n\
    \    using etps = FieldModel<address, 12, 2>;\n    using etf = FieldModel<address,\
    \ 8, 4>;\n    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> etp;\n      BitFieldModel<14,\
    \ 1> ece;\n      BitFieldModel<12, 2> etps;\n      BitFieldModel<8, 4> etf;\n\
    \      BitFieldModel<7, 1> msm;\n      BitFieldModel<4, 3> ts;\n      BitFieldModel<0,\
    \ 3> sms;\n    };\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DierReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 1>;\n    using cc4de\
    \ = FieldModel<address, 12, 1>;\n    using cc3de = FieldModel<address, 11, 1>;\n\
    \    using cc2de = FieldModel<address, 10, 1>;\n    using cc1de = FieldModel<address,\
    \ 9, 1>;\n    using ude = FieldModel<address, 8, 1>;\n    using tie = FieldModel<address,\
    \ 6, 1>;\n    using cc4ie = FieldModel<address, 4, 1>;\n    using cc3ie = FieldModel<address,\
    \ 3, 1>;\n    using cc2ie = FieldModel<address, 2, 1>;\n    using cc1ie = FieldModel<address,\
    \ 1, 1>;\n    using uie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<14, 1> tde;\n      BitFieldModel<12,\
    \ 1> cc4de;\n      BitFieldModel<11, 1> cc3de;\n      BitFieldModel<10, 1> cc2de;\n\
    \      BitFieldModel<9, 1> cc1de;\n      BitFieldModel<8, 1> ude;\n      BitFieldModel<6,\
    \ 1> tie;\n      BitFieldModel<4, 1> cc4ie;\n      BitFieldModel<3, 1> cc3ie;\n\
    \      BitFieldModel<2, 1> cc2ie;\n      BitFieldModel<1, 1> cc1ie;\n      BitFieldModel<0,\
    \ 1> uie;\n    };\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 1>;\n    using cc3of\
    \ = FieldModel<address, 11, 1>;\n    using cc2of = FieldModel<address, 10, 1>;\n\
    \    using cc1of = FieldModel<address, 9, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using cc4if = FieldModel<address, 4, 1>;\n    using cc3if = FieldModel<address,\
    \ 3, 1>;\n    using cc2if = FieldModel<address, 2, 1>;\n    using cc1if = FieldModel<address,\
    \ 1, 1>;\n    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<12, 1> cc4of;\n      BitFieldModel<11,\
    \ 1> cc3of;\n      BitFieldModel<10, 1> cc2of;\n      BitFieldModel<9, 1> cc1of;\n\
    \      BitFieldModel<6, 1> tif;\n      BitFieldModel<4, 1> cc4if;\n      BitFieldModel<3,\
    \ 1> cc3if;\n      BitFieldModel<2, 1> cc2if;\n      BitFieldModel<1, 1> cc1if;\n\
    \      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class EgrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using tg = FieldModel<address, 6,\
    \ 1>;\n    using cc4g = FieldModel<address, 4, 1>;\n    using cc3g = FieldModel<address,\
    \ 3, 1>;\n    using cc2g = FieldModel<address, 2, 1>;\n    using cc1g = FieldModel<address,\
    \ 1, 1>;\n    using ug = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<6, 1> tg;\n      BitFieldModel<4,\
    \ 1> cc4g;\n      BitFieldModel<3, 1> cc3g;\n      BitFieldModel<2, 1> cc2g;\n\
    \      BitFieldModel<1, 1> cc1g;\n      BitFieldModel<0, 1> ug;\n    };\n  };\n\
    \npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_outputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 1>;\n    using oc2m = FieldModel<address,\
    \ 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n    using oc2fe = FieldModel<address,\
    \ 10, 1>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using oc1ce = FieldModel<address,\
    \ 7, 1>;\n    using oc1m = FieldModel<address, 4, 3>;\n    using oc1pe = FieldModel<address,\
    \ 3, 1>;\n    using oc1fe = FieldModel<address, 2, 1>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> oc2ce;\n      BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11, 1> oc2pe;\n\
    \      BitFieldModel<10, 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<7,\
    \ 1> oc1ce;\n      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n\
    \      BitFieldModel<2, 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ic2f = FieldModel<address, 12, 4>;\n    using ic2pcs\
    \ = FieldModel<address, 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n\
    \    using ic1f = FieldModel<address, 4, 4>;\n    using icpcs = FieldModel<address,\
    \ 2, 2>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 4> ic2f;\n      BitFieldModel<10,\
    \ 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<4, 4> ic1f;\n\
    \      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr2_outputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 1>;\n    using oc4m\
    \ = FieldModel<address, 12, 3>;\n    using oc4pe = FieldModel<address, 11, 1>;\n\
    \    using oc4fe = FieldModel<address, 10, 1>;\n    using cc4s = FieldModel<address,\
    \ 8, 2>;\n    using oc3ce = FieldModel<address, 7, 1>;\n    using oc3m = FieldModel<address,\
    \ 4, 3>;\n    using oc3pe = FieldModel<address, 3, 1>;\n    using oc3fe = FieldModel<address,\
    \ 2, 1>;\n    using cc3s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc4ce;\n     \
    \ BitFieldModel<12, 3> oc4m;\n      BitFieldModel<11, 1> oc4pe;\n      BitFieldModel<10,\
    \ 1> oc4fe;\n      BitFieldModel<8, 2> cc4s;\n      BitFieldModel<7, 1> oc3ce;\n\
    \      BitFieldModel<4, 3> oc3m;\n      BitFieldModel<3, 1> oc3pe;\n      BitFieldModel<2,\
    \ 1> oc3fe;\n      BitFieldModel<0, 2> cc3s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr2_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic4f = FieldModel<address, 12, 4>;\n    using ic4psc = FieldModel<address,\
    \ 10, 2>;\n    using cc4s = FieldModel<address, 8, 2>;\n    using ic3f = FieldModel<address,\
    \ 4, 4>;\n    using ic3psc = FieldModel<address, 2, 2>;\n    using cc3s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic4f;\n      BitFieldModel<10, 2> ic4psc;\n      BitFieldModel<8, 2> cc4s;\n\
    \      BitFieldModel<4, 4> ic3f;\n      BitFieldModel<2, 2> ic3psc;\n      BitFieldModel<0,\
    \ 2> cc3s;\n    };\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 1>;\n    using cc4p = FieldModel<address, 13, 1>;\n    using cc4e = FieldModel<address,\
    \ 12, 1>;\n    using cc3np = FieldModel<address, 11, 1>;\n    using cc3p = FieldModel<address,\
    \ 9, 1>;\n    using cc3e = FieldModel<address, 8, 1>;\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2p = FieldModel<address, 5, 1>;\n    using cc2e = FieldModel<address,\
    \ 4, 1>;\n    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> cc4np;\n     \
    \ BitFieldModel<13, 1> cc4p;\n      BitFieldModel<12, 1> cc4e;\n      BitFieldModel<11,\
    \ 1> cc3np;\n      BitFieldModel<9, 1> cc3p;\n      BitFieldModel<8, 1> cc3e;\n\
    \      BitFieldModel<7, 1> cc2np;\n      BitFieldModel<5, 1> cc2p;\n      BitFieldModel<4,\
    \ 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<1, 1> cc1p;\n\
    \      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\npublic:\n  using ccer = CcerReg<BaseAddress\
    \ + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n  class CntReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cnt_h = FieldModel<address,\
    \ 16, 16>;\n    using cnt_l = FieldModel<address, 0, 16>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 16> cnt_h;\n    \
    \  BitFieldModel<0, 16> cnt_l;\n    };\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n  class PscReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> psc;\n    };\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template<uint32_t address>\n  class ArrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using arr_h = FieldModel<address, 16, 16>;\n    using arr_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> arr_h;\n      BitFieldModel<0, 16> arr_l;\n\
    \    };\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 16>;\n    using ccr1_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr1_h;\n      BitFieldModel<0, 16> ccr1_l;\n\
    \    };\n  };\n\npublic:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr2_h = FieldModel<address, 16, 16>;\n    using ccr2_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr2_h;\n      BitFieldModel<0, 16> ccr2_l;\n\
    \    };\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 16>;\n    using ccr3_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr3_h;\n      BitFieldModel<0, 16> ccr3_l;\n\
    \    };\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4_h = FieldModel<address, 16, 16>;\n    using ccr4_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr4_h;\n      BitFieldModel<0, 16> ccr4_l;\n\
    \    };\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 5>;\n    using dba = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 5> dbl;\n      BitFieldModel<0, 5> dba;\n    };\n  };\n\npublic:\n  using dcr\
    \ = DcrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DmarReg : public RegisterModel<address>\n  {\n  public:\n    using dmab\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> dmab;\n    };\n  };\n\npublic:\n  using dmar\
    \ = DmarReg<BaseAddress + 0x004C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OrReg : public RegisterModel<address>\n  {\n  public:\n    using itr1_rmp\
    \ = FieldModel<address, 10, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<10, 2> itr1_rmp;\n    };\n  };\n\npublic:\n  using\
    \ or_ = OrReg<BaseAddress + 0x0050>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM2_H\
    \ */\n"
  name: TIM2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM3_H\n#define DRAL_STM32F411_TIM3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim3\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using cms = FieldModel<address, 5, 2>;\n   \
    \ using dir = FieldModel<address, 4, 1>;\n    using opm = FieldModel<address,\
    \ 3, 1>;\n    using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<5, 2> cms;\n      BitFieldModel<4, 1> dir;\n \
    \     BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n      BitFieldModel<1,\
    \ 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n    using ti1s\
    \ = FieldModel<address, 7, 1>;\n    using mms = FieldModel<address, 4, 3>;\n \
    \   using ccds = FieldModel<address, 3, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<7, 1> ti1s;\n      BitFieldModel<4,\
    \ 3> mms;\n      BitFieldModel<3, 1> ccds;\n    };\n  };\n\npublic:\n  using cr2\
    \ = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n    using etp\
    \ = FieldModel<address, 15, 1>;\n    using ece = FieldModel<address, 14, 1>;\n\
    \    using etps = FieldModel<address, 12, 2>;\n    using etf = FieldModel<address,\
    \ 8, 4>;\n    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> etp;\n      BitFieldModel<14,\
    \ 1> ece;\n      BitFieldModel<12, 2> etps;\n      BitFieldModel<8, 4> etf;\n\
    \      BitFieldModel<7, 1> msm;\n      BitFieldModel<4, 3> ts;\n      BitFieldModel<0,\
    \ 3> sms;\n    };\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DierReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 1>;\n    using cc4de\
    \ = FieldModel<address, 12, 1>;\n    using cc3de = FieldModel<address, 11, 1>;\n\
    \    using cc2de = FieldModel<address, 10, 1>;\n    using cc1de = FieldModel<address,\
    \ 9, 1>;\n    using ude = FieldModel<address, 8, 1>;\n    using tie = FieldModel<address,\
    \ 6, 1>;\n    using cc4ie = FieldModel<address, 4, 1>;\n    using cc3ie = FieldModel<address,\
    \ 3, 1>;\n    using cc2ie = FieldModel<address, 2, 1>;\n    using cc1ie = FieldModel<address,\
    \ 1, 1>;\n    using uie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<14, 1> tde;\n      BitFieldModel<12,\
    \ 1> cc4de;\n      BitFieldModel<11, 1> cc3de;\n      BitFieldModel<10, 1> cc2de;\n\
    \      BitFieldModel<9, 1> cc1de;\n      BitFieldModel<8, 1> ude;\n      BitFieldModel<6,\
    \ 1> tie;\n      BitFieldModel<4, 1> cc4ie;\n      BitFieldModel<3, 1> cc3ie;\n\
    \      BitFieldModel<2, 1> cc2ie;\n      BitFieldModel<1, 1> cc1ie;\n      BitFieldModel<0,\
    \ 1> uie;\n    };\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 1>;\n    using cc3of\
    \ = FieldModel<address, 11, 1>;\n    using cc2of = FieldModel<address, 10, 1>;\n\
    \    using cc1of = FieldModel<address, 9, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using cc4if = FieldModel<address, 4, 1>;\n    using cc3if = FieldModel<address,\
    \ 3, 1>;\n    using cc2if = FieldModel<address, 2, 1>;\n    using cc1if = FieldModel<address,\
    \ 1, 1>;\n    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<12, 1> cc4of;\n      BitFieldModel<11,\
    \ 1> cc3of;\n      BitFieldModel<10, 1> cc2of;\n      BitFieldModel<9, 1> cc1of;\n\
    \      BitFieldModel<6, 1> tif;\n      BitFieldModel<4, 1> cc4if;\n      BitFieldModel<3,\
    \ 1> cc3if;\n      BitFieldModel<2, 1> cc2if;\n      BitFieldModel<1, 1> cc1if;\n\
    \      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class EgrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using tg = FieldModel<address, 6,\
    \ 1>;\n    using cc4g = FieldModel<address, 4, 1>;\n    using cc3g = FieldModel<address,\
    \ 3, 1>;\n    using cc2g = FieldModel<address, 2, 1>;\n    using cc1g = FieldModel<address,\
    \ 1, 1>;\n    using ug = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<6, 1> tg;\n      BitFieldModel<4,\
    \ 1> cc4g;\n      BitFieldModel<3, 1> cc3g;\n      BitFieldModel<2, 1> cc2g;\n\
    \      BitFieldModel<1, 1> cc1g;\n      BitFieldModel<0, 1> ug;\n    };\n  };\n\
    \npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_outputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 1>;\n    using oc2m = FieldModel<address,\
    \ 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n    using oc2fe = FieldModel<address,\
    \ 10, 1>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using oc1ce = FieldModel<address,\
    \ 7, 1>;\n    using oc1m = FieldModel<address, 4, 3>;\n    using oc1pe = FieldModel<address,\
    \ 3, 1>;\n    using oc1fe = FieldModel<address, 2, 1>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> oc2ce;\n      BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11, 1> oc2pe;\n\
    \      BitFieldModel<10, 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<7,\
    \ 1> oc1ce;\n      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n\
    \      BitFieldModel<2, 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ic2f = FieldModel<address, 12, 4>;\n    using ic2pcs\
    \ = FieldModel<address, 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n\
    \    using ic1f = FieldModel<address, 4, 4>;\n    using icpcs = FieldModel<address,\
    \ 2, 2>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 4> ic2f;\n      BitFieldModel<10,\
    \ 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<4, 4> ic1f;\n\
    \      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr2_outputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 1>;\n    using oc4m\
    \ = FieldModel<address, 12, 3>;\n    using oc4pe = FieldModel<address, 11, 1>;\n\
    \    using oc4fe = FieldModel<address, 10, 1>;\n    using cc4s = FieldModel<address,\
    \ 8, 2>;\n    using oc3ce = FieldModel<address, 7, 1>;\n    using oc3m = FieldModel<address,\
    \ 4, 3>;\n    using oc3pe = FieldModel<address, 3, 1>;\n    using oc3fe = FieldModel<address,\
    \ 2, 1>;\n    using cc3s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc4ce;\n     \
    \ BitFieldModel<12, 3> oc4m;\n      BitFieldModel<11, 1> oc4pe;\n      BitFieldModel<10,\
    \ 1> oc4fe;\n      BitFieldModel<8, 2> cc4s;\n      BitFieldModel<7, 1> oc3ce;\n\
    \      BitFieldModel<4, 3> oc3m;\n      BitFieldModel<3, 1> oc3pe;\n      BitFieldModel<2,\
    \ 1> oc3fe;\n      BitFieldModel<0, 2> cc3s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr2_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic4f = FieldModel<address, 12, 4>;\n    using ic4psc = FieldModel<address,\
    \ 10, 2>;\n    using cc4s = FieldModel<address, 8, 2>;\n    using ic3f = FieldModel<address,\
    \ 4, 4>;\n    using ic3psc = FieldModel<address, 2, 2>;\n    using cc3s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic4f;\n      BitFieldModel<10, 2> ic4psc;\n      BitFieldModel<8, 2> cc4s;\n\
    \      BitFieldModel<4, 4> ic3f;\n      BitFieldModel<2, 2> ic3psc;\n      BitFieldModel<0,\
    \ 2> cc3s;\n    };\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 1>;\n    using cc4p = FieldModel<address, 13, 1>;\n    using cc4e = FieldModel<address,\
    \ 12, 1>;\n    using cc3np = FieldModel<address, 11, 1>;\n    using cc3p = FieldModel<address,\
    \ 9, 1>;\n    using cc3e = FieldModel<address, 8, 1>;\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2p = FieldModel<address, 5, 1>;\n    using cc2e = FieldModel<address,\
    \ 4, 1>;\n    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> cc4np;\n     \
    \ BitFieldModel<13, 1> cc4p;\n      BitFieldModel<12, 1> cc4e;\n      BitFieldModel<11,\
    \ 1> cc3np;\n      BitFieldModel<9, 1> cc3p;\n      BitFieldModel<8, 1> cc3e;\n\
    \      BitFieldModel<7, 1> cc2np;\n      BitFieldModel<5, 1> cc2p;\n      BitFieldModel<4,\
    \ 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<1, 1> cc1p;\n\
    \      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\npublic:\n  using ccer = CcerReg<BaseAddress\
    \ + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n  class CntReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cnt_h = FieldModel<address,\
    \ 16, 16>;\n    using cnt_l = FieldModel<address, 0, 16>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 16> cnt_h;\n    \
    \  BitFieldModel<0, 16> cnt_l;\n    };\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n  class PscReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> psc;\n    };\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template<uint32_t address>\n  class ArrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using arr_h = FieldModel<address, 16, 16>;\n    using arr_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> arr_h;\n      BitFieldModel<0, 16> arr_l;\n\
    \    };\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 16>;\n    using ccr1_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr1_h;\n      BitFieldModel<0, 16> ccr1_l;\n\
    \    };\n  };\n\npublic:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr2_h = FieldModel<address, 16, 16>;\n    using ccr2_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr2_h;\n      BitFieldModel<0, 16> ccr2_l;\n\
    \    };\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 16>;\n    using ccr3_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr3_h;\n      BitFieldModel<0, 16> ccr3_l;\n\
    \    };\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4_h = FieldModel<address, 16, 16>;\n    using ccr4_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr4_h;\n      BitFieldModel<0, 16> ccr4_l;\n\
    \    };\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 5>;\n    using dba = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 5> dbl;\n      BitFieldModel<0, 5> dba;\n    };\n  };\n\npublic:\n  using dcr\
    \ = DcrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DmarReg : public RegisterModel<address>\n  {\n  public:\n    using dmab\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> dmab;\n    };\n  };\n\npublic:\n  using dmar\
    \ = DmarReg<BaseAddress + 0x004C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM3_H\
    \ */\n"
  name: TIM3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM4_H\n#define DRAL_STM32F411_TIM4_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim4\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using cms = FieldModel<address, 5, 2>;\n   \
    \ using dir = FieldModel<address, 4, 1>;\n    using opm = FieldModel<address,\
    \ 3, 1>;\n    using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<5, 2> cms;\n      BitFieldModel<4, 1> dir;\n \
    \     BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n      BitFieldModel<1,\
    \ 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n    using ti1s\
    \ = FieldModel<address, 7, 1>;\n    using mms = FieldModel<address, 4, 3>;\n \
    \   using ccds = FieldModel<address, 3, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<7, 1> ti1s;\n      BitFieldModel<4,\
    \ 3> mms;\n      BitFieldModel<3, 1> ccds;\n    };\n  };\n\npublic:\n  using cr2\
    \ = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n    using etp\
    \ = FieldModel<address, 15, 1>;\n    using ece = FieldModel<address, 14, 1>;\n\
    \    using etps = FieldModel<address, 12, 2>;\n    using etf = FieldModel<address,\
    \ 8, 4>;\n    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> etp;\n      BitFieldModel<14,\
    \ 1> ece;\n      BitFieldModel<12, 2> etps;\n      BitFieldModel<8, 4> etf;\n\
    \      BitFieldModel<7, 1> msm;\n      BitFieldModel<4, 3> ts;\n      BitFieldModel<0,\
    \ 3> sms;\n    };\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DierReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 1>;\n    using cc4de\
    \ = FieldModel<address, 12, 1>;\n    using cc3de = FieldModel<address, 11, 1>;\n\
    \    using cc2de = FieldModel<address, 10, 1>;\n    using cc1de = FieldModel<address,\
    \ 9, 1>;\n    using ude = FieldModel<address, 8, 1>;\n    using tie = FieldModel<address,\
    \ 6, 1>;\n    using cc4ie = FieldModel<address, 4, 1>;\n    using cc3ie = FieldModel<address,\
    \ 3, 1>;\n    using cc2ie = FieldModel<address, 2, 1>;\n    using cc1ie = FieldModel<address,\
    \ 1, 1>;\n    using uie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<14, 1> tde;\n      BitFieldModel<12,\
    \ 1> cc4de;\n      BitFieldModel<11, 1> cc3de;\n      BitFieldModel<10, 1> cc2de;\n\
    \      BitFieldModel<9, 1> cc1de;\n      BitFieldModel<8, 1> ude;\n      BitFieldModel<6,\
    \ 1> tie;\n      BitFieldModel<4, 1> cc4ie;\n      BitFieldModel<3, 1> cc3ie;\n\
    \      BitFieldModel<2, 1> cc2ie;\n      BitFieldModel<1, 1> cc1ie;\n      BitFieldModel<0,\
    \ 1> uie;\n    };\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 1>;\n    using cc3of\
    \ = FieldModel<address, 11, 1>;\n    using cc2of = FieldModel<address, 10, 1>;\n\
    \    using cc1of = FieldModel<address, 9, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using cc4if = FieldModel<address, 4, 1>;\n    using cc3if = FieldModel<address,\
    \ 3, 1>;\n    using cc2if = FieldModel<address, 2, 1>;\n    using cc1if = FieldModel<address,\
    \ 1, 1>;\n    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<12, 1> cc4of;\n      BitFieldModel<11,\
    \ 1> cc3of;\n      BitFieldModel<10, 1> cc2of;\n      BitFieldModel<9, 1> cc1of;\n\
    \      BitFieldModel<6, 1> tif;\n      BitFieldModel<4, 1> cc4if;\n      BitFieldModel<3,\
    \ 1> cc3if;\n      BitFieldModel<2, 1> cc2if;\n      BitFieldModel<1, 1> cc1if;\n\
    \      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class EgrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using tg = FieldModel<address, 6,\
    \ 1>;\n    using cc4g = FieldModel<address, 4, 1>;\n    using cc3g = FieldModel<address,\
    \ 3, 1>;\n    using cc2g = FieldModel<address, 2, 1>;\n    using cc1g = FieldModel<address,\
    \ 1, 1>;\n    using ug = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<6, 1> tg;\n      BitFieldModel<4,\
    \ 1> cc4g;\n      BitFieldModel<3, 1> cc3g;\n      BitFieldModel<2, 1> cc2g;\n\
    \      BitFieldModel<1, 1> cc1g;\n      BitFieldModel<0, 1> ug;\n    };\n  };\n\
    \npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_outputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 1>;\n    using oc2m = FieldModel<address,\
    \ 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n    using oc2fe = FieldModel<address,\
    \ 10, 1>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using oc1ce = FieldModel<address,\
    \ 7, 1>;\n    using oc1m = FieldModel<address, 4, 3>;\n    using oc1pe = FieldModel<address,\
    \ 3, 1>;\n    using oc1fe = FieldModel<address, 2, 1>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> oc2ce;\n      BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11, 1> oc2pe;\n\
    \      BitFieldModel<10, 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<7,\
    \ 1> oc1ce;\n      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n\
    \      BitFieldModel<2, 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ic2f = FieldModel<address, 12, 4>;\n    using ic2pcs\
    \ = FieldModel<address, 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n\
    \    using ic1f = FieldModel<address, 4, 4>;\n    using icpcs = FieldModel<address,\
    \ 2, 2>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 4> ic2f;\n      BitFieldModel<10,\
    \ 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<4, 4> ic1f;\n\
    \      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr2_outputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 1>;\n    using oc4m\
    \ = FieldModel<address, 12, 3>;\n    using oc4pe = FieldModel<address, 11, 1>;\n\
    \    using oc4fe = FieldModel<address, 10, 1>;\n    using cc4s = FieldModel<address,\
    \ 8, 2>;\n    using oc3ce = FieldModel<address, 7, 1>;\n    using oc3m = FieldModel<address,\
    \ 4, 3>;\n    using oc3pe = FieldModel<address, 3, 1>;\n    using oc3fe = FieldModel<address,\
    \ 2, 1>;\n    using cc3s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc4ce;\n     \
    \ BitFieldModel<12, 3> oc4m;\n      BitFieldModel<11, 1> oc4pe;\n      BitFieldModel<10,\
    \ 1> oc4fe;\n      BitFieldModel<8, 2> cc4s;\n      BitFieldModel<7, 1> oc3ce;\n\
    \      BitFieldModel<4, 3> oc3m;\n      BitFieldModel<3, 1> oc3pe;\n      BitFieldModel<2,\
    \ 1> oc3fe;\n      BitFieldModel<0, 2> cc3s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr2_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic4f = FieldModel<address, 12, 4>;\n    using ic4psc = FieldModel<address,\
    \ 10, 2>;\n    using cc4s = FieldModel<address, 8, 2>;\n    using ic3f = FieldModel<address,\
    \ 4, 4>;\n    using ic3psc = FieldModel<address, 2, 2>;\n    using cc3s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic4f;\n      BitFieldModel<10, 2> ic4psc;\n      BitFieldModel<8, 2> cc4s;\n\
    \      BitFieldModel<4, 4> ic3f;\n      BitFieldModel<2, 2> ic3psc;\n      BitFieldModel<0,\
    \ 2> cc3s;\n    };\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 1>;\n    using cc4p = FieldModel<address, 13, 1>;\n    using cc4e = FieldModel<address,\
    \ 12, 1>;\n    using cc3np = FieldModel<address, 11, 1>;\n    using cc3p = FieldModel<address,\
    \ 9, 1>;\n    using cc3e = FieldModel<address, 8, 1>;\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2p = FieldModel<address, 5, 1>;\n    using cc2e = FieldModel<address,\
    \ 4, 1>;\n    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> cc4np;\n     \
    \ BitFieldModel<13, 1> cc4p;\n      BitFieldModel<12, 1> cc4e;\n      BitFieldModel<11,\
    \ 1> cc3np;\n      BitFieldModel<9, 1> cc3p;\n      BitFieldModel<8, 1> cc3e;\n\
    \      BitFieldModel<7, 1> cc2np;\n      BitFieldModel<5, 1> cc2p;\n      BitFieldModel<4,\
    \ 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<1, 1> cc1p;\n\
    \      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\npublic:\n  using ccer = CcerReg<BaseAddress\
    \ + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n  class CntReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cnt_h = FieldModel<address,\
    \ 16, 16>;\n    using cnt_l = FieldModel<address, 0, 16>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 16> cnt_h;\n    \
    \  BitFieldModel<0, 16> cnt_l;\n    };\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n  class PscReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> psc;\n    };\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template<uint32_t address>\n  class ArrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using arr_h = FieldModel<address, 16, 16>;\n    using arr_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> arr_h;\n      BitFieldModel<0, 16> arr_l;\n\
    \    };\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 16>;\n    using ccr1_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr1_h;\n      BitFieldModel<0, 16> ccr1_l;\n\
    \    };\n  };\n\npublic:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr2_h = FieldModel<address, 16, 16>;\n    using ccr2_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr2_h;\n      BitFieldModel<0, 16> ccr2_l;\n\
    \    };\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 16>;\n    using ccr3_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr3_h;\n      BitFieldModel<0, 16> ccr3_l;\n\
    \    };\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4_h = FieldModel<address, 16, 16>;\n    using ccr4_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr4_h;\n      BitFieldModel<0, 16> ccr4_l;\n\
    \    };\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 5>;\n    using dba = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 5> dbl;\n      BitFieldModel<0, 5> dba;\n    };\n  };\n\npublic:\n  using dcr\
    \ = DcrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DmarReg : public RegisterModel<address>\n  {\n  public:\n    using dmab\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> dmab;\n    };\n  };\n\npublic:\n  using dmar\
    \ = DmarReg<BaseAddress + 0x004C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM4_H\
    \ */\n"
  name: TIM4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM5_H\n#define DRAL_STM32F411_TIM5_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim5\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using cms = FieldModel<address, 5, 2>;\n   \
    \ using dir = FieldModel<address, 4, 1>;\n    using opm = FieldModel<address,\
    \ 3, 1>;\n    using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<5, 2> cms;\n      BitFieldModel<4, 1> dir;\n \
    \     BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n      BitFieldModel<1,\
    \ 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n    using ti1s\
    \ = FieldModel<address, 7, 1>;\n    using mms = FieldModel<address, 4, 3>;\n \
    \   using ccds = FieldModel<address, 3, 1>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<7, 1> ti1s;\n      BitFieldModel<4,\
    \ 3> mms;\n      BitFieldModel<3, 1> ccds;\n    };\n  };\n\npublic:\n  using cr2\
    \ = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n    using etp\
    \ = FieldModel<address, 15, 1>;\n    using ece = FieldModel<address, 14, 1>;\n\
    \    using etps = FieldModel<address, 12, 2>;\n    using etf = FieldModel<address,\
    \ 8, 4>;\n    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> etp;\n      BitFieldModel<14,\
    \ 1> ece;\n      BitFieldModel<12, 2> etps;\n      BitFieldModel<8, 4> etf;\n\
    \      BitFieldModel<7, 1> msm;\n      BitFieldModel<4, 3> ts;\n      BitFieldModel<0,\
    \ 3> sms;\n    };\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DierReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 1>;\n    using cc4de\
    \ = FieldModel<address, 12, 1>;\n    using cc3de = FieldModel<address, 11, 1>;\n\
    \    using cc2de = FieldModel<address, 10, 1>;\n    using cc1de = FieldModel<address,\
    \ 9, 1>;\n    using ude = FieldModel<address, 8, 1>;\n    using tie = FieldModel<address,\
    \ 6, 1>;\n    using cc4ie = FieldModel<address, 4, 1>;\n    using cc3ie = FieldModel<address,\
    \ 3, 1>;\n    using cc2ie = FieldModel<address, 2, 1>;\n    using cc1ie = FieldModel<address,\
    \ 1, 1>;\n    using uie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<14, 1> tde;\n      BitFieldModel<12,\
    \ 1> cc4de;\n      BitFieldModel<11, 1> cc3de;\n      BitFieldModel<10, 1> cc2de;\n\
    \      BitFieldModel<9, 1> cc1de;\n      BitFieldModel<8, 1> ude;\n      BitFieldModel<6,\
    \ 1> tie;\n      BitFieldModel<4, 1> cc4ie;\n      BitFieldModel<3, 1> cc3ie;\n\
    \      BitFieldModel<2, 1> cc2ie;\n      BitFieldModel<1, 1> cc1ie;\n      BitFieldModel<0,\
    \ 1> uie;\n    };\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 1>;\n    using cc3of\
    \ = FieldModel<address, 11, 1>;\n    using cc2of = FieldModel<address, 10, 1>;\n\
    \    using cc1of = FieldModel<address, 9, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using cc4if = FieldModel<address, 4, 1>;\n    using cc3if = FieldModel<address,\
    \ 3, 1>;\n    using cc2if = FieldModel<address, 2, 1>;\n    using cc1if = FieldModel<address,\
    \ 1, 1>;\n    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<12, 1> cc4of;\n      BitFieldModel<11,\
    \ 1> cc3of;\n      BitFieldModel<10, 1> cc2of;\n      BitFieldModel<9, 1> cc1of;\n\
    \      BitFieldModel<6, 1> tif;\n      BitFieldModel<4, 1> cc4if;\n      BitFieldModel<3,\
    \ 1> cc3if;\n      BitFieldModel<2, 1> cc2if;\n      BitFieldModel<1, 1> cc1if;\n\
    \      BitFieldModel<0, 1> uif;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class EgrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using tg = FieldModel<address, 6,\
    \ 1>;\n    using cc4g = FieldModel<address, 4, 1>;\n    using cc3g = FieldModel<address,\
    \ 3, 1>;\n    using cc2g = FieldModel<address, 2, 1>;\n    using cc1g = FieldModel<address,\
    \ 1, 1>;\n    using ug = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<6, 1> tg;\n      BitFieldModel<4,\
    \ 1> cc4g;\n      BitFieldModel<3, 1> cc3g;\n      BitFieldModel<2, 1> cc2g;\n\
    \      BitFieldModel<1, 1> cc1g;\n      BitFieldModel<0, 1> ug;\n    };\n  };\n\
    \npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_outputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 1>;\n    using oc2m = FieldModel<address,\
    \ 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n    using oc2fe = FieldModel<address,\
    \ 10, 1>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using oc1ce = FieldModel<address,\
    \ 7, 1>;\n    using oc1m = FieldModel<address, 4, 3>;\n    using oc1pe = FieldModel<address,\
    \ 3, 1>;\n    using oc1fe = FieldModel<address, 2, 1>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> oc2ce;\n      BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11, 1> oc2pe;\n\
    \      BitFieldModel<10, 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<7,\
    \ 1> oc1ce;\n      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n\
    \      BitFieldModel<2, 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ic2f = FieldModel<address, 12, 4>;\n    using ic2pcs\
    \ = FieldModel<address, 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n\
    \    using ic1f = FieldModel<address, 4, 4>;\n    using icpcs = FieldModel<address,\
    \ 2, 2>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 4> ic2f;\n      BitFieldModel<10,\
    \ 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n      BitFieldModel<4, 4> ic1f;\n\
    \      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0, 2> cc1s;\n    };\n \
    \ };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ccmr2_outputReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 1>;\n    using oc4m\
    \ = FieldModel<address, 12, 3>;\n    using oc4pe = FieldModel<address, 11, 1>;\n\
    \    using oc4fe = FieldModel<address, 10, 1>;\n    using cc4s = FieldModel<address,\
    \ 8, 2>;\n    using oc3ce = FieldModel<address, 7, 1>;\n    using oc3m = FieldModel<address,\
    \ 4, 3>;\n    using oc3pe = FieldModel<address, 3, 1>;\n    using oc3fe = FieldModel<address,\
    \ 2, 1>;\n    using cc3s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> oc4ce;\n     \
    \ BitFieldModel<12, 3> oc4m;\n      BitFieldModel<11, 1> oc4pe;\n      BitFieldModel<10,\
    \ 1> oc4fe;\n      BitFieldModel<8, 2> cc4s;\n      BitFieldModel<7, 1> oc3ce;\n\
    \      BitFieldModel<4, 3> oc3m;\n      BitFieldModel<3, 1> oc3pe;\n      BitFieldModel<2,\
    \ 1> oc3fe;\n      BitFieldModel<0, 2> cc3s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr2_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic4f = FieldModel<address, 12, 4>;\n    using ic4psc = FieldModel<address,\
    \ 10, 2>;\n    using cc4s = FieldModel<address, 8, 2>;\n    using ic3f = FieldModel<address,\
    \ 4, 4>;\n    using ic3psc = FieldModel<address, 2, 2>;\n    using cc3s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 4> ic4f;\n      BitFieldModel<10, 2> ic4psc;\n      BitFieldModel<8, 2> cc4s;\n\
    \      BitFieldModel<4, 4> ic3f;\n      BitFieldModel<2, 2> ic3psc;\n      BitFieldModel<0,\
    \ 2> cc3s;\n    };\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 1>;\n    using cc4p = FieldModel<address, 13, 1>;\n    using cc4e = FieldModel<address,\
    \ 12, 1>;\n    using cc3np = FieldModel<address, 11, 1>;\n    using cc3p = FieldModel<address,\
    \ 9, 1>;\n    using cc3e = FieldModel<address, 8, 1>;\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2p = FieldModel<address, 5, 1>;\n    using cc2e = FieldModel<address,\
    \ 4, 1>;\n    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> cc4np;\n     \
    \ BitFieldModel<13, 1> cc4p;\n      BitFieldModel<12, 1> cc4e;\n      BitFieldModel<11,\
    \ 1> cc3np;\n      BitFieldModel<9, 1> cc3p;\n      BitFieldModel<8, 1> cc3e;\n\
    \      BitFieldModel<7, 1> cc2np;\n      BitFieldModel<5, 1> cc2p;\n      BitFieldModel<4,\
    \ 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n      BitFieldModel<1, 1> cc1p;\n\
    \      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\npublic:\n  using ccer = CcerReg<BaseAddress\
    \ + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n  class CntReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cnt_h = FieldModel<address,\
    \ 16, 16>;\n    using cnt_l = FieldModel<address, 0, 16>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<16, 16> cnt_h;\n    \
    \  BitFieldModel<0, 16> cnt_l;\n    };\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n  class PscReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> psc;\n    };\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template<uint32_t address>\n  class ArrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using arr_h = FieldModel<address, 16, 16>;\n    using arr_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> arr_h;\n      BitFieldModel<0, 16> arr_l;\n\
    \    };\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 16>;\n    using ccr1_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr1_h;\n      BitFieldModel<0, 16> ccr1_l;\n\
    \    };\n  };\n\npublic:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr2_h = FieldModel<address, 16, 16>;\n    using ccr2_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr2_h;\n      BitFieldModel<0, 16> ccr2_l;\n\
    \    };\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 16>;\n    using ccr3_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr3_h;\n      BitFieldModel<0, 16> ccr3_l;\n\
    \    };\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ccr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4_h = FieldModel<address, 16, 16>;\n    using ccr4_l\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<16, 16> ccr4_h;\n      BitFieldModel<0, 16> ccr4_l;\n\
    \    };\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class DcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 5>;\n    using dba = FieldModel<address,\
    \ 0, 5>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 5> dbl;\n      BitFieldModel<0, 5> dba;\n    };\n  };\n\npublic:\n  using dcr\
    \ = DcrReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DmarReg : public RegisterModel<address>\n  {\n  public:\n    using dmab\
    \ = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 16> dmab;\n    };\n  };\n\npublic:\n  using dmar\
    \ = DmarReg<BaseAddress + 0x004C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OrReg : public RegisterModel<address>\n  {\n  public:\n    using it4_rmp\
    \ = FieldModel<address, 6, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<6, 2> it4_rmp;\n    };\n  };\n\npublic:\n  using\
    \ or_ = OrReg<BaseAddress + 0x0050>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM5_H\
    \ */\n"
  name: TIM5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM9_H\n#define DRAL_STM32F411_TIM9_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim9\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40014000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 2>;\n    using arpe =\
    \ FieldModel<address, 7, 1>;\n    using opm = FieldModel<address, 3, 1>;\n   \
    \ using urs = FieldModel<address, 2, 1>;\n    using udis = FieldModel<address,\
    \ 1, 1>;\n    using cen = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<8, 2> ckd;\n      BitFieldModel<7,\
    \ 1> arpe;\n      BitFieldModel<3, 1> opm;\n      BitFieldModel<2, 1> urs;\n \
    \     BitFieldModel<1, 1> udis;\n      BitFieldModel<0, 1> cen;\n    };\n  };\n\
    \npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Cr2Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using mms = FieldModel<address, 4, 3>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<4, 3> mms;\n    };\n  };\n\npublic:\n\
    \  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class SmcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using msm = FieldModel<address, 7, 1>;\n    using ts = FieldModel<address,\
    \ 4, 3>;\n    using sms = FieldModel<address, 0, 3>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<7, 1> msm;\n      BitFieldModel<4,\
    \ 3> ts;\n      BitFieldModel<0, 3> sms;\n    };\n  };\n\npublic:\n  using smcr\
    \ = SmcrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class DierReg : public RegisterModel<address>\n  {\n  public:\n    using tie\
    \ = FieldModel<address, 6, 1>;\n    using cc2ie = FieldModel<address, 2, 1>;\n\
    \    using cc1ie = FieldModel<address, 1, 1>;\n    using uie = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<6,\
    \ 1> tie;\n      BitFieldModel<2, 1> cc2ie;\n      BitFieldModel<1, 1> cc1ie;\n\
    \      BitFieldModel<0, 1> uie;\n    };\n  };\n\npublic:\n  using dier = DierReg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n  class SrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc2of = FieldModel<address,\
    \ 10, 1>;\n    using cc1of = FieldModel<address, 9, 1>;\n    using tif = FieldModel<address,\
    \ 6, 1>;\n    using cc2if = FieldModel<address, 2, 1>;\n    using cc1if = FieldModel<address,\
    \ 1, 1>;\n    using uif = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<10, 1> cc2of;\n      BitFieldModel<9,\
    \ 1> cc1of;\n      BitFieldModel<6, 1> tif;\n      BitFieldModel<2, 1> cc2if;\n\
    \      BitFieldModel<1, 1> cc1if;\n      BitFieldModel<0, 1> uif;\n    };\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class EgrReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using tg = FieldModel<address, 6, 1>;\n    using cc2g = FieldModel<address,\
    \ 2, 1>;\n    using cc1g = FieldModel<address, 1, 1>;\n    using ug = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<6,\
    \ 1> tg;\n      BitFieldModel<2, 1> cc2g;\n      BitFieldModel<1, 1> cc1g;\n \
    \     BitFieldModel<0, 1> ug;\n    };\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n  class Ccmr1_outputReg\
    \ : public RegisterModel<address>\n  {\n  public:\n    using oc2m = FieldModel<address,\
    \ 12, 3>;\n    using oc2pe = FieldModel<address, 11, 1>;\n    using oc2fe = FieldModel<address,\
    \ 10, 1>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using oc1m = FieldModel<address,\
    \ 4, 3>;\n    using oc1pe = FieldModel<address, 3, 1>;\n    using oc1fe = FieldModel<address,\
    \ 2, 1>;\n    using cc1s = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 3> oc2m;\n      BitFieldModel<11,\
    \ 1> oc2pe;\n      BitFieldModel<10, 1> oc2fe;\n      BitFieldModel<8, 2> cc2s;\n\
    \      BitFieldModel<4, 3> oc1m;\n      BitFieldModel<3, 1> oc1pe;\n      BitFieldModel<2,\
    \ 1> oc1fe;\n      BitFieldModel<0, 2> cc1s;\n    };\n  };\n\npublic:\n  using\
    \ ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccmr1_inputReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ic2f = FieldModel<address, 12, 3>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 2>;\n    using cc2s = FieldModel<address, 8, 2>;\n    using ic1f = FieldModel<address,\
    \ 4, 3>;\n    using icpcs = FieldModel<address, 2, 2>;\n    using cc1s = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<12,\
    \ 3> ic2f;\n      BitFieldModel<10, 2> ic2pcs;\n      BitFieldModel<8, 2> cc2s;\n\
    \      BitFieldModel<4, 3> ic1f;\n      BitFieldModel<2, 2> icpcs;\n      BitFieldModel<0,\
    \ 2> cc1s;\n    };\n  };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n  class CcerReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc2np = FieldModel<address,\
    \ 7, 1>;\n    using cc2p = FieldModel<address, 5, 1>;\n    using cc2e = FieldModel<address,\
    \ 4, 1>;\n    using cc1np = FieldModel<address, 3, 1>;\n    using cc1p = FieldModel<address,\
    \ 1, 1>;\n    using cc1e = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<7, 1> cc2np;\n      BitFieldModel<5,\
    \ 1> cc2p;\n      BitFieldModel<4, 1> cc2e;\n      BitFieldModel<3, 1> cc1np;\n\
    \      BitFieldModel<1, 1> cc1p;\n      BitFieldModel<0, 1> cc1e;\n    };\n  };\n\
    \npublic:\n  using ccer = CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class CntReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using cnt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 16> cnt;\n    };\n  };\n\npublic:\n\
    \  using cnt = CntReg<BaseAddress + 0x0024>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class PscReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using psc = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 16> psc;\n    };\n  };\n\npublic:\n\
    \  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class ArrReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using arr = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 16> arr;\n    };\n  };\n\npublic:\n\
    \  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccr1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ccr1 = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr1;\n    };\n  };\n\n\
    public:\n  using ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Ccr2Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ccr2 = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n  \
    \  {\n      uint32_t value;\n      BitFieldModel<0, 16> ccr2;\n    };\n  };\n\n\
    public:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\n};\n\n}\n\n#endif /*\
    \ DRAL_STM32F411_TIM9_H */\n"
  name: TIM9
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART1_H\n#define DRAL_STM32F411_USART1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass usart1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40011000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cts = FieldModel<address, 9, 1>;\n    using lbd = FieldModel<address,\
    \ 8, 1>;\n    using txe = FieldModel<address, 7, 1>;\n    using tc = FieldModel<address,\
    \ 6, 1>;\n    using rxne = FieldModel<address, 5, 1>;\n    using idle = FieldModel<address,\
    \ 4, 1>;\n    using ore = FieldModel<address, 3, 1>;\n    using nf = FieldModel<address,\
    \ 2, 1>;\n    using fe = FieldModel<address, 1, 1>;\n    using pe = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> cts;\n      BitFieldModel<8, 1> lbd;\n      BitFieldModel<7, 1> txe;\n  \
    \    BitFieldModel<6, 1> tc;\n      BitFieldModel<5, 1> rxne;\n      BitFieldModel<4,\
    \ 1> idle;\n      BitFieldModel<3, 1> ore;\n      BitFieldModel<2, 1> nf;\n  \
    \    BitFieldModel<1, 1> fe;\n      BitFieldModel<0, 1> pe;\n    };\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using dr = FieldModel<address, 0, 9>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 9> dr;\n    };\n  };\n\npublic:\n\
    \  using dr = DrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class BrrReg : public RegisterModel<address>\n  {\n  public:\n    using div_mantissa\
    \ = FieldModel<address, 4, 12>;\n    using div_fraction = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<4,\
    \ 12> div_mantissa;\n      BitFieldModel<0, 4> div_fraction;\n    };\n  };\n\n\
    public:\n  using brr = BrrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Cr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using over8 = FieldModel<address, 15, 1>;\n    using ue = FieldModel<address,\
    \ 13, 1>;\n    using m = FieldModel<address, 12, 1>;\n    using wake = FieldModel<address,\
    \ 11, 1>;\n    using pce = FieldModel<address, 10, 1>;\n    using ps = FieldModel<address,\
    \ 9, 1>;\n    using peie = FieldModel<address, 8, 1>;\n    using txeie = FieldModel<address,\
    \ 7, 1>;\n    using tcie = FieldModel<address, 6, 1>;\n    using rxneie = FieldModel<address,\
    \ 5, 1>;\n    using idleie = FieldModel<address, 4, 1>;\n    using te = FieldModel<address,\
    \ 3, 1>;\n    using re = FieldModel<address, 2, 1>;\n    using rwu = FieldModel<address,\
    \ 1, 1>;\n    using sbk = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> over8;\n      BitFieldModel<13,\
    \ 1> ue;\n      BitFieldModel<12, 1> m;\n      BitFieldModel<11, 1> wake;\n  \
    \    BitFieldModel<10, 1> pce;\n      BitFieldModel<9, 1> ps;\n      BitFieldModel<8,\
    \ 1> peie;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> tcie;\n\
    \      BitFieldModel<5, 1> rxneie;\n      BitFieldModel<4, 1> idleie;\n      BitFieldModel<3,\
    \ 1> te;\n      BitFieldModel<2, 1> re;\n      BitFieldModel<1, 1> rwu;\n    \
    \  BitFieldModel<0, 1> sbk;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using linen = FieldModel<address,\
    \ 14, 1>;\n    using stop = FieldModel<address, 12, 2>;\n    using clken = FieldModel<address,\
    \ 11, 1>;\n    using cpol = FieldModel<address, 10, 1>;\n    using cpha = FieldModel<address,\
    \ 9, 1>;\n    using lbcl = FieldModel<address, 8, 1>;\n    using lbdie = FieldModel<address,\
    \ 6, 1>;\n    using lbdl = FieldModel<address, 5, 1>;\n    using add = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> linen;\n      BitFieldModel<12, 2> stop;\n      BitFieldModel<11, 1> clken;\n\
    \      BitFieldModel<10, 1> cpol;\n      BitFieldModel<9, 1> cpha;\n      BitFieldModel<8,\
    \ 1> lbcl;\n      BitFieldModel<6, 1> lbdie;\n      BitFieldModel<5, 1> lbdl;\n\
    \      BitFieldModel<0, 4> add;\n    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class Cr3Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using onebit = FieldModel<address,\
    \ 11, 1>;\n    using ctsie = FieldModel<address, 10, 1>;\n    using ctse = FieldModel<address,\
    \ 9, 1>;\n    using rtse = FieldModel<address, 8, 1>;\n    using dmat = FieldModel<address,\
    \ 7, 1>;\n    using dmar = FieldModel<address, 6, 1>;\n    using scen = FieldModel<address,\
    \ 5, 1>;\n    using nack = FieldModel<address, 4, 1>;\n    using hdsel = FieldModel<address,\
    \ 3, 1>;\n    using irlp = FieldModel<address, 2, 1>;\n    using iren = FieldModel<address,\
    \ 1, 1>;\n    using eie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<11, 1> onebit;\n      BitFieldModel<10,\
    \ 1> ctsie;\n      BitFieldModel<9, 1> ctse;\n      BitFieldModel<8, 1> rtse;\n\
    \      BitFieldModel<7, 1> dmat;\n      BitFieldModel<6, 1> dmar;\n      BitFieldModel<5,\
    \ 1> scen;\n      BitFieldModel<4, 1> nack;\n      BitFieldModel<3, 1> hdsel;\n\
    \      BitFieldModel<2, 1> irlp;\n      BitFieldModel<1, 1> iren;\n      BitFieldModel<0,\
    \ 1> eie;\n    };\n  };\n\npublic:\n  using cr3 = Cr3Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template<uint32_t address>\n  class GtprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using gt = FieldModel<address, 8, 8>;\n    using psc = FieldModel<address,\
    \ 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 8> gt;\n      BitFieldModel<0, 8> psc;\n    };\n  };\n\npublic:\n  using gtpr\
    \ = GtprReg<BaseAddress + 0x0018>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_USART1_H\
    \ */\n"
  name: USART1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART2_H\n#define DRAL_STM32F411_USART2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass usart2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40004400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cts = FieldModel<address, 9, 1>;\n    using lbd = FieldModel<address,\
    \ 8, 1>;\n    using txe = FieldModel<address, 7, 1>;\n    using tc = FieldModel<address,\
    \ 6, 1>;\n    using rxne = FieldModel<address, 5, 1>;\n    using idle = FieldModel<address,\
    \ 4, 1>;\n    using ore = FieldModel<address, 3, 1>;\n    using nf = FieldModel<address,\
    \ 2, 1>;\n    using fe = FieldModel<address, 1, 1>;\n    using pe = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> cts;\n      BitFieldModel<8, 1> lbd;\n      BitFieldModel<7, 1> txe;\n  \
    \    BitFieldModel<6, 1> tc;\n      BitFieldModel<5, 1> rxne;\n      BitFieldModel<4,\
    \ 1> idle;\n      BitFieldModel<3, 1> ore;\n      BitFieldModel<2, 1> nf;\n  \
    \    BitFieldModel<1, 1> fe;\n      BitFieldModel<0, 1> pe;\n    };\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using dr = FieldModel<address, 0, 9>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 9> dr;\n    };\n  };\n\npublic:\n\
    \  using dr = DrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class BrrReg : public RegisterModel<address>\n  {\n  public:\n    using div_mantissa\
    \ = FieldModel<address, 4, 12>;\n    using div_fraction = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<4,\
    \ 12> div_mantissa;\n      BitFieldModel<0, 4> div_fraction;\n    };\n  };\n\n\
    public:\n  using brr = BrrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Cr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using over8 = FieldModel<address, 15, 1>;\n    using ue = FieldModel<address,\
    \ 13, 1>;\n    using m = FieldModel<address, 12, 1>;\n    using wake = FieldModel<address,\
    \ 11, 1>;\n    using pce = FieldModel<address, 10, 1>;\n    using ps = FieldModel<address,\
    \ 9, 1>;\n    using peie = FieldModel<address, 8, 1>;\n    using txeie = FieldModel<address,\
    \ 7, 1>;\n    using tcie = FieldModel<address, 6, 1>;\n    using rxneie = FieldModel<address,\
    \ 5, 1>;\n    using idleie = FieldModel<address, 4, 1>;\n    using te = FieldModel<address,\
    \ 3, 1>;\n    using re = FieldModel<address, 2, 1>;\n    using rwu = FieldModel<address,\
    \ 1, 1>;\n    using sbk = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> over8;\n      BitFieldModel<13,\
    \ 1> ue;\n      BitFieldModel<12, 1> m;\n      BitFieldModel<11, 1> wake;\n  \
    \    BitFieldModel<10, 1> pce;\n      BitFieldModel<9, 1> ps;\n      BitFieldModel<8,\
    \ 1> peie;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> tcie;\n\
    \      BitFieldModel<5, 1> rxneie;\n      BitFieldModel<4, 1> idleie;\n      BitFieldModel<3,\
    \ 1> te;\n      BitFieldModel<2, 1> re;\n      BitFieldModel<1, 1> rwu;\n    \
    \  BitFieldModel<0, 1> sbk;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using linen = FieldModel<address,\
    \ 14, 1>;\n    using stop = FieldModel<address, 12, 2>;\n    using clken = FieldModel<address,\
    \ 11, 1>;\n    using cpol = FieldModel<address, 10, 1>;\n    using cpha = FieldModel<address,\
    \ 9, 1>;\n    using lbcl = FieldModel<address, 8, 1>;\n    using lbdie = FieldModel<address,\
    \ 6, 1>;\n    using lbdl = FieldModel<address, 5, 1>;\n    using add = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> linen;\n      BitFieldModel<12, 2> stop;\n      BitFieldModel<11, 1> clken;\n\
    \      BitFieldModel<10, 1> cpol;\n      BitFieldModel<9, 1> cpha;\n      BitFieldModel<8,\
    \ 1> lbcl;\n      BitFieldModel<6, 1> lbdie;\n      BitFieldModel<5, 1> lbdl;\n\
    \      BitFieldModel<0, 4> add;\n    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class Cr3Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using onebit = FieldModel<address,\
    \ 11, 1>;\n    using ctsie = FieldModel<address, 10, 1>;\n    using ctse = FieldModel<address,\
    \ 9, 1>;\n    using rtse = FieldModel<address, 8, 1>;\n    using dmat = FieldModel<address,\
    \ 7, 1>;\n    using dmar = FieldModel<address, 6, 1>;\n    using scen = FieldModel<address,\
    \ 5, 1>;\n    using nack = FieldModel<address, 4, 1>;\n    using hdsel = FieldModel<address,\
    \ 3, 1>;\n    using irlp = FieldModel<address, 2, 1>;\n    using iren = FieldModel<address,\
    \ 1, 1>;\n    using eie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<11, 1> onebit;\n      BitFieldModel<10,\
    \ 1> ctsie;\n      BitFieldModel<9, 1> ctse;\n      BitFieldModel<8, 1> rtse;\n\
    \      BitFieldModel<7, 1> dmat;\n      BitFieldModel<6, 1> dmar;\n      BitFieldModel<5,\
    \ 1> scen;\n      BitFieldModel<4, 1> nack;\n      BitFieldModel<3, 1> hdsel;\n\
    \      BitFieldModel<2, 1> irlp;\n      BitFieldModel<1, 1> iren;\n      BitFieldModel<0,\
    \ 1> eie;\n    };\n  };\n\npublic:\n  using cr3 = Cr3Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template<uint32_t address>\n  class GtprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using gt = FieldModel<address, 8, 8>;\n    using psc = FieldModel<address,\
    \ 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 8> gt;\n      BitFieldModel<0, 8> psc;\n    };\n  };\n\npublic:\n  using gtpr\
    \ = GtprReg<BaseAddress + 0x0018>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_USART2_H\
    \ */\n"
  name: USART2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART6_H\n#define DRAL_STM32F411_USART6_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass usart6\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40011400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cts = FieldModel<address, 9, 1>;\n    using lbd = FieldModel<address,\
    \ 8, 1>;\n    using txe = FieldModel<address, 7, 1>;\n    using tc = FieldModel<address,\
    \ 6, 1>;\n    using rxne = FieldModel<address, 5, 1>;\n    using idle = FieldModel<address,\
    \ 4, 1>;\n    using ore = FieldModel<address, 3, 1>;\n    using nf = FieldModel<address,\
    \ 2, 1>;\n    using fe = FieldModel<address, 1, 1>;\n    using pe = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> cts;\n      BitFieldModel<8, 1> lbd;\n      BitFieldModel<7, 1> txe;\n  \
    \    BitFieldModel<6, 1> tc;\n      BitFieldModel<5, 1> rxne;\n      BitFieldModel<4,\
    \ 1> idle;\n      BitFieldModel<3, 1> ore;\n      BitFieldModel<2, 1> nf;\n  \
    \    BitFieldModel<1, 1> fe;\n      BitFieldModel<0, 1> pe;\n    };\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class DrReg : public RegisterModel<address>\n  {\n  public:\n  \
    \  using dr = FieldModel<address, 0, 9>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 9> dr;\n    };\n  };\n\npublic:\n\
    \  using dr = DrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class BrrReg : public RegisterModel<address>\n  {\n  public:\n    using div_mantissa\
    \ = FieldModel<address, 4, 12>;\n    using div_fraction = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<4,\
    \ 12> div_mantissa;\n      BitFieldModel<0, 4> div_fraction;\n    };\n  };\n\n\
    public:\n  using brr = BrrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Cr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using over8 = FieldModel<address, 15, 1>;\n    using ue = FieldModel<address,\
    \ 13, 1>;\n    using m = FieldModel<address, 12, 1>;\n    using wake = FieldModel<address,\
    \ 11, 1>;\n    using pce = FieldModel<address, 10, 1>;\n    using ps = FieldModel<address,\
    \ 9, 1>;\n    using peie = FieldModel<address, 8, 1>;\n    using txeie = FieldModel<address,\
    \ 7, 1>;\n    using tcie = FieldModel<address, 6, 1>;\n    using rxneie = FieldModel<address,\
    \ 5, 1>;\n    using idleie = FieldModel<address, 4, 1>;\n    using te = FieldModel<address,\
    \ 3, 1>;\n    using re = FieldModel<address, 2, 1>;\n    using rwu = FieldModel<address,\
    \ 1, 1>;\n    using sbk = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> over8;\n      BitFieldModel<13,\
    \ 1> ue;\n      BitFieldModel<12, 1> m;\n      BitFieldModel<11, 1> wake;\n  \
    \    BitFieldModel<10, 1> pce;\n      BitFieldModel<9, 1> ps;\n      BitFieldModel<8,\
    \ 1> peie;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> tcie;\n\
    \      BitFieldModel<5, 1> rxneie;\n      BitFieldModel<4, 1> idleie;\n      BitFieldModel<3,\
    \ 1> te;\n      BitFieldModel<2, 1> re;\n      BitFieldModel<1, 1> rwu;\n    \
    \  BitFieldModel<0, 1> sbk;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using linen = FieldModel<address,\
    \ 14, 1>;\n    using stop = FieldModel<address, 12, 2>;\n    using clken = FieldModel<address,\
    \ 11, 1>;\n    using cpol = FieldModel<address, 10, 1>;\n    using cpha = FieldModel<address,\
    \ 9, 1>;\n    using lbcl = FieldModel<address, 8, 1>;\n    using lbdie = FieldModel<address,\
    \ 6, 1>;\n    using lbdl = FieldModel<address, 5, 1>;\n    using add = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<14,\
    \ 1> linen;\n      BitFieldModel<12, 2> stop;\n      BitFieldModel<11, 1> clken;\n\
    \      BitFieldModel<10, 1> cpol;\n      BitFieldModel<9, 1> cpha;\n      BitFieldModel<8,\
    \ 1> lbcl;\n      BitFieldModel<6, 1> lbdie;\n      BitFieldModel<5, 1> lbdl;\n\
    \      BitFieldModel<0, 4> add;\n    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class Cr3Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using onebit = FieldModel<address,\
    \ 11, 1>;\n    using ctsie = FieldModel<address, 10, 1>;\n    using ctse = FieldModel<address,\
    \ 9, 1>;\n    using rtse = FieldModel<address, 8, 1>;\n    using dmat = FieldModel<address,\
    \ 7, 1>;\n    using dmar = FieldModel<address, 6, 1>;\n    using scen = FieldModel<address,\
    \ 5, 1>;\n    using nack = FieldModel<address, 4, 1>;\n    using hdsel = FieldModel<address,\
    \ 3, 1>;\n    using irlp = FieldModel<address, 2, 1>;\n    using iren = FieldModel<address,\
    \ 1, 1>;\n    using eie = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<11, 1> onebit;\n      BitFieldModel<10,\
    \ 1> ctsie;\n      BitFieldModel<9, 1> ctse;\n      BitFieldModel<8, 1> rtse;\n\
    \      BitFieldModel<7, 1> dmat;\n      BitFieldModel<6, 1> dmar;\n      BitFieldModel<5,\
    \ 1> scen;\n      BitFieldModel<4, 1> nack;\n      BitFieldModel<3, 1> hdsel;\n\
    \      BitFieldModel<2, 1> irlp;\n      BitFieldModel<1, 1> iren;\n      BitFieldModel<0,\
    \ 1> eie;\n    };\n  };\n\npublic:\n  using cr3 = Cr3Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template<uint32_t address>\n  class GtprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using gt = FieldModel<address, 8, 8>;\n    using psc = FieldModel<address,\
    \ 0, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 8> gt;\n      BitFieldModel<0, 8> psc;\n    };\n  };\n\npublic:\n  using gtpr\
    \ = GtprReg<BaseAddress + 0x0018>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_USART6_H\
    \ */\n"
  name: USART6
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_WWDG_H\n#define DRAL_STM32F411_WWDG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass wwdg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40002C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using wdga = FieldModel<address, 7, 1>;\n    using t = FieldModel<address,\
    \ 0, 7>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> wdga;\n      BitFieldModel<0, 7> t;\n    };\n  };\n\npublic:\n  using cr\
    \ = CrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n \
    \ class CfrReg : public RegisterModel<address>\n  {\n  public:\n    using ewi\
    \ = FieldModel<address, 9, 1>;\n    using wdgtb1 = FieldModel<address, 8, 1>;\n\
    \    using wdgtb0 = FieldModel<address, 7, 1>;\n    using w = FieldModel<address,\
    \ 0, 7>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> ewi;\n      BitFieldModel<8, 1> wdgtb1;\n      BitFieldModel<7, 1> wdgtb0;\n\
    \      BitFieldModel<0, 7> w;\n    };\n  };\n\npublic:\n  using cfr = CfrReg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n  class SrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using ewif = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> ewif;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_WWDG_H */\n"
  name: WWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DMA2_H\n#define DRAL_STM32F411_DMA2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass dma2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40026400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class LisrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tcif3 = FieldModel<address, 27, 1>;\n    using htif3\
    \ = FieldModel<address, 26, 1>;\n    using teif3 = FieldModel<address, 25, 1>;\n\
    \    using dmeif3 = FieldModel<address, 24, 1>;\n    using feif3 = FieldModel<address,\
    \ 22, 1>;\n    using tcif2 = FieldModel<address, 21, 1>;\n    using htif2 = FieldModel<address,\
    \ 20, 1>;\n    using teif2 = FieldModel<address, 19, 1>;\n    using dmeif2 = FieldModel<address,\
    \ 18, 1>;\n    using feif2 = FieldModel<address, 16, 1>;\n    using tcif1 = FieldModel<address,\
    \ 11, 1>;\n    using htif1 = FieldModel<address, 10, 1>;\n    using teif1 = FieldModel<address,\
    \ 9, 1>;\n    using dmeif1 = FieldModel<address, 8, 1>;\n    using feif1 = FieldModel<address,\
    \ 6, 1>;\n    using tcif0 = FieldModel<address, 5, 1>;\n    using htif0 = FieldModel<address,\
    \ 4, 1>;\n    using teif0 = FieldModel<address, 3, 1>;\n    using dmeif0 = FieldModel<address,\
    \ 2, 1>;\n    using feif0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> tcif3;\n     \
    \ BitFieldModel<26, 1> htif3;\n      BitFieldModel<25, 1> teif3;\n      BitFieldModel<24,\
    \ 1> dmeif3;\n      BitFieldModel<22, 1> feif3;\n      BitFieldModel<21, 1> tcif2;\n\
    \      BitFieldModel<20, 1> htif2;\n      BitFieldModel<19, 1> teif2;\n      BitFieldModel<18,\
    \ 1> dmeif2;\n      BitFieldModel<16, 1> feif2;\n      BitFieldModel<11, 1> tcif1;\n\
    \      BitFieldModel<10, 1> htif1;\n      BitFieldModel<9, 1> teif1;\n      BitFieldModel<8,\
    \ 1> dmeif1;\n      BitFieldModel<6, 1> feif1;\n      BitFieldModel<5, 1> tcif0;\n\
    \      BitFieldModel<4, 1> htif0;\n      BitFieldModel<3, 1> teif0;\n      BitFieldModel<2,\
    \ 1> dmeif0;\n      BitFieldModel<0, 1> feif0;\n    };\n  };\n\npublic:\n  using\
    \ lisr = LisrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class HisrReg : public RegisterModel<address>\n  {\n  public:\n    using tcif7\
    \ = FieldModel<address, 27, 1>;\n    using htif7 = FieldModel<address, 26, 1>;\n\
    \    using teif7 = FieldModel<address, 25, 1>;\n    using dmeif7 = FieldModel<address,\
    \ 24, 1>;\n    using feif7 = FieldModel<address, 22, 1>;\n    using tcif6 = FieldModel<address,\
    \ 21, 1>;\n    using htif6 = FieldModel<address, 20, 1>;\n    using teif6 = FieldModel<address,\
    \ 19, 1>;\n    using dmeif6 = FieldModel<address, 18, 1>;\n    using feif6 = FieldModel<address,\
    \ 16, 1>;\n    using tcif5 = FieldModel<address, 11, 1>;\n    using htif5 = FieldModel<address,\
    \ 10, 1>;\n    using teif5 = FieldModel<address, 9, 1>;\n    using dmeif5 = FieldModel<address,\
    \ 8, 1>;\n    using feif5 = FieldModel<address, 6, 1>;\n    using tcif4 = FieldModel<address,\
    \ 5, 1>;\n    using htif4 = FieldModel<address, 4, 1>;\n    using teif4 = FieldModel<address,\
    \ 3, 1>;\n    using dmeif4 = FieldModel<address, 2, 1>;\n    using feif4 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<27,\
    \ 1> tcif7;\n      BitFieldModel<26, 1> htif7;\n      BitFieldModel<25, 1> teif7;\n\
    \      BitFieldModel<24, 1> dmeif7;\n      BitFieldModel<22, 1> feif7;\n     \
    \ BitFieldModel<21, 1> tcif6;\n      BitFieldModel<20, 1> htif6;\n      BitFieldModel<19,\
    \ 1> teif6;\n      BitFieldModel<18, 1> dmeif6;\n      BitFieldModel<16, 1> feif6;\n\
    \      BitFieldModel<11, 1> tcif5;\n      BitFieldModel<10, 1> htif5;\n      BitFieldModel<9,\
    \ 1> teif5;\n      BitFieldModel<8, 1> dmeif5;\n      BitFieldModel<6, 1> feif5;\n\
    \      BitFieldModel<5, 1> tcif4;\n      BitFieldModel<4, 1> htif4;\n      BitFieldModel<3,\
    \ 1> teif4;\n      BitFieldModel<2, 1> dmeif4;\n      BitFieldModel<0, 1> feif4;\n\
    \    };\n  };\n\npublic:\n  using hisr = HisrReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class LifcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ctcif3 = FieldModel<address, 27, 1>;\n    using chtif3\
    \ = FieldModel<address, 26, 1>;\n    using cteif3 = FieldModel<address, 25, 1>;\n\
    \    using cdmeif3 = FieldModel<address, 24, 1>;\n    using cfeif3 = FieldModel<address,\
    \ 22, 1>;\n    using ctcif2 = FieldModel<address, 21, 1>;\n    using chtif2 =\
    \ FieldModel<address, 20, 1>;\n    using cteif2 = FieldModel<address, 19, 1>;\n\
    \    using cdmeif2 = FieldModel<address, 18, 1>;\n    using cfeif2 = FieldModel<address,\
    \ 16, 1>;\n    using ctcif1 = FieldModel<address, 11, 1>;\n    using chtif1 =\
    \ FieldModel<address, 10, 1>;\n    using cteif1 = FieldModel<address, 9, 1>;\n\
    \    using cdmeif1 = FieldModel<address, 8, 1>;\n    using cfeif1 = FieldModel<address,\
    \ 6, 1>;\n    using ctcif0 = FieldModel<address, 5, 1>;\n    using chtif0 = FieldModel<address,\
    \ 4, 1>;\n    using cteif0 = FieldModel<address, 3, 1>;\n    using cdmeif0 = FieldModel<address,\
    \ 2, 1>;\n    using cfeif0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> ctcif3;\n    \
    \  BitFieldModel<26, 1> chtif3;\n      BitFieldModel<25, 1> cteif3;\n      BitFieldModel<24,\
    \ 1> cdmeif3;\n      BitFieldModel<22, 1> cfeif3;\n      BitFieldModel<21, 1>\
    \ ctcif2;\n      BitFieldModel<20, 1> chtif2;\n      BitFieldModel<19, 1> cteif2;\n\
    \      BitFieldModel<18, 1> cdmeif2;\n      BitFieldModel<16, 1> cfeif2;\n   \
    \   BitFieldModel<11, 1> ctcif1;\n      BitFieldModel<10, 1> chtif1;\n      BitFieldModel<9,\
    \ 1> cteif1;\n      BitFieldModel<8, 1> cdmeif1;\n      BitFieldModel<6, 1> cfeif1;\n\
    \      BitFieldModel<5, 1> ctcif0;\n      BitFieldModel<4, 1> chtif0;\n      BitFieldModel<3,\
    \ 1> cteif0;\n      BitFieldModel<2, 1> cdmeif0;\n      BitFieldModel<0, 1> cfeif0;\n\
    \    };\n  };\n\npublic:\n  using lifcr = LifcrReg<BaseAddress + 0x0008>;\n\n\
    private:\n  template<uint32_t address>\n  class HifcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ctcif7 = FieldModel<address, 27, 1>;\n    using chtif7\
    \ = FieldModel<address, 26, 1>;\n    using cteif7 = FieldModel<address, 25, 1>;\n\
    \    using cdmeif7 = FieldModel<address, 24, 1>;\n    using cfeif7 = FieldModel<address,\
    \ 22, 1>;\n    using ctcif6 = FieldModel<address, 21, 1>;\n    using chtif6 =\
    \ FieldModel<address, 20, 1>;\n    using cteif6 = FieldModel<address, 19, 1>;\n\
    \    using cdmeif6 = FieldModel<address, 18, 1>;\n    using cfeif6 = FieldModel<address,\
    \ 16, 1>;\n    using ctcif5 = FieldModel<address, 11, 1>;\n    using chtif5 =\
    \ FieldModel<address, 10, 1>;\n    using cteif5 = FieldModel<address, 9, 1>;\n\
    \    using cdmeif5 = FieldModel<address, 8, 1>;\n    using cfeif5 = FieldModel<address,\
    \ 6, 1>;\n    using ctcif4 = FieldModel<address, 5, 1>;\n    using chtif4 = FieldModel<address,\
    \ 4, 1>;\n    using cteif4 = FieldModel<address, 3, 1>;\n    using cdmeif4 = FieldModel<address,\
    \ 2, 1>;\n    using cfeif4 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> ctcif7;\n    \
    \  BitFieldModel<26, 1> chtif7;\n      BitFieldModel<25, 1> cteif7;\n      BitFieldModel<24,\
    \ 1> cdmeif7;\n      BitFieldModel<22, 1> cfeif7;\n      BitFieldModel<21, 1>\
    \ ctcif6;\n      BitFieldModel<20, 1> chtif6;\n      BitFieldModel<19, 1> cteif6;\n\
    \      BitFieldModel<18, 1> cdmeif6;\n      BitFieldModel<16, 1> cfeif6;\n   \
    \   BitFieldModel<11, 1> ctcif5;\n      BitFieldModel<10, 1> chtif5;\n      BitFieldModel<9,\
    \ 1> cteif5;\n      BitFieldModel<8, 1> cdmeif5;\n      BitFieldModel<6, 1> cfeif5;\n\
    \      BitFieldModel<5, 1> ctcif4;\n      BitFieldModel<4, 1> chtif4;\n      BitFieldModel<3,\
    \ 1> cteif4;\n      BitFieldModel<2, 1> cdmeif4;\n      BitFieldModel<0, 1> cfeif4;\n\
    \    };\n  };\n\npublic:\n  using hifcr = HifcrReg<BaseAddress + 0x000C>;\n\n\
    private:\n  template<uint32_t address>\n  class S0crReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using chsel = FieldModel<address, 25, 3>;\n    using mburst\
    \ = FieldModel<address, 23, 2>;\n    using pburst = FieldModel<address, 21, 2>;\n\
    \    using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<19, 1> ct;\n      BitFieldModel<18, 1> dbm;\n      BitFieldModel<16,\
    \ 2> pl;\n      BitFieldModel<15, 1> pincos;\n      BitFieldModel<13, 2> msize;\n\
    \      BitFieldModel<11, 2> psize;\n      BitFieldModel<10, 1> minc;\n      BitFieldModel<9,\
    \ 1> pinc;\n      BitFieldModel<8, 1> circ;\n      BitFieldModel<6, 2> dir;\n\
    \      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4, 1> tcie;\n      BitFieldModel<3,\
    \ 1> htie;\n      BitFieldModel<2, 1> teie;\n      BitFieldModel<1, 1> dmeie;\n\
    \      BitFieldModel<0, 1> en;\n    };\n  };\n\npublic:\n  using s0cr = S0crReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class S0ndtrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using ndt = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ndt;\n    };\n  };\n\npublic:\n  using s0ndtr = S0ndtrReg<BaseAddress +\
    \ 0x0014>;\n\nprivate:\n  template<uint32_t address>\n  class S0parReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using pa = FieldModel<address, 0,\
    \ 32>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 32> pa;\n    };\n  };\n\npublic:\n  using s0par = S0parReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class S0m0arReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n\
    \    };\n  };\n\npublic:\n  using s0m0ar = S0m0arReg<BaseAddress + 0x001C>;\n\n\
    private:\n  template<uint32_t address>\n  class S0m1arReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n\
    \    };\n  };\n\npublic:\n  using s0m1ar = S0m1arReg<BaseAddress + 0x0020>;\n\n\
    private:\n  template<uint32_t address>\n  class S0fcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s0fcr = S0fcrReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n  class S1crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s1cr = S1crReg<BaseAddress + 0x0028>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s1ndtr = S1ndtrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s1par = S1parReg<BaseAddress + 0x0030>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s1m0ar = S1m0arReg<BaseAddress + 0x0034>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s1m1ar = S1m1arReg<BaseAddress + 0x0038>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s1fcr = S1fcrReg<BaseAddress\
    \ + 0x003C>;\n\nprivate:\n  template<uint32_t address>\n  class S2crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s2cr = S2crReg<BaseAddress + 0x0040>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s2ndtr = S2ndtrReg<BaseAddress + 0x0044>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s2par = S2parReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s2m0ar = S2m0arReg<BaseAddress + 0x004C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s2m1ar = S2m1arReg<BaseAddress + 0x0050>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s2fcr = S2fcrReg<BaseAddress\
    \ + 0x0054>;\n\nprivate:\n  template<uint32_t address>\n  class S3crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s3cr = S3crReg<BaseAddress + 0x0058>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s3ndtr = S3ndtrReg<BaseAddress + 0x005C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s3par = S3parReg<BaseAddress + 0x0060>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s3m0ar = S3m0arReg<BaseAddress + 0x0064>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s3m1ar = S3m1arReg<BaseAddress + 0x0068>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s3fcr = S3fcrReg<BaseAddress\
    \ + 0x006C>;\n\nprivate:\n  template<uint32_t address>\n  class S4crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s4cr = S4crReg<BaseAddress + 0x0070>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s4ndtr = S4ndtrReg<BaseAddress + 0x0074>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s4par = S4parReg<BaseAddress + 0x0078>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s4m0ar = S4m0arReg<BaseAddress + 0x007C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s4m1ar = S4m1arReg<BaseAddress + 0x0080>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s4fcr = S4fcrReg<BaseAddress\
    \ + 0x0084>;\n\nprivate:\n  template<uint32_t address>\n  class S5crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s5cr = S5crReg<BaseAddress + 0x0088>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s5ndtr = S5ndtrReg<BaseAddress + 0x008C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s5par = S5parReg<BaseAddress + 0x0090>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s5m0ar = S5m0arReg<BaseAddress + 0x0094>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s5m1ar = S5m1arReg<BaseAddress + 0x0098>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s5fcr = S5fcrReg<BaseAddress\
    \ + 0x009C>;\n\nprivate:\n  template<uint32_t address>\n  class S6crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s6cr = S6crReg<BaseAddress + 0x00A0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s6ndtr = S6ndtrReg<BaseAddress + 0x00A4>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s6par = S6parReg<BaseAddress + 0x00A8>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s6m0ar = S6m0arReg<BaseAddress + 0x00AC>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s6m1ar = S6m1arReg<BaseAddress + 0x00B0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s6fcr = S6fcrReg<BaseAddress\
    \ + 0x00B4>;\n\nprivate:\n  template<uint32_t address>\n  class S7crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s7cr = S7crReg<BaseAddress + 0x00B8>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s7ndtr = S7ndtrReg<BaseAddress + 0x00BC>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s7par = S7parReg<BaseAddress + 0x00C0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s7m0ar = S7m0arReg<BaseAddress + 0x00C4>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s7m1ar = S7m1arReg<BaseAddress + 0x00C8>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s7fcr = S7fcrReg<BaseAddress\
    \ + 0x00CC>;\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class\
    \ SxndtrBankReg : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16, bankOffset>;\n  };\n\npublic:\n  using\
    \ sxndtr = SxndtrBankReg<BaseAddress + 0x0014, 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class SxparBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using pa = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using sxpar = SxparBankReg<BaseAddress + 0x0018, 0x0018>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class Sxm0arBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using m0a\
    \ = FieldModel<address, 0, 32, bankOffset>;\n  };\n\npublic:\n  using sxm0ar =\
    \ Sxm0arBankReg<BaseAddress + 0x001C, 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class Sxm1arBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using m1a = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using sxm1ar = Sxm1arBankReg<BaseAddress + 0x0020, 0x0018>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class SxfcrBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using feie\
    \ = FieldModel<address, 7, 1, bankOffset>;\n    using fs = FieldModel<address,\
    \ 3, 3, bankOffset>;\n    using dmdis = FieldModel<address, 2, 1, bankOffset>;\n\
    \    using fth = FieldModel<address, 0, 2, bankOffset>;\n  };\n\npublic:\n  using\
    \ sxfcr = SxfcrBankReg<BaseAddress + 0x0024, 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class SxcrBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using chsel = FieldModel<address, 25, 3, bankOffset>;\n\
    \    using mburst = FieldModel<address, 23, 2, bankOffset>;\n    using pburst\
    \ = FieldModel<address, 21, 2, bankOffset>;\n    using ack = FieldModel<address,\
    \ 20, 1, bankOffset>;\n    using ct = FieldModel<address, 19, 1, bankOffset>;\n\
    \    using dbm = FieldModel<address, 18, 1, bankOffset>;\n    using pl = FieldModel<address,\
    \ 16, 2, bankOffset>;\n    using pincos = FieldModel<address, 15, 1, bankOffset>;\n\
    \    using msize = FieldModel<address, 13, 2, bankOffset>;\n    using psize =\
    \ FieldModel<address, 11, 2, bankOffset>;\n    using minc = FieldModel<address,\
    \ 10, 1, bankOffset>;\n    using pinc = FieldModel<address, 9, 1, bankOffset>;\n\
    \    using circ = FieldModel<address, 8, 1, bankOffset>;\n    using dir = FieldModel<address,\
    \ 6, 2, bankOffset>;\n    using pfctrl = FieldModel<address, 5, 1, bankOffset>;\n\
    \    using tcie = FieldModel<address, 4, 1, bankOffset>;\n    using htie = FieldModel<address,\
    \ 3, 1, bankOffset>;\n    using teie = FieldModel<address, 2, 1, bankOffset>;\n\
    \    using dmeie = FieldModel<address, 1, 1, bankOffset>;\n    using en = FieldModel<address,\
    \ 0, 1, bankOffset>;\n  };\n\npublic:\n  using sxcr = SxcrBankReg<BaseAddress\
    \ + 0x0028, 0x0018>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_DMA2_H */\n"
  name: DMA2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DMA1_H\n#define DRAL_STM32F411_DMA1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass dma1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40026000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class LisrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tcif3 = FieldModel<address, 27, 1>;\n    using htif3\
    \ = FieldModel<address, 26, 1>;\n    using teif3 = FieldModel<address, 25, 1>;\n\
    \    using dmeif3 = FieldModel<address, 24, 1>;\n    using feif3 = FieldModel<address,\
    \ 22, 1>;\n    using tcif2 = FieldModel<address, 21, 1>;\n    using htif2 = FieldModel<address,\
    \ 20, 1>;\n    using teif2 = FieldModel<address, 19, 1>;\n    using dmeif2 = FieldModel<address,\
    \ 18, 1>;\n    using feif2 = FieldModel<address, 16, 1>;\n    using tcif1 = FieldModel<address,\
    \ 11, 1>;\n    using htif1 = FieldModel<address, 10, 1>;\n    using teif1 = FieldModel<address,\
    \ 9, 1>;\n    using dmeif1 = FieldModel<address, 8, 1>;\n    using feif1 = FieldModel<address,\
    \ 6, 1>;\n    using tcif0 = FieldModel<address, 5, 1>;\n    using htif0 = FieldModel<address,\
    \ 4, 1>;\n    using teif0 = FieldModel<address, 3, 1>;\n    using dmeif0 = FieldModel<address,\
    \ 2, 1>;\n    using feif0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> tcif3;\n     \
    \ BitFieldModel<26, 1> htif3;\n      BitFieldModel<25, 1> teif3;\n      BitFieldModel<24,\
    \ 1> dmeif3;\n      BitFieldModel<22, 1> feif3;\n      BitFieldModel<21, 1> tcif2;\n\
    \      BitFieldModel<20, 1> htif2;\n      BitFieldModel<19, 1> teif2;\n      BitFieldModel<18,\
    \ 1> dmeif2;\n      BitFieldModel<16, 1> feif2;\n      BitFieldModel<11, 1> tcif1;\n\
    \      BitFieldModel<10, 1> htif1;\n      BitFieldModel<9, 1> teif1;\n      BitFieldModel<8,\
    \ 1> dmeif1;\n      BitFieldModel<6, 1> feif1;\n      BitFieldModel<5, 1> tcif0;\n\
    \      BitFieldModel<4, 1> htif0;\n      BitFieldModel<3, 1> teif0;\n      BitFieldModel<2,\
    \ 1> dmeif0;\n      BitFieldModel<0, 1> feif0;\n    };\n  };\n\npublic:\n  using\
    \ lisr = LisrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class HisrReg : public RegisterModel<address>\n  {\n  public:\n    using tcif7\
    \ = FieldModel<address, 27, 1>;\n    using htif7 = FieldModel<address, 26, 1>;\n\
    \    using teif7 = FieldModel<address, 25, 1>;\n    using dmeif7 = FieldModel<address,\
    \ 24, 1>;\n    using feif7 = FieldModel<address, 22, 1>;\n    using tcif6 = FieldModel<address,\
    \ 21, 1>;\n    using htif6 = FieldModel<address, 20, 1>;\n    using teif6 = FieldModel<address,\
    \ 19, 1>;\n    using dmeif6 = FieldModel<address, 18, 1>;\n    using feif6 = FieldModel<address,\
    \ 16, 1>;\n    using tcif5 = FieldModel<address, 11, 1>;\n    using htif5 = FieldModel<address,\
    \ 10, 1>;\n    using teif5 = FieldModel<address, 9, 1>;\n    using dmeif5 = FieldModel<address,\
    \ 8, 1>;\n    using feif5 = FieldModel<address, 6, 1>;\n    using tcif4 = FieldModel<address,\
    \ 5, 1>;\n    using htif4 = FieldModel<address, 4, 1>;\n    using teif4 = FieldModel<address,\
    \ 3, 1>;\n    using dmeif4 = FieldModel<address, 2, 1>;\n    using feif4 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<27,\
    \ 1> tcif7;\n      BitFieldModel<26, 1> htif7;\n      BitFieldModel<25, 1> teif7;\n\
    \      BitFieldModel<24, 1> dmeif7;\n      BitFieldModel<22, 1> feif7;\n     \
    \ BitFieldModel<21, 1> tcif6;\n      BitFieldModel<20, 1> htif6;\n      BitFieldModel<19,\
    \ 1> teif6;\n      BitFieldModel<18, 1> dmeif6;\n      BitFieldModel<16, 1> feif6;\n\
    \      BitFieldModel<11, 1> tcif5;\n      BitFieldModel<10, 1> htif5;\n      BitFieldModel<9,\
    \ 1> teif5;\n      BitFieldModel<8, 1> dmeif5;\n      BitFieldModel<6, 1> feif5;\n\
    \      BitFieldModel<5, 1> tcif4;\n      BitFieldModel<4, 1> htif4;\n      BitFieldModel<3,\
    \ 1> teif4;\n      BitFieldModel<2, 1> dmeif4;\n      BitFieldModel<0, 1> feif4;\n\
    \    };\n  };\n\npublic:\n  using hisr = HisrReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class LifcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ctcif3 = FieldModel<address, 27, 1>;\n    using chtif3\
    \ = FieldModel<address, 26, 1>;\n    using cteif3 = FieldModel<address, 25, 1>;\n\
    \    using cdmeif3 = FieldModel<address, 24, 1>;\n    using cfeif3 = FieldModel<address,\
    \ 22, 1>;\n    using ctcif2 = FieldModel<address, 21, 1>;\n    using chtif2 =\
    \ FieldModel<address, 20, 1>;\n    using cteif2 = FieldModel<address, 19, 1>;\n\
    \    using cdmeif2 = FieldModel<address, 18, 1>;\n    using cfeif2 = FieldModel<address,\
    \ 16, 1>;\n    using ctcif1 = FieldModel<address, 11, 1>;\n    using chtif1 =\
    \ FieldModel<address, 10, 1>;\n    using cteif1 = FieldModel<address, 9, 1>;\n\
    \    using cdmeif1 = FieldModel<address, 8, 1>;\n    using cfeif1 = FieldModel<address,\
    \ 6, 1>;\n    using ctcif0 = FieldModel<address, 5, 1>;\n    using chtif0 = FieldModel<address,\
    \ 4, 1>;\n    using cteif0 = FieldModel<address, 3, 1>;\n    using cdmeif0 = FieldModel<address,\
    \ 2, 1>;\n    using cfeif0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> ctcif3;\n    \
    \  BitFieldModel<26, 1> chtif3;\n      BitFieldModel<25, 1> cteif3;\n      BitFieldModel<24,\
    \ 1> cdmeif3;\n      BitFieldModel<22, 1> cfeif3;\n      BitFieldModel<21, 1>\
    \ ctcif2;\n      BitFieldModel<20, 1> chtif2;\n      BitFieldModel<19, 1> cteif2;\n\
    \      BitFieldModel<18, 1> cdmeif2;\n      BitFieldModel<16, 1> cfeif2;\n   \
    \   BitFieldModel<11, 1> ctcif1;\n      BitFieldModel<10, 1> chtif1;\n      BitFieldModel<9,\
    \ 1> cteif1;\n      BitFieldModel<8, 1> cdmeif1;\n      BitFieldModel<6, 1> cfeif1;\n\
    \      BitFieldModel<5, 1> ctcif0;\n      BitFieldModel<4, 1> chtif0;\n      BitFieldModel<3,\
    \ 1> cteif0;\n      BitFieldModel<2, 1> cdmeif0;\n      BitFieldModel<0, 1> cfeif0;\n\
    \    };\n  };\n\npublic:\n  using lifcr = LifcrReg<BaseAddress + 0x0008>;\n\n\
    private:\n  template<uint32_t address>\n  class HifcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ctcif7 = FieldModel<address, 27, 1>;\n    using chtif7\
    \ = FieldModel<address, 26, 1>;\n    using cteif7 = FieldModel<address, 25, 1>;\n\
    \    using cdmeif7 = FieldModel<address, 24, 1>;\n    using cfeif7 = FieldModel<address,\
    \ 22, 1>;\n    using ctcif6 = FieldModel<address, 21, 1>;\n    using chtif6 =\
    \ FieldModel<address, 20, 1>;\n    using cteif6 = FieldModel<address, 19, 1>;\n\
    \    using cdmeif6 = FieldModel<address, 18, 1>;\n    using cfeif6 = FieldModel<address,\
    \ 16, 1>;\n    using ctcif5 = FieldModel<address, 11, 1>;\n    using chtif5 =\
    \ FieldModel<address, 10, 1>;\n    using cteif5 = FieldModel<address, 9, 1>;\n\
    \    using cdmeif5 = FieldModel<address, 8, 1>;\n    using cfeif5 = FieldModel<address,\
    \ 6, 1>;\n    using ctcif4 = FieldModel<address, 5, 1>;\n    using chtif4 = FieldModel<address,\
    \ 4, 1>;\n    using cteif4 = FieldModel<address, 3, 1>;\n    using cdmeif4 = FieldModel<address,\
    \ 2, 1>;\n    using cfeif4 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<27, 1> ctcif7;\n    \
    \  BitFieldModel<26, 1> chtif7;\n      BitFieldModel<25, 1> cteif7;\n      BitFieldModel<24,\
    \ 1> cdmeif7;\n      BitFieldModel<22, 1> cfeif7;\n      BitFieldModel<21, 1>\
    \ ctcif6;\n      BitFieldModel<20, 1> chtif6;\n      BitFieldModel<19, 1> cteif6;\n\
    \      BitFieldModel<18, 1> cdmeif6;\n      BitFieldModel<16, 1> cfeif6;\n   \
    \   BitFieldModel<11, 1> ctcif5;\n      BitFieldModel<10, 1> chtif5;\n      BitFieldModel<9,\
    \ 1> cteif5;\n      BitFieldModel<8, 1> cdmeif5;\n      BitFieldModel<6, 1> cfeif5;\n\
    \      BitFieldModel<5, 1> ctcif4;\n      BitFieldModel<4, 1> chtif4;\n      BitFieldModel<3,\
    \ 1> cteif4;\n      BitFieldModel<2, 1> cdmeif4;\n      BitFieldModel<0, 1> cfeif4;\n\
    \    };\n  };\n\npublic:\n  using hifcr = HifcrReg<BaseAddress + 0x000C>;\n\n\
    private:\n  template<uint32_t address>\n  class S0crReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using chsel = FieldModel<address, 25, 3>;\n    using mburst\
    \ = FieldModel<address, 23, 2>;\n    using pburst = FieldModel<address, 21, 2>;\n\
    \    using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<19, 1> ct;\n      BitFieldModel<18, 1> dbm;\n      BitFieldModel<16,\
    \ 2> pl;\n      BitFieldModel<15, 1> pincos;\n      BitFieldModel<13, 2> msize;\n\
    \      BitFieldModel<11, 2> psize;\n      BitFieldModel<10, 1> minc;\n      BitFieldModel<9,\
    \ 1> pinc;\n      BitFieldModel<8, 1> circ;\n      BitFieldModel<6, 2> dir;\n\
    \      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4, 1> tcie;\n      BitFieldModel<3,\
    \ 1> htie;\n      BitFieldModel<2, 1> teie;\n      BitFieldModel<1, 1> dmeie;\n\
    \      BitFieldModel<0, 1> en;\n    };\n  };\n\npublic:\n  using s0cr = S0crReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template<uint32_t address>\n  class S0ndtrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using ndt = FieldModel<address,\
    \ 0, 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> ndt;\n    };\n  };\n\npublic:\n  using s0ndtr = S0ndtrReg<BaseAddress +\
    \ 0x0014>;\n\nprivate:\n  template<uint32_t address>\n  class S0parReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using pa = FieldModel<address, 0,\
    \ 32>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 32> pa;\n    };\n  };\n\npublic:\n  using s0par = S0parReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class S0m0arReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n\
    \    };\n  };\n\npublic:\n  using s0m0ar = S0m0arReg<BaseAddress + 0x001C>;\n\n\
    private:\n  template<uint32_t address>\n  class S0m1arReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n  \
    \  union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n\
    \    };\n  };\n\npublic:\n  using s0m1ar = S0m1arReg<BaseAddress + 0x0020>;\n\n\
    private:\n  template<uint32_t address>\n  class S0fcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s0fcr = S0fcrReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template<uint32_t address>\n  class S1crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s1cr = S1crReg<BaseAddress + 0x0028>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s1ndtr = S1ndtrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s1par = S1parReg<BaseAddress + 0x0030>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s1m0ar = S1m0arReg<BaseAddress + 0x0034>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s1m1ar = S1m1arReg<BaseAddress + 0x0038>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S1fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s1fcr = S1fcrReg<BaseAddress\
    \ + 0x003C>;\n\nprivate:\n  template<uint32_t address>\n  class S2crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s2cr = S2crReg<BaseAddress + 0x0040>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s2ndtr = S2ndtrReg<BaseAddress + 0x0044>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s2par = S2parReg<BaseAddress + 0x0048>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s2m0ar = S2m0arReg<BaseAddress + 0x004C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s2m1ar = S2m1arReg<BaseAddress + 0x0050>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S2fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s2fcr = S2fcrReg<BaseAddress\
    \ + 0x0054>;\n\nprivate:\n  template<uint32_t address>\n  class S3crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s3cr = S3crReg<BaseAddress + 0x0058>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s3ndtr = S3ndtrReg<BaseAddress + 0x005C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s3par = S3parReg<BaseAddress + 0x0060>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s3m0ar = S3m0arReg<BaseAddress + 0x0064>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s3m1ar = S3m1arReg<BaseAddress + 0x0068>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S3fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s3fcr = S3fcrReg<BaseAddress\
    \ + 0x006C>;\n\nprivate:\n  template<uint32_t address>\n  class S4crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s4cr = S4crReg<BaseAddress + 0x0070>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s4ndtr = S4ndtrReg<BaseAddress + 0x0074>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s4par = S4parReg<BaseAddress + 0x0078>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s4m0ar = S4m0arReg<BaseAddress + 0x007C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s4m1ar = S4m1arReg<BaseAddress + 0x0080>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S4fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s4fcr = S4fcrReg<BaseAddress\
    \ + 0x0084>;\n\nprivate:\n  template<uint32_t address>\n  class S5crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s5cr = S5crReg<BaseAddress + 0x0088>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s5ndtr = S5ndtrReg<BaseAddress + 0x008C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s5par = S5parReg<BaseAddress + 0x0090>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s5m0ar = S5m0arReg<BaseAddress + 0x0094>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s5m1ar = S5m1arReg<BaseAddress + 0x0098>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S5fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s5fcr = S5fcrReg<BaseAddress\
    \ + 0x009C>;\n\nprivate:\n  template<uint32_t address>\n  class S6crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s6cr = S6crReg<BaseAddress + 0x00A0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s6ndtr = S6ndtrReg<BaseAddress + 0x00A4>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s6par = S6parReg<BaseAddress + 0x00A8>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s6m0ar = S6m0arReg<BaseAddress + 0x00AC>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s6m1ar = S6m1arReg<BaseAddress + 0x00B0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S6fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s6fcr = S6fcrReg<BaseAddress\
    \ + 0x00B4>;\n\nprivate:\n  template<uint32_t address>\n  class S7crReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using chsel = FieldModel<address,\
    \ 25, 3>;\n    using mburst = FieldModel<address, 23, 2>;\n    using pburst =\
    \ FieldModel<address, 21, 2>;\n    using ack = FieldModel<address, 20, 1>;\n \
    \   using ct = FieldModel<address, 19, 1>;\n    using dbm = FieldModel<address,\
    \ 18, 1>;\n    using pl = FieldModel<address, 16, 2>;\n    using pincos = FieldModel<address,\
    \ 15, 1>;\n    using msize = FieldModel<address, 13, 2>;\n    using psize = FieldModel<address,\
    \ 11, 2>;\n    using minc = FieldModel<address, 10, 1>;\n    using pinc = FieldModel<address,\
    \ 9, 1>;\n    using circ = FieldModel<address, 8, 1>;\n    using dir = FieldModel<address,\
    \ 6, 2>;\n    using pfctrl = FieldModel<address, 5, 1>;\n    using tcie = FieldModel<address,\
    \ 4, 1>;\n    using htie = FieldModel<address, 3, 1>;\n    using teie = FieldModel<address,\
    \ 2, 1>;\n    using dmeie = FieldModel<address, 1, 1>;\n    using en = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<25,\
    \ 3> chsel;\n      BitFieldModel<23, 2> mburst;\n      BitFieldModel<21, 2> pburst;\n\
    \      BitFieldModel<20, 1> ack;\n      BitFieldModel<19, 1> ct;\n      BitFieldModel<18,\
    \ 1> dbm;\n      BitFieldModel<16, 2> pl;\n      BitFieldModel<15, 1> pincos;\n\
    \      BitFieldModel<13, 2> msize;\n      BitFieldModel<11, 2> psize;\n      BitFieldModel<10,\
    \ 1> minc;\n      BitFieldModel<9, 1> pinc;\n      BitFieldModel<8, 1> circ;\n\
    \      BitFieldModel<6, 2> dir;\n      BitFieldModel<5, 1> pfctrl;\n      BitFieldModel<4,\
    \ 1> tcie;\n      BitFieldModel<3, 1> htie;\n      BitFieldModel<2, 1> teie;\n\
    \      BitFieldModel<1, 1> dmeie;\n      BitFieldModel<0, 1> en;\n    };\n  };\n\
    \npublic:\n  using s7cr = S7crReg<BaseAddress + 0x00B8>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7ndtrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 16> ndt;\n    };\n  };\n\n\
    public:\n  using s7ndtr = S7ndtrReg<BaseAddress + 0x00BC>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7parReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pa = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n\
    \      uint32_t value;\n      BitFieldModel<0, 32> pa;\n    };\n  };\n\npublic:\n\
    \  using s7par = S7parReg<BaseAddress + 0x00C0>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7m0arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m0a;\n    };\n  };\n\n\
    public:\n  using s7m0ar = S7m0arReg<BaseAddress + 0x00C4>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7m1arReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n   \
    \ {\n      uint32_t value;\n      BitFieldModel<0, 32> m1a;\n    };\n  };\n\n\
    public:\n  using s7m1ar = S7m1arReg<BaseAddress + 0x00C8>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class S7fcrReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 1>;\n    using fs = FieldModel<address,\
    \ 3, 3>;\n    using dmdis = FieldModel<address, 2, 1>;\n    using fth = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<7,\
    \ 1> feie;\n      BitFieldModel<3, 3> fs;\n      BitFieldModel<2, 1> dmdis;\n\
    \      BitFieldModel<0, 2> fth;\n    };\n  };\n\npublic:\n  using s7fcr = S7fcrReg<BaseAddress\
    \ + 0x00CC>;\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class\
    \ SxndtrBankReg : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using ndt = FieldModel<address, 0, 16, bankOffset>;\n  };\n\npublic:\n  using\
    \ sxndtr = SxndtrBankReg<BaseAddress + 0x0014, 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class SxparBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using pa = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using sxpar = SxparBankReg<BaseAddress + 0x0018, 0x0018>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class Sxm0arBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using m0a\
    \ = FieldModel<address, 0, 32, bankOffset>;\n  };\n\npublic:\n  using sxm0ar =\
    \ Sxm0arBankReg<BaseAddress + 0x001C, 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class Sxm1arBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using m1a = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using sxm1ar = Sxm1arBankReg<BaseAddress + 0x0020, 0x0018>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class SxfcrBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using feie\
    \ = FieldModel<address, 7, 1, bankOffset>;\n    using fs = FieldModel<address,\
    \ 3, 3, bankOffset>;\n    using dmdis = FieldModel<address, 2, 1, bankOffset>;\n\
    \    using fth = FieldModel<address, 0, 2, bankOffset>;\n  };\n\npublic:\n  using\
    \ sxfcr = SxfcrBankReg<BaseAddress + 0x0024, 0x0018>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class SxcrBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using chsel = FieldModel<address, 25, 3, bankOffset>;\n\
    \    using mburst = FieldModel<address, 23, 2, bankOffset>;\n    using pburst\
    \ = FieldModel<address, 21, 2, bankOffset>;\n    using ack = FieldModel<address,\
    \ 20, 1, bankOffset>;\n    using ct = FieldModel<address, 19, 1, bankOffset>;\n\
    \    using dbm = FieldModel<address, 18, 1, bankOffset>;\n    using pl = FieldModel<address,\
    \ 16, 2, bankOffset>;\n    using pincos = FieldModel<address, 15, 1, bankOffset>;\n\
    \    using msize = FieldModel<address, 13, 2, bankOffset>;\n    using psize =\
    \ FieldModel<address, 11, 2, bankOffset>;\n    using minc = FieldModel<address,\
    \ 10, 1, bankOffset>;\n    using pinc = FieldModel<address, 9, 1, bankOffset>;\n\
    \    using circ = FieldModel<address, 8, 1, bankOffset>;\n    using dir = FieldModel<address,\
    \ 6, 2, bankOffset>;\n    using pfctrl = FieldModel<address, 5, 1, bankOffset>;\n\
    \    using tcie = FieldModel<address, 4, 1, bankOffset>;\n    using htie = FieldModel<address,\
    \ 3, 1, bankOffset>;\n    using teie = FieldModel<address, 2, 1, bankOffset>;\n\
    \    using dmeie = FieldModel<address, 1, 1, bankOffset>;\n    using en = FieldModel<address,\
    \ 0, 1, bankOffset>;\n  };\n\npublic:\n  using sxcr = SxcrBankReg<BaseAddress\
    \ + 0x0028, 0x0018>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_DMA1_H */\n"
  name: DMA1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOH_H\n#define DRAL_STM32F411_GPIOH_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioh\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40021C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ModerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 2>;\n    using moder14\
    \ = FieldModel<address, 28, 2>;\n    using moder13 = FieldModel<address, 26, 2>;\n\
    \    using moder12 = FieldModel<address, 24, 2>;\n    using moder11 = FieldModel<address,\
    \ 22, 2>;\n    using moder10 = FieldModel<address, 20, 2>;\n    using moder9 =\
    \ FieldModel<address, 18, 2>;\n    using moder8 = FieldModel<address, 16, 2>;\n\
    \    using moder7 = FieldModel<address, 14, 2>;\n    using moder6 = FieldModel<address,\
    \ 12, 2>;\n    using moder5 = FieldModel<address, 10, 2>;\n    using moder4 =\
    \ FieldModel<address, 8, 2>;\n    using moder3 = FieldModel<address, 6, 2>;\n\
    \    using moder2 = FieldModel<address, 4, 2>;\n    using moder1 = FieldModel<address,\
    \ 2, 2>;\n    using moder0 = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<30, 2> moder15;\n   \
    \   BitFieldModel<28, 2> moder14;\n      BitFieldModel<26, 2> moder13;\n     \
    \ BitFieldModel<24, 2> moder12;\n      BitFieldModel<22, 2> moder11;\n      BitFieldModel<20,\
    \ 2> moder10;\n      BitFieldModel<18, 2> moder9;\n      BitFieldModel<16, 2>\
    \ moder8;\n      BitFieldModel<14, 2> moder7;\n      BitFieldModel<12, 2> moder6;\n\
    \      BitFieldModel<10, 2> moder5;\n      BitFieldModel<8, 2> moder4;\n     \
    \ BitFieldModel<6, 2> moder3;\n      BitFieldModel<4, 2> moder2;\n      BitFieldModel<2,\
    \ 2> moder1;\n      BitFieldModel<0, 2> moder0;\n    };\n  };\n\npublic:\n  using\
    \ moder = ModerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OtyperReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ot15 = FieldModel<address, 15, 1>;\n    using ot14 = FieldModel<address, 14,\
    \ 1>;\n    using ot13 = FieldModel<address, 13, 1>;\n    using ot12 = FieldModel<address,\
    \ 12, 1>;\n    using ot11 = FieldModel<address, 11, 1>;\n    using ot10 = FieldModel<address,\
    \ 10, 1>;\n    using ot9 = FieldModel<address, 9, 1>;\n    using ot8 = FieldModel<address,\
    \ 8, 1>;\n    using ot7 = FieldModel<address, 7, 1>;\n    using ot6 = FieldModel<address,\
    \ 6, 1>;\n    using ot5 = FieldModel<address, 5, 1>;\n    using ot4 = FieldModel<address,\
    \ 4, 1>;\n    using ot3 = FieldModel<address, 3, 1>;\n    using ot2 = FieldModel<address,\
    \ 2, 1>;\n    using ot1 = FieldModel<address, 1, 1>;\n    using ot0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> ot15;\n      BitFieldModel<14, 1> ot14;\n      BitFieldModel<13, 1> ot13;\n\
    \      BitFieldModel<12, 1> ot12;\n      BitFieldModel<11, 1> ot11;\n      BitFieldModel<10,\
    \ 1> ot10;\n      BitFieldModel<9, 1> ot9;\n      BitFieldModel<8, 1> ot8;\n \
    \     BitFieldModel<7, 1> ot7;\n      BitFieldModel<6, 1> ot6;\n      BitFieldModel<5,\
    \ 1> ot5;\n      BitFieldModel<4, 1> ot4;\n      BitFieldModel<3, 1> ot3;\n  \
    \    BitFieldModel<2, 1> ot2;\n      BitFieldModel<1, 1> ot1;\n      BitFieldModel<0,\
    \ 1> ot0;\n    };\n  };\n\npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OspeedrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ospeedr15 = FieldModel<address, 30, 2>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 2>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 2>;\n    using ospeedr12 = FieldModel<address, 24, 2>;\n    using ospeedr11\
    \ = FieldModel<address, 22, 2>;\n    using ospeedr10 = FieldModel<address, 20,\
    \ 2>;\n    using ospeedr9 = FieldModel<address, 18, 2>;\n    using ospeedr8 =\
    \ FieldModel<address, 16, 2>;\n    using ospeedr7 = FieldModel<address, 14, 2>;\n\
    \    using ospeedr6 = FieldModel<address, 12, 2>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 2>;\n    using ospeedr4 = FieldModel<address, 8, 2>;\n    using ospeedr3\
    \ = FieldModel<address, 6, 2>;\n    using ospeedr2 = FieldModel<address, 4, 2>;\n\
    \    using ospeedr1 = FieldModel<address, 2, 2>;\n    using ospeedr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> ospeedr15;\n      BitFieldModel<28, 2> ospeedr14;\n      BitFieldModel<26,\
    \ 2> ospeedr13;\n      BitFieldModel<24, 2> ospeedr12;\n      BitFieldModel<22,\
    \ 2> ospeedr11;\n      BitFieldModel<20, 2> ospeedr10;\n      BitFieldModel<18,\
    \ 2> ospeedr9;\n      BitFieldModel<16, 2> ospeedr8;\n      BitFieldModel<14,\
    \ 2> ospeedr7;\n      BitFieldModel<12, 2> ospeedr6;\n      BitFieldModel<10,\
    \ 2> ospeedr5;\n      BitFieldModel<8, 2> ospeedr4;\n      BitFieldModel<6, 2>\
    \ ospeedr3;\n      BitFieldModel<4, 2> ospeedr2;\n      BitFieldModel<2, 2> ospeedr1;\n\
    \      BitFieldModel<0, 2> ospeedr0;\n    };\n  };\n\npublic:\n  using ospeedr\
    \ = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PupdrReg : public RegisterModel<address>\n  {\n  public:\n    using pupdr15\
    \ = FieldModel<address, 30, 2>;\n    using pupdr14 = FieldModel<address, 28, 2>;\n\
    \    using pupdr13 = FieldModel<address, 26, 2>;\n    using pupdr12 = FieldModel<address,\
    \ 24, 2>;\n    using pupdr11 = FieldModel<address, 22, 2>;\n    using pupdr10\
    \ = FieldModel<address, 20, 2>;\n    using pupdr9 = FieldModel<address, 18, 2>;\n\
    \    using pupdr8 = FieldModel<address, 16, 2>;\n    using pupdr7 = FieldModel<address,\
    \ 14, 2>;\n    using pupdr6 = FieldModel<address, 12, 2>;\n    using pupdr5 =\
    \ FieldModel<address, 10, 2>;\n    using pupdr4 = FieldModel<address, 8, 2>;\n\
    \    using pupdr3 = FieldModel<address, 6, 2>;\n    using pupdr2 = FieldModel<address,\
    \ 4, 2>;\n    using pupdr1 = FieldModel<address, 2, 2>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> pupdr15;\n      BitFieldModel<28, 2> pupdr14;\n      BitFieldModel<26, 2>\
    \ pupdr13;\n      BitFieldModel<24, 2> pupdr12;\n      BitFieldModel<22, 2> pupdr11;\n\
    \      BitFieldModel<20, 2> pupdr10;\n      BitFieldModel<18, 2> pupdr9;\n   \
    \   BitFieldModel<16, 2> pupdr8;\n      BitFieldModel<14, 2> pupdr7;\n      BitFieldModel<12,\
    \ 2> pupdr6;\n      BitFieldModel<10, 2> pupdr5;\n      BitFieldModel<8, 2> pupdr4;\n\
    \      BitFieldModel<6, 2> pupdr3;\n      BitFieldModel<4, 2> pupdr2;\n      BitFieldModel<2,\
    \ 2> pupdr1;\n      BitFieldModel<0, 2> pupdr0;\n    };\n  };\n\npublic:\n  using\
    \ pupdr = PupdrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IdrReg : public RegisterModel<address>\n  {\n  public:\n    using idr15\
    \ = FieldModel<address, 15, 1>;\n    using idr14 = FieldModel<address, 14, 1>;\n\
    \    using idr13 = FieldModel<address, 13, 1>;\n    using idr12 = FieldModel<address,\
    \ 12, 1>;\n    using idr11 = FieldModel<address, 11, 1>;\n    using idr10 = FieldModel<address,\
    \ 10, 1>;\n    using idr9 = FieldModel<address, 9, 1>;\n    using idr8 = FieldModel<address,\
    \ 8, 1>;\n    using idr7 = FieldModel<address, 7, 1>;\n    using idr6 = FieldModel<address,\
    \ 6, 1>;\n    using idr5 = FieldModel<address, 5, 1>;\n    using idr4 = FieldModel<address,\
    \ 4, 1>;\n    using idr3 = FieldModel<address, 3, 1>;\n    using idr2 = FieldModel<address,\
    \ 2, 1>;\n    using idr1 = FieldModel<address, 1, 1>;\n    using idr0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> idr15;\n      BitFieldModel<14, 1> idr14;\n      BitFieldModel<13, 1> idr13;\n\
    \      BitFieldModel<12, 1> idr12;\n      BitFieldModel<11, 1> idr11;\n      BitFieldModel<10,\
    \ 1> idr10;\n      BitFieldModel<9, 1> idr9;\n      BitFieldModel<8, 1> idr8;\n\
    \      BitFieldModel<7, 1> idr7;\n      BitFieldModel<6, 1> idr6;\n      BitFieldModel<5,\
    \ 1> idr5;\n      BitFieldModel<4, 1> idr4;\n      BitFieldModel<3, 1> idr3;\n\
    \      BitFieldModel<2, 1> idr2;\n      BitFieldModel<1, 1> idr1;\n      BitFieldModel<0,\
    \ 1> idr0;\n    };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using odr15 = FieldModel<address, 15, 1>;\n    using odr14\
    \ = FieldModel<address, 14, 1>;\n    using odr13 = FieldModel<address, 13, 1>;\n\
    \    using odr12 = FieldModel<address, 12, 1>;\n    using odr11 = FieldModel<address,\
    \ 11, 1>;\n    using odr10 = FieldModel<address, 10, 1>;\n    using odr9 = FieldModel<address,\
    \ 9, 1>;\n    using odr8 = FieldModel<address, 8, 1>;\n    using odr7 = FieldModel<address,\
    \ 7, 1>;\n    using odr6 = FieldModel<address, 6, 1>;\n    using odr5 = FieldModel<address,\
    \ 5, 1>;\n    using odr4 = FieldModel<address, 4, 1>;\n    using odr3 = FieldModel<address,\
    \ 3, 1>;\n    using odr2 = FieldModel<address, 2, 1>;\n    using odr1 = FieldModel<address,\
    \ 1, 1>;\n    using odr0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> odr15;\n     \
    \ BitFieldModel<14, 1> odr14;\n      BitFieldModel<13, 1> odr13;\n      BitFieldModel<12,\
    \ 1> odr12;\n      BitFieldModel<11, 1> odr11;\n      BitFieldModel<10, 1> odr10;\n\
    \      BitFieldModel<9, 1> odr9;\n      BitFieldModel<8, 1> odr8;\n      BitFieldModel<7,\
    \ 1> odr7;\n      BitFieldModel<6, 1> odr6;\n      BitFieldModel<5, 1> odr5;\n\
    \      BitFieldModel<4, 1> odr4;\n      BitFieldModel<3, 1> odr3;\n      BitFieldModel<2,\
    \ 1> odr2;\n      BitFieldModel<1, 1> odr1;\n      BitFieldModel<0, 1> odr0;\n\
    \    };\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class BsrrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using br15 = FieldModel<address, 31, 1>;\n    using br14\
    \ = FieldModel<address, 30, 1>;\n    using br13 = FieldModel<address, 29, 1>;\n\
    \    using br12 = FieldModel<address, 28, 1>;\n    using br11 = FieldModel<address,\
    \ 27, 1>;\n    using br10 = FieldModel<address, 26, 1>;\n    using br9 = FieldModel<address,\
    \ 25, 1>;\n    using br8 = FieldModel<address, 24, 1>;\n    using br7 = FieldModel<address,\
    \ 23, 1>;\n    using br6 = FieldModel<address, 22, 1>;\n    using br5 = FieldModel<address,\
    \ 21, 1>;\n    using br4 = FieldModel<address, 20, 1>;\n    using br3 = FieldModel<address,\
    \ 19, 1>;\n    using br2 = FieldModel<address, 18, 1>;\n    using br1 = FieldModel<address,\
    \ 17, 1>;\n    using br0 = FieldModel<address, 16, 1>;\n    using bs15 = FieldModel<address,\
    \ 15, 1>;\n    using bs14 = FieldModel<address, 14, 1>;\n    using bs13 = FieldModel<address,\
    \ 13, 1>;\n    using bs12 = FieldModel<address, 12, 1>;\n    using bs11 = FieldModel<address,\
    \ 11, 1>;\n    using bs10 = FieldModel<address, 10, 1>;\n    using bs9 = FieldModel<address,\
    \ 9, 1>;\n    using bs8 = FieldModel<address, 8, 1>;\n    using bs7 = FieldModel<address,\
    \ 7, 1>;\n    using bs6 = FieldModel<address, 6, 1>;\n    using bs5 = FieldModel<address,\
    \ 5, 1>;\n    using bs4 = FieldModel<address, 4, 1>;\n    using bs3 = FieldModel<address,\
    \ 3, 1>;\n    using bs2 = FieldModel<address, 2, 1>;\n    using bs1 = FieldModel<address,\
    \ 1, 1>;\n    using bs0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> br15;\n      BitFieldModel<30,\
    \ 1> br14;\n      BitFieldModel<29, 1> br13;\n      BitFieldModel<28, 1> br12;\n\
    \      BitFieldModel<27, 1> br11;\n      BitFieldModel<26, 1> br10;\n      BitFieldModel<25,\
    \ 1> br9;\n      BitFieldModel<24, 1> br8;\n      BitFieldModel<23, 1> br7;\n\
    \      BitFieldModel<22, 1> br6;\n      BitFieldModel<21, 1> br5;\n      BitFieldModel<20,\
    \ 1> br4;\n      BitFieldModel<19, 1> br3;\n      BitFieldModel<18, 1> br2;\n\
    \      BitFieldModel<17, 1> br1;\n      BitFieldModel<16, 1> br0;\n      BitFieldModel<15,\
    \ 1> bs15;\n      BitFieldModel<14, 1> bs14;\n      BitFieldModel<13, 1> bs13;\n\
    \      BitFieldModel<12, 1> bs12;\n      BitFieldModel<11, 1> bs11;\n      BitFieldModel<10,\
    \ 1> bs10;\n      BitFieldModel<9, 1> bs9;\n      BitFieldModel<8, 1> bs8;\n \
    \     BitFieldModel<7, 1> bs7;\n      BitFieldModel<6, 1> bs6;\n      BitFieldModel<5,\
    \ 1> bs5;\n      BitFieldModel<4, 1> bs4;\n      BitFieldModel<3, 1> bs3;\n  \
    \    BitFieldModel<2, 1> bs2;\n      BitFieldModel<1, 1> bs1;\n      BitFieldModel<0,\
    \ 1> bs0;\n    };\n  };\n\npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LckrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lckk = FieldModel<address, 16, 1>;\n    using lck15\
    \ = FieldModel<address, 15, 1>;\n    using lck14 = FieldModel<address, 14, 1>;\n\
    \    using lck13 = FieldModel<address, 13, 1>;\n    using lck12 = FieldModel<address,\
    \ 12, 1>;\n    using lck11 = FieldModel<address, 11, 1>;\n    using lck10 = FieldModel<address,\
    \ 10, 1>;\n    using lck9 = FieldModel<address, 9, 1>;\n    using lck8 = FieldModel<address,\
    \ 8, 1>;\n    using lck7 = FieldModel<address, 7, 1>;\n    using lck6 = FieldModel<address,\
    \ 6, 1>;\n    using lck5 = FieldModel<address, 5, 1>;\n    using lck4 = FieldModel<address,\
    \ 4, 1>;\n    using lck3 = FieldModel<address, 3, 1>;\n    using lck2 = FieldModel<address,\
    \ 2, 1>;\n    using lck1 = FieldModel<address, 1, 1>;\n    using lck0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> lckk;\n      BitFieldModel<15, 1> lck15;\n      BitFieldModel<14, 1> lck14;\n\
    \      BitFieldModel<13, 1> lck13;\n      BitFieldModel<12, 1> lck12;\n      BitFieldModel<11,\
    \ 1> lck11;\n      BitFieldModel<10, 1> lck10;\n      BitFieldModel<9, 1> lck9;\n\
    \      BitFieldModel<8, 1> lck8;\n      BitFieldModel<7, 1> lck7;\n      BitFieldModel<6,\
    \ 1> lck6;\n      BitFieldModel<5, 1> lck5;\n      BitFieldModel<4, 1> lck4;\n\
    \      BitFieldModel<3, 1> lck3;\n      BitFieldModel<2, 1> lck2;\n      BitFieldModel<1,\
    \ 1> lck1;\n      BitFieldModel<0, 1> lck0;\n    };\n  };\n\npublic:\n  using\
    \ lckr = LckrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfrlReg : public RegisterModel<address>\n  {\n  public:\n    using afrl7\
    \ = FieldModel<address, 28, 4>;\n    using afrl6 = FieldModel<address, 24, 4>;\n\
    \    using afrl5 = FieldModel<address, 20, 4>;\n    using afrl4 = FieldModel<address,\
    \ 16, 4>;\n    using afrl3 = FieldModel<address, 12, 4>;\n    using afrl2 = FieldModel<address,\
    \ 8, 4>;\n    using afrl1 = FieldModel<address, 4, 4>;\n    using afrl0 = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 4> afrl7;\n      BitFieldModel<24, 4> afrl6;\n      BitFieldModel<20, 4> afrl5;\n\
    \      BitFieldModel<16, 4> afrl4;\n      BitFieldModel<12, 4> afrl3;\n      BitFieldModel<8,\
    \ 4> afrl2;\n      BitFieldModel<4, 4> afrl1;\n      BitFieldModel<0, 4> afrl0;\n\
    \    };\n  };\n\npublic:\n  using afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AfrhReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using afrh15 = FieldModel<address, 28, 4>;\n    using afrh14\
    \ = FieldModel<address, 24, 4>;\n    using afrh13 = FieldModel<address, 20, 4>;\n\
    \    using afrh12 = FieldModel<address, 16, 4>;\n    using afrh11 = FieldModel<address,\
    \ 12, 4>;\n    using afrh10 = FieldModel<address, 8, 4>;\n    using afrh9 = FieldModel<address,\
    \ 4, 4>;\n    using afrh8 = FieldModel<address, 0, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 4> afrh15;\n    \
    \  BitFieldModel<24, 4> afrh14;\n      BitFieldModel<20, 4> afrh13;\n      BitFieldModel<16,\
    \ 4> afrh12;\n      BitFieldModel<12, 4> afrh11;\n      BitFieldModel<8, 4> afrh10;\n\
    \      BitFieldModel<4, 4> afrh9;\n      BitFieldModel<0, 4> afrh8;\n    };\n\
    \  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_GPIOH_H */\n"
  name: GPIOH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOE_H\n#define DRAL_STM32F411_GPIOE_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioe\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40021000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ModerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 2>;\n    using moder14\
    \ = FieldModel<address, 28, 2>;\n    using moder13 = FieldModel<address, 26, 2>;\n\
    \    using moder12 = FieldModel<address, 24, 2>;\n    using moder11 = FieldModel<address,\
    \ 22, 2>;\n    using moder10 = FieldModel<address, 20, 2>;\n    using moder9 =\
    \ FieldModel<address, 18, 2>;\n    using moder8 = FieldModel<address, 16, 2>;\n\
    \    using moder7 = FieldModel<address, 14, 2>;\n    using moder6 = FieldModel<address,\
    \ 12, 2>;\n    using moder5 = FieldModel<address, 10, 2>;\n    using moder4 =\
    \ FieldModel<address, 8, 2>;\n    using moder3 = FieldModel<address, 6, 2>;\n\
    \    using moder2 = FieldModel<address, 4, 2>;\n    using moder1 = FieldModel<address,\
    \ 2, 2>;\n    using moder0 = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<30, 2> moder15;\n   \
    \   BitFieldModel<28, 2> moder14;\n      BitFieldModel<26, 2> moder13;\n     \
    \ BitFieldModel<24, 2> moder12;\n      BitFieldModel<22, 2> moder11;\n      BitFieldModel<20,\
    \ 2> moder10;\n      BitFieldModel<18, 2> moder9;\n      BitFieldModel<16, 2>\
    \ moder8;\n      BitFieldModel<14, 2> moder7;\n      BitFieldModel<12, 2> moder6;\n\
    \      BitFieldModel<10, 2> moder5;\n      BitFieldModel<8, 2> moder4;\n     \
    \ BitFieldModel<6, 2> moder3;\n      BitFieldModel<4, 2> moder2;\n      BitFieldModel<2,\
    \ 2> moder1;\n      BitFieldModel<0, 2> moder0;\n    };\n  };\n\npublic:\n  using\
    \ moder = ModerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OtyperReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ot15 = FieldModel<address, 15, 1>;\n    using ot14 = FieldModel<address, 14,\
    \ 1>;\n    using ot13 = FieldModel<address, 13, 1>;\n    using ot12 = FieldModel<address,\
    \ 12, 1>;\n    using ot11 = FieldModel<address, 11, 1>;\n    using ot10 = FieldModel<address,\
    \ 10, 1>;\n    using ot9 = FieldModel<address, 9, 1>;\n    using ot8 = FieldModel<address,\
    \ 8, 1>;\n    using ot7 = FieldModel<address, 7, 1>;\n    using ot6 = FieldModel<address,\
    \ 6, 1>;\n    using ot5 = FieldModel<address, 5, 1>;\n    using ot4 = FieldModel<address,\
    \ 4, 1>;\n    using ot3 = FieldModel<address, 3, 1>;\n    using ot2 = FieldModel<address,\
    \ 2, 1>;\n    using ot1 = FieldModel<address, 1, 1>;\n    using ot0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> ot15;\n      BitFieldModel<14, 1> ot14;\n      BitFieldModel<13, 1> ot13;\n\
    \      BitFieldModel<12, 1> ot12;\n      BitFieldModel<11, 1> ot11;\n      BitFieldModel<10,\
    \ 1> ot10;\n      BitFieldModel<9, 1> ot9;\n      BitFieldModel<8, 1> ot8;\n \
    \     BitFieldModel<7, 1> ot7;\n      BitFieldModel<6, 1> ot6;\n      BitFieldModel<5,\
    \ 1> ot5;\n      BitFieldModel<4, 1> ot4;\n      BitFieldModel<3, 1> ot3;\n  \
    \    BitFieldModel<2, 1> ot2;\n      BitFieldModel<1, 1> ot1;\n      BitFieldModel<0,\
    \ 1> ot0;\n    };\n  };\n\npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OspeedrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ospeedr15 = FieldModel<address, 30, 2>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 2>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 2>;\n    using ospeedr12 = FieldModel<address, 24, 2>;\n    using ospeedr11\
    \ = FieldModel<address, 22, 2>;\n    using ospeedr10 = FieldModel<address, 20,\
    \ 2>;\n    using ospeedr9 = FieldModel<address, 18, 2>;\n    using ospeedr8 =\
    \ FieldModel<address, 16, 2>;\n    using ospeedr7 = FieldModel<address, 14, 2>;\n\
    \    using ospeedr6 = FieldModel<address, 12, 2>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 2>;\n    using ospeedr4 = FieldModel<address, 8, 2>;\n    using ospeedr3\
    \ = FieldModel<address, 6, 2>;\n    using ospeedr2 = FieldModel<address, 4, 2>;\n\
    \    using ospeedr1 = FieldModel<address, 2, 2>;\n    using ospeedr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> ospeedr15;\n      BitFieldModel<28, 2> ospeedr14;\n      BitFieldModel<26,\
    \ 2> ospeedr13;\n      BitFieldModel<24, 2> ospeedr12;\n      BitFieldModel<22,\
    \ 2> ospeedr11;\n      BitFieldModel<20, 2> ospeedr10;\n      BitFieldModel<18,\
    \ 2> ospeedr9;\n      BitFieldModel<16, 2> ospeedr8;\n      BitFieldModel<14,\
    \ 2> ospeedr7;\n      BitFieldModel<12, 2> ospeedr6;\n      BitFieldModel<10,\
    \ 2> ospeedr5;\n      BitFieldModel<8, 2> ospeedr4;\n      BitFieldModel<6, 2>\
    \ ospeedr3;\n      BitFieldModel<4, 2> ospeedr2;\n      BitFieldModel<2, 2> ospeedr1;\n\
    \      BitFieldModel<0, 2> ospeedr0;\n    };\n  };\n\npublic:\n  using ospeedr\
    \ = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PupdrReg : public RegisterModel<address>\n  {\n  public:\n    using pupdr15\
    \ = FieldModel<address, 30, 2>;\n    using pupdr14 = FieldModel<address, 28, 2>;\n\
    \    using pupdr13 = FieldModel<address, 26, 2>;\n    using pupdr12 = FieldModel<address,\
    \ 24, 2>;\n    using pupdr11 = FieldModel<address, 22, 2>;\n    using pupdr10\
    \ = FieldModel<address, 20, 2>;\n    using pupdr9 = FieldModel<address, 18, 2>;\n\
    \    using pupdr8 = FieldModel<address, 16, 2>;\n    using pupdr7 = FieldModel<address,\
    \ 14, 2>;\n    using pupdr6 = FieldModel<address, 12, 2>;\n    using pupdr5 =\
    \ FieldModel<address, 10, 2>;\n    using pupdr4 = FieldModel<address, 8, 2>;\n\
    \    using pupdr3 = FieldModel<address, 6, 2>;\n    using pupdr2 = FieldModel<address,\
    \ 4, 2>;\n    using pupdr1 = FieldModel<address, 2, 2>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> pupdr15;\n      BitFieldModel<28, 2> pupdr14;\n      BitFieldModel<26, 2>\
    \ pupdr13;\n      BitFieldModel<24, 2> pupdr12;\n      BitFieldModel<22, 2> pupdr11;\n\
    \      BitFieldModel<20, 2> pupdr10;\n      BitFieldModel<18, 2> pupdr9;\n   \
    \   BitFieldModel<16, 2> pupdr8;\n      BitFieldModel<14, 2> pupdr7;\n      BitFieldModel<12,\
    \ 2> pupdr6;\n      BitFieldModel<10, 2> pupdr5;\n      BitFieldModel<8, 2> pupdr4;\n\
    \      BitFieldModel<6, 2> pupdr3;\n      BitFieldModel<4, 2> pupdr2;\n      BitFieldModel<2,\
    \ 2> pupdr1;\n      BitFieldModel<0, 2> pupdr0;\n    };\n  };\n\npublic:\n  using\
    \ pupdr = PupdrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IdrReg : public RegisterModel<address>\n  {\n  public:\n    using idr15\
    \ = FieldModel<address, 15, 1>;\n    using idr14 = FieldModel<address, 14, 1>;\n\
    \    using idr13 = FieldModel<address, 13, 1>;\n    using idr12 = FieldModel<address,\
    \ 12, 1>;\n    using idr11 = FieldModel<address, 11, 1>;\n    using idr10 = FieldModel<address,\
    \ 10, 1>;\n    using idr9 = FieldModel<address, 9, 1>;\n    using idr8 = FieldModel<address,\
    \ 8, 1>;\n    using idr7 = FieldModel<address, 7, 1>;\n    using idr6 = FieldModel<address,\
    \ 6, 1>;\n    using idr5 = FieldModel<address, 5, 1>;\n    using idr4 = FieldModel<address,\
    \ 4, 1>;\n    using idr3 = FieldModel<address, 3, 1>;\n    using idr2 = FieldModel<address,\
    \ 2, 1>;\n    using idr1 = FieldModel<address, 1, 1>;\n    using idr0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> idr15;\n      BitFieldModel<14, 1> idr14;\n      BitFieldModel<13, 1> idr13;\n\
    \      BitFieldModel<12, 1> idr12;\n      BitFieldModel<11, 1> idr11;\n      BitFieldModel<10,\
    \ 1> idr10;\n      BitFieldModel<9, 1> idr9;\n      BitFieldModel<8, 1> idr8;\n\
    \      BitFieldModel<7, 1> idr7;\n      BitFieldModel<6, 1> idr6;\n      BitFieldModel<5,\
    \ 1> idr5;\n      BitFieldModel<4, 1> idr4;\n      BitFieldModel<3, 1> idr3;\n\
    \      BitFieldModel<2, 1> idr2;\n      BitFieldModel<1, 1> idr1;\n      BitFieldModel<0,\
    \ 1> idr0;\n    };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using odr15 = FieldModel<address, 15, 1>;\n    using odr14\
    \ = FieldModel<address, 14, 1>;\n    using odr13 = FieldModel<address, 13, 1>;\n\
    \    using odr12 = FieldModel<address, 12, 1>;\n    using odr11 = FieldModel<address,\
    \ 11, 1>;\n    using odr10 = FieldModel<address, 10, 1>;\n    using odr9 = FieldModel<address,\
    \ 9, 1>;\n    using odr8 = FieldModel<address, 8, 1>;\n    using odr7 = FieldModel<address,\
    \ 7, 1>;\n    using odr6 = FieldModel<address, 6, 1>;\n    using odr5 = FieldModel<address,\
    \ 5, 1>;\n    using odr4 = FieldModel<address, 4, 1>;\n    using odr3 = FieldModel<address,\
    \ 3, 1>;\n    using odr2 = FieldModel<address, 2, 1>;\n    using odr1 = FieldModel<address,\
    \ 1, 1>;\n    using odr0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> odr15;\n     \
    \ BitFieldModel<14, 1> odr14;\n      BitFieldModel<13, 1> odr13;\n      BitFieldModel<12,\
    \ 1> odr12;\n      BitFieldModel<11, 1> odr11;\n      BitFieldModel<10, 1> odr10;\n\
    \      BitFieldModel<9, 1> odr9;\n      BitFieldModel<8, 1> odr8;\n      BitFieldModel<7,\
    \ 1> odr7;\n      BitFieldModel<6, 1> odr6;\n      BitFieldModel<5, 1> odr5;\n\
    \      BitFieldModel<4, 1> odr4;\n      BitFieldModel<3, 1> odr3;\n      BitFieldModel<2,\
    \ 1> odr2;\n      BitFieldModel<1, 1> odr1;\n      BitFieldModel<0, 1> odr0;\n\
    \    };\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class BsrrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using br15 = FieldModel<address, 31, 1>;\n    using br14\
    \ = FieldModel<address, 30, 1>;\n    using br13 = FieldModel<address, 29, 1>;\n\
    \    using br12 = FieldModel<address, 28, 1>;\n    using br11 = FieldModel<address,\
    \ 27, 1>;\n    using br10 = FieldModel<address, 26, 1>;\n    using br9 = FieldModel<address,\
    \ 25, 1>;\n    using br8 = FieldModel<address, 24, 1>;\n    using br7 = FieldModel<address,\
    \ 23, 1>;\n    using br6 = FieldModel<address, 22, 1>;\n    using br5 = FieldModel<address,\
    \ 21, 1>;\n    using br4 = FieldModel<address, 20, 1>;\n    using br3 = FieldModel<address,\
    \ 19, 1>;\n    using br2 = FieldModel<address, 18, 1>;\n    using br1 = FieldModel<address,\
    \ 17, 1>;\n    using br0 = FieldModel<address, 16, 1>;\n    using bs15 = FieldModel<address,\
    \ 15, 1>;\n    using bs14 = FieldModel<address, 14, 1>;\n    using bs13 = FieldModel<address,\
    \ 13, 1>;\n    using bs12 = FieldModel<address, 12, 1>;\n    using bs11 = FieldModel<address,\
    \ 11, 1>;\n    using bs10 = FieldModel<address, 10, 1>;\n    using bs9 = FieldModel<address,\
    \ 9, 1>;\n    using bs8 = FieldModel<address, 8, 1>;\n    using bs7 = FieldModel<address,\
    \ 7, 1>;\n    using bs6 = FieldModel<address, 6, 1>;\n    using bs5 = FieldModel<address,\
    \ 5, 1>;\n    using bs4 = FieldModel<address, 4, 1>;\n    using bs3 = FieldModel<address,\
    \ 3, 1>;\n    using bs2 = FieldModel<address, 2, 1>;\n    using bs1 = FieldModel<address,\
    \ 1, 1>;\n    using bs0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> br15;\n      BitFieldModel<30,\
    \ 1> br14;\n      BitFieldModel<29, 1> br13;\n      BitFieldModel<28, 1> br12;\n\
    \      BitFieldModel<27, 1> br11;\n      BitFieldModel<26, 1> br10;\n      BitFieldModel<25,\
    \ 1> br9;\n      BitFieldModel<24, 1> br8;\n      BitFieldModel<23, 1> br7;\n\
    \      BitFieldModel<22, 1> br6;\n      BitFieldModel<21, 1> br5;\n      BitFieldModel<20,\
    \ 1> br4;\n      BitFieldModel<19, 1> br3;\n      BitFieldModel<18, 1> br2;\n\
    \      BitFieldModel<17, 1> br1;\n      BitFieldModel<16, 1> br0;\n      BitFieldModel<15,\
    \ 1> bs15;\n      BitFieldModel<14, 1> bs14;\n      BitFieldModel<13, 1> bs13;\n\
    \      BitFieldModel<12, 1> bs12;\n      BitFieldModel<11, 1> bs11;\n      BitFieldModel<10,\
    \ 1> bs10;\n      BitFieldModel<9, 1> bs9;\n      BitFieldModel<8, 1> bs8;\n \
    \     BitFieldModel<7, 1> bs7;\n      BitFieldModel<6, 1> bs6;\n      BitFieldModel<5,\
    \ 1> bs5;\n      BitFieldModel<4, 1> bs4;\n      BitFieldModel<3, 1> bs3;\n  \
    \    BitFieldModel<2, 1> bs2;\n      BitFieldModel<1, 1> bs1;\n      BitFieldModel<0,\
    \ 1> bs0;\n    };\n  };\n\npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LckrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lckk = FieldModel<address, 16, 1>;\n    using lck15\
    \ = FieldModel<address, 15, 1>;\n    using lck14 = FieldModel<address, 14, 1>;\n\
    \    using lck13 = FieldModel<address, 13, 1>;\n    using lck12 = FieldModel<address,\
    \ 12, 1>;\n    using lck11 = FieldModel<address, 11, 1>;\n    using lck10 = FieldModel<address,\
    \ 10, 1>;\n    using lck9 = FieldModel<address, 9, 1>;\n    using lck8 = FieldModel<address,\
    \ 8, 1>;\n    using lck7 = FieldModel<address, 7, 1>;\n    using lck6 = FieldModel<address,\
    \ 6, 1>;\n    using lck5 = FieldModel<address, 5, 1>;\n    using lck4 = FieldModel<address,\
    \ 4, 1>;\n    using lck3 = FieldModel<address, 3, 1>;\n    using lck2 = FieldModel<address,\
    \ 2, 1>;\n    using lck1 = FieldModel<address, 1, 1>;\n    using lck0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> lckk;\n      BitFieldModel<15, 1> lck15;\n      BitFieldModel<14, 1> lck14;\n\
    \      BitFieldModel<13, 1> lck13;\n      BitFieldModel<12, 1> lck12;\n      BitFieldModel<11,\
    \ 1> lck11;\n      BitFieldModel<10, 1> lck10;\n      BitFieldModel<9, 1> lck9;\n\
    \      BitFieldModel<8, 1> lck8;\n      BitFieldModel<7, 1> lck7;\n      BitFieldModel<6,\
    \ 1> lck6;\n      BitFieldModel<5, 1> lck5;\n      BitFieldModel<4, 1> lck4;\n\
    \      BitFieldModel<3, 1> lck3;\n      BitFieldModel<2, 1> lck2;\n      BitFieldModel<1,\
    \ 1> lck1;\n      BitFieldModel<0, 1> lck0;\n    };\n  };\n\npublic:\n  using\
    \ lckr = LckrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfrlReg : public RegisterModel<address>\n  {\n  public:\n    using afrl7\
    \ = FieldModel<address, 28, 4>;\n    using afrl6 = FieldModel<address, 24, 4>;\n\
    \    using afrl5 = FieldModel<address, 20, 4>;\n    using afrl4 = FieldModel<address,\
    \ 16, 4>;\n    using afrl3 = FieldModel<address, 12, 4>;\n    using afrl2 = FieldModel<address,\
    \ 8, 4>;\n    using afrl1 = FieldModel<address, 4, 4>;\n    using afrl0 = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 4> afrl7;\n      BitFieldModel<24, 4> afrl6;\n      BitFieldModel<20, 4> afrl5;\n\
    \      BitFieldModel<16, 4> afrl4;\n      BitFieldModel<12, 4> afrl3;\n      BitFieldModel<8,\
    \ 4> afrl2;\n      BitFieldModel<4, 4> afrl1;\n      BitFieldModel<0, 4> afrl0;\n\
    \    };\n  };\n\npublic:\n  using afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AfrhReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using afrh15 = FieldModel<address, 28, 4>;\n    using afrh14\
    \ = FieldModel<address, 24, 4>;\n    using afrh13 = FieldModel<address, 20, 4>;\n\
    \    using afrh12 = FieldModel<address, 16, 4>;\n    using afrh11 = FieldModel<address,\
    \ 12, 4>;\n    using afrh10 = FieldModel<address, 8, 4>;\n    using afrh9 = FieldModel<address,\
    \ 4, 4>;\n    using afrh8 = FieldModel<address, 0, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 4> afrh15;\n    \
    \  BitFieldModel<24, 4> afrh14;\n      BitFieldModel<20, 4> afrh13;\n      BitFieldModel<16,\
    \ 4> afrh12;\n      BitFieldModel<12, 4> afrh11;\n      BitFieldModel<8, 4> afrh10;\n\
    \      BitFieldModel<4, 4> afrh9;\n      BitFieldModel<0, 4> afrh8;\n    };\n\
    \  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_GPIOE_H */\n"
  name: GPIOE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOD_H\n#define DRAL_STM32F411_GPIOD_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpiod\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ModerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 2>;\n    using moder14\
    \ = FieldModel<address, 28, 2>;\n    using moder13 = FieldModel<address, 26, 2>;\n\
    \    using moder12 = FieldModel<address, 24, 2>;\n    using moder11 = FieldModel<address,\
    \ 22, 2>;\n    using moder10 = FieldModel<address, 20, 2>;\n    using moder9 =\
    \ FieldModel<address, 18, 2>;\n    using moder8 = FieldModel<address, 16, 2>;\n\
    \    using moder7 = FieldModel<address, 14, 2>;\n    using moder6 = FieldModel<address,\
    \ 12, 2>;\n    using moder5 = FieldModel<address, 10, 2>;\n    using moder4 =\
    \ FieldModel<address, 8, 2>;\n    using moder3 = FieldModel<address, 6, 2>;\n\
    \    using moder2 = FieldModel<address, 4, 2>;\n    using moder1 = FieldModel<address,\
    \ 2, 2>;\n    using moder0 = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<30, 2> moder15;\n   \
    \   BitFieldModel<28, 2> moder14;\n      BitFieldModel<26, 2> moder13;\n     \
    \ BitFieldModel<24, 2> moder12;\n      BitFieldModel<22, 2> moder11;\n      BitFieldModel<20,\
    \ 2> moder10;\n      BitFieldModel<18, 2> moder9;\n      BitFieldModel<16, 2>\
    \ moder8;\n      BitFieldModel<14, 2> moder7;\n      BitFieldModel<12, 2> moder6;\n\
    \      BitFieldModel<10, 2> moder5;\n      BitFieldModel<8, 2> moder4;\n     \
    \ BitFieldModel<6, 2> moder3;\n      BitFieldModel<4, 2> moder2;\n      BitFieldModel<2,\
    \ 2> moder1;\n      BitFieldModel<0, 2> moder0;\n    };\n  };\n\npublic:\n  using\
    \ moder = ModerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OtyperReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ot15 = FieldModel<address, 15, 1>;\n    using ot14 = FieldModel<address, 14,\
    \ 1>;\n    using ot13 = FieldModel<address, 13, 1>;\n    using ot12 = FieldModel<address,\
    \ 12, 1>;\n    using ot11 = FieldModel<address, 11, 1>;\n    using ot10 = FieldModel<address,\
    \ 10, 1>;\n    using ot9 = FieldModel<address, 9, 1>;\n    using ot8 = FieldModel<address,\
    \ 8, 1>;\n    using ot7 = FieldModel<address, 7, 1>;\n    using ot6 = FieldModel<address,\
    \ 6, 1>;\n    using ot5 = FieldModel<address, 5, 1>;\n    using ot4 = FieldModel<address,\
    \ 4, 1>;\n    using ot3 = FieldModel<address, 3, 1>;\n    using ot2 = FieldModel<address,\
    \ 2, 1>;\n    using ot1 = FieldModel<address, 1, 1>;\n    using ot0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> ot15;\n      BitFieldModel<14, 1> ot14;\n      BitFieldModel<13, 1> ot13;\n\
    \      BitFieldModel<12, 1> ot12;\n      BitFieldModel<11, 1> ot11;\n      BitFieldModel<10,\
    \ 1> ot10;\n      BitFieldModel<9, 1> ot9;\n      BitFieldModel<8, 1> ot8;\n \
    \     BitFieldModel<7, 1> ot7;\n      BitFieldModel<6, 1> ot6;\n      BitFieldModel<5,\
    \ 1> ot5;\n      BitFieldModel<4, 1> ot4;\n      BitFieldModel<3, 1> ot3;\n  \
    \    BitFieldModel<2, 1> ot2;\n      BitFieldModel<1, 1> ot1;\n      BitFieldModel<0,\
    \ 1> ot0;\n    };\n  };\n\npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OspeedrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ospeedr15 = FieldModel<address, 30, 2>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 2>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 2>;\n    using ospeedr12 = FieldModel<address, 24, 2>;\n    using ospeedr11\
    \ = FieldModel<address, 22, 2>;\n    using ospeedr10 = FieldModel<address, 20,\
    \ 2>;\n    using ospeedr9 = FieldModel<address, 18, 2>;\n    using ospeedr8 =\
    \ FieldModel<address, 16, 2>;\n    using ospeedr7 = FieldModel<address, 14, 2>;\n\
    \    using ospeedr6 = FieldModel<address, 12, 2>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 2>;\n    using ospeedr4 = FieldModel<address, 8, 2>;\n    using ospeedr3\
    \ = FieldModel<address, 6, 2>;\n    using ospeedr2 = FieldModel<address, 4, 2>;\n\
    \    using ospeedr1 = FieldModel<address, 2, 2>;\n    using ospeedr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> ospeedr15;\n      BitFieldModel<28, 2> ospeedr14;\n      BitFieldModel<26,\
    \ 2> ospeedr13;\n      BitFieldModel<24, 2> ospeedr12;\n      BitFieldModel<22,\
    \ 2> ospeedr11;\n      BitFieldModel<20, 2> ospeedr10;\n      BitFieldModel<18,\
    \ 2> ospeedr9;\n      BitFieldModel<16, 2> ospeedr8;\n      BitFieldModel<14,\
    \ 2> ospeedr7;\n      BitFieldModel<12, 2> ospeedr6;\n      BitFieldModel<10,\
    \ 2> ospeedr5;\n      BitFieldModel<8, 2> ospeedr4;\n      BitFieldModel<6, 2>\
    \ ospeedr3;\n      BitFieldModel<4, 2> ospeedr2;\n      BitFieldModel<2, 2> ospeedr1;\n\
    \      BitFieldModel<0, 2> ospeedr0;\n    };\n  };\n\npublic:\n  using ospeedr\
    \ = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PupdrReg : public RegisterModel<address>\n  {\n  public:\n    using pupdr15\
    \ = FieldModel<address, 30, 2>;\n    using pupdr14 = FieldModel<address, 28, 2>;\n\
    \    using pupdr13 = FieldModel<address, 26, 2>;\n    using pupdr12 = FieldModel<address,\
    \ 24, 2>;\n    using pupdr11 = FieldModel<address, 22, 2>;\n    using pupdr10\
    \ = FieldModel<address, 20, 2>;\n    using pupdr9 = FieldModel<address, 18, 2>;\n\
    \    using pupdr8 = FieldModel<address, 16, 2>;\n    using pupdr7 = FieldModel<address,\
    \ 14, 2>;\n    using pupdr6 = FieldModel<address, 12, 2>;\n    using pupdr5 =\
    \ FieldModel<address, 10, 2>;\n    using pupdr4 = FieldModel<address, 8, 2>;\n\
    \    using pupdr3 = FieldModel<address, 6, 2>;\n    using pupdr2 = FieldModel<address,\
    \ 4, 2>;\n    using pupdr1 = FieldModel<address, 2, 2>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> pupdr15;\n      BitFieldModel<28, 2> pupdr14;\n      BitFieldModel<26, 2>\
    \ pupdr13;\n      BitFieldModel<24, 2> pupdr12;\n      BitFieldModel<22, 2> pupdr11;\n\
    \      BitFieldModel<20, 2> pupdr10;\n      BitFieldModel<18, 2> pupdr9;\n   \
    \   BitFieldModel<16, 2> pupdr8;\n      BitFieldModel<14, 2> pupdr7;\n      BitFieldModel<12,\
    \ 2> pupdr6;\n      BitFieldModel<10, 2> pupdr5;\n      BitFieldModel<8, 2> pupdr4;\n\
    \      BitFieldModel<6, 2> pupdr3;\n      BitFieldModel<4, 2> pupdr2;\n      BitFieldModel<2,\
    \ 2> pupdr1;\n      BitFieldModel<0, 2> pupdr0;\n    };\n  };\n\npublic:\n  using\
    \ pupdr = PupdrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IdrReg : public RegisterModel<address>\n  {\n  public:\n    using idr15\
    \ = FieldModel<address, 15, 1>;\n    using idr14 = FieldModel<address, 14, 1>;\n\
    \    using idr13 = FieldModel<address, 13, 1>;\n    using idr12 = FieldModel<address,\
    \ 12, 1>;\n    using idr11 = FieldModel<address, 11, 1>;\n    using idr10 = FieldModel<address,\
    \ 10, 1>;\n    using idr9 = FieldModel<address, 9, 1>;\n    using idr8 = FieldModel<address,\
    \ 8, 1>;\n    using idr7 = FieldModel<address, 7, 1>;\n    using idr6 = FieldModel<address,\
    \ 6, 1>;\n    using idr5 = FieldModel<address, 5, 1>;\n    using idr4 = FieldModel<address,\
    \ 4, 1>;\n    using idr3 = FieldModel<address, 3, 1>;\n    using idr2 = FieldModel<address,\
    \ 2, 1>;\n    using idr1 = FieldModel<address, 1, 1>;\n    using idr0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> idr15;\n      BitFieldModel<14, 1> idr14;\n      BitFieldModel<13, 1> idr13;\n\
    \      BitFieldModel<12, 1> idr12;\n      BitFieldModel<11, 1> idr11;\n      BitFieldModel<10,\
    \ 1> idr10;\n      BitFieldModel<9, 1> idr9;\n      BitFieldModel<8, 1> idr8;\n\
    \      BitFieldModel<7, 1> idr7;\n      BitFieldModel<6, 1> idr6;\n      BitFieldModel<5,\
    \ 1> idr5;\n      BitFieldModel<4, 1> idr4;\n      BitFieldModel<3, 1> idr3;\n\
    \      BitFieldModel<2, 1> idr2;\n      BitFieldModel<1, 1> idr1;\n      BitFieldModel<0,\
    \ 1> idr0;\n    };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using odr15 = FieldModel<address, 15, 1>;\n    using odr14\
    \ = FieldModel<address, 14, 1>;\n    using odr13 = FieldModel<address, 13, 1>;\n\
    \    using odr12 = FieldModel<address, 12, 1>;\n    using odr11 = FieldModel<address,\
    \ 11, 1>;\n    using odr10 = FieldModel<address, 10, 1>;\n    using odr9 = FieldModel<address,\
    \ 9, 1>;\n    using odr8 = FieldModel<address, 8, 1>;\n    using odr7 = FieldModel<address,\
    \ 7, 1>;\n    using odr6 = FieldModel<address, 6, 1>;\n    using odr5 = FieldModel<address,\
    \ 5, 1>;\n    using odr4 = FieldModel<address, 4, 1>;\n    using odr3 = FieldModel<address,\
    \ 3, 1>;\n    using odr2 = FieldModel<address, 2, 1>;\n    using odr1 = FieldModel<address,\
    \ 1, 1>;\n    using odr0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> odr15;\n     \
    \ BitFieldModel<14, 1> odr14;\n      BitFieldModel<13, 1> odr13;\n      BitFieldModel<12,\
    \ 1> odr12;\n      BitFieldModel<11, 1> odr11;\n      BitFieldModel<10, 1> odr10;\n\
    \      BitFieldModel<9, 1> odr9;\n      BitFieldModel<8, 1> odr8;\n      BitFieldModel<7,\
    \ 1> odr7;\n      BitFieldModel<6, 1> odr6;\n      BitFieldModel<5, 1> odr5;\n\
    \      BitFieldModel<4, 1> odr4;\n      BitFieldModel<3, 1> odr3;\n      BitFieldModel<2,\
    \ 1> odr2;\n      BitFieldModel<1, 1> odr1;\n      BitFieldModel<0, 1> odr0;\n\
    \    };\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class BsrrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using br15 = FieldModel<address, 31, 1>;\n    using br14\
    \ = FieldModel<address, 30, 1>;\n    using br13 = FieldModel<address, 29, 1>;\n\
    \    using br12 = FieldModel<address, 28, 1>;\n    using br11 = FieldModel<address,\
    \ 27, 1>;\n    using br10 = FieldModel<address, 26, 1>;\n    using br9 = FieldModel<address,\
    \ 25, 1>;\n    using br8 = FieldModel<address, 24, 1>;\n    using br7 = FieldModel<address,\
    \ 23, 1>;\n    using br6 = FieldModel<address, 22, 1>;\n    using br5 = FieldModel<address,\
    \ 21, 1>;\n    using br4 = FieldModel<address, 20, 1>;\n    using br3 = FieldModel<address,\
    \ 19, 1>;\n    using br2 = FieldModel<address, 18, 1>;\n    using br1 = FieldModel<address,\
    \ 17, 1>;\n    using br0 = FieldModel<address, 16, 1>;\n    using bs15 = FieldModel<address,\
    \ 15, 1>;\n    using bs14 = FieldModel<address, 14, 1>;\n    using bs13 = FieldModel<address,\
    \ 13, 1>;\n    using bs12 = FieldModel<address, 12, 1>;\n    using bs11 = FieldModel<address,\
    \ 11, 1>;\n    using bs10 = FieldModel<address, 10, 1>;\n    using bs9 = FieldModel<address,\
    \ 9, 1>;\n    using bs8 = FieldModel<address, 8, 1>;\n    using bs7 = FieldModel<address,\
    \ 7, 1>;\n    using bs6 = FieldModel<address, 6, 1>;\n    using bs5 = FieldModel<address,\
    \ 5, 1>;\n    using bs4 = FieldModel<address, 4, 1>;\n    using bs3 = FieldModel<address,\
    \ 3, 1>;\n    using bs2 = FieldModel<address, 2, 1>;\n    using bs1 = FieldModel<address,\
    \ 1, 1>;\n    using bs0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> br15;\n      BitFieldModel<30,\
    \ 1> br14;\n      BitFieldModel<29, 1> br13;\n      BitFieldModel<28, 1> br12;\n\
    \      BitFieldModel<27, 1> br11;\n      BitFieldModel<26, 1> br10;\n      BitFieldModel<25,\
    \ 1> br9;\n      BitFieldModel<24, 1> br8;\n      BitFieldModel<23, 1> br7;\n\
    \      BitFieldModel<22, 1> br6;\n      BitFieldModel<21, 1> br5;\n      BitFieldModel<20,\
    \ 1> br4;\n      BitFieldModel<19, 1> br3;\n      BitFieldModel<18, 1> br2;\n\
    \      BitFieldModel<17, 1> br1;\n      BitFieldModel<16, 1> br0;\n      BitFieldModel<15,\
    \ 1> bs15;\n      BitFieldModel<14, 1> bs14;\n      BitFieldModel<13, 1> bs13;\n\
    \      BitFieldModel<12, 1> bs12;\n      BitFieldModel<11, 1> bs11;\n      BitFieldModel<10,\
    \ 1> bs10;\n      BitFieldModel<9, 1> bs9;\n      BitFieldModel<8, 1> bs8;\n \
    \     BitFieldModel<7, 1> bs7;\n      BitFieldModel<6, 1> bs6;\n      BitFieldModel<5,\
    \ 1> bs5;\n      BitFieldModel<4, 1> bs4;\n      BitFieldModel<3, 1> bs3;\n  \
    \    BitFieldModel<2, 1> bs2;\n      BitFieldModel<1, 1> bs1;\n      BitFieldModel<0,\
    \ 1> bs0;\n    };\n  };\n\npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LckrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lckk = FieldModel<address, 16, 1>;\n    using lck15\
    \ = FieldModel<address, 15, 1>;\n    using lck14 = FieldModel<address, 14, 1>;\n\
    \    using lck13 = FieldModel<address, 13, 1>;\n    using lck12 = FieldModel<address,\
    \ 12, 1>;\n    using lck11 = FieldModel<address, 11, 1>;\n    using lck10 = FieldModel<address,\
    \ 10, 1>;\n    using lck9 = FieldModel<address, 9, 1>;\n    using lck8 = FieldModel<address,\
    \ 8, 1>;\n    using lck7 = FieldModel<address, 7, 1>;\n    using lck6 = FieldModel<address,\
    \ 6, 1>;\n    using lck5 = FieldModel<address, 5, 1>;\n    using lck4 = FieldModel<address,\
    \ 4, 1>;\n    using lck3 = FieldModel<address, 3, 1>;\n    using lck2 = FieldModel<address,\
    \ 2, 1>;\n    using lck1 = FieldModel<address, 1, 1>;\n    using lck0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> lckk;\n      BitFieldModel<15, 1> lck15;\n      BitFieldModel<14, 1> lck14;\n\
    \      BitFieldModel<13, 1> lck13;\n      BitFieldModel<12, 1> lck12;\n      BitFieldModel<11,\
    \ 1> lck11;\n      BitFieldModel<10, 1> lck10;\n      BitFieldModel<9, 1> lck9;\n\
    \      BitFieldModel<8, 1> lck8;\n      BitFieldModel<7, 1> lck7;\n      BitFieldModel<6,\
    \ 1> lck6;\n      BitFieldModel<5, 1> lck5;\n      BitFieldModel<4, 1> lck4;\n\
    \      BitFieldModel<3, 1> lck3;\n      BitFieldModel<2, 1> lck2;\n      BitFieldModel<1,\
    \ 1> lck1;\n      BitFieldModel<0, 1> lck0;\n    };\n  };\n\npublic:\n  using\
    \ lckr = LckrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfrlReg : public RegisterModel<address>\n  {\n  public:\n    using afrl7\
    \ = FieldModel<address, 28, 4>;\n    using afrl6 = FieldModel<address, 24, 4>;\n\
    \    using afrl5 = FieldModel<address, 20, 4>;\n    using afrl4 = FieldModel<address,\
    \ 16, 4>;\n    using afrl3 = FieldModel<address, 12, 4>;\n    using afrl2 = FieldModel<address,\
    \ 8, 4>;\n    using afrl1 = FieldModel<address, 4, 4>;\n    using afrl0 = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 4> afrl7;\n      BitFieldModel<24, 4> afrl6;\n      BitFieldModel<20, 4> afrl5;\n\
    \      BitFieldModel<16, 4> afrl4;\n      BitFieldModel<12, 4> afrl3;\n      BitFieldModel<8,\
    \ 4> afrl2;\n      BitFieldModel<4, 4> afrl1;\n      BitFieldModel<0, 4> afrl0;\n\
    \    };\n  };\n\npublic:\n  using afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AfrhReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using afrh15 = FieldModel<address, 28, 4>;\n    using afrh14\
    \ = FieldModel<address, 24, 4>;\n    using afrh13 = FieldModel<address, 20, 4>;\n\
    \    using afrh12 = FieldModel<address, 16, 4>;\n    using afrh11 = FieldModel<address,\
    \ 12, 4>;\n    using afrh10 = FieldModel<address, 8, 4>;\n    using afrh9 = FieldModel<address,\
    \ 4, 4>;\n    using afrh8 = FieldModel<address, 0, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 4> afrh15;\n    \
    \  BitFieldModel<24, 4> afrh14;\n      BitFieldModel<20, 4> afrh13;\n      BitFieldModel<16,\
    \ 4> afrh12;\n      BitFieldModel<12, 4> afrh11;\n      BitFieldModel<8, 4> afrh10;\n\
    \      BitFieldModel<4, 4> afrh9;\n      BitFieldModel<0, 4> afrh8;\n    };\n\
    \  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_GPIOD_H */\n"
  name: GPIOD
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOC_H\n#define DRAL_STM32F411_GPIOC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ModerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 2>;\n    using moder14\
    \ = FieldModel<address, 28, 2>;\n    using moder13 = FieldModel<address, 26, 2>;\n\
    \    using moder12 = FieldModel<address, 24, 2>;\n    using moder11 = FieldModel<address,\
    \ 22, 2>;\n    using moder10 = FieldModel<address, 20, 2>;\n    using moder9 =\
    \ FieldModel<address, 18, 2>;\n    using moder8 = FieldModel<address, 16, 2>;\n\
    \    using moder7 = FieldModel<address, 14, 2>;\n    using moder6 = FieldModel<address,\
    \ 12, 2>;\n    using moder5 = FieldModel<address, 10, 2>;\n    using moder4 =\
    \ FieldModel<address, 8, 2>;\n    using moder3 = FieldModel<address, 6, 2>;\n\
    \    using moder2 = FieldModel<address, 4, 2>;\n    using moder1 = FieldModel<address,\
    \ 2, 2>;\n    using moder0 = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<30, 2> moder15;\n   \
    \   BitFieldModel<28, 2> moder14;\n      BitFieldModel<26, 2> moder13;\n     \
    \ BitFieldModel<24, 2> moder12;\n      BitFieldModel<22, 2> moder11;\n      BitFieldModel<20,\
    \ 2> moder10;\n      BitFieldModel<18, 2> moder9;\n      BitFieldModel<16, 2>\
    \ moder8;\n      BitFieldModel<14, 2> moder7;\n      BitFieldModel<12, 2> moder6;\n\
    \      BitFieldModel<10, 2> moder5;\n      BitFieldModel<8, 2> moder4;\n     \
    \ BitFieldModel<6, 2> moder3;\n      BitFieldModel<4, 2> moder2;\n      BitFieldModel<2,\
    \ 2> moder1;\n      BitFieldModel<0, 2> moder0;\n    };\n  };\n\npublic:\n  using\
    \ moder = ModerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OtyperReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ot15 = FieldModel<address, 15, 1>;\n    using ot14 = FieldModel<address, 14,\
    \ 1>;\n    using ot13 = FieldModel<address, 13, 1>;\n    using ot12 = FieldModel<address,\
    \ 12, 1>;\n    using ot11 = FieldModel<address, 11, 1>;\n    using ot10 = FieldModel<address,\
    \ 10, 1>;\n    using ot9 = FieldModel<address, 9, 1>;\n    using ot8 = FieldModel<address,\
    \ 8, 1>;\n    using ot7 = FieldModel<address, 7, 1>;\n    using ot6 = FieldModel<address,\
    \ 6, 1>;\n    using ot5 = FieldModel<address, 5, 1>;\n    using ot4 = FieldModel<address,\
    \ 4, 1>;\n    using ot3 = FieldModel<address, 3, 1>;\n    using ot2 = FieldModel<address,\
    \ 2, 1>;\n    using ot1 = FieldModel<address, 1, 1>;\n    using ot0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> ot15;\n      BitFieldModel<14, 1> ot14;\n      BitFieldModel<13, 1> ot13;\n\
    \      BitFieldModel<12, 1> ot12;\n      BitFieldModel<11, 1> ot11;\n      BitFieldModel<10,\
    \ 1> ot10;\n      BitFieldModel<9, 1> ot9;\n      BitFieldModel<8, 1> ot8;\n \
    \     BitFieldModel<7, 1> ot7;\n      BitFieldModel<6, 1> ot6;\n      BitFieldModel<5,\
    \ 1> ot5;\n      BitFieldModel<4, 1> ot4;\n      BitFieldModel<3, 1> ot3;\n  \
    \    BitFieldModel<2, 1> ot2;\n      BitFieldModel<1, 1> ot1;\n      BitFieldModel<0,\
    \ 1> ot0;\n    };\n  };\n\npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OspeedrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ospeedr15 = FieldModel<address, 30, 2>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 2>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 2>;\n    using ospeedr12 = FieldModel<address, 24, 2>;\n    using ospeedr11\
    \ = FieldModel<address, 22, 2>;\n    using ospeedr10 = FieldModel<address, 20,\
    \ 2>;\n    using ospeedr9 = FieldModel<address, 18, 2>;\n    using ospeedr8 =\
    \ FieldModel<address, 16, 2>;\n    using ospeedr7 = FieldModel<address, 14, 2>;\n\
    \    using ospeedr6 = FieldModel<address, 12, 2>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 2>;\n    using ospeedr4 = FieldModel<address, 8, 2>;\n    using ospeedr3\
    \ = FieldModel<address, 6, 2>;\n    using ospeedr2 = FieldModel<address, 4, 2>;\n\
    \    using ospeedr1 = FieldModel<address, 2, 2>;\n    using ospeedr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> ospeedr15;\n      BitFieldModel<28, 2> ospeedr14;\n      BitFieldModel<26,\
    \ 2> ospeedr13;\n      BitFieldModel<24, 2> ospeedr12;\n      BitFieldModel<22,\
    \ 2> ospeedr11;\n      BitFieldModel<20, 2> ospeedr10;\n      BitFieldModel<18,\
    \ 2> ospeedr9;\n      BitFieldModel<16, 2> ospeedr8;\n      BitFieldModel<14,\
    \ 2> ospeedr7;\n      BitFieldModel<12, 2> ospeedr6;\n      BitFieldModel<10,\
    \ 2> ospeedr5;\n      BitFieldModel<8, 2> ospeedr4;\n      BitFieldModel<6, 2>\
    \ ospeedr3;\n      BitFieldModel<4, 2> ospeedr2;\n      BitFieldModel<2, 2> ospeedr1;\n\
    \      BitFieldModel<0, 2> ospeedr0;\n    };\n  };\n\npublic:\n  using ospeedr\
    \ = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PupdrReg : public RegisterModel<address>\n  {\n  public:\n    using pupdr15\
    \ = FieldModel<address, 30, 2>;\n    using pupdr14 = FieldModel<address, 28, 2>;\n\
    \    using pupdr13 = FieldModel<address, 26, 2>;\n    using pupdr12 = FieldModel<address,\
    \ 24, 2>;\n    using pupdr11 = FieldModel<address, 22, 2>;\n    using pupdr10\
    \ = FieldModel<address, 20, 2>;\n    using pupdr9 = FieldModel<address, 18, 2>;\n\
    \    using pupdr8 = FieldModel<address, 16, 2>;\n    using pupdr7 = FieldModel<address,\
    \ 14, 2>;\n    using pupdr6 = FieldModel<address, 12, 2>;\n    using pupdr5 =\
    \ FieldModel<address, 10, 2>;\n    using pupdr4 = FieldModel<address, 8, 2>;\n\
    \    using pupdr3 = FieldModel<address, 6, 2>;\n    using pupdr2 = FieldModel<address,\
    \ 4, 2>;\n    using pupdr1 = FieldModel<address, 2, 2>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> pupdr15;\n      BitFieldModel<28, 2> pupdr14;\n      BitFieldModel<26, 2>\
    \ pupdr13;\n      BitFieldModel<24, 2> pupdr12;\n      BitFieldModel<22, 2> pupdr11;\n\
    \      BitFieldModel<20, 2> pupdr10;\n      BitFieldModel<18, 2> pupdr9;\n   \
    \   BitFieldModel<16, 2> pupdr8;\n      BitFieldModel<14, 2> pupdr7;\n      BitFieldModel<12,\
    \ 2> pupdr6;\n      BitFieldModel<10, 2> pupdr5;\n      BitFieldModel<8, 2> pupdr4;\n\
    \      BitFieldModel<6, 2> pupdr3;\n      BitFieldModel<4, 2> pupdr2;\n      BitFieldModel<2,\
    \ 2> pupdr1;\n      BitFieldModel<0, 2> pupdr0;\n    };\n  };\n\npublic:\n  using\
    \ pupdr = PupdrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IdrReg : public RegisterModel<address>\n  {\n  public:\n    using idr15\
    \ = FieldModel<address, 15, 1>;\n    using idr14 = FieldModel<address, 14, 1>;\n\
    \    using idr13 = FieldModel<address, 13, 1>;\n    using idr12 = FieldModel<address,\
    \ 12, 1>;\n    using idr11 = FieldModel<address, 11, 1>;\n    using idr10 = FieldModel<address,\
    \ 10, 1>;\n    using idr9 = FieldModel<address, 9, 1>;\n    using idr8 = FieldModel<address,\
    \ 8, 1>;\n    using idr7 = FieldModel<address, 7, 1>;\n    using idr6 = FieldModel<address,\
    \ 6, 1>;\n    using idr5 = FieldModel<address, 5, 1>;\n    using idr4 = FieldModel<address,\
    \ 4, 1>;\n    using idr3 = FieldModel<address, 3, 1>;\n    using idr2 = FieldModel<address,\
    \ 2, 1>;\n    using idr1 = FieldModel<address, 1, 1>;\n    using idr0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> idr15;\n      BitFieldModel<14, 1> idr14;\n      BitFieldModel<13, 1> idr13;\n\
    \      BitFieldModel<12, 1> idr12;\n      BitFieldModel<11, 1> idr11;\n      BitFieldModel<10,\
    \ 1> idr10;\n      BitFieldModel<9, 1> idr9;\n      BitFieldModel<8, 1> idr8;\n\
    \      BitFieldModel<7, 1> idr7;\n      BitFieldModel<6, 1> idr6;\n      BitFieldModel<5,\
    \ 1> idr5;\n      BitFieldModel<4, 1> idr4;\n      BitFieldModel<3, 1> idr3;\n\
    \      BitFieldModel<2, 1> idr2;\n      BitFieldModel<1, 1> idr1;\n      BitFieldModel<0,\
    \ 1> idr0;\n    };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using odr15 = FieldModel<address, 15, 1>;\n    using odr14\
    \ = FieldModel<address, 14, 1>;\n    using odr13 = FieldModel<address, 13, 1>;\n\
    \    using odr12 = FieldModel<address, 12, 1>;\n    using odr11 = FieldModel<address,\
    \ 11, 1>;\n    using odr10 = FieldModel<address, 10, 1>;\n    using odr9 = FieldModel<address,\
    \ 9, 1>;\n    using odr8 = FieldModel<address, 8, 1>;\n    using odr7 = FieldModel<address,\
    \ 7, 1>;\n    using odr6 = FieldModel<address, 6, 1>;\n    using odr5 = FieldModel<address,\
    \ 5, 1>;\n    using odr4 = FieldModel<address, 4, 1>;\n    using odr3 = FieldModel<address,\
    \ 3, 1>;\n    using odr2 = FieldModel<address, 2, 1>;\n    using odr1 = FieldModel<address,\
    \ 1, 1>;\n    using odr0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> odr15;\n     \
    \ BitFieldModel<14, 1> odr14;\n      BitFieldModel<13, 1> odr13;\n      BitFieldModel<12,\
    \ 1> odr12;\n      BitFieldModel<11, 1> odr11;\n      BitFieldModel<10, 1> odr10;\n\
    \      BitFieldModel<9, 1> odr9;\n      BitFieldModel<8, 1> odr8;\n      BitFieldModel<7,\
    \ 1> odr7;\n      BitFieldModel<6, 1> odr6;\n      BitFieldModel<5, 1> odr5;\n\
    \      BitFieldModel<4, 1> odr4;\n      BitFieldModel<3, 1> odr3;\n      BitFieldModel<2,\
    \ 1> odr2;\n      BitFieldModel<1, 1> odr1;\n      BitFieldModel<0, 1> odr0;\n\
    \    };\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class BsrrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using br15 = FieldModel<address, 31, 1>;\n    using br14\
    \ = FieldModel<address, 30, 1>;\n    using br13 = FieldModel<address, 29, 1>;\n\
    \    using br12 = FieldModel<address, 28, 1>;\n    using br11 = FieldModel<address,\
    \ 27, 1>;\n    using br10 = FieldModel<address, 26, 1>;\n    using br9 = FieldModel<address,\
    \ 25, 1>;\n    using br8 = FieldModel<address, 24, 1>;\n    using br7 = FieldModel<address,\
    \ 23, 1>;\n    using br6 = FieldModel<address, 22, 1>;\n    using br5 = FieldModel<address,\
    \ 21, 1>;\n    using br4 = FieldModel<address, 20, 1>;\n    using br3 = FieldModel<address,\
    \ 19, 1>;\n    using br2 = FieldModel<address, 18, 1>;\n    using br1 = FieldModel<address,\
    \ 17, 1>;\n    using br0 = FieldModel<address, 16, 1>;\n    using bs15 = FieldModel<address,\
    \ 15, 1>;\n    using bs14 = FieldModel<address, 14, 1>;\n    using bs13 = FieldModel<address,\
    \ 13, 1>;\n    using bs12 = FieldModel<address, 12, 1>;\n    using bs11 = FieldModel<address,\
    \ 11, 1>;\n    using bs10 = FieldModel<address, 10, 1>;\n    using bs9 = FieldModel<address,\
    \ 9, 1>;\n    using bs8 = FieldModel<address, 8, 1>;\n    using bs7 = FieldModel<address,\
    \ 7, 1>;\n    using bs6 = FieldModel<address, 6, 1>;\n    using bs5 = FieldModel<address,\
    \ 5, 1>;\n    using bs4 = FieldModel<address, 4, 1>;\n    using bs3 = FieldModel<address,\
    \ 3, 1>;\n    using bs2 = FieldModel<address, 2, 1>;\n    using bs1 = FieldModel<address,\
    \ 1, 1>;\n    using bs0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> br15;\n      BitFieldModel<30,\
    \ 1> br14;\n      BitFieldModel<29, 1> br13;\n      BitFieldModel<28, 1> br12;\n\
    \      BitFieldModel<27, 1> br11;\n      BitFieldModel<26, 1> br10;\n      BitFieldModel<25,\
    \ 1> br9;\n      BitFieldModel<24, 1> br8;\n      BitFieldModel<23, 1> br7;\n\
    \      BitFieldModel<22, 1> br6;\n      BitFieldModel<21, 1> br5;\n      BitFieldModel<20,\
    \ 1> br4;\n      BitFieldModel<19, 1> br3;\n      BitFieldModel<18, 1> br2;\n\
    \      BitFieldModel<17, 1> br1;\n      BitFieldModel<16, 1> br0;\n      BitFieldModel<15,\
    \ 1> bs15;\n      BitFieldModel<14, 1> bs14;\n      BitFieldModel<13, 1> bs13;\n\
    \      BitFieldModel<12, 1> bs12;\n      BitFieldModel<11, 1> bs11;\n      BitFieldModel<10,\
    \ 1> bs10;\n      BitFieldModel<9, 1> bs9;\n      BitFieldModel<8, 1> bs8;\n \
    \     BitFieldModel<7, 1> bs7;\n      BitFieldModel<6, 1> bs6;\n      BitFieldModel<5,\
    \ 1> bs5;\n      BitFieldModel<4, 1> bs4;\n      BitFieldModel<3, 1> bs3;\n  \
    \    BitFieldModel<2, 1> bs2;\n      BitFieldModel<1, 1> bs1;\n      BitFieldModel<0,\
    \ 1> bs0;\n    };\n  };\n\npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LckrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lckk = FieldModel<address, 16, 1>;\n    using lck15\
    \ = FieldModel<address, 15, 1>;\n    using lck14 = FieldModel<address, 14, 1>;\n\
    \    using lck13 = FieldModel<address, 13, 1>;\n    using lck12 = FieldModel<address,\
    \ 12, 1>;\n    using lck11 = FieldModel<address, 11, 1>;\n    using lck10 = FieldModel<address,\
    \ 10, 1>;\n    using lck9 = FieldModel<address, 9, 1>;\n    using lck8 = FieldModel<address,\
    \ 8, 1>;\n    using lck7 = FieldModel<address, 7, 1>;\n    using lck6 = FieldModel<address,\
    \ 6, 1>;\n    using lck5 = FieldModel<address, 5, 1>;\n    using lck4 = FieldModel<address,\
    \ 4, 1>;\n    using lck3 = FieldModel<address, 3, 1>;\n    using lck2 = FieldModel<address,\
    \ 2, 1>;\n    using lck1 = FieldModel<address, 1, 1>;\n    using lck0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> lckk;\n      BitFieldModel<15, 1> lck15;\n      BitFieldModel<14, 1> lck14;\n\
    \      BitFieldModel<13, 1> lck13;\n      BitFieldModel<12, 1> lck12;\n      BitFieldModel<11,\
    \ 1> lck11;\n      BitFieldModel<10, 1> lck10;\n      BitFieldModel<9, 1> lck9;\n\
    \      BitFieldModel<8, 1> lck8;\n      BitFieldModel<7, 1> lck7;\n      BitFieldModel<6,\
    \ 1> lck6;\n      BitFieldModel<5, 1> lck5;\n      BitFieldModel<4, 1> lck4;\n\
    \      BitFieldModel<3, 1> lck3;\n      BitFieldModel<2, 1> lck2;\n      BitFieldModel<1,\
    \ 1> lck1;\n      BitFieldModel<0, 1> lck0;\n    };\n  };\n\npublic:\n  using\
    \ lckr = LckrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfrlReg : public RegisterModel<address>\n  {\n  public:\n    using afrl7\
    \ = FieldModel<address, 28, 4>;\n    using afrl6 = FieldModel<address, 24, 4>;\n\
    \    using afrl5 = FieldModel<address, 20, 4>;\n    using afrl4 = FieldModel<address,\
    \ 16, 4>;\n    using afrl3 = FieldModel<address, 12, 4>;\n    using afrl2 = FieldModel<address,\
    \ 8, 4>;\n    using afrl1 = FieldModel<address, 4, 4>;\n    using afrl0 = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 4> afrl7;\n      BitFieldModel<24, 4> afrl6;\n      BitFieldModel<20, 4> afrl5;\n\
    \      BitFieldModel<16, 4> afrl4;\n      BitFieldModel<12, 4> afrl3;\n      BitFieldModel<8,\
    \ 4> afrl2;\n      BitFieldModel<4, 4> afrl1;\n      BitFieldModel<0, 4> afrl0;\n\
    \    };\n  };\n\npublic:\n  using afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AfrhReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using afrh15 = FieldModel<address, 28, 4>;\n    using afrh14\
    \ = FieldModel<address, 24, 4>;\n    using afrh13 = FieldModel<address, 20, 4>;\n\
    \    using afrh12 = FieldModel<address, 16, 4>;\n    using afrh11 = FieldModel<address,\
    \ 12, 4>;\n    using afrh10 = FieldModel<address, 8, 4>;\n    using afrh9 = FieldModel<address,\
    \ 4, 4>;\n    using afrh8 = FieldModel<address, 0, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 4> afrh15;\n    \
    \  BitFieldModel<24, 4> afrh14;\n      BitFieldModel<20, 4> afrh13;\n      BitFieldModel<16,\
    \ 4> afrh12;\n      BitFieldModel<12, 4> afrh11;\n      BitFieldModel<8, 4> afrh10;\n\
    \      BitFieldModel<4, 4> afrh9;\n      BitFieldModel<0, 4> afrh8;\n    };\n\
    \  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_GPIOC_H */\n"
  name: GPIOC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOB_H\n#define DRAL_STM32F411_GPIOB_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpiob\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ModerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 2>;\n    using moder14\
    \ = FieldModel<address, 28, 2>;\n    using moder13 = FieldModel<address, 26, 2>;\n\
    \    using moder12 = FieldModel<address, 24, 2>;\n    using moder11 = FieldModel<address,\
    \ 22, 2>;\n    using moder10 = FieldModel<address, 20, 2>;\n    using moder9 =\
    \ FieldModel<address, 18, 2>;\n    using moder8 = FieldModel<address, 16, 2>;\n\
    \    using moder7 = FieldModel<address, 14, 2>;\n    using moder6 = FieldModel<address,\
    \ 12, 2>;\n    using moder5 = FieldModel<address, 10, 2>;\n    using moder4 =\
    \ FieldModel<address, 8, 2>;\n    using moder3 = FieldModel<address, 6, 2>;\n\
    \    using moder2 = FieldModel<address, 4, 2>;\n    using moder1 = FieldModel<address,\
    \ 2, 2>;\n    using moder0 = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<30, 2> moder15;\n   \
    \   BitFieldModel<28, 2> moder14;\n      BitFieldModel<26, 2> moder13;\n     \
    \ BitFieldModel<24, 2> moder12;\n      BitFieldModel<22, 2> moder11;\n      BitFieldModel<20,\
    \ 2> moder10;\n      BitFieldModel<18, 2> moder9;\n      BitFieldModel<16, 2>\
    \ moder8;\n      BitFieldModel<14, 2> moder7;\n      BitFieldModel<12, 2> moder6;\n\
    \      BitFieldModel<10, 2> moder5;\n      BitFieldModel<8, 2> moder4;\n     \
    \ BitFieldModel<6, 2> moder3;\n      BitFieldModel<4, 2> moder2;\n      BitFieldModel<2,\
    \ 2> moder1;\n      BitFieldModel<0, 2> moder0;\n    };\n  };\n\npublic:\n  using\
    \ moder = ModerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OtyperReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ot15 = FieldModel<address, 15, 1>;\n    using ot14 = FieldModel<address, 14,\
    \ 1>;\n    using ot13 = FieldModel<address, 13, 1>;\n    using ot12 = FieldModel<address,\
    \ 12, 1>;\n    using ot11 = FieldModel<address, 11, 1>;\n    using ot10 = FieldModel<address,\
    \ 10, 1>;\n    using ot9 = FieldModel<address, 9, 1>;\n    using ot8 = FieldModel<address,\
    \ 8, 1>;\n    using ot7 = FieldModel<address, 7, 1>;\n    using ot6 = FieldModel<address,\
    \ 6, 1>;\n    using ot5 = FieldModel<address, 5, 1>;\n    using ot4 = FieldModel<address,\
    \ 4, 1>;\n    using ot3 = FieldModel<address, 3, 1>;\n    using ot2 = FieldModel<address,\
    \ 2, 1>;\n    using ot1 = FieldModel<address, 1, 1>;\n    using ot0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> ot15;\n      BitFieldModel<14, 1> ot14;\n      BitFieldModel<13, 1> ot13;\n\
    \      BitFieldModel<12, 1> ot12;\n      BitFieldModel<11, 1> ot11;\n      BitFieldModel<10,\
    \ 1> ot10;\n      BitFieldModel<9, 1> ot9;\n      BitFieldModel<8, 1> ot8;\n \
    \     BitFieldModel<7, 1> ot7;\n      BitFieldModel<6, 1> ot6;\n      BitFieldModel<5,\
    \ 1> ot5;\n      BitFieldModel<4, 1> ot4;\n      BitFieldModel<3, 1> ot3;\n  \
    \    BitFieldModel<2, 1> ot2;\n      BitFieldModel<1, 1> ot1;\n      BitFieldModel<0,\
    \ 1> ot0;\n    };\n  };\n\npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OspeedrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ospeedr15 = FieldModel<address, 30, 2>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 2>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 2>;\n    using ospeedr12 = FieldModel<address, 24, 2>;\n    using ospeedr11\
    \ = FieldModel<address, 22, 2>;\n    using ospeedr10 = FieldModel<address, 20,\
    \ 2>;\n    using ospeedr9 = FieldModel<address, 18, 2>;\n    using ospeedr8 =\
    \ FieldModel<address, 16, 2>;\n    using ospeedr7 = FieldModel<address, 14, 2>;\n\
    \    using ospeedr6 = FieldModel<address, 12, 2>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 2>;\n    using ospeedr4 = FieldModel<address, 8, 2>;\n    using ospeedr3\
    \ = FieldModel<address, 6, 2>;\n    using ospeedr2 = FieldModel<address, 4, 2>;\n\
    \    using ospeedr1 = FieldModel<address, 2, 2>;\n    using ospeedr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> ospeedr15;\n      BitFieldModel<28, 2> ospeedr14;\n      BitFieldModel<26,\
    \ 2> ospeedr13;\n      BitFieldModel<24, 2> ospeedr12;\n      BitFieldModel<22,\
    \ 2> ospeedr11;\n      BitFieldModel<20, 2> ospeedr10;\n      BitFieldModel<18,\
    \ 2> ospeedr9;\n      BitFieldModel<16, 2> ospeedr8;\n      BitFieldModel<14,\
    \ 2> ospeedr7;\n      BitFieldModel<12, 2> ospeedr6;\n      BitFieldModel<10,\
    \ 2> ospeedr5;\n      BitFieldModel<8, 2> ospeedr4;\n      BitFieldModel<6, 2>\
    \ ospeedr3;\n      BitFieldModel<4, 2> ospeedr2;\n      BitFieldModel<2, 2> ospeedr1;\n\
    \      BitFieldModel<0, 2> ospeedr0;\n    };\n  };\n\npublic:\n  using ospeedr\
    \ = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PupdrReg : public RegisterModel<address>\n  {\n  public:\n    using pupdr15\
    \ = FieldModel<address, 30, 2>;\n    using pupdr14 = FieldModel<address, 28, 2>;\n\
    \    using pupdr13 = FieldModel<address, 26, 2>;\n    using pupdr12 = FieldModel<address,\
    \ 24, 2>;\n    using pupdr11 = FieldModel<address, 22, 2>;\n    using pupdr10\
    \ = FieldModel<address, 20, 2>;\n    using pupdr9 = FieldModel<address, 18, 2>;\n\
    \    using pupdr8 = FieldModel<address, 16, 2>;\n    using pupdr7 = FieldModel<address,\
    \ 14, 2>;\n    using pupdr6 = FieldModel<address, 12, 2>;\n    using pupdr5 =\
    \ FieldModel<address, 10, 2>;\n    using pupdr4 = FieldModel<address, 8, 2>;\n\
    \    using pupdr3 = FieldModel<address, 6, 2>;\n    using pupdr2 = FieldModel<address,\
    \ 4, 2>;\n    using pupdr1 = FieldModel<address, 2, 2>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> pupdr15;\n      BitFieldModel<28, 2> pupdr14;\n      BitFieldModel<26, 2>\
    \ pupdr13;\n      BitFieldModel<24, 2> pupdr12;\n      BitFieldModel<22, 2> pupdr11;\n\
    \      BitFieldModel<20, 2> pupdr10;\n      BitFieldModel<18, 2> pupdr9;\n   \
    \   BitFieldModel<16, 2> pupdr8;\n      BitFieldModel<14, 2> pupdr7;\n      BitFieldModel<12,\
    \ 2> pupdr6;\n      BitFieldModel<10, 2> pupdr5;\n      BitFieldModel<8, 2> pupdr4;\n\
    \      BitFieldModel<6, 2> pupdr3;\n      BitFieldModel<4, 2> pupdr2;\n      BitFieldModel<2,\
    \ 2> pupdr1;\n      BitFieldModel<0, 2> pupdr0;\n    };\n  };\n\npublic:\n  using\
    \ pupdr = PupdrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IdrReg : public RegisterModel<address>\n  {\n  public:\n    using idr15\
    \ = FieldModel<address, 15, 1>;\n    using idr14 = FieldModel<address, 14, 1>;\n\
    \    using idr13 = FieldModel<address, 13, 1>;\n    using idr12 = FieldModel<address,\
    \ 12, 1>;\n    using idr11 = FieldModel<address, 11, 1>;\n    using idr10 = FieldModel<address,\
    \ 10, 1>;\n    using idr9 = FieldModel<address, 9, 1>;\n    using idr8 = FieldModel<address,\
    \ 8, 1>;\n    using idr7 = FieldModel<address, 7, 1>;\n    using idr6 = FieldModel<address,\
    \ 6, 1>;\n    using idr5 = FieldModel<address, 5, 1>;\n    using idr4 = FieldModel<address,\
    \ 4, 1>;\n    using idr3 = FieldModel<address, 3, 1>;\n    using idr2 = FieldModel<address,\
    \ 2, 1>;\n    using idr1 = FieldModel<address, 1, 1>;\n    using idr0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> idr15;\n      BitFieldModel<14, 1> idr14;\n      BitFieldModel<13, 1> idr13;\n\
    \      BitFieldModel<12, 1> idr12;\n      BitFieldModel<11, 1> idr11;\n      BitFieldModel<10,\
    \ 1> idr10;\n      BitFieldModel<9, 1> idr9;\n      BitFieldModel<8, 1> idr8;\n\
    \      BitFieldModel<7, 1> idr7;\n      BitFieldModel<6, 1> idr6;\n      BitFieldModel<5,\
    \ 1> idr5;\n      BitFieldModel<4, 1> idr4;\n      BitFieldModel<3, 1> idr3;\n\
    \      BitFieldModel<2, 1> idr2;\n      BitFieldModel<1, 1> idr1;\n      BitFieldModel<0,\
    \ 1> idr0;\n    };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using odr15 = FieldModel<address, 15, 1>;\n    using odr14\
    \ = FieldModel<address, 14, 1>;\n    using odr13 = FieldModel<address, 13, 1>;\n\
    \    using odr12 = FieldModel<address, 12, 1>;\n    using odr11 = FieldModel<address,\
    \ 11, 1>;\n    using odr10 = FieldModel<address, 10, 1>;\n    using odr9 = FieldModel<address,\
    \ 9, 1>;\n    using odr8 = FieldModel<address, 8, 1>;\n    using odr7 = FieldModel<address,\
    \ 7, 1>;\n    using odr6 = FieldModel<address, 6, 1>;\n    using odr5 = FieldModel<address,\
    \ 5, 1>;\n    using odr4 = FieldModel<address, 4, 1>;\n    using odr3 = FieldModel<address,\
    \ 3, 1>;\n    using odr2 = FieldModel<address, 2, 1>;\n    using odr1 = FieldModel<address,\
    \ 1, 1>;\n    using odr0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> odr15;\n     \
    \ BitFieldModel<14, 1> odr14;\n      BitFieldModel<13, 1> odr13;\n      BitFieldModel<12,\
    \ 1> odr12;\n      BitFieldModel<11, 1> odr11;\n      BitFieldModel<10, 1> odr10;\n\
    \      BitFieldModel<9, 1> odr9;\n      BitFieldModel<8, 1> odr8;\n      BitFieldModel<7,\
    \ 1> odr7;\n      BitFieldModel<6, 1> odr6;\n      BitFieldModel<5, 1> odr5;\n\
    \      BitFieldModel<4, 1> odr4;\n      BitFieldModel<3, 1> odr3;\n      BitFieldModel<2,\
    \ 1> odr2;\n      BitFieldModel<1, 1> odr1;\n      BitFieldModel<0, 1> odr0;\n\
    \    };\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class BsrrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using br15 = FieldModel<address, 31, 1>;\n    using br14\
    \ = FieldModel<address, 30, 1>;\n    using br13 = FieldModel<address, 29, 1>;\n\
    \    using br12 = FieldModel<address, 28, 1>;\n    using br11 = FieldModel<address,\
    \ 27, 1>;\n    using br10 = FieldModel<address, 26, 1>;\n    using br9 = FieldModel<address,\
    \ 25, 1>;\n    using br8 = FieldModel<address, 24, 1>;\n    using br7 = FieldModel<address,\
    \ 23, 1>;\n    using br6 = FieldModel<address, 22, 1>;\n    using br5 = FieldModel<address,\
    \ 21, 1>;\n    using br4 = FieldModel<address, 20, 1>;\n    using br3 = FieldModel<address,\
    \ 19, 1>;\n    using br2 = FieldModel<address, 18, 1>;\n    using br1 = FieldModel<address,\
    \ 17, 1>;\n    using br0 = FieldModel<address, 16, 1>;\n    using bs15 = FieldModel<address,\
    \ 15, 1>;\n    using bs14 = FieldModel<address, 14, 1>;\n    using bs13 = FieldModel<address,\
    \ 13, 1>;\n    using bs12 = FieldModel<address, 12, 1>;\n    using bs11 = FieldModel<address,\
    \ 11, 1>;\n    using bs10 = FieldModel<address, 10, 1>;\n    using bs9 = FieldModel<address,\
    \ 9, 1>;\n    using bs8 = FieldModel<address, 8, 1>;\n    using bs7 = FieldModel<address,\
    \ 7, 1>;\n    using bs6 = FieldModel<address, 6, 1>;\n    using bs5 = FieldModel<address,\
    \ 5, 1>;\n    using bs4 = FieldModel<address, 4, 1>;\n    using bs3 = FieldModel<address,\
    \ 3, 1>;\n    using bs2 = FieldModel<address, 2, 1>;\n    using bs1 = FieldModel<address,\
    \ 1, 1>;\n    using bs0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> br15;\n      BitFieldModel<30,\
    \ 1> br14;\n      BitFieldModel<29, 1> br13;\n      BitFieldModel<28, 1> br12;\n\
    \      BitFieldModel<27, 1> br11;\n      BitFieldModel<26, 1> br10;\n      BitFieldModel<25,\
    \ 1> br9;\n      BitFieldModel<24, 1> br8;\n      BitFieldModel<23, 1> br7;\n\
    \      BitFieldModel<22, 1> br6;\n      BitFieldModel<21, 1> br5;\n      BitFieldModel<20,\
    \ 1> br4;\n      BitFieldModel<19, 1> br3;\n      BitFieldModel<18, 1> br2;\n\
    \      BitFieldModel<17, 1> br1;\n      BitFieldModel<16, 1> br0;\n      BitFieldModel<15,\
    \ 1> bs15;\n      BitFieldModel<14, 1> bs14;\n      BitFieldModel<13, 1> bs13;\n\
    \      BitFieldModel<12, 1> bs12;\n      BitFieldModel<11, 1> bs11;\n      BitFieldModel<10,\
    \ 1> bs10;\n      BitFieldModel<9, 1> bs9;\n      BitFieldModel<8, 1> bs8;\n \
    \     BitFieldModel<7, 1> bs7;\n      BitFieldModel<6, 1> bs6;\n      BitFieldModel<5,\
    \ 1> bs5;\n      BitFieldModel<4, 1> bs4;\n      BitFieldModel<3, 1> bs3;\n  \
    \    BitFieldModel<2, 1> bs2;\n      BitFieldModel<1, 1> bs1;\n      BitFieldModel<0,\
    \ 1> bs0;\n    };\n  };\n\npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LckrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lckk = FieldModel<address, 16, 1>;\n    using lck15\
    \ = FieldModel<address, 15, 1>;\n    using lck14 = FieldModel<address, 14, 1>;\n\
    \    using lck13 = FieldModel<address, 13, 1>;\n    using lck12 = FieldModel<address,\
    \ 12, 1>;\n    using lck11 = FieldModel<address, 11, 1>;\n    using lck10 = FieldModel<address,\
    \ 10, 1>;\n    using lck9 = FieldModel<address, 9, 1>;\n    using lck8 = FieldModel<address,\
    \ 8, 1>;\n    using lck7 = FieldModel<address, 7, 1>;\n    using lck6 = FieldModel<address,\
    \ 6, 1>;\n    using lck5 = FieldModel<address, 5, 1>;\n    using lck4 = FieldModel<address,\
    \ 4, 1>;\n    using lck3 = FieldModel<address, 3, 1>;\n    using lck2 = FieldModel<address,\
    \ 2, 1>;\n    using lck1 = FieldModel<address, 1, 1>;\n    using lck0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> lckk;\n      BitFieldModel<15, 1> lck15;\n      BitFieldModel<14, 1> lck14;\n\
    \      BitFieldModel<13, 1> lck13;\n      BitFieldModel<12, 1> lck12;\n      BitFieldModel<11,\
    \ 1> lck11;\n      BitFieldModel<10, 1> lck10;\n      BitFieldModel<9, 1> lck9;\n\
    \      BitFieldModel<8, 1> lck8;\n      BitFieldModel<7, 1> lck7;\n      BitFieldModel<6,\
    \ 1> lck6;\n      BitFieldModel<5, 1> lck5;\n      BitFieldModel<4, 1> lck4;\n\
    \      BitFieldModel<3, 1> lck3;\n      BitFieldModel<2, 1> lck2;\n      BitFieldModel<1,\
    \ 1> lck1;\n      BitFieldModel<0, 1> lck0;\n    };\n  };\n\npublic:\n  using\
    \ lckr = LckrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfrlReg : public RegisterModel<address>\n  {\n  public:\n    using afrl7\
    \ = FieldModel<address, 28, 4>;\n    using afrl6 = FieldModel<address, 24, 4>;\n\
    \    using afrl5 = FieldModel<address, 20, 4>;\n    using afrl4 = FieldModel<address,\
    \ 16, 4>;\n    using afrl3 = FieldModel<address, 12, 4>;\n    using afrl2 = FieldModel<address,\
    \ 8, 4>;\n    using afrl1 = FieldModel<address, 4, 4>;\n    using afrl0 = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 4> afrl7;\n      BitFieldModel<24, 4> afrl6;\n      BitFieldModel<20, 4> afrl5;\n\
    \      BitFieldModel<16, 4> afrl4;\n      BitFieldModel<12, 4> afrl3;\n      BitFieldModel<8,\
    \ 4> afrl2;\n      BitFieldModel<4, 4> afrl1;\n      BitFieldModel<0, 4> afrl0;\n\
    \    };\n  };\n\npublic:\n  using afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AfrhReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using afrh15 = FieldModel<address, 28, 4>;\n    using afrh14\
    \ = FieldModel<address, 24, 4>;\n    using afrh13 = FieldModel<address, 20, 4>;\n\
    \    using afrh12 = FieldModel<address, 16, 4>;\n    using afrh11 = FieldModel<address,\
    \ 12, 4>;\n    using afrh10 = FieldModel<address, 8, 4>;\n    using afrh9 = FieldModel<address,\
    \ 4, 4>;\n    using afrh8 = FieldModel<address, 0, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 4> afrh15;\n    \
    \  BitFieldModel<24, 4> afrh14;\n      BitFieldModel<20, 4> afrh13;\n      BitFieldModel<16,\
    \ 4> afrh12;\n      BitFieldModel<12, 4> afrh11;\n      BitFieldModel<8, 4> afrh10;\n\
    \      BitFieldModel<4, 4> afrh9;\n      BitFieldModel<0, 4> afrh8;\n    };\n\
    \  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_GPIOB_H */\n"
  name: GPIOB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOA_H\n#define DRAL_STM32F411_GPIOA_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioa\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ModerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 2>;\n    using moder14\
    \ = FieldModel<address, 28, 2>;\n    using moder13 = FieldModel<address, 26, 2>;\n\
    \    using moder12 = FieldModel<address, 24, 2>;\n    using moder11 = FieldModel<address,\
    \ 22, 2>;\n    using moder10 = FieldModel<address, 20, 2>;\n    using moder9 =\
    \ FieldModel<address, 18, 2>;\n    using moder8 = FieldModel<address, 16, 2>;\n\
    \    using moder7 = FieldModel<address, 14, 2>;\n    using moder6 = FieldModel<address,\
    \ 12, 2>;\n    using moder5 = FieldModel<address, 10, 2>;\n    using moder4 =\
    \ FieldModel<address, 8, 2>;\n    using moder3 = FieldModel<address, 6, 2>;\n\
    \    using moder2 = FieldModel<address, 4, 2>;\n    using moder1 = FieldModel<address,\
    \ 2, 2>;\n    using moder0 = FieldModel<address, 0, 2>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<30, 2> moder15;\n   \
    \   BitFieldModel<28, 2> moder14;\n      BitFieldModel<26, 2> moder13;\n     \
    \ BitFieldModel<24, 2> moder12;\n      BitFieldModel<22, 2> moder11;\n      BitFieldModel<20,\
    \ 2> moder10;\n      BitFieldModel<18, 2> moder9;\n      BitFieldModel<16, 2>\
    \ moder8;\n      BitFieldModel<14, 2> moder7;\n      BitFieldModel<12, 2> moder6;\n\
    \      BitFieldModel<10, 2> moder5;\n      BitFieldModel<8, 2> moder4;\n     \
    \ BitFieldModel<6, 2> moder3;\n      BitFieldModel<4, 2> moder2;\n      BitFieldModel<2,\
    \ 2> moder1;\n      BitFieldModel<0, 2> moder0;\n    };\n  };\n\npublic:\n  using\
    \ moder = ModerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class OtyperReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ ot15 = FieldModel<address, 15, 1>;\n    using ot14 = FieldModel<address, 14,\
    \ 1>;\n    using ot13 = FieldModel<address, 13, 1>;\n    using ot12 = FieldModel<address,\
    \ 12, 1>;\n    using ot11 = FieldModel<address, 11, 1>;\n    using ot10 = FieldModel<address,\
    \ 10, 1>;\n    using ot9 = FieldModel<address, 9, 1>;\n    using ot8 = FieldModel<address,\
    \ 8, 1>;\n    using ot7 = FieldModel<address, 7, 1>;\n    using ot6 = FieldModel<address,\
    \ 6, 1>;\n    using ot5 = FieldModel<address, 5, 1>;\n    using ot4 = FieldModel<address,\
    \ 4, 1>;\n    using ot3 = FieldModel<address, 3, 1>;\n    using ot2 = FieldModel<address,\
    \ 2, 1>;\n    using ot1 = FieldModel<address, 1, 1>;\n    using ot0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> ot15;\n      BitFieldModel<14, 1> ot14;\n      BitFieldModel<13, 1> ot13;\n\
    \      BitFieldModel<12, 1> ot12;\n      BitFieldModel<11, 1> ot11;\n      BitFieldModel<10,\
    \ 1> ot10;\n      BitFieldModel<9, 1> ot9;\n      BitFieldModel<8, 1> ot8;\n \
    \     BitFieldModel<7, 1> ot7;\n      BitFieldModel<6, 1> ot6;\n      BitFieldModel<5,\
    \ 1> ot5;\n      BitFieldModel<4, 1> ot4;\n      BitFieldModel<3, 1> ot3;\n  \
    \    BitFieldModel<2, 1> ot2;\n      BitFieldModel<1, 1> ot1;\n      BitFieldModel<0,\
    \ 1> ot0;\n    };\n  };\n\npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OspeedrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ospeedr15 = FieldModel<address, 30, 2>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 2>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 2>;\n    using ospeedr12 = FieldModel<address, 24, 2>;\n    using ospeedr11\
    \ = FieldModel<address, 22, 2>;\n    using ospeedr10 = FieldModel<address, 20,\
    \ 2>;\n    using ospeedr9 = FieldModel<address, 18, 2>;\n    using ospeedr8 =\
    \ FieldModel<address, 16, 2>;\n    using ospeedr7 = FieldModel<address, 14, 2>;\n\
    \    using ospeedr6 = FieldModel<address, 12, 2>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 2>;\n    using ospeedr4 = FieldModel<address, 8, 2>;\n    using ospeedr3\
    \ = FieldModel<address, 6, 2>;\n    using ospeedr2 = FieldModel<address, 4, 2>;\n\
    \    using ospeedr1 = FieldModel<address, 2, 2>;\n    using ospeedr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> ospeedr15;\n      BitFieldModel<28, 2> ospeedr14;\n      BitFieldModel<26,\
    \ 2> ospeedr13;\n      BitFieldModel<24, 2> ospeedr12;\n      BitFieldModel<22,\
    \ 2> ospeedr11;\n      BitFieldModel<20, 2> ospeedr10;\n      BitFieldModel<18,\
    \ 2> ospeedr9;\n      BitFieldModel<16, 2> ospeedr8;\n      BitFieldModel<14,\
    \ 2> ospeedr7;\n      BitFieldModel<12, 2> ospeedr6;\n      BitFieldModel<10,\
    \ 2> ospeedr5;\n      BitFieldModel<8, 2> ospeedr4;\n      BitFieldModel<6, 2>\
    \ ospeedr3;\n      BitFieldModel<4, 2> ospeedr2;\n      BitFieldModel<2, 2> ospeedr1;\n\
    \      BitFieldModel<0, 2> ospeedr0;\n    };\n  };\n\npublic:\n  using ospeedr\
    \ = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class PupdrReg : public RegisterModel<address>\n  {\n  public:\n    using pupdr15\
    \ = FieldModel<address, 30, 2>;\n    using pupdr14 = FieldModel<address, 28, 2>;\n\
    \    using pupdr13 = FieldModel<address, 26, 2>;\n    using pupdr12 = FieldModel<address,\
    \ 24, 2>;\n    using pupdr11 = FieldModel<address, 22, 2>;\n    using pupdr10\
    \ = FieldModel<address, 20, 2>;\n    using pupdr9 = FieldModel<address, 18, 2>;\n\
    \    using pupdr8 = FieldModel<address, 16, 2>;\n    using pupdr7 = FieldModel<address,\
    \ 14, 2>;\n    using pupdr6 = FieldModel<address, 12, 2>;\n    using pupdr5 =\
    \ FieldModel<address, 10, 2>;\n    using pupdr4 = FieldModel<address, 8, 2>;\n\
    \    using pupdr3 = FieldModel<address, 6, 2>;\n    using pupdr2 = FieldModel<address,\
    \ 4, 2>;\n    using pupdr1 = FieldModel<address, 2, 2>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 2>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<30,\
    \ 2> pupdr15;\n      BitFieldModel<28, 2> pupdr14;\n      BitFieldModel<26, 2>\
    \ pupdr13;\n      BitFieldModel<24, 2> pupdr12;\n      BitFieldModel<22, 2> pupdr11;\n\
    \      BitFieldModel<20, 2> pupdr10;\n      BitFieldModel<18, 2> pupdr9;\n   \
    \   BitFieldModel<16, 2> pupdr8;\n      BitFieldModel<14, 2> pupdr7;\n      BitFieldModel<12,\
    \ 2> pupdr6;\n      BitFieldModel<10, 2> pupdr5;\n      BitFieldModel<8, 2> pupdr4;\n\
    \      BitFieldModel<6, 2> pupdr3;\n      BitFieldModel<4, 2> pupdr2;\n      BitFieldModel<2,\
    \ 2> pupdr1;\n      BitFieldModel<0, 2> pupdr0;\n    };\n  };\n\npublic:\n  using\
    \ pupdr = PupdrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IdrReg : public RegisterModel<address>\n  {\n  public:\n    using idr15\
    \ = FieldModel<address, 15, 1>;\n    using idr14 = FieldModel<address, 14, 1>;\n\
    \    using idr13 = FieldModel<address, 13, 1>;\n    using idr12 = FieldModel<address,\
    \ 12, 1>;\n    using idr11 = FieldModel<address, 11, 1>;\n    using idr10 = FieldModel<address,\
    \ 10, 1>;\n    using idr9 = FieldModel<address, 9, 1>;\n    using idr8 = FieldModel<address,\
    \ 8, 1>;\n    using idr7 = FieldModel<address, 7, 1>;\n    using idr6 = FieldModel<address,\
    \ 6, 1>;\n    using idr5 = FieldModel<address, 5, 1>;\n    using idr4 = FieldModel<address,\
    \ 4, 1>;\n    using idr3 = FieldModel<address, 3, 1>;\n    using idr2 = FieldModel<address,\
    \ 2, 1>;\n    using idr1 = FieldModel<address, 1, 1>;\n    using idr0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> idr15;\n      BitFieldModel<14, 1> idr14;\n      BitFieldModel<13, 1> idr13;\n\
    \      BitFieldModel<12, 1> idr12;\n      BitFieldModel<11, 1> idr11;\n      BitFieldModel<10,\
    \ 1> idr10;\n      BitFieldModel<9, 1> idr9;\n      BitFieldModel<8, 1> idr8;\n\
    \      BitFieldModel<7, 1> idr7;\n      BitFieldModel<6, 1> idr6;\n      BitFieldModel<5,\
    \ 1> idr5;\n      BitFieldModel<4, 1> idr4;\n      BitFieldModel<3, 1> idr3;\n\
    \      BitFieldModel<2, 1> idr2;\n      BitFieldModel<1, 1> idr1;\n      BitFieldModel<0,\
    \ 1> idr0;\n    };\n  };\n\npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template<uint32_t address>\n  class OdrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using odr15 = FieldModel<address, 15, 1>;\n    using odr14\
    \ = FieldModel<address, 14, 1>;\n    using odr13 = FieldModel<address, 13, 1>;\n\
    \    using odr12 = FieldModel<address, 12, 1>;\n    using odr11 = FieldModel<address,\
    \ 11, 1>;\n    using odr10 = FieldModel<address, 10, 1>;\n    using odr9 = FieldModel<address,\
    \ 9, 1>;\n    using odr8 = FieldModel<address, 8, 1>;\n    using odr7 = FieldModel<address,\
    \ 7, 1>;\n    using odr6 = FieldModel<address, 6, 1>;\n    using odr5 = FieldModel<address,\
    \ 5, 1>;\n    using odr4 = FieldModel<address, 4, 1>;\n    using odr3 = FieldModel<address,\
    \ 3, 1>;\n    using odr2 = FieldModel<address, 2, 1>;\n    using odr1 = FieldModel<address,\
    \ 1, 1>;\n    using odr0 = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> odr15;\n     \
    \ BitFieldModel<14, 1> odr14;\n      BitFieldModel<13, 1> odr13;\n      BitFieldModel<12,\
    \ 1> odr12;\n      BitFieldModel<11, 1> odr11;\n      BitFieldModel<10, 1> odr10;\n\
    \      BitFieldModel<9, 1> odr9;\n      BitFieldModel<8, 1> odr8;\n      BitFieldModel<7,\
    \ 1> odr7;\n      BitFieldModel<6, 1> odr6;\n      BitFieldModel<5, 1> odr5;\n\
    \      BitFieldModel<4, 1> odr4;\n      BitFieldModel<3, 1> odr3;\n      BitFieldModel<2,\
    \ 1> odr2;\n      BitFieldModel<1, 1> odr1;\n      BitFieldModel<0, 1> odr0;\n\
    \    };\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress + 0x0014>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class BsrrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using br15 = FieldModel<address, 31, 1>;\n    using br14\
    \ = FieldModel<address, 30, 1>;\n    using br13 = FieldModel<address, 29, 1>;\n\
    \    using br12 = FieldModel<address, 28, 1>;\n    using br11 = FieldModel<address,\
    \ 27, 1>;\n    using br10 = FieldModel<address, 26, 1>;\n    using br9 = FieldModel<address,\
    \ 25, 1>;\n    using br8 = FieldModel<address, 24, 1>;\n    using br7 = FieldModel<address,\
    \ 23, 1>;\n    using br6 = FieldModel<address, 22, 1>;\n    using br5 = FieldModel<address,\
    \ 21, 1>;\n    using br4 = FieldModel<address, 20, 1>;\n    using br3 = FieldModel<address,\
    \ 19, 1>;\n    using br2 = FieldModel<address, 18, 1>;\n    using br1 = FieldModel<address,\
    \ 17, 1>;\n    using br0 = FieldModel<address, 16, 1>;\n    using bs15 = FieldModel<address,\
    \ 15, 1>;\n    using bs14 = FieldModel<address, 14, 1>;\n    using bs13 = FieldModel<address,\
    \ 13, 1>;\n    using bs12 = FieldModel<address, 12, 1>;\n    using bs11 = FieldModel<address,\
    \ 11, 1>;\n    using bs10 = FieldModel<address, 10, 1>;\n    using bs9 = FieldModel<address,\
    \ 9, 1>;\n    using bs8 = FieldModel<address, 8, 1>;\n    using bs7 = FieldModel<address,\
    \ 7, 1>;\n    using bs6 = FieldModel<address, 6, 1>;\n    using bs5 = FieldModel<address,\
    \ 5, 1>;\n    using bs4 = FieldModel<address, 4, 1>;\n    using bs3 = FieldModel<address,\
    \ 3, 1>;\n    using bs2 = FieldModel<address, 2, 1>;\n    using bs1 = FieldModel<address,\
    \ 1, 1>;\n    using bs0 = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<31, 1> br15;\n      BitFieldModel<30,\
    \ 1> br14;\n      BitFieldModel<29, 1> br13;\n      BitFieldModel<28, 1> br12;\n\
    \      BitFieldModel<27, 1> br11;\n      BitFieldModel<26, 1> br10;\n      BitFieldModel<25,\
    \ 1> br9;\n      BitFieldModel<24, 1> br8;\n      BitFieldModel<23, 1> br7;\n\
    \      BitFieldModel<22, 1> br6;\n      BitFieldModel<21, 1> br5;\n      BitFieldModel<20,\
    \ 1> br4;\n      BitFieldModel<19, 1> br3;\n      BitFieldModel<18, 1> br2;\n\
    \      BitFieldModel<17, 1> br1;\n      BitFieldModel<16, 1> br0;\n      BitFieldModel<15,\
    \ 1> bs15;\n      BitFieldModel<14, 1> bs14;\n      BitFieldModel<13, 1> bs13;\n\
    \      BitFieldModel<12, 1> bs12;\n      BitFieldModel<11, 1> bs11;\n      BitFieldModel<10,\
    \ 1> bs10;\n      BitFieldModel<9, 1> bs9;\n      BitFieldModel<8, 1> bs8;\n \
    \     BitFieldModel<7, 1> bs7;\n      BitFieldModel<6, 1> bs6;\n      BitFieldModel<5,\
    \ 1> bs5;\n      BitFieldModel<4, 1> bs4;\n      BitFieldModel<3, 1> bs3;\n  \
    \    BitFieldModel<2, 1> bs2;\n      BitFieldModel<1, 1> bs1;\n      BitFieldModel<0,\
    \ 1> bs0;\n    };\n  };\n\npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LckrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lckk = FieldModel<address, 16, 1>;\n    using lck15\
    \ = FieldModel<address, 15, 1>;\n    using lck14 = FieldModel<address, 14, 1>;\n\
    \    using lck13 = FieldModel<address, 13, 1>;\n    using lck12 = FieldModel<address,\
    \ 12, 1>;\n    using lck11 = FieldModel<address, 11, 1>;\n    using lck10 = FieldModel<address,\
    \ 10, 1>;\n    using lck9 = FieldModel<address, 9, 1>;\n    using lck8 = FieldModel<address,\
    \ 8, 1>;\n    using lck7 = FieldModel<address, 7, 1>;\n    using lck6 = FieldModel<address,\
    \ 6, 1>;\n    using lck5 = FieldModel<address, 5, 1>;\n    using lck4 = FieldModel<address,\
    \ 4, 1>;\n    using lck3 = FieldModel<address, 3, 1>;\n    using lck2 = FieldModel<address,\
    \ 2, 1>;\n    using lck1 = FieldModel<address, 1, 1>;\n    using lck0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 1> lckk;\n      BitFieldModel<15, 1> lck15;\n      BitFieldModel<14, 1> lck14;\n\
    \      BitFieldModel<13, 1> lck13;\n      BitFieldModel<12, 1> lck12;\n      BitFieldModel<11,\
    \ 1> lck11;\n      BitFieldModel<10, 1> lck10;\n      BitFieldModel<9, 1> lck9;\n\
    \      BitFieldModel<8, 1> lck8;\n      BitFieldModel<7, 1> lck7;\n      BitFieldModel<6,\
    \ 1> lck6;\n      BitFieldModel<5, 1> lck5;\n      BitFieldModel<4, 1> lck4;\n\
    \      BitFieldModel<3, 1> lck3;\n      BitFieldModel<2, 1> lck2;\n      BitFieldModel<1,\
    \ 1> lck1;\n      BitFieldModel<0, 1> lck0;\n    };\n  };\n\npublic:\n  using\
    \ lckr = LckrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfrlReg : public RegisterModel<address>\n  {\n  public:\n    using afrl7\
    \ = FieldModel<address, 28, 4>;\n    using afrl6 = FieldModel<address, 24, 4>;\n\
    \    using afrl5 = FieldModel<address, 20, 4>;\n    using afrl4 = FieldModel<address,\
    \ 16, 4>;\n    using afrl3 = FieldModel<address, 12, 4>;\n    using afrl2 = FieldModel<address,\
    \ 8, 4>;\n    using afrl1 = FieldModel<address, 4, 4>;\n    using afrl0 = FieldModel<address,\
    \ 0, 4>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<28,\
    \ 4> afrl7;\n      BitFieldModel<24, 4> afrl6;\n      BitFieldModel<20, 4> afrl5;\n\
    \      BitFieldModel<16, 4> afrl4;\n      BitFieldModel<12, 4> afrl3;\n      BitFieldModel<8,\
    \ 4> afrl2;\n      BitFieldModel<4, 4> afrl1;\n      BitFieldModel<0, 4> afrl0;\n\
    \    };\n  };\n\npublic:\n  using afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AfrhReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using afrh15 = FieldModel<address, 28, 4>;\n    using afrh14\
    \ = FieldModel<address, 24, 4>;\n    using afrh13 = FieldModel<address, 20, 4>;\n\
    \    using afrh12 = FieldModel<address, 16, 4>;\n    using afrh11 = FieldModel<address,\
    \ 12, 4>;\n    using afrh10 = FieldModel<address, 8, 4>;\n    using afrh9 = FieldModel<address,\
    \ 4, 4>;\n    using afrh8 = FieldModel<address, 0, 4>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<28, 4> afrh15;\n    \
    \  BitFieldModel<24, 4> afrh14;\n      BitFieldModel<20, 4> afrh13;\n      BitFieldModel<16,\
    \ 4> afrh12;\n      BitFieldModel<12, 4> afrh11;\n      BitFieldModel<8, 4> afrh10;\n\
    \      BitFieldModel<4, 4> afrh9;\n      BitFieldModel<0, 4> afrh8;\n    };\n\
    \  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_GPIOA_H */\n"
  name: GPIOA
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C3_H\n#define DRAL_STM32F411_I2C3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2c3\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40005C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using swrst = FieldModel<address, 15, 1>;\n    using alert\
    \ = FieldModel<address, 13, 1>;\n    using pec = FieldModel<address, 12, 1>;\n\
    \    using pos = FieldModel<address, 11, 1>;\n    using ack = FieldModel<address,\
    \ 10, 1>;\n    using stop = FieldModel<address, 9, 1>;\n    using start = FieldModel<address,\
    \ 8, 1>;\n    using nostretch = FieldModel<address, 7, 1>;\n    using engc = FieldModel<address,\
    \ 6, 1>;\n    using enpec = FieldModel<address, 5, 1>;\n    using enarp = FieldModel<address,\
    \ 4, 1>;\n    using smbtype = FieldModel<address, 3, 1>;\n    using smbus = FieldModel<address,\
    \ 1, 1>;\n    using pe = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> swrst;\n      BitFieldModel<13,\
    \ 1> alert;\n      BitFieldModel<12, 1> pec;\n      BitFieldModel<11, 1> pos;\n\
    \      BitFieldModel<10, 1> ack;\n      BitFieldModel<9, 1> stop;\n      BitFieldModel<8,\
    \ 1> start;\n      BitFieldModel<7, 1> nostretch;\n      BitFieldModel<6, 1> engc;\n\
    \      BitFieldModel<5, 1> enpec;\n      BitFieldModel<4, 1> enarp;\n      BitFieldModel<3,\
    \ 1> smbtype;\n      BitFieldModel<1, 1> smbus;\n      BitFieldModel<0, 1> pe;\n\
    \    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using last = FieldModel<address, 12, 1>;\n    using dmaen\
    \ = FieldModel<address, 11, 1>;\n    using itbufen = FieldModel<address, 10, 1>;\n\
    \    using itevten = FieldModel<address, 9, 1>;\n    using iterren = FieldModel<address,\
    \ 8, 1>;\n    using freq = FieldModel<address, 0, 6>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 1> last;\n      BitFieldModel<11,\
    \ 1> dmaen;\n      BitFieldModel<10, 1> itbufen;\n      BitFieldModel<9, 1> itevten;\n\
    \      BitFieldModel<8, 1> iterren;\n      BitFieldModel<0, 6> freq;\n    };\n\
    \  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Oar1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using addmode = FieldModel<address, 15, 1>;\n    using add10 = FieldModel<address,\
    \ 8, 2>;\n    using add7 = FieldModel<address, 1, 7>;\n    using add0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> addmode;\n      BitFieldModel<8, 2> add10;\n      BitFieldModel<1, 7> add7;\n\
    \      BitFieldModel<0, 1> add0;\n    };\n  };\n\npublic:\n  using oar1 = Oar1Reg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class Oar2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using add2 = FieldModel<address,\
    \ 1, 7>;\n    using endual = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<1, 7> add2;\n      BitFieldModel<0,\
    \ 1> endual;\n    };\n  };\n\npublic:\n  using oar2 = Oar2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 8>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 8> dr;\n    };\n \
    \ };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Sr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using smbalert = FieldModel<address, 15, 1>;\n    using timeout = FieldModel<address,\
    \ 14, 1>;\n    using pecerr = FieldModel<address, 12, 1>;\n    using ovr = FieldModel<address,\
    \ 11, 1>;\n    using af = FieldModel<address, 10, 1>;\n    using arlo = FieldModel<address,\
    \ 9, 1>;\n    using berr = FieldModel<address, 8, 1>;\n    using txe = FieldModel<address,\
    \ 7, 1>;\n    using rxne = FieldModel<address, 6, 1>;\n    using stopf = FieldModel<address,\
    \ 4, 1>;\n    using add10 = FieldModel<address, 3, 1>;\n    using btf = FieldModel<address,\
    \ 2, 1>;\n    using addr = FieldModel<address, 1, 1>;\n    using sb = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> smbalert;\n      BitFieldModel<14, 1> timeout;\n      BitFieldModel<12, 1>\
    \ pecerr;\n      BitFieldModel<11, 1> ovr;\n      BitFieldModel<10, 1> af;\n \
    \     BitFieldModel<9, 1> arlo;\n      BitFieldModel<8, 1> berr;\n      BitFieldModel<7,\
    \ 1> txe;\n      BitFieldModel<6, 1> rxne;\n      BitFieldModel<4, 1> stopf;\n\
    \      BitFieldModel<3, 1> add10;\n      BitFieldModel<2, 1> btf;\n      BitFieldModel<1,\
    \ 1> addr;\n      BitFieldModel<0, 1> sb;\n    };\n  };\n\npublic:\n  using sr1\
    \ = Sr1Reg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Sr2Reg : public RegisterModel<address>\n  {\n  public:\n    using pec\
    \ = FieldModel<address, 8, 8>;\n    using dualf = FieldModel<address, 7, 1>;\n\
    \    using smbhost = FieldModel<address, 6, 1>;\n    using smbdefault = FieldModel<address,\
    \ 5, 1>;\n    using gencall = FieldModel<address, 4, 1>;\n    using tra = FieldModel<address,\
    \ 2, 1>;\n    using busy = FieldModel<address, 1, 1>;\n    using msl = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 8> pec;\n      BitFieldModel<7, 1> dualf;\n      BitFieldModel<6, 1> smbhost;\n\
    \      BitFieldModel<5, 1> smbdefault;\n      BitFieldModel<4, 1> gencall;\n \
    \     BitFieldModel<2, 1> tra;\n      BitFieldModel<1, 1> busy;\n      BitFieldModel<0,\
    \ 1> msl;\n    };\n  };\n\npublic:\n  using sr2 = Sr2Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using f_s = FieldModel<address, 15, 1>;\n    using duty =\
    \ FieldModel<address, 14, 1>;\n    using ccr = FieldModel<address, 0, 12>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> f_s;\n      BitFieldModel<14, 1> duty;\n      BitFieldModel<0, 12> ccr;\n\
    \    };\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class TriseReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using trise = FieldModel<address, 0, 6>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 6> trise;\n\
    \    };\n  };\n\npublic:\n  using trise = TriseReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_I2C3_H */\n"
  name: I2C3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C2_H\n#define DRAL_STM32F411_I2C2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2c2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40005800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using swrst = FieldModel<address, 15, 1>;\n    using alert\
    \ = FieldModel<address, 13, 1>;\n    using pec = FieldModel<address, 12, 1>;\n\
    \    using pos = FieldModel<address, 11, 1>;\n    using ack = FieldModel<address,\
    \ 10, 1>;\n    using stop = FieldModel<address, 9, 1>;\n    using start = FieldModel<address,\
    \ 8, 1>;\n    using nostretch = FieldModel<address, 7, 1>;\n    using engc = FieldModel<address,\
    \ 6, 1>;\n    using enpec = FieldModel<address, 5, 1>;\n    using enarp = FieldModel<address,\
    \ 4, 1>;\n    using smbtype = FieldModel<address, 3, 1>;\n    using smbus = FieldModel<address,\
    \ 1, 1>;\n    using pe = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> swrst;\n      BitFieldModel<13,\
    \ 1> alert;\n      BitFieldModel<12, 1> pec;\n      BitFieldModel<11, 1> pos;\n\
    \      BitFieldModel<10, 1> ack;\n      BitFieldModel<9, 1> stop;\n      BitFieldModel<8,\
    \ 1> start;\n      BitFieldModel<7, 1> nostretch;\n      BitFieldModel<6, 1> engc;\n\
    \      BitFieldModel<5, 1> enpec;\n      BitFieldModel<4, 1> enarp;\n      BitFieldModel<3,\
    \ 1> smbtype;\n      BitFieldModel<1, 1> smbus;\n      BitFieldModel<0, 1> pe;\n\
    \    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using last = FieldModel<address, 12, 1>;\n    using dmaen\
    \ = FieldModel<address, 11, 1>;\n    using itbufen = FieldModel<address, 10, 1>;\n\
    \    using itevten = FieldModel<address, 9, 1>;\n    using iterren = FieldModel<address,\
    \ 8, 1>;\n    using freq = FieldModel<address, 0, 6>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 1> last;\n      BitFieldModel<11,\
    \ 1> dmaen;\n      BitFieldModel<10, 1> itbufen;\n      BitFieldModel<9, 1> itevten;\n\
    \      BitFieldModel<8, 1> iterren;\n      BitFieldModel<0, 6> freq;\n    };\n\
    \  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Oar1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using addmode = FieldModel<address, 15, 1>;\n    using add10 = FieldModel<address,\
    \ 8, 2>;\n    using add7 = FieldModel<address, 1, 7>;\n    using add0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> addmode;\n      BitFieldModel<8, 2> add10;\n      BitFieldModel<1, 7> add7;\n\
    \      BitFieldModel<0, 1> add0;\n    };\n  };\n\npublic:\n  using oar1 = Oar1Reg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class Oar2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using add2 = FieldModel<address,\
    \ 1, 7>;\n    using endual = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<1, 7> add2;\n      BitFieldModel<0,\
    \ 1> endual;\n    };\n  };\n\npublic:\n  using oar2 = Oar2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 8>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 8> dr;\n    };\n \
    \ };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Sr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using smbalert = FieldModel<address, 15, 1>;\n    using timeout = FieldModel<address,\
    \ 14, 1>;\n    using pecerr = FieldModel<address, 12, 1>;\n    using ovr = FieldModel<address,\
    \ 11, 1>;\n    using af = FieldModel<address, 10, 1>;\n    using arlo = FieldModel<address,\
    \ 9, 1>;\n    using berr = FieldModel<address, 8, 1>;\n    using txe = FieldModel<address,\
    \ 7, 1>;\n    using rxne = FieldModel<address, 6, 1>;\n    using stopf = FieldModel<address,\
    \ 4, 1>;\n    using add10 = FieldModel<address, 3, 1>;\n    using btf = FieldModel<address,\
    \ 2, 1>;\n    using addr = FieldModel<address, 1, 1>;\n    using sb = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> smbalert;\n      BitFieldModel<14, 1> timeout;\n      BitFieldModel<12, 1>\
    \ pecerr;\n      BitFieldModel<11, 1> ovr;\n      BitFieldModel<10, 1> af;\n \
    \     BitFieldModel<9, 1> arlo;\n      BitFieldModel<8, 1> berr;\n      BitFieldModel<7,\
    \ 1> txe;\n      BitFieldModel<6, 1> rxne;\n      BitFieldModel<4, 1> stopf;\n\
    \      BitFieldModel<3, 1> add10;\n      BitFieldModel<2, 1> btf;\n      BitFieldModel<1,\
    \ 1> addr;\n      BitFieldModel<0, 1> sb;\n    };\n  };\n\npublic:\n  using sr1\
    \ = Sr1Reg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Sr2Reg : public RegisterModel<address>\n  {\n  public:\n    using pec\
    \ = FieldModel<address, 8, 8>;\n    using dualf = FieldModel<address, 7, 1>;\n\
    \    using smbhost = FieldModel<address, 6, 1>;\n    using smbdefault = FieldModel<address,\
    \ 5, 1>;\n    using gencall = FieldModel<address, 4, 1>;\n    using tra = FieldModel<address,\
    \ 2, 1>;\n    using busy = FieldModel<address, 1, 1>;\n    using msl = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 8> pec;\n      BitFieldModel<7, 1> dualf;\n      BitFieldModel<6, 1> smbhost;\n\
    \      BitFieldModel<5, 1> smbdefault;\n      BitFieldModel<4, 1> gencall;\n \
    \     BitFieldModel<2, 1> tra;\n      BitFieldModel<1, 1> busy;\n      BitFieldModel<0,\
    \ 1> msl;\n    };\n  };\n\npublic:\n  using sr2 = Sr2Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using f_s = FieldModel<address, 15, 1>;\n    using duty =\
    \ FieldModel<address, 14, 1>;\n    using ccr = FieldModel<address, 0, 12>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> f_s;\n      BitFieldModel<14, 1> duty;\n      BitFieldModel<0, 12> ccr;\n\
    \    };\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class TriseReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using trise = FieldModel<address, 0, 6>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 6> trise;\n\
    \    };\n  };\n\npublic:\n  using trise = TriseReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_I2C2_H */\n"
  name: I2C2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C1_H\n#define DRAL_STM32F411_I2C1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2c1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40005400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using swrst = FieldModel<address, 15, 1>;\n    using alert\
    \ = FieldModel<address, 13, 1>;\n    using pec = FieldModel<address, 12, 1>;\n\
    \    using pos = FieldModel<address, 11, 1>;\n    using ack = FieldModel<address,\
    \ 10, 1>;\n    using stop = FieldModel<address, 9, 1>;\n    using start = FieldModel<address,\
    \ 8, 1>;\n    using nostretch = FieldModel<address, 7, 1>;\n    using engc = FieldModel<address,\
    \ 6, 1>;\n    using enpec = FieldModel<address, 5, 1>;\n    using enarp = FieldModel<address,\
    \ 4, 1>;\n    using smbtype = FieldModel<address, 3, 1>;\n    using smbus = FieldModel<address,\
    \ 1, 1>;\n    using pe = FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<15, 1> swrst;\n      BitFieldModel<13,\
    \ 1> alert;\n      BitFieldModel<12, 1> pec;\n      BitFieldModel<11, 1> pos;\n\
    \      BitFieldModel<10, 1> ack;\n      BitFieldModel<9, 1> stop;\n      BitFieldModel<8,\
    \ 1> start;\n      BitFieldModel<7, 1> nostretch;\n      BitFieldModel<6, 1> engc;\n\
    \      BitFieldModel<5, 1> enpec;\n      BitFieldModel<4, 1> enarp;\n      BitFieldModel<3,\
    \ 1> smbtype;\n      BitFieldModel<1, 1> smbus;\n      BitFieldModel<0, 1> pe;\n\
    \    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using last = FieldModel<address, 12, 1>;\n    using dmaen\
    \ = FieldModel<address, 11, 1>;\n    using itbufen = FieldModel<address, 10, 1>;\n\
    \    using itevten = FieldModel<address, 9, 1>;\n    using iterren = FieldModel<address,\
    \ 8, 1>;\n    using freq = FieldModel<address, 0, 6>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<12, 1> last;\n      BitFieldModel<11,\
    \ 1> dmaen;\n      BitFieldModel<10, 1> itbufen;\n      BitFieldModel<9, 1> itevten;\n\
    \      BitFieldModel<8, 1> iterren;\n      BitFieldModel<0, 6> freq;\n    };\n\
    \  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Oar1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using addmode = FieldModel<address, 15, 1>;\n    using add10 = FieldModel<address,\
    \ 8, 2>;\n    using add7 = FieldModel<address, 1, 7>;\n    using add0 = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> addmode;\n      BitFieldModel<8, 2> add10;\n      BitFieldModel<1, 7> add7;\n\
    \      BitFieldModel<0, 1> add0;\n    };\n  };\n\npublic:\n  using oar1 = Oar1Reg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class Oar2Reg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using add2 = FieldModel<address,\
    \ 1, 7>;\n    using endual = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<1, 7> add2;\n      BitFieldModel<0,\
    \ 1> endual;\n    };\n  };\n\npublic:\n  using oar2 = Oar2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class DrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 8>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 8> dr;\n    };\n \
    \ };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Sr1Reg : public RegisterModel<address>\n  {\n  public:\n \
    \   using smbalert = FieldModel<address, 15, 1>;\n    using timeout = FieldModel<address,\
    \ 14, 1>;\n    using pecerr = FieldModel<address, 12, 1>;\n    using ovr = FieldModel<address,\
    \ 11, 1>;\n    using af = FieldModel<address, 10, 1>;\n    using arlo = FieldModel<address,\
    \ 9, 1>;\n    using berr = FieldModel<address, 8, 1>;\n    using txe = FieldModel<address,\
    \ 7, 1>;\n    using rxne = FieldModel<address, 6, 1>;\n    using stopf = FieldModel<address,\
    \ 4, 1>;\n    using add10 = FieldModel<address, 3, 1>;\n    using btf = FieldModel<address,\
    \ 2, 1>;\n    using addr = FieldModel<address, 1, 1>;\n    using sb = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> smbalert;\n      BitFieldModel<14, 1> timeout;\n      BitFieldModel<12, 1>\
    \ pecerr;\n      BitFieldModel<11, 1> ovr;\n      BitFieldModel<10, 1> af;\n \
    \     BitFieldModel<9, 1> arlo;\n      BitFieldModel<8, 1> berr;\n      BitFieldModel<7,\
    \ 1> txe;\n      BitFieldModel<6, 1> rxne;\n      BitFieldModel<4, 1> stopf;\n\
    \      BitFieldModel<3, 1> add10;\n      BitFieldModel<2, 1> btf;\n      BitFieldModel<1,\
    \ 1> addr;\n      BitFieldModel<0, 1> sb;\n    };\n  };\n\npublic:\n  using sr1\
    \ = Sr1Reg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Sr2Reg : public RegisterModel<address>\n  {\n  public:\n    using pec\
    \ = FieldModel<address, 8, 8>;\n    using dualf = FieldModel<address, 7, 1>;\n\
    \    using smbhost = FieldModel<address, 6, 1>;\n    using smbdefault = FieldModel<address,\
    \ 5, 1>;\n    using gencall = FieldModel<address, 4, 1>;\n    using tra = FieldModel<address,\
    \ 2, 1>;\n    using busy = FieldModel<address, 1, 1>;\n    using msl = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 8> pec;\n      BitFieldModel<7, 1> dualf;\n      BitFieldModel<6, 1> smbhost;\n\
    \      BitFieldModel<5, 1> smbdefault;\n      BitFieldModel<4, 1> gencall;\n \
    \     BitFieldModel<2, 1> tra;\n      BitFieldModel<1, 1> busy;\n      BitFieldModel<0,\
    \ 1> msl;\n    };\n  };\n\npublic:\n  using sr2 = Sr2Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using f_s = FieldModel<address, 15, 1>;\n    using duty =\
    \ FieldModel<address, 14, 1>;\n    using ccr = FieldModel<address, 0, 12>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<15,\
    \ 1> f_s;\n      BitFieldModel<14, 1> duty;\n      BitFieldModel<0, 12> ccr;\n\
    \    };\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class TriseReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using trise = FieldModel<address, 0, 6>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 6> trise;\n\
    \    };\n  };\n\npublic:\n  using trise = TriseReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_I2C1_H */\n"
  name: I2C1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2S2EXT_H\n#define DRAL_STM32F411_I2S2EXT_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2s2ext\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_I2S2EXT_H */\n"
  name: I2S2ext
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2S3EXT_H\n#define DRAL_STM32F411_I2S3EXT_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2s3ext\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40004000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_I2S3EXT_H */\n"
  name: I2S3ext
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI1_H\n#define DRAL_STM32F411_SPI1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SPI1_H */\n"
  name: SPI1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI2_H\n#define DRAL_STM32F411_SPI2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003800;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SPI2_H */\n"
  name: SPI2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI3_H\n#define DRAL_STM32F411_SPI3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi3\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003C00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SPI3_H */\n"
  name: SPI3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI4_H\n#define DRAL_STM32F411_SPI4_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi4\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013400;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SPI4_H */\n"
  name: SPI4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI5_H\n#define DRAL_STM32F411_SPI5_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi5\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40015000;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Cr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 1>;\n    using bidioe\
    \ = FieldModel<address, 14, 1>;\n    using crcen = FieldModel<address, 13, 1>;\n\
    \    using crcnext = FieldModel<address, 12, 1>;\n    using dff = FieldModel<address,\
    \ 11, 1>;\n    using rxonly = FieldModel<address, 10, 1>;\n    using ssm = FieldModel<address,\
    \ 9, 1>;\n    using ssi = FieldModel<address, 8, 1>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 1>;\n    using spe = FieldModel<address, 6, 1>;\n    using br = FieldModel<address,\
    \ 3, 3>;\n    using mstr = FieldModel<address, 2, 1>;\n    using cpol = FieldModel<address,\
    \ 1, 1>;\n    using cpha = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<15, 1> bidimode;\n  \
    \    BitFieldModel<14, 1> bidioe;\n      BitFieldModel<13, 1> crcen;\n      BitFieldModel<12,\
    \ 1> crcnext;\n      BitFieldModel<11, 1> dff;\n      BitFieldModel<10, 1> rxonly;\n\
    \      BitFieldModel<9, 1> ssm;\n      BitFieldModel<8, 1> ssi;\n      BitFieldModel<7,\
    \ 1> lsbfirst;\n      BitFieldModel<6, 1> spe;\n      BitFieldModel<3, 3> br;\n\
    \      BitFieldModel<2, 1> mstr;\n      BitFieldModel<1, 1> cpol;\n      BitFieldModel<0,\
    \ 1> cpha;\n    };\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Cr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txeie = FieldModel<address, 7, 1>;\n    using rxneie\
    \ = FieldModel<address, 6, 1>;\n    using errie = FieldModel<address, 5, 1>;\n\
    \    using frf = FieldModel<address, 4, 1>;\n    using ssoe = FieldModel<address,\
    \ 2, 1>;\n    using txdmaen = FieldModel<address, 1, 1>;\n    using rxdmaen =\
    \ FieldModel<address, 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<7, 1> txeie;\n      BitFieldModel<6, 1> rxneie;\n\
    \      BitFieldModel<5, 1> errie;\n      BitFieldModel<4, 1> frf;\n      BitFieldModel<2,\
    \ 1> ssoe;\n      BitFieldModel<1, 1> txdmaen;\n      BitFieldModel<0, 1> rxdmaen;\n\
    \    };\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class SrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 1>;\n    using bsy\
    \ = FieldModel<address, 7, 1>;\n    using ovr = FieldModel<address, 6, 1>;\n \
    \   using modf = FieldModel<address, 5, 1>;\n    using crcerr = FieldModel<address,\
    \ 4, 1>;\n    using udr = FieldModel<address, 3, 1>;\n    using chside = FieldModel<address,\
    \ 2, 1>;\n    using txe = FieldModel<address, 1, 1>;\n    using rxne = FieldModel<address,\
    \ 0, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<8,\
    \ 1> tifrfe;\n      BitFieldModel<7, 1> bsy;\n      BitFieldModel<6, 1> ovr;\n\
    \      BitFieldModel<5, 1> modf;\n      BitFieldModel<4, 1> crcerr;\n      BitFieldModel<3,\
    \ 1> udr;\n      BitFieldModel<2, 1> chside;\n      BitFieldModel<1, 1> txe;\n\
    \      BitFieldModel<0, 1> rxne;\n    };\n  };\n\npublic:\n  using sr = SrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template<uint32_t address>\n  class DrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using dr = FieldModel<address, 0,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 16> dr;\n    };\n  };\n\npublic:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template<uint32_t address>\n  class CrcprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using crcpoly = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> crcpoly;\n\
    \    };\n  };\n\npublic:\n  using crcpr = CrcprReg<BaseAddress + 0x0010>;\n\n\
    private:\n  template<uint32_t address>\n  class RxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using rxcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> rxcrc;\n\
    \    };\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template<uint32_t address>\n  class TxcrcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using txcrc = FieldModel<address, 0, 16>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 16> txcrc;\n\
    \    };\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\n\
    private:\n  template<uint32_t address>\n  class I2scfgrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 1>;\n    using i2se\
    \ = FieldModel<address, 10, 1>;\n    using i2scfg = FieldModel<address, 8, 2>;\n\
    \    using pcmsync = FieldModel<address, 7, 1>;\n    using i2sstd = FieldModel<address,\
    \ 4, 2>;\n    using ckpol = FieldModel<address, 3, 1>;\n    using datlen = FieldModel<address,\
    \ 1, 2>;\n    using chlen = FieldModel<address, 0, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<11, 1> i2smod;\n    \
    \  BitFieldModel<10, 1> i2se;\n      BitFieldModel<8, 2> i2scfg;\n      BitFieldModel<7,\
    \ 1> pcmsync;\n      BitFieldModel<4, 2> i2sstd;\n      BitFieldModel<3, 1> ckpol;\n\
    \      BitFieldModel<1, 2> datlen;\n      BitFieldModel<0, 1> chlen;\n    };\n\
    \  };\n\npublic:\n  using i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class I2sprReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using mckoe = FieldModel<address, 9, 1>;\n    using odd =\
    \ FieldModel<address, 8, 1>;\n    using i2sdiv = FieldModel<address, 0, 8>;\n\n\
    \  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9,\
    \ 1> mckoe;\n      BitFieldModel<8, 1> odd;\n      BitFieldModel<0, 8> i2sdiv;\n\
    \    };\n  };\n\npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SPI5_H */\n"
  name: SPI5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_NVIC_H\n#define DRAL_STM32F411_NVIC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass nvic\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000E100;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Iser0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using setena = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> setena;\n\
    \    };\n  };\n\npublic:\n  using iser0 = Iser0Reg<BaseAddress + 0x0000>;\n\n\
    private:\n  template<uint32_t address>\n  class Iser1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using setena = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> setena;\n\
    \    };\n  };\n\npublic:\n  using iser1 = Iser1Reg<BaseAddress + 0x0004>;\n\n\
    private:\n  template<uint32_t address>\n  class Icer0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using clrena = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> clrena;\n\
    \    };\n  };\n\npublic:\n  using icer0 = Icer0Reg<BaseAddress + 0x0080>;\n\n\
    private:\n  template<uint32_t address>\n  class Icer1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using clrena = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> clrena;\n\
    \    };\n  };\n\npublic:\n  using icer1 = Icer1Reg<BaseAddress + 0x0084>;\n\n\
    private:\n  template<uint32_t address>\n  class Ispr0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using setpend = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> setpend;\n\
    \    };\n  };\n\npublic:\n  using ispr0 = Ispr0Reg<BaseAddress + 0x0100>;\n\n\
    private:\n  template<uint32_t address>\n  class Ispr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using setpend = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> setpend;\n\
    \    };\n  };\n\npublic:\n  using ispr1 = Ispr1Reg<BaseAddress + 0x0104>;\n\n\
    private:\n  template<uint32_t address>\n  class Icpr0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using clrpend = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> clrpend;\n\
    \    };\n  };\n\npublic:\n  using icpr0 = Icpr0Reg<BaseAddress + 0x0180>;\n\n\
    private:\n  template<uint32_t address>\n  class Icpr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using clrpend = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> clrpend;\n\
    \    };\n  };\n\npublic:\n  using icpr1 = Icpr1Reg<BaseAddress + 0x0184>;\n\n\
    private:\n  template<uint32_t address>\n  class Iabr0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using active = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> active;\n\
    \    };\n  };\n\npublic:\n  using iabr0 = Iabr0Reg<BaseAddress + 0x0200>;\n\n\
    private:\n  template<uint32_t address>\n  class Iabr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using active = FieldModel<address, 0, 32>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 32> active;\n\
    \    };\n  };\n\npublic:\n  using iabr1 = Iabr1Reg<BaseAddress + 0x0204>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr0Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr0 = Ipr0Reg<BaseAddress + 0x0300>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr1Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr1 = Ipr1Reg<BaseAddress + 0x0304>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr2Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr2 = Ipr2Reg<BaseAddress + 0x0308>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr3Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr3 = Ipr3Reg<BaseAddress + 0x030C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr4Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr4 = Ipr4Reg<BaseAddress + 0x0310>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr5Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr5 = Ipr5Reg<BaseAddress + 0x0314>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr6Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr6 = Ipr6Reg<BaseAddress + 0x0318>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr7Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr7 = Ipr7Reg<BaseAddress + 0x031C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr8Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr8 = Ipr8Reg<BaseAddress + 0x0320>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr9Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr9 = Ipr9Reg<BaseAddress + 0x0324>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Ipr10Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr10 = Ipr10Reg<BaseAddress + 0x0328>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr11Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr11 = Ipr11Reg<BaseAddress + 0x032C>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr12Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr12 = Ipr12Reg<BaseAddress + 0x0330>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr13Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr13 = Ipr13Reg<BaseAddress + 0x0334>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr14Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr14 = Ipr14Reg<BaseAddress + 0x0338>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr15Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr15 = Ipr15Reg<BaseAddress + 0x033C>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr16Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr16 = Ipr16Reg<BaseAddress + 0x0340>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr17Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr17 = Ipr17Reg<BaseAddress + 0x0344>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr18Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr18 = Ipr18Reg<BaseAddress + 0x0348>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr19Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8>;\n    using ipr_n1\
    \ = FieldModel<address, 8, 8>;\n    using ipr_n2 = FieldModel<address, 16, 8>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 8> ipr_n0;\n      BitFieldModel<8,\
    \ 8> ipr_n1;\n      BitFieldModel<16, 8> ipr_n2;\n      BitFieldModel<24, 8> ipr_n3;\n\
    \    };\n  };\n\npublic:\n  using ipr19 = Ipr19Reg<BaseAddress + 0x034C>;\n\n\
    private:\n  template<uint32_t address>\n  class Ipr20Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    \n\n  public:\n    union reg\n    {\n      uint32_t value;\n\
    \      \n    };\n  };\n\npublic:\n  using ipr20 = Ipr20Reg<BaseAddress + 0x0350>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ipr21Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    \n\n  public:\n    union reg\n    {\n      uint32_t value;\n\
    \      \n    };\n  };\n\npublic:\n  using ipr21 = Ipr21Reg<BaseAddress + 0x0354>;\n\
    \nprivate:\n  template<uint32_t address>\n  class Ipr22Reg : public RegisterModel<address>\n\
    \  {\n  public:\n    \n\n  public:\n    union reg\n    {\n      uint32_t value;\n\
    \      \n    };\n  };\n\npublic:\n  using ipr22 = Ipr22Reg<BaseAddress + 0x0358>;\n\
    private:\n  template<uint32_t address, uint32_t bankOffset>\n  class IserxBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using setena\
    \ = FieldModel<address, 0, 32, bankOffset>;\n  };\n\npublic:\n  using iserx =\
    \ IserxBankReg<BaseAddress + 0x0000, 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class IcerxBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using clrena = FieldModel<address, 0, 32, bankOffset>;\n\
    \  };\n\npublic:\n  using icerx = IcerxBankReg<BaseAddress + 0x0080, 0x0004>;\n\
    \nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class IsprxBankReg\
    \ : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using setpend\
    \ = FieldModel<address, 0, 32, bankOffset>;\n  };\n\npublic:\n  using isprx =\
    \ IsprxBankReg<BaseAddress + 0x0100, 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class IcprxBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using clrpend = FieldModel<address, 0, 32,\
    \ bankOffset>;\n  };\n\npublic:\n  using icprx = IcprxBankReg<BaseAddress + 0x0180,\
    \ 0x0004>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n  class\
    \ IabrxBankReg : public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using active = FieldModel<address, 0, 32, bankOffset>;\n  };\n\npublic:\n\
    \  using iabrx = IabrxBankReg<BaseAddress + 0x0200, 0x0004>;\n\nprivate:\n  template<uint32_t\
    \ address, uint32_t bankOffset>\n  class IprxBankReg : public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 8, bankOffset>;\n\
    \    using ipr_n1 = FieldModel<address, 8, 8, bankOffset>;\n    using ipr_n2 =\
    \ FieldModel<address, 16, 8, bankOffset>;\n    using ipr_n3 = FieldModel<address,\
    \ 24, 8, bankOffset>;\n  };\n\npublic:\n  using iprx = IprxBankReg<BaseAddress\
    \ + 0x0300, 0x0004>;\n\nprivate:\n  template<uint32_t address, uint32_t bankOffset>\n\
    \  class Ipr2xBankReg : public RegisterBankModel<address, bankOffset>\n  {\n \
    \ public:\n    \n  };\n\npublic:\n  using ipr2x = Ipr2xBankReg<BaseAddress + 0x0350,\
    \ 0x0004>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_NVIC_H */\n"
  name: NVIC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FPU_H\n#define DRAL_STM32F411_FPU_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass fpu\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000EF34;\n\nprivate:\n\
    \  template<uint32_t address>\n  class FpccrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using lspact = FieldModel<address, 0, 1>;\n    using user\
    \ = FieldModel<address, 1, 1>;\n    using thread = FieldModel<address, 3, 1>;\n\
    \    using hfrdy = FieldModel<address, 4, 1>;\n    using mmrdy = FieldModel<address,\
    \ 5, 1>;\n    using bfrdy = FieldModel<address, 6, 1>;\n    using monrdy = FieldModel<address,\
    \ 8, 1>;\n    using lspen = FieldModel<address, 30, 1>;\n    using aspen = FieldModel<address,\
    \ 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> lspact;\n      BitFieldModel<1, 1> user;\n      BitFieldModel<3, 1> thread;\n\
    \      BitFieldModel<4, 1> hfrdy;\n      BitFieldModel<5, 1> mmrdy;\n      BitFieldModel<6,\
    \ 1> bfrdy;\n      BitFieldModel<8, 1> monrdy;\n      BitFieldModel<30, 1> lspen;\n\
    \      BitFieldModel<31, 1> aspen;\n    };\n  };\n\npublic:\n  using fpccr = FpccrReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n  class FpcarReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using address = FieldModel<address,\
    \ 3, 29>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<3,\
    \ 29> address;\n    };\n  };\n\npublic:\n  using fpcar = FpcarReg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n  class FpscrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using ioc = FieldModel<address,\
    \ 0, 1>;\n    using dzc = FieldModel<address, 1, 1>;\n    using ofc = FieldModel<address,\
    \ 2, 1>;\n    using ufc = FieldModel<address, 3, 1>;\n    using ixc = FieldModel<address,\
    \ 4, 1>;\n    using idc = FieldModel<address, 7, 1>;\n    using rmode = FieldModel<address,\
    \ 22, 2>;\n    using fz = FieldModel<address, 24, 1>;\n    using dn = FieldModel<address,\
    \ 25, 1>;\n    using ahp = FieldModel<address, 26, 1>;\n    using v = FieldModel<address,\
    \ 28, 1>;\n    using c = FieldModel<address, 29, 1>;\n    using z = FieldModel<address,\
    \ 30, 1>;\n    using n = FieldModel<address, 31, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 1> ioc;\n      BitFieldModel<1,\
    \ 1> dzc;\n      BitFieldModel<2, 1> ofc;\n      BitFieldModel<3, 1> ufc;\n  \
    \    BitFieldModel<4, 1> ixc;\n      BitFieldModel<7, 1> idc;\n      BitFieldModel<22,\
    \ 2> rmode;\n      BitFieldModel<24, 1> fz;\n      BitFieldModel<25, 1> dn;\n\
    \      BitFieldModel<26, 1> ahp;\n      BitFieldModel<28, 1> v;\n      BitFieldModel<29,\
    \ 1> c;\n      BitFieldModel<30, 1> z;\n      BitFieldModel<31, 1> n;\n    };\n\
    \  };\n\npublic:\n  using fpscr = FpscrReg<BaseAddress + 0x0008>;\n\n};\n\n}\n\
    \n#endif /* DRAL_STM32F411_FPU_H */\n"
  name: FPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_MPU_H\n#define DRAL_STM32F411_MPU_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass mpu\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000ED90;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Mpu_typerReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using separate = FieldModel<address, 0, 1>;\n    using dregion\
    \ = FieldModel<address, 8, 8>;\n    using iregion = FieldModel<address, 16, 8>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> separate;\n      BitFieldModel<8, 8> dregion;\n      BitFieldModel<16, 8>\
    \ iregion;\n    };\n  };\n\npublic:\n  using mpu_typer = Mpu_typerReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n  class Mpu_ctrlReg :\
    \ public RegisterModel<address>\n  {\n  public:\n    using enable = FieldModel<address,\
    \ 0, 1>;\n    using hfnmiena = FieldModel<address, 1, 1>;\n    using privdefena\
    \ = FieldModel<address, 2, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 1> enable;\n      BitFieldModel<1, 1> hfnmiena;\n\
    \      BitFieldModel<2, 1> privdefena;\n    };\n  };\n\npublic:\n  using mpu_ctrl\
    \ = Mpu_ctrlReg<BaseAddress + 0x0004>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Mpu_rnrReg : public RegisterModel<address>\n  {\n  public:\n    using\
    \ region = FieldModel<address, 0, 8>;\n\n  public:\n    union reg\n    {\n   \
    \   uint32_t value;\n      BitFieldModel<0, 8> region;\n    };\n  };\n\npublic:\n\
    \  using mpu_rnr = Mpu_rnrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Mpu_rbarReg : public RegisterModel<address>\n  {\n  public:\n\
    \    using region = FieldModel<address, 0, 4>;\n    using valid = FieldModel<address,\
    \ 4, 1>;\n    using addr = FieldModel<address, 5, 27>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 4> region;\n     \
    \ BitFieldModel<4, 1> valid;\n      BitFieldModel<5, 27> addr;\n    };\n  };\n\
    \npublic:\n  using mpu_rbar = Mpu_rbarReg<BaseAddress + 0x000C>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class Mpu_rasrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using enable = FieldModel<address, 0, 1>;\n    using size\
    \ = FieldModel<address, 1, 5>;\n    using srd = FieldModel<address, 8, 8>;\n \
    \   using b = FieldModel<address, 16, 1>;\n    using c = FieldModel<address, 17,\
    \ 1>;\n    using s = FieldModel<address, 18, 1>;\n    using tex = FieldModel<address,\
    \ 19, 3>;\n    using ap = FieldModel<address, 24, 3>;\n    using xn = FieldModel<address,\
    \ 28, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> enable;\n      BitFieldModel<1, 5> size;\n      BitFieldModel<8, 8> srd;\n\
    \      BitFieldModel<16, 1> b;\n      BitFieldModel<17, 1> c;\n      BitFieldModel<18,\
    \ 1> s;\n      BitFieldModel<19, 3> tex;\n      BitFieldModel<24, 3> ap;\n   \
    \   BitFieldModel<28, 1> xn;\n    };\n  };\n\npublic:\n  using mpu_rasr = Mpu_rasrReg<BaseAddress\
    \ + 0x0010>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_MPU_H */\n"
  name: MPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_STK_H\n#define DRAL_STM32F411_STK_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass stk\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000E010;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CtrlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using enable = FieldModel<address, 0, 1>;\n    using tickint\
    \ = FieldModel<address, 1, 1>;\n    using clksource = FieldModel<address, 2, 1>;\n\
    \    using countflag = FieldModel<address, 16, 1>;\n\n  public:\n    union reg\n\
    \    {\n      uint32_t value;\n      BitFieldModel<0, 1> enable;\n      BitFieldModel<1,\
    \ 1> tickint;\n      BitFieldModel<2, 1> clksource;\n      BitFieldModel<16, 1>\
    \ countflag;\n    };\n  };\n\npublic:\n  using ctrl = CtrlReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template<uint32_t address>\n  class LoadReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using reload = FieldModel<address, 0, 24>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 24> reload;\n\
    \    };\n  };\n\npublic:\n  using load = LoadReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ValReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using current = FieldModel<address, 0, 24>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 24> current;\n\
    \    };\n  };\n\npublic:\n  using val = ValReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CalibReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tenms = FieldModel<address, 0, 24>;\n    using skew\
    \ = FieldModel<address, 30, 1>;\n    using noref = FieldModel<address, 31, 1>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 24> tenms;\n      BitFieldModel<30, 1> skew;\n      BitFieldModel<31, 1> noref;\n\
    \    };\n  };\n\npublic:\n  using calib = CalibReg<BaseAddress + 0x000C>;\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_STK_H */\n"
  name: STK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SCB_H\n#define DRAL_STM32F411_SCB_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass scb\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000ED00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CpuidReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using revision = FieldModel<address, 0, 4>;\n    using partno\
    \ = FieldModel<address, 4, 12>;\n    using constant = FieldModel<address, 16,\
    \ 4>;\n    using variant = FieldModel<address, 20, 4>;\n    using implementer\
    \ = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 4> revision;\n      BitFieldModel<4, 12> partno;\n\
    \      BitFieldModel<16, 4> constant;\n      BitFieldModel<20, 4> variant;\n \
    \     BitFieldModel<24, 8> implementer;\n    };\n  };\n\npublic:\n  using cpuid\
    \ = CpuidReg<BaseAddress + 0x0000>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class IcsrReg : public RegisterModel<address>\n  {\n  public:\n    using vectactive\
    \ = FieldModel<address, 0, 9>;\n    using rettobase = FieldModel<address, 11,\
    \ 1>;\n    using vectpending = FieldModel<address, 12, 7>;\n    using isrpending\
    \ = FieldModel<address, 22, 1>;\n    using pendstclr = FieldModel<address, 25,\
    \ 1>;\n    using pendstset = FieldModel<address, 26, 1>;\n    using pendsvclr\
    \ = FieldModel<address, 27, 1>;\n    using pendsvset = FieldModel<address, 28,\
    \ 1>;\n    using nmipendset = FieldModel<address, 31, 1>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 9> vectactive;\n \
    \     BitFieldModel<11, 1> rettobase;\n      BitFieldModel<12, 7> vectpending;\n\
    \      BitFieldModel<22, 1> isrpending;\n      BitFieldModel<25, 1> pendstclr;\n\
    \      BitFieldModel<26, 1> pendstset;\n      BitFieldModel<27, 1> pendsvclr;\n\
    \      BitFieldModel<28, 1> pendsvset;\n      BitFieldModel<31, 1> nmipendset;\n\
    \    };\n  };\n\npublic:\n  using icsr = IcsrReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class VtorReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using tbloff = FieldModel<address, 9, 21>;\n\n  public:\n\
    \    union reg\n    {\n      uint32_t value;\n      BitFieldModel<9, 21> tbloff;\n\
    \    };\n  };\n\npublic:\n  using vtor = VtorReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class AircrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using vectreset = FieldModel<address, 0, 1>;\n    using vectclractive\
    \ = FieldModel<address, 1, 1>;\n    using sysresetreq = FieldModel<address, 2,\
    \ 1>;\n    using prigroup = FieldModel<address, 8, 3>;\n    using endianess =\
    \ FieldModel<address, 15, 1>;\n    using vectkeystat = FieldModel<address, 16,\
    \ 16>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> vectreset;\n      BitFieldModel<1, 1> vectclractive;\n      BitFieldModel<2,\
    \ 1> sysresetreq;\n      BitFieldModel<8, 3> prigroup;\n      BitFieldModel<15,\
    \ 1> endianess;\n      BitFieldModel<16, 16> vectkeystat;\n    };\n  };\n\npublic:\n\
    \  using aircr = AircrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class ScrReg : public RegisterModel<address>\n  {\n  public:\n \
    \   using sleeponexit = FieldModel<address, 1, 1>;\n    using sleepdeep = FieldModel<address,\
    \ 2, 1>;\n    using seveonpend = FieldModel<address, 4, 1>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<1, 1> sleeponexit;\n\
    \      BitFieldModel<2, 1> sleepdeep;\n      BitFieldModel<4, 1> seveonpend;\n\
    \    };\n  };\n\npublic:\n  using scr = ScrReg<BaseAddress + 0x0010>;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CcrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using nonbasethrdena = FieldModel<address, 0, 1>;\n    using\
    \ usersetmpend = FieldModel<address, 1, 1>;\n    using unalign__trp = FieldModel<address,\
    \ 3, 1>;\n    using div_0_trp = FieldModel<address, 4, 1>;\n    using bfhfnmign\
    \ = FieldModel<address, 8, 1>;\n    using stkalign = FieldModel<address, 9, 1>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> nonbasethrdena;\n      BitFieldModel<1, 1> usersetmpend;\n      BitFieldModel<3,\
    \ 1> unalign__trp;\n      BitFieldModel<4, 1> div_0_trp;\n      BitFieldModel<8,\
    \ 1> bfhfnmign;\n      BitFieldModel<9, 1> stkalign;\n    };\n  };\n\npublic:\n\
    \  using ccr = CcrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Shpr1Reg : public RegisterModel<address>\n  {\n  public:\n\
    \    using pri_4 = FieldModel<address, 0, 8>;\n    using pri_5 = FieldModel<address,\
    \ 8, 8>;\n    using pri_6 = FieldModel<address, 16, 8>;\n\n  public:\n    union\
    \ reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 8> pri_4;\n      BitFieldModel<8,\
    \ 8> pri_5;\n      BitFieldModel<16, 8> pri_6;\n    };\n  };\n\npublic:\n  using\
    \ shpr1 = Shpr1Reg<BaseAddress + 0x0018>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Shpr2Reg : public RegisterModel<address>\n  {\n  public:\n    using pri_11\
    \ = FieldModel<address, 24, 8>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<24, 8> pri_11;\n    };\n  };\n\npublic:\n  using\
    \ shpr2 = Shpr2Reg<BaseAddress + 0x001C>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class Shpr3Reg : public RegisterModel<address>\n  {\n  public:\n    using pri_14\
    \ = FieldModel<address, 16, 8>;\n    using pri_15 = FieldModel<address, 24, 8>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<16,\
    \ 8> pri_14;\n      BitFieldModel<24, 8> pri_15;\n    };\n  };\n\npublic:\n  using\
    \ shpr3 = Shpr3Reg<BaseAddress + 0x0020>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class ShcsrReg : public RegisterModel<address>\n  {\n  public:\n    using memfaultact\
    \ = FieldModel<address, 0, 1>;\n    using busfaultact = FieldModel<address, 1,\
    \ 1>;\n    using usgfaultact = FieldModel<address, 3, 1>;\n    using svcallact\
    \ = FieldModel<address, 7, 1>;\n    using monitoract = FieldModel<address, 8,\
    \ 1>;\n    using pendsvact = FieldModel<address, 10, 1>;\n    using systickact\
    \ = FieldModel<address, 11, 1>;\n    using usgfaultpended = FieldModel<address,\
    \ 12, 1>;\n    using memfaultpended = FieldModel<address, 13, 1>;\n    using busfaultpended\
    \ = FieldModel<address, 14, 1>;\n    using svcallpended = FieldModel<address,\
    \ 15, 1>;\n    using memfaultena = FieldModel<address, 16, 1>;\n    using busfaultena\
    \ = FieldModel<address, 17, 1>;\n    using usgfaultena = FieldModel<address, 18,\
    \ 1>;\n\n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<0,\
    \ 1> memfaultact;\n      BitFieldModel<1, 1> busfaultact;\n      BitFieldModel<3,\
    \ 1> usgfaultact;\n      BitFieldModel<7, 1> svcallact;\n      BitFieldModel<8,\
    \ 1> monitoract;\n      BitFieldModel<10, 1> pendsvact;\n      BitFieldModel<11,\
    \ 1> systickact;\n      BitFieldModel<12, 1> usgfaultpended;\n      BitFieldModel<13,\
    \ 1> memfaultpended;\n      BitFieldModel<14, 1> busfaultpended;\n      BitFieldModel<15,\
    \ 1> svcallpended;\n      BitFieldModel<16, 1> memfaultena;\n      BitFieldModel<17,\
    \ 1> busfaultena;\n      BitFieldModel<18, 1> usgfaultena;\n    };\n  };\n\npublic:\n\
    \  using shcsr = ShcsrReg<BaseAddress + 0x0024>;\n\nprivate:\n  template<uint32_t\
    \ address>\n  class Cfsr_ufsr_bfsr_mmfsrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using iaccviol = FieldModel<address, 1, 1>;\n    using munstkerr\
    \ = FieldModel<address, 3, 1>;\n    using mstkerr = FieldModel<address, 4, 1>;\n\
    \    using mlsperr = FieldModel<address, 5, 1>;\n    using mmarvalid = FieldModel<address,\
    \ 7, 1>;\n    using ibuserr = FieldModel<address, 8, 1>;\n    using preciserr\
    \ = FieldModel<address, 9, 1>;\n    using impreciserr = FieldModel<address, 10,\
    \ 1>;\n    using unstkerr = FieldModel<address, 11, 1>;\n    using stkerr = FieldModel<address,\
    \ 12, 1>;\n    using lsperr = FieldModel<address, 13, 1>;\n    using bfarvalid\
    \ = FieldModel<address, 15, 1>;\n    using undefinstr = FieldModel<address, 16,\
    \ 1>;\n    using invstate = FieldModel<address, 17, 1>;\n    using invpc = FieldModel<address,\
    \ 18, 1>;\n    using nocp = FieldModel<address, 19, 1>;\n    using unaligned =\
    \ FieldModel<address, 24, 1>;\n    using divbyzero = FieldModel<address, 25, 1>;\n\
    \n  public:\n    union reg\n    {\n      uint32_t value;\n      BitFieldModel<1,\
    \ 1> iaccviol;\n      BitFieldModel<3, 1> munstkerr;\n      BitFieldModel<4, 1>\
    \ mstkerr;\n      BitFieldModel<5, 1> mlsperr;\n      BitFieldModel<7, 1> mmarvalid;\n\
    \      BitFieldModel<8, 1> ibuserr;\n      BitFieldModel<9, 1> preciserr;\n  \
    \    BitFieldModel<10, 1> impreciserr;\n      BitFieldModel<11, 1> unstkerr;\n\
    \      BitFieldModel<12, 1> stkerr;\n      BitFieldModel<13, 1> lsperr;\n    \
    \  BitFieldModel<15, 1> bfarvalid;\n      BitFieldModel<16, 1> undefinstr;\n \
    \     BitFieldModel<17, 1> invstate;\n      BitFieldModel<18, 1> invpc;\n    \
    \  BitFieldModel<19, 1> nocp;\n      BitFieldModel<24, 1> unaligned;\n      BitFieldModel<25,\
    \ 1> divbyzero;\n    };\n  };\n\npublic:\n  using cfsr_ufsr_bfsr_mmfsr = Cfsr_ufsr_bfsr_mmfsrReg<BaseAddress\
    \ + 0x0028>;\n\nprivate:\n  template<uint32_t address>\n  class HfsrReg : public\
    \ RegisterModel<address>\n  {\n  public:\n    using vecttbl = FieldModel<address,\
    \ 1, 1>;\n    using forced = FieldModel<address, 30, 1>;\n    using debug_vt =\
    \ FieldModel<address, 31, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<1, 1> vecttbl;\n      BitFieldModel<30, 1> forced;\n\
    \      BitFieldModel<31, 1> debug_vt;\n    };\n  };\n\npublic:\n  using hfsr =\
    \ HfsrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template<uint32_t address>\n \
    \ class MmfarReg : public RegisterModel<address>\n  {\n  public:\n    using mmfar\
    \ = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 32> mmfar;\n    };\n  };\n\npublic:\n  using\
    \ mmfar = MmfarReg<BaseAddress + 0x0034>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class BfarReg : public RegisterModel<address>\n  {\n  public:\n    using bfar\
    \ = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 32> bfar;\n    };\n  };\n\npublic:\n  using bfar\
    \ = BfarReg<BaseAddress + 0x0038>;\n\nprivate:\n  template<uint32_t address>\n\
    \  class AfsrReg : public RegisterModel<address>\n  {\n  public:\n    using impdef\
    \ = FieldModel<address, 0, 32>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 32> impdef;\n    };\n  };\n\npublic:\n  using\
    \ afsr = AfsrReg<BaseAddress + 0x003C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_SCB_H\
    \ */\n"
  name: SCB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_NVIC_STIR_H\n#define DRAL_STM32F411_NVIC_STIR_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass nvic_stir\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000EF00;\n\nprivate:\n\
    \  template<uint32_t address>\n  class StirReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using intid = FieldModel<address, 0, 9>;\n\n  public:\n \
    \   union reg\n    {\n      uint32_t value;\n      BitFieldModel<0, 9> intid;\n\
    \    };\n  };\n\npublic:\n  using stir = StirReg<BaseAddress + 0x0000>;\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_NVIC_STIR_H */\n"
  name: NVIC_STIR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FPU_CPACR_H\n#define DRAL_STM32F411_FPU_CPACR_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass fpu_cpacr\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000ED88;\n\nprivate:\n\
    \  template<uint32_t address>\n  class CpacrReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using cp = FieldModel<address, 20, 4>;\n\n  public:\n   \
    \ union reg\n    {\n      uint32_t value;\n      BitFieldModel<20, 4> cp;\n  \
    \  };\n  };\n\npublic:\n  using cpacr = CpacrReg<BaseAddress + 0x0000>;\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_FPU_CPACR_H */\n"
  name: FPU_CPACR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SCB_ACTRL_H\n#define DRAL_STM32F411_SCB_ACTRL_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass scb_actrl\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000E008;\n\nprivate:\n\
    \  template<uint32_t address>\n  class ActrlReg : public RegisterModel<address>\n\
    \  {\n  public:\n    using dismcycint = FieldModel<address, 0, 1>;\n    using\
    \ disdefwbuf = FieldModel<address, 1, 1>;\n    using disfold = FieldModel<address,\
    \ 2, 1>;\n    using disfpca = FieldModel<address, 8, 1>;\n    using disoofp =\
    \ FieldModel<address, 9, 1>;\n\n  public:\n    union reg\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<0, 1> dismcycint;\n      BitFieldModel<1, 1> disdefwbuf;\n\
    \      BitFieldModel<2, 1> disfold;\n      BitFieldModel<8, 1> disfpca;\n    \
    \  BitFieldModel<9, 1> disoofp;\n    };\n  };\n\npublic:\n  using actrl = ActrlReg<BaseAddress\
    \ + 0x0000>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_SCB_ACTRL_H */\n"
  name: SCB_ACTRL
