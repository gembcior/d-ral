- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_REGISTER_MODEL_H\n#define DRAL_REGISTER_MODEL_H\n\
    \n#include <cstdint>\n#include <type_traits>\n\nnamespace dral {\n\ntemplate<typename\
    \ SizeType, unsigned int address>\nclass RegisterModel\n{\npublic:\n  static constexpr\
    \ unsigned int Address = address;\n\npublic:\n  static SizeType read()\n  {\n\
    \    volatile SizeType* reg = reinterpret_cast<volatile SizeType*>(address);\n\
    \    return *reg;\n  }\n\n  static void write(SizeType value)\n  {\n    volatile\
    \ SizeType* reg = reinterpret_cast<volatile SizeType*>(address);\n    *reg = value;\n\
    \  }\n};\n\ntemplate<typename SizeType, unsigned int address, unsigned int bankOffset>\n\
    class RegisterBankModel\n{\npublic:\n  static constexpr unsigned int Address =\
    \ address;\n  static constexpr unsigned int BankOffset = bankOffset;\n\npublic:\n\
    \  static SizeType read(unsigned int bank)\n  {\n    volatile SizeType* reg =\
    \ reinterpret_cast<volatile SizeType*>(address + (bankOffset * bank));\n    return\
    \ *reg;\n  }\n\n  static void write(unsigned int bank, SizeType value)\n  {\n\
    \    volatile SizeType* reg = reinterpret_cast<volatile SizeType*>(address + (bankOffset\
    \ * bank));\n    *reg = value;\n  }\n};\n\ntemplate<typename SizeType, unsigned\
    \ int address, unsigned int position, unsigned int width, unsigned int bankOffset\
    \ = 0>\nclass FieldModel\n{\npublic:\n  static constexpr unsigned int Width =\
    \ width;\n  static constexpr unsigned int Mask = (1U << width) - 1U;\n  static\
    \ constexpr unsigned int Position = position;\n\npublic:\n  static void write(unsigned\
    \ int bank, SizeType value)\n  {\n    volatile SizeType* reg = reinterpret_cast<volatile\
    \ SizeType*>(address + (bankOffset * bank));\n    *reg = (*reg & ~(Mask << position))\
    \ | ((value & Mask) << position);\n  }\n\n  static SizeType read(unsigned int\
    \ bank)\n  {\n    volatile SizeType* reg = reinterpret_cast<volatile SizeType*>(address\
    \ + (bankOffset * bank));\n    return (*reg >> position) & Mask;\n  }\n\n  static_assert(position\
    \ >= 0 && position <= (sizeof(SizeType) * 8 - 1), \"The position of the field\
    \ can't exceed the register size or be less than 0.\");\n  static_assert(width\
    \ >= 1 && width <= ((sizeof(SizeType) * 8) - position), \"The width of the field\
    \ starting from the position can't exceed the register size or be less than 1.\"\
    );\n};\n\ntemplate<typename SizeType, unsigned int address, unsigned int position,\
    \ unsigned int width>\nclass FieldModel<SizeType, address, position, width>\n\
    {\npublic:\n  static constexpr unsigned int Width = width;\n  static constexpr\
    \ unsigned int Mask = (1U << width) - 1U;\n  static constexpr unsigned int Position\
    \ = position;\n\npublic:\n  static void write(SizeType value)\n  {\n    volatile\
    \ SizeType* reg = reinterpret_cast<volatile SizeType*>(address);\n    *reg = (*reg\
    \ & ~(Mask << position)) | ((value & Mask) << position);\n  }\n\n  static SizeType\
    \ read()\n  {\n    volatile SizeType* reg = reinterpret_cast<volatile SizeType*>(address);\n\
    \    return (*reg >> position) & Mask;\n  }\n\n  static_assert(position >= 0 &&\
    \ position <= (sizeof(SizeType) * 8 - 1), \"The position of the field can't exceed\
    \ the register size or be less than 0.\");\n  static_assert(width >= 1 && width\
    \ <= ((sizeof(SizeType) * 8) - position), \"The width of the field starting from\
    \ the position can't exceed the register size or be less than 1.\");\n};\n\ntemplate<typename\
    \ SizeType, unsigned int position, unsigned int width = 1>\nclass BitFieldModel\n\
    {\npublic:\n  static constexpr unsigned int Width = width;\n  static constexpr\
    \ unsigned int Mask = (1U << width) - 1U;\n  static constexpr unsigned int Position\
    \ = position;\n\npublic:\n  template<typename T>\n  BitFieldModel& operator=(T\
    \ value)\n  {\n    m_value = (m_value & ~(Mask << position)) | ((value & Mask)\
    \ << position);\n    return *this;\n  }\n\n  operator SizeType() const\n  {\n\
    \    return (m_value >> position) & Mask;\n  }\n\n  explicit operator bool() const\n\
    \  {\n    return m_value & (Mask << position);\n  }\n\n  BitFieldModel& operator++()\n\
    \  {\n    return *this = *this + 1U;\n  }\n\n  SizeType operator++(int)\n  {\n\
    \    const SizeType result = *this;\n    ++*this;\n    return result;\n  }\n\n\
    \  BitFieldModel& operator--()\n  {\n    return *this = *this - 1U;\n  }\n\n \
    \ SizeType operator--(int)\n  {\n    const SizeType result = *this;\n    --*this;\n\
    \    return result;\n  }\n\nprivate:\n  SizeType m_value;\n\n  static_assert(position\
    \ >= 0 && position <= (sizeof(SizeType) * 8 - 1), \"The position of the field\
    \ can't exceed the register size or be less than 0.\");\n  static_assert(width\
    \ >= 1 && width <= ((sizeof(SizeType) * 8) - position), \"The width of the field\
    \ starting from the position can't exceed the register size or be less than 1.\"\
    );\n};\n\ntemplate<typename SizeType, unsigned int position>\nclass BitFieldModel<SizeType,\
    \ position>\n{\npublic:\n  static constexpr unsigned int Width = 1U;\n  static\
    \ constexpr unsigned int Mask = (1U << Width) - 1U;\n  static constexpr unsigned\
    \ int Position = position;\n\npublic:\n  BitFieldModel& operator=(bool value)\n\
    \  {\n    m_value = (m_value & ~(Mask << position)) | (value << position);\n \
    \   return *this;\n  }\n\n  explicit operator bool() const\n  {\n    return m_value\
    \ & (Mask << position);\n  }\n\nprivate:\n  SizeType m_value;\n\n  static_assert(position\
    \ >= 0 && position <= (sizeof(SizeType) * 8 - 1), \"The position of the field\
    \ can't exceed the register size or be less than 0.\");\n};\n\n}  // namespace\n\
    \n#endif /* DRAL_REGISTER_MODEL_H */"
  name: register_model
