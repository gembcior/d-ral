- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_ADC_COMMON_H\n#define DRAL_STM32F411_ADC_COMMON_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct adc_common\n\
    {\n  struct csr\n  {\n    constexpr static unsigned int Address = 0x40012300 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 21, 1> ovr3;\n      BitFieldModel<uint32_t, 20, 1> strt3;\n      BitFieldModel<uint32_t,\
    \ 19, 1> jstrt3;\n      BitFieldModel<uint32_t, 18, 1> jeoc3;\n      BitFieldModel<uint32_t,\
    \ 17, 1> eoc3;\n      BitFieldModel<uint32_t, 16, 1> awd3;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ovr2;\n      BitFieldModel<uint32_t, 12, 1> strt2;\n      BitFieldModel<uint32_t,\
    \ 11, 1> jstrt2;\n      BitFieldModel<uint32_t, 10, 1> jeoc2;\n      BitFieldModel<uint32_t,\
    \ 9, 1> eoc2;\n      BitFieldModel<uint32_t, 8, 1> awd2;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ovr1;\n      BitFieldModel<uint32_t, 4, 1> strt1;\n      BitFieldModel<uint32_t,\
    \ 3, 1> jstrt1;\n      BitFieldModel<uint32_t, 2, 1> jeoc1;\n      BitFieldModel<uint32_t,\
    \ 1, 1> eoc1;\n      BitFieldModel<uint32_t, 0, 1> awd1;\n    };\n  };\n\n  struct\
    \ ccr\n  {\n    constexpr static unsigned int Address = 0x40012300 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 23, 1>\
    \ tsvrefe;\n      BitFieldModel<uint32_t, 22, 1> vbate;\n      BitFieldModel<uint32_t,\
    \ 16, 2> adcpre;\n      BitFieldModel<uint32_t, 14, 2> dma;\n      BitFieldModel<uint32_t,\
    \ 13, 1> dds;\n      BitFieldModel<uint32_t, 8, 4> delay;\n    };\n  };\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_ADC_COMMON_H */"
  name: ADC_Common
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_ADC1_H\n#define DRAL_STM32F411_ADC1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct adc1\n\
    {\n  struct sr\n  {\n    constexpr static unsigned int Address = 0x40012000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ovr;\n      BitFieldModel<uint32_t, 4, 1> strt;\n      BitFieldModel<uint32_t,\
    \ 3, 1> jstrt;\n      BitFieldModel<uint32_t, 2, 1> jeoc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> eoc;\n      BitFieldModel<uint32_t, 0, 1> awd;\n    };\n  };\n\n  struct\
    \ cr1\n  {\n    constexpr static unsigned int Address = 0x40012000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 26, 1>\
    \ ovrie;\n      BitFieldModel<uint32_t, 24, 2> res;\n      BitFieldModel<uint32_t,\
    \ 23, 1> awden;\n      BitFieldModel<uint32_t, 22, 1> jawden;\n      BitFieldModel<uint32_t,\
    \ 13, 3> discnum;\n      BitFieldModel<uint32_t, 12, 1> jdiscen;\n      BitFieldModel<uint32_t,\
    \ 11, 1> discen;\n      BitFieldModel<uint32_t, 10, 1> jauto;\n      BitFieldModel<uint32_t,\
    \ 9, 1> awdsgl;\n      BitFieldModel<uint32_t, 8, 1> scan;\n      BitFieldModel<uint32_t,\
    \ 7, 1> jeocie;\n      BitFieldModel<uint32_t, 6, 1> awdie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> eocie;\n      BitFieldModel<uint32_t, 0, 5> awdch;\n    };\n  };\n\n \
    \ struct cr2\n  {\n    constexpr static unsigned int Address = 0x40012000 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 1>\
    \ swstart;\n      BitFieldModel<uint32_t, 28, 2> exten;\n      BitFieldModel<uint32_t,\
    \ 24, 4> extsel;\n      BitFieldModel<uint32_t, 22, 1> jswstart;\n      BitFieldModel<uint32_t,\
    \ 20, 2> jexten;\n      BitFieldModel<uint32_t, 16, 4> jextsel;\n      BitFieldModel<uint32_t,\
    \ 11, 1> align;\n      BitFieldModel<uint32_t, 10, 1> eocs;\n      BitFieldModel<uint32_t,\
    \ 9, 1> dds;\n      BitFieldModel<uint32_t, 8, 1> dma;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cont;\n      BitFieldModel<uint32_t, 0, 1> adon;\n    };\n  };\n\n  struct\
    \ smpr1\n  {\n    constexpr static unsigned int Address = 0x40012000 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32>\
    \ smpx_x;\n    };\n  };\n\n  struct smpr2\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012000 + 0x0010;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> smpx_x;\n    };\n  };\n\n  struct jofr1\n\
    \  {\n    constexpr static unsigned int Address = 0x40012000 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 12> joffset1;\n\
    \    };\n  };\n\n  struct jofr2\n  {\n    constexpr static unsigned int Address\
    \ = 0x40012000 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 12> joffset2;\n    };\n  };\n\n  struct jofr3\n  {\n    constexpr static\
    \ unsigned int Address = 0x40012000 + 0x001C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 12> joffset3;\n    };\n  };\n\n  struct\
    \ jofr4\n  {\n    constexpr static unsigned int Address = 0x40012000 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 12>\
    \ joffset4;\n    };\n  };\n\n  struct htr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012000 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 12> ht;\n    };\n  };\n\n  struct ltr\n  {\n\
    \    constexpr static unsigned int Address = 0x40012000 + 0x0028;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 12> lt;\n    };\n\
    \  };\n\n  struct sqr1\n  {\n    constexpr static unsigned int Address = 0x40012000\
    \ + 0x002C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 20, 4> l;\n      BitFieldModel<uint32_t, 15, 5> sq16;\n      BitFieldModel<uint32_t,\
    \ 10, 5> sq15;\n      BitFieldModel<uint32_t, 5, 5> sq14;\n      BitFieldModel<uint32_t,\
    \ 0, 5> sq13;\n    };\n  };\n\n  struct sqr2\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012000 + 0x0030;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 5> sq12;\n      BitFieldModel<uint32_t, 20,\
    \ 5> sq11;\n      BitFieldModel<uint32_t, 15, 5> sq10;\n      BitFieldModel<uint32_t,\
    \ 10, 5> sq9;\n      BitFieldModel<uint32_t, 5, 5> sq8;\n      BitFieldModel<uint32_t,\
    \ 0, 5> sq7;\n    };\n  };\n\n  struct sqr3\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012000 + 0x0034;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 5> sq6;\n      BitFieldModel<uint32_t, 20,\
    \ 5> sq5;\n      BitFieldModel<uint32_t, 15, 5> sq4;\n      BitFieldModel<uint32_t,\
    \ 10, 5> sq3;\n      BitFieldModel<uint32_t, 5, 5> sq2;\n      BitFieldModel<uint32_t,\
    \ 0, 5> sq1;\n    };\n  };\n\n  struct jsqr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012000 + 0x0038;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 20, 2> jl;\n      BitFieldModel<uint32_t, 15, 5>\
    \ jsq4;\n      BitFieldModel<uint32_t, 10, 5> jsq3;\n      BitFieldModel<uint32_t,\
    \ 5, 5> jsq2;\n      BitFieldModel<uint32_t, 0, 5> jsq1;\n    };\n  };\n\n  struct\
    \ jdr1\n  {\n    constexpr static unsigned int Address = 0x40012000 + 0x003C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ jdata;\n    };\n  };\n\n  struct jdr2\n  {\n    constexpr static unsigned int\
    \ Address = 0x40012000 + 0x0040;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> jdata;\n    };\n  };\n\n  struct jdr3\n  {\n\
    \    constexpr static unsigned int Address = 0x40012000 + 0x0044;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> jdata;\n \
    \   };\n  };\n\n  struct jdr4\n  {\n    constexpr static unsigned int Address\
    \ = 0x40012000 + 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> jdata;\n    };\n  };\n\n  struct dr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012000 + 0x004C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> data;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_ADC1_H */"
  name: ADC1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_CRC_H\n#define DRAL_STM32F411_CRC_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct crc\n\
    {\n  struct dr\n  {\n    constexpr static unsigned int Address = 0x40023000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> dr;\n    };\n  };\n\n  struct idr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40023000 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> idr;\n    };\n  };\n\n  struct cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40023000 + 0x0008;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1> cr;\n    };\n\
    \  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_CRC_H */"
  name: CRC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DBG_H\n#define DRAL_STM32F411_DBG_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct dbg\n\
    {\n  struct dbgmcu_idcode\n  {\n    constexpr static unsigned int Address = 0xE0042000\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 12> dev_id;\n      BitFieldModel<uint32_t, 16, 16> rev_id;\n    };\n  };\n\
    \n  struct dbgmcu_cr\n  {\n    constexpr static unsigned int Address = 0xE0042000\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> dbg_sleep;\n      BitFieldModel<uint32_t, 1, 1> dbg_stop;\n      BitFieldModel<uint32_t,\
    \ 2, 1> dbg_standby;\n      BitFieldModel<uint32_t, 5, 1> trace_ioen;\n      BitFieldModel<uint32_t,\
    \ 6, 2> trace_mode;\n    };\n  };\n\n  struct dbgmcu_apb1_fz\n  {\n    constexpr\
    \ static unsigned int Address = 0xE0042000 + 0x0008;\n    union\n    {\n     \
    \ uint32_t value;\n      BitFieldModel<uint32_t, 0, 1> dbg_tim2_stop;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dbg_tim3_stop;\n      BitFieldModel<uint32_t, 2, 1> dbg_tim4_stop;\n \
    \     BitFieldModel<uint32_t, 3, 1> dbg_tim5_stop;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dbg_rtc_stop;\n      BitFieldModel<uint32_t, 11, 1> dbg_wwdg_stop;\n\
    \      BitFieldModel<uint32_t, 12, 1> dbg_iwdeg_stop;\n      BitFieldModel<uint32_t,\
    \ 21, 1> dbg_i2c1_smbus_timeout;\n      BitFieldModel<uint32_t, 22, 1> dbg_i2c2_smbus_timeout;\n\
    \      BitFieldModel<uint32_t, 23, 1> dbg_i2c3smbus_timeout;\n    };\n  };\n\n\
    \  struct dbgmcu_apb2_fz\n  {\n    constexpr static unsigned int Address = 0xE0042000\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> dbg_tim1_stop;\n      BitFieldModel<uint32_t, 16, 1> dbg_tim9_stop;\n\
    \      BitFieldModel<uint32_t, 17, 1> dbg_tim10_stop;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbg_tim11_stop;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_DBG_H\
    \ */"
  name: DBG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_EXTI_H\n#define DRAL_STM32F411_EXTI_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct exti\n\
    {\n  struct imr\n  {\n    constexpr static unsigned int Address = 0x40013C00 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> mr0;\n      BitFieldModel<uint32_t, 1, 1> mr1;\n      BitFieldModel<uint32_t,\
    \ 2, 1> mr2;\n      BitFieldModel<uint32_t, 3, 1> mr3;\n      BitFieldModel<uint32_t,\
    \ 4, 1> mr4;\n      BitFieldModel<uint32_t, 5, 1> mr5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> mr6;\n      BitFieldModel<uint32_t, 7, 1> mr7;\n      BitFieldModel<uint32_t,\
    \ 8, 1> mr8;\n      BitFieldModel<uint32_t, 9, 1> mr9;\n      BitFieldModel<uint32_t,\
    \ 10, 1> mr10;\n      BitFieldModel<uint32_t, 11, 1> mr11;\n      BitFieldModel<uint32_t,\
    \ 12, 1> mr12;\n      BitFieldModel<uint32_t, 13, 1> mr13;\n      BitFieldModel<uint32_t,\
    \ 14, 1> mr14;\n      BitFieldModel<uint32_t, 15, 1> mr15;\n      BitFieldModel<uint32_t,\
    \ 16, 1> mr16;\n      BitFieldModel<uint32_t, 17, 1> mr17;\n      BitFieldModel<uint32_t,\
    \ 18, 1> mr18;\n      BitFieldModel<uint32_t, 19, 1> mr19;\n      BitFieldModel<uint32_t,\
    \ 20, 1> mr20;\n      BitFieldModel<uint32_t, 21, 1> mr21;\n      BitFieldModel<uint32_t,\
    \ 22, 1> mr22;\n    };\n  };\n\n  struct emr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013C00 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> mr0;\n      BitFieldModel<uint32_t, 1, 1>\
    \ mr1;\n      BitFieldModel<uint32_t, 2, 1> mr2;\n      BitFieldModel<uint32_t,\
    \ 3, 1> mr3;\n      BitFieldModel<uint32_t, 4, 1> mr4;\n      BitFieldModel<uint32_t,\
    \ 5, 1> mr5;\n      BitFieldModel<uint32_t, 6, 1> mr6;\n      BitFieldModel<uint32_t,\
    \ 7, 1> mr7;\n      BitFieldModel<uint32_t, 8, 1> mr8;\n      BitFieldModel<uint32_t,\
    \ 9, 1> mr9;\n      BitFieldModel<uint32_t, 10, 1> mr10;\n      BitFieldModel<uint32_t,\
    \ 11, 1> mr11;\n      BitFieldModel<uint32_t, 12, 1> mr12;\n      BitFieldModel<uint32_t,\
    \ 13, 1> mr13;\n      BitFieldModel<uint32_t, 14, 1> mr14;\n      BitFieldModel<uint32_t,\
    \ 15, 1> mr15;\n      BitFieldModel<uint32_t, 16, 1> mr16;\n      BitFieldModel<uint32_t,\
    \ 17, 1> mr17;\n      BitFieldModel<uint32_t, 18, 1> mr18;\n      BitFieldModel<uint32_t,\
    \ 19, 1> mr19;\n      BitFieldModel<uint32_t, 20, 1> mr20;\n      BitFieldModel<uint32_t,\
    \ 21, 1> mr21;\n      BitFieldModel<uint32_t, 22, 1> mr22;\n    };\n  };\n\n \
    \ struct rtsr\n  {\n    constexpr static unsigned int Address = 0x40013C00 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1>\
    \ tr0;\n      BitFieldModel<uint32_t, 1, 1> tr1;\n      BitFieldModel<uint32_t,\
    \ 2, 1> tr2;\n      BitFieldModel<uint32_t, 3, 1> tr3;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tr4;\n      BitFieldModel<uint32_t, 5, 1> tr5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tr6;\n      BitFieldModel<uint32_t, 7, 1> tr7;\n      BitFieldModel<uint32_t,\
    \ 8, 1> tr8;\n      BitFieldModel<uint32_t, 9, 1> tr9;\n      BitFieldModel<uint32_t,\
    \ 10, 1> tr10;\n      BitFieldModel<uint32_t, 11, 1> tr11;\n      BitFieldModel<uint32_t,\
    \ 12, 1> tr12;\n      BitFieldModel<uint32_t, 13, 1> tr13;\n      BitFieldModel<uint32_t,\
    \ 14, 1> tr14;\n      BitFieldModel<uint32_t, 15, 1> tr15;\n      BitFieldModel<uint32_t,\
    \ 16, 1> tr16;\n      BitFieldModel<uint32_t, 17, 1> tr17;\n      BitFieldModel<uint32_t,\
    \ 18, 1> tr18;\n      BitFieldModel<uint32_t, 19, 1> tr19;\n      BitFieldModel<uint32_t,\
    \ 20, 1> tr20;\n      BitFieldModel<uint32_t, 21, 1> tr21;\n      BitFieldModel<uint32_t,\
    \ 22, 1> tr22;\n    };\n  };\n\n  struct ftsr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013C00 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> tr0;\n      BitFieldModel<uint32_t, 1, 1>\
    \ tr1;\n      BitFieldModel<uint32_t, 2, 1> tr2;\n      BitFieldModel<uint32_t,\
    \ 3, 1> tr3;\n      BitFieldModel<uint32_t, 4, 1> tr4;\n      BitFieldModel<uint32_t,\
    \ 5, 1> tr5;\n      BitFieldModel<uint32_t, 6, 1> tr6;\n      BitFieldModel<uint32_t,\
    \ 7, 1> tr7;\n      BitFieldModel<uint32_t, 8, 1> tr8;\n      BitFieldModel<uint32_t,\
    \ 9, 1> tr9;\n      BitFieldModel<uint32_t, 10, 1> tr10;\n      BitFieldModel<uint32_t,\
    \ 11, 1> tr11;\n      BitFieldModel<uint32_t, 12, 1> tr12;\n      BitFieldModel<uint32_t,\
    \ 13, 1> tr13;\n      BitFieldModel<uint32_t, 14, 1> tr14;\n      BitFieldModel<uint32_t,\
    \ 15, 1> tr15;\n      BitFieldModel<uint32_t, 16, 1> tr16;\n      BitFieldModel<uint32_t,\
    \ 17, 1> tr17;\n      BitFieldModel<uint32_t, 18, 1> tr18;\n      BitFieldModel<uint32_t,\
    \ 19, 1> tr19;\n      BitFieldModel<uint32_t, 20, 1> tr20;\n      BitFieldModel<uint32_t,\
    \ 21, 1> tr21;\n      BitFieldModel<uint32_t, 22, 1> tr22;\n    };\n  };\n\n \
    \ struct swier\n  {\n    constexpr static unsigned int Address = 0x40013C00 +\
    \ 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> swier0;\n      BitFieldModel<uint32_t, 1, 1> swier1;\n      BitFieldModel<uint32_t,\
    \ 2, 1> swier2;\n      BitFieldModel<uint32_t, 3, 1> swier3;\n      BitFieldModel<uint32_t,\
    \ 4, 1> swier4;\n      BitFieldModel<uint32_t, 5, 1> swier5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> swier6;\n      BitFieldModel<uint32_t, 7, 1> swier7;\n      BitFieldModel<uint32_t,\
    \ 8, 1> swier8;\n      BitFieldModel<uint32_t, 9, 1> swier9;\n      BitFieldModel<uint32_t,\
    \ 10, 1> swier10;\n      BitFieldModel<uint32_t, 11, 1> swier11;\n      BitFieldModel<uint32_t,\
    \ 12, 1> swier12;\n      BitFieldModel<uint32_t, 13, 1> swier13;\n      BitFieldModel<uint32_t,\
    \ 14, 1> swier14;\n      BitFieldModel<uint32_t, 15, 1> swier15;\n      BitFieldModel<uint32_t,\
    \ 16, 1> swier16;\n      BitFieldModel<uint32_t, 17, 1> swier17;\n      BitFieldModel<uint32_t,\
    \ 18, 1> swier18;\n      BitFieldModel<uint32_t, 19, 1> swier19;\n      BitFieldModel<uint32_t,\
    \ 20, 1> swier20;\n      BitFieldModel<uint32_t, 21, 1> swier21;\n      BitFieldModel<uint32_t,\
    \ 22, 1> swier22;\n    };\n  };\n\n  struct pr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013C00 + 0x0014;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> pr0;\n      BitFieldModel<uint32_t, 1, 1>\
    \ pr1;\n      BitFieldModel<uint32_t, 2, 1> pr2;\n      BitFieldModel<uint32_t,\
    \ 3, 1> pr3;\n      BitFieldModel<uint32_t, 4, 1> pr4;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pr5;\n      BitFieldModel<uint32_t, 6, 1> pr6;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pr7;\n      BitFieldModel<uint32_t, 8, 1> pr8;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pr9;\n      BitFieldModel<uint32_t, 10, 1> pr10;\n      BitFieldModel<uint32_t,\
    \ 11, 1> pr11;\n      BitFieldModel<uint32_t, 12, 1> pr12;\n      BitFieldModel<uint32_t,\
    \ 13, 1> pr13;\n      BitFieldModel<uint32_t, 14, 1> pr14;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pr15;\n      BitFieldModel<uint32_t, 16, 1> pr16;\n      BitFieldModel<uint32_t,\
    \ 17, 1> pr17;\n      BitFieldModel<uint32_t, 18, 1> pr18;\n      BitFieldModel<uint32_t,\
    \ 19, 1> pr19;\n      BitFieldModel<uint32_t, 20, 1> pr20;\n      BitFieldModel<uint32_t,\
    \ 21, 1> pr21;\n      BitFieldModel<uint32_t, 22, 1> pr22;\n    };\n  };\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_EXTI_H */"
  name: EXTI
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FLASH_H\n#define DRAL_STM32F411_FLASH_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct flash\n\
    {\n  struct acr\n  {\n    constexpr static unsigned int Address = 0x40023C00 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 3> latency;\n      BitFieldModel<uint32_t, 8, 1> prften;\n      BitFieldModel<uint32_t,\
    \ 9, 1> icen;\n      BitFieldModel<uint32_t, 10, 1> dcen;\n      BitFieldModel<uint32_t,\
    \ 11, 1> icrst;\n      BitFieldModel<uint32_t, 12, 1> dcrst;\n    };\n  };\n\n\
    \  struct keyr\n  {\n    constexpr static unsigned int Address = 0x40023C00 +\
    \ 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> key;\n    };\n  };\n\n  struct optkeyr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40023C00 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> optkey;\n    };\n  };\n\n  struct sr\n \
    \ {\n    constexpr static unsigned int Address = 0x40023C00 + 0x000C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1> eop;\n    \
    \  BitFieldModel<uint32_t, 1, 1> operr;\n      BitFieldModel<uint32_t, 4, 1> wrperr;\n\
    \      BitFieldModel<uint32_t, 5, 1> pgaerr;\n      BitFieldModel<uint32_t, 6,\
    \ 1> pgperr;\n      BitFieldModel<uint32_t, 7, 1> pgserr;\n      BitFieldModel<uint32_t,\
    \ 16, 1> bsy;\n    };\n  };\n\n  struct cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40023C00 + 0x0010;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> pg;\n      BitFieldModel<uint32_t, 1, 1>\
    \ ser;\n      BitFieldModel<uint32_t, 2, 1> mer;\n      BitFieldModel<uint32_t,\
    \ 3, 4> snb;\n      BitFieldModel<uint32_t, 8, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 16, 1> strt;\n      BitFieldModel<uint32_t, 24, 1> eopie;\n      BitFieldModel<uint32_t,\
    \ 25, 1> errie;\n      BitFieldModel<uint32_t, 31, 1> lock;\n    };\n  };\n\n\
    \  struct optcr\n  {\n    constexpr static unsigned int Address = 0x40023C00 +\
    \ 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> optlock;\n      BitFieldModel<uint32_t, 1, 1> optstrt;\n      BitFieldModel<uint32_t,\
    \ 2, 2> bor_lev;\n      BitFieldModel<uint32_t, 5, 1> wdg_sw;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nrst_stop;\n      BitFieldModel<uint32_t, 7, 1> nrst_stdby;\n      BitFieldModel<uint32_t,\
    \ 8, 8> rdp;\n      BitFieldModel<uint32_t, 16, 12> nwrp;\n    };\n  };\n\n};\n\
    \n}\n\n#endif /* DRAL_STM32F411_FLASH_H */"
  name: FLASH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_IWDG_H\n#define DRAL_STM32F411_IWDG_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct iwdg\n\
    {\n  struct kr\n  {\n    constexpr static unsigned int Address = 0x40003000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> key;\n    };\n  };\n\n  struct pr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003000 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 3> pr;\n    };\n  };\n\n  struct rlr\n  {\n\
    \    constexpr static unsigned int Address = 0x40003000 + 0x0008;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 12> rl;\n    };\n\
    \  };\n\n  struct sr\n  {\n    constexpr static unsigned int Address = 0x40003000\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 1, 1> rvu;\n      BitFieldModel<uint32_t, 0, 1> pvu;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_IWDG_H */"
  name: IWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_DEVICE_H\n#define DRAL_STM32F411_OTG_FS_DEVICE_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct otg_fs_device\n\
    {\n  struct fs_dcfg\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 2> dspd;\n      BitFieldModel<uint32_t, 2, 1> nzlsohsk;\n      BitFieldModel<uint32_t,\
    \ 4, 7> dad;\n      BitFieldModel<uint32_t, 11, 2> pfivl;\n    };\n  };\n\n  struct\
    \ fs_dctl\n  {\n    constexpr static unsigned int Address = 0x50000800 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1>\
    \ rwusig;\n      BitFieldModel<uint32_t, 1, 1> sdis;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ginsts;\n      BitFieldModel<uint32_t, 3, 1> gonsts;\n      BitFieldModel<uint32_t,\
    \ 4, 3> tctl;\n      BitFieldModel<uint32_t, 7, 1> sginak;\n      BitFieldModel<uint32_t,\
    \ 8, 1> cginak;\n      BitFieldModel<uint32_t, 9, 1> sgonak;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cgonak;\n      BitFieldModel<uint32_t, 11, 1> poprgdne;\n    };\n  };\n\
    \n  struct fs_dsts\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> suspsts;\n      BitFieldModel<uint32_t, 1, 2> enumspd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> eerr;\n      BitFieldModel<uint32_t, 8, 14> fnsof;\n    };\n  };\n\n \
    \ struct fs_diepmsk\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrcm;\n      BitFieldModel<uint32_t, 1, 1> epdm;\n      BitFieldModel<uint32_t,\
    \ 3, 1> tom;\n      BitFieldModel<uint32_t, 4, 1> ittxfemsk;\n      BitFieldModel<uint32_t,\
    \ 5, 1> inepnmm;\n      BitFieldModel<uint32_t, 6, 1> inepnem;\n    };\n  };\n\
    \n  struct fs_doepmsk\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrcm;\n      BitFieldModel<uint32_t, 1, 1> epdm;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stupm;\n      BitFieldModel<uint32_t, 4, 1> otepdm;\n    };\n  };\n\n\
    \  struct fs_daint\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> iepint;\n      BitFieldModel<uint32_t, 16, 16> oepint;\n    };\n  };\n\
    \n  struct fs_daintmsk\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> iepm;\n      BitFieldModel<uint32_t, 16, 16> oepm;\n    };\n  };\n\n\
    \  struct dvbusdis\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> vbusdt;\n    };\n  };\n\n  struct dvbuspulse\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x002C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 12> dvbusp;\n    };\n  };\n\n  struct\
    \ diepempmsk\n  {\n    constexpr static unsigned int Address = 0x50000800 + 0x0034;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ineptxfem;\n    };\n  };\n\n  struct fs_diepctl0\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x0100;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 2> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 17, 1> naksts;\n      BitFieldModel<uint32_t,\
    \ 18, 2> eptyp;\n      BitFieldModel<uint32_t, 21, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 22, 4> txfnum;\n      BitFieldModel<uint32_t, 26, 1> cnak;\n      BitFieldModel<uint32_t,\
    \ 27, 1> snak;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n    };\n  };\n\n  struct diepctl1\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x0120;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 31, 1> epena;\n      BitFieldModel<uint32_t,\
    \ 30, 1> epdis;\n      BitFieldModel<uint32_t, 29, 1> soddfrm_sd1pid;\n      BitFieldModel<uint32_t,\
    \ 28, 1> sevnfrm_sd0pid;\n      BitFieldModel<uint32_t, 27, 1> snak;\n      BitFieldModel<uint32_t,\
    \ 26, 1> cnak;\n      BitFieldModel<uint32_t, 22, 4> txfnum;\n      BitFieldModel<uint32_t,\
    \ 21, 1> stall;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> naksts;\n      BitFieldModel<uint32_t, 16, 1> eonum_dpid;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n    };\n  };\n\n\
    \  struct diepctl2\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0140;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 29, 1> soddfrm_sd1pid;\n      BitFieldModel<uint32_t, 28, 1> sevnfrm_sd0pid;\n\
    \      BitFieldModel<uint32_t, 27, 1> snak;\n      BitFieldModel<uint32_t, 26,\
    \ 1> cnak;\n      BitFieldModel<uint32_t, 22, 4> txfnum;\n      BitFieldModel<uint32_t,\
    \ 21, 1> stall;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> naksts;\n      BitFieldModel<uint32_t, 16, 1> eonum_dpid;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n    };\n  };\n\n\
    \  struct diepctl3\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0160;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 29, 1> soddfrm_sd1pid;\n      BitFieldModel<uint32_t, 28, 1> sevnfrm_sd0pid;\n\
    \      BitFieldModel<uint32_t, 27, 1> snak;\n      BitFieldModel<uint32_t, 26,\
    \ 1> cnak;\n      BitFieldModel<uint32_t, 22, 4> txfnum;\n      BitFieldModel<uint32_t,\
    \ 21, 1> stall;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> naksts;\n      BitFieldModel<uint32_t, 16, 1> eonum_dpid;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n    };\n  };\n\n\
    \  struct doepctl0\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0300;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 27, 1> snak;\n      BitFieldModel<uint32_t, 26, 1> cnak;\n      BitFieldModel<uint32_t,\
    \ 21, 1> stall;\n      BitFieldModel<uint32_t, 20, 1> snpm;\n      BitFieldModel<uint32_t,\
    \ 18, 2> eptyp;\n      BitFieldModel<uint32_t, 17, 1> naksts;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 2> mpsiz;\n    };\n  };\n\n\
    \  struct doepctl1\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0320;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 29, 1> soddfrm_sd1pid;\n      BitFieldModel<uint32_t, 28, 1> sevnfrm_sd0pid;\n\
    \      BitFieldModel<uint32_t, 27, 1> snak;\n      BitFieldModel<uint32_t, 26,\
    \ 1> cnak;\n      BitFieldModel<uint32_t, 21, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 20, 1> snpm;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> naksts;\n      BitFieldModel<uint32_t, 16, 1> eonum_dpid;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n    };\n  };\n\n\
    \  struct doepctl2\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0340;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 29, 1> soddfrm_sd1pid;\n      BitFieldModel<uint32_t, 28, 1> sevnfrm_sd0pid;\n\
    \      BitFieldModel<uint32_t, 27, 1> snak;\n      BitFieldModel<uint32_t, 26,\
    \ 1> cnak;\n      BitFieldModel<uint32_t, 21, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 20, 1> snpm;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> naksts;\n      BitFieldModel<uint32_t, 16, 1> eonum_dpid;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n    };\n  };\n\n\
    \  struct doepctl3\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0360;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> epena;\n      BitFieldModel<uint32_t, 30, 1> epdis;\n      BitFieldModel<uint32_t,\
    \ 29, 1> soddfrm_sd1pid;\n      BitFieldModel<uint32_t, 28, 1> sevnfrm_sd0pid;\n\
    \      BitFieldModel<uint32_t, 27, 1> snak;\n      BitFieldModel<uint32_t, 26,\
    \ 1> cnak;\n      BitFieldModel<uint32_t, 21, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 20, 1> snpm;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> naksts;\n      BitFieldModel<uint32_t, 16, 1> eonum_dpid;\n      BitFieldModel<uint32_t,\
    \ 15, 1> usbaep;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n    };\n  };\n\n\
    \  struct diepint0\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0108;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txfe;\n      BitFieldModel<uint32_t, 6, 1> inepne;\n      BitFieldModel<uint32_t,\
    \ 4, 1> ittxfe;\n      BitFieldModel<uint32_t, 3, 1> toc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> epdisd;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n    };\n  };\n\n \
    \ struct diepint1\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0128;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txfe;\n      BitFieldModel<uint32_t, 6, 1> inepne;\n      BitFieldModel<uint32_t,\
    \ 4, 1> ittxfe;\n      BitFieldModel<uint32_t, 3, 1> toc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> epdisd;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n    };\n  };\n\n \
    \ struct diepint2\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0148;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txfe;\n      BitFieldModel<uint32_t, 6, 1> inepne;\n      BitFieldModel<uint32_t,\
    \ 4, 1> ittxfe;\n      BitFieldModel<uint32_t, 3, 1> toc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> epdisd;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n    };\n  };\n\n \
    \ struct diepint3\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0168;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txfe;\n      BitFieldModel<uint32_t, 6, 1> inepne;\n      BitFieldModel<uint32_t,\
    \ 4, 1> ittxfe;\n      BitFieldModel<uint32_t, 3, 1> toc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> epdisd;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n    };\n  };\n\n \
    \ struct doepint0\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0308;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 6, 1> b2bstup;\n      BitFieldModel<uint32_t, 4, 1> otepdis;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stup;\n      BitFieldModel<uint32_t, 1, 1> epdisd;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrc;\n    };\n  };\n\n  struct doepint1\n  {\n    constexpr static unsigned\
    \ int Address = 0x50000800 + 0x0328;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 6, 1> b2bstup;\n      BitFieldModel<uint32_t, 4,\
    \ 1> otepdis;\n      BitFieldModel<uint32_t, 3, 1> stup;\n      BitFieldModel<uint32_t,\
    \ 1, 1> epdisd;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n    };\n  };\n\n \
    \ struct doepint2\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0348;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 6, 1> b2bstup;\n      BitFieldModel<uint32_t, 4, 1> otepdis;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stup;\n      BitFieldModel<uint32_t, 1, 1> epdisd;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrc;\n    };\n  };\n\n  struct doepint3\n  {\n    constexpr static unsigned\
    \ int Address = 0x50000800 + 0x0368;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 6, 1> b2bstup;\n      BitFieldModel<uint32_t, 4,\
    \ 1> otepdis;\n      BitFieldModel<uint32_t, 3, 1> stup;\n      BitFieldModel<uint32_t,\
    \ 1, 1> epdisd;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n    };\n  };\n\n \
    \ struct dieptsiz0\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0110;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 19, 2> pktcnt;\n      BitFieldModel<uint32_t, 0, 7> xfrsiz;\n    };\n  };\n\n\
    \  struct doeptsiz0\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0310;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 29, 2> stupcnt;\n      BitFieldModel<uint32_t, 19, 1> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 0, 7> xfrsiz;\n    };\n  };\n\n  struct dieptsiz1\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x0130;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 29, 2> mcnt;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n    };\n  };\n\
    \n  struct dieptsiz2\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0150;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 29, 2> mcnt;\n      BitFieldModel<uint32_t, 19, 10> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 0, 19> xfrsiz;\n    };\n  };\n\n  struct dieptsiz3\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x0170;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 29, 2> mcnt;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n    };\n  };\n\
    \n  struct dtxfsts0\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0118;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> ineptfsav;\n    };\n  };\n\n  struct dtxfsts1\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x0138;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 16> ineptfsav;\n    };\n  };\n\n  struct\
    \ dtxfsts2\n  {\n    constexpr static unsigned int Address = 0x50000800 + 0x0158;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ineptfsav;\n    };\n  };\n\n  struct dtxfsts3\n  {\n    constexpr static unsigned\
    \ int Address = 0x50000800 + 0x0178;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ineptfsav;\n    };\n  };\n\n  struct doeptsiz1\n\
    \  {\n    constexpr static unsigned int Address = 0x50000800 + 0x0330;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 29, 2> rxdpid_stupcnt;\n\
    \      BitFieldModel<uint32_t, 19, 10> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 0, 19> xfrsiz;\n    };\n  };\n\n  struct doeptsiz2\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000800 + 0x0350;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 29, 2> rxdpid_stupcnt;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n    };\n  };\n\
    \n  struct doeptsiz3\n  {\n    constexpr static unsigned int Address = 0x50000800\
    \ + 0x0370;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 29, 2> rxdpid_stupcnt;\n      BitFieldModel<uint32_t, 19, 10> pktcnt;\n    \
    \  BitFieldModel<uint32_t, 0, 19> xfrsiz;\n    };\n  };\n\n};\n\n}\n\n#endif /*\
    \ DRAL_STM32F411_OTG_FS_DEVICE_H */"
  name: OTG_FS_DEVICE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_GLOBAL_H\n#define DRAL_STM32F411_OTG_FS_GLOBAL_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct otg_fs_global\n\
    {\n  struct fs_gotgctl\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> srqscs;\n      BitFieldModel<uint32_t, 1, 1> srq;\n      BitFieldModel<uint32_t,\
    \ 4, 1> avaloen;\n      BitFieldModel<uint32_t, 6, 1> bvaloen;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bvaloval;\n      BitFieldModel<uint32_t, 8, 1> hngscs;\n      BitFieldModel<uint32_t,\
    \ 9, 1> hnprq;\n      BitFieldModel<uint32_t, 10, 1> hshnpen;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dhnpen;\n      BitFieldModel<uint32_t, 16, 1> cidsts;\n      BitFieldModel<uint32_t,\
    \ 17, 1> dbct;\n      BitFieldModel<uint32_t, 18, 1> asvld;\n      BitFieldModel<uint32_t,\
    \ 19, 1> bsvld;\n    };\n  };\n\n  struct fs_gotgint\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0004;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 2, 1> sedet;\n      BitFieldModel<uint32_t,\
    \ 8, 1> srsschg;\n      BitFieldModel<uint32_t, 9, 1> hnsschg;\n      BitFieldModel<uint32_t,\
    \ 17, 1> hngdet;\n      BitFieldModel<uint32_t, 18, 1> adtochg;\n      BitFieldModel<uint32_t,\
    \ 19, 1> dbcdne;\n    };\n  };\n\n  struct fs_gahbcfg\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0008;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> gint;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txfelvl;\n      BitFieldModel<uint32_t, 8, 1> ptxfelvl;\n    };\n  };\n\
    \n  struct fs_gusbcfg\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 3> tocal;\n      BitFieldModel<uint32_t, 6, 1> physel;\n      BitFieldModel<uint32_t,\
    \ 8, 1> srpcap;\n      BitFieldModel<uint32_t, 9, 1> hnpcap;\n      BitFieldModel<uint32_t,\
    \ 10, 4> trdt;\n      BitFieldModel<uint32_t, 29, 1> fhmod;\n      BitFieldModel<uint32_t,\
    \ 30, 1> fdmod;\n      BitFieldModel<uint32_t, 31, 1> ctxpkt;\n    };\n  };\n\n\
    \  struct fs_grstctl\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> csrst;\n      BitFieldModel<uint32_t, 1, 1> hsrst;\n      BitFieldModel<uint32_t,\
    \ 2, 1> fcrst;\n      BitFieldModel<uint32_t, 4, 1> rxfflsh;\n      BitFieldModel<uint32_t,\
    \ 5, 1> txfflsh;\n      BitFieldModel<uint32_t, 6, 5> txfnum;\n      BitFieldModel<uint32_t,\
    \ 31, 1> ahbidl;\n    };\n  };\n\n  struct fs_gintsts\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0014;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> cmod;\n      BitFieldModel<uint32_t,\
    \ 1, 1> mmis;\n      BitFieldModel<uint32_t, 2, 1> otgint;\n      BitFieldModel<uint32_t,\
    \ 3, 1> sof;\n      BitFieldModel<uint32_t, 4, 1> rxflvl;\n      BitFieldModel<uint32_t,\
    \ 5, 1> nptxfe;\n      BitFieldModel<uint32_t, 6, 1> ginakeff;\n      BitFieldModel<uint32_t,\
    \ 7, 1> goutnakeff;\n      BitFieldModel<uint32_t, 10, 1> esusp;\n      BitFieldModel<uint32_t,\
    \ 11, 1> usbsusp;\n      BitFieldModel<uint32_t, 12, 1> usbrst;\n      BitFieldModel<uint32_t,\
    \ 13, 1> enumdne;\n      BitFieldModel<uint32_t, 14, 1> isoodrp;\n      BitFieldModel<uint32_t,\
    \ 15, 1> eopf;\n      BitFieldModel<uint32_t, 18, 1> iepint;\n      BitFieldModel<uint32_t,\
    \ 19, 1> oepint;\n      BitFieldModel<uint32_t, 20, 1> iisoixfr;\n      BitFieldModel<uint32_t,\
    \ 21, 1> ipxfr_incompisoout;\n      BitFieldModel<uint32_t, 24, 1> hprtint;\n\
    \      BitFieldModel<uint32_t, 25, 1> hcint;\n      BitFieldModel<uint32_t, 26,\
    \ 1> ptxfe;\n      BitFieldModel<uint32_t, 28, 1> cidschg;\n      BitFieldModel<uint32_t,\
    \ 29, 1> discint;\n      BitFieldModel<uint32_t, 30, 1> srqint;\n      BitFieldModel<uint32_t,\
    \ 31, 1> wkupint;\n    };\n  };\n\n  struct fs_gintmsk\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0018;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 1, 1> mmism;\n      BitFieldModel<uint32_t,\
    \ 2, 1> otgint;\n      BitFieldModel<uint32_t, 3, 1> sofm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> rxflvlm;\n      BitFieldModel<uint32_t, 5, 1> nptxfem;\n      BitFieldModel<uint32_t,\
    \ 6, 1> ginakeffm;\n      BitFieldModel<uint32_t, 7, 1> gonakeffm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> esuspm;\n      BitFieldModel<uint32_t, 11, 1> usbsuspm;\n      BitFieldModel<uint32_t,\
    \ 12, 1> usbrst;\n      BitFieldModel<uint32_t, 13, 1> enumdnem;\n      BitFieldModel<uint32_t,\
    \ 14, 1> isoodrpm;\n      BitFieldModel<uint32_t, 15, 1> eopfm;\n      BitFieldModel<uint32_t,\
    \ 17, 1> epmism;\n      BitFieldModel<uint32_t, 18, 1> iepint;\n      BitFieldModel<uint32_t,\
    \ 19, 1> oepint;\n      BitFieldModel<uint32_t, 20, 1> iisoixfrm;\n      BitFieldModel<uint32_t,\
    \ 21, 1> ipxfrm_iisooxfrm;\n      BitFieldModel<uint32_t, 24, 1> prtim;\n    \
    \  BitFieldModel<uint32_t, 25, 1> hcim;\n      BitFieldModel<uint32_t, 26, 1>\
    \ ptxfem;\n      BitFieldModel<uint32_t, 28, 1> cidschgm;\n      BitFieldModel<uint32_t,\
    \ 29, 1> discint;\n      BitFieldModel<uint32_t, 30, 1> srqim;\n      BitFieldModel<uint32_t,\
    \ 31, 1> wuim;\n    };\n  };\n\n  struct fs_grxstsr_device\n  {\n    constexpr\
    \ static unsigned int Address = 0x50000000 + 0x001C;\n    union\n    {\n     \
    \ uint32_t value;\n      BitFieldModel<uint32_t, 0, 4> epnum;\n      BitFieldModel<uint32_t,\
    \ 4, 11> bcnt;\n      BitFieldModel<uint32_t, 15, 2> dpid;\n      BitFieldModel<uint32_t,\
    \ 17, 4> pktsts;\n      BitFieldModel<uint32_t, 21, 4> frmnum;\n    };\n  };\n\
    \n  struct fs_grxstsp_device\n  {\n    constexpr static unsigned int Address =\
    \ 0x50000000 + 0x0020;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 4> epnum;\n      BitFieldModel<uint32_t, 4, 11> bcnt;\n      BitFieldModel<uint32_t,\
    \ 15, 2> dpid;\n      BitFieldModel<uint32_t, 17, 4> pktsts;\n      BitFieldModel<uint32_t,\
    \ 21, 4> frmnum;\n    };\n  };\n\n  struct fs_grxstsr_host\n  {\n    constexpr\
    \ static unsigned int Address = 0x50000000 + 0x001C;\n    union\n    {\n     \
    \ uint32_t value;\n      BitFieldModel<uint32_t, 0, 4> epnum;\n      BitFieldModel<uint32_t,\
    \ 4, 11> bcnt;\n      BitFieldModel<uint32_t, 15, 2> dpid;\n      BitFieldModel<uint32_t,\
    \ 17, 4> pktsts;\n      BitFieldModel<uint32_t, 21, 4> frmnum;\n    };\n  };\n\
    \n  struct fs_grxstsp_host\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x0020;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 4> epnum;\n      BitFieldModel<uint32_t, 4, 11> bcnt;\n      BitFieldModel<uint32_t,\
    \ 15, 2> dpid;\n      BitFieldModel<uint32_t, 17, 4> pktsts;\n      BitFieldModel<uint32_t,\
    \ 21, 4> frmnum;\n    };\n  };\n\n  struct fs_grxfsiz\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0024;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 16> rxfd;\n    };\n  };\n\n  struct\
    \ fs_gnptxfsiz_device\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> tx0fsa;\n      BitFieldModel<uint32_t, 16, 16> tx0fd;\n    };\n  };\n\
    \n  struct fs_gnptxfsiz_host\n  {\n    constexpr static unsigned int Address =\
    \ 0x50000000 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> nptxfsa;\n      BitFieldModel<uint32_t, 16, 16> nptxfd;\n    };\n  };\n\
    \n  struct fs_gnptxsts\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x002C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> nptxfsav;\n      BitFieldModel<uint32_t, 16, 8> nptqxsav;\n      BitFieldModel<uint32_t,\
    \ 24, 7> nptxqtop;\n    };\n  };\n\n  struct fs_gccfg\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0038;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 16, 1> pwrdwn;\n      BitFieldModel<uint32_t,\
    \ 18, 1> vbusasen;\n      BitFieldModel<uint32_t, 19, 1> vbusbsen;\n      BitFieldModel<uint32_t,\
    \ 20, 1> sofouten;\n      BitFieldModel<uint32_t, 21, 1> novbussens;\n    };\n\
    \  };\n\n  struct fs_cid\n  {\n    constexpr static unsigned int Address = 0x50000000\
    \ + 0x003C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> product_id;\n    };\n  };\n\n  struct fs_hptxfsiz\n  {\n    constexpr\
    \ static unsigned int Address = 0x50000000 + 0x0100;\n    union\n    {\n     \
    \ uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ptxsa;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ptxfsiz;\n    };\n  };\n\n  struct fs_dieptxf1\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000000 + 0x0104;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 16> ineptxsa;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ineptxfd;\n    };\n  };\n\n  struct fs_dieptxf2\n  {\n    constexpr\
    \ static unsigned int Address = 0x50000000 + 0x0108;\n    union\n    {\n     \
    \ uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ineptxsa;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ineptxfd;\n    };\n  };\n\n  struct fs_dieptxf3\n  {\n    constexpr\
    \ static unsigned int Address = 0x50000000 + 0x010C;\n    union\n    {\n     \
    \ uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ineptxsa;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ineptxfd;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_GLOBAL_H\
    \ */"
  name: OTG_FS_GLOBAL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_HOST_H\n#define DRAL_STM32F411_OTG_FS_HOST_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct otg_fs_host\n\
    {\n  struct fs_hcfg\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fslspcs;\n      BitFieldModel<uint32_t, 2, 1> fslss;\n    };\n  };\n\n\
    \  struct hfir\n  {\n    constexpr static unsigned int Address = 0x50000400 +\
    \ 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> frivl;\n    };\n  };\n\n  struct fs_hfnum\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0008;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 16> frnum;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ftrem;\n    };\n  };\n\n  struct fs_hptxsts\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0010;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 16> ptxfsavl;\n      BitFieldModel<uint32_t,\
    \ 16, 8> ptxqsav;\n      BitFieldModel<uint32_t, 24, 8> ptxqtop;\n    };\n  };\n\
    \n  struct haint\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> haint;\n    };\n  };\n\n  struct haintmsk\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0018;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 16> haintm;\n    };\n  };\n\n  struct\
    \ fs_hprt\n  {\n    constexpr static unsigned int Address = 0x50000400 + 0x0040;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1>\
    \ pcsts;\n      BitFieldModel<uint32_t, 1, 1> pcdet;\n      BitFieldModel<uint32_t,\
    \ 2, 1> pena;\n      BitFieldModel<uint32_t, 3, 1> penchng;\n      BitFieldModel<uint32_t,\
    \ 4, 1> poca;\n      BitFieldModel<uint32_t, 5, 1> pocchng;\n      BitFieldModel<uint32_t,\
    \ 6, 1> pres;\n      BitFieldModel<uint32_t, 7, 1> psusp;\n      BitFieldModel<uint32_t,\
    \ 8, 1> prst;\n      BitFieldModel<uint32_t, 10, 2> plsts;\n      BitFieldModel<uint32_t,\
    \ 12, 1> ppwr;\n      BitFieldModel<uint32_t, 13, 4> ptctl;\n      BitFieldModel<uint32_t,\
    \ 17, 2> pspd;\n    };\n  };\n\n  struct fs_hcchar0\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0100;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar1\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0120;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar2\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0140;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar3\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0160;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar4\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0180;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar5\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01A0;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar6\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01C0;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcchar7\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01E0;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 11> mpsiz;\n      BitFieldModel<uint32_t,\
    \ 11, 4> epnum;\n      BitFieldModel<uint32_t, 15, 1> epdir;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lsdev;\n      BitFieldModel<uint32_t, 18, 2> eptyp;\n      BitFieldModel<uint32_t,\
    \ 20, 2> mcnt;\n      BitFieldModel<uint32_t, 22, 7> dad;\n      BitFieldModel<uint32_t,\
    \ 29, 1> oddfrm;\n      BitFieldModel<uint32_t, 30, 1> chdis;\n      BitFieldModel<uint32_t,\
    \ 31, 1> chena;\n    };\n  };\n\n  struct fs_hcint0\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0108;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chh;\n      BitFieldModel<uint32_t, 3, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nak;\n      BitFieldModel<uint32_t, 5, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txerr;\n      BitFieldModel<uint32_t, 8, 1> bberr;\n      BitFieldModel<uint32_t,\
    \ 9, 1> frmor;\n      BitFieldModel<uint32_t, 10, 1> dterr;\n    };\n  };\n\n\
    \  struct fs_hcint1\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x0128;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrc;\n      BitFieldModel<uint32_t, 1, 1> chh;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stall;\n      BitFieldModel<uint32_t, 4, 1> nak;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ack;\n      BitFieldModel<uint32_t, 7, 1> txerr;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberr;\n      BitFieldModel<uint32_t, 9, 1> frmor;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterr;\n    };\n  };\n\n  struct fs_hcint2\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0148;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chh;\n      BitFieldModel<uint32_t, 3, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nak;\n      BitFieldModel<uint32_t, 5, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txerr;\n      BitFieldModel<uint32_t, 8, 1> bberr;\n      BitFieldModel<uint32_t,\
    \ 9, 1> frmor;\n      BitFieldModel<uint32_t, 10, 1> dterr;\n    };\n  };\n\n\
    \  struct fs_hcint3\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x0168;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrc;\n      BitFieldModel<uint32_t, 1, 1> chh;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stall;\n      BitFieldModel<uint32_t, 4, 1> nak;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ack;\n      BitFieldModel<uint32_t, 7, 1> txerr;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberr;\n      BitFieldModel<uint32_t, 9, 1> frmor;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterr;\n    };\n  };\n\n  struct fs_hcint4\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0188;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chh;\n      BitFieldModel<uint32_t, 3, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nak;\n      BitFieldModel<uint32_t, 5, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txerr;\n      BitFieldModel<uint32_t, 8, 1> bberr;\n      BitFieldModel<uint32_t,\
    \ 9, 1> frmor;\n      BitFieldModel<uint32_t, 10, 1> dterr;\n    };\n  };\n\n\
    \  struct fs_hcint5\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x01A8;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrc;\n      BitFieldModel<uint32_t, 1, 1> chh;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stall;\n      BitFieldModel<uint32_t, 4, 1> nak;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ack;\n      BitFieldModel<uint32_t, 7, 1> txerr;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberr;\n      BitFieldModel<uint32_t, 9, 1> frmor;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterr;\n    };\n  };\n\n  struct fs_hcint6\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01C8;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrc;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chh;\n      BitFieldModel<uint32_t, 3, 1> stall;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nak;\n      BitFieldModel<uint32_t, 5, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txerr;\n      BitFieldModel<uint32_t, 8, 1> bberr;\n      BitFieldModel<uint32_t,\
    \ 9, 1> frmor;\n      BitFieldModel<uint32_t, 10, 1> dterr;\n    };\n  };\n\n\
    \  struct fs_hcint7\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x01E8;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> xfrc;\n      BitFieldModel<uint32_t, 1, 1> chh;\n      BitFieldModel<uint32_t,\
    \ 3, 1> stall;\n      BitFieldModel<uint32_t, 4, 1> nak;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ack;\n      BitFieldModel<uint32_t, 7, 1> txerr;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberr;\n      BitFieldModel<uint32_t, 9, 1> frmor;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterr;\n    };\n  };\n\n  struct fs_hcintmsk0\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x010C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk1\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x012C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk2\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x014C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk3\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x016C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk4\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x018C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk5\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01AC;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk6\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01CC;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hcintmsk7\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01EC;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> xfrcm;\n      BitFieldModel<uint32_t,\
    \ 1, 1> chhm;\n      BitFieldModel<uint32_t, 3, 1> stallm;\n      BitFieldModel<uint32_t,\
    \ 4, 1> nakm;\n      BitFieldModel<uint32_t, 5, 1> ackm;\n      BitFieldModel<uint32_t,\
    \ 6, 1> nyet;\n      BitFieldModel<uint32_t, 7, 1> txerrm;\n      BitFieldModel<uint32_t,\
    \ 8, 1> bberrm;\n      BitFieldModel<uint32_t, 9, 1> frmorm;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dterrm;\n    };\n  };\n\n  struct fs_hctsiz0\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0110;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 29, 2> dpid;\n    };\n  };\n\n\
    \  struct fs_hctsiz1\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x0130;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 19> xfrsiz;\n      BitFieldModel<uint32_t, 19, 10> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 29, 2> dpid;\n    };\n  };\n\n  struct fs_hctsiz2\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0150;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 29, 2> dpid;\n    };\n  };\n\n\
    \  struct fs_hctsiz3\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x0170;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 19> xfrsiz;\n      BitFieldModel<uint32_t, 19, 10> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 29, 2> dpid;\n    };\n  };\n\n  struct fs_hctsiz4\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x0190;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 29, 2> dpid;\n    };\n  };\n\n\
    \  struct fs_hctsiz5\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x01B0;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 19> xfrsiz;\n      BitFieldModel<uint32_t, 19, 10> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 29, 2> dpid;\n    };\n  };\n\n  struct fs_hctsiz6\n  {\n    constexpr static\
    \ unsigned int Address = 0x50000400 + 0x01D0;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 19> xfrsiz;\n      BitFieldModel<uint32_t,\
    \ 19, 10> pktcnt;\n      BitFieldModel<uint32_t, 29, 2> dpid;\n    };\n  };\n\n\
    \  struct fs_hctsiz7\n  {\n    constexpr static unsigned int Address = 0x50000400\
    \ + 0x01F0;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 19> xfrsiz;\n      BitFieldModel<uint32_t, 19, 10> pktcnt;\n      BitFieldModel<uint32_t,\
    \ 29, 2> dpid;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_HOST_H\
    \ */"
  name: OTG_FS_HOST
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_PWRCLK_H\n#define DRAL_STM32F411_OTG_FS_PWRCLK_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct otg_fs_pwrclk\n\
    {\n  struct fs_pcgcctl\n  {\n    constexpr static unsigned int Address = 0x50000E00\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> stppclk;\n      BitFieldModel<uint32_t, 1, 1> gatehclk;\n      BitFieldModel<uint32_t,\
    \ 4, 1> physusp;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_PWRCLK_H\
    \ */"
  name: OTG_FS_PWRCLK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_PWR_H\n#define DRAL_STM32F411_PWR_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct pwr\n\
    {\n  struct cr\n  {\n    constexpr static unsigned int Address = 0x40007000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 14, 2> vos;\n      BitFieldModel<uint32_t, 13, 1> adcdc1;\n      BitFieldModel<uint32_t,\
    \ 9, 1> fpds;\n      BitFieldModel<uint32_t, 8, 1> dbp;\n      BitFieldModel<uint32_t,\
    \ 5, 3> pls;\n      BitFieldModel<uint32_t, 4, 1> pvde;\n      BitFieldModel<uint32_t,\
    \ 3, 1> csbf;\n      BitFieldModel<uint32_t, 2, 1> cwuf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> pdds;\n      BitFieldModel<uint32_t, 0, 1> lpds;\n    };\n  };\n\n  struct\
    \ csr\n  {\n    constexpr static unsigned int Address = 0x40007000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1>\
    \ wuf;\n      BitFieldModel<uint32_t, 1, 1> sbf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> pvdo;\n      BitFieldModel<uint32_t, 3, 1> brr;\n      BitFieldModel<uint32_t,\
    \ 8, 1> ewup;\n      BitFieldModel<uint32_t, 9, 1> bre;\n      BitFieldModel<uint32_t,\
    \ 14, 1> vosrdy;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_PWR_H */"
  name: PWR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_RCC_H\n#define DRAL_STM32F411_RCC_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct rcc\n\
    {\n  struct cr\n  {\n    constexpr static unsigned int Address = 0x40023800 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> plli2srdy;\n      BitFieldModel<uint32_t, 26, 1> plli2son;\n      BitFieldModel<uint32_t,\
    \ 25, 1> pllrdy;\n      BitFieldModel<uint32_t, 24, 1> pllon;\n      BitFieldModel<uint32_t,\
    \ 19, 1> csson;\n      BitFieldModel<uint32_t, 18, 1> hsebyp;\n      BitFieldModel<uint32_t,\
    \ 17, 1> hserdy;\n      BitFieldModel<uint32_t, 16, 1> hseon;\n      BitFieldModel<uint32_t,\
    \ 8, 8> hsical;\n      BitFieldModel<uint32_t, 3, 5> hsitrim;\n      BitFieldModel<uint32_t,\
    \ 1, 1> hsirdy;\n      BitFieldModel<uint32_t, 0, 1> hsion;\n    };\n  };\n\n\
    \  struct pllcfgr\n  {\n    constexpr static unsigned int Address = 0x40023800\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> pllq3;\n      BitFieldModel<uint32_t, 26, 1> pllq2;\n      BitFieldModel<uint32_t,\
    \ 25, 1> pllq1;\n      BitFieldModel<uint32_t, 24, 1> pllq0;\n      BitFieldModel<uint32_t,\
    \ 22, 1> pllsrc;\n      BitFieldModel<uint32_t, 17, 1> pllp1;\n      BitFieldModel<uint32_t,\
    \ 16, 1> pllp0;\n      BitFieldModel<uint32_t, 14, 1> plln8;\n      BitFieldModel<uint32_t,\
    \ 13, 1> plln7;\n      BitFieldModel<uint32_t, 12, 1> plln6;\n      BitFieldModel<uint32_t,\
    \ 11, 1> plln5;\n      BitFieldModel<uint32_t, 10, 1> plln4;\n      BitFieldModel<uint32_t,\
    \ 9, 1> plln3;\n      BitFieldModel<uint32_t, 8, 1> plln2;\n      BitFieldModel<uint32_t,\
    \ 7, 1> plln1;\n      BitFieldModel<uint32_t, 6, 1> plln0;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pllm5;\n      BitFieldModel<uint32_t, 4, 1> pllm4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> pllm3;\n      BitFieldModel<uint32_t, 2, 1> pllm2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> pllm1;\n      BitFieldModel<uint32_t, 0, 1> pllm0;\n    };\n  };\n\n \
    \ struct cfgr\n  {\n    constexpr static unsigned int Address = 0x40023800 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ mco2;\n      BitFieldModel<uint32_t, 27, 3> mco2pre;\n      BitFieldModel<uint32_t,\
    \ 24, 3> mco1pre;\n      BitFieldModel<uint32_t, 23, 1> i2ssrc;\n      BitFieldModel<uint32_t,\
    \ 21, 2> mco1;\n      BitFieldModel<uint32_t, 16, 5> rtcpre;\n      BitFieldModel<uint32_t,\
    \ 13, 3> ppre2;\n      BitFieldModel<uint32_t, 10, 3> ppre1;\n      BitFieldModel<uint32_t,\
    \ 4, 4> hpre;\n      BitFieldModel<uint32_t, 3, 1> sws1;\n      BitFieldModel<uint32_t,\
    \ 2, 1> sws0;\n      BitFieldModel<uint32_t, 1, 1> sw1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> sw0;\n    };\n  };\n\n  struct cir\n  {\n    constexpr static unsigned\
    \ int Address = 0x40023800 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 23, 1> cssc;\n      BitFieldModel<uint32_t, 21,\
    \ 1> plli2srdyc;\n      BitFieldModel<uint32_t, 20, 1> pllrdyc;\n      BitFieldModel<uint32_t,\
    \ 19, 1> hserdyc;\n      BitFieldModel<uint32_t, 18, 1> hsirdyc;\n      BitFieldModel<uint32_t,\
    \ 17, 1> lserdyc;\n      BitFieldModel<uint32_t, 16, 1> lsirdyc;\n      BitFieldModel<uint32_t,\
    \ 13, 1> plli2srdyie;\n      BitFieldModel<uint32_t, 12, 1> pllrdyie;\n      BitFieldModel<uint32_t,\
    \ 11, 1> hserdyie;\n      BitFieldModel<uint32_t, 10, 1> hsirdyie;\n      BitFieldModel<uint32_t,\
    \ 9, 1> lserdyie;\n      BitFieldModel<uint32_t, 8, 1> lsirdyie;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cssf;\n      BitFieldModel<uint32_t, 5, 1> plli2srdyf;\n      BitFieldModel<uint32_t,\
    \ 4, 1> pllrdyf;\n      BitFieldModel<uint32_t, 3, 1> hserdyf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> hsirdyf;\n      BitFieldModel<uint32_t, 1, 1> lserdyf;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lsirdyf;\n    };\n  };\n\n  struct ahb1rstr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0010;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 22, 1> dma2rst;\n      BitFieldModel<uint32_t,\
    \ 21, 1> dma1rst;\n      BitFieldModel<uint32_t, 12, 1> crcrst;\n      BitFieldModel<uint32_t,\
    \ 7, 1> gpiohrst;\n      BitFieldModel<uint32_t, 4, 1> gpioerst;\n      BitFieldModel<uint32_t,\
    \ 3, 1> gpiodrst;\n      BitFieldModel<uint32_t, 2, 1> gpiocrst;\n      BitFieldModel<uint32_t,\
    \ 1, 1> gpiobrst;\n      BitFieldModel<uint32_t, 0, 1> gpioarst;\n    };\n  };\n\
    \n  struct ahb2rstr\n  {\n    constexpr static unsigned int Address = 0x40023800\
    \ + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> otgfsrst;\n    };\n  };\n\n  struct apb1rstr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0020;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 28, 1> pwrrst;\n      BitFieldModel<uint32_t,\
    \ 23, 1> i2c3rst;\n      BitFieldModel<uint32_t, 22, 1> i2c2rst;\n      BitFieldModel<uint32_t,\
    \ 21, 1> i2c1rst;\n      BitFieldModel<uint32_t, 17, 1> uart2rst;\n      BitFieldModel<uint32_t,\
    \ 15, 1> spi3rst;\n      BitFieldModel<uint32_t, 14, 1> spi2rst;\n      BitFieldModel<uint32_t,\
    \ 11, 1> wwdgrst;\n      BitFieldModel<uint32_t, 3, 1> tim5rst;\n      BitFieldModel<uint32_t,\
    \ 2, 1> tim4rst;\n      BitFieldModel<uint32_t, 1, 1> tim3rst;\n      BitFieldModel<uint32_t,\
    \ 0, 1> tim2rst;\n    };\n  };\n\n  struct apb2rstr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0024;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 18, 1> tim11rst;\n      BitFieldModel<uint32_t,\
    \ 17, 1> tim10rst;\n      BitFieldModel<uint32_t, 16, 1> tim9rst;\n      BitFieldModel<uint32_t,\
    \ 14, 1> syscfgrst;\n      BitFieldModel<uint32_t, 12, 1> spi1rst;\n      BitFieldModel<uint32_t,\
    \ 11, 1> sdiorst;\n      BitFieldModel<uint32_t, 8, 1> adcrst;\n      BitFieldModel<uint32_t,\
    \ 5, 1> usart6rst;\n      BitFieldModel<uint32_t, 4, 1> usart1rst;\n      BitFieldModel<uint32_t,\
    \ 0, 1> tim1rst;\n    };\n  };\n\n  struct ahb1enr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0030;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 22, 1> dma2en;\n      BitFieldModel<uint32_t,\
    \ 21, 1> dma1en;\n      BitFieldModel<uint32_t, 12, 1> crcen;\n      BitFieldModel<uint32_t,\
    \ 7, 1> gpiohen;\n      BitFieldModel<uint32_t, 4, 1> gpioeen;\n      BitFieldModel<uint32_t,\
    \ 3, 1> gpioden;\n      BitFieldModel<uint32_t, 2, 1> gpiocen;\n      BitFieldModel<uint32_t,\
    \ 1, 1> gpioben;\n      BitFieldModel<uint32_t, 0, 1> gpioaen;\n    };\n  };\n\
    \n  struct ahb2enr\n  {\n    constexpr static unsigned int Address = 0x40023800\
    \ + 0x0034;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> otgfsen;\n    };\n  };\n\n  struct apb1enr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0040;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 28, 1> pwren;\n      BitFieldModel<uint32_t,\
    \ 23, 1> i2c3en;\n      BitFieldModel<uint32_t, 22, 1> i2c2en;\n      BitFieldModel<uint32_t,\
    \ 21, 1> i2c1en;\n      BitFieldModel<uint32_t, 17, 1> usart2en;\n      BitFieldModel<uint32_t,\
    \ 15, 1> spi3en;\n      BitFieldModel<uint32_t, 14, 1> spi2en;\n      BitFieldModel<uint32_t,\
    \ 11, 1> wwdgen;\n      BitFieldModel<uint32_t, 3, 1> tim5en;\n      BitFieldModel<uint32_t,\
    \ 2, 1> tim4en;\n      BitFieldModel<uint32_t, 1, 1> tim3en;\n      BitFieldModel<uint32_t,\
    \ 0, 1> tim2en;\n    };\n  };\n\n  struct apb2enr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40023800 + 0x0044;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> tim1en;\n      BitFieldModel<uint32_t, 4,\
    \ 1> usart1en;\n      BitFieldModel<uint32_t, 5, 1> usart6en;\n      BitFieldModel<uint32_t,\
    \ 8, 1> adc1en;\n      BitFieldModel<uint32_t, 11, 1> sdioen;\n      BitFieldModel<uint32_t,\
    \ 12, 1> spi1en;\n      BitFieldModel<uint32_t, 13, 1> spi4en;\n      BitFieldModel<uint32_t,\
    \ 14, 1> syscfgen;\n      BitFieldModel<uint32_t, 16, 1> tim9en;\n      BitFieldModel<uint32_t,\
    \ 17, 1> tim10en;\n      BitFieldModel<uint32_t, 18, 1> tim11en;\n    };\n  };\n\
    \n  struct ahb1lpenr\n  {\n    constexpr static unsigned int Address = 0x40023800\
    \ + 0x0050;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 22, 1> dma2lpen;\n      BitFieldModel<uint32_t, 21, 1> dma1lpen;\n      BitFieldModel<uint32_t,\
    \ 16, 1> sram1lpen;\n      BitFieldModel<uint32_t, 15, 1> flitflpen;\n      BitFieldModel<uint32_t,\
    \ 12, 1> crclpen;\n      BitFieldModel<uint32_t, 7, 1> gpiohlpen;\n      BitFieldModel<uint32_t,\
    \ 4, 1> gpioelpen;\n      BitFieldModel<uint32_t, 3, 1> gpiodlpen;\n      BitFieldModel<uint32_t,\
    \ 2, 1> gpioclpen;\n      BitFieldModel<uint32_t, 1, 1> gpioblpen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> gpioalpen;\n    };\n  };\n\n  struct ahb2lpenr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0054;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 7, 1> otgfslpen;\n    };\n  };\n\n  struct\
    \ apb1lpenr\n  {\n    constexpr static unsigned int Address = 0x40023800 + 0x0060;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 28, 1>\
    \ pwrlpen;\n      BitFieldModel<uint32_t, 23, 1> i2c3lpen;\n      BitFieldModel<uint32_t,\
    \ 22, 1> i2c2lpen;\n      BitFieldModel<uint32_t, 21, 1> i2c1lpen;\n      BitFieldModel<uint32_t,\
    \ 17, 1> usart2lpen;\n      BitFieldModel<uint32_t, 15, 1> spi3lpen;\n      BitFieldModel<uint32_t,\
    \ 14, 1> spi2lpen;\n      BitFieldModel<uint32_t, 11, 1> wwdglpen;\n      BitFieldModel<uint32_t,\
    \ 3, 1> tim5lpen;\n      BitFieldModel<uint32_t, 2, 1> tim4lpen;\n      BitFieldModel<uint32_t,\
    \ 1, 1> tim3lpen;\n      BitFieldModel<uint32_t, 0, 1> tim2lpen;\n    };\n  };\n\
    \n  struct apb2lpenr\n  {\n    constexpr static unsigned int Address = 0x40023800\
    \ + 0x0064;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> tim1lpen;\n      BitFieldModel<uint32_t, 4, 1> usart1lpen;\n      BitFieldModel<uint32_t,\
    \ 5, 1> usart6lpen;\n      BitFieldModel<uint32_t, 8, 1> adc1lpen;\n      BitFieldModel<uint32_t,\
    \ 11, 1> sdiolpen;\n      BitFieldModel<uint32_t, 12, 1> spi1lpen;\n      BitFieldModel<uint32_t,\
    \ 13, 1> spi4lpen;\n      BitFieldModel<uint32_t, 14, 1> syscfglpen;\n      BitFieldModel<uint32_t,\
    \ 16, 1> tim9lpen;\n      BitFieldModel<uint32_t, 17, 1> tim10lpen;\n      BitFieldModel<uint32_t,\
    \ 18, 1> tim11lpen;\n    };\n  };\n\n  struct bdcr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40023800 + 0x0070;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 16, 1> bdrst;\n      BitFieldModel<uint32_t,\
    \ 15, 1> rtcen;\n      BitFieldModel<uint32_t, 9, 1> rtcsel1;\n      BitFieldModel<uint32_t,\
    \ 8, 1> rtcsel0;\n      BitFieldModel<uint32_t, 2, 1> lsebyp;\n      BitFieldModel<uint32_t,\
    \ 1, 1> lserdy;\n      BitFieldModel<uint32_t, 0, 1> lseon;\n    };\n  };\n\n\
    \  struct csr\n  {\n    constexpr static unsigned int Address = 0x40023800 + 0x0074;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ lpwrrstf;\n      BitFieldModel<uint32_t, 30, 1> wwdgrstf;\n      BitFieldModel<uint32_t,\
    \ 29, 1> wdgrstf;\n      BitFieldModel<uint32_t, 28, 1> sftrstf;\n      BitFieldModel<uint32_t,\
    \ 27, 1> porrstf;\n      BitFieldModel<uint32_t, 26, 1> padrstf;\n      BitFieldModel<uint32_t,\
    \ 25, 1> borrstf;\n      BitFieldModel<uint32_t, 24, 1> rmvf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> lsirdy;\n      BitFieldModel<uint32_t, 0, 1> lsion;\n    };\n  };\n\n\
    \  struct sscgr\n  {\n    constexpr static unsigned int Address = 0x40023800 +\
    \ 0x0080;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 31, 1> sscgen;\n      BitFieldModel<uint32_t, 30, 1> spreadsel;\n      BitFieldModel<uint32_t,\
    \ 13, 15> incstep;\n      BitFieldModel<uint32_t, 0, 13> modper;\n    };\n  };\n\
    \n  struct plli2scfgr\n  {\n    constexpr static unsigned int Address = 0x40023800\
    \ + 0x0084;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 28, 3> plli2srx;\n      BitFieldModel<uint32_t, 6, 9> plli2snx;\n    };\n  };\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_RCC_H */"
  name: RCC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_RTC_H\n#define DRAL_STM32F411_RTC_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct rtc\n\
    {\n  struct tr\n  {\n    constexpr static unsigned int Address = 0x40002800 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 22, 1> pm;\n      BitFieldModel<uint32_t, 20, 2> ht;\n      BitFieldModel<uint32_t,\
    \ 16, 4> hu;\n      BitFieldModel<uint32_t, 12, 3> mnt;\n      BitFieldModel<uint32_t,\
    \ 8, 4> mnu;\n      BitFieldModel<uint32_t, 4, 3> st;\n      BitFieldModel<uint32_t,\
    \ 0, 4> su;\n    };\n  };\n\n  struct dr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40002800 + 0x0004;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 20, 4> yt;\n      BitFieldModel<uint32_t, 16, 4>\
    \ yu;\n      BitFieldModel<uint32_t, 13, 3> wdu;\n      BitFieldModel<uint32_t,\
    \ 12, 1> mt;\n      BitFieldModel<uint32_t, 8, 4> mu;\n      BitFieldModel<uint32_t,\
    \ 4, 2> dt;\n      BitFieldModel<uint32_t, 0, 4> du;\n    };\n  };\n\n  struct\
    \ cr\n  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 23, 1>\
    \ coe;\n      BitFieldModel<uint32_t, 21, 2> osel;\n      BitFieldModel<uint32_t,\
    \ 20, 1> pol;\n      BitFieldModel<uint32_t, 19, 1> cosel;\n      BitFieldModel<uint32_t,\
    \ 18, 1> bkp;\n      BitFieldModel<uint32_t, 17, 1> sub1h;\n      BitFieldModel<uint32_t,\
    \ 16, 1> add1h;\n      BitFieldModel<uint32_t, 15, 1> tsie;\n      BitFieldModel<uint32_t,\
    \ 14, 1> wutie;\n      BitFieldModel<uint32_t, 13, 1> alrbie;\n      BitFieldModel<uint32_t,\
    \ 12, 1> alraie;\n      BitFieldModel<uint32_t, 11, 1> tse;\n      BitFieldModel<uint32_t,\
    \ 10, 1> wute;\n      BitFieldModel<uint32_t, 9, 1> alrbe;\n      BitFieldModel<uint32_t,\
    \ 8, 1> alrae;\n      BitFieldModel<uint32_t, 7, 1> dce;\n      BitFieldModel<uint32_t,\
    \ 6, 1> fmt;\n      BitFieldModel<uint32_t, 5, 1> bypshad;\n      BitFieldModel<uint32_t,\
    \ 4, 1> refckon;\n      BitFieldModel<uint32_t, 3, 1> tsedge;\n      BitFieldModel<uint32_t,\
    \ 0, 3> wcksel;\n    };\n  };\n\n  struct isr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> alrawf;\n      BitFieldModel<uint32_t, 1,\
    \ 1> alrbwf;\n      BitFieldModel<uint32_t, 2, 1> wutwf;\n      BitFieldModel<uint32_t,\
    \ 3, 1> shpf;\n      BitFieldModel<uint32_t, 4, 1> inits;\n      BitFieldModel<uint32_t,\
    \ 5, 1> rsf;\n      BitFieldModel<uint32_t, 6, 1> initf;\n      BitFieldModel<uint32_t,\
    \ 7, 1> init;\n      BitFieldModel<uint32_t, 8, 1> alraf;\n      BitFieldModel<uint32_t,\
    \ 9, 1> alrbf;\n      BitFieldModel<uint32_t, 10, 1> wutf;\n      BitFieldModel<uint32_t,\
    \ 11, 1> tsf;\n      BitFieldModel<uint32_t, 12, 1> tsovf;\n      BitFieldModel<uint32_t,\
    \ 13, 1> tamp1f;\n      BitFieldModel<uint32_t, 14, 1> tamp2f;\n      BitFieldModel<uint32_t,\
    \ 16, 1> recalpf;\n    };\n  };\n\n  struct prer\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0010;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 16, 7> prediv_a;\n      BitFieldModel<uint32_t,\
    \ 0, 15> prediv_s;\n    };\n  };\n\n  struct wutr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0014;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> wut;\n    };\n  };\n\n  struct calibr\n\
    \  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0018;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> dcs;\n    \
    \  BitFieldModel<uint32_t, 0, 5> dc;\n    };\n  };\n\n  struct alrmar\n  {\n \
    \   constexpr static unsigned int Address = 0x40002800 + 0x001C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1> msk4;\n  \
    \    BitFieldModel<uint32_t, 30, 1> wdsel;\n      BitFieldModel<uint32_t, 28,\
    \ 2> dt;\n      BitFieldModel<uint32_t, 24, 4> du;\n      BitFieldModel<uint32_t,\
    \ 23, 1> msk3;\n      BitFieldModel<uint32_t, 22, 1> pm;\n      BitFieldModel<uint32_t,\
    \ 20, 2> ht;\n      BitFieldModel<uint32_t, 16, 4> hu;\n      BitFieldModel<uint32_t,\
    \ 15, 1> msk2;\n      BitFieldModel<uint32_t, 12, 3> mnt;\n      BitFieldModel<uint32_t,\
    \ 8, 4> mnu;\n      BitFieldModel<uint32_t, 7, 1> msk1;\n      BitFieldModel<uint32_t,\
    \ 4, 3> st;\n      BitFieldModel<uint32_t, 0, 4> su;\n    };\n  };\n\n  struct\
    \ alrmbr\n  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ msk4;\n      BitFieldModel<uint32_t, 30, 1> wdsel;\n      BitFieldModel<uint32_t,\
    \ 28, 2> dt;\n      BitFieldModel<uint32_t, 24, 4> du;\n      BitFieldModel<uint32_t,\
    \ 23, 1> msk3;\n      BitFieldModel<uint32_t, 22, 1> pm;\n      BitFieldModel<uint32_t,\
    \ 20, 2> ht;\n      BitFieldModel<uint32_t, 16, 4> hu;\n      BitFieldModel<uint32_t,\
    \ 15, 1> msk2;\n      BitFieldModel<uint32_t, 12, 3> mnt;\n      BitFieldModel<uint32_t,\
    \ 8, 4> mnu;\n      BitFieldModel<uint32_t, 7, 1> msk1;\n      BitFieldModel<uint32_t,\
    \ 4, 3> st;\n      BitFieldModel<uint32_t, 0, 4> su;\n    };\n  };\n\n  struct\
    \ wpr\n  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 8>\
    \ key;\n    };\n  };\n\n  struct ssr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40002800 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> ss;\n    };\n  };\n\n  struct shiftr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x002C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 31, 1> add1s;\n      BitFieldModel<uint32_t, 0,\
    \ 15> subfs;\n    };\n  };\n\n  struct tstr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0030;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 22, 1> pm;\n      BitFieldModel<uint32_t, 20, 2>\
    \ ht;\n      BitFieldModel<uint32_t, 16, 4> hu;\n      BitFieldModel<uint32_t,\
    \ 12, 3> mnt;\n      BitFieldModel<uint32_t, 8, 4> mnu;\n      BitFieldModel<uint32_t,\
    \ 4, 3> st;\n      BitFieldModel<uint32_t, 0, 4> su;\n    };\n  };\n\n  struct\
    \ tsdr\n  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0034;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 13, 3>\
    \ wdu;\n      BitFieldModel<uint32_t, 12, 1> mt;\n      BitFieldModel<uint32_t,\
    \ 8, 4> mu;\n      BitFieldModel<uint32_t, 4, 2> dt;\n      BitFieldModel<uint32_t,\
    \ 0, 4> du;\n    };\n  };\n\n  struct tsssr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0038;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ss;\n    };\n  };\n\n  struct calr\n  {\n\
    \    constexpr static unsigned int Address = 0x40002800 + 0x003C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1> calp;\n  \
    \    BitFieldModel<uint32_t, 14, 1> calw8;\n      BitFieldModel<uint32_t, 13,\
    \ 1> calw16;\n      BitFieldModel<uint32_t, 0, 9> calm;\n    };\n  };\n\n  struct\
    \ tafcr\n  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0040;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 18, 1>\
    \ alarmouttype;\n      BitFieldModel<uint32_t, 17, 1> tsinsel;\n      BitFieldModel<uint32_t,\
    \ 16, 1> tamp1insel;\n      BitFieldModel<uint32_t, 15, 1> tamppudis;\n      BitFieldModel<uint32_t,\
    \ 13, 2> tampprch;\n      BitFieldModel<uint32_t, 11, 2> tampflt;\n      BitFieldModel<uint32_t,\
    \ 8, 3> tampfreq;\n      BitFieldModel<uint32_t, 7, 1> tampts;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tamp2trg;\n      BitFieldModel<uint32_t, 3, 1> tamp2e;\n      BitFieldModel<uint32_t,\
    \ 2, 1> tampie;\n      BitFieldModel<uint32_t, 1, 1> tamp1trg;\n      BitFieldModel<uint32_t,\
    \ 0, 1> tamp1e;\n    };\n  };\n\n  struct alrmassr\n  {\n    constexpr static\
    \ unsigned int Address = 0x40002800 + 0x0044;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 24, 4> maskss;\n      BitFieldModel<uint32_t,\
    \ 0, 15> ss;\n    };\n  };\n\n  struct alrmbssr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0048;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 24, 4> maskss;\n      BitFieldModel<uint32_t, 0,\
    \ 15> ss;\n    };\n  };\n\n  struct bkp0r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0050;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp1r\n \
    \ {\n    constexpr static unsigned int Address = 0x40002800 + 0x0054;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n  struct bkp2r\n  {\n    constexpr static unsigned int Address =\
    \ 0x40002800 + 0x0058;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> bkp;\n    };\n  };\n\n  struct bkp3r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x005C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp4r\n \
    \ {\n    constexpr static unsigned int Address = 0x40002800 + 0x0060;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n  struct bkp5r\n  {\n    constexpr static unsigned int Address =\
    \ 0x40002800 + 0x0064;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> bkp;\n    };\n  };\n\n  struct bkp6r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0068;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp7r\n \
    \ {\n    constexpr static unsigned int Address = 0x40002800 + 0x006C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n  struct bkp8r\n  {\n    constexpr static unsigned int Address =\
    \ 0x40002800 + 0x0070;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> bkp;\n    };\n  };\n\n  struct bkp9r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0074;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp10r\n\
    \  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0078;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n  struct bkp11r\n  {\n    constexpr static unsigned int Address\
    \ = 0x40002800 + 0x007C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> bkp;\n    };\n  };\n\n  struct bkp12r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0080;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp13r\n\
    \  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0084;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n  struct bkp14r\n  {\n    constexpr static unsigned int Address\
    \ = 0x40002800 + 0x0088;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> bkp;\n    };\n  };\n\n  struct bkp15r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x008C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp16r\n\
    \  {\n    constexpr static unsigned int Address = 0x40002800 + 0x0090;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n  struct bkp17r\n  {\n    constexpr static unsigned int Address\
    \ = 0x40002800 + 0x0094;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> bkp;\n    };\n  };\n\n  struct bkp18r\n  {\n    constexpr static unsigned\
    \ int Address = 0x40002800 + 0x0098;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bkp;\n    };\n  };\n\n  struct bkp19r\n\
    \  {\n    constexpr static unsigned int Address = 0x40002800 + 0x009C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> bkp;\n   \
    \ };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_RTC_H */"
  name: RTC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SDIO_H\n#define DRAL_STM32F411_SDIO_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct sdio\n\
    {\n  struct power\n  {\n    constexpr static unsigned int Address = 0x40012C00\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 2> pwrctrl;\n    };\n  };\n\n  struct clkcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012C00 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 14, 1> hwfc_en;\n      BitFieldModel<uint32_t,\
    \ 13, 1> negedge;\n      BitFieldModel<uint32_t, 11, 2> widbus;\n      BitFieldModel<uint32_t,\
    \ 10, 1> bypass;\n      BitFieldModel<uint32_t, 9, 1> pwrsav;\n      BitFieldModel<uint32_t,\
    \ 8, 1> clken;\n      BitFieldModel<uint32_t, 0, 8> clkdiv;\n    };\n  };\n\n\
    \  struct arg\n  {\n    constexpr static unsigned int Address = 0x40012C00 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32>\
    \ cmdarg;\n    };\n  };\n\n  struct cmd\n  {\n    constexpr static unsigned int\
    \ Address = 0x40012C00 + 0x000C;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 14, 1> ce_atacmd;\n      BitFieldModel<uint32_t,\
    \ 13, 1> nien;\n      BitFieldModel<uint32_t, 12, 1> encmdcompl;\n      BitFieldModel<uint32_t,\
    \ 11, 1> sdiosuspend;\n      BitFieldModel<uint32_t, 10, 1> cpsmen;\n      BitFieldModel<uint32_t,\
    \ 9, 1> waitpend;\n      BitFieldModel<uint32_t, 8, 1> waitint;\n      BitFieldModel<uint32_t,\
    \ 6, 2> waitresp;\n      BitFieldModel<uint32_t, 0, 6> cmdindex;\n    };\n  };\n\
    \n  struct respcmd\n  {\n    constexpr static unsigned int Address = 0x40012C00\
    \ + 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 6> respcmd;\n    };\n  };\n\n  struct resp1\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012C00 + 0x0014;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> cardstatus1;\n    };\n  };\n\n  struct resp2\n\
    \  {\n    constexpr static unsigned int Address = 0x40012C00 + 0x0018;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> cardstatus2;\n\
    \    };\n  };\n\n  struct resp3\n  {\n    constexpr static unsigned int Address\
    \ = 0x40012C00 + 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> cardstatus3;\n    };\n  };\n\n  struct resp4\n  {\n    constexpr static\
    \ unsigned int Address = 0x40012C00 + 0x0020;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 32> cardstatus4;\n    };\n  };\n\n\
    \  struct dtimer\n  {\n    constexpr static unsigned int Address = 0x40012C00\
    \ + 0x0024;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> datatime;\n    };\n  };\n\n  struct dlen\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012C00 + 0x0028;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 25> datalength;\n    };\n  };\n\n  struct dctrl\n\
    \  {\n    constexpr static unsigned int Address = 0x40012C00 + 0x002C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 11, 1> sdioen;\n\
    \      BitFieldModel<uint32_t, 10, 1> rwmod;\n      BitFieldModel<uint32_t, 9,\
    \ 1> rwstop;\n      BitFieldModel<uint32_t, 8, 1> rwstart;\n      BitFieldModel<uint32_t,\
    \ 4, 4> dblocksize;\n      BitFieldModel<uint32_t, 3, 1> dmaen;\n      BitFieldModel<uint32_t,\
    \ 2, 1> dtmode;\n      BitFieldModel<uint32_t, 1, 1> dtdir;\n      BitFieldModel<uint32_t,\
    \ 0, 1> dten;\n    };\n  };\n\n  struct dcount\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012C00 + 0x0030;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 25> datacount;\n    };\n  };\n\n  struct sta\n\
    \  {\n    constexpr static unsigned int Address = 0x40012C00 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 23, 1> ceataend;\n\
    \      BitFieldModel<uint32_t, 22, 1> sdioit;\n      BitFieldModel<uint32_t, 21,\
    \ 1> rxdavl;\n      BitFieldModel<uint32_t, 20, 1> txdavl;\n      BitFieldModel<uint32_t,\
    \ 19, 1> rxfifoe;\n      BitFieldModel<uint32_t, 18, 1> txfifoe;\n      BitFieldModel<uint32_t,\
    \ 17, 1> rxfifof;\n      BitFieldModel<uint32_t, 16, 1> txfifof;\n      BitFieldModel<uint32_t,\
    \ 15, 1> rxfifohf;\n      BitFieldModel<uint32_t, 14, 1> txfifohe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> rxact;\n      BitFieldModel<uint32_t, 12, 1> txact;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cmdact;\n      BitFieldModel<uint32_t, 10, 1> dbckend;\n      BitFieldModel<uint32_t,\
    \ 9, 1> stbiterr;\n      BitFieldModel<uint32_t, 8, 1> dataend;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cmdsent;\n      BitFieldModel<uint32_t, 6, 1> cmdrend;\n      BitFieldModel<uint32_t,\
    \ 5, 1> rxoverr;\n      BitFieldModel<uint32_t, 4, 1> txunderr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> dtimeout;\n      BitFieldModel<uint32_t, 2, 1> ctimeout;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dcrcfail;\n      BitFieldModel<uint32_t, 0, 1> ccrcfail;\n    };\n  };\n\
    \n  struct icr\n  {\n    constexpr static unsigned int Address = 0x40012C00 +\
    \ 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 23, 1> ceataendc;\n      BitFieldModel<uint32_t, 22, 1> sdioitc;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dbckendc;\n      BitFieldModel<uint32_t, 9, 1> stbiterrc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> dataendc;\n      BitFieldModel<uint32_t, 7, 1> cmdsentc;\n      BitFieldModel<uint32_t,\
    \ 6, 1> cmdrendc;\n      BitFieldModel<uint32_t, 5, 1> rxoverrc;\n      BitFieldModel<uint32_t,\
    \ 4, 1> txunderrc;\n      BitFieldModel<uint32_t, 3, 1> dtimeoutc;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ctimeoutc;\n      BitFieldModel<uint32_t, 1, 1> dcrcfailc;\n      BitFieldModel<uint32_t,\
    \ 0, 1> ccrcfailc;\n    };\n  };\n\n  struct mask\n  {\n    constexpr static unsigned\
    \ int Address = 0x40012C00 + 0x003C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 23, 1> ceataendie;\n      BitFieldModel<uint32_t,\
    \ 22, 1> sdioitie;\n      BitFieldModel<uint32_t, 21, 1> rxdavlie;\n      BitFieldModel<uint32_t,\
    \ 20, 1> txdavlie;\n      BitFieldModel<uint32_t, 19, 1> rxfifoeie;\n      BitFieldModel<uint32_t,\
    \ 18, 1> txfifoeie;\n      BitFieldModel<uint32_t, 17, 1> rxfifofie;\n      BitFieldModel<uint32_t,\
    \ 16, 1> txfifofie;\n      BitFieldModel<uint32_t, 15, 1> rxfifohfie;\n      BitFieldModel<uint32_t,\
    \ 14, 1> txfifoheie;\n      BitFieldModel<uint32_t, 13, 1> rxactie;\n      BitFieldModel<uint32_t,\
    \ 12, 1> txactie;\n      BitFieldModel<uint32_t, 11, 1> cmdactie;\n      BitFieldModel<uint32_t,\
    \ 10, 1> dbckendie;\n      BitFieldModel<uint32_t, 9, 1> stbiterrie;\n      BitFieldModel<uint32_t,\
    \ 8, 1> dataendie;\n      BitFieldModel<uint32_t, 7, 1> cmdsentie;\n      BitFieldModel<uint32_t,\
    \ 6, 1> cmdrendie;\n      BitFieldModel<uint32_t, 5, 1> rxoverrie;\n      BitFieldModel<uint32_t,\
    \ 4, 1> txunderrie;\n      BitFieldModel<uint32_t, 3, 1> dtimeoutie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ctimeoutie;\n      BitFieldModel<uint32_t, 1, 1> dcrcfailie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> ccrcfailie;\n    };\n  };\n\n  struct fifocnt\n  {\n    constexpr static\
    \ unsigned int Address = 0x40012C00 + 0x0048;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 24> fifocount;\n    };\n  };\n\n  struct\
    \ fifo\n  {\n    constexpr static unsigned int Address = 0x40012C00 + 0x0080;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32>\
    \ fifodata;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_SDIO_H */"
  name: SDIO
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SYSCFG_H\n#define DRAL_STM32F411_SYSCFG_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct syscfg\n\
    {\n  struct memrm\n  {\n    constexpr static unsigned int Address = 0x40013800\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 2> mem_mode;\n    };\n  };\n\n  struct pmc\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013800 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 16, 1> adc1dc2;\n    };\n  };\n\n  struct exticr1\n\
    \  {\n    constexpr static unsigned int Address = 0x40013800 + 0x0008;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4> exti3;\n \
    \     BitFieldModel<uint32_t, 8, 4> exti2;\n      BitFieldModel<uint32_t, 4, 4>\
    \ exti1;\n      BitFieldModel<uint32_t, 0, 4> exti0;\n    };\n  };\n\n  struct\
    \ exticr2\n  {\n    constexpr static unsigned int Address = 0x40013800 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ exti7;\n      BitFieldModel<uint32_t, 8, 4> exti6;\n      BitFieldModel<uint32_t,\
    \ 4, 4> exti5;\n      BitFieldModel<uint32_t, 0, 4> exti4;\n    };\n  };\n\n \
    \ struct exticr3\n  {\n    constexpr static unsigned int Address = 0x40013800\
    \ + 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 12, 4> exti11;\n      BitFieldModel<uint32_t, 8, 4> exti10;\n      BitFieldModel<uint32_t,\
    \ 4, 4> exti9;\n      BitFieldModel<uint32_t, 0, 4> exti8;\n    };\n  };\n\n \
    \ struct exticr4\n  {\n    constexpr static unsigned int Address = 0x40013800\
    \ + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 12, 4> exti15;\n      BitFieldModel<uint32_t, 8, 4> exti14;\n      BitFieldModel<uint32_t,\
    \ 4, 4> exti13;\n      BitFieldModel<uint32_t, 0, 4> exti12;\n    };\n  };\n\n\
    \  struct cmpcr\n  {\n    constexpr static unsigned int Address = 0x40013800 +\
    \ 0x0020;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 1> ready;\n      BitFieldModel<uint32_t, 0, 1> cmp_pd;\n    };\n  };\n\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_SYSCFG_H */"
  name: SYSCFG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM1_H\n#define DRAL_STM32F411_TIM1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim1\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40010000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 5, 2> cms;\n      BitFieldModel<uint32_t, 4, 1> dir;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 14, 1>\
    \ ois4;\n      BitFieldModel<uint32_t, 13, 1> ois3n;\n      BitFieldModel<uint32_t,\
    \ 12, 1> ois3;\n      BitFieldModel<uint32_t, 11, 1> ois2n;\n      BitFieldModel<uint32_t,\
    \ 10, 1> ois2;\n      BitFieldModel<uint32_t, 9, 1> ois1n;\n      BitFieldModel<uint32_t,\
    \ 8, 1> ois1;\n      BitFieldModel<uint32_t, 7, 1> ti1s;\n      BitFieldModel<uint32_t,\
    \ 4, 3> mms;\n      BitFieldModel<uint32_t, 3, 1> ccds;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ccus;\n      BitFieldModel<uint32_t, 0, 1> ccpc;\n    };\n  };\n\n  struct\
    \ smcr\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ etp;\n      BitFieldModel<uint32_t, 14, 1> ece;\n      BitFieldModel<uint32_t,\
    \ 12, 2> etps;\n      BitFieldModel<uint32_t, 8, 4> etf;\n      BitFieldModel<uint32_t,\
    \ 7, 1> msm;\n      BitFieldModel<uint32_t, 4, 3> ts;\n      BitFieldModel<uint32_t,\
    \ 0, 3> sms;\n    };\n  };\n\n  struct dier\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010000 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 14, 1> tde;\n      BitFieldModel<uint32_t, 13,\
    \ 1> comde;\n      BitFieldModel<uint32_t, 12, 1> cc4de;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3de;\n      BitFieldModel<uint32_t, 10, 1> cc2de;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc1de;\n      BitFieldModel<uint32_t, 8, 1> ude;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bie;\n      BitFieldModel<uint32_t, 6, 1> tie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> comie;\n      BitFieldModel<uint32_t, 4, 1> cc4ie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3ie;\n      BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ cc4of;\n      BitFieldModel<uint32_t, 11, 1> cc3of;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cc2of;\n      BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bif;\n      BitFieldModel<uint32_t, 6, 1> tif;\n      BitFieldModel<uint32_t,\
    \ 5, 1> comif;\n      BitFieldModel<uint32_t, 4, 1> cc4if;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3if;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ bg;\n      BitFieldModel<uint32_t, 6, 1> tg;\n      BitFieldModel<uint32_t,\
    \ 5, 1> comg;\n      BitFieldModel<uint32_t, 4, 1> cc4g;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3g;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40010000 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc2ce;\n      BitFieldModel<uint32_t, 12, 3> oc2m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc2pe;\n      BitFieldModel<uint32_t, 10, 1> oc2fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 7, 1> oc1ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 4> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr2_output\n  {\n    constexpr static unsigned int Address = 0x40010000 +\
    \ 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc4ce;\n      BitFieldModel<uint32_t, 12, 3> oc4m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc4pe;\n      BitFieldModel<uint32_t, 10, 1> oc4fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 7, 1> oc3ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc3m;\n      BitFieldModel<uint32_t, 3, 1> oc3pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc3fe;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n  struct\
    \ ccmr2_input\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic4f;\n      BitFieldModel<uint32_t, 10, 2> ic4psc;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 4, 4> ic3f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ic3psc;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n \
    \ struct ccer\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 13, 1>\
    \ cc4p;\n      BitFieldModel<uint32_t, 12, 1> cc4e;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3np;\n      BitFieldModel<uint32_t, 10, 1> cc3ne;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc3p;\n      BitFieldModel<uint32_t, 8, 1> cc3e;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cc2np;\n      BitFieldModel<uint32_t, 6, 1> cc2ne;\n      BitFieldModel<uint32_t,\
    \ 5, 1> cc2p;\n      BitFieldModel<uint32_t, 4, 1> cc2e;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc1np;\n      BitFieldModel<uint32_t, 2, 1> cc1ne;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ cnt;\n    };\n  };\n\n  struct psc\n  {\n    constexpr static unsigned int Address\
    \ = 0x40010000 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010000 + 0x002C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> arr;\n    };\n  };\n\n  struct ccr1\n  {\n\
    \    constexpr static unsigned int Address = 0x40010000 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr1;\n  \
    \  };\n  };\n\n  struct ccr2\n  {\n    constexpr static unsigned int Address =\
    \ 0x40010000 + 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> ccr2;\n    };\n  };\n\n  struct ccr3\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010000 + 0x003C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ccr3;\n    };\n  };\n\n  struct ccr4\n \
    \ {\n    constexpr static unsigned int Address = 0x40010000 + 0x0040;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr4;\n  \
    \  };\n  };\n\n  struct dcr\n  {\n    constexpr static unsigned int Address =\
    \ 0x40010000 + 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 5> dbl;\n      BitFieldModel<uint32_t, 0, 5> dba;\n    };\n  };\n\n  struct\
    \ dmar\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x004C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dmab;\n    };\n  };\n\n  struct rcr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40010000 + 0x0030;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 8> rep;\n    };\n  };\n\n  struct bdtr\n  {\n\
    \    constexpr static unsigned int Address = 0x40010000 + 0x0044;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1> moe;\n   \
    \   BitFieldModel<uint32_t, 14, 1> aoe;\n      BitFieldModel<uint32_t, 13, 1>\
    \ bkp;\n      BitFieldModel<uint32_t, 12, 1> bke;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ossr;\n      BitFieldModel<uint32_t, 10, 1> ossi;\n      BitFieldModel<uint32_t,\
    \ 8, 2> lock;\n      BitFieldModel<uint32_t, 0, 8> dtg;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_TIM1_H */"
  name: TIM1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM8_H\n#define DRAL_STM32F411_TIM8_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim8\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40010400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 5, 2> cms;\n      BitFieldModel<uint32_t, 4, 1> dir;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 14, 1>\
    \ ois4;\n      BitFieldModel<uint32_t, 13, 1> ois3n;\n      BitFieldModel<uint32_t,\
    \ 12, 1> ois3;\n      BitFieldModel<uint32_t, 11, 1> ois2n;\n      BitFieldModel<uint32_t,\
    \ 10, 1> ois2;\n      BitFieldModel<uint32_t, 9, 1> ois1n;\n      BitFieldModel<uint32_t,\
    \ 8, 1> ois1;\n      BitFieldModel<uint32_t, 7, 1> ti1s;\n      BitFieldModel<uint32_t,\
    \ 4, 3> mms;\n      BitFieldModel<uint32_t, 3, 1> ccds;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ccus;\n      BitFieldModel<uint32_t, 0, 1> ccpc;\n    };\n  };\n\n  struct\
    \ smcr\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ etp;\n      BitFieldModel<uint32_t, 14, 1> ece;\n      BitFieldModel<uint32_t,\
    \ 12, 2> etps;\n      BitFieldModel<uint32_t, 8, 4> etf;\n      BitFieldModel<uint32_t,\
    \ 7, 1> msm;\n      BitFieldModel<uint32_t, 4, 3> ts;\n      BitFieldModel<uint32_t,\
    \ 0, 3> sms;\n    };\n  };\n\n  struct dier\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010400 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 14, 1> tde;\n      BitFieldModel<uint32_t, 13,\
    \ 1> comde;\n      BitFieldModel<uint32_t, 12, 1> cc4de;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3de;\n      BitFieldModel<uint32_t, 10, 1> cc2de;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc1de;\n      BitFieldModel<uint32_t, 8, 1> ude;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bie;\n      BitFieldModel<uint32_t, 6, 1> tie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> comie;\n      BitFieldModel<uint32_t, 4, 1> cc4ie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3ie;\n      BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ cc4of;\n      BitFieldModel<uint32_t, 11, 1> cc3of;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cc2of;\n      BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bif;\n      BitFieldModel<uint32_t, 6, 1> tif;\n      BitFieldModel<uint32_t,\
    \ 5, 1> comif;\n      BitFieldModel<uint32_t, 4, 1> cc4if;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3if;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ bg;\n      BitFieldModel<uint32_t, 6, 1> tg;\n      BitFieldModel<uint32_t,\
    \ 5, 1> comg;\n      BitFieldModel<uint32_t, 4, 1> cc4g;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3g;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40010400 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc2ce;\n      BitFieldModel<uint32_t, 12, 3> oc2m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc2pe;\n      BitFieldModel<uint32_t, 10, 1> oc2fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 7, 1> oc1ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 4> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr2_output\n  {\n    constexpr static unsigned int Address = 0x40010400 +\
    \ 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc4ce;\n      BitFieldModel<uint32_t, 12, 3> oc4m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc4pe;\n      BitFieldModel<uint32_t, 10, 1> oc4fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 7, 1> oc3ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc3m;\n      BitFieldModel<uint32_t, 3, 1> oc3pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc3fe;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n  struct\
    \ ccmr2_input\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic4f;\n      BitFieldModel<uint32_t, 10, 2> ic4psc;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 4, 4> ic3f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ic3psc;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n \
    \ struct ccer\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 13, 1>\
    \ cc4p;\n      BitFieldModel<uint32_t, 12, 1> cc4e;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3np;\n      BitFieldModel<uint32_t, 10, 1> cc3ne;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc3p;\n      BitFieldModel<uint32_t, 8, 1> cc3e;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cc2np;\n      BitFieldModel<uint32_t, 6, 1> cc2ne;\n      BitFieldModel<uint32_t,\
    \ 5, 1> cc2p;\n      BitFieldModel<uint32_t, 4, 1> cc2e;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc1np;\n      BitFieldModel<uint32_t, 2, 1> cc1ne;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ cnt;\n    };\n  };\n\n  struct psc\n  {\n    constexpr static unsigned int Address\
    \ = 0x40010400 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010400 + 0x002C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> arr;\n    };\n  };\n\n  struct ccr1\n  {\n\
    \    constexpr static unsigned int Address = 0x40010400 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr1;\n  \
    \  };\n  };\n\n  struct ccr2\n  {\n    constexpr static unsigned int Address =\
    \ 0x40010400 + 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> ccr2;\n    };\n  };\n\n  struct ccr3\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010400 + 0x003C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ccr3;\n    };\n  };\n\n  struct ccr4\n \
    \ {\n    constexpr static unsigned int Address = 0x40010400 + 0x0040;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr4;\n  \
    \  };\n  };\n\n  struct dcr\n  {\n    constexpr static unsigned int Address =\
    \ 0x40010400 + 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 5> dbl;\n      BitFieldModel<uint32_t, 0, 5> dba;\n    };\n  };\n\n  struct\
    \ dmar\n  {\n    constexpr static unsigned int Address = 0x40010400 + 0x004C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dmab;\n    };\n  };\n\n  struct rcr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40010400 + 0x0030;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 8> rep;\n    };\n  };\n\n  struct bdtr\n  {\n\
    \    constexpr static unsigned int Address = 0x40010400 + 0x0044;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1> moe;\n   \
    \   BitFieldModel<uint32_t, 14, 1> aoe;\n      BitFieldModel<uint32_t, 13, 1>\
    \ bkp;\n      BitFieldModel<uint32_t, 12, 1> bke;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ossr;\n      BitFieldModel<uint32_t, 10, 1> ossi;\n      BitFieldModel<uint32_t,\
    \ 8, 2> lock;\n      BitFieldModel<uint32_t, 0, 8> dtg;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_TIM8_H */"
  name: TIM8
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM10_H\n#define DRAL_STM32F411_TIM10_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim10\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40014400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> urs;\n      BitFieldModel<uint32_t, 1, 1> udis;\n      BitFieldModel<uint32_t,\
    \ 0, 1> cen;\n    };\n  };\n\n  struct dier\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014400 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0,\
    \ 1> uie;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40014400 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t, 1, 1>\
    \ cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct egr\n\
    \  {\n    constexpr static unsigned int Address = 0x40014400 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 1, 1> cc1g;\n   \
    \   BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct ccmr1_output\n\
    \  {\n    constexpr static unsigned int Address = 0x40014400 + 0x0018;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 4, 3> oc1m;\n   \
    \   BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t, 2, 1>\
    \ oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40014400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 4, 4>\
    \ ic1f;\n      BitFieldModel<uint32_t, 2, 2> icpcs;\n      BitFieldModel<uint32_t,\
    \ 0, 2> cc1s;\n    };\n  };\n\n  struct ccer\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014400 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t, 1,\
    \ 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40014400 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ cnt;\n    };\n  };\n\n  struct psc\n  {\n    constexpr static unsigned int Address\
    \ = 0x40014400 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014400 + 0x002C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> arr;\n    };\n  };\n\n  struct ccr1\n  {\n\
    \    constexpr static unsigned int Address = 0x40014400 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr1;\n  \
    \  };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM10_H */"
  name: TIM10
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM11_H\n#define DRAL_STM32F411_TIM11_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim11\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40014800 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> urs;\n      BitFieldModel<uint32_t, 1, 1> udis;\n      BitFieldModel<uint32_t,\
    \ 0, 1> cen;\n    };\n  };\n\n  struct dier\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014800 + 0x000C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0,\
    \ 1> uie;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40014800 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t, 1, 1>\
    \ cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct egr\n\
    \  {\n    constexpr static unsigned int Address = 0x40014800 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 1, 1> cc1g;\n   \
    \   BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct ccmr1_output\n\
    \  {\n    constexpr static unsigned int Address = 0x40014800 + 0x0018;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 4, 3> oc1m;\n   \
    \   BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t, 2, 1>\
    \ oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40014800 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 4, 4>\
    \ ic1f;\n      BitFieldModel<uint32_t, 2, 2> icpcs;\n      BitFieldModel<uint32_t,\
    \ 0, 2> cc1s;\n    };\n  };\n\n  struct ccer\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014800 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t, 1,\
    \ 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40014800 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ cnt;\n    };\n  };\n\n  struct psc\n  {\n    constexpr static unsigned int Address\
    \ = 0x40014800 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014800 + 0x002C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> arr;\n    };\n  };\n\n  struct ccr1\n  {\n\
    \    constexpr static unsigned int Address = 0x40014800 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr1;\n  \
    \  };\n  };\n\n  struct or_\n  {\n    constexpr static unsigned int Address =\
    \ 0x40014800 + 0x0050;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 2> rmp;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM11_H */"
  name: TIM11
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM2_H\n#define DRAL_STM32F411_TIM2_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim2\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 5, 2> cms;\n      BitFieldModel<uint32_t, 4, 1> dir;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ ti1s;\n      BitFieldModel<uint32_t, 4, 3> mms;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ccds;\n    };\n  };\n\n  struct smcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40000000 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 15, 1> etp;\n      BitFieldModel<uint32_t, 14,\
    \ 1> ece;\n      BitFieldModel<uint32_t, 12, 2> etps;\n      BitFieldModel<uint32_t,\
    \ 8, 4> etf;\n      BitFieldModel<uint32_t, 7, 1> msm;\n      BitFieldModel<uint32_t,\
    \ 4, 3> ts;\n      BitFieldModel<uint32_t, 0, 3> sms;\n    };\n  };\n\n  struct\
    \ dier\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 14, 1>\
    \ tde;\n      BitFieldModel<uint32_t, 12, 1> cc4de;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3de;\n      BitFieldModel<uint32_t, 10, 1> cc2de;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc1de;\n      BitFieldModel<uint32_t, 8, 1> ude;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tie;\n      BitFieldModel<uint32_t, 4, 1> cc4ie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3ie;\n      BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ cc4of;\n      BitFieldModel<uint32_t, 11, 1> cc3of;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cc2of;\n      BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tif;\n      BitFieldModel<uint32_t, 4, 1> cc4if;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3if;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 6, 1>\
    \ tg;\n      BitFieldModel<uint32_t, 4, 1> cc4g;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3g;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc2ce;\n      BitFieldModel<uint32_t, 12, 3> oc2m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc2pe;\n      BitFieldModel<uint32_t, 10, 1> oc2fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 7, 1> oc1ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 4> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr2_output\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc4ce;\n      BitFieldModel<uint32_t, 12, 3> oc4m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc4pe;\n      BitFieldModel<uint32_t, 10, 1> oc4fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 7, 1> oc3ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc3m;\n      BitFieldModel<uint32_t, 3, 1> oc3pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc3fe;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n  struct\
    \ ccmr2_input\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic4f;\n      BitFieldModel<uint32_t, 10, 2> ic4psc;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 4, 4> ic3f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ic3psc;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n \
    \ struct ccer\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ cc4np;\n      BitFieldModel<uint32_t, 13, 1> cc4p;\n      BitFieldModel<uint32_t,\
    \ 12, 1> cc4e;\n      BitFieldModel<uint32_t, 11, 1> cc3np;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc3p;\n      BitFieldModel<uint32_t, 8, 1> cc3e;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cc2np;\n      BitFieldModel<uint32_t, 5, 1> cc2p;\n      BitFieldModel<uint32_t,\
    \ 4, 1> cc2e;\n      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 16>\
    \ cnt_h;\n      BitFieldModel<uint32_t, 0, 16> cnt_l;\n    };\n  };\n\n  struct\
    \ psc\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x0028;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40000000 + 0x002C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> arr_h;\n      BitFieldModel<uint32_t, 0, 16> arr_l;\n    };\n  };\n\n\
    \  struct ccr1\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x0034;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr1_h;\n      BitFieldModel<uint32_t, 0, 16> ccr1_l;\n    };\n  };\n\
    \n  struct ccr2\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr2_h;\n      BitFieldModel<uint32_t, 0, 16> ccr2_l;\n    };\n  };\n\
    \n  struct ccr3\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x003C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr3_h;\n      BitFieldModel<uint32_t, 0, 16> ccr3_l;\n    };\n  };\n\
    \n  struct ccr4\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x0040;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr4_h;\n      BitFieldModel<uint32_t, 0, 16> ccr4_l;\n    };\n  };\n\
    \n  struct dcr\n  {\n    constexpr static unsigned int Address = 0x40000000 +\
    \ 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 5> dbl;\n      BitFieldModel<uint32_t, 0, 5> dba;\n    };\n  };\n\n  struct\
    \ dmar\n  {\n    constexpr static unsigned int Address = 0x40000000 + 0x004C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dmab;\n    };\n  };\n\n  struct or_\n  {\n    constexpr static unsigned int\
    \ Address = 0x40000000 + 0x0050;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 10, 2> itr1_rmp;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_TIM2_H */"
  name: TIM2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM3_H\n#define DRAL_STM32F411_TIM3_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim3\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 5, 2> cms;\n      BitFieldModel<uint32_t, 4, 1> dir;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ ti1s;\n      BitFieldModel<uint32_t, 4, 3> mms;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ccds;\n    };\n  };\n\n  struct smcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40000400 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 15, 1> etp;\n      BitFieldModel<uint32_t, 14,\
    \ 1> ece;\n      BitFieldModel<uint32_t, 12, 2> etps;\n      BitFieldModel<uint32_t,\
    \ 8, 4> etf;\n      BitFieldModel<uint32_t, 7, 1> msm;\n      BitFieldModel<uint32_t,\
    \ 4, 3> ts;\n      BitFieldModel<uint32_t, 0, 3> sms;\n    };\n  };\n\n  struct\
    \ dier\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 14, 1>\
    \ tde;\n      BitFieldModel<uint32_t, 12, 1> cc4de;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3de;\n      BitFieldModel<uint32_t, 10, 1> cc2de;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc1de;\n      BitFieldModel<uint32_t, 8, 1> ude;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tie;\n      BitFieldModel<uint32_t, 4, 1> cc4ie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3ie;\n      BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ cc4of;\n      BitFieldModel<uint32_t, 11, 1> cc3of;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cc2of;\n      BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tif;\n      BitFieldModel<uint32_t, 4, 1> cc4if;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3if;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 6, 1>\
    \ tg;\n      BitFieldModel<uint32_t, 4, 1> cc4g;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3g;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc2ce;\n      BitFieldModel<uint32_t, 12, 3> oc2m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc2pe;\n      BitFieldModel<uint32_t, 10, 1> oc2fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 7, 1> oc1ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 4> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr2_output\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc4ce;\n      BitFieldModel<uint32_t, 12, 3> oc4m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc4pe;\n      BitFieldModel<uint32_t, 10, 1> oc4fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 7, 1> oc3ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc3m;\n      BitFieldModel<uint32_t, 3, 1> oc3pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc3fe;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n  struct\
    \ ccmr2_input\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic4f;\n      BitFieldModel<uint32_t, 10, 2> ic4psc;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 4, 4> ic3f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ic3psc;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n \
    \ struct ccer\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ cc4np;\n      BitFieldModel<uint32_t, 13, 1> cc4p;\n      BitFieldModel<uint32_t,\
    \ 12, 1> cc4e;\n      BitFieldModel<uint32_t, 11, 1> cc3np;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc3p;\n      BitFieldModel<uint32_t, 8, 1> cc3e;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cc2np;\n      BitFieldModel<uint32_t, 5, 1> cc2p;\n      BitFieldModel<uint32_t,\
    \ 4, 1> cc2e;\n      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 16>\
    \ cnt_h;\n      BitFieldModel<uint32_t, 0, 16> cnt_l;\n    };\n  };\n\n  struct\
    \ psc\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x0028;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40000400 + 0x002C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> arr_h;\n      BitFieldModel<uint32_t, 0, 16> arr_l;\n    };\n  };\n\n\
    \  struct ccr1\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x0034;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr1_h;\n      BitFieldModel<uint32_t, 0, 16> ccr1_l;\n    };\n  };\n\
    \n  struct ccr2\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr2_h;\n      BitFieldModel<uint32_t, 0, 16> ccr2_l;\n    };\n  };\n\
    \n  struct ccr3\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x003C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr3_h;\n      BitFieldModel<uint32_t, 0, 16> ccr3_l;\n    };\n  };\n\
    \n  struct ccr4\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x0040;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr4_h;\n      BitFieldModel<uint32_t, 0, 16> ccr4_l;\n    };\n  };\n\
    \n  struct dcr\n  {\n    constexpr static unsigned int Address = 0x40000400 +\
    \ 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 5> dbl;\n      BitFieldModel<uint32_t, 0, 5> dba;\n    };\n  };\n\n  struct\
    \ dmar\n  {\n    constexpr static unsigned int Address = 0x40000400 + 0x004C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dmab;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM3_H */"
  name: TIM3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM4_H\n#define DRAL_STM32F411_TIM4_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim4\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 5, 2> cms;\n      BitFieldModel<uint32_t, 4, 1> dir;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ ti1s;\n      BitFieldModel<uint32_t, 4, 3> mms;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ccds;\n    };\n  };\n\n  struct smcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40000800 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 15, 1> etp;\n      BitFieldModel<uint32_t, 14,\
    \ 1> ece;\n      BitFieldModel<uint32_t, 12, 2> etps;\n      BitFieldModel<uint32_t,\
    \ 8, 4> etf;\n      BitFieldModel<uint32_t, 7, 1> msm;\n      BitFieldModel<uint32_t,\
    \ 4, 3> ts;\n      BitFieldModel<uint32_t, 0, 3> sms;\n    };\n  };\n\n  struct\
    \ dier\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 14, 1>\
    \ tde;\n      BitFieldModel<uint32_t, 12, 1> cc4de;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3de;\n      BitFieldModel<uint32_t, 10, 1> cc2de;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc1de;\n      BitFieldModel<uint32_t, 8, 1> ude;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tie;\n      BitFieldModel<uint32_t, 4, 1> cc4ie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3ie;\n      BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ cc4of;\n      BitFieldModel<uint32_t, 11, 1> cc3of;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cc2of;\n      BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tif;\n      BitFieldModel<uint32_t, 4, 1> cc4if;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3if;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 6, 1>\
    \ tg;\n      BitFieldModel<uint32_t, 4, 1> cc4g;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3g;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc2ce;\n      BitFieldModel<uint32_t, 12, 3> oc2m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc2pe;\n      BitFieldModel<uint32_t, 10, 1> oc2fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 7, 1> oc1ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 4> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr2_output\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc4ce;\n      BitFieldModel<uint32_t, 12, 3> oc4m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc4pe;\n      BitFieldModel<uint32_t, 10, 1> oc4fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 7, 1> oc3ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc3m;\n      BitFieldModel<uint32_t, 3, 1> oc3pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc3fe;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n  struct\
    \ ccmr2_input\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic4f;\n      BitFieldModel<uint32_t, 10, 2> ic4psc;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 4, 4> ic3f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ic3psc;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n \
    \ struct ccer\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ cc4np;\n      BitFieldModel<uint32_t, 13, 1> cc4p;\n      BitFieldModel<uint32_t,\
    \ 12, 1> cc4e;\n      BitFieldModel<uint32_t, 11, 1> cc3np;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc3p;\n      BitFieldModel<uint32_t, 8, 1> cc3e;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cc2np;\n      BitFieldModel<uint32_t, 5, 1> cc2p;\n      BitFieldModel<uint32_t,\
    \ 4, 1> cc2e;\n      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 16>\
    \ cnt_h;\n      BitFieldModel<uint32_t, 0, 16> cnt_l;\n    };\n  };\n\n  struct\
    \ psc\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x0028;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40000800 + 0x002C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> arr_h;\n      BitFieldModel<uint32_t, 0, 16> arr_l;\n    };\n  };\n\n\
    \  struct ccr1\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x0034;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr1_h;\n      BitFieldModel<uint32_t, 0, 16> ccr1_l;\n    };\n  };\n\
    \n  struct ccr2\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr2_h;\n      BitFieldModel<uint32_t, 0, 16> ccr2_l;\n    };\n  };\n\
    \n  struct ccr3\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x003C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr3_h;\n      BitFieldModel<uint32_t, 0, 16> ccr3_l;\n    };\n  };\n\
    \n  struct ccr4\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x0040;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr4_h;\n      BitFieldModel<uint32_t, 0, 16> ccr4_l;\n    };\n  };\n\
    \n  struct dcr\n  {\n    constexpr static unsigned int Address = 0x40000800 +\
    \ 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 5> dbl;\n      BitFieldModel<uint32_t, 0, 5> dba;\n    };\n  };\n\n  struct\
    \ dmar\n  {\n    constexpr static unsigned int Address = 0x40000800 + 0x004C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dmab;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM4_H */"
  name: TIM4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM5_H\n#define DRAL_STM32F411_TIM5_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim5\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 5, 2> cms;\n      BitFieldModel<uint32_t, 4, 1> dir;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ ti1s;\n      BitFieldModel<uint32_t, 4, 3> mms;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ccds;\n    };\n  };\n\n  struct smcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40000C00 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 15, 1> etp;\n      BitFieldModel<uint32_t, 14,\
    \ 1> ece;\n      BitFieldModel<uint32_t, 12, 2> etps;\n      BitFieldModel<uint32_t,\
    \ 8, 4> etf;\n      BitFieldModel<uint32_t, 7, 1> msm;\n      BitFieldModel<uint32_t,\
    \ 4, 3> ts;\n      BitFieldModel<uint32_t, 0, 3> sms;\n    };\n  };\n\n  struct\
    \ dier\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 14, 1>\
    \ tde;\n      BitFieldModel<uint32_t, 12, 1> cc4de;\n      BitFieldModel<uint32_t,\
    \ 11, 1> cc3de;\n      BitFieldModel<uint32_t, 10, 1> cc2de;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc1de;\n      BitFieldModel<uint32_t, 8, 1> ude;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tie;\n      BitFieldModel<uint32_t, 4, 1> cc4ie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3ie;\n      BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1ie;\n      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ cc4of;\n      BitFieldModel<uint32_t, 11, 1> cc3of;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cc2of;\n      BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tif;\n      BitFieldModel<uint32_t, 4, 1> cc4if;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3if;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 6, 1>\
    \ tg;\n      BitFieldModel<uint32_t, 4, 1> cc4g;\n      BitFieldModel<uint32_t,\
    \ 3, 1> cc3g;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc2ce;\n      BitFieldModel<uint32_t, 12, 3> oc2m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc2pe;\n      BitFieldModel<uint32_t, 10, 1> oc2fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 7, 1> oc1ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 4> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr2_output\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> oc4ce;\n      BitFieldModel<uint32_t, 12, 3> oc4m;\n      BitFieldModel<uint32_t,\
    \ 11, 1> oc4pe;\n      BitFieldModel<uint32_t, 10, 1> oc4fe;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 7, 1> oc3ce;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc3m;\n      BitFieldModel<uint32_t, 3, 1> oc3pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc3fe;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n  struct\
    \ ccmr2_input\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 4>\
    \ ic4f;\n      BitFieldModel<uint32_t, 10, 2> ic4psc;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc4s;\n      BitFieldModel<uint32_t, 4, 4> ic3f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ic3psc;\n      BitFieldModel<uint32_t, 0, 2> cc3s;\n    };\n  };\n\n \
    \ struct ccer\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ cc4np;\n      BitFieldModel<uint32_t, 13, 1> cc4p;\n      BitFieldModel<uint32_t,\
    \ 12, 1> cc4e;\n      BitFieldModel<uint32_t, 11, 1> cc3np;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cc3p;\n      BitFieldModel<uint32_t, 8, 1> cc3e;\n      BitFieldModel<uint32_t,\
    \ 7, 1> cc2np;\n      BitFieldModel<uint32_t, 5, 1> cc2p;\n      BitFieldModel<uint32_t,\
    \ 4, 1> cc2e;\n      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 16>\
    \ cnt_h;\n      BitFieldModel<uint32_t, 0, 16> cnt_l;\n    };\n  };\n\n  struct\
    \ psc\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x0028;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40000C00 + 0x002C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> arr_h;\n      BitFieldModel<uint32_t, 0, 16> arr_l;\n    };\n  };\n\n\
    \  struct ccr1\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x0034;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr1_h;\n      BitFieldModel<uint32_t, 0, 16> ccr1_l;\n    };\n  };\n\
    \n  struct ccr2\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr2_h;\n      BitFieldModel<uint32_t, 0, 16> ccr2_l;\n    };\n  };\n\
    \n  struct ccr3\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x003C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr3_h;\n      BitFieldModel<uint32_t, 0, 16> ccr3_l;\n    };\n  };\n\
    \n  struct ccr4\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x0040;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 16, 16> ccr4_h;\n      BitFieldModel<uint32_t, 0, 16> ccr4_l;\n    };\n  };\n\
    \n  struct dcr\n  {\n    constexpr static unsigned int Address = 0x40000C00 +\
    \ 0x0048;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 5> dbl;\n      BitFieldModel<uint32_t, 0, 5> dba;\n    };\n  };\n\n  struct\
    \ dmar\n  {\n    constexpr static unsigned int Address = 0x40000C00 + 0x004C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dmab;\n    };\n  };\n\n  struct or_\n  {\n    constexpr static unsigned int\
    \ Address = 0x40000C00 + 0x0050;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 6, 2> it4_rmp;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_TIM5_H */"
  name: TIM5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM9_H\n#define DRAL_STM32F411_TIM9_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct tim9\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40014000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 8, 2> ckd;\n      BitFieldModel<uint32_t, 7, 1> arpe;\n      BitFieldModel<uint32_t,\
    \ 3, 1> opm;\n      BitFieldModel<uint32_t, 2, 1> urs;\n      BitFieldModel<uint32_t,\
    \ 1, 1> udis;\n      BitFieldModel<uint32_t, 0, 1> cen;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40014000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 4, 3>\
    \ mms;\n    };\n  };\n\n  struct smcr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40014000 + 0x0008;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 7, 1> msm;\n      BitFieldModel<uint32_t, 4, 3> ts;\n\
    \      BitFieldModel<uint32_t, 0, 3> sms;\n    };\n  };\n\n  struct dier\n  {\n\
    \    constexpr static unsigned int Address = 0x40014000 + 0x000C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 6, 1> tie;\n    \
    \  BitFieldModel<uint32_t, 2, 1> cc2ie;\n      BitFieldModel<uint32_t, 1, 1> cc1ie;\n\
    \      BitFieldModel<uint32_t, 0, 1> uie;\n    };\n  };\n\n  struct sr\n  {\n\
    \    constexpr static unsigned int Address = 0x40014000 + 0x0010;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 10, 1> cc2of;\n \
    \     BitFieldModel<uint32_t, 9, 1> cc1of;\n      BitFieldModel<uint32_t, 6, 1>\
    \ tif;\n      BitFieldModel<uint32_t, 2, 1> cc2if;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1if;\n      BitFieldModel<uint32_t, 0, 1> uif;\n    };\n  };\n\n  struct\
    \ egr\n  {\n    constexpr static unsigned int Address = 0x40014000 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 6, 1>\
    \ tg;\n      BitFieldModel<uint32_t, 2, 1> cc2g;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1g;\n      BitFieldModel<uint32_t, 0, 1> ug;\n    };\n  };\n\n  struct\
    \ ccmr1_output\n  {\n    constexpr static unsigned int Address = 0x40014000 +\
    \ 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 12, 3> oc2m;\n      BitFieldModel<uint32_t, 11, 1> oc2pe;\n      BitFieldModel<uint32_t,\
    \ 10, 1> oc2fe;\n      BitFieldModel<uint32_t, 8, 2> cc2s;\n      BitFieldModel<uint32_t,\
    \ 4, 3> oc1m;\n      BitFieldModel<uint32_t, 3, 1> oc1pe;\n      BitFieldModel<uint32_t,\
    \ 2, 1> oc1fe;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccmr1_input\n  {\n    constexpr static unsigned int Address = 0x40014000 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 3>\
    \ ic2f;\n      BitFieldModel<uint32_t, 10, 2> ic2pcs;\n      BitFieldModel<uint32_t,\
    \ 8, 2> cc2s;\n      BitFieldModel<uint32_t, 4, 3> ic1f;\n      BitFieldModel<uint32_t,\
    \ 2, 2> icpcs;\n      BitFieldModel<uint32_t, 0, 2> cc1s;\n    };\n  };\n\n  struct\
    \ ccer\n  {\n    constexpr static unsigned int Address = 0x40014000 + 0x0020;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ cc2np;\n      BitFieldModel<uint32_t, 5, 1> cc2p;\n      BitFieldModel<uint32_t,\
    \ 4, 1> cc2e;\n      BitFieldModel<uint32_t, 3, 1> cc1np;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cc1p;\n      BitFieldModel<uint32_t, 0, 1> cc1e;\n    };\n  };\n\n  struct\
    \ cnt\n  {\n    constexpr static unsigned int Address = 0x40014000 + 0x0024;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ cnt;\n    };\n  };\n\n  struct psc\n  {\n    constexpr static unsigned int Address\
    \ = 0x40014000 + 0x0028;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> psc;\n    };\n  };\n\n  struct arr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40014000 + 0x002C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> arr;\n    };\n  };\n\n  struct ccr1\n  {\n\
    \    constexpr static unsigned int Address = 0x40014000 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> ccr1;\n  \
    \  };\n  };\n\n  struct ccr2\n  {\n    constexpr static unsigned int Address =\
    \ 0x40014000 + 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> ccr2;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM9_H */"
  name: TIM9
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART1_H\n#define DRAL_STM32F411_USART1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct usart1\n\
    {\n  struct sr\n  {\n    constexpr static unsigned int Address = 0x40011000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cts;\n      BitFieldModel<uint32_t, 8, 1> lbd;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txe;\n      BitFieldModel<uint32_t, 6, 1> tc;\n      BitFieldModel<uint32_t,\
    \ 5, 1> rxne;\n      BitFieldModel<uint32_t, 4, 1> idle;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ore;\n      BitFieldModel<uint32_t, 2, 1> nf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> fe;\n      BitFieldModel<uint32_t, 0, 1> pe;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40011000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 9>\
    \ dr;\n    };\n  };\n\n  struct brr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40011000 + 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 4, 12> div_mantissa;\n      BitFieldModel<uint32_t, 0, 4> div_fraction;\n  \
    \  };\n  };\n\n  struct cr1\n  {\n    constexpr static unsigned int Address =\
    \ 0x40011000 + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> over8;\n      BitFieldModel<uint32_t, 13, 1> ue;\n      BitFieldModel<uint32_t,\
    \ 12, 1> m;\n      BitFieldModel<uint32_t, 11, 1> wake;\n      BitFieldModel<uint32_t,\
    \ 10, 1> pce;\n      BitFieldModel<uint32_t, 9, 1> ps;\n      BitFieldModel<uint32_t,\
    \ 8, 1> peie;\n      BitFieldModel<uint32_t, 7, 1> txeie;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tcie;\n      BitFieldModel<uint32_t, 5, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 4, 1> idleie;\n      BitFieldModel<uint32_t, 3, 1> te;\n      BitFieldModel<uint32_t,\
    \ 2, 1> re;\n      BitFieldModel<uint32_t, 1, 1> rwu;\n      BitFieldModel<uint32_t,\
    \ 0, 1> sbk;\n    };\n  };\n\n  struct cr2\n  {\n    constexpr static unsigned\
    \ int Address = 0x40011000 + 0x0010;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 14, 1> linen;\n      BitFieldModel<uint32_t, 12,\
    \ 2> stop;\n      BitFieldModel<uint32_t, 11, 1> clken;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cpol;\n      BitFieldModel<uint32_t, 9, 1> cpha;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lbcl;\n      BitFieldModel<uint32_t, 6, 1> lbdie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> lbdl;\n      BitFieldModel<uint32_t, 0, 4> add;\n    };\n  };\n\n  struct\
    \ cr3\n  {\n    constexpr static unsigned int Address = 0x40011000 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 11, 1>\
    \ onebit;\n      BitFieldModel<uint32_t, 10, 1> ctsie;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ctse;\n      BitFieldModel<uint32_t, 8, 1> rtse;\n      BitFieldModel<uint32_t,\
    \ 7, 1> dmat;\n      BitFieldModel<uint32_t, 6, 1> dmar;\n      BitFieldModel<uint32_t,\
    \ 5, 1> scen;\n      BitFieldModel<uint32_t, 4, 1> nack;\n      BitFieldModel<uint32_t,\
    \ 3, 1> hdsel;\n      BitFieldModel<uint32_t, 2, 1> irlp;\n      BitFieldModel<uint32_t,\
    \ 1, 1> iren;\n      BitFieldModel<uint32_t, 0, 1> eie;\n    };\n  };\n\n  struct\
    \ gtpr\n  {\n    constexpr static unsigned int Address = 0x40011000 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 8, 8>\
    \ gt;\n      BitFieldModel<uint32_t, 0, 8> psc;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_USART1_H */"
  name: USART1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART2_H\n#define DRAL_STM32F411_USART2_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct usart2\n\
    {\n  struct sr\n  {\n    constexpr static unsigned int Address = 0x40004400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cts;\n      BitFieldModel<uint32_t, 8, 1> lbd;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txe;\n      BitFieldModel<uint32_t, 6, 1> tc;\n      BitFieldModel<uint32_t,\
    \ 5, 1> rxne;\n      BitFieldModel<uint32_t, 4, 1> idle;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ore;\n      BitFieldModel<uint32_t, 2, 1> nf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> fe;\n      BitFieldModel<uint32_t, 0, 1> pe;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40004400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 9>\
    \ dr;\n    };\n  };\n\n  struct brr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40004400 + 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 4, 12> div_mantissa;\n      BitFieldModel<uint32_t, 0, 4> div_fraction;\n  \
    \  };\n  };\n\n  struct cr1\n  {\n    constexpr static unsigned int Address =\
    \ 0x40004400 + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> over8;\n      BitFieldModel<uint32_t, 13, 1> ue;\n      BitFieldModel<uint32_t,\
    \ 12, 1> m;\n      BitFieldModel<uint32_t, 11, 1> wake;\n      BitFieldModel<uint32_t,\
    \ 10, 1> pce;\n      BitFieldModel<uint32_t, 9, 1> ps;\n      BitFieldModel<uint32_t,\
    \ 8, 1> peie;\n      BitFieldModel<uint32_t, 7, 1> txeie;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tcie;\n      BitFieldModel<uint32_t, 5, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 4, 1> idleie;\n      BitFieldModel<uint32_t, 3, 1> te;\n      BitFieldModel<uint32_t,\
    \ 2, 1> re;\n      BitFieldModel<uint32_t, 1, 1> rwu;\n      BitFieldModel<uint32_t,\
    \ 0, 1> sbk;\n    };\n  };\n\n  struct cr2\n  {\n    constexpr static unsigned\
    \ int Address = 0x40004400 + 0x0010;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 14, 1> linen;\n      BitFieldModel<uint32_t, 12,\
    \ 2> stop;\n      BitFieldModel<uint32_t, 11, 1> clken;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cpol;\n      BitFieldModel<uint32_t, 9, 1> cpha;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lbcl;\n      BitFieldModel<uint32_t, 6, 1> lbdie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> lbdl;\n      BitFieldModel<uint32_t, 0, 4> add;\n    };\n  };\n\n  struct\
    \ cr3\n  {\n    constexpr static unsigned int Address = 0x40004400 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 11, 1>\
    \ onebit;\n      BitFieldModel<uint32_t, 10, 1> ctsie;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ctse;\n      BitFieldModel<uint32_t, 8, 1> rtse;\n      BitFieldModel<uint32_t,\
    \ 7, 1> dmat;\n      BitFieldModel<uint32_t, 6, 1> dmar;\n      BitFieldModel<uint32_t,\
    \ 5, 1> scen;\n      BitFieldModel<uint32_t, 4, 1> nack;\n      BitFieldModel<uint32_t,\
    \ 3, 1> hdsel;\n      BitFieldModel<uint32_t, 2, 1> irlp;\n      BitFieldModel<uint32_t,\
    \ 1, 1> iren;\n      BitFieldModel<uint32_t, 0, 1> eie;\n    };\n  };\n\n  struct\
    \ gtpr\n  {\n    constexpr static unsigned int Address = 0x40004400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 8, 8>\
    \ gt;\n      BitFieldModel<uint32_t, 0, 8> psc;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_USART2_H */"
  name: USART2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART6_H\n#define DRAL_STM32F411_USART6_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct usart6\n\
    {\n  struct sr\n  {\n    constexpr static unsigned int Address = 0x40011400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cts;\n      BitFieldModel<uint32_t, 8, 1> lbd;\n      BitFieldModel<uint32_t,\
    \ 7, 1> txe;\n      BitFieldModel<uint32_t, 6, 1> tc;\n      BitFieldModel<uint32_t,\
    \ 5, 1> rxne;\n      BitFieldModel<uint32_t, 4, 1> idle;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ore;\n      BitFieldModel<uint32_t, 2, 1> nf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> fe;\n      BitFieldModel<uint32_t, 0, 1> pe;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40011400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 9>\
    \ dr;\n    };\n  };\n\n  struct brr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40011400 + 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 4, 12> div_mantissa;\n      BitFieldModel<uint32_t, 0, 4> div_fraction;\n  \
    \  };\n  };\n\n  struct cr1\n  {\n    constexpr static unsigned int Address =\
    \ 0x40011400 + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> over8;\n      BitFieldModel<uint32_t, 13, 1> ue;\n      BitFieldModel<uint32_t,\
    \ 12, 1> m;\n      BitFieldModel<uint32_t, 11, 1> wake;\n      BitFieldModel<uint32_t,\
    \ 10, 1> pce;\n      BitFieldModel<uint32_t, 9, 1> ps;\n      BitFieldModel<uint32_t,\
    \ 8, 1> peie;\n      BitFieldModel<uint32_t, 7, 1> txeie;\n      BitFieldModel<uint32_t,\
    \ 6, 1> tcie;\n      BitFieldModel<uint32_t, 5, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 4, 1> idleie;\n      BitFieldModel<uint32_t, 3, 1> te;\n      BitFieldModel<uint32_t,\
    \ 2, 1> re;\n      BitFieldModel<uint32_t, 1, 1> rwu;\n      BitFieldModel<uint32_t,\
    \ 0, 1> sbk;\n    };\n  };\n\n  struct cr2\n  {\n    constexpr static unsigned\
    \ int Address = 0x40011400 + 0x0010;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 14, 1> linen;\n      BitFieldModel<uint32_t, 12,\
    \ 2> stop;\n      BitFieldModel<uint32_t, 11, 1> clken;\n      BitFieldModel<uint32_t,\
    \ 10, 1> cpol;\n      BitFieldModel<uint32_t, 9, 1> cpha;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lbcl;\n      BitFieldModel<uint32_t, 6, 1> lbdie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> lbdl;\n      BitFieldModel<uint32_t, 0, 4> add;\n    };\n  };\n\n  struct\
    \ cr3\n  {\n    constexpr static unsigned int Address = 0x40011400 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 11, 1>\
    \ onebit;\n      BitFieldModel<uint32_t, 10, 1> ctsie;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ctse;\n      BitFieldModel<uint32_t, 8, 1> rtse;\n      BitFieldModel<uint32_t,\
    \ 7, 1> dmat;\n      BitFieldModel<uint32_t, 6, 1> dmar;\n      BitFieldModel<uint32_t,\
    \ 5, 1> scen;\n      BitFieldModel<uint32_t, 4, 1> nack;\n      BitFieldModel<uint32_t,\
    \ 3, 1> hdsel;\n      BitFieldModel<uint32_t, 2, 1> irlp;\n      BitFieldModel<uint32_t,\
    \ 1, 1> iren;\n      BitFieldModel<uint32_t, 0, 1> eie;\n    };\n  };\n\n  struct\
    \ gtpr\n  {\n    constexpr static unsigned int Address = 0x40011400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 8, 8>\
    \ gt;\n      BitFieldModel<uint32_t, 0, 8> psc;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_USART6_H */"
  name: USART6
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_WWDG_H\n#define DRAL_STM32F411_WWDG_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct wwdg\n\
    {\n  struct cr\n  {\n    constexpr static unsigned int Address = 0x40002C00 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 7, 1> wdga;\n      BitFieldModel<uint32_t, 0, 7> t;\n    };\n  };\n\n  struct\
    \ cfr\n  {\n    constexpr static unsigned int Address = 0x40002C00 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 9, 1>\
    \ ewi;\n      BitFieldModel<uint32_t, 8, 1> wdgtb1;\n      BitFieldModel<uint32_t,\
    \ 7, 1> wdgtb0;\n      BitFieldModel<uint32_t, 0, 7> w;\n    };\n  };\n\n  struct\
    \ sr\n  {\n    constexpr static unsigned int Address = 0x40002C00 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1>\
    \ ewif;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_WWDG_H */"
  name: WWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DMA2_H\n#define DRAL_STM32F411_DMA2_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct dma2\n\
    {\n  struct lisr\n  {\n    constexpr static unsigned int Address = 0x40026400\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> tcif3;\n      BitFieldModel<uint32_t, 26, 1> htif3;\n      BitFieldModel<uint32_t,\
    \ 25, 1> teif3;\n      BitFieldModel<uint32_t, 24, 1> dmeif3;\n      BitFieldModel<uint32_t,\
    \ 22, 1> feif3;\n      BitFieldModel<uint32_t, 21, 1> tcif2;\n      BitFieldModel<uint32_t,\
    \ 20, 1> htif2;\n      BitFieldModel<uint32_t, 19, 1> teif2;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dmeif2;\n      BitFieldModel<uint32_t, 16, 1> feif2;\n      BitFieldModel<uint32_t,\
    \ 11, 1> tcif1;\n      BitFieldModel<uint32_t, 10, 1> htif1;\n      BitFieldModel<uint32_t,\
    \ 9, 1> teif1;\n      BitFieldModel<uint32_t, 8, 1> dmeif1;\n      BitFieldModel<uint32_t,\
    \ 6, 1> feif1;\n      BitFieldModel<uint32_t, 5, 1> tcif0;\n      BitFieldModel<uint32_t,\
    \ 4, 1> htif0;\n      BitFieldModel<uint32_t, 3, 1> teif0;\n      BitFieldModel<uint32_t,\
    \ 2, 1> dmeif0;\n      BitFieldModel<uint32_t, 0, 1> feif0;\n    };\n  };\n\n\
    \  struct hisr\n  {\n    constexpr static unsigned int Address = 0x40026400 +\
    \ 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> tcif7;\n      BitFieldModel<uint32_t, 26, 1> htif7;\n      BitFieldModel<uint32_t,\
    \ 25, 1> teif7;\n      BitFieldModel<uint32_t, 24, 1> dmeif7;\n      BitFieldModel<uint32_t,\
    \ 22, 1> feif7;\n      BitFieldModel<uint32_t, 21, 1> tcif6;\n      BitFieldModel<uint32_t,\
    \ 20, 1> htif6;\n      BitFieldModel<uint32_t, 19, 1> teif6;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dmeif6;\n      BitFieldModel<uint32_t, 16, 1> feif6;\n      BitFieldModel<uint32_t,\
    \ 11, 1> tcif5;\n      BitFieldModel<uint32_t, 10, 1> htif5;\n      BitFieldModel<uint32_t,\
    \ 9, 1> teif5;\n      BitFieldModel<uint32_t, 8, 1> dmeif5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> feif5;\n      BitFieldModel<uint32_t, 5, 1> tcif4;\n      BitFieldModel<uint32_t,\
    \ 4, 1> htif4;\n      BitFieldModel<uint32_t, 3, 1> teif4;\n      BitFieldModel<uint32_t,\
    \ 2, 1> dmeif4;\n      BitFieldModel<uint32_t, 0, 1> feif4;\n    };\n  };\n\n\
    \  struct lifcr\n  {\n    constexpr static unsigned int Address = 0x40026400 +\
    \ 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> ctcif3;\n      BitFieldModel<uint32_t, 26, 1> chtif3;\n      BitFieldModel<uint32_t,\
    \ 25, 1> cteif3;\n      BitFieldModel<uint32_t, 24, 1> cdmeif3;\n      BitFieldModel<uint32_t,\
    \ 22, 1> cfeif3;\n      BitFieldModel<uint32_t, 21, 1> ctcif2;\n      BitFieldModel<uint32_t,\
    \ 20, 1> chtif2;\n      BitFieldModel<uint32_t, 19, 1> cteif2;\n      BitFieldModel<uint32_t,\
    \ 18, 1> cdmeif2;\n      BitFieldModel<uint32_t, 16, 1> cfeif2;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ctcif1;\n      BitFieldModel<uint32_t, 10, 1> chtif1;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cteif1;\n      BitFieldModel<uint32_t, 8, 1> cdmeif1;\n      BitFieldModel<uint32_t,\
    \ 6, 1> cfeif1;\n      BitFieldModel<uint32_t, 5, 1> ctcif0;\n      BitFieldModel<uint32_t,\
    \ 4, 1> chtif0;\n      BitFieldModel<uint32_t, 3, 1> cteif0;\n      BitFieldModel<uint32_t,\
    \ 2, 1> cdmeif0;\n      BitFieldModel<uint32_t, 0, 1> cfeif0;\n    };\n  };\n\n\
    \  struct hifcr\n  {\n    constexpr static unsigned int Address = 0x40026400 +\
    \ 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> ctcif7;\n      BitFieldModel<uint32_t, 26, 1> chtif7;\n      BitFieldModel<uint32_t,\
    \ 25, 1> cteif7;\n      BitFieldModel<uint32_t, 24, 1> cdmeif7;\n      BitFieldModel<uint32_t,\
    \ 22, 1> cfeif7;\n      BitFieldModel<uint32_t, 21, 1> ctcif6;\n      BitFieldModel<uint32_t,\
    \ 20, 1> chtif6;\n      BitFieldModel<uint32_t, 19, 1> cteif6;\n      BitFieldModel<uint32_t,\
    \ 18, 1> cdmeif6;\n      BitFieldModel<uint32_t, 16, 1> cfeif6;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ctcif5;\n      BitFieldModel<uint32_t, 10, 1> chtif5;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cteif5;\n      BitFieldModel<uint32_t, 8, 1> cdmeif5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> cfeif5;\n      BitFieldModel<uint32_t, 5, 1> ctcif4;\n      BitFieldModel<uint32_t,\
    \ 4, 1> chtif4;\n      BitFieldModel<uint32_t, 3, 1> cteif4;\n      BitFieldModel<uint32_t,\
    \ 2, 1> cdmeif4;\n      BitFieldModel<uint32_t, 0, 1> cfeif4;\n    };\n  };\n\n\
    \  struct s0cr\n  {\n    constexpr static unsigned int Address = 0x40026400 +\
    \ 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 25, 3> chsel;\n      BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t,\
    \ 21, 2> pburst;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s0ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0014;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s0par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x0018;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s0m0ar\n  {\n    constexpr static unsigned int Address = 0x40026400\
    \ + 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s0m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s0fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x0024;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s1cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x0028;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s1ndtr\n  {\n    constexpr static unsigned int Address = 0x40026400 + 0x002C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s1par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026400 + 0x0030;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s1m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s1m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026400 + 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s1fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x003C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n  struct s2cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0040;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 3> chsel;\n      BitFieldModel<uint32_t, 23,\
    \ 2> mburst;\n      BitFieldModel<uint32_t, 21, 2> pburst;\n      BitFieldModel<uint32_t,\
    \ 20, 1> ack;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s2ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0044;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s2par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x0048;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s2m0ar\n  {\n    constexpr static unsigned int Address = 0x40026400\
    \ + 0x004C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s2m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0050;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s2fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x0054;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s3cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x0058;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s3ndtr\n  {\n    constexpr static unsigned int Address = 0x40026400 + 0x005C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s3par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026400 + 0x0060;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s3m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x0064;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s3m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026400 + 0x0068;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s3fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x006C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n  struct s4cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0070;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 3> chsel;\n      BitFieldModel<uint32_t, 23,\
    \ 2> mburst;\n      BitFieldModel<uint32_t, 21, 2> pburst;\n      BitFieldModel<uint32_t,\
    \ 20, 1> ack;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s4ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0074;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s4par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x0078;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s4m0ar\n  {\n    constexpr static unsigned int Address = 0x40026400\
    \ + 0x007C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s4m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x0080;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s4fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x0084;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s5cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x0088;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s5ndtr\n  {\n    constexpr static unsigned int Address = 0x40026400 + 0x008C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s5par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026400 + 0x0090;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s5m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x0094;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s5m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026400 + 0x0098;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s5fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x009C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n  struct s6cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x00A0;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 3> chsel;\n      BitFieldModel<uint32_t, 23,\
    \ 2> mburst;\n      BitFieldModel<uint32_t, 21, 2> pburst;\n      BitFieldModel<uint32_t,\
    \ 20, 1> ack;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s6ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x00A4;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s6par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x00A8;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s6m0ar\n  {\n    constexpr static unsigned int Address = 0x40026400\
    \ + 0x00AC;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s6m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x00B0;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s6fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026400 + 0x00B4;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s7cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x00B8;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s7ndtr\n  {\n    constexpr static unsigned int Address = 0x40026400 + 0x00BC;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s7par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026400 + 0x00C0;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s7m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026400 + 0x00C4;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s7m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026400 + 0x00C8;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s7fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026400 + 0x00CC;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_DMA2_H */"
  name: DMA2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DMA1_H\n#define DRAL_STM32F411_DMA1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct dma1\n\
    {\n  struct lisr\n  {\n    constexpr static unsigned int Address = 0x40026000\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> tcif3;\n      BitFieldModel<uint32_t, 26, 1> htif3;\n      BitFieldModel<uint32_t,\
    \ 25, 1> teif3;\n      BitFieldModel<uint32_t, 24, 1> dmeif3;\n      BitFieldModel<uint32_t,\
    \ 22, 1> feif3;\n      BitFieldModel<uint32_t, 21, 1> tcif2;\n      BitFieldModel<uint32_t,\
    \ 20, 1> htif2;\n      BitFieldModel<uint32_t, 19, 1> teif2;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dmeif2;\n      BitFieldModel<uint32_t, 16, 1> feif2;\n      BitFieldModel<uint32_t,\
    \ 11, 1> tcif1;\n      BitFieldModel<uint32_t, 10, 1> htif1;\n      BitFieldModel<uint32_t,\
    \ 9, 1> teif1;\n      BitFieldModel<uint32_t, 8, 1> dmeif1;\n      BitFieldModel<uint32_t,\
    \ 6, 1> feif1;\n      BitFieldModel<uint32_t, 5, 1> tcif0;\n      BitFieldModel<uint32_t,\
    \ 4, 1> htif0;\n      BitFieldModel<uint32_t, 3, 1> teif0;\n      BitFieldModel<uint32_t,\
    \ 2, 1> dmeif0;\n      BitFieldModel<uint32_t, 0, 1> feif0;\n    };\n  };\n\n\
    \  struct hisr\n  {\n    constexpr static unsigned int Address = 0x40026000 +\
    \ 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> tcif7;\n      BitFieldModel<uint32_t, 26, 1> htif7;\n      BitFieldModel<uint32_t,\
    \ 25, 1> teif7;\n      BitFieldModel<uint32_t, 24, 1> dmeif7;\n      BitFieldModel<uint32_t,\
    \ 22, 1> feif7;\n      BitFieldModel<uint32_t, 21, 1> tcif6;\n      BitFieldModel<uint32_t,\
    \ 20, 1> htif6;\n      BitFieldModel<uint32_t, 19, 1> teif6;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dmeif6;\n      BitFieldModel<uint32_t, 16, 1> feif6;\n      BitFieldModel<uint32_t,\
    \ 11, 1> tcif5;\n      BitFieldModel<uint32_t, 10, 1> htif5;\n      BitFieldModel<uint32_t,\
    \ 9, 1> teif5;\n      BitFieldModel<uint32_t, 8, 1> dmeif5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> feif5;\n      BitFieldModel<uint32_t, 5, 1> tcif4;\n      BitFieldModel<uint32_t,\
    \ 4, 1> htif4;\n      BitFieldModel<uint32_t, 3, 1> teif4;\n      BitFieldModel<uint32_t,\
    \ 2, 1> dmeif4;\n      BitFieldModel<uint32_t, 0, 1> feif4;\n    };\n  };\n\n\
    \  struct lifcr\n  {\n    constexpr static unsigned int Address = 0x40026000 +\
    \ 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> ctcif3;\n      BitFieldModel<uint32_t, 26, 1> chtif3;\n      BitFieldModel<uint32_t,\
    \ 25, 1> cteif3;\n      BitFieldModel<uint32_t, 24, 1> cdmeif3;\n      BitFieldModel<uint32_t,\
    \ 22, 1> cfeif3;\n      BitFieldModel<uint32_t, 21, 1> ctcif2;\n      BitFieldModel<uint32_t,\
    \ 20, 1> chtif2;\n      BitFieldModel<uint32_t, 19, 1> cteif2;\n      BitFieldModel<uint32_t,\
    \ 18, 1> cdmeif2;\n      BitFieldModel<uint32_t, 16, 1> cfeif2;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ctcif1;\n      BitFieldModel<uint32_t, 10, 1> chtif1;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cteif1;\n      BitFieldModel<uint32_t, 8, 1> cdmeif1;\n      BitFieldModel<uint32_t,\
    \ 6, 1> cfeif1;\n      BitFieldModel<uint32_t, 5, 1> ctcif0;\n      BitFieldModel<uint32_t,\
    \ 4, 1> chtif0;\n      BitFieldModel<uint32_t, 3, 1> cteif0;\n      BitFieldModel<uint32_t,\
    \ 2, 1> cdmeif0;\n      BitFieldModel<uint32_t, 0, 1> cfeif0;\n    };\n  };\n\n\
    \  struct hifcr\n  {\n    constexpr static unsigned int Address = 0x40026000 +\
    \ 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 27, 1> ctcif7;\n      BitFieldModel<uint32_t, 26, 1> chtif7;\n      BitFieldModel<uint32_t,\
    \ 25, 1> cteif7;\n      BitFieldModel<uint32_t, 24, 1> cdmeif7;\n      BitFieldModel<uint32_t,\
    \ 22, 1> cfeif7;\n      BitFieldModel<uint32_t, 21, 1> ctcif6;\n      BitFieldModel<uint32_t,\
    \ 20, 1> chtif6;\n      BitFieldModel<uint32_t, 19, 1> cteif6;\n      BitFieldModel<uint32_t,\
    \ 18, 1> cdmeif6;\n      BitFieldModel<uint32_t, 16, 1> cfeif6;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ctcif5;\n      BitFieldModel<uint32_t, 10, 1> chtif5;\n      BitFieldModel<uint32_t,\
    \ 9, 1> cteif5;\n      BitFieldModel<uint32_t, 8, 1> cdmeif5;\n      BitFieldModel<uint32_t,\
    \ 6, 1> cfeif5;\n      BitFieldModel<uint32_t, 5, 1> ctcif4;\n      BitFieldModel<uint32_t,\
    \ 4, 1> chtif4;\n      BitFieldModel<uint32_t, 3, 1> cteif4;\n      BitFieldModel<uint32_t,\
    \ 2, 1> cdmeif4;\n      BitFieldModel<uint32_t, 0, 1> cfeif4;\n    };\n  };\n\n\
    \  struct s0cr\n  {\n    constexpr static unsigned int Address = 0x40026000 +\
    \ 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 25, 3> chsel;\n      BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t,\
    \ 21, 2> pburst;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s0ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0014;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s0par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x0018;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s0m0ar\n  {\n    constexpr static unsigned int Address = 0x40026000\
    \ + 0x001C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s0m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s0fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x0024;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s1cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x0028;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s1ndtr\n  {\n    constexpr static unsigned int Address = 0x40026000 + 0x002C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s1par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026000 + 0x0030;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s1m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x0034;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s1m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026000 + 0x0038;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s1fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x003C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n  struct s2cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0040;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 3> chsel;\n      BitFieldModel<uint32_t, 23,\
    \ 2> mburst;\n      BitFieldModel<uint32_t, 21, 2> pburst;\n      BitFieldModel<uint32_t,\
    \ 20, 1> ack;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s2ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0044;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s2par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x0048;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s2m0ar\n  {\n    constexpr static unsigned int Address = 0x40026000\
    \ + 0x004C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s2m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0050;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s2fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x0054;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s3cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x0058;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s3ndtr\n  {\n    constexpr static unsigned int Address = 0x40026000 + 0x005C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s3par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026000 + 0x0060;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s3m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x0064;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s3m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026000 + 0x0068;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s3fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x006C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n  struct s4cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0070;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 3> chsel;\n      BitFieldModel<uint32_t, 23,\
    \ 2> mburst;\n      BitFieldModel<uint32_t, 21, 2> pburst;\n      BitFieldModel<uint32_t,\
    \ 20, 1> ack;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s4ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0074;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s4par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x0078;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s4m0ar\n  {\n    constexpr static unsigned int Address = 0x40026000\
    \ + 0x007C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s4m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x0080;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s4fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x0084;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s5cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x0088;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s5ndtr\n  {\n    constexpr static unsigned int Address = 0x40026000 + 0x008C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s5par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026000 + 0x0090;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s5m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x0094;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s5m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026000 + 0x0098;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s5fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x009C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n  struct s6cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x00A0;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 25, 3> chsel;\n      BitFieldModel<uint32_t, 23,\
    \ 2> mburst;\n      BitFieldModel<uint32_t, 21, 2> pburst;\n      BitFieldModel<uint32_t,\
    \ 20, 1> ack;\n      BitFieldModel<uint32_t, 19, 1> ct;\n      BitFieldModel<uint32_t,\
    \ 18, 1> dbm;\n      BitFieldModel<uint32_t, 16, 2> pl;\n      BitFieldModel<uint32_t,\
    \ 15, 1> pincos;\n      BitFieldModel<uint32_t, 13, 2> msize;\n      BitFieldModel<uint32_t,\
    \ 11, 2> psize;\n      BitFieldModel<uint32_t, 10, 1> minc;\n      BitFieldModel<uint32_t,\
    \ 9, 1> pinc;\n      BitFieldModel<uint32_t, 8, 1> circ;\n      BitFieldModel<uint32_t,\
    \ 6, 2> dir;\n      BitFieldModel<uint32_t, 5, 1> pfctrl;\n      BitFieldModel<uint32_t,\
    \ 4, 1> tcie;\n      BitFieldModel<uint32_t, 3, 1> htie;\n      BitFieldModel<uint32_t,\
    \ 2, 1> teie;\n      BitFieldModel<uint32_t, 1, 1> dmeie;\n      BitFieldModel<uint32_t,\
    \ 0, 1> en;\n    };\n  };\n\n  struct s6ndtr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x00A4;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 16> ndt;\n    };\n  };\n\n  struct s6par\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x00A8;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> pa;\n    };\n\
    \  };\n\n  struct s6m0ar\n  {\n    constexpr static unsigned int Address = 0x40026000\
    \ + 0x00AC;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m0a;\n    };\n  };\n\n  struct s6m1ar\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x00B0;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> m1a;\n    };\n  };\n\n  struct s6fcr\n \
    \ {\n    constexpr static unsigned int Address = 0x40026000 + 0x00B4;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1> feie;\n   \
    \   BitFieldModel<uint32_t, 3, 3> fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n\
    \      BitFieldModel<uint32_t, 0, 2> fth;\n    };\n  };\n\n  struct s7cr\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x00B8;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 25, 3> chsel;\n \
    \     BitFieldModel<uint32_t, 23, 2> mburst;\n      BitFieldModel<uint32_t, 21,\
    \ 2> pburst;\n      BitFieldModel<uint32_t, 20, 1> ack;\n      BitFieldModel<uint32_t,\
    \ 19, 1> ct;\n      BitFieldModel<uint32_t, 18, 1> dbm;\n      BitFieldModel<uint32_t,\
    \ 16, 2> pl;\n      BitFieldModel<uint32_t, 15, 1> pincos;\n      BitFieldModel<uint32_t,\
    \ 13, 2> msize;\n      BitFieldModel<uint32_t, 11, 2> psize;\n      BitFieldModel<uint32_t,\
    \ 10, 1> minc;\n      BitFieldModel<uint32_t, 9, 1> pinc;\n      BitFieldModel<uint32_t,\
    \ 8, 1> circ;\n      BitFieldModel<uint32_t, 6, 2> dir;\n      BitFieldModel<uint32_t,\
    \ 5, 1> pfctrl;\n      BitFieldModel<uint32_t, 4, 1> tcie;\n      BitFieldModel<uint32_t,\
    \ 3, 1> htie;\n      BitFieldModel<uint32_t, 2, 1> teie;\n      BitFieldModel<uint32_t,\
    \ 1, 1> dmeie;\n      BitFieldModel<uint32_t, 0, 1> en;\n    };\n  };\n\n  struct\
    \ s7ndtr\n  {\n    constexpr static unsigned int Address = 0x40026000 + 0x00BC;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ ndt;\n    };\n  };\n\n  struct s7par\n  {\n    constexpr static unsigned int\
    \ Address = 0x40026000 + 0x00C0;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 32> pa;\n    };\n  };\n\n  struct s7m0ar\n  {\n\
    \    constexpr static unsigned int Address = 0x40026000 + 0x00C4;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> m0a;\n   \
    \ };\n  };\n\n  struct s7m1ar\n  {\n    constexpr static unsigned int Address\
    \ = 0x40026000 + 0x00C8;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> m1a;\n    };\n  };\n\n  struct s7fcr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40026000 + 0x00CC;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 7, 1> feie;\n      BitFieldModel<uint32_t, 3, 3>\
    \ fs;\n      BitFieldModel<uint32_t, 2, 1> dmdis;\n      BitFieldModel<uint32_t,\
    \ 0, 2> fth;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_DMA1_H */"
  name: DMA1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOH_H\n#define DRAL_STM32F411_GPIOH_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct gpioh\n\
    {\n  struct moder\n  {\n    constexpr static unsigned int Address = 0x40021C00\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> moder15;\n      BitFieldModel<uint32_t, 28, 2> moder14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> moder13;\n      BitFieldModel<uint32_t, 24, 2> moder12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> moder11;\n      BitFieldModel<uint32_t, 20, 2> moder10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> moder9;\n      BitFieldModel<uint32_t, 16, 2> moder8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> moder7;\n      BitFieldModel<uint32_t, 12, 2> moder6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> moder5;\n      BitFieldModel<uint32_t, 8, 2> moder4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> moder3;\n      BitFieldModel<uint32_t, 4, 2> moder2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> moder1;\n      BitFieldModel<uint32_t, 0, 2> moder0;\n    };\n  };\n\n\
    \  struct otyper\n  {\n    constexpr static unsigned int Address = 0x40021C00\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> ot15;\n      BitFieldModel<uint32_t, 14, 1> ot14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ot13;\n      BitFieldModel<uint32_t, 12, 1> ot12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ot11;\n      BitFieldModel<uint32_t, 10, 1> ot10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ot9;\n      BitFieldModel<uint32_t, 8, 1> ot8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> ot7;\n      BitFieldModel<uint32_t, 6, 1> ot6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ot5;\n      BitFieldModel<uint32_t, 4, 1> ot4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ot3;\n      BitFieldModel<uint32_t, 2, 1> ot2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> ot1;\n      BitFieldModel<uint32_t, 0, 1> ot0;\n    };\n  };\n\n  struct\
    \ ospeedr\n  {\n    constexpr static unsigned int Address = 0x40021C00 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ ospeedr15;\n      BitFieldModel<uint32_t, 28, 2> ospeedr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> ospeedr13;\n      BitFieldModel<uint32_t, 24, 2> ospeedr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> ospeedr11;\n      BitFieldModel<uint32_t, 20, 2> ospeedr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> ospeedr9;\n      BitFieldModel<uint32_t, 16, 2> ospeedr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> ospeedr7;\n      BitFieldModel<uint32_t, 12, 2> ospeedr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> ospeedr5;\n      BitFieldModel<uint32_t, 8, 2> ospeedr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> ospeedr3;\n      BitFieldModel<uint32_t, 4, 2> ospeedr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ospeedr1;\n      BitFieldModel<uint32_t, 0, 2> ospeedr0;\n    };\n  };\n\
    \n  struct pupdr\n  {\n    constexpr static unsigned int Address = 0x40021C00\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> pupdr15;\n      BitFieldModel<uint32_t, 28, 2> pupdr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> pupdr13;\n      BitFieldModel<uint32_t, 24, 2> pupdr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> pupdr11;\n      BitFieldModel<uint32_t, 20, 2> pupdr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> pupdr9;\n      BitFieldModel<uint32_t, 16, 2> pupdr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> pupdr7;\n      BitFieldModel<uint32_t, 12, 2> pupdr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> pupdr5;\n      BitFieldModel<uint32_t, 8, 2> pupdr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> pupdr3;\n      BitFieldModel<uint32_t, 4, 2> pupdr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> pupdr1;\n      BitFieldModel<uint32_t, 0, 2> pupdr0;\n    };\n  };\n\n\
    \  struct idr\n  {\n    constexpr static unsigned int Address = 0x40021C00 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ idr15;\n      BitFieldModel<uint32_t, 14, 1> idr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> idr13;\n      BitFieldModel<uint32_t, 12, 1> idr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> idr11;\n      BitFieldModel<uint32_t, 10, 1> idr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> idr9;\n      BitFieldModel<uint32_t, 8, 1> idr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> idr7;\n      BitFieldModel<uint32_t, 6, 1> idr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> idr5;\n      BitFieldModel<uint32_t, 4, 1> idr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> idr3;\n      BitFieldModel<uint32_t, 2, 1> idr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> idr1;\n      BitFieldModel<uint32_t, 0, 1> idr0;\n    };\n  };\n\n  struct\
    \ odr\n  {\n    constexpr static unsigned int Address = 0x40021C00 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ odr15;\n      BitFieldModel<uint32_t, 14, 1> odr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> odr13;\n      BitFieldModel<uint32_t, 12, 1> odr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> odr11;\n      BitFieldModel<uint32_t, 10, 1> odr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> odr9;\n      BitFieldModel<uint32_t, 8, 1> odr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> odr7;\n      BitFieldModel<uint32_t, 6, 1> odr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> odr5;\n      BitFieldModel<uint32_t, 4, 1> odr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> odr3;\n      BitFieldModel<uint32_t, 2, 1> odr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> odr1;\n      BitFieldModel<uint32_t, 0, 1> odr0;\n    };\n  };\n\n  struct\
    \ bsrr\n  {\n    constexpr static unsigned int Address = 0x40021C00 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ br15;\n      BitFieldModel<uint32_t, 30, 1> br14;\n      BitFieldModel<uint32_t,\
    \ 29, 1> br13;\n      BitFieldModel<uint32_t, 28, 1> br12;\n      BitFieldModel<uint32_t,\
    \ 27, 1> br11;\n      BitFieldModel<uint32_t, 26, 1> br10;\n      BitFieldModel<uint32_t,\
    \ 25, 1> br9;\n      BitFieldModel<uint32_t, 24, 1> br8;\n      BitFieldModel<uint32_t,\
    \ 23, 1> br7;\n      BitFieldModel<uint32_t, 22, 1> br6;\n      BitFieldModel<uint32_t,\
    \ 21, 1> br5;\n      BitFieldModel<uint32_t, 20, 1> br4;\n      BitFieldModel<uint32_t,\
    \ 19, 1> br3;\n      BitFieldModel<uint32_t, 18, 1> br2;\n      BitFieldModel<uint32_t,\
    \ 17, 1> br1;\n      BitFieldModel<uint32_t, 16, 1> br0;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bs15;\n      BitFieldModel<uint32_t, 14, 1> bs14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> bs13;\n      BitFieldModel<uint32_t, 12, 1> bs12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> bs11;\n      BitFieldModel<uint32_t, 10, 1> bs10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> bs9;\n      BitFieldModel<uint32_t, 8, 1> bs8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bs7;\n      BitFieldModel<uint32_t, 6, 1> bs6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> bs5;\n      BitFieldModel<uint32_t, 4, 1> bs4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> bs3;\n      BitFieldModel<uint32_t, 2, 1> bs2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> bs1;\n      BitFieldModel<uint32_t, 0, 1> bs0;\n    };\n  };\n\n  struct\
    \ lckr\n  {\n    constexpr static unsigned int Address = 0x40021C00 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 1>\
    \ lckk;\n      BitFieldModel<uint32_t, 15, 1> lck15;\n      BitFieldModel<uint32_t,\
    \ 14, 1> lck14;\n      BitFieldModel<uint32_t, 13, 1> lck13;\n      BitFieldModel<uint32_t,\
    \ 12, 1> lck12;\n      BitFieldModel<uint32_t, 11, 1> lck11;\n      BitFieldModel<uint32_t,\
    \ 10, 1> lck10;\n      BitFieldModel<uint32_t, 9, 1> lck9;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lck8;\n      BitFieldModel<uint32_t, 7, 1> lck7;\n      BitFieldModel<uint32_t,\
    \ 6, 1> lck6;\n      BitFieldModel<uint32_t, 5, 1> lck5;\n      BitFieldModel<uint32_t,\
    \ 4, 1> lck4;\n      BitFieldModel<uint32_t, 3, 1> lck3;\n      BitFieldModel<uint32_t,\
    \ 2, 1> lck2;\n      BitFieldModel<uint32_t, 1, 1> lck1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lck0;\n    };\n  };\n\n  struct afrl\n  {\n    constexpr static unsigned\
    \ int Address = 0x40021C00 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrl7;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrl6;\n      BitFieldModel<uint32_t, 20, 4> afrl5;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrl4;\n      BitFieldModel<uint32_t, 12, 4> afrl3;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrl2;\n      BitFieldModel<uint32_t, 4, 4> afrl1;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrl0;\n    };\n  };\n\n  struct afrh\n  {\n    constexpr static unsigned\
    \ int Address = 0x40021C00 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrh15;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrh14;\n      BitFieldModel<uint32_t, 20, 4> afrh13;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrh12;\n      BitFieldModel<uint32_t, 12, 4> afrh11;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrh10;\n      BitFieldModel<uint32_t, 4, 4> afrh9;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrh8;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOH_H */"
  name: GPIOH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOE_H\n#define DRAL_STM32F411_GPIOE_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct gpioe\n\
    {\n  struct moder\n  {\n    constexpr static unsigned int Address = 0x40021000\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> moder15;\n      BitFieldModel<uint32_t, 28, 2> moder14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> moder13;\n      BitFieldModel<uint32_t, 24, 2> moder12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> moder11;\n      BitFieldModel<uint32_t, 20, 2> moder10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> moder9;\n      BitFieldModel<uint32_t, 16, 2> moder8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> moder7;\n      BitFieldModel<uint32_t, 12, 2> moder6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> moder5;\n      BitFieldModel<uint32_t, 8, 2> moder4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> moder3;\n      BitFieldModel<uint32_t, 4, 2> moder2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> moder1;\n      BitFieldModel<uint32_t, 0, 2> moder0;\n    };\n  };\n\n\
    \  struct otyper\n  {\n    constexpr static unsigned int Address = 0x40021000\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> ot15;\n      BitFieldModel<uint32_t, 14, 1> ot14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ot13;\n      BitFieldModel<uint32_t, 12, 1> ot12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ot11;\n      BitFieldModel<uint32_t, 10, 1> ot10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ot9;\n      BitFieldModel<uint32_t, 8, 1> ot8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> ot7;\n      BitFieldModel<uint32_t, 6, 1> ot6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ot5;\n      BitFieldModel<uint32_t, 4, 1> ot4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ot3;\n      BitFieldModel<uint32_t, 2, 1> ot2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> ot1;\n      BitFieldModel<uint32_t, 0, 1> ot0;\n    };\n  };\n\n  struct\
    \ ospeedr\n  {\n    constexpr static unsigned int Address = 0x40021000 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ ospeedr15;\n      BitFieldModel<uint32_t, 28, 2> ospeedr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> ospeedr13;\n      BitFieldModel<uint32_t, 24, 2> ospeedr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> ospeedr11;\n      BitFieldModel<uint32_t, 20, 2> ospeedr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> ospeedr9;\n      BitFieldModel<uint32_t, 16, 2> ospeedr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> ospeedr7;\n      BitFieldModel<uint32_t, 12, 2> ospeedr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> ospeedr5;\n      BitFieldModel<uint32_t, 8, 2> ospeedr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> ospeedr3;\n      BitFieldModel<uint32_t, 4, 2> ospeedr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ospeedr1;\n      BitFieldModel<uint32_t, 0, 2> ospeedr0;\n    };\n  };\n\
    \n  struct pupdr\n  {\n    constexpr static unsigned int Address = 0x40021000\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> pupdr15;\n      BitFieldModel<uint32_t, 28, 2> pupdr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> pupdr13;\n      BitFieldModel<uint32_t, 24, 2> pupdr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> pupdr11;\n      BitFieldModel<uint32_t, 20, 2> pupdr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> pupdr9;\n      BitFieldModel<uint32_t, 16, 2> pupdr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> pupdr7;\n      BitFieldModel<uint32_t, 12, 2> pupdr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> pupdr5;\n      BitFieldModel<uint32_t, 8, 2> pupdr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> pupdr3;\n      BitFieldModel<uint32_t, 4, 2> pupdr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> pupdr1;\n      BitFieldModel<uint32_t, 0, 2> pupdr0;\n    };\n  };\n\n\
    \  struct idr\n  {\n    constexpr static unsigned int Address = 0x40021000 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ idr15;\n      BitFieldModel<uint32_t, 14, 1> idr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> idr13;\n      BitFieldModel<uint32_t, 12, 1> idr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> idr11;\n      BitFieldModel<uint32_t, 10, 1> idr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> idr9;\n      BitFieldModel<uint32_t, 8, 1> idr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> idr7;\n      BitFieldModel<uint32_t, 6, 1> idr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> idr5;\n      BitFieldModel<uint32_t, 4, 1> idr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> idr3;\n      BitFieldModel<uint32_t, 2, 1> idr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> idr1;\n      BitFieldModel<uint32_t, 0, 1> idr0;\n    };\n  };\n\n  struct\
    \ odr\n  {\n    constexpr static unsigned int Address = 0x40021000 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ odr15;\n      BitFieldModel<uint32_t, 14, 1> odr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> odr13;\n      BitFieldModel<uint32_t, 12, 1> odr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> odr11;\n      BitFieldModel<uint32_t, 10, 1> odr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> odr9;\n      BitFieldModel<uint32_t, 8, 1> odr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> odr7;\n      BitFieldModel<uint32_t, 6, 1> odr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> odr5;\n      BitFieldModel<uint32_t, 4, 1> odr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> odr3;\n      BitFieldModel<uint32_t, 2, 1> odr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> odr1;\n      BitFieldModel<uint32_t, 0, 1> odr0;\n    };\n  };\n\n  struct\
    \ bsrr\n  {\n    constexpr static unsigned int Address = 0x40021000 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ br15;\n      BitFieldModel<uint32_t, 30, 1> br14;\n      BitFieldModel<uint32_t,\
    \ 29, 1> br13;\n      BitFieldModel<uint32_t, 28, 1> br12;\n      BitFieldModel<uint32_t,\
    \ 27, 1> br11;\n      BitFieldModel<uint32_t, 26, 1> br10;\n      BitFieldModel<uint32_t,\
    \ 25, 1> br9;\n      BitFieldModel<uint32_t, 24, 1> br8;\n      BitFieldModel<uint32_t,\
    \ 23, 1> br7;\n      BitFieldModel<uint32_t, 22, 1> br6;\n      BitFieldModel<uint32_t,\
    \ 21, 1> br5;\n      BitFieldModel<uint32_t, 20, 1> br4;\n      BitFieldModel<uint32_t,\
    \ 19, 1> br3;\n      BitFieldModel<uint32_t, 18, 1> br2;\n      BitFieldModel<uint32_t,\
    \ 17, 1> br1;\n      BitFieldModel<uint32_t, 16, 1> br0;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bs15;\n      BitFieldModel<uint32_t, 14, 1> bs14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> bs13;\n      BitFieldModel<uint32_t, 12, 1> bs12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> bs11;\n      BitFieldModel<uint32_t, 10, 1> bs10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> bs9;\n      BitFieldModel<uint32_t, 8, 1> bs8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bs7;\n      BitFieldModel<uint32_t, 6, 1> bs6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> bs5;\n      BitFieldModel<uint32_t, 4, 1> bs4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> bs3;\n      BitFieldModel<uint32_t, 2, 1> bs2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> bs1;\n      BitFieldModel<uint32_t, 0, 1> bs0;\n    };\n  };\n\n  struct\
    \ lckr\n  {\n    constexpr static unsigned int Address = 0x40021000 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 1>\
    \ lckk;\n      BitFieldModel<uint32_t, 15, 1> lck15;\n      BitFieldModel<uint32_t,\
    \ 14, 1> lck14;\n      BitFieldModel<uint32_t, 13, 1> lck13;\n      BitFieldModel<uint32_t,\
    \ 12, 1> lck12;\n      BitFieldModel<uint32_t, 11, 1> lck11;\n      BitFieldModel<uint32_t,\
    \ 10, 1> lck10;\n      BitFieldModel<uint32_t, 9, 1> lck9;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lck8;\n      BitFieldModel<uint32_t, 7, 1> lck7;\n      BitFieldModel<uint32_t,\
    \ 6, 1> lck6;\n      BitFieldModel<uint32_t, 5, 1> lck5;\n      BitFieldModel<uint32_t,\
    \ 4, 1> lck4;\n      BitFieldModel<uint32_t, 3, 1> lck3;\n      BitFieldModel<uint32_t,\
    \ 2, 1> lck2;\n      BitFieldModel<uint32_t, 1, 1> lck1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lck0;\n    };\n  };\n\n  struct afrl\n  {\n    constexpr static unsigned\
    \ int Address = 0x40021000 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrl7;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrl6;\n      BitFieldModel<uint32_t, 20, 4> afrl5;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrl4;\n      BitFieldModel<uint32_t, 12, 4> afrl3;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrl2;\n      BitFieldModel<uint32_t, 4, 4> afrl1;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrl0;\n    };\n  };\n\n  struct afrh\n  {\n    constexpr static unsigned\
    \ int Address = 0x40021000 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrh15;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrh14;\n      BitFieldModel<uint32_t, 20, 4> afrh13;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrh12;\n      BitFieldModel<uint32_t, 12, 4> afrh11;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrh10;\n      BitFieldModel<uint32_t, 4, 4> afrh9;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrh8;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOE_H */"
  name: GPIOE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOD_H\n#define DRAL_STM32F411_GPIOD_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct gpiod\n\
    {\n  struct moder\n  {\n    constexpr static unsigned int Address = 0x40020C00\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> moder15;\n      BitFieldModel<uint32_t, 28, 2> moder14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> moder13;\n      BitFieldModel<uint32_t, 24, 2> moder12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> moder11;\n      BitFieldModel<uint32_t, 20, 2> moder10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> moder9;\n      BitFieldModel<uint32_t, 16, 2> moder8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> moder7;\n      BitFieldModel<uint32_t, 12, 2> moder6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> moder5;\n      BitFieldModel<uint32_t, 8, 2> moder4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> moder3;\n      BitFieldModel<uint32_t, 4, 2> moder2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> moder1;\n      BitFieldModel<uint32_t, 0, 2> moder0;\n    };\n  };\n\n\
    \  struct otyper\n  {\n    constexpr static unsigned int Address = 0x40020C00\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> ot15;\n      BitFieldModel<uint32_t, 14, 1> ot14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ot13;\n      BitFieldModel<uint32_t, 12, 1> ot12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ot11;\n      BitFieldModel<uint32_t, 10, 1> ot10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ot9;\n      BitFieldModel<uint32_t, 8, 1> ot8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> ot7;\n      BitFieldModel<uint32_t, 6, 1> ot6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ot5;\n      BitFieldModel<uint32_t, 4, 1> ot4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ot3;\n      BitFieldModel<uint32_t, 2, 1> ot2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> ot1;\n      BitFieldModel<uint32_t, 0, 1> ot0;\n    };\n  };\n\n  struct\
    \ ospeedr\n  {\n    constexpr static unsigned int Address = 0x40020C00 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ ospeedr15;\n      BitFieldModel<uint32_t, 28, 2> ospeedr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> ospeedr13;\n      BitFieldModel<uint32_t, 24, 2> ospeedr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> ospeedr11;\n      BitFieldModel<uint32_t, 20, 2> ospeedr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> ospeedr9;\n      BitFieldModel<uint32_t, 16, 2> ospeedr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> ospeedr7;\n      BitFieldModel<uint32_t, 12, 2> ospeedr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> ospeedr5;\n      BitFieldModel<uint32_t, 8, 2> ospeedr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> ospeedr3;\n      BitFieldModel<uint32_t, 4, 2> ospeedr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ospeedr1;\n      BitFieldModel<uint32_t, 0, 2> ospeedr0;\n    };\n  };\n\
    \n  struct pupdr\n  {\n    constexpr static unsigned int Address = 0x40020C00\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> pupdr15;\n      BitFieldModel<uint32_t, 28, 2> pupdr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> pupdr13;\n      BitFieldModel<uint32_t, 24, 2> pupdr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> pupdr11;\n      BitFieldModel<uint32_t, 20, 2> pupdr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> pupdr9;\n      BitFieldModel<uint32_t, 16, 2> pupdr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> pupdr7;\n      BitFieldModel<uint32_t, 12, 2> pupdr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> pupdr5;\n      BitFieldModel<uint32_t, 8, 2> pupdr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> pupdr3;\n      BitFieldModel<uint32_t, 4, 2> pupdr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> pupdr1;\n      BitFieldModel<uint32_t, 0, 2> pupdr0;\n    };\n  };\n\n\
    \  struct idr\n  {\n    constexpr static unsigned int Address = 0x40020C00 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ idr15;\n      BitFieldModel<uint32_t, 14, 1> idr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> idr13;\n      BitFieldModel<uint32_t, 12, 1> idr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> idr11;\n      BitFieldModel<uint32_t, 10, 1> idr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> idr9;\n      BitFieldModel<uint32_t, 8, 1> idr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> idr7;\n      BitFieldModel<uint32_t, 6, 1> idr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> idr5;\n      BitFieldModel<uint32_t, 4, 1> idr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> idr3;\n      BitFieldModel<uint32_t, 2, 1> idr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> idr1;\n      BitFieldModel<uint32_t, 0, 1> idr0;\n    };\n  };\n\n  struct\
    \ odr\n  {\n    constexpr static unsigned int Address = 0x40020C00 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ odr15;\n      BitFieldModel<uint32_t, 14, 1> odr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> odr13;\n      BitFieldModel<uint32_t, 12, 1> odr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> odr11;\n      BitFieldModel<uint32_t, 10, 1> odr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> odr9;\n      BitFieldModel<uint32_t, 8, 1> odr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> odr7;\n      BitFieldModel<uint32_t, 6, 1> odr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> odr5;\n      BitFieldModel<uint32_t, 4, 1> odr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> odr3;\n      BitFieldModel<uint32_t, 2, 1> odr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> odr1;\n      BitFieldModel<uint32_t, 0, 1> odr0;\n    };\n  };\n\n  struct\
    \ bsrr\n  {\n    constexpr static unsigned int Address = 0x40020C00 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ br15;\n      BitFieldModel<uint32_t, 30, 1> br14;\n      BitFieldModel<uint32_t,\
    \ 29, 1> br13;\n      BitFieldModel<uint32_t, 28, 1> br12;\n      BitFieldModel<uint32_t,\
    \ 27, 1> br11;\n      BitFieldModel<uint32_t, 26, 1> br10;\n      BitFieldModel<uint32_t,\
    \ 25, 1> br9;\n      BitFieldModel<uint32_t, 24, 1> br8;\n      BitFieldModel<uint32_t,\
    \ 23, 1> br7;\n      BitFieldModel<uint32_t, 22, 1> br6;\n      BitFieldModel<uint32_t,\
    \ 21, 1> br5;\n      BitFieldModel<uint32_t, 20, 1> br4;\n      BitFieldModel<uint32_t,\
    \ 19, 1> br3;\n      BitFieldModel<uint32_t, 18, 1> br2;\n      BitFieldModel<uint32_t,\
    \ 17, 1> br1;\n      BitFieldModel<uint32_t, 16, 1> br0;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bs15;\n      BitFieldModel<uint32_t, 14, 1> bs14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> bs13;\n      BitFieldModel<uint32_t, 12, 1> bs12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> bs11;\n      BitFieldModel<uint32_t, 10, 1> bs10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> bs9;\n      BitFieldModel<uint32_t, 8, 1> bs8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bs7;\n      BitFieldModel<uint32_t, 6, 1> bs6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> bs5;\n      BitFieldModel<uint32_t, 4, 1> bs4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> bs3;\n      BitFieldModel<uint32_t, 2, 1> bs2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> bs1;\n      BitFieldModel<uint32_t, 0, 1> bs0;\n    };\n  };\n\n  struct\
    \ lckr\n  {\n    constexpr static unsigned int Address = 0x40020C00 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 1>\
    \ lckk;\n      BitFieldModel<uint32_t, 15, 1> lck15;\n      BitFieldModel<uint32_t,\
    \ 14, 1> lck14;\n      BitFieldModel<uint32_t, 13, 1> lck13;\n      BitFieldModel<uint32_t,\
    \ 12, 1> lck12;\n      BitFieldModel<uint32_t, 11, 1> lck11;\n      BitFieldModel<uint32_t,\
    \ 10, 1> lck10;\n      BitFieldModel<uint32_t, 9, 1> lck9;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lck8;\n      BitFieldModel<uint32_t, 7, 1> lck7;\n      BitFieldModel<uint32_t,\
    \ 6, 1> lck6;\n      BitFieldModel<uint32_t, 5, 1> lck5;\n      BitFieldModel<uint32_t,\
    \ 4, 1> lck4;\n      BitFieldModel<uint32_t, 3, 1> lck3;\n      BitFieldModel<uint32_t,\
    \ 2, 1> lck2;\n      BitFieldModel<uint32_t, 1, 1> lck1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lck0;\n    };\n  };\n\n  struct afrl\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020C00 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrl7;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrl6;\n      BitFieldModel<uint32_t, 20, 4> afrl5;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrl4;\n      BitFieldModel<uint32_t, 12, 4> afrl3;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrl2;\n      BitFieldModel<uint32_t, 4, 4> afrl1;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrl0;\n    };\n  };\n\n  struct afrh\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020C00 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrh15;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrh14;\n      BitFieldModel<uint32_t, 20, 4> afrh13;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrh12;\n      BitFieldModel<uint32_t, 12, 4> afrh11;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrh10;\n      BitFieldModel<uint32_t, 4, 4> afrh9;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrh8;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOD_H */"
  name: GPIOD
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOC_H\n#define DRAL_STM32F411_GPIOC_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct gpioc\n\
    {\n  struct moder\n  {\n    constexpr static unsigned int Address = 0x40020800\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> moder15;\n      BitFieldModel<uint32_t, 28, 2> moder14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> moder13;\n      BitFieldModel<uint32_t, 24, 2> moder12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> moder11;\n      BitFieldModel<uint32_t, 20, 2> moder10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> moder9;\n      BitFieldModel<uint32_t, 16, 2> moder8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> moder7;\n      BitFieldModel<uint32_t, 12, 2> moder6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> moder5;\n      BitFieldModel<uint32_t, 8, 2> moder4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> moder3;\n      BitFieldModel<uint32_t, 4, 2> moder2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> moder1;\n      BitFieldModel<uint32_t, 0, 2> moder0;\n    };\n  };\n\n\
    \  struct otyper\n  {\n    constexpr static unsigned int Address = 0x40020800\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> ot15;\n      BitFieldModel<uint32_t, 14, 1> ot14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ot13;\n      BitFieldModel<uint32_t, 12, 1> ot12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ot11;\n      BitFieldModel<uint32_t, 10, 1> ot10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ot9;\n      BitFieldModel<uint32_t, 8, 1> ot8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> ot7;\n      BitFieldModel<uint32_t, 6, 1> ot6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ot5;\n      BitFieldModel<uint32_t, 4, 1> ot4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ot3;\n      BitFieldModel<uint32_t, 2, 1> ot2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> ot1;\n      BitFieldModel<uint32_t, 0, 1> ot0;\n    };\n  };\n\n  struct\
    \ ospeedr\n  {\n    constexpr static unsigned int Address = 0x40020800 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ ospeedr15;\n      BitFieldModel<uint32_t, 28, 2> ospeedr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> ospeedr13;\n      BitFieldModel<uint32_t, 24, 2> ospeedr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> ospeedr11;\n      BitFieldModel<uint32_t, 20, 2> ospeedr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> ospeedr9;\n      BitFieldModel<uint32_t, 16, 2> ospeedr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> ospeedr7;\n      BitFieldModel<uint32_t, 12, 2> ospeedr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> ospeedr5;\n      BitFieldModel<uint32_t, 8, 2> ospeedr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> ospeedr3;\n      BitFieldModel<uint32_t, 4, 2> ospeedr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ospeedr1;\n      BitFieldModel<uint32_t, 0, 2> ospeedr0;\n    };\n  };\n\
    \n  struct pupdr\n  {\n    constexpr static unsigned int Address = 0x40020800\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> pupdr15;\n      BitFieldModel<uint32_t, 28, 2> pupdr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> pupdr13;\n      BitFieldModel<uint32_t, 24, 2> pupdr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> pupdr11;\n      BitFieldModel<uint32_t, 20, 2> pupdr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> pupdr9;\n      BitFieldModel<uint32_t, 16, 2> pupdr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> pupdr7;\n      BitFieldModel<uint32_t, 12, 2> pupdr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> pupdr5;\n      BitFieldModel<uint32_t, 8, 2> pupdr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> pupdr3;\n      BitFieldModel<uint32_t, 4, 2> pupdr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> pupdr1;\n      BitFieldModel<uint32_t, 0, 2> pupdr0;\n    };\n  };\n\n\
    \  struct idr\n  {\n    constexpr static unsigned int Address = 0x40020800 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ idr15;\n      BitFieldModel<uint32_t, 14, 1> idr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> idr13;\n      BitFieldModel<uint32_t, 12, 1> idr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> idr11;\n      BitFieldModel<uint32_t, 10, 1> idr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> idr9;\n      BitFieldModel<uint32_t, 8, 1> idr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> idr7;\n      BitFieldModel<uint32_t, 6, 1> idr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> idr5;\n      BitFieldModel<uint32_t, 4, 1> idr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> idr3;\n      BitFieldModel<uint32_t, 2, 1> idr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> idr1;\n      BitFieldModel<uint32_t, 0, 1> idr0;\n    };\n  };\n\n  struct\
    \ odr\n  {\n    constexpr static unsigned int Address = 0x40020800 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ odr15;\n      BitFieldModel<uint32_t, 14, 1> odr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> odr13;\n      BitFieldModel<uint32_t, 12, 1> odr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> odr11;\n      BitFieldModel<uint32_t, 10, 1> odr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> odr9;\n      BitFieldModel<uint32_t, 8, 1> odr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> odr7;\n      BitFieldModel<uint32_t, 6, 1> odr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> odr5;\n      BitFieldModel<uint32_t, 4, 1> odr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> odr3;\n      BitFieldModel<uint32_t, 2, 1> odr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> odr1;\n      BitFieldModel<uint32_t, 0, 1> odr0;\n    };\n  };\n\n  struct\
    \ bsrr\n  {\n    constexpr static unsigned int Address = 0x40020800 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ br15;\n      BitFieldModel<uint32_t, 30, 1> br14;\n      BitFieldModel<uint32_t,\
    \ 29, 1> br13;\n      BitFieldModel<uint32_t, 28, 1> br12;\n      BitFieldModel<uint32_t,\
    \ 27, 1> br11;\n      BitFieldModel<uint32_t, 26, 1> br10;\n      BitFieldModel<uint32_t,\
    \ 25, 1> br9;\n      BitFieldModel<uint32_t, 24, 1> br8;\n      BitFieldModel<uint32_t,\
    \ 23, 1> br7;\n      BitFieldModel<uint32_t, 22, 1> br6;\n      BitFieldModel<uint32_t,\
    \ 21, 1> br5;\n      BitFieldModel<uint32_t, 20, 1> br4;\n      BitFieldModel<uint32_t,\
    \ 19, 1> br3;\n      BitFieldModel<uint32_t, 18, 1> br2;\n      BitFieldModel<uint32_t,\
    \ 17, 1> br1;\n      BitFieldModel<uint32_t, 16, 1> br0;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bs15;\n      BitFieldModel<uint32_t, 14, 1> bs14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> bs13;\n      BitFieldModel<uint32_t, 12, 1> bs12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> bs11;\n      BitFieldModel<uint32_t, 10, 1> bs10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> bs9;\n      BitFieldModel<uint32_t, 8, 1> bs8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bs7;\n      BitFieldModel<uint32_t, 6, 1> bs6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> bs5;\n      BitFieldModel<uint32_t, 4, 1> bs4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> bs3;\n      BitFieldModel<uint32_t, 2, 1> bs2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> bs1;\n      BitFieldModel<uint32_t, 0, 1> bs0;\n    };\n  };\n\n  struct\
    \ lckr\n  {\n    constexpr static unsigned int Address = 0x40020800 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 1>\
    \ lckk;\n      BitFieldModel<uint32_t, 15, 1> lck15;\n      BitFieldModel<uint32_t,\
    \ 14, 1> lck14;\n      BitFieldModel<uint32_t, 13, 1> lck13;\n      BitFieldModel<uint32_t,\
    \ 12, 1> lck12;\n      BitFieldModel<uint32_t, 11, 1> lck11;\n      BitFieldModel<uint32_t,\
    \ 10, 1> lck10;\n      BitFieldModel<uint32_t, 9, 1> lck9;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lck8;\n      BitFieldModel<uint32_t, 7, 1> lck7;\n      BitFieldModel<uint32_t,\
    \ 6, 1> lck6;\n      BitFieldModel<uint32_t, 5, 1> lck5;\n      BitFieldModel<uint32_t,\
    \ 4, 1> lck4;\n      BitFieldModel<uint32_t, 3, 1> lck3;\n      BitFieldModel<uint32_t,\
    \ 2, 1> lck2;\n      BitFieldModel<uint32_t, 1, 1> lck1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lck0;\n    };\n  };\n\n  struct afrl\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020800 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrl7;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrl6;\n      BitFieldModel<uint32_t, 20, 4> afrl5;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrl4;\n      BitFieldModel<uint32_t, 12, 4> afrl3;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrl2;\n      BitFieldModel<uint32_t, 4, 4> afrl1;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrl0;\n    };\n  };\n\n  struct afrh\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020800 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrh15;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrh14;\n      BitFieldModel<uint32_t, 20, 4> afrh13;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrh12;\n      BitFieldModel<uint32_t, 12, 4> afrh11;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrh10;\n      BitFieldModel<uint32_t, 4, 4> afrh9;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrh8;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOC_H */"
  name: GPIOC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOB_H\n#define DRAL_STM32F411_GPIOB_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct gpiob\n\
    {\n  struct moder\n  {\n    constexpr static unsigned int Address = 0x40020400\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> moder15;\n      BitFieldModel<uint32_t, 28, 2> moder14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> moder13;\n      BitFieldModel<uint32_t, 24, 2> moder12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> moder11;\n      BitFieldModel<uint32_t, 20, 2> moder10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> moder9;\n      BitFieldModel<uint32_t, 16, 2> moder8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> moder7;\n      BitFieldModel<uint32_t, 12, 2> moder6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> moder5;\n      BitFieldModel<uint32_t, 8, 2> moder4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> moder3;\n      BitFieldModel<uint32_t, 4, 2> moder2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> moder1;\n      BitFieldModel<uint32_t, 0, 2> moder0;\n    };\n  };\n\n\
    \  struct otyper\n  {\n    constexpr static unsigned int Address = 0x40020400\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> ot15;\n      BitFieldModel<uint32_t, 14, 1> ot14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ot13;\n      BitFieldModel<uint32_t, 12, 1> ot12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ot11;\n      BitFieldModel<uint32_t, 10, 1> ot10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ot9;\n      BitFieldModel<uint32_t, 8, 1> ot8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> ot7;\n      BitFieldModel<uint32_t, 6, 1> ot6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ot5;\n      BitFieldModel<uint32_t, 4, 1> ot4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ot3;\n      BitFieldModel<uint32_t, 2, 1> ot2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> ot1;\n      BitFieldModel<uint32_t, 0, 1> ot0;\n    };\n  };\n\n  struct\
    \ ospeedr\n  {\n    constexpr static unsigned int Address = 0x40020400 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ ospeedr15;\n      BitFieldModel<uint32_t, 28, 2> ospeedr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> ospeedr13;\n      BitFieldModel<uint32_t, 24, 2> ospeedr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> ospeedr11;\n      BitFieldModel<uint32_t, 20, 2> ospeedr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> ospeedr9;\n      BitFieldModel<uint32_t, 16, 2> ospeedr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> ospeedr7;\n      BitFieldModel<uint32_t, 12, 2> ospeedr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> ospeedr5;\n      BitFieldModel<uint32_t, 8, 2> ospeedr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> ospeedr3;\n      BitFieldModel<uint32_t, 4, 2> ospeedr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ospeedr1;\n      BitFieldModel<uint32_t, 0, 2> ospeedr0;\n    };\n  };\n\
    \n  struct pupdr\n  {\n    constexpr static unsigned int Address = 0x40020400\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> pupdr15;\n      BitFieldModel<uint32_t, 28, 2> pupdr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> pupdr13;\n      BitFieldModel<uint32_t, 24, 2> pupdr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> pupdr11;\n      BitFieldModel<uint32_t, 20, 2> pupdr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> pupdr9;\n      BitFieldModel<uint32_t, 16, 2> pupdr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> pupdr7;\n      BitFieldModel<uint32_t, 12, 2> pupdr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> pupdr5;\n      BitFieldModel<uint32_t, 8, 2> pupdr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> pupdr3;\n      BitFieldModel<uint32_t, 4, 2> pupdr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> pupdr1;\n      BitFieldModel<uint32_t, 0, 2> pupdr0;\n    };\n  };\n\n\
    \  struct idr\n  {\n    constexpr static unsigned int Address = 0x40020400 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ idr15;\n      BitFieldModel<uint32_t, 14, 1> idr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> idr13;\n      BitFieldModel<uint32_t, 12, 1> idr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> idr11;\n      BitFieldModel<uint32_t, 10, 1> idr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> idr9;\n      BitFieldModel<uint32_t, 8, 1> idr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> idr7;\n      BitFieldModel<uint32_t, 6, 1> idr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> idr5;\n      BitFieldModel<uint32_t, 4, 1> idr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> idr3;\n      BitFieldModel<uint32_t, 2, 1> idr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> idr1;\n      BitFieldModel<uint32_t, 0, 1> idr0;\n    };\n  };\n\n  struct\
    \ odr\n  {\n    constexpr static unsigned int Address = 0x40020400 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ odr15;\n      BitFieldModel<uint32_t, 14, 1> odr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> odr13;\n      BitFieldModel<uint32_t, 12, 1> odr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> odr11;\n      BitFieldModel<uint32_t, 10, 1> odr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> odr9;\n      BitFieldModel<uint32_t, 8, 1> odr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> odr7;\n      BitFieldModel<uint32_t, 6, 1> odr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> odr5;\n      BitFieldModel<uint32_t, 4, 1> odr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> odr3;\n      BitFieldModel<uint32_t, 2, 1> odr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> odr1;\n      BitFieldModel<uint32_t, 0, 1> odr0;\n    };\n  };\n\n  struct\
    \ bsrr\n  {\n    constexpr static unsigned int Address = 0x40020400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ br15;\n      BitFieldModel<uint32_t, 30, 1> br14;\n      BitFieldModel<uint32_t,\
    \ 29, 1> br13;\n      BitFieldModel<uint32_t, 28, 1> br12;\n      BitFieldModel<uint32_t,\
    \ 27, 1> br11;\n      BitFieldModel<uint32_t, 26, 1> br10;\n      BitFieldModel<uint32_t,\
    \ 25, 1> br9;\n      BitFieldModel<uint32_t, 24, 1> br8;\n      BitFieldModel<uint32_t,\
    \ 23, 1> br7;\n      BitFieldModel<uint32_t, 22, 1> br6;\n      BitFieldModel<uint32_t,\
    \ 21, 1> br5;\n      BitFieldModel<uint32_t, 20, 1> br4;\n      BitFieldModel<uint32_t,\
    \ 19, 1> br3;\n      BitFieldModel<uint32_t, 18, 1> br2;\n      BitFieldModel<uint32_t,\
    \ 17, 1> br1;\n      BitFieldModel<uint32_t, 16, 1> br0;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bs15;\n      BitFieldModel<uint32_t, 14, 1> bs14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> bs13;\n      BitFieldModel<uint32_t, 12, 1> bs12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> bs11;\n      BitFieldModel<uint32_t, 10, 1> bs10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> bs9;\n      BitFieldModel<uint32_t, 8, 1> bs8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bs7;\n      BitFieldModel<uint32_t, 6, 1> bs6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> bs5;\n      BitFieldModel<uint32_t, 4, 1> bs4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> bs3;\n      BitFieldModel<uint32_t, 2, 1> bs2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> bs1;\n      BitFieldModel<uint32_t, 0, 1> bs0;\n    };\n  };\n\n  struct\
    \ lckr\n  {\n    constexpr static unsigned int Address = 0x40020400 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 1>\
    \ lckk;\n      BitFieldModel<uint32_t, 15, 1> lck15;\n      BitFieldModel<uint32_t,\
    \ 14, 1> lck14;\n      BitFieldModel<uint32_t, 13, 1> lck13;\n      BitFieldModel<uint32_t,\
    \ 12, 1> lck12;\n      BitFieldModel<uint32_t, 11, 1> lck11;\n      BitFieldModel<uint32_t,\
    \ 10, 1> lck10;\n      BitFieldModel<uint32_t, 9, 1> lck9;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lck8;\n      BitFieldModel<uint32_t, 7, 1> lck7;\n      BitFieldModel<uint32_t,\
    \ 6, 1> lck6;\n      BitFieldModel<uint32_t, 5, 1> lck5;\n      BitFieldModel<uint32_t,\
    \ 4, 1> lck4;\n      BitFieldModel<uint32_t, 3, 1> lck3;\n      BitFieldModel<uint32_t,\
    \ 2, 1> lck2;\n      BitFieldModel<uint32_t, 1, 1> lck1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lck0;\n    };\n  };\n\n  struct afrl\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020400 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrl7;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrl6;\n      BitFieldModel<uint32_t, 20, 4> afrl5;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrl4;\n      BitFieldModel<uint32_t, 12, 4> afrl3;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrl2;\n      BitFieldModel<uint32_t, 4, 4> afrl1;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrl0;\n    };\n  };\n\n  struct afrh\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020400 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrh15;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrh14;\n      BitFieldModel<uint32_t, 20, 4> afrh13;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrh12;\n      BitFieldModel<uint32_t, 12, 4> afrh11;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrh10;\n      BitFieldModel<uint32_t, 4, 4> afrh9;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrh8;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOB_H */"
  name: GPIOB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOA_H\n#define DRAL_STM32F411_GPIOA_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct gpioa\n\
    {\n  struct moder\n  {\n    constexpr static unsigned int Address = 0x40020000\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> moder15;\n      BitFieldModel<uint32_t, 28, 2> moder14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> moder13;\n      BitFieldModel<uint32_t, 24, 2> moder12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> moder11;\n      BitFieldModel<uint32_t, 20, 2> moder10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> moder9;\n      BitFieldModel<uint32_t, 16, 2> moder8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> moder7;\n      BitFieldModel<uint32_t, 12, 2> moder6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> moder5;\n      BitFieldModel<uint32_t, 8, 2> moder4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> moder3;\n      BitFieldModel<uint32_t, 4, 2> moder2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> moder1;\n      BitFieldModel<uint32_t, 0, 2> moder0;\n    };\n  };\n\n\
    \  struct otyper\n  {\n    constexpr static unsigned int Address = 0x40020000\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> ot15;\n      BitFieldModel<uint32_t, 14, 1> ot14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> ot13;\n      BitFieldModel<uint32_t, 12, 1> ot12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> ot11;\n      BitFieldModel<uint32_t, 10, 1> ot10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ot9;\n      BitFieldModel<uint32_t, 8, 1> ot8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> ot7;\n      BitFieldModel<uint32_t, 6, 1> ot6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> ot5;\n      BitFieldModel<uint32_t, 4, 1> ot4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ot3;\n      BitFieldModel<uint32_t, 2, 1> ot2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> ot1;\n      BitFieldModel<uint32_t, 0, 1> ot0;\n    };\n  };\n\n  struct\
    \ ospeedr\n  {\n    constexpr static unsigned int Address = 0x40020000 + 0x0008;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 30, 2>\
    \ ospeedr15;\n      BitFieldModel<uint32_t, 28, 2> ospeedr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> ospeedr13;\n      BitFieldModel<uint32_t, 24, 2> ospeedr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> ospeedr11;\n      BitFieldModel<uint32_t, 20, 2> ospeedr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> ospeedr9;\n      BitFieldModel<uint32_t, 16, 2> ospeedr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> ospeedr7;\n      BitFieldModel<uint32_t, 12, 2> ospeedr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> ospeedr5;\n      BitFieldModel<uint32_t, 8, 2> ospeedr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> ospeedr3;\n      BitFieldModel<uint32_t, 4, 2> ospeedr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> ospeedr1;\n      BitFieldModel<uint32_t, 0, 2> ospeedr0;\n    };\n  };\n\
    \n  struct pupdr\n  {\n    constexpr static unsigned int Address = 0x40020000\
    \ + 0x000C;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 30, 2> pupdr15;\n      BitFieldModel<uint32_t, 28, 2> pupdr14;\n      BitFieldModel<uint32_t,\
    \ 26, 2> pupdr13;\n      BitFieldModel<uint32_t, 24, 2> pupdr12;\n      BitFieldModel<uint32_t,\
    \ 22, 2> pupdr11;\n      BitFieldModel<uint32_t, 20, 2> pupdr10;\n      BitFieldModel<uint32_t,\
    \ 18, 2> pupdr9;\n      BitFieldModel<uint32_t, 16, 2> pupdr8;\n      BitFieldModel<uint32_t,\
    \ 14, 2> pupdr7;\n      BitFieldModel<uint32_t, 12, 2> pupdr6;\n      BitFieldModel<uint32_t,\
    \ 10, 2> pupdr5;\n      BitFieldModel<uint32_t, 8, 2> pupdr4;\n      BitFieldModel<uint32_t,\
    \ 6, 2> pupdr3;\n      BitFieldModel<uint32_t, 4, 2> pupdr2;\n      BitFieldModel<uint32_t,\
    \ 2, 2> pupdr1;\n      BitFieldModel<uint32_t, 0, 2> pupdr0;\n    };\n  };\n\n\
    \  struct idr\n  {\n    constexpr static unsigned int Address = 0x40020000 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ idr15;\n      BitFieldModel<uint32_t, 14, 1> idr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> idr13;\n      BitFieldModel<uint32_t, 12, 1> idr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> idr11;\n      BitFieldModel<uint32_t, 10, 1> idr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> idr9;\n      BitFieldModel<uint32_t, 8, 1> idr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> idr7;\n      BitFieldModel<uint32_t, 6, 1> idr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> idr5;\n      BitFieldModel<uint32_t, 4, 1> idr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> idr3;\n      BitFieldModel<uint32_t, 2, 1> idr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> idr1;\n      BitFieldModel<uint32_t, 0, 1> idr0;\n    };\n  };\n\n  struct\
    \ odr\n  {\n    constexpr static unsigned int Address = 0x40020000 + 0x0014;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ odr15;\n      BitFieldModel<uint32_t, 14, 1> odr14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> odr13;\n      BitFieldModel<uint32_t, 12, 1> odr12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> odr11;\n      BitFieldModel<uint32_t, 10, 1> odr10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> odr9;\n      BitFieldModel<uint32_t, 8, 1> odr8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> odr7;\n      BitFieldModel<uint32_t, 6, 1> odr6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> odr5;\n      BitFieldModel<uint32_t, 4, 1> odr4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> odr3;\n      BitFieldModel<uint32_t, 2, 1> odr2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> odr1;\n      BitFieldModel<uint32_t, 0, 1> odr0;\n    };\n  };\n\n  struct\
    \ bsrr\n  {\n    constexpr static unsigned int Address = 0x40020000 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 31, 1>\
    \ br15;\n      BitFieldModel<uint32_t, 30, 1> br14;\n      BitFieldModel<uint32_t,\
    \ 29, 1> br13;\n      BitFieldModel<uint32_t, 28, 1> br12;\n      BitFieldModel<uint32_t,\
    \ 27, 1> br11;\n      BitFieldModel<uint32_t, 26, 1> br10;\n      BitFieldModel<uint32_t,\
    \ 25, 1> br9;\n      BitFieldModel<uint32_t, 24, 1> br8;\n      BitFieldModel<uint32_t,\
    \ 23, 1> br7;\n      BitFieldModel<uint32_t, 22, 1> br6;\n      BitFieldModel<uint32_t,\
    \ 21, 1> br5;\n      BitFieldModel<uint32_t, 20, 1> br4;\n      BitFieldModel<uint32_t,\
    \ 19, 1> br3;\n      BitFieldModel<uint32_t, 18, 1> br2;\n      BitFieldModel<uint32_t,\
    \ 17, 1> br1;\n      BitFieldModel<uint32_t, 16, 1> br0;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bs15;\n      BitFieldModel<uint32_t, 14, 1> bs14;\n      BitFieldModel<uint32_t,\
    \ 13, 1> bs13;\n      BitFieldModel<uint32_t, 12, 1> bs12;\n      BitFieldModel<uint32_t,\
    \ 11, 1> bs11;\n      BitFieldModel<uint32_t, 10, 1> bs10;\n      BitFieldModel<uint32_t,\
    \ 9, 1> bs9;\n      BitFieldModel<uint32_t, 8, 1> bs8;\n      BitFieldModel<uint32_t,\
    \ 7, 1> bs7;\n      BitFieldModel<uint32_t, 6, 1> bs6;\n      BitFieldModel<uint32_t,\
    \ 5, 1> bs5;\n      BitFieldModel<uint32_t, 4, 1> bs4;\n      BitFieldModel<uint32_t,\
    \ 3, 1> bs3;\n      BitFieldModel<uint32_t, 2, 1> bs2;\n      BitFieldModel<uint32_t,\
    \ 1, 1> bs1;\n      BitFieldModel<uint32_t, 0, 1> bs0;\n    };\n  };\n\n  struct\
    \ lckr\n  {\n    constexpr static unsigned int Address = 0x40020000 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 1>\
    \ lckk;\n      BitFieldModel<uint32_t, 15, 1> lck15;\n      BitFieldModel<uint32_t,\
    \ 14, 1> lck14;\n      BitFieldModel<uint32_t, 13, 1> lck13;\n      BitFieldModel<uint32_t,\
    \ 12, 1> lck12;\n      BitFieldModel<uint32_t, 11, 1> lck11;\n      BitFieldModel<uint32_t,\
    \ 10, 1> lck10;\n      BitFieldModel<uint32_t, 9, 1> lck9;\n      BitFieldModel<uint32_t,\
    \ 8, 1> lck8;\n      BitFieldModel<uint32_t, 7, 1> lck7;\n      BitFieldModel<uint32_t,\
    \ 6, 1> lck6;\n      BitFieldModel<uint32_t, 5, 1> lck5;\n      BitFieldModel<uint32_t,\
    \ 4, 1> lck4;\n      BitFieldModel<uint32_t, 3, 1> lck3;\n      BitFieldModel<uint32_t,\
    \ 2, 1> lck2;\n      BitFieldModel<uint32_t, 1, 1> lck1;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lck0;\n    };\n  };\n\n  struct afrl\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020000 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrl7;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrl6;\n      BitFieldModel<uint32_t, 20, 4> afrl5;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrl4;\n      BitFieldModel<uint32_t, 12, 4> afrl3;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrl2;\n      BitFieldModel<uint32_t, 4, 4> afrl1;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrl0;\n    };\n  };\n\n  struct afrh\n  {\n    constexpr static unsigned\
    \ int Address = 0x40020000 + 0x0024;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 28, 4> afrh15;\n      BitFieldModel<uint32_t, 24,\
    \ 4> afrh14;\n      BitFieldModel<uint32_t, 20, 4> afrh13;\n      BitFieldModel<uint32_t,\
    \ 16, 4> afrh12;\n      BitFieldModel<uint32_t, 12, 4> afrh11;\n      BitFieldModel<uint32_t,\
    \ 8, 4> afrh10;\n      BitFieldModel<uint32_t, 4, 4> afrh9;\n      BitFieldModel<uint32_t,\
    \ 0, 4> afrh8;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOA_H */"
  name: GPIOA
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C3_H\n#define DRAL_STM32F411_I2C3_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct i2c3\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40005C00 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> swrst;\n      BitFieldModel<uint32_t, 13, 1> alert;\n      BitFieldModel<uint32_t,\
    \ 12, 1> pec;\n      BitFieldModel<uint32_t, 11, 1> pos;\n      BitFieldModel<uint32_t,\
    \ 10, 1> ack;\n      BitFieldModel<uint32_t, 9, 1> stop;\n      BitFieldModel<uint32_t,\
    \ 8, 1> start;\n      BitFieldModel<uint32_t, 7, 1> nostretch;\n      BitFieldModel<uint32_t,\
    \ 6, 1> engc;\n      BitFieldModel<uint32_t, 5, 1> enpec;\n      BitFieldModel<uint32_t,\
    \ 4, 1> enarp;\n      BitFieldModel<uint32_t, 3, 1> smbtype;\n      BitFieldModel<uint32_t,\
    \ 1, 1> smbus;\n      BitFieldModel<uint32_t, 0, 1> pe;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40005C00 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ last;\n      BitFieldModel<uint32_t, 11, 1> dmaen;\n      BitFieldModel<uint32_t,\
    \ 10, 1> itbufen;\n      BitFieldModel<uint32_t, 9, 1> itevten;\n      BitFieldModel<uint32_t,\
    \ 8, 1> iterren;\n      BitFieldModel<uint32_t, 0, 6> freq;\n    };\n  };\n\n\
    \  struct oar1\n  {\n    constexpr static unsigned int Address = 0x40005C00 +\
    \ 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> addmode;\n      BitFieldModel<uint32_t, 8, 2> add10;\n      BitFieldModel<uint32_t,\
    \ 1, 7> add7;\n      BitFieldModel<uint32_t, 0, 1> add0;\n    };\n  };\n\n  struct\
    \ oar2\n  {\n    constexpr static unsigned int Address = 0x40005C00 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 1, 7>\
    \ add2;\n      BitFieldModel<uint32_t, 0, 1> endual;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40005C00 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 8>\
    \ dr;\n    };\n  };\n\n  struct sr1\n  {\n    constexpr static unsigned int Address\
    \ = 0x40005C00 + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> smbalert;\n      BitFieldModel<uint32_t, 14, 1> timeout;\n      BitFieldModel<uint32_t,\
    \ 12, 1> pecerr;\n      BitFieldModel<uint32_t, 11, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 10, 1> af;\n      BitFieldModel<uint32_t, 9, 1> arlo;\n      BitFieldModel<uint32_t,\
    \ 8, 1> berr;\n      BitFieldModel<uint32_t, 7, 1> txe;\n      BitFieldModel<uint32_t,\
    \ 6, 1> rxne;\n      BitFieldModel<uint32_t, 4, 1> stopf;\n      BitFieldModel<uint32_t,\
    \ 3, 1> add10;\n      BitFieldModel<uint32_t, 2, 1> btf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> addr;\n      BitFieldModel<uint32_t, 0, 1> sb;\n    };\n  };\n\n  struct\
    \ sr2\n  {\n    constexpr static unsigned int Address = 0x40005C00 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 8, 8>\
    \ pec;\n      BitFieldModel<uint32_t, 7, 1> dualf;\n      BitFieldModel<uint32_t,\
    \ 6, 1> smbhost;\n      BitFieldModel<uint32_t, 5, 1> smbdefault;\n      BitFieldModel<uint32_t,\
    \ 4, 1> gencall;\n      BitFieldModel<uint32_t, 2, 1> tra;\n      BitFieldModel<uint32_t,\
    \ 1, 1> busy;\n      BitFieldModel<uint32_t, 0, 1> msl;\n    };\n  };\n\n  struct\
    \ ccr\n  {\n    constexpr static unsigned int Address = 0x40005C00 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ f_s;\n      BitFieldModel<uint32_t, 14, 1> duty;\n      BitFieldModel<uint32_t,\
    \ 0, 12> ccr;\n    };\n  };\n\n  struct trise\n  {\n    constexpr static unsigned\
    \ int Address = 0x40005C00 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 6> trise;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2C3_H */"
  name: I2C3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C2_H\n#define DRAL_STM32F411_I2C2_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct i2c2\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40005800 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> swrst;\n      BitFieldModel<uint32_t, 13, 1> alert;\n      BitFieldModel<uint32_t,\
    \ 12, 1> pec;\n      BitFieldModel<uint32_t, 11, 1> pos;\n      BitFieldModel<uint32_t,\
    \ 10, 1> ack;\n      BitFieldModel<uint32_t, 9, 1> stop;\n      BitFieldModel<uint32_t,\
    \ 8, 1> start;\n      BitFieldModel<uint32_t, 7, 1> nostretch;\n      BitFieldModel<uint32_t,\
    \ 6, 1> engc;\n      BitFieldModel<uint32_t, 5, 1> enpec;\n      BitFieldModel<uint32_t,\
    \ 4, 1> enarp;\n      BitFieldModel<uint32_t, 3, 1> smbtype;\n      BitFieldModel<uint32_t,\
    \ 1, 1> smbus;\n      BitFieldModel<uint32_t, 0, 1> pe;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40005800 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ last;\n      BitFieldModel<uint32_t, 11, 1> dmaen;\n      BitFieldModel<uint32_t,\
    \ 10, 1> itbufen;\n      BitFieldModel<uint32_t, 9, 1> itevten;\n      BitFieldModel<uint32_t,\
    \ 8, 1> iterren;\n      BitFieldModel<uint32_t, 0, 6> freq;\n    };\n  };\n\n\
    \  struct oar1\n  {\n    constexpr static unsigned int Address = 0x40005800 +\
    \ 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> addmode;\n      BitFieldModel<uint32_t, 8, 2> add10;\n      BitFieldModel<uint32_t,\
    \ 1, 7> add7;\n      BitFieldModel<uint32_t, 0, 1> add0;\n    };\n  };\n\n  struct\
    \ oar2\n  {\n    constexpr static unsigned int Address = 0x40005800 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 1, 7>\
    \ add2;\n      BitFieldModel<uint32_t, 0, 1> endual;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40005800 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 8>\
    \ dr;\n    };\n  };\n\n  struct sr1\n  {\n    constexpr static unsigned int Address\
    \ = 0x40005800 + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> smbalert;\n      BitFieldModel<uint32_t, 14, 1> timeout;\n      BitFieldModel<uint32_t,\
    \ 12, 1> pecerr;\n      BitFieldModel<uint32_t, 11, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 10, 1> af;\n      BitFieldModel<uint32_t, 9, 1> arlo;\n      BitFieldModel<uint32_t,\
    \ 8, 1> berr;\n      BitFieldModel<uint32_t, 7, 1> txe;\n      BitFieldModel<uint32_t,\
    \ 6, 1> rxne;\n      BitFieldModel<uint32_t, 4, 1> stopf;\n      BitFieldModel<uint32_t,\
    \ 3, 1> add10;\n      BitFieldModel<uint32_t, 2, 1> btf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> addr;\n      BitFieldModel<uint32_t, 0, 1> sb;\n    };\n  };\n\n  struct\
    \ sr2\n  {\n    constexpr static unsigned int Address = 0x40005800 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 8, 8>\
    \ pec;\n      BitFieldModel<uint32_t, 7, 1> dualf;\n      BitFieldModel<uint32_t,\
    \ 6, 1> smbhost;\n      BitFieldModel<uint32_t, 5, 1> smbdefault;\n      BitFieldModel<uint32_t,\
    \ 4, 1> gencall;\n      BitFieldModel<uint32_t, 2, 1> tra;\n      BitFieldModel<uint32_t,\
    \ 1, 1> busy;\n      BitFieldModel<uint32_t, 0, 1> msl;\n    };\n  };\n\n  struct\
    \ ccr\n  {\n    constexpr static unsigned int Address = 0x40005800 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ f_s;\n      BitFieldModel<uint32_t, 14, 1> duty;\n      BitFieldModel<uint32_t,\
    \ 0, 12> ccr;\n    };\n  };\n\n  struct trise\n  {\n    constexpr static unsigned\
    \ int Address = 0x40005800 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 6> trise;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2C2_H */"
  name: I2C2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C1_H\n#define DRAL_STM32F411_I2C1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct i2c1\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40005400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> swrst;\n      BitFieldModel<uint32_t, 13, 1> alert;\n      BitFieldModel<uint32_t,\
    \ 12, 1> pec;\n      BitFieldModel<uint32_t, 11, 1> pos;\n      BitFieldModel<uint32_t,\
    \ 10, 1> ack;\n      BitFieldModel<uint32_t, 9, 1> stop;\n      BitFieldModel<uint32_t,\
    \ 8, 1> start;\n      BitFieldModel<uint32_t, 7, 1> nostretch;\n      BitFieldModel<uint32_t,\
    \ 6, 1> engc;\n      BitFieldModel<uint32_t, 5, 1> enpec;\n      BitFieldModel<uint32_t,\
    \ 4, 1> enarp;\n      BitFieldModel<uint32_t, 3, 1> smbtype;\n      BitFieldModel<uint32_t,\
    \ 1, 1> smbus;\n      BitFieldModel<uint32_t, 0, 1> pe;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40005400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 12, 1>\
    \ last;\n      BitFieldModel<uint32_t, 11, 1> dmaen;\n      BitFieldModel<uint32_t,\
    \ 10, 1> itbufen;\n      BitFieldModel<uint32_t, 9, 1> itevten;\n      BitFieldModel<uint32_t,\
    \ 8, 1> iterren;\n      BitFieldModel<uint32_t, 0, 6> freq;\n    };\n  };\n\n\
    \  struct oar1\n  {\n    constexpr static unsigned int Address = 0x40005400 +\
    \ 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> addmode;\n      BitFieldModel<uint32_t, 8, 2> add10;\n      BitFieldModel<uint32_t,\
    \ 1, 7> add7;\n      BitFieldModel<uint32_t, 0, 1> add0;\n    };\n  };\n\n  struct\
    \ oar2\n  {\n    constexpr static unsigned int Address = 0x40005400 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 1, 7>\
    \ add2;\n      BitFieldModel<uint32_t, 0, 1> endual;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40005400 + 0x0010;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 8>\
    \ dr;\n    };\n  };\n\n  struct sr1\n  {\n    constexpr static unsigned int Address\
    \ = 0x40005400 + 0x0014;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> smbalert;\n      BitFieldModel<uint32_t, 14, 1> timeout;\n      BitFieldModel<uint32_t,\
    \ 12, 1> pecerr;\n      BitFieldModel<uint32_t, 11, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 10, 1> af;\n      BitFieldModel<uint32_t, 9, 1> arlo;\n      BitFieldModel<uint32_t,\
    \ 8, 1> berr;\n      BitFieldModel<uint32_t, 7, 1> txe;\n      BitFieldModel<uint32_t,\
    \ 6, 1> rxne;\n      BitFieldModel<uint32_t, 4, 1> stopf;\n      BitFieldModel<uint32_t,\
    \ 3, 1> add10;\n      BitFieldModel<uint32_t, 2, 1> btf;\n      BitFieldModel<uint32_t,\
    \ 1, 1> addr;\n      BitFieldModel<uint32_t, 0, 1> sb;\n    };\n  };\n\n  struct\
    \ sr2\n  {\n    constexpr static unsigned int Address = 0x40005400 + 0x0018;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 8, 8>\
    \ pec;\n      BitFieldModel<uint32_t, 7, 1> dualf;\n      BitFieldModel<uint32_t,\
    \ 6, 1> smbhost;\n      BitFieldModel<uint32_t, 5, 1> smbdefault;\n      BitFieldModel<uint32_t,\
    \ 4, 1> gencall;\n      BitFieldModel<uint32_t, 2, 1> tra;\n      BitFieldModel<uint32_t,\
    \ 1, 1> busy;\n      BitFieldModel<uint32_t, 0, 1> msl;\n    };\n  };\n\n  struct\
    \ ccr\n  {\n    constexpr static unsigned int Address = 0x40005400 + 0x001C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 15, 1>\
    \ f_s;\n      BitFieldModel<uint32_t, 14, 1> duty;\n      BitFieldModel<uint32_t,\
    \ 0, 12> ccr;\n    };\n  };\n\n  struct trise\n  {\n    constexpr static unsigned\
    \ int Address = 0x40005400 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 6> trise;\n    };\n  };\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2C1_H */"
  name: I2C1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2S2EXT_H\n#define DRAL_STM32F411_I2S2EXT_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct i2s2ext\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40003400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40003400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003400 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40003400 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40003400 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40003400 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40003400 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003400 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003400 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_I2S2EXT_H */"
  name: I2S2ext
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2S3EXT_H\n#define DRAL_STM32F411_I2S3EXT_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct i2s3ext\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40004000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40004000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40004000 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40004000 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40004000 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40004000 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40004000 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40004000 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40004000 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_I2S3EXT_H */"
  name: I2S3ext
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI1_H\n#define DRAL_STM32F411_SPI1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct spi1\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40013000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40013000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013000 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40013000 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40013000 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40013000 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40013000 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013000 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013000 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_SPI1_H */"
  name: SPI1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI2_H\n#define DRAL_STM32F411_SPI2_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct spi2\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40003800 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40003800 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003800 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40003800 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40003800 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40003800 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40003800 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003800 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003800 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_SPI2_H */"
  name: SPI2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI3_H\n#define DRAL_STM32F411_SPI3_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct spi3\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40003C00 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40003C00 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003C00 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40003C00 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40003C00 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40003C00 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40003C00 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003C00 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40003C00 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_SPI3_H */"
  name: SPI3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI4_H\n#define DRAL_STM32F411_SPI4_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct spi4\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40013400 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40013400 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013400 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40013400 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40013400 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40013400 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40013400 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013400 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40013400 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_SPI4_H */"
  name: SPI4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI5_H\n#define DRAL_STM32F411_SPI5_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct spi5\n\
    {\n  struct cr1\n  {\n    constexpr static unsigned int Address = 0x40015000 +\
    \ 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bidimode;\n      BitFieldModel<uint32_t, 14, 1> bidioe;\n      BitFieldModel<uint32_t,\
    \ 13, 1> crcen;\n      BitFieldModel<uint32_t, 12, 1> crcnext;\n      BitFieldModel<uint32_t,\
    \ 11, 1> dff;\n      BitFieldModel<uint32_t, 10, 1> rxonly;\n      BitFieldModel<uint32_t,\
    \ 9, 1> ssm;\n      BitFieldModel<uint32_t, 8, 1> ssi;\n      BitFieldModel<uint32_t,\
    \ 7, 1> lsbfirst;\n      BitFieldModel<uint32_t, 6, 1> spe;\n      BitFieldModel<uint32_t,\
    \ 3, 3> br;\n      BitFieldModel<uint32_t, 2, 1> mstr;\n      BitFieldModel<uint32_t,\
    \ 1, 1> cpol;\n      BitFieldModel<uint32_t, 0, 1> cpha;\n    };\n  };\n\n  struct\
    \ cr2\n  {\n    constexpr static unsigned int Address = 0x40015000 + 0x0004;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 7, 1>\
    \ txeie;\n      BitFieldModel<uint32_t, 6, 1> rxneie;\n      BitFieldModel<uint32_t,\
    \ 5, 1> errie;\n      BitFieldModel<uint32_t, 4, 1> frf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> ssoe;\n      BitFieldModel<uint32_t, 1, 1> txdmaen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> rxdmaen;\n    };\n  };\n\n  struct sr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40015000 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 8, 1> tifrfe;\n      BitFieldModel<uint32_t, 7,\
    \ 1> bsy;\n      BitFieldModel<uint32_t, 6, 1> ovr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> modf;\n      BitFieldModel<uint32_t, 4, 1> crcerr;\n      BitFieldModel<uint32_t,\
    \ 3, 1> udr;\n      BitFieldModel<uint32_t, 2, 1> chside;\n      BitFieldModel<uint32_t,\
    \ 1, 1> txe;\n      BitFieldModel<uint32_t, 0, 1> rxne;\n    };\n  };\n\n  struct\
    \ dr\n  {\n    constexpr static unsigned int Address = 0x40015000 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16>\
    \ dr;\n    };\n  };\n\n  struct crcpr\n  {\n    constexpr static unsigned int\
    \ Address = 0x40015000 + 0x0010;\n    union\n    {\n      uint32_t value;\n  \
    \    BitFieldModel<uint32_t, 0, 16> crcpoly;\n    };\n  };\n\n  struct rxcrcr\n\
    \  {\n    constexpr static unsigned int Address = 0x40015000 + 0x0014;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 16> rxcrc;\n \
    \   };\n  };\n\n  struct txcrcr\n  {\n    constexpr static unsigned int Address\
    \ = 0x40015000 + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 16> txcrc;\n    };\n  };\n\n  struct i2scfgr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40015000 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 11, 1> i2smod;\n      BitFieldModel<uint32_t, 10,\
    \ 1> i2se;\n      BitFieldModel<uint32_t, 8, 2> i2scfg;\n      BitFieldModel<uint32_t,\
    \ 7, 1> pcmsync;\n      BitFieldModel<uint32_t, 4, 2> i2sstd;\n      BitFieldModel<uint32_t,\
    \ 3, 1> ckpol;\n      BitFieldModel<uint32_t, 1, 2> datlen;\n      BitFieldModel<uint32_t,\
    \ 0, 1> chlen;\n    };\n  };\n\n  struct i2spr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40015000 + 0x0020;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 9, 1> mckoe;\n      BitFieldModel<uint32_t, 8,\
    \ 1> odd;\n      BitFieldModel<uint32_t, 0, 8> i2sdiv;\n    };\n  };\n\n};\n\n\
    }\n\n#endif /* DRAL_STM32F411_SPI5_H */"
  name: SPI5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_NVIC_H\n#define DRAL_STM32F411_NVIC_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct nvic\n\
    {\n  struct iser0\n  {\n    constexpr static unsigned int Address = 0xE000E100\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> setena;\n    };\n  };\n\n  struct iser1\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> setena;\n    };\n  };\n\n  struct icer0\n\
    \  {\n    constexpr static unsigned int Address = 0xE000E100 + 0x0080;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> clrena;\n\
    \    };\n  };\n\n  struct icer1\n  {\n    constexpr static unsigned int Address\
    \ = 0xE000E100 + 0x0084;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> clrena;\n    };\n  };\n\n  struct ispr0\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0100;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> setpend;\n    };\n  };\n\n  struct ispr1\n\
    \  {\n    constexpr static unsigned int Address = 0xE000E100 + 0x0104;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> setpend;\n\
    \    };\n  };\n\n  struct icpr0\n  {\n    constexpr static unsigned int Address\
    \ = 0xE000E100 + 0x0180;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> clrpend;\n    };\n  };\n\n  struct icpr1\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0184;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> clrpend;\n    };\n  };\n\n  struct iabr0\n\
    \  {\n    constexpr static unsigned int Address = 0xE000E100 + 0x0200;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> active;\n\
    \    };\n  };\n\n  struct iabr1\n  {\n    constexpr static unsigned int Address\
    \ = 0xE000E100 + 0x0204;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> active;\n    };\n  };\n\n  struct ipr0\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0300;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr1\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0304;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr2\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0308;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr3\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x030C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr4\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0310;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr5\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0314;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr6\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0318;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr7\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x031C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr8\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0320;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr9\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0324;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr10\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0328;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr11\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x032C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr12\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0330;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr13\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0334;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr14\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0338;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr15\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x033C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr16\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0340;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr17\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0344;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr18\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0348;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr19\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x034C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 8> ipr_n0;\n      BitFieldModel<uint32_t, 8,\
    \ 8> ipr_n1;\n      BitFieldModel<uint32_t, 16, 8> ipr_n2;\n      BitFieldModel<uint32_t,\
    \ 24, 8> ipr_n3;\n    };\n  };\n\n  struct ipr20\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E100 + 0x0350;\n    union\n    {\n      uint32_t value;\n\
    \    };\n  };\n\n  struct ipr21\n  {\n    constexpr static unsigned int Address\
    \ = 0xE000E100 + 0x0354;\n    union\n    {\n      uint32_t value;\n    };\n  };\n\
    \n  struct ipr22\n  {\n    constexpr static unsigned int Address = 0xE000E100\
    \ + 0x0358;\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n};\n\n}\n\
    \n#endif /* DRAL_STM32F411_NVIC_H */"
  name: NVIC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FPU_H\n#define DRAL_STM32F411_FPU_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct fpu\n\
    {\n  struct fpccr\n  {\n    constexpr static unsigned int Address = 0xE000EF34\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> lspact;\n      BitFieldModel<uint32_t, 1, 1> user;\n      BitFieldModel<uint32_t,\
    \ 3, 1> thread;\n      BitFieldModel<uint32_t, 4, 1> hfrdy;\n      BitFieldModel<uint32_t,\
    \ 5, 1> mmrdy;\n      BitFieldModel<uint32_t, 6, 1> bfrdy;\n      BitFieldModel<uint32_t,\
    \ 8, 1> monrdy;\n      BitFieldModel<uint32_t, 30, 1> lspen;\n      BitFieldModel<uint32_t,\
    \ 31, 1> aspen;\n    };\n  };\n\n  struct fpcar\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000EF34 + 0x0004;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 3, 29> address;\n    };\n  };\n\n  struct fpscr\n\
    \  {\n    constexpr static unsigned int Address = 0xE000EF34 + 0x0008;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1> ioc;\n    \
    \  BitFieldModel<uint32_t, 1, 1> dzc;\n      BitFieldModel<uint32_t, 2, 1> ofc;\n\
    \      BitFieldModel<uint32_t, 3, 1> ufc;\n      BitFieldModel<uint32_t, 4, 1>\
    \ ixc;\n      BitFieldModel<uint32_t, 7, 1> idc;\n      BitFieldModel<uint32_t,\
    \ 22, 2> rmode;\n      BitFieldModel<uint32_t, 24, 1> fz;\n      BitFieldModel<uint32_t,\
    \ 25, 1> dn;\n      BitFieldModel<uint32_t, 26, 1> ahp;\n      BitFieldModel<uint32_t,\
    \ 28, 1> v;\n      BitFieldModel<uint32_t, 29, 1> c;\n      BitFieldModel<uint32_t,\
    \ 30, 1> z;\n      BitFieldModel<uint32_t, 31, 1> n;\n    };\n  };\n\n};\n\n}\n\
    \n#endif /* DRAL_STM32F411_FPU_H */"
  name: FPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_MPU_H\n#define DRAL_STM32F411_MPU_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct mpu\n\
    {\n  struct mpu_typer\n  {\n    constexpr static unsigned int Address = 0xE000ED90\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> separate;\n      BitFieldModel<uint32_t, 8, 8> dregion;\n      BitFieldModel<uint32_t,\
    \ 16, 8> iregion;\n    };\n  };\n\n  struct mpu_ctrl\n  {\n    constexpr static\
    \ unsigned int Address = 0xE000ED90 + 0x0004;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 1> enable;\n      BitFieldModel<uint32_t,\
    \ 1, 1> hfnmiena;\n      BitFieldModel<uint32_t, 2, 1> privdefena;\n    };\n \
    \ };\n\n  struct mpu_rnr\n  {\n    constexpr static unsigned int Address = 0xE000ED90\
    \ + 0x0008;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 8> region;\n    };\n  };\n\n  struct mpu_rbar\n  {\n    constexpr static\
    \ unsigned int Address = 0xE000ED90 + 0x000C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 4> region;\n      BitFieldModel<uint32_t,\
    \ 4, 1> valid;\n      BitFieldModel<uint32_t, 5, 27> addr;\n    };\n  };\n\n \
    \ struct mpu_rasr\n  {\n    constexpr static unsigned int Address = 0xE000ED90\
    \ + 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> enable;\n      BitFieldModel<uint32_t, 1, 5> size;\n      BitFieldModel<uint32_t,\
    \ 8, 8> srd;\n      BitFieldModel<uint32_t, 16, 1> b;\n      BitFieldModel<uint32_t,\
    \ 17, 1> c;\n      BitFieldModel<uint32_t, 18, 1> s;\n      BitFieldModel<uint32_t,\
    \ 19, 3> tex;\n      BitFieldModel<uint32_t, 24, 3> ap;\n      BitFieldModel<uint32_t,\
    \ 28, 1> xn;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_MPU_H */"
  name: MPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_STK_H\n#define DRAL_STM32F411_STK_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct stk\n\
    {\n  struct ctrl\n  {\n    constexpr static unsigned int Address = 0xE000E010\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> enable;\n      BitFieldModel<uint32_t, 1, 1> tickint;\n      BitFieldModel<uint32_t,\
    \ 2, 1> clksource;\n      BitFieldModel<uint32_t, 16, 1> countflag;\n    };\n\
    \  };\n\n  struct load\n  {\n    constexpr static unsigned int Address = 0xE000E010\
    \ + 0x0004;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 24> reload;\n    };\n  };\n\n  struct val\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000E010 + 0x0008;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 24> current;\n    };\n  };\n\n  struct calib\n\
    \  {\n    constexpr static unsigned int Address = 0xE000E010 + 0x000C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 24> tenms;\n \
    \     BitFieldModel<uint32_t, 30, 1> skew;\n      BitFieldModel<uint32_t, 31,\
    \ 1> noref;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_STK_H */"
  name: STK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SCB_H\n#define DRAL_STM32F411_SCB_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct scb\n\
    {\n  struct cpuid\n  {\n    constexpr static unsigned int Address = 0xE000ED00\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 4> revision;\n      BitFieldModel<uint32_t, 4, 12> partno;\n      BitFieldModel<uint32_t,\
    \ 16, 4> constant;\n      BitFieldModel<uint32_t, 20, 4> variant;\n      BitFieldModel<uint32_t,\
    \ 24, 8> implementer;\n    };\n  };\n\n  struct icsr\n  {\n    constexpr static\
    \ unsigned int Address = 0xE000ED00 + 0x0004;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 0, 9> vectactive;\n      BitFieldModel<uint32_t,\
    \ 11, 1> rettobase;\n      BitFieldModel<uint32_t, 12, 7> vectpending;\n     \
    \ BitFieldModel<uint32_t, 22, 1> isrpending;\n      BitFieldModel<uint32_t, 25,\
    \ 1> pendstclr;\n      BitFieldModel<uint32_t, 26, 1> pendstset;\n      BitFieldModel<uint32_t,\
    \ 27, 1> pendsvclr;\n      BitFieldModel<uint32_t, 28, 1> pendsvset;\n      BitFieldModel<uint32_t,\
    \ 31, 1> nmipendset;\n    };\n  };\n\n  struct vtor\n  {\n    constexpr static\
    \ unsigned int Address = 0xE000ED00 + 0x0008;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 9, 21> tbloff;\n    };\n  };\n\n  struct\
    \ aircr\n  {\n    constexpr static unsigned int Address = 0xE000ED00 + 0x000C;\n\
    \    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1>\
    \ vectreset;\n      BitFieldModel<uint32_t, 1, 1> vectclractive;\n      BitFieldModel<uint32_t,\
    \ 2, 1> sysresetreq;\n      BitFieldModel<uint32_t, 8, 3> prigroup;\n      BitFieldModel<uint32_t,\
    \ 15, 1> endianess;\n      BitFieldModel<uint32_t, 16, 16> vectkeystat;\n    };\n\
    \  };\n\n  struct scr\n  {\n    constexpr static unsigned int Address = 0xE000ED00\
    \ + 0x0010;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 1, 1> sleeponexit;\n      BitFieldModel<uint32_t, 2, 1> sleepdeep;\n      BitFieldModel<uint32_t,\
    \ 4, 1> seveonpend;\n    };\n  };\n\n  struct ccr\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000ED00 + 0x0014;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 1> nonbasethrdena;\n      BitFieldModel<uint32_t,\
    \ 1, 1> usersetmpend;\n      BitFieldModel<uint32_t, 3, 1> unalign__trp;\n   \
    \   BitFieldModel<uint32_t, 4, 1> div_0_trp;\n      BitFieldModel<uint32_t, 8,\
    \ 1> bfhfnmign;\n      BitFieldModel<uint32_t, 9, 1> stkalign;\n    };\n  };\n\
    \n  struct shpr1\n  {\n    constexpr static unsigned int Address = 0xE000ED00\
    \ + 0x0018;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 8> pri_4;\n      BitFieldModel<uint32_t, 8, 8> pri_5;\n      BitFieldModel<uint32_t,\
    \ 16, 8> pri_6;\n    };\n  };\n\n  struct shpr2\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000ED00 + 0x001C;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 24, 8> pri_11;\n    };\n  };\n\n  struct shpr3\n\
    \  {\n    constexpr static unsigned int Address = 0xE000ED00 + 0x0020;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 16, 8> pri_14;\n\
    \      BitFieldModel<uint32_t, 24, 8> pri_15;\n    };\n  };\n\n  struct shcsr\n\
    \  {\n    constexpr static unsigned int Address = 0xE000ED00 + 0x0024;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 1> memfaultact;\n\
    \      BitFieldModel<uint32_t, 1, 1> busfaultact;\n      BitFieldModel<uint32_t,\
    \ 3, 1> usgfaultact;\n      BitFieldModel<uint32_t, 7, 1> svcallact;\n      BitFieldModel<uint32_t,\
    \ 8, 1> monitoract;\n      BitFieldModel<uint32_t, 10, 1> pendsvact;\n      BitFieldModel<uint32_t,\
    \ 11, 1> systickact;\n      BitFieldModel<uint32_t, 12, 1> usgfaultpended;\n \
    \     BitFieldModel<uint32_t, 13, 1> memfaultpended;\n      BitFieldModel<uint32_t,\
    \ 14, 1> busfaultpended;\n      BitFieldModel<uint32_t, 15, 1> svcallpended;\n\
    \      BitFieldModel<uint32_t, 16, 1> memfaultena;\n      BitFieldModel<uint32_t,\
    \ 17, 1> busfaultena;\n      BitFieldModel<uint32_t, 18, 1> usgfaultena;\n   \
    \ };\n  };\n\n  struct cfsr_ufsr_bfsr_mmfsr\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000ED00 + 0x0028;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 1, 1> iaccviol;\n      BitFieldModel<uint32_t,\
    \ 3, 1> munstkerr;\n      BitFieldModel<uint32_t, 4, 1> mstkerr;\n      BitFieldModel<uint32_t,\
    \ 5, 1> mlsperr;\n      BitFieldModel<uint32_t, 7, 1> mmarvalid;\n      BitFieldModel<uint32_t,\
    \ 8, 1> ibuserr;\n      BitFieldModel<uint32_t, 9, 1> preciserr;\n      BitFieldModel<uint32_t,\
    \ 10, 1> impreciserr;\n      BitFieldModel<uint32_t, 11, 1> unstkerr;\n      BitFieldModel<uint32_t,\
    \ 12, 1> stkerr;\n      BitFieldModel<uint32_t, 13, 1> lsperr;\n      BitFieldModel<uint32_t,\
    \ 15, 1> bfarvalid;\n      BitFieldModel<uint32_t, 16, 1> undefinstr;\n      BitFieldModel<uint32_t,\
    \ 17, 1> invstate;\n      BitFieldModel<uint32_t, 18, 1> invpc;\n      BitFieldModel<uint32_t,\
    \ 19, 1> nocp;\n      BitFieldModel<uint32_t, 24, 1> unaligned;\n      BitFieldModel<uint32_t,\
    \ 25, 1> divbyzero;\n    };\n  };\n\n  struct hfsr\n  {\n    constexpr static\
    \ unsigned int Address = 0xE000ED00 + 0x002C;\n    union\n    {\n      uint32_t\
    \ value;\n      BitFieldModel<uint32_t, 1, 1> vecttbl;\n      BitFieldModel<uint32_t,\
    \ 30, 1> forced;\n      BitFieldModel<uint32_t, 31, 1> debug_vt;\n    };\n  };\n\
    \n  struct mmfar\n  {\n    constexpr static unsigned int Address = 0xE000ED00\
    \ + 0x0034;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 32> mmfar;\n    };\n  };\n\n  struct bfar\n  {\n    constexpr static unsigned\
    \ int Address = 0xE000ED00 + 0x0038;\n    union\n    {\n      uint32_t value;\n\
    \      BitFieldModel<uint32_t, 0, 32> bfar;\n    };\n  };\n\n  struct afsr\n \
    \ {\n    constexpr static unsigned int Address = 0xE000ED00 + 0x003C;\n    union\n\
    \    {\n      uint32_t value;\n      BitFieldModel<uint32_t, 0, 32> impdef;\n\
    \    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_SCB_H */"
  name: SCB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_NVIC_STIR_H\n#define DRAL_STM32F411_NVIC_STIR_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct nvic_stir\n\
    {\n  struct stir\n  {\n    constexpr static unsigned int Address = 0xE000EF00\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 9> intid;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_NVIC_STIR_H\
    \ */"
  name: NVIC_STIR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FPU_CPACR_H\n#define DRAL_STM32F411_FPU_CPACR_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct fpu_cpacr\n\
    {\n  struct cpacr\n  {\n    constexpr static unsigned int Address = 0xE000ED88\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 20, 4> cp;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_FPU_CPACR_H\
    \ */"
  name: FPU_CPACR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SCB_ACTRL_H\n#define DRAL_STM32F411_SCB_ACTRL_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::stm32f411 {\n\nstruct scb_actrl\n\
    {\n  struct actrl\n  {\n    constexpr static unsigned int Address = 0xE000E008\
    \ + 0x0000;\n    union\n    {\n      uint32_t value;\n      BitFieldModel<uint32_t,\
    \ 0, 1> dismcycint;\n      BitFieldModel<uint32_t, 1, 1> disdefwbuf;\n      BitFieldModel<uint32_t,\
    \ 2, 1> disfold;\n      BitFieldModel<uint32_t, 8, 1> disfpca;\n      BitFieldModel<uint32_t,\
    \ 9, 1> disoofp;\n    };\n  };\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_SCB_ACTRL_H\
    \ */"
  name: SCB_ACTRL
