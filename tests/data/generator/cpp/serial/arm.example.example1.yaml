- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_ARM_EXAMPLE_TIMER0_H\n#define DRAL_ARM_EXAMPLE_TIMER0_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::arm_example {\n\n/**\n *\
    \ @brief TIMER0 peripheral\n *\n * 32 Timer / Counter, counting up or down from\
    \ different sources\n */\nstruct timer0\n{\n  /**\n   * @brief CR register\n \
    \  *\n   * Control Register\n   */\n  struct cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010000 + 0x0000; /**< Register address */\n    union\n   \
    \ {\n      uint32_t value;\n      /**\n       * @brief EN field\n       *\n  \
    \     * Enable\n       */\n      BitFieldModel<uint32_t, 0, 1> en;\n      /**\n\
    \       * @brief RST field\n       *\n       * Reset Timer\n       */\n      BitFieldModel<uint32_t,\
    \ 1, 1> rst;\n      /**\n       * @brief CNT field\n       *\n       * Counting\
    \ direction\n       */\n      BitFieldModel<uint32_t, 2, 2> cnt;\n      /**\n\
    \       * @brief MODE field\n       *\n       * Operation Mode\n       */\n  \
    \    BitFieldModel<uint32_t, 4, 3> mode;\n      /**\n       * @brief PSC field\n\
    \       *\n       * Use Prescaler\n       */\n      BitFieldModel<uint32_t, 7,\
    \ 1> psc;\n      /**\n       * @brief CNTSRC field\n       *\n       * Timer /\
    \ Counter Source Divider\n       */\n      BitFieldModel<uint32_t, 8, 4> cntsrc;\n\
    \      /**\n       * @brief CAPSRC field\n       *\n       * Timer / Counter Capture\
    \ Source\n       */\n      BitFieldModel<uint32_t, 12, 4> capsrc;\n      /**\n\
    \       * @brief CAPEDGE field\n       *\n       * Capture Edge, select which\
    \ Edge should result in a counter increment or decrement\n       */\n      BitFieldModel<uint32_t,\
    \ 16, 2> capedge;\n      /**\n       * @brief TRGEXT field\n       *\n       *\
    \ Triggers an other Peripheral\n       */\n      BitFieldModel<uint32_t, 20, 2>\
    \ trgext;\n      /**\n       * @brief RELOAD field\n       *\n       * Select\
    \ RELOAD Register n to reload Timer on condition\n       */\n      BitFieldModel<uint32_t,\
    \ 24, 2> reload;\n      /**\n       * @brief IDR field\n       *\n       * Selects,\
    \ if Reload Register number is incremented, decremented or not modified\n    \
    \   */\n      BitFieldModel<uint32_t, 26, 2> idr;\n      /**\n       * @brief\
    \ S field\n       *\n       * Starts and Stops the Timer / Counter\n       */\n\
    \      BitFieldModel<uint32_t, 31, 1> s;\n    };\n  };\n\n  /**\n   * @brief SR\
    \ register\n   *\n   * Status Register\n   */\n  struct sr\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010000 + 0x0004; /**< Register address */\n\
    \    union\n    {\n      uint16_t value;\n      /**\n       * @brief RUN field\n\
    \       *\n       * Shows if Timer is running or not\n       */\n      BitFieldModel<uint16_t,\
    \ 0, 1> run;\n      /**\n       * @brief MATCH field\n       *\n       * Shows\
    \ if the MATCH was hit\n       */\n      BitFieldModel<uint16_t, 8, 1> match;\n\
    \      /**\n       * @brief UN field\n       *\n       * Shows if an underflow\
    \ occured. This flag is sticky\n       */\n      BitFieldModel<uint16_t, 9, 1>\
    \ un;\n      /**\n       * @brief OV field\n       *\n       * Shows if an overflow\
    \ occured. This flag is sticky\n       */\n      BitFieldModel<uint16_t, 10, 1>\
    \ ov;\n      /**\n       * @brief RST field\n       *\n       * Shows if Timer\
    \ is in RESET state\n       */\n      BitFieldModel<uint16_t, 12, 1> rst;\n  \
    \    /**\n       * @brief RELOAD field\n       *\n       * Shows the currently\
    \ active RELOAD Register\n       */\n      BitFieldModel<uint16_t, 14, 2> reload;\n\
    \    };\n  };\n\n  /**\n   * @brief INT register\n   *\n   * Interrupt Register\n\
    \   */\n  struct int_\n  {\n    constexpr static unsigned int Address = 0x40010000\
    \ + 0x0010; /**< Register address */\n    union\n    {\n      uint16_t value;\n\
    \      /**\n       * @brief EN field\n       *\n       * Interrupt Enable\n  \
    \     */\n      BitFieldModel<uint16_t, 0, 1> en;\n      /**\n       * @brief\
    \ MODE field\n       *\n       * Interrupt Mode, selects on which condition the\
    \ Timer should generate an Interrupt\n       */\n      BitFieldModel<uint16_t,\
    \ 4, 3> mode;\n    };\n  };\n\n  /**\n   * @brief COUNT register\n   *\n   * The\
    \ Counter Register reflects the actual Value of the Timer/Counter\n   */\n  struct\
    \ count\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x0020;\
    \ /**< Register address */\n    union\n    {\n      uint32_t value;\n    };\n\
    \  };\n\n  /**\n   * @brief MATCH register\n   *\n   * The Match Register stores\
    \ the compare Value for the MATCH condition\n   */\n  struct match\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010000 + 0x0024; /**< Register address */\n\
    \    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief PRESCALE_RD\
    \ register\n   *\n   * The Prescale Register stores the Value for the prescaler.\
    \ The cont event gets divided by this value\n   */\n  struct prescale_rd\n  {\n\
    \    constexpr static unsigned int Address = 0x40010000 + 0x0028; /**< Register\
    \ address */\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n\
    \   * @brief PRESCALE_WR register\n   *\n   * The Prescale Register stores the\
    \ Value for the prescaler. The cont event gets divided by this value\n   */\n\
    \  struct prescale_wr\n  {\n    constexpr static unsigned int Address = 0x40010000\
    \ + 0x0028; /**< Register address */\n    union\n    {\n      uint32_t value;\n\
    \    };\n  };\n\n  /**\n   * @brief RELOAD[0] register\n   *\n   * The Reload\
    \ Register stores the Value the COUNT Register gets reloaded on a when a condition\
    \ was met.\n   */\n  struct reload[0]\n  {\n    constexpr static unsigned int\
    \ Address = 0x40010000 + 0x0050; /**< Register address */\n    union\n    {\n\
    \      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief RELOAD[1] register\n\
    \   *\n   * The Reload Register stores the Value the COUNT Register gets reloaded\
    \ on a when a condition was met.\n   */\n  struct reload[1]\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010000 + 0x0054; /**< Register address */\n\
    \    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief RELOAD[2]\
    \ register\n   *\n   * The Reload Register stores the Value the COUNT Register\
    \ gets reloaded on a when a condition was met.\n   */\n  struct reload[2]\n  {\n\
    \    constexpr static unsigned int Address = 0x40010000 + 0x0058; /**< Register\
    \ address */\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n\
    \   * @brief RELOAD[3] register\n   *\n   * The Reload Register stores the Value\
    \ the COUNT Register gets reloaded on a when a condition was met.\n   */\n  struct\
    \ reload[3]\n  {\n    constexpr static unsigned int Address = 0x40010000 + 0x005C;\
    \ /**< Register address */\n    union\n    {\n      uint32_t value;\n    };\n\
    \  };\n\n};\n\n}\n\n#endif /* DRAL_ARM_EXAMPLE_TIMER0_H */"
  name: TIMER0
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_ARM_EXAMPLE_TIMER1_H\n#define DRAL_ARM_EXAMPLE_TIMER1_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::arm_example {\n\n/**\n *\
    \ @brief TIMER1 peripheral\n *\n * 32 Timer / Counter, counting up or down from\
    \ different sources\n */\nstruct timer1\n{\n  /**\n   * @brief CR register\n \
    \  *\n   * Control Register\n   */\n  struct cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010100 + 0x0000; /**< Register address */\n    union\n   \
    \ {\n      uint32_t value;\n      /**\n       * @brief EN field\n       *\n  \
    \     * Enable\n       */\n      BitFieldModel<uint32_t, 0, 1> en;\n      /**\n\
    \       * @brief RST field\n       *\n       * Reset Timer\n       */\n      BitFieldModel<uint32_t,\
    \ 1, 1> rst;\n      /**\n       * @brief CNT field\n       *\n       * Counting\
    \ direction\n       */\n      BitFieldModel<uint32_t, 2, 2> cnt;\n      /**\n\
    \       * @brief MODE field\n       *\n       * Operation Mode\n       */\n  \
    \    BitFieldModel<uint32_t, 4, 3> mode;\n      /**\n       * @brief PSC field\n\
    \       *\n       * Use Prescaler\n       */\n      BitFieldModel<uint32_t, 7,\
    \ 1> psc;\n      /**\n       * @brief CNTSRC field\n       *\n       * Timer /\
    \ Counter Source Divider\n       */\n      BitFieldModel<uint32_t, 8, 4> cntsrc;\n\
    \      /**\n       * @brief CAPSRC field\n       *\n       * Timer / Counter Capture\
    \ Source\n       */\n      BitFieldModel<uint32_t, 12, 4> capsrc;\n      /**\n\
    \       * @brief CAPEDGE field\n       *\n       * Capture Edge, select which\
    \ Edge should result in a counter increment or decrement\n       */\n      BitFieldModel<uint32_t,\
    \ 16, 2> capedge;\n      /**\n       * @brief TRGEXT field\n       *\n       *\
    \ Triggers an other Peripheral\n       */\n      BitFieldModel<uint32_t, 20, 2>\
    \ trgext;\n      /**\n       * @brief RELOAD field\n       *\n       * Select\
    \ RELOAD Register n to reload Timer on condition\n       */\n      BitFieldModel<uint32_t,\
    \ 24, 2> reload;\n      /**\n       * @brief IDR field\n       *\n       * Selects,\
    \ if Reload Register number is incremented, decremented or not modified\n    \
    \   */\n      BitFieldModel<uint32_t, 26, 2> idr;\n      /**\n       * @brief\
    \ S field\n       *\n       * Starts and Stops the Timer / Counter\n       */\n\
    \      BitFieldModel<uint32_t, 31, 1> s;\n    };\n  };\n\n  /**\n   * @brief SR\
    \ register\n   *\n   * Status Register\n   */\n  struct sr\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010100 + 0x0004; /**< Register address */\n\
    \    union\n    {\n      uint16_t value;\n      /**\n       * @brief RUN field\n\
    \       *\n       * Shows if Timer is running or not\n       */\n      BitFieldModel<uint16_t,\
    \ 0, 1> run;\n      /**\n       * @brief MATCH field\n       *\n       * Shows\
    \ if the MATCH was hit\n       */\n      BitFieldModel<uint16_t, 8, 1> match;\n\
    \      /**\n       * @brief UN field\n       *\n       * Shows if an underflow\
    \ occured. This flag is sticky\n       */\n      BitFieldModel<uint16_t, 9, 1>\
    \ un;\n      /**\n       * @brief OV field\n       *\n       * Shows if an overflow\
    \ occured. This flag is sticky\n       */\n      BitFieldModel<uint16_t, 10, 1>\
    \ ov;\n      /**\n       * @brief RST field\n       *\n       * Shows if Timer\
    \ is in RESET state\n       */\n      BitFieldModel<uint16_t, 12, 1> rst;\n  \
    \    /**\n       * @brief RELOAD field\n       *\n       * Shows the currently\
    \ active RELOAD Register\n       */\n      BitFieldModel<uint16_t, 14, 2> reload;\n\
    \    };\n  };\n\n  /**\n   * @brief INT register\n   *\n   * Interrupt Register\n\
    \   */\n  struct int_\n  {\n    constexpr static unsigned int Address = 0x40010100\
    \ + 0x0010; /**< Register address */\n    union\n    {\n      uint16_t value;\n\
    \      /**\n       * @brief EN field\n       *\n       * Interrupt Enable\n  \
    \     */\n      BitFieldModel<uint16_t, 0, 1> en;\n      /**\n       * @brief\
    \ MODE field\n       *\n       * Interrupt Mode, selects on which condition the\
    \ Timer should generate an Interrupt\n       */\n      BitFieldModel<uint16_t,\
    \ 4, 3> mode;\n    };\n  };\n\n  /**\n   * @brief COUNT register\n   *\n   * The\
    \ Counter Register reflects the actual Value of the Timer/Counter\n   */\n  struct\
    \ count\n  {\n    constexpr static unsigned int Address = 0x40010100 + 0x0020;\
    \ /**< Register address */\n    union\n    {\n      uint32_t value;\n    };\n\
    \  };\n\n  /**\n   * @brief MATCH register\n   *\n   * The Match Register stores\
    \ the compare Value for the MATCH condition\n   */\n  struct match\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010100 + 0x0024; /**< Register address */\n\
    \    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief PRESCALE_RD\
    \ register\n   *\n   * The Prescale Register stores the Value for the prescaler.\
    \ The cont event gets divided by this value\n   */\n  struct prescale_rd\n  {\n\
    \    constexpr static unsigned int Address = 0x40010100 + 0x0028; /**< Register\
    \ address */\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n\
    \   * @brief PRESCALE_WR register\n   *\n   * The Prescale Register stores the\
    \ Value for the prescaler. The cont event gets divided by this value\n   */\n\
    \  struct prescale_wr\n  {\n    constexpr static unsigned int Address = 0x40010100\
    \ + 0x0028; /**< Register address */\n    union\n    {\n      uint32_t value;\n\
    \    };\n  };\n\n  /**\n   * @brief RELOAD[0] register\n   *\n   * The Reload\
    \ Register stores the Value the COUNT Register gets reloaded on a when a condition\
    \ was met.\n   */\n  struct reload[0]\n  {\n    constexpr static unsigned int\
    \ Address = 0x40010100 + 0x0050; /**< Register address */\n    union\n    {\n\
    \      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief RELOAD[1] register\n\
    \   *\n   * The Reload Register stores the Value the COUNT Register gets reloaded\
    \ on a when a condition was met.\n   */\n  struct reload[1]\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010100 + 0x0054; /**< Register address */\n\
    \    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief RELOAD[2]\
    \ register\n   *\n   * The Reload Register stores the Value the COUNT Register\
    \ gets reloaded on a when a condition was met.\n   */\n  struct reload[2]\n  {\n\
    \    constexpr static unsigned int Address = 0x40010100 + 0x0058; /**< Register\
    \ address */\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n\
    \   * @brief RELOAD[3] register\n   *\n   * The Reload Register stores the Value\
    \ the COUNT Register gets reloaded on a when a condition was met.\n   */\n  struct\
    \ reload[3]\n  {\n    constexpr static unsigned int Address = 0x40010100 + 0x005C;\
    \ /**< Register address */\n    union\n    {\n      uint32_t value;\n    };\n\
    \  };\n\n};\n\n}\n\n#endif /* DRAL_ARM_EXAMPLE_TIMER1_H */"
  name: TIMER1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_ARM_EXAMPLE_TIMER2_H\n#define DRAL_ARM_EXAMPLE_TIMER2_H\n\
    \n#include \"../register_model.h\"\n\nnamespace dral::arm_example {\n\n/**\n *\
    \ @brief TIMER2 peripheral\n *\n * 32 Timer / Counter, counting up or down from\
    \ different sources\n */\nstruct timer2\n{\n  /**\n   * @brief CR register\n \
    \  *\n   * Control Register\n   */\n  struct cr\n  {\n    constexpr static unsigned\
    \ int Address = 0x40010200 + 0x0000; /**< Register address */\n    union\n   \
    \ {\n      uint32_t value;\n      /**\n       * @brief EN field\n       *\n  \
    \     * Enable\n       */\n      BitFieldModel<uint32_t, 0, 1> en;\n      /**\n\
    \       * @brief RST field\n       *\n       * Reset Timer\n       */\n      BitFieldModel<uint32_t,\
    \ 1, 1> rst;\n      /**\n       * @brief CNT field\n       *\n       * Counting\
    \ direction\n       */\n      BitFieldModel<uint32_t, 2, 2> cnt;\n      /**\n\
    \       * @brief MODE field\n       *\n       * Operation Mode\n       */\n  \
    \    BitFieldModel<uint32_t, 4, 3> mode;\n      /**\n       * @brief PSC field\n\
    \       *\n       * Use Prescaler\n       */\n      BitFieldModel<uint32_t, 7,\
    \ 1> psc;\n      /**\n       * @brief CNTSRC field\n       *\n       * Timer /\
    \ Counter Source Divider\n       */\n      BitFieldModel<uint32_t, 8, 4> cntsrc;\n\
    \      /**\n       * @brief CAPSRC field\n       *\n       * Timer / Counter Capture\
    \ Source\n       */\n      BitFieldModel<uint32_t, 12, 4> capsrc;\n      /**\n\
    \       * @brief CAPEDGE field\n       *\n       * Capture Edge, select which\
    \ Edge should result in a counter increment or decrement\n       */\n      BitFieldModel<uint32_t,\
    \ 16, 2> capedge;\n      /**\n       * @brief TRGEXT field\n       *\n       *\
    \ Triggers an other Peripheral\n       */\n      BitFieldModel<uint32_t, 20, 2>\
    \ trgext;\n      /**\n       * @brief RELOAD field\n       *\n       * Select\
    \ RELOAD Register n to reload Timer on condition\n       */\n      BitFieldModel<uint32_t,\
    \ 24, 2> reload;\n      /**\n       * @brief IDR field\n       *\n       * Selects,\
    \ if Reload Register number is incremented, decremented or not modified\n    \
    \   */\n      BitFieldModel<uint32_t, 26, 2> idr;\n      /**\n       * @brief\
    \ S field\n       *\n       * Starts and Stops the Timer / Counter\n       */\n\
    \      BitFieldModel<uint32_t, 31, 1> s;\n    };\n  };\n\n  /**\n   * @brief SR\
    \ register\n   *\n   * Status Register\n   */\n  struct sr\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010200 + 0x0004; /**< Register address */\n\
    \    union\n    {\n      uint16_t value;\n      /**\n       * @brief RUN field\n\
    \       *\n       * Shows if Timer is running or not\n       */\n      BitFieldModel<uint16_t,\
    \ 0, 1> run;\n      /**\n       * @brief MATCH field\n       *\n       * Shows\
    \ if the MATCH was hit\n       */\n      BitFieldModel<uint16_t, 8, 1> match;\n\
    \      /**\n       * @brief UN field\n       *\n       * Shows if an underflow\
    \ occured. This flag is sticky\n       */\n      BitFieldModel<uint16_t, 9, 1>\
    \ un;\n      /**\n       * @brief OV field\n       *\n       * Shows if an overflow\
    \ occured. This flag is sticky\n       */\n      BitFieldModel<uint16_t, 10, 1>\
    \ ov;\n      /**\n       * @brief RST field\n       *\n       * Shows if Timer\
    \ is in RESET state\n       */\n      BitFieldModel<uint16_t, 12, 1> rst;\n  \
    \    /**\n       * @brief RELOAD field\n       *\n       * Shows the currently\
    \ active RELOAD Register\n       */\n      BitFieldModel<uint16_t, 14, 2> reload;\n\
    \    };\n  };\n\n  /**\n   * @brief INT register\n   *\n   * Interrupt Register\n\
    \   */\n  struct int_\n  {\n    constexpr static unsigned int Address = 0x40010200\
    \ + 0x0010; /**< Register address */\n    union\n    {\n      uint16_t value;\n\
    \      /**\n       * @brief EN field\n       *\n       * Interrupt Enable\n  \
    \     */\n      BitFieldModel<uint16_t, 0, 1> en;\n      /**\n       * @brief\
    \ MODE field\n       *\n       * Interrupt Mode, selects on which condition the\
    \ Timer should generate an Interrupt\n       */\n      BitFieldModel<uint16_t,\
    \ 4, 3> mode;\n    };\n  };\n\n  /**\n   * @brief COUNT register\n   *\n   * The\
    \ Counter Register reflects the actual Value of the Timer/Counter\n   */\n  struct\
    \ count\n  {\n    constexpr static unsigned int Address = 0x40010200 + 0x0020;\
    \ /**< Register address */\n    union\n    {\n      uint32_t value;\n    };\n\
    \  };\n\n  /**\n   * @brief MATCH register\n   *\n   * The Match Register stores\
    \ the compare Value for the MATCH condition\n   */\n  struct match\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010200 + 0x0024; /**< Register address */\n\
    \    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief PRESCALE_RD\
    \ register\n   *\n   * The Prescale Register stores the Value for the prescaler.\
    \ The cont event gets divided by this value\n   */\n  struct prescale_rd\n  {\n\
    \    constexpr static unsigned int Address = 0x40010200 + 0x0028; /**< Register\
    \ address */\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n\
    \   * @brief PRESCALE_WR register\n   *\n   * The Prescale Register stores the\
    \ Value for the prescaler. The cont event gets divided by this value\n   */\n\
    \  struct prescale_wr\n  {\n    constexpr static unsigned int Address = 0x40010200\
    \ + 0x0028; /**< Register address */\n    union\n    {\n      uint32_t value;\n\
    \    };\n  };\n\n  /**\n   * @brief RELOAD[0] register\n   *\n   * The Reload\
    \ Register stores the Value the COUNT Register gets reloaded on a when a condition\
    \ was met.\n   */\n  struct reload[0]\n  {\n    constexpr static unsigned int\
    \ Address = 0x40010200 + 0x0050; /**< Register address */\n    union\n    {\n\
    \      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief RELOAD[1] register\n\
    \   *\n   * The Reload Register stores the Value the COUNT Register gets reloaded\
    \ on a when a condition was met.\n   */\n  struct reload[1]\n  {\n    constexpr\
    \ static unsigned int Address = 0x40010200 + 0x0054; /**< Register address */\n\
    \    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n   * @brief RELOAD[2]\
    \ register\n   *\n   * The Reload Register stores the Value the COUNT Register\
    \ gets reloaded on a when a condition was met.\n   */\n  struct reload[2]\n  {\n\
    \    constexpr static unsigned int Address = 0x40010200 + 0x0058; /**< Register\
    \ address */\n    union\n    {\n      uint32_t value;\n    };\n  };\n\n  /**\n\
    \   * @brief RELOAD[3] register\n   *\n   * The Reload Register stores the Value\
    \ the COUNT Register gets reloaded on a when a condition was met.\n   */\n  struct\
    \ reload[3]\n  {\n    constexpr static unsigned int Address = 0x40010200 + 0x005C;\
    \ /**< Register address */\n    union\n    {\n      uint32_t value;\n    };\n\
    \  };\n\n};\n\n}\n\n#endif /* DRAL_ARM_EXAMPLE_TIMER2_H */"
  name: TIMER2
