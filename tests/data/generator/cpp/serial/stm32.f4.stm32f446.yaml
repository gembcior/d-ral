- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_DCMI_H\n#define DRAL_STM32F446_DCMI_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0x50050000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> capture;\n    BitFieldModel<1,\
    \ 1> cm;\n    BitFieldModel<2, 1> crop;\n    BitFieldModel<3, 1> jpeg;\n    BitFieldModel<4,\
    \ 1> ess;\n    BitFieldModel<5, 1> pckpol;\n    BitFieldModel<6, 1> hspol;\n \
    \   BitFieldModel<7, 1> vspol;\n    BitFieldModel<10, 2> edm;\n    BitFieldModel<14,\
    \ 1> enable;\n    BitFieldModel<16, 2> bsm;\n    BitFieldModel<18, 1> oebs;\n\
    \    BitFieldModel<19, 1> lsm;\n    BitFieldModel<20, 1> oels;\n    BitFieldModel<8,\
    \ 2> fcrc;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x50050000\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<2, 1> fne;\n\
    \    BitFieldModel<1, 1> vsync;\n    BitFieldModel<0, 1> hsync;\n  };\n};\n\n\
    struct ris\n{\n  constexpr static uint32_t Address = 0x50050000 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<4, 1> line_ris;\n    BitFieldModel<3,\
    \ 1> vsync_ris;\n    BitFieldModel<2, 1> err_ris;\n    BitFieldModel<1, 1> ovr_ris;\n\
    \    BitFieldModel<0, 1> frame_ris;\n  };\n};\n\nstruct ier\n{\n  constexpr static\
    \ uint32_t Address = 0x50050000 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 1> line_ie;\n    BitFieldModel<3, 1> vsync_ie;\n    BitFieldModel<2,\
    \ 1> err_ie;\n    BitFieldModel<1, 1> ovr_ie;\n    BitFieldModel<0, 1> frame_ie;\n\
    \  };\n};\n\nstruct mis\n{\n  constexpr static uint32_t Address = 0x50050000 +\
    \ 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4, 1> line_mis;\n\
    \    BitFieldModel<3, 1> vsync_mis;\n    BitFieldModel<2, 1> err_mis;\n    BitFieldModel<1,\
    \ 1> ovr_mis;\n    BitFieldModel<0, 1> frame_mis;\n  };\n};\n\nstruct icr\n{\n\
    \  constexpr static uint32_t Address = 0x50050000 + 0x0014;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<4, 1> line_isc;\n    BitFieldModel<3, 1>\
    \ vsync_isc;\n    BitFieldModel<2, 1> err_isc;\n    BitFieldModel<1, 1> ovr_isc;\n\
    \    BitFieldModel<0, 1> frame_isc;\n  };\n};\n\nstruct escr\n{\n  constexpr static\
    \ uint32_t Address = 0x50050000 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> fec;\n    BitFieldModel<16, 8> lec;\n    BitFieldModel<8,\
    \ 8> lsc;\n    BitFieldModel<0, 8> fsc;\n  };\n};\n\nstruct esur\n{\n  constexpr\
    \ static uint32_t Address = 0x50050000 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> feu;\n    BitFieldModel<16, 8> leu;\n    BitFieldModel<8,\
    \ 8> lsu;\n    BitFieldModel<0, 8> fsu;\n  };\n};\n\nstruct cwstrt\n{\n  constexpr\
    \ static uint32_t Address = 0x50050000 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 13> vst;\n    BitFieldModel<0, 14> hoffcnt;\n  };\n};\n\
    \nstruct cwsize\n{\n  constexpr static uint32_t Address = 0x50050000 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 14> vline;\n    BitFieldModel<0,\
    \ 14> capcnt;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t Address =\
    \ 0x50050000 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24,\
    \ 8> byte3;\n    BitFieldModel<16, 8> byte2;\n    BitFieldModel<8, 8> byte1;\n\
    \    BitFieldModel<0, 8> byte0;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_DCMI_H\
    \ */\n"
  name: DCMI
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_FMC_H\n#define DRAL_STM32F446_FMC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ bcr1\n{\n  constexpr static uint32_t Address = 0xA0000000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<20, 1> cclken;\n    BitFieldModel<19,\
    \ 1> cburstrw;\n    BitFieldModel<15, 1> asyncwait;\n    BitFieldModel<14, 1>\
    \ extmod;\n    BitFieldModel<13, 1> waiten;\n    BitFieldModel<12, 1> wren;\n\
    \    BitFieldModel<11, 1> waitcfg;\n    BitFieldModel<9, 1> waitpol;\n    BitFieldModel<8,\
    \ 1> bursten;\n    BitFieldModel<6, 1> faccen;\n    BitFieldModel<4, 2> mwid;\n\
    \    BitFieldModel<2, 2> mtyp;\n    BitFieldModel<1, 1> muxen;\n    BitFieldModel<0,\
    \ 1> mbken;\n  };\n};\n\nstruct btr1\n{\n  constexpr static uint32_t Address =\
    \ 0xA0000000 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 2> accmod;\n    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n\
    \    BitFieldModel<16, 4> busturn;\n    BitFieldModel<8, 8> datast;\n    BitFieldModel<4,\
    \ 4> addhld;\n    BitFieldModel<0, 4> addset;\n  };\n};\n\nstruct bcr2\n{\n  constexpr\
    \ static uint32_t Address = 0xA0000000 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<19, 1> cburstrw;\n    BitFieldModel<15, 1> asyncwait;\n   \
    \ BitFieldModel<14, 1> extmod;\n    BitFieldModel<13, 1> waiten;\n    BitFieldModel<12,\
    \ 1> wren;\n    BitFieldModel<11, 1> waitcfg;\n    BitFieldModel<10, 1> wrapmod;\n\
    \    BitFieldModel<9, 1> waitpol;\n    BitFieldModel<8, 1> bursten;\n    BitFieldModel<6,\
    \ 1> faccen;\n    BitFieldModel<4, 2> mwid;\n    BitFieldModel<2, 2> mtyp;\n \
    \   BitFieldModel<1, 1> muxen;\n    BitFieldModel<0, 1> mbken;\n  };\n};\n\nstruct\
    \ btr2\n{\n  constexpr static uint32_t Address = 0xA0000000 + 0x000C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<28, 2> accmod;\n    BitFieldModel<24,\
    \ 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n    BitFieldModel<16, 4> busturn;\n\
    \    BitFieldModel<8, 8> datast;\n    BitFieldModel<4, 4> addhld;\n    BitFieldModel<0,\
    \ 4> addset;\n  };\n};\n\nstruct bcr3\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<19,\
    \ 1> cburstrw;\n    BitFieldModel<15, 1> asyncwait;\n    BitFieldModel<14, 1>\
    \ extmod;\n    BitFieldModel<13, 1> waiten;\n    BitFieldModel<12, 1> wren;\n\
    \    BitFieldModel<11, 1> waitcfg;\n    BitFieldModel<10, 1> wrapmod;\n    BitFieldModel<9,\
    \ 1> waitpol;\n    BitFieldModel<8, 1> bursten;\n    BitFieldModel<6, 1> faccen;\n\
    \    BitFieldModel<4, 2> mwid;\n    BitFieldModel<2, 2> mtyp;\n    BitFieldModel<1,\
    \ 1> muxen;\n    BitFieldModel<0, 1> mbken;\n  };\n};\n\nstruct btr3\n{\n  constexpr\
    \ static uint32_t Address = 0xA0000000 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<28, 2> accmod;\n    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20,\
    \ 4> clkdiv;\n    BitFieldModel<16, 4> busturn;\n    BitFieldModel<8, 8> datast;\n\
    \    BitFieldModel<4, 4> addhld;\n    BitFieldModel<0, 4> addset;\n  };\n};\n\n\
    struct bcr4\n{\n  constexpr static uint32_t Address = 0xA0000000 + 0x0018;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<19, 1> cburstrw;\n    BitFieldModel<15,\
    \ 1> asyncwait;\n    BitFieldModel<14, 1> extmod;\n    BitFieldModel<13, 1> waiten;\n\
    \    BitFieldModel<12, 1> wren;\n    BitFieldModel<11, 1> waitcfg;\n    BitFieldModel<10,\
    \ 1> wrapmod;\n    BitFieldModel<9, 1> waitpol;\n    BitFieldModel<8, 1> bursten;\n\
    \    BitFieldModel<6, 1> faccen;\n    BitFieldModel<4, 2> mwid;\n    BitFieldModel<2,\
    \ 2> mtyp;\n    BitFieldModel<1, 1> muxen;\n    BitFieldModel<0, 1> mbken;\n \
    \ };\n};\n\nstruct btr4\n{\n  constexpr static uint32_t Address = 0xA0000000 +\
    \ 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 2> accmod;\n\
    \    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n    BitFieldModel<16,\
    \ 4> busturn;\n    BitFieldModel<8, 8> datast;\n    BitFieldModel<4, 4> addhld;\n\
    \    BitFieldModel<0, 4> addset;\n  };\n};\n\nstruct pcr2\n{\n  constexpr static\
    \ uint32_t Address = 0xA0000000 + 0x0060;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<17, 3> eccps;\n    BitFieldModel<13, 4> tar;\n    BitFieldModel<9,\
    \ 4> tclr;\n    BitFieldModel<6, 1> eccen;\n    BitFieldModel<4, 2> pwid;\n  \
    \  BitFieldModel<3, 1> ptyp;\n    BitFieldModel<2, 1> pbken;\n    BitFieldModel<1,\
    \ 1> pwaiten;\n  };\n};\n\nstruct sr2\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x0064;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6,\
    \ 1> fempt;\n    BitFieldModel<5, 1> ifen;\n    BitFieldModel<4, 1> ilen;\n  \
    \  BitFieldModel<3, 1> iren;\n    BitFieldModel<2, 1> ifs;\n    BitFieldModel<1,\
    \ 1> ils;\n    BitFieldModel<0, 1> irs;\n  };\n};\n\nstruct pmem2\n{\n  constexpr\
    \ static uint32_t Address = 0xA0000000 + 0x0068;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> memhizx;\n    BitFieldModel<16, 8> memholdx;\n    BitFieldModel<8,\
    \ 8> memwaitx;\n    BitFieldModel<0, 8> memsetx;\n  };\n};\n\nstruct patt2\n{\n\
    \  constexpr static uint32_t Address = 0xA0000000 + 0x006C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<24, 8> atthizx;\n    BitFieldModel<16, 8>\
    \ attholdx;\n    BitFieldModel<8, 8> attwaitx;\n    BitFieldModel<0, 8> attsetx;\n\
    \  };\n};\n\nstruct eccr2\n{\n  constexpr static uint32_t Address = 0xA0000000\
    \ + 0x0074;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> eccx;\n\
    \  };\n};\n\nstruct pcr3\n{\n  constexpr static uint32_t Address = 0xA0000000\
    \ + 0x0080;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<17, 3> eccps;\n\
    \    BitFieldModel<13, 4> tar;\n    BitFieldModel<9, 4> tclr;\n    BitFieldModel<6,\
    \ 1> eccen;\n    BitFieldModel<4, 2> pwid;\n    BitFieldModel<3, 1> ptyp;\n  \
    \  BitFieldModel<2, 1> pbken;\n    BitFieldModel<1, 1> pwaiten;\n  };\n};\n\n\
    struct sr3\n{\n  constexpr static uint32_t Address = 0xA0000000 + 0x0084;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<6, 1> fempt;\n    BitFieldModel<5,\
    \ 1> ifen;\n    BitFieldModel<4, 1> ilen;\n    BitFieldModel<3, 1> iren;\n   \
    \ BitFieldModel<2, 1> ifs;\n    BitFieldModel<1, 1> ils;\n    BitFieldModel<0,\
    \ 1> irs;\n  };\n};\n\nstruct pmem3\n{\n  constexpr static uint32_t Address =\
    \ 0xA0000000 + 0x0088;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24,\
    \ 8> memhizx;\n    BitFieldModel<16, 8> memholdx;\n    BitFieldModel<8, 8> memwaitx;\n\
    \    BitFieldModel<0, 8> memsetx;\n  };\n};\n\nstruct patt3\n{\n  constexpr static\
    \ uint32_t Address = 0xA0000000 + 0x008C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> atthizx;\n    BitFieldModel<16, 8> attholdx;\n    BitFieldModel<8,\
    \ 8> attwaitx;\n    BitFieldModel<0, 8> attsetx;\n  };\n};\n\nstruct eccr3\n{\n\
    \  constexpr static uint32_t Address = 0xA0000000 + 0x0094;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 32> eccx;\n  };\n};\n\nstruct pcr4\n\
    {\n  constexpr static uint32_t Address = 0xA0000000 + 0x00A0;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<17, 3> eccps;\n    BitFieldModel<13, 4>\
    \ tar;\n    BitFieldModel<9, 4> tclr;\n    BitFieldModel<6, 1> eccen;\n    BitFieldModel<4,\
    \ 2> pwid;\n    BitFieldModel<3, 1> ptyp;\n    BitFieldModel<2, 1> pbken;\n  \
    \  BitFieldModel<1, 1> pwaiten;\n  };\n};\n\nstruct sr4\n{\n  constexpr static\
    \ uint32_t Address = 0xA0000000 + 0x00A4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> fempt;\n    BitFieldModel<5, 1> ifen;\n    BitFieldModel<4,\
    \ 1> ilen;\n    BitFieldModel<3, 1> iren;\n    BitFieldModel<2, 1> ifs;\n    BitFieldModel<1,\
    \ 1> ils;\n    BitFieldModel<0, 1> irs;\n  };\n};\n\nstruct pmem4\n{\n  constexpr\
    \ static uint32_t Address = 0xA0000000 + 0x00A8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> memhizx;\n    BitFieldModel<16, 8> memholdx;\n    BitFieldModel<8,\
    \ 8> memwaitx;\n    BitFieldModel<0, 8> memsetx;\n  };\n};\n\nstruct patt4\n{\n\
    \  constexpr static uint32_t Address = 0xA0000000 + 0x00AC;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<24, 8> atthizx;\n    BitFieldModel<16, 8>\
    \ attholdx;\n    BitFieldModel<8, 8> attwaitx;\n    BitFieldModel<0, 8> attsetx;\n\
    \  };\n};\n\nstruct pio4\n{\n  constexpr static uint32_t Address = 0xA0000000\
    \ + 0x00B0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 8> iohizx;\n\
    \    BitFieldModel<16, 8> ioholdx;\n    BitFieldModel<8, 8> iowaitx;\n    BitFieldModel<0,\
    \ 8> iosetx;\n  };\n};\n\nstruct bwtr1\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x0104;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 2> accmod;\n    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n\
    \    BitFieldModel<8, 8> datast;\n    BitFieldModel<4, 4> addhld;\n    BitFieldModel<0,\
    \ 4> addset;\n  };\n};\n\nstruct bwtr2\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x010C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 2> accmod;\n    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n\
    \    BitFieldModel<8, 8> datast;\n    BitFieldModel<4, 4> addhld;\n    BitFieldModel<0,\
    \ 4> addset;\n  };\n};\n\nstruct bwtr3\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x0114;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 2> accmod;\n    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n\
    \    BitFieldModel<8, 8> datast;\n    BitFieldModel<4, 4> addhld;\n    BitFieldModel<0,\
    \ 4> addset;\n  };\n};\n\nstruct bwtr4\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x011C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 2> accmod;\n    BitFieldModel<24, 4> datlat;\n    BitFieldModel<20, 4> clkdiv;\n\
    \    BitFieldModel<8, 8> datast;\n    BitFieldModel<4, 4> addhld;\n    BitFieldModel<0,\
    \ 4> addset;\n  };\n};\n\nstruct sdcr1\n{\n  constexpr static uint32_t Address\
    \ = 0xA0000000 + 0x0140;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 2> nc;\n    BitFieldModel<2, 2> nr;\n    BitFieldModel<4, 2> mwid;\n    BitFieldModel<6,\
    \ 1> nb;\n    BitFieldModel<7, 2> cas;\n    BitFieldModel<9, 1> wp;\n    BitFieldModel<10,\
    \ 2> sdclk;\n    BitFieldModel<12, 1> rburst;\n    BitFieldModel<13, 2> rpipe;\n\
    \  };\n};\n\nstruct sdcr2\n{\n  constexpr static uint32_t Address = 0xA0000000\
    \ + 0x0144;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 2> nc;\n\
    \    BitFieldModel<2, 2> nr;\n    BitFieldModel<4, 2> mwid;\n    BitFieldModel<6,\
    \ 1> nb;\n    BitFieldModel<7, 2> cas;\n    BitFieldModel<9, 1> wp;\n    BitFieldModel<10,\
    \ 2> sdclk;\n    BitFieldModel<12, 1> rburst;\n    BitFieldModel<13, 2> rpipe;\n\
    \  };\n};\n\nstruct sdtr1\n{\n  constexpr static uint32_t Address = 0xA0000000\
    \ + 0x0148;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 4> tmrd;\n\
    \    BitFieldModel<4, 4> txsr;\n    BitFieldModel<8, 4> tras;\n    BitFieldModel<12,\
    \ 4> trc;\n    BitFieldModel<16, 4> twr;\n    BitFieldModel<20, 4> trp;\n    BitFieldModel<24,\
    \ 4> trcd;\n  };\n};\n\nstruct sdtr2\n{\n  constexpr static uint32_t Address =\
    \ 0xA0000000 + 0x014C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 4> tmrd;\n    BitFieldModel<4, 4> txsr;\n    BitFieldModel<8, 4> tras;\n   \
    \ BitFieldModel<12, 4> trc;\n    BitFieldModel<16, 4> twr;\n    BitFieldModel<20,\
    \ 4> trp;\n    BitFieldModel<24, 4> trcd;\n  };\n};\n\nstruct sdcmr\n{\n  constexpr\
    \ static uint32_t Address = 0xA0000000 + 0x0150;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 3> mode;\n    BitFieldModel<3, 1> ctb2;\n    BitFieldModel<4,\
    \ 1> ctb1;\n    BitFieldModel<5, 4> nrfs;\n    BitFieldModel<9, 13> mrd;\n  };\n\
    };\n\nstruct sdrtr\n{\n  constexpr static uint32_t Address = 0xA0000000 + 0x0154;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> cre;\n    BitFieldModel<1,\
    \ 13> count;\n    BitFieldModel<14, 1> reie;\n  };\n};\n\nstruct sdsr\n{\n  constexpr\
    \ static uint32_t Address = 0xA0000000 + 0x0158;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> re;\n    BitFieldModel<1, 2> modes1;\n    BitFieldModel<3,\
    \ 2> modes2;\n    BitFieldModel<5, 1> busy;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_FMC_H\
    \ */\n"
  name: FMC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_DBG_H\n#define DRAL_STM32F446_DBG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ dbgmcu_idcode\n{\n  constexpr static uint32_t Address = 0xE0042000 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 12> dev_id;\n    BitFieldModel<16,\
    \ 16> rev_id;\n  };\n};\n\nstruct dbgmcu_cr\n{\n  constexpr static uint32_t Address\
    \ = 0xE0042000 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> dbg_sleep;\n    BitFieldModel<1, 1> dbg_stop;\n    BitFieldModel<2, 1> dbg_standby;\n\
    \    BitFieldModel<5, 1> trace_ioen;\n    BitFieldModel<6, 2> trace_mode;\n  };\n\
    };\n\nstruct dbgmcu_apb1_fz\n{\n  constexpr static uint32_t Address = 0xE0042000\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> dbg_tim2_stop;\n\
    \    BitFieldModel<1, 1> dbg_tim3_stop;\n    BitFieldModel<2, 1> dbg_tim4_stop;\n\
    \    BitFieldModel<3, 1> dbg_tim5_stop;\n    BitFieldModel<4, 1> dbg_tim6_stop;\n\
    \    BitFieldModel<5, 1> dbg_tim7_stop;\n    BitFieldModel<6, 1> dbg_tim12_stop;\n\
    \    BitFieldModel<7, 1> dbg_tim13_stop;\n    BitFieldModel<8, 1> dbg_tim14_stop;\n\
    \    BitFieldModel<10, 1> dbg_rtc_stop;\n    BitFieldModel<11, 1> dbg_wwdg_stop;\n\
    \    BitFieldModel<12, 1> dbg_iwdeg_stop;\n    BitFieldModel<21, 1> dbg_j2c1_smbus_timeout;\n\
    \    BitFieldModel<22, 1> dbg_j2c2_smbus_timeout;\n    BitFieldModel<23, 1> dbg_j2c3smbus_timeout;\n\
    \    BitFieldModel<24, 1> dbg_i2cfmp_smbus_timeout;\n    BitFieldModel<25, 1>\
    \ dbg_can1_stop;\n    BitFieldModel<26, 1> dbg_can2_stop;\n  };\n};\n\nstruct\
    \ dbgmcu_apb2_fz\n{\n  constexpr static uint32_t Address = 0xE0042000 + 0x000C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> dbg_tim1_stop;\n \
    \   BitFieldModel<1, 1> dbg_tim8_stop;\n    BitFieldModel<16, 1> dbg_tim9_stop;\n\
    \    BitFieldModel<17, 1> dbg_tim10_stop;\n    BitFieldModel<18, 1> dbg_tim11_stop;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_DBG_H */\n"
  name: DBG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_DMA2_H\n#define DRAL_STM32F446_DMA2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ lisr\n{\n  constexpr static uint32_t Address = 0x40026400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<27, 1> tcif3;\n    BitFieldModel<26,\
    \ 1> htif3;\n    BitFieldModel<25, 1> teif3;\n    BitFieldModel<24, 1> dmeif3;\n\
    \    BitFieldModel<22, 1> feif3;\n    BitFieldModel<21, 1> tcif2;\n    BitFieldModel<20,\
    \ 1> htif2;\n    BitFieldModel<19, 1> teif2;\n    BitFieldModel<18, 1> dmeif2;\n\
    \    BitFieldModel<16, 1> feif2;\n    BitFieldModel<11, 1> tcif1;\n    BitFieldModel<10,\
    \ 1> htif1;\n    BitFieldModel<9, 1> teif1;\n    BitFieldModel<8, 1> dmeif1;\n\
    \    BitFieldModel<6, 1> feif1;\n    BitFieldModel<5, 1> tcif0;\n    BitFieldModel<4,\
    \ 1> htif0;\n    BitFieldModel<3, 1> teif0;\n    BitFieldModel<2, 1> dmeif0;\n\
    \    BitFieldModel<0, 1> feif0;\n  };\n};\n\nstruct hisr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<27, 1> tcif7;\n    BitFieldModel<26, 1> htif7;\n    BitFieldModel<25,\
    \ 1> teif7;\n    BitFieldModel<24, 1> dmeif7;\n    BitFieldModel<22, 1> feif7;\n\
    \    BitFieldModel<21, 1> tcif6;\n    BitFieldModel<20, 1> htif6;\n    BitFieldModel<19,\
    \ 1> teif6;\n    BitFieldModel<18, 1> dmeif6;\n    BitFieldModel<16, 1> feif6;\n\
    \    BitFieldModel<11, 1> tcif5;\n    BitFieldModel<10, 1> htif5;\n    BitFieldModel<9,\
    \ 1> teif5;\n    BitFieldModel<8, 1> dmeif5;\n    BitFieldModel<6, 1> feif5;\n\
    \    BitFieldModel<5, 1> tcif4;\n    BitFieldModel<4, 1> htif4;\n    BitFieldModel<3,\
    \ 1> teif4;\n    BitFieldModel<2, 1> dmeif4;\n    BitFieldModel<0, 1> feif4;\n\
    \  };\n};\n\nstruct lifcr\n{\n  constexpr static uint32_t Address = 0x40026400\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<27, 1> ctcif3;\n\
    \    BitFieldModel<26, 1> chtif3;\n    BitFieldModel<25, 1> cteif3;\n    BitFieldModel<24,\
    \ 1> cdmeif3;\n    BitFieldModel<22, 1> cfeif3;\n    BitFieldModel<21, 1> ctcif2;\n\
    \    BitFieldModel<20, 1> chtif2;\n    BitFieldModel<19, 1> cteif2;\n    BitFieldModel<18,\
    \ 1> cdmeif2;\n    BitFieldModel<16, 1> cfeif2;\n    BitFieldModel<11, 1> ctcif1;\n\
    \    BitFieldModel<10, 1> chtif1;\n    BitFieldModel<9, 1> cteif1;\n    BitFieldModel<8,\
    \ 1> cdmeif1;\n    BitFieldModel<6, 1> cfeif1;\n    BitFieldModel<5, 1> ctcif0;\n\
    \    BitFieldModel<4, 1> chtif0;\n    BitFieldModel<3, 1> cteif0;\n    BitFieldModel<2,\
    \ 1> cdmeif0;\n    BitFieldModel<0, 1> cfeif0;\n  };\n};\n\nstruct hifcr\n{\n\
    \  constexpr static uint32_t Address = 0x40026400 + 0x000C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<27, 1> ctcif7;\n    BitFieldModel<26, 1>\
    \ chtif7;\n    BitFieldModel<25, 1> cteif7;\n    BitFieldModel<24, 1> cdmeif7;\n\
    \    BitFieldModel<22, 1> cfeif7;\n    BitFieldModel<21, 1> ctcif6;\n    BitFieldModel<20,\
    \ 1> chtif6;\n    BitFieldModel<19, 1> cteif6;\n    BitFieldModel<18, 1> cdmeif6;\n\
    \    BitFieldModel<16, 1> cfeif6;\n    BitFieldModel<11, 1> ctcif5;\n    BitFieldModel<10,\
    \ 1> chtif5;\n    BitFieldModel<9, 1> cteif5;\n    BitFieldModel<8, 1> cdmeif5;\n\
    \    BitFieldModel<6, 1> cfeif5;\n    BitFieldModel<5, 1> ctcif4;\n    BitFieldModel<4,\
    \ 1> chtif4;\n    BitFieldModel<3, 1> cteif4;\n    BitFieldModel<2, 1> cdmeif4;\n\
    \    BitFieldModel<0, 1> cfeif4;\n  };\n};\n\nstruct s0cr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s0ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s0par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s0m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s0m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s0fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0024;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s1cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0028;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s1ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x002C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s1par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s1m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s1m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0038;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s1fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x003C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s2cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0040;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s2ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0044;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s2par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0048;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s2m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x004C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s2m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0050;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s2fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0054;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s3cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0058;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s3ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x005C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s3par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0060;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s3m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0064;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s3m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0068;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s3fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x006C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s4cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0070;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s4ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0074;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s4par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0078;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s4m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x007C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s4m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0080;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s4fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0084;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s5cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x0088;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s5ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x008C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s5par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0090;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s5m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0094;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s5m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x0098;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s5fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x009C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s6cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x00A0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s6ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x00A4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s6par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00A8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s6m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00AC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s6m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00B0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s6fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00B4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s7cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x00B8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s7ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026400 + 0x00BC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s7par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00C0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s7m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00C4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s7m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00C8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s7fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026400 + 0x00CC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_DMA2_H\
    \ */\n"
  name: DMA2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_DMA1_H\n#define DRAL_STM32F446_DMA1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ lisr\n{\n  constexpr static uint32_t Address = 0x40026000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<27, 1> tcif3;\n    BitFieldModel<26,\
    \ 1> htif3;\n    BitFieldModel<25, 1> teif3;\n    BitFieldModel<24, 1> dmeif3;\n\
    \    BitFieldModel<22, 1> feif3;\n    BitFieldModel<21, 1> tcif2;\n    BitFieldModel<20,\
    \ 1> htif2;\n    BitFieldModel<19, 1> teif2;\n    BitFieldModel<18, 1> dmeif2;\n\
    \    BitFieldModel<16, 1> feif2;\n    BitFieldModel<11, 1> tcif1;\n    BitFieldModel<10,\
    \ 1> htif1;\n    BitFieldModel<9, 1> teif1;\n    BitFieldModel<8, 1> dmeif1;\n\
    \    BitFieldModel<6, 1> feif1;\n    BitFieldModel<5, 1> tcif0;\n    BitFieldModel<4,\
    \ 1> htif0;\n    BitFieldModel<3, 1> teif0;\n    BitFieldModel<2, 1> dmeif0;\n\
    \    BitFieldModel<0, 1> feif0;\n  };\n};\n\nstruct hisr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<27, 1> tcif7;\n    BitFieldModel<26, 1> htif7;\n    BitFieldModel<25,\
    \ 1> teif7;\n    BitFieldModel<24, 1> dmeif7;\n    BitFieldModel<22, 1> feif7;\n\
    \    BitFieldModel<21, 1> tcif6;\n    BitFieldModel<20, 1> htif6;\n    BitFieldModel<19,\
    \ 1> teif6;\n    BitFieldModel<18, 1> dmeif6;\n    BitFieldModel<16, 1> feif6;\n\
    \    BitFieldModel<11, 1> tcif5;\n    BitFieldModel<10, 1> htif5;\n    BitFieldModel<9,\
    \ 1> teif5;\n    BitFieldModel<8, 1> dmeif5;\n    BitFieldModel<6, 1> feif5;\n\
    \    BitFieldModel<5, 1> tcif4;\n    BitFieldModel<4, 1> htif4;\n    BitFieldModel<3,\
    \ 1> teif4;\n    BitFieldModel<2, 1> dmeif4;\n    BitFieldModel<0, 1> feif4;\n\
    \  };\n};\n\nstruct lifcr\n{\n  constexpr static uint32_t Address = 0x40026000\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<27, 1> ctcif3;\n\
    \    BitFieldModel<26, 1> chtif3;\n    BitFieldModel<25, 1> cteif3;\n    BitFieldModel<24,\
    \ 1> cdmeif3;\n    BitFieldModel<22, 1> cfeif3;\n    BitFieldModel<21, 1> ctcif2;\n\
    \    BitFieldModel<20, 1> chtif2;\n    BitFieldModel<19, 1> cteif2;\n    BitFieldModel<18,\
    \ 1> cdmeif2;\n    BitFieldModel<16, 1> cfeif2;\n    BitFieldModel<11, 1> ctcif1;\n\
    \    BitFieldModel<10, 1> chtif1;\n    BitFieldModel<9, 1> cteif1;\n    BitFieldModel<8,\
    \ 1> cdmeif1;\n    BitFieldModel<6, 1> cfeif1;\n    BitFieldModel<5, 1> ctcif0;\n\
    \    BitFieldModel<4, 1> chtif0;\n    BitFieldModel<3, 1> cteif0;\n    BitFieldModel<2,\
    \ 1> cdmeif0;\n    BitFieldModel<0, 1> cfeif0;\n  };\n};\n\nstruct hifcr\n{\n\
    \  constexpr static uint32_t Address = 0x40026000 + 0x000C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<27, 1> ctcif7;\n    BitFieldModel<26, 1>\
    \ chtif7;\n    BitFieldModel<25, 1> cteif7;\n    BitFieldModel<24, 1> cdmeif7;\n\
    \    BitFieldModel<22, 1> cfeif7;\n    BitFieldModel<21, 1> ctcif6;\n    BitFieldModel<20,\
    \ 1> chtif6;\n    BitFieldModel<19, 1> cteif6;\n    BitFieldModel<18, 1> cdmeif6;\n\
    \    BitFieldModel<16, 1> cfeif6;\n    BitFieldModel<11, 1> ctcif5;\n    BitFieldModel<10,\
    \ 1> chtif5;\n    BitFieldModel<9, 1> cteif5;\n    BitFieldModel<8, 1> cdmeif5;\n\
    \    BitFieldModel<6, 1> cfeif5;\n    BitFieldModel<5, 1> ctcif4;\n    BitFieldModel<4,\
    \ 1> chtif4;\n    BitFieldModel<3, 1> cteif4;\n    BitFieldModel<2, 1> cdmeif4;\n\
    \    BitFieldModel<0, 1> cfeif4;\n  };\n};\n\nstruct s0cr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s0ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s0par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s0m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s0m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s0fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0024;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s1cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0028;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s1ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x002C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s1par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s1m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s1m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0038;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s1fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x003C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s2cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0040;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s2ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0044;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s2par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0048;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s2m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x004C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s2m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0050;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s2fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0054;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s3cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0058;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s3ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x005C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s3par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0060;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s3m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0064;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s3m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0068;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s3fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x006C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s4cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0070;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s4ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0074;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s4par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0078;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s4m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x007C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s4m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0080;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s4fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0084;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s5cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x0088;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s5ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x008C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s5par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0090;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s5m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0094;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s5m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x0098;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s5fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x009C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s6cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x00A0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s6ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x00A4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s6par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00A8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s6m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00AC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s6m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00B0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s6fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00B4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\nstruct s7cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x00B8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 3> chsel;\n    BitFieldModel<23, 2> mburst;\n    BitFieldModel<21,\
    \ 2> pburst;\n    BitFieldModel<19, 1> ct;\n    BitFieldModel<18, 1> dbm;\n  \
    \  BitFieldModel<16, 2> pl;\n    BitFieldModel<15, 1> pincos;\n    BitFieldModel<13,\
    \ 2> msize;\n    BitFieldModel<11, 2> psize;\n    BitFieldModel<10, 1> minc;\n\
    \    BitFieldModel<9, 1> pinc;\n    BitFieldModel<8, 1> circ;\n    BitFieldModel<6,\
    \ 2> dir;\n    BitFieldModel<5, 1> pfctrl;\n    BitFieldModel<4, 1> tcie;\n  \
    \  BitFieldModel<3, 1> htie;\n    BitFieldModel<2, 1> teie;\n    BitFieldModel<1,\
    \ 1> dmeie;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct s7ndtr\n{\n  constexpr\
    \ static uint32_t Address = 0x40026000 + 0x00BC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ndt;\n  };\n};\n\nstruct s7par\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00C0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> pa;\n  };\n};\n\nstruct s7m0ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00C4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m0a;\n  };\n};\n\nstruct s7m1ar\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00C8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> m1a;\n  };\n};\n\nstruct s7fcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40026000 + 0x00CC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> feie;\n    BitFieldModel<3, 3> fs;\n    BitFieldModel<2,\
    \ 1> dmdis;\n    BitFieldModel<0, 2> fth;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_DMA1_H\
    \ */\n"
  name: DMA1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_RCC_H\n#define DRAL_STM32F446_RCC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0x40023800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<27, 1> plli2srdy;\n    BitFieldModel<26,\
    \ 1> plli2son;\n    BitFieldModel<25, 1> pllrdy;\n    BitFieldModel<24, 1> pllon;\n\
    \    BitFieldModel<19, 1> csson;\n    BitFieldModel<18, 1> hsebyp;\n    BitFieldModel<17,\
    \ 1> hserdy;\n    BitFieldModel<16, 1> hseon;\n    BitFieldModel<8, 8> hsical;\n\
    \    BitFieldModel<3, 5> hsitrim;\n    BitFieldModel<1, 1> hsirdy;\n    BitFieldModel<0,\
    \ 1> hsion;\n  };\n};\n\nstruct pllcfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<27,\
    \ 1> pllq3;\n    BitFieldModel<26, 1> pllq2;\n    BitFieldModel<25, 1> pllq1;\n\
    \    BitFieldModel<24, 1> pllq0;\n    BitFieldModel<22, 1> pllsrc;\n    BitFieldModel<17,\
    \ 1> pllp1;\n    BitFieldModel<16, 1> pllp0;\n    BitFieldModel<14, 1> plln8;\n\
    \    BitFieldModel<13, 1> plln7;\n    BitFieldModel<12, 1> plln6;\n    BitFieldModel<11,\
    \ 1> plln5;\n    BitFieldModel<10, 1> plln4;\n    BitFieldModel<9, 1> plln3;\n\
    \    BitFieldModel<8, 1> plln2;\n    BitFieldModel<7, 1> plln1;\n    BitFieldModel<6,\
    \ 1> plln0;\n    BitFieldModel<5, 1> pllm5;\n    BitFieldModel<4, 1> pllm4;\n\
    \    BitFieldModel<3, 1> pllm3;\n    BitFieldModel<2, 1> pllm2;\n    BitFieldModel<1,\
    \ 1> pllm1;\n    BitFieldModel<0, 1> pllm0;\n  };\n};\n\nstruct cfgr\n{\n  constexpr\
    \ static uint32_t Address = 0x40023800 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<30, 2> mco2;\n    BitFieldModel<27, 3> mco2pre;\n    BitFieldModel<24,\
    \ 3> mco1pre;\n    BitFieldModel<23, 1> i2ssrc;\n    BitFieldModel<21, 2> mco1;\n\
    \    BitFieldModel<16, 5> rtcpre;\n    BitFieldModel<13, 3> ppre2;\n    BitFieldModel<10,\
    \ 3> ppre1;\n    BitFieldModel<4, 4> hpre;\n    BitFieldModel<3, 1> sws1;\n  \
    \  BitFieldModel<2, 1> sws0;\n    BitFieldModel<1, 1> sw1;\n    BitFieldModel<0,\
    \ 1> sw0;\n  };\n};\n\nstruct cir\n{\n  constexpr static uint32_t Address = 0x40023800\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<23, 1> cssc;\n\
    \    BitFieldModel<22, 1> pllsairdyc;\n    BitFieldModel<21, 1> plli2srdyc;\n\
    \    BitFieldModel<20, 1> pllrdyc;\n    BitFieldModel<19, 1> hserdyc;\n    BitFieldModel<18,\
    \ 1> hsirdyc;\n    BitFieldModel<17, 1> lserdyc;\n    BitFieldModel<16, 1> lsirdyc;\n\
    \    BitFieldModel<14, 1> pllsairdyie;\n    BitFieldModel<13, 1> plli2srdyie;\n\
    \    BitFieldModel<12, 1> pllrdyie;\n    BitFieldModel<11, 1> hserdyie;\n    BitFieldModel<10,\
    \ 1> hsirdyie;\n    BitFieldModel<9, 1> lserdyie;\n    BitFieldModel<8, 1> lsirdyie;\n\
    \    BitFieldModel<7, 1> cssf;\n    BitFieldModel<6, 1> pllsairdyf;\n    BitFieldModel<5,\
    \ 1> plli2srdyf;\n    BitFieldModel<4, 1> pllrdyf;\n    BitFieldModel<3, 1> hserdyf;\n\
    \    BitFieldModel<2, 1> hsirdyf;\n    BitFieldModel<1, 1> lserdyf;\n    BitFieldModel<0,\
    \ 1> lsirdyf;\n  };\n};\n\nstruct ahb1rstr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<29,\
    \ 1> otghsrst;\n    BitFieldModel<22, 1> dma2rst;\n    BitFieldModel<21, 1> dma1rst;\n\
    \    BitFieldModel<12, 1> crcrst;\n    BitFieldModel<7, 1> gpiohrst;\n    BitFieldModel<6,\
    \ 1> gpiogrst;\n    BitFieldModel<5, 1> gpiofrst;\n    BitFieldModel<4, 1> gpioerst;\n\
    \    BitFieldModel<3, 1> gpiodrst;\n    BitFieldModel<2, 1> gpiocrst;\n    BitFieldModel<1,\
    \ 1> gpiobrst;\n    BitFieldModel<0, 1> gpioarst;\n  };\n};\n\nstruct ahb2rstr\n\
    {\n  constexpr static uint32_t Address = 0x40023800 + 0x0014;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<7, 1> otgfsrst;\n    BitFieldModel<0,\
    \ 1> dcmirst;\n  };\n};\n\nstruct ahb3rstr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> fmcrst;\n    BitFieldModel<1, 1> qspirst;\n  };\n};\n\nstruct apb1rstr\n\
    {\n  constexpr static uint32_t Address = 0x40023800 + 0x0020;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> tim2rst;\n    BitFieldModel<1, 1>\
    \ tim3rst;\n    BitFieldModel<2, 1> tim4rst;\n    BitFieldModel<3, 1> tim5rst;\n\
    \    BitFieldModel<4, 1> tim6rst;\n    BitFieldModel<5, 1> tim7rst;\n    BitFieldModel<6,\
    \ 1> tim12rst;\n    BitFieldModel<7, 1> tim13rst;\n    BitFieldModel<8, 1> tim14rst;\n\
    \    BitFieldModel<11, 1> wwdgrst;\n    BitFieldModel<14, 1> spi2rst;\n    BitFieldModel<15,\
    \ 1> spi3rst;\n    BitFieldModel<16, 1> spdifrst;\n    BitFieldModel<17, 1> uart2rst;\n\
    \    BitFieldModel<18, 1> uart3rst;\n    BitFieldModel<19, 1> uart4rst;\n    BitFieldModel<20,\
    \ 1> uart5rst;\n    BitFieldModel<21, 1> i2c1rst;\n    BitFieldModel<22, 1> i2c2rst;\n\
    \    BitFieldModel<23, 1> i2c3rst;\n    BitFieldModel<24, 1> i2cfmp1rst;\n   \
    \ BitFieldModel<25, 1> can1rst;\n    BitFieldModel<26, 1> can2rst;\n    BitFieldModel<28,\
    \ 1> pwrrst;\n    BitFieldModel<29, 1> dacrst;\n  };\n};\n\nstruct apb2rstr\n\
    {\n  constexpr static uint32_t Address = 0x40023800 + 0x0024;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> tim1rst;\n    BitFieldModel<1, 1>\
    \ tim8rst;\n    BitFieldModel<4, 1> usart1rst;\n    BitFieldModel<5, 1> usart6rst;\n\
    \    BitFieldModel<8, 1> adcrst;\n    BitFieldModel<11, 1> sdiorst;\n    BitFieldModel<12,\
    \ 1> spi1rst;\n    BitFieldModel<13, 1> spi4rst;\n    BitFieldModel<14, 1> syscfgrst;\n\
    \    BitFieldModel<16, 1> tim9rst;\n    BitFieldModel<17, 1> tim10rst;\n    BitFieldModel<18,\
    \ 1> tim11rst;\n    BitFieldModel<22, 1> sai1rst;\n    BitFieldModel<23, 1> sai2rst;\n\
    \  };\n};\n\nstruct ahb1enr\n{\n  constexpr static uint32_t Address = 0x40023800\
    \ + 0x0030;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30, 1> otghsulpien;\n\
    \    BitFieldModel<29, 1> otghsen;\n    BitFieldModel<22, 1> dma2en;\n    BitFieldModel<21,\
    \ 1> dma1en;\n    BitFieldModel<18, 1> bkpsramen;\n    BitFieldModel<12, 1> crcen;\n\
    \    BitFieldModel<7, 1> gpiohen;\n    BitFieldModel<6, 1> gpiogen;\n    BitFieldModel<5,\
    \ 1> gpiofen;\n    BitFieldModel<4, 1> gpioeen;\n    BitFieldModel<3, 1> gpioden;\n\
    \    BitFieldModel<2, 1> gpiocen;\n    BitFieldModel<1, 1> gpioben;\n    BitFieldModel<0,\
    \ 1> gpioaen;\n  };\n};\n\nstruct ahb2enr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7,\
    \ 1> otgfsen;\n    BitFieldModel<0, 1> dcmien;\n  };\n};\n\nstruct ahb3enr\n{\n\
    \  constexpr static uint32_t Address = 0x40023800 + 0x0038;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 1> fmcen;\n    BitFieldModel<1, 1> qspien;\n\
    \  };\n};\n\nstruct apb1enr\n{\n  constexpr static uint32_t Address = 0x40023800\
    \ + 0x0040;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> tim2en;\n\
    \    BitFieldModel<1, 1> tim3en;\n    BitFieldModel<2, 1> tim4en;\n    BitFieldModel<3,\
    \ 1> tim5en;\n    BitFieldModel<4, 1> tim6en;\n    BitFieldModel<5, 1> tim7en;\n\
    \    BitFieldModel<6, 1> tim12en;\n    BitFieldModel<7, 1> tim13en;\n    BitFieldModel<8,\
    \ 1> tim14en;\n    BitFieldModel<11, 1> wwdgen;\n    BitFieldModel<14, 1> spi2en;\n\
    \    BitFieldModel<15, 1> spi3en;\n    BitFieldModel<16, 1> spdifen;\n    BitFieldModel<17,\
    \ 1> usart2en;\n    BitFieldModel<18, 1> usart3en;\n    BitFieldModel<19, 1> uart4en;\n\
    \    BitFieldModel<20, 1> uart5en;\n    BitFieldModel<21, 1> i2c1en;\n    BitFieldModel<22,\
    \ 1> i2c2en;\n    BitFieldModel<23, 1> i2c3en;\n    BitFieldModel<24, 1> i2cfmp1en;\n\
    \    BitFieldModel<25, 1> can1en;\n    BitFieldModel<26, 1> can2en;\n    BitFieldModel<27,\
    \ 1> cec;\n    BitFieldModel<28, 1> pwren;\n    BitFieldModel<29, 1> dacen;\n\
    \  };\n};\n\nstruct apb2enr\n{\n  constexpr static uint32_t Address = 0x40023800\
    \ + 0x0044;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> tim1en;\n\
    \    BitFieldModel<1, 1> tim8en;\n    BitFieldModel<4, 1> usart1en;\n    BitFieldModel<5,\
    \ 1> usart6en;\n    BitFieldModel<8, 1> adc1en;\n    BitFieldModel<9, 1> adc2en;\n\
    \    BitFieldModel<10, 1> adc3en;\n    BitFieldModel<11, 1> sdioen;\n    BitFieldModel<12,\
    \ 1> spi1en;\n    BitFieldModel<13, 1> spi4enr;\n    BitFieldModel<14, 1> syscfgen;\n\
    \    BitFieldModel<16, 1> tim9en;\n    BitFieldModel<17, 1> tim10en;\n    BitFieldModel<18,\
    \ 1> tim11en;\n    BitFieldModel<22, 1> sai1en;\n    BitFieldModel<23, 1> sai2en;\n\
    \  };\n};\n\nstruct ahb1lpenr\n{\n  constexpr static uint32_t Address = 0x40023800\
    \ + 0x0050;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> gpioalpen;\n\
    \    BitFieldModel<1, 1> gpioblpen;\n    BitFieldModel<2, 1> gpioclpen;\n    BitFieldModel<3,\
    \ 1> gpiodlpen;\n    BitFieldModel<4, 1> gpioelpen;\n    BitFieldModel<5, 1> gpioflpen;\n\
    \    BitFieldModel<6, 1> gpioglpen;\n    BitFieldModel<7, 1> gpiohlpen;\n    BitFieldModel<12,\
    \ 1> crclpen;\n    BitFieldModel<15, 1> flitflpen;\n    BitFieldModel<16, 1> sram1lpen;\n\
    \    BitFieldModel<17, 1> sram2lpen;\n    BitFieldModel<18, 1> bkpsramlpen;\n\
    \    BitFieldModel<21, 1> dma1lpen;\n    BitFieldModel<22, 1> dma2lpen;\n    BitFieldModel<29,\
    \ 1> otghslpen;\n    BitFieldModel<30, 1> otghsulpilpen;\n  };\n};\n\nstruct ahb2lpenr\n\
    {\n  constexpr static uint32_t Address = 0x40023800 + 0x0054;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<7, 1> otgfslpen;\n    BitFieldModel<0,\
    \ 1> dcmilpen;\n  };\n};\n\nstruct ahb3lpenr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x0058;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> fmclpen;\n    BitFieldModel<1, 1> qspilpen;\n  };\n};\n\nstruct apb1lpenr\n\
    {\n  constexpr static uint32_t Address = 0x40023800 + 0x0060;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> tim2lpen;\n    BitFieldModel<1,\
    \ 1> tim3lpen;\n    BitFieldModel<2, 1> tim4lpen;\n    BitFieldModel<3, 1> tim5lpen;\n\
    \    BitFieldModel<4, 1> tim6lpen;\n    BitFieldModel<5, 1> tim7lpen;\n    BitFieldModel<6,\
    \ 1> tim12lpen;\n    BitFieldModel<7, 1> tim13lpen;\n    BitFieldModel<8, 1> tim14lpen;\n\
    \    BitFieldModel<11, 1> wwdglpen;\n    BitFieldModel<14, 1> spi2lpen;\n    BitFieldModel<15,\
    \ 1> spi3lpen;\n    BitFieldModel<16, 1> spdiflpen;\n    BitFieldModel<17, 1>\
    \ usart2lpen;\n    BitFieldModel<18, 1> usart3lpen;\n    BitFieldModel<19, 1>\
    \ uart4lpen;\n    BitFieldModel<20, 1> uart5lpen;\n    BitFieldModel<21, 1> i2c1lpen;\n\
    \    BitFieldModel<22, 1> i2c2lpen;\n    BitFieldModel<23, 1> i2c3lpen;\n    BitFieldModel<24,\
    \ 1> i2cfmp1lpen;\n    BitFieldModel<25, 1> can1lpen;\n    BitFieldModel<26, 1>\
    \ can2lpen;\n    BitFieldModel<27, 1> ceclpen;\n    BitFieldModel<28, 1> pwrlpen;\n\
    \    BitFieldModel<29, 1> daclpen;\n  };\n};\n\nstruct apb2lpenr\n{\n  constexpr\
    \ static uint32_t Address = 0x40023800 + 0x0064;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> tim1lpen;\n    BitFieldModel<1, 1> tim8lpen;\n    BitFieldModel<4,\
    \ 1> usart1lpen;\n    BitFieldModel<5, 1> usart6lpen;\n    BitFieldModel<8, 1>\
    \ adc1lpen;\n    BitFieldModel<9, 1> adc2lpen;\n    BitFieldModel<10, 1> adc3lpen;\n\
    \    BitFieldModel<11, 1> sdiolpen;\n    BitFieldModel<12, 1> spi1lpen;\n    BitFieldModel<13,\
    \ 1> spi4lpen;\n    BitFieldModel<14, 1> syscfglpen;\n    BitFieldModel<16, 1>\
    \ tim9lpen;\n    BitFieldModel<17, 1> tim10lpen;\n    BitFieldModel<18, 1> tim11lpen;\n\
    \    BitFieldModel<22, 1> sai1lpen;\n    BitFieldModel<23, 1> sai2lpen;\n  };\n\
    };\n\nstruct bdcr\n{\n  constexpr static uint32_t Address = 0x40023800 + 0x0070;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> bdrst;\n    BitFieldModel<15,\
    \ 1> rtcen;\n    BitFieldModel<8, 2> rtcsel;\n    BitFieldModel<3, 1> lsemod;\n\
    \    BitFieldModel<2, 1> lsebyp;\n    BitFieldModel<1, 1> lserdy;\n    BitFieldModel<0,\
    \ 1> lseon;\n  };\n};\n\nstruct csr\n{\n  constexpr static uint32_t Address =\
    \ 0x40023800 + 0x0074;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31,\
    \ 1> lpwrrstf;\n    BitFieldModel<30, 1> wwdgrstf;\n    BitFieldModel<29, 1> wdgrstf;\n\
    \    BitFieldModel<28, 1> sftrstf;\n    BitFieldModel<27, 1> porrstf;\n    BitFieldModel<26,\
    \ 1> padrstf;\n    BitFieldModel<25, 1> borrstf;\n    BitFieldModel<24, 1> rmvf;\n\
    \    BitFieldModel<1, 1> lsirdy;\n    BitFieldModel<0, 1> lsion;\n  };\n};\n\n\
    struct sscgr\n{\n  constexpr static uint32_t Address = 0x40023800 + 0x0080;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> sscgen;\n    BitFieldModel<30,\
    \ 1> spreadsel;\n    BitFieldModel<13, 15> incstep;\n    BitFieldModel<0, 13>\
    \ modper;\n  };\n};\n\nstruct plli2scfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x0084;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 6> plli2sm;\n    BitFieldModel<6, 9> plli2sn;\n    BitFieldModel<16, 2> plli2sp;\n\
    \    BitFieldModel<24, 4> plli2sq;\n    BitFieldModel<28, 3> plli2sr;\n  };\n\
    };\n\nstruct pllsaicfgr\n{\n  constexpr static uint32_t Address = 0x40023800 +\
    \ 0x0088;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 6> pllsaim;\n\
    \    BitFieldModel<6, 9> pllsain;\n    BitFieldModel<16, 2> pllsaip;\n    BitFieldModel<24,\
    \ 4> pllsaiq;\n  };\n};\n\nstruct dckcfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40023800 + 0x008C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 5> plli2sdivq;\n    BitFieldModel<8, 5> pllsaidivq;\n    BitFieldModel<20, 2>\
    \ sai1src;\n    BitFieldModel<22, 2> sai2src;\n    BitFieldModel<24, 1> timpre;\n\
    \    BitFieldModel<25, 2> i2s1src;\n    BitFieldModel<27, 2> i2s2src;\n  };\n\
    };\n\nstruct ckgatenr\n{\n  constexpr static uint32_t Address = 0x40023800 + 0x0090;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> ahb2apb1_cken;\n \
    \   BitFieldModel<1, 1> ahb2apb2_cken;\n    BitFieldModel<2, 1> cm4dbg_cken;\n\
    \    BitFieldModel<3, 1> spare_cken;\n    BitFieldModel<4, 1> sram_cken;\n   \
    \ BitFieldModel<5, 1> flitf_cken;\n    BitFieldModel<6, 1> rcc_cken;\n  };\n};\n\
    \nstruct dckcfgr2\n{\n  constexpr static uint32_t Address = 0x40023800 + 0x0094;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<22, 2> fmpi2c1sel;\n   \
    \ BitFieldModel<26, 1> cecsel;\n    BitFieldModel<27, 1> ck48msel;\n    BitFieldModel<28,\
    \ 1> sdiosel;\n    BitFieldModel<29, 1> spdifsel;\n  };\n};\n\n}\n\n#endif /*\
    \ DRAL_STM32F446_RCC_H */\n"
  name: RCC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOH_H\n#define DRAL_STM32F446_GPIOH_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40021C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40021C00 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40021C00 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40021C00 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40021C00 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40021C00 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40021C00 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40021C00\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40021C00 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40021C00\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOH_H */\n"
  name: GPIOH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOG_H\n#define DRAL_STM32F446_GPIOG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40021800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40021800 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40021800 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40021800 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40021800 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40021800 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40021800 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40021800\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40021800 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40021800\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOG_H */\n"
  name: GPIOG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOF_H\n#define DRAL_STM32F446_GPIOF_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40021400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40021400 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40021400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40021400 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40021400 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40021400 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40021400 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40021400\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40021400 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40021400\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOF_H */\n"
  name: GPIOF
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOE_H\n#define DRAL_STM32F446_GPIOE_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40021000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40021000 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40021000 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40021000 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40021000 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40021000 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40021000 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40021000\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40021000 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40021000\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOE_H */\n"
  name: GPIOE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOD_H\n#define DRAL_STM32F446_GPIOD_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40020C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40020C00 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40020C00 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40020C00 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40020C00 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40020C00 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40020C00 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40020C00\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40020C00 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40020C00\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOD_H */\n"
  name: GPIOD
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOC_H\n#define DRAL_STM32F446_GPIOC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40020800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40020800 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40020800 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40020800 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40020800 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40020800 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40020800 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40020800\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40020800 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40020800\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOC_H */\n"
  name: GPIOC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOB_H\n#define DRAL_STM32F446_GPIOB_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40020400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40020400 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40020400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40020400 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40020400 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40020400 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40020400 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40020400\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40020400 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40020400\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOB_H */\n"
  name: GPIOB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_GPIOA_H\n#define DRAL_STM32F446_GPIOA_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ moder\n{\n  constexpr static uint32_t Address = 0x40020000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<30, 2> moder15;\n    BitFieldModel<28,\
    \ 2> moder14;\n    BitFieldModel<26, 2> moder13;\n    BitFieldModel<24, 2> moder12;\n\
    \    BitFieldModel<22, 2> moder11;\n    BitFieldModel<20, 2> moder10;\n    BitFieldModel<18,\
    \ 2> moder9;\n    BitFieldModel<16, 2> moder8;\n    BitFieldModel<14, 2> moder7;\n\
    \    BitFieldModel<12, 2> moder6;\n    BitFieldModel<10, 2> moder5;\n    BitFieldModel<8,\
    \ 2> moder4;\n    BitFieldModel<6, 2> moder3;\n    BitFieldModel<4, 2> moder2;\n\
    \    BitFieldModel<2, 2> moder1;\n    BitFieldModel<0, 2> moder0;\n  };\n};\n\n\
    struct otyper\n{\n  constexpr static uint32_t Address = 0x40020000 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> ot15;\n    BitFieldModel<14,\
    \ 1> ot14;\n    BitFieldModel<13, 1> ot13;\n    BitFieldModel<12, 1> ot12;\n \
    \   BitFieldModel<11, 1> ot11;\n    BitFieldModel<10, 1> ot10;\n    BitFieldModel<9,\
    \ 1> ot9;\n    BitFieldModel<8, 1> ot8;\n    BitFieldModel<7, 1> ot7;\n    BitFieldModel<6,\
    \ 1> ot6;\n    BitFieldModel<5, 1> ot5;\n    BitFieldModel<4, 1> ot4;\n    BitFieldModel<3,\
    \ 1> ot3;\n    BitFieldModel<2, 1> ot2;\n    BitFieldModel<1, 1> ot1;\n    BitFieldModel<0,\
    \ 1> ot0;\n  };\n};\n\nstruct ospeedr\n{\n  constexpr static uint32_t Address\
    \ = 0x40020000 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30,\
    \ 2> ospeedr15;\n    BitFieldModel<28, 2> ospeedr14;\n    BitFieldModel<26, 2>\
    \ ospeedr13;\n    BitFieldModel<24, 2> ospeedr12;\n    BitFieldModel<22, 2> ospeedr11;\n\
    \    BitFieldModel<20, 2> ospeedr10;\n    BitFieldModel<18, 2> ospeedr9;\n   \
    \ BitFieldModel<16, 2> ospeedr8;\n    BitFieldModel<14, 2> ospeedr7;\n    BitFieldModel<12,\
    \ 2> ospeedr6;\n    BitFieldModel<10, 2> ospeedr5;\n    BitFieldModel<8, 2> ospeedr4;\n\
    \    BitFieldModel<6, 2> ospeedr3;\n    BitFieldModel<4, 2> ospeedr2;\n    BitFieldModel<2,\
    \ 2> ospeedr1;\n    BitFieldModel<0, 2> ospeedr0;\n  };\n};\n\nstruct pupdr\n\
    {\n  constexpr static uint32_t Address = 0x40020000 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<30, 2> pupdr15;\n    BitFieldModel<28,\
    \ 2> pupdr14;\n    BitFieldModel<26, 2> pupdr13;\n    BitFieldModel<24, 2> pupdr12;\n\
    \    BitFieldModel<22, 2> pupdr11;\n    BitFieldModel<20, 2> pupdr10;\n    BitFieldModel<18,\
    \ 2> pupdr9;\n    BitFieldModel<16, 2> pupdr8;\n    BitFieldModel<14, 2> pupdr7;\n\
    \    BitFieldModel<12, 2> pupdr6;\n    BitFieldModel<10, 2> pupdr5;\n    BitFieldModel<8,\
    \ 2> pupdr4;\n    BitFieldModel<6, 2> pupdr3;\n    BitFieldModel<4, 2> pupdr2;\n\
    \    BitFieldModel<2, 2> pupdr1;\n    BitFieldModel<0, 2> pupdr0;\n  };\n};\n\n\
    struct idr\n{\n  constexpr static uint32_t Address = 0x40020000 + 0x0010;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> idr15;\n    BitFieldModel<14,\
    \ 1> idr14;\n    BitFieldModel<13, 1> idr13;\n    BitFieldModel<12, 1> idr12;\n\
    \    BitFieldModel<11, 1> idr11;\n    BitFieldModel<10, 1> idr10;\n    BitFieldModel<9,\
    \ 1> idr9;\n    BitFieldModel<8, 1> idr8;\n    BitFieldModel<7, 1> idr7;\n   \
    \ BitFieldModel<6, 1> idr6;\n    BitFieldModel<5, 1> idr5;\n    BitFieldModel<4,\
    \ 1> idr4;\n    BitFieldModel<3, 1> idr3;\n    BitFieldModel<2, 1> idr2;\n   \
    \ BitFieldModel<1, 1> idr1;\n    BitFieldModel<0, 1> idr0;\n  };\n};\n\nstruct\
    \ odr\n{\n  constexpr static uint32_t Address = 0x40020000 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> odr15;\n    BitFieldModel<14,\
    \ 1> odr14;\n    BitFieldModel<13, 1> odr13;\n    BitFieldModel<12, 1> odr12;\n\
    \    BitFieldModel<11, 1> odr11;\n    BitFieldModel<10, 1> odr10;\n    BitFieldModel<9,\
    \ 1> odr9;\n    BitFieldModel<8, 1> odr8;\n    BitFieldModel<7, 1> odr7;\n   \
    \ BitFieldModel<6, 1> odr6;\n    BitFieldModel<5, 1> odr5;\n    BitFieldModel<4,\
    \ 1> odr4;\n    BitFieldModel<3, 1> odr3;\n    BitFieldModel<2, 1> odr2;\n   \
    \ BitFieldModel<1, 1> odr1;\n    BitFieldModel<0, 1> odr0;\n  };\n};\n\nstruct\
    \ bsrr\n{\n  constexpr static uint32_t Address = 0x40020000 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> br15;\n    BitFieldModel<30,\
    \ 1> br14;\n    BitFieldModel<29, 1> br13;\n    BitFieldModel<28, 1> br12;\n \
    \   BitFieldModel<27, 1> br11;\n    BitFieldModel<26, 1> br10;\n    BitFieldModel<25,\
    \ 1> br9;\n    BitFieldModel<24, 1> br8;\n    BitFieldModel<23, 1> br7;\n    BitFieldModel<22,\
    \ 1> br6;\n    BitFieldModel<21, 1> br5;\n    BitFieldModel<20, 1> br4;\n    BitFieldModel<19,\
    \ 1> br3;\n    BitFieldModel<18, 1> br2;\n    BitFieldModel<17, 1> br1;\n    BitFieldModel<16,\
    \ 1> br0;\n    BitFieldModel<15, 1> bs15;\n    BitFieldModel<14, 1> bs14;\n  \
    \  BitFieldModel<13, 1> bs13;\n    BitFieldModel<12, 1> bs12;\n    BitFieldModel<11,\
    \ 1> bs11;\n    BitFieldModel<10, 1> bs10;\n    BitFieldModel<9, 1> bs9;\n   \
    \ BitFieldModel<8, 1> bs8;\n    BitFieldModel<7, 1> bs7;\n    BitFieldModel<6,\
    \ 1> bs6;\n    BitFieldModel<5, 1> bs5;\n    BitFieldModel<4, 1> bs4;\n    BitFieldModel<3,\
    \ 1> bs3;\n    BitFieldModel<2, 1> bs2;\n    BitFieldModel<1, 1> bs1;\n    BitFieldModel<0,\
    \ 1> bs0;\n  };\n};\n\nstruct lckr\n{\n  constexpr static uint32_t Address = 0x40020000\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 1> lckk;\n\
    \    BitFieldModel<15, 1> lck15;\n    BitFieldModel<14, 1> lck14;\n    BitFieldModel<13,\
    \ 1> lck13;\n    BitFieldModel<12, 1> lck12;\n    BitFieldModel<11, 1> lck11;\n\
    \    BitFieldModel<10, 1> lck10;\n    BitFieldModel<9, 1> lck9;\n    BitFieldModel<8,\
    \ 1> lck8;\n    BitFieldModel<7, 1> lck7;\n    BitFieldModel<6, 1> lck6;\n   \
    \ BitFieldModel<5, 1> lck5;\n    BitFieldModel<4, 1> lck4;\n    BitFieldModel<3,\
    \ 1> lck3;\n    BitFieldModel<2, 1> lck2;\n    BitFieldModel<1, 1> lck1;\n   \
    \ BitFieldModel<0, 1> lck0;\n  };\n};\n\nstruct afrl\n{\n  constexpr static uint32_t\
    \ Address = 0x40020000 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28,\
    \ 4> afrl7;\n    BitFieldModel<24, 4> afrl6;\n    BitFieldModel<20, 4> afrl5;\n\
    \    BitFieldModel<16, 4> afrl4;\n    BitFieldModel<12, 4> afrl3;\n    BitFieldModel<8,\
    \ 4> afrl2;\n    BitFieldModel<4, 4> afrl1;\n    BitFieldModel<0, 4> afrl0;\n\
    \  };\n};\n\nstruct afrh\n{\n  constexpr static uint32_t Address = 0x40020000\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<28, 4> afrh15;\n\
    \    BitFieldModel<24, 4> afrh14;\n    BitFieldModel<20, 4> afrh13;\n    BitFieldModel<16,\
    \ 4> afrh12;\n    BitFieldModel<12, 4> afrh11;\n    BitFieldModel<8, 4> afrh10;\n\
    \    BitFieldModel<4, 4> afrh9;\n    BitFieldModel<0, 4> afrh8;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_GPIOA_H */\n"
  name: GPIOA
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SYSCFG_H\n#define DRAL_STM32F446_SYSCFG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ memrm\n{\n  constexpr static uint32_t Address = 0x40013800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 3> mem_mode;\n    BitFieldModel<8,\
    \ 1> fb_mode;\n    BitFieldModel<10, 2> swp_fmc;\n  };\n};\n\nstruct pmc\n{\n\
    \  constexpr static uint32_t Address = 0x40013800 + 0x0004;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<23, 1> mii_rmii_sel;\n    BitFieldModel<16,\
    \ 1> adc1dc2;\n    BitFieldModel<17, 1> adc2dc2;\n    BitFieldModel<18, 1> adc3dc2;\n\
    \  };\n};\n\nstruct exticr1\n{\n  constexpr static uint32_t Address = 0x40013800\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> exti3;\n\
    \    BitFieldModel<8, 4> exti2;\n    BitFieldModel<4, 4> exti1;\n    BitFieldModel<0,\
    \ 4> exti0;\n  };\n};\n\nstruct exticr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40013800 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12,\
    \ 4> exti7;\n    BitFieldModel<8, 4> exti6;\n    BitFieldModel<4, 4> exti5;\n\
    \    BitFieldModel<0, 4> exti4;\n  };\n};\n\nstruct exticr3\n{\n  constexpr static\
    \ uint32_t Address = 0x40013800 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<12, 4> exti11;\n    BitFieldModel<8, 4> exti10;\n    BitFieldModel<4,\
    \ 4> exti9;\n    BitFieldModel<0, 4> exti8;\n  };\n};\n\nstruct exticr4\n{\n \
    \ constexpr static uint32_t Address = 0x40013800 + 0x0014;\n  union\n  {\n   \
    \ uint32_t value;\n    BitFieldModel<12, 4> exti15;\n    BitFieldModel<8, 4> exti14;\n\
    \    BitFieldModel<4, 4> exti13;\n    BitFieldModel<0, 4> exti12;\n  };\n};\n\n\
    struct cmpcr\n{\n  constexpr static uint32_t Address = 0x40013800 + 0x0020;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 1> ready;\n    BitFieldModel<0,\
    \ 1> cmp_pd;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_SYSCFG_H */\n"
  name: SYSCFG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SPI1_H\n#define DRAL_STM32F446_SPI1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40013000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> bidimode;\n    BitFieldModel<14,\
    \ 1> bidioe;\n    BitFieldModel<13, 1> crcen;\n    BitFieldModel<12, 1> crcnext;\n\
    \    BitFieldModel<11, 1> dff;\n    BitFieldModel<10, 1> rxonly;\n    BitFieldModel<9,\
    \ 1> ssm;\n    BitFieldModel<8, 1> ssi;\n    BitFieldModel<7, 1> lsbfirst;\n \
    \   BitFieldModel<6, 1> spe;\n    BitFieldModel<3, 3> br;\n    BitFieldModel<2,\
    \ 1> mstr;\n    BitFieldModel<1, 1> cpol;\n    BitFieldModel<0, 1> cpha;\n  };\n\
    };\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40013000 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6,\
    \ 1> rxneie;\n    BitFieldModel<5, 1> errie;\n    BitFieldModel<4, 1> frf;\n \
    \   BitFieldModel<2, 1> ssoe;\n    BitFieldModel<1, 1> txdmaen;\n    BitFieldModel<0,\
    \ 1> rxdmaen;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address =\
    \ 0x40013000 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 1> tifrfe;\n    BitFieldModel<7, 1> bsy;\n    BitFieldModel<6, 1> ovr;\n   \
    \ BitFieldModel<5, 1> modf;\n    BitFieldModel<4, 1> crcerr;\n    BitFieldModel<3,\
    \ 1> udr;\n    BitFieldModel<2, 1> chside;\n    BitFieldModel<1, 1> txe;\n   \
    \ BitFieldModel<0, 1> rxne;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t\
    \ Address = 0x40013000 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> dr;\n  };\n};\n\nstruct crcpr\n{\n  constexpr static uint32_t Address =\
    \ 0x40013000 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> crcpoly;\n  };\n};\n\nstruct rxcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40013000 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> rxcrc;\n  };\n};\n\nstruct txcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40013000 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> txcrc;\n  };\n};\n\nstruct i2scfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40013000 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> i2smod;\n    BitFieldModel<10, 1> i2se;\n    BitFieldModel<8, 2> i2scfg;\n\
    \    BitFieldModel<7, 1> pcmsync;\n    BitFieldModel<4, 2> i2sstd;\n    BitFieldModel<3,\
    \ 1> ckpol;\n    BitFieldModel<1, 2> datlen;\n    BitFieldModel<0, 1> chlen;\n\
    \  };\n};\n\nstruct i2spr\n{\n  constexpr static uint32_t Address = 0x40013000\
    \ + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9, 1> mckoe;\n\
    \    BitFieldModel<8, 1> odd;\n    BitFieldModel<0, 8> i2sdiv;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_SPI1_H */\n"
  name: SPI1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SPI2_H\n#define DRAL_STM32F446_SPI2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40003800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> bidimode;\n    BitFieldModel<14,\
    \ 1> bidioe;\n    BitFieldModel<13, 1> crcen;\n    BitFieldModel<12, 1> crcnext;\n\
    \    BitFieldModel<11, 1> dff;\n    BitFieldModel<10, 1> rxonly;\n    BitFieldModel<9,\
    \ 1> ssm;\n    BitFieldModel<8, 1> ssi;\n    BitFieldModel<7, 1> lsbfirst;\n \
    \   BitFieldModel<6, 1> spe;\n    BitFieldModel<3, 3> br;\n    BitFieldModel<2,\
    \ 1> mstr;\n    BitFieldModel<1, 1> cpol;\n    BitFieldModel<0, 1> cpha;\n  };\n\
    };\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40003800 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6,\
    \ 1> rxneie;\n    BitFieldModel<5, 1> errie;\n    BitFieldModel<4, 1> frf;\n \
    \   BitFieldModel<2, 1> ssoe;\n    BitFieldModel<1, 1> txdmaen;\n    BitFieldModel<0,\
    \ 1> rxdmaen;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address =\
    \ 0x40003800 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 1> tifrfe;\n    BitFieldModel<7, 1> bsy;\n    BitFieldModel<6, 1> ovr;\n   \
    \ BitFieldModel<5, 1> modf;\n    BitFieldModel<4, 1> crcerr;\n    BitFieldModel<3,\
    \ 1> udr;\n    BitFieldModel<2, 1> chside;\n    BitFieldModel<1, 1> txe;\n   \
    \ BitFieldModel<0, 1> rxne;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t\
    \ Address = 0x40003800 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> dr;\n  };\n};\n\nstruct crcpr\n{\n  constexpr static uint32_t Address =\
    \ 0x40003800 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> crcpoly;\n  };\n};\n\nstruct rxcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40003800 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> rxcrc;\n  };\n};\n\nstruct txcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40003800 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> txcrc;\n  };\n};\n\nstruct i2scfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40003800 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> i2smod;\n    BitFieldModel<10, 1> i2se;\n    BitFieldModel<8, 2> i2scfg;\n\
    \    BitFieldModel<7, 1> pcmsync;\n    BitFieldModel<4, 2> i2sstd;\n    BitFieldModel<3,\
    \ 1> ckpol;\n    BitFieldModel<1, 2> datlen;\n    BitFieldModel<0, 1> chlen;\n\
    \  };\n};\n\nstruct i2spr\n{\n  constexpr static uint32_t Address = 0x40003800\
    \ + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9, 1> mckoe;\n\
    \    BitFieldModel<8, 1> odd;\n    BitFieldModel<0, 8> i2sdiv;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_SPI2_H */\n"
  name: SPI2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SPI3_H\n#define DRAL_STM32F446_SPI3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40003C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> bidimode;\n    BitFieldModel<14,\
    \ 1> bidioe;\n    BitFieldModel<13, 1> crcen;\n    BitFieldModel<12, 1> crcnext;\n\
    \    BitFieldModel<11, 1> dff;\n    BitFieldModel<10, 1> rxonly;\n    BitFieldModel<9,\
    \ 1> ssm;\n    BitFieldModel<8, 1> ssi;\n    BitFieldModel<7, 1> lsbfirst;\n \
    \   BitFieldModel<6, 1> spe;\n    BitFieldModel<3, 3> br;\n    BitFieldModel<2,\
    \ 1> mstr;\n    BitFieldModel<1, 1> cpol;\n    BitFieldModel<0, 1> cpha;\n  };\n\
    };\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40003C00 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6,\
    \ 1> rxneie;\n    BitFieldModel<5, 1> errie;\n    BitFieldModel<4, 1> frf;\n \
    \   BitFieldModel<2, 1> ssoe;\n    BitFieldModel<1, 1> txdmaen;\n    BitFieldModel<0,\
    \ 1> rxdmaen;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address =\
    \ 0x40003C00 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 1> tifrfe;\n    BitFieldModel<7, 1> bsy;\n    BitFieldModel<6, 1> ovr;\n   \
    \ BitFieldModel<5, 1> modf;\n    BitFieldModel<4, 1> crcerr;\n    BitFieldModel<3,\
    \ 1> udr;\n    BitFieldModel<2, 1> chside;\n    BitFieldModel<1, 1> txe;\n   \
    \ BitFieldModel<0, 1> rxne;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t\
    \ Address = 0x40003C00 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> dr;\n  };\n};\n\nstruct crcpr\n{\n  constexpr static uint32_t Address =\
    \ 0x40003C00 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> crcpoly;\n  };\n};\n\nstruct rxcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40003C00 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> rxcrc;\n  };\n};\n\nstruct txcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40003C00 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> txcrc;\n  };\n};\n\nstruct i2scfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40003C00 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> i2smod;\n    BitFieldModel<10, 1> i2se;\n    BitFieldModel<8, 2> i2scfg;\n\
    \    BitFieldModel<7, 1> pcmsync;\n    BitFieldModel<4, 2> i2sstd;\n    BitFieldModel<3,\
    \ 1> ckpol;\n    BitFieldModel<1, 2> datlen;\n    BitFieldModel<0, 1> chlen;\n\
    \  };\n};\n\nstruct i2spr\n{\n  constexpr static uint32_t Address = 0x40003C00\
    \ + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9, 1> mckoe;\n\
    \    BitFieldModel<8, 1> odd;\n    BitFieldModel<0, 8> i2sdiv;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_SPI3_H */\n"
  name: SPI3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SPI4_H\n#define DRAL_STM32F446_SPI4_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40013400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> bidimode;\n    BitFieldModel<14,\
    \ 1> bidioe;\n    BitFieldModel<13, 1> crcen;\n    BitFieldModel<12, 1> crcnext;\n\
    \    BitFieldModel<11, 1> dff;\n    BitFieldModel<10, 1> rxonly;\n    BitFieldModel<9,\
    \ 1> ssm;\n    BitFieldModel<8, 1> ssi;\n    BitFieldModel<7, 1> lsbfirst;\n \
    \   BitFieldModel<6, 1> spe;\n    BitFieldModel<3, 3> br;\n    BitFieldModel<2,\
    \ 1> mstr;\n    BitFieldModel<1, 1> cpol;\n    BitFieldModel<0, 1> cpha;\n  };\n\
    };\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40013400 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6,\
    \ 1> rxneie;\n    BitFieldModel<5, 1> errie;\n    BitFieldModel<4, 1> frf;\n \
    \   BitFieldModel<2, 1> ssoe;\n    BitFieldModel<1, 1> txdmaen;\n    BitFieldModel<0,\
    \ 1> rxdmaen;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address =\
    \ 0x40013400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 1> tifrfe;\n    BitFieldModel<7, 1> bsy;\n    BitFieldModel<6, 1> ovr;\n   \
    \ BitFieldModel<5, 1> modf;\n    BitFieldModel<4, 1> crcerr;\n    BitFieldModel<3,\
    \ 1> udr;\n    BitFieldModel<2, 1> chside;\n    BitFieldModel<1, 1> txe;\n   \
    \ BitFieldModel<0, 1> rxne;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t\
    \ Address = 0x40013400 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> dr;\n  };\n};\n\nstruct crcpr\n{\n  constexpr static uint32_t Address =\
    \ 0x40013400 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> crcpoly;\n  };\n};\n\nstruct rxcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40013400 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> rxcrc;\n  };\n};\n\nstruct txcrcr\n{\n  constexpr static uint32_t Address\
    \ = 0x40013400 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> txcrc;\n  };\n};\n\nstruct i2scfgr\n{\n  constexpr static uint32_t Address\
    \ = 0x40013400 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> i2smod;\n    BitFieldModel<10, 1> i2se;\n    BitFieldModel<8, 2> i2scfg;\n\
    \    BitFieldModel<7, 1> pcmsync;\n    BitFieldModel<4, 2> i2sstd;\n    BitFieldModel<3,\
    \ 1> ckpol;\n    BitFieldModel<1, 2> datlen;\n    BitFieldModel<0, 1> chlen;\n\
    \  };\n};\n\nstruct i2spr\n{\n  constexpr static uint32_t Address = 0x40013400\
    \ + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9, 1> mckoe;\n\
    \    BitFieldModel<8, 1> odd;\n    BitFieldModel<0, 8> i2sdiv;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_SPI4_H */\n"
  name: SPI4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_ADC1_H\n#define DRAL_STM32F446_ADC1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40012000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<5, 1> ovr;\n    BitFieldModel<4,\
    \ 1> strt;\n    BitFieldModel<3, 1> jstrt;\n    BitFieldModel<2, 1> jeoc;\n  \
    \  BitFieldModel<1, 1> eoc;\n    BitFieldModel<0, 1> awd;\n  };\n};\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40012000 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<26, 1> ovrie;\n    BitFieldModel<24,\
    \ 2> res;\n    BitFieldModel<23, 1> awden;\n    BitFieldModel<22, 1> jawden;\n\
    \    BitFieldModel<13, 3> discnum;\n    BitFieldModel<12, 1> jdiscen;\n    BitFieldModel<11,\
    \ 1> discen;\n    BitFieldModel<10, 1> jauto;\n    BitFieldModel<9, 1> awdsgl;\n\
    \    BitFieldModel<8, 1> scan;\n    BitFieldModel<7, 1> jeocie;\n    BitFieldModel<6,\
    \ 1> awdie;\n    BitFieldModel<5, 1> eocie;\n    BitFieldModel<0, 5> awdch;\n\
    \  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40012000 +\
    \ 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30, 1> swstart;\n\
    \    BitFieldModel<28, 2> exten;\n    BitFieldModel<24, 4> extsel;\n    BitFieldModel<22,\
    \ 1> jswstart;\n    BitFieldModel<20, 2> jexten;\n    BitFieldModel<16, 4> jextsel;\n\
    \    BitFieldModel<11, 1> align;\n    BitFieldModel<10, 1> eocs;\n    BitFieldModel<9,\
    \ 1> dds;\n    BitFieldModel<8, 1> dma;\n    BitFieldModel<1, 1> cont;\n    BitFieldModel<0,\
    \ 1> adon;\n  };\n};\n\nstruct smpr1\n{\n  constexpr static uint32_t Address =\
    \ 0x40012000 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> smpx_x;\n  };\n};\n\nstruct smpr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> smpx_x;\n  };\n};\n\nstruct jofr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset1;\n  };\n};\n\nstruct jofr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset2;\n  };\n};\n\nstruct jofr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset3;\n  };\n};\n\nstruct jofr4\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset4;\n  };\n};\n\nstruct htr\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> ht;\n  };\n};\n\nstruct ltr\n{\n  constexpr static uint32_t Address = 0x40012000\
    \ + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 12> lt;\n\
    \  };\n};\n\nstruct sqr1\n{\n  constexpr static uint32_t Address = 0x40012000\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<20, 4> l;\n\
    \    BitFieldModel<15, 5> sq16;\n    BitFieldModel<10, 5> sq15;\n    BitFieldModel<5,\
    \ 5> sq14;\n    BitFieldModel<0, 5> sq13;\n  };\n};\n\nstruct sqr2\n{\n  constexpr\
    \ static uint32_t Address = 0x40012000 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 5> sq12;\n    BitFieldModel<20, 5> sq11;\n    BitFieldModel<15,\
    \ 5> sq10;\n    BitFieldModel<10, 5> sq9;\n    BitFieldModel<5, 5> sq8;\n    BitFieldModel<0,\
    \ 5> sq7;\n  };\n};\n\nstruct sqr3\n{\n  constexpr static uint32_t Address = 0x40012000\
    \ + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<25, 5> sq6;\n\
    \    BitFieldModel<20, 5> sq5;\n    BitFieldModel<15, 5> sq4;\n    BitFieldModel<10,\
    \ 5> sq3;\n    BitFieldModel<5, 5> sq2;\n    BitFieldModel<0, 5> sq1;\n  };\n\
    };\n\nstruct jsqr\n{\n  constexpr static uint32_t Address = 0x40012000 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<20, 2> jl;\n    BitFieldModel<15,\
    \ 5> jsq4;\n    BitFieldModel<10, 5> jsq3;\n    BitFieldModel<5, 5> jsq2;\n  \
    \  BitFieldModel<0, 5> jsq1;\n  };\n};\n\nstruct jdr1\n{\n  constexpr static uint32_t\
    \ Address = 0x40012000 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0040;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0044;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr4\n{\n  constexpr static uint32_t Address\
    \ = 0x40012000 + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t Address =\
    \ 0x40012000 + 0x004C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> data;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_ADC1_H */\n"
  name: ADC1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_ADC2_H\n#define DRAL_STM32F446_ADC2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40012100 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<5, 1> ovr;\n    BitFieldModel<4,\
    \ 1> strt;\n    BitFieldModel<3, 1> jstrt;\n    BitFieldModel<2, 1> jeoc;\n  \
    \  BitFieldModel<1, 1> eoc;\n    BitFieldModel<0, 1> awd;\n  };\n};\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40012100 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<26, 1> ovrie;\n    BitFieldModel<24,\
    \ 2> res;\n    BitFieldModel<23, 1> awden;\n    BitFieldModel<22, 1> jawden;\n\
    \    BitFieldModel<13, 3> discnum;\n    BitFieldModel<12, 1> jdiscen;\n    BitFieldModel<11,\
    \ 1> discen;\n    BitFieldModel<10, 1> jauto;\n    BitFieldModel<9, 1> awdsgl;\n\
    \    BitFieldModel<8, 1> scan;\n    BitFieldModel<7, 1> jeocie;\n    BitFieldModel<6,\
    \ 1> awdie;\n    BitFieldModel<5, 1> eocie;\n    BitFieldModel<0, 5> awdch;\n\
    \  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40012100 +\
    \ 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30, 1> swstart;\n\
    \    BitFieldModel<28, 2> exten;\n    BitFieldModel<24, 4> extsel;\n    BitFieldModel<22,\
    \ 1> jswstart;\n    BitFieldModel<20, 2> jexten;\n    BitFieldModel<16, 4> jextsel;\n\
    \    BitFieldModel<11, 1> align;\n    BitFieldModel<10, 1> eocs;\n    BitFieldModel<9,\
    \ 1> dds;\n    BitFieldModel<8, 1> dma;\n    BitFieldModel<1, 1> cont;\n    BitFieldModel<0,\
    \ 1> adon;\n  };\n};\n\nstruct smpr1\n{\n  constexpr static uint32_t Address =\
    \ 0x40012100 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> smpx_x;\n  };\n};\n\nstruct smpr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> smpx_x;\n  };\n};\n\nstruct jofr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset1;\n  };\n};\n\nstruct jofr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset2;\n  };\n};\n\nstruct jofr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset3;\n  };\n};\n\nstruct jofr4\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset4;\n  };\n};\n\nstruct htr\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> ht;\n  };\n};\n\nstruct ltr\n{\n  constexpr static uint32_t Address = 0x40012100\
    \ + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 12> lt;\n\
    \  };\n};\n\nstruct sqr1\n{\n  constexpr static uint32_t Address = 0x40012100\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<20, 4> l;\n\
    \    BitFieldModel<15, 5> sq16;\n    BitFieldModel<10, 5> sq15;\n    BitFieldModel<5,\
    \ 5> sq14;\n    BitFieldModel<0, 5> sq13;\n  };\n};\n\nstruct sqr2\n{\n  constexpr\
    \ static uint32_t Address = 0x40012100 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 5> sq12;\n    BitFieldModel<20, 5> sq11;\n    BitFieldModel<15,\
    \ 5> sq10;\n    BitFieldModel<10, 5> sq9;\n    BitFieldModel<5, 5> sq8;\n    BitFieldModel<0,\
    \ 5> sq7;\n  };\n};\n\nstruct sqr3\n{\n  constexpr static uint32_t Address = 0x40012100\
    \ + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<25, 5> sq6;\n\
    \    BitFieldModel<20, 5> sq5;\n    BitFieldModel<15, 5> sq4;\n    BitFieldModel<10,\
    \ 5> sq3;\n    BitFieldModel<5, 5> sq2;\n    BitFieldModel<0, 5> sq1;\n  };\n\
    };\n\nstruct jsqr\n{\n  constexpr static uint32_t Address = 0x40012100 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<20, 2> jl;\n    BitFieldModel<15,\
    \ 5> jsq4;\n    BitFieldModel<10, 5> jsq3;\n    BitFieldModel<5, 5> jsq2;\n  \
    \  BitFieldModel<0, 5> jsq1;\n  };\n};\n\nstruct jdr1\n{\n  constexpr static uint32_t\
    \ Address = 0x40012100 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0040;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0044;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr4\n{\n  constexpr static uint32_t Address\
    \ = 0x40012100 + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t Address =\
    \ 0x40012100 + 0x004C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> data;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_ADC2_H */\n"
  name: ADC2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_ADC3_H\n#define DRAL_STM32F446_ADC3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40012200 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<5, 1> ovr;\n    BitFieldModel<4,\
    \ 1> strt;\n    BitFieldModel<3, 1> jstrt;\n    BitFieldModel<2, 1> jeoc;\n  \
    \  BitFieldModel<1, 1> eoc;\n    BitFieldModel<0, 1> awd;\n  };\n};\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40012200 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<26, 1> ovrie;\n    BitFieldModel<24,\
    \ 2> res;\n    BitFieldModel<23, 1> awden;\n    BitFieldModel<22, 1> jawden;\n\
    \    BitFieldModel<13, 3> discnum;\n    BitFieldModel<12, 1> jdiscen;\n    BitFieldModel<11,\
    \ 1> discen;\n    BitFieldModel<10, 1> jauto;\n    BitFieldModel<9, 1> awdsgl;\n\
    \    BitFieldModel<8, 1> scan;\n    BitFieldModel<7, 1> jeocie;\n    BitFieldModel<6,\
    \ 1> awdie;\n    BitFieldModel<5, 1> eocie;\n    BitFieldModel<0, 5> awdch;\n\
    \  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40012200 +\
    \ 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<30, 1> swstart;\n\
    \    BitFieldModel<28, 2> exten;\n    BitFieldModel<24, 4> extsel;\n    BitFieldModel<22,\
    \ 1> jswstart;\n    BitFieldModel<20, 2> jexten;\n    BitFieldModel<16, 4> jextsel;\n\
    \    BitFieldModel<11, 1> align;\n    BitFieldModel<10, 1> eocs;\n    BitFieldModel<9,\
    \ 1> dds;\n    BitFieldModel<8, 1> dma;\n    BitFieldModel<1, 1> cont;\n    BitFieldModel<0,\
    \ 1> adon;\n  };\n};\n\nstruct smpr1\n{\n  constexpr static uint32_t Address =\
    \ 0x40012200 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> smpx_x;\n  };\n};\n\nstruct smpr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> smpx_x;\n  };\n};\n\nstruct jofr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset1;\n  };\n};\n\nstruct jofr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset2;\n  };\n};\n\nstruct jofr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset3;\n  };\n};\n\nstruct jofr4\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> joffset4;\n  };\n};\n\nstruct htr\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> ht;\n  };\n};\n\nstruct ltr\n{\n  constexpr static uint32_t Address = 0x40012200\
    \ + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 12> lt;\n\
    \  };\n};\n\nstruct sqr1\n{\n  constexpr static uint32_t Address = 0x40012200\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<20, 4> l;\n\
    \    BitFieldModel<15, 5> sq16;\n    BitFieldModel<10, 5> sq15;\n    BitFieldModel<5,\
    \ 5> sq14;\n    BitFieldModel<0, 5> sq13;\n  };\n};\n\nstruct sqr2\n{\n  constexpr\
    \ static uint32_t Address = 0x40012200 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<25, 5> sq12;\n    BitFieldModel<20, 5> sq11;\n    BitFieldModel<15,\
    \ 5> sq10;\n    BitFieldModel<10, 5> sq9;\n    BitFieldModel<5, 5> sq8;\n    BitFieldModel<0,\
    \ 5> sq7;\n  };\n};\n\nstruct sqr3\n{\n  constexpr static uint32_t Address = 0x40012200\
    \ + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<25, 5> sq6;\n\
    \    BitFieldModel<20, 5> sq5;\n    BitFieldModel<15, 5> sq4;\n    BitFieldModel<10,\
    \ 5> sq3;\n    BitFieldModel<5, 5> sq2;\n    BitFieldModel<0, 5> sq1;\n  };\n\
    };\n\nstruct jsqr\n{\n  constexpr static uint32_t Address = 0x40012200 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<20, 2> jl;\n    BitFieldModel<15,\
    \ 5> jsq4;\n    BitFieldModel<10, 5> jsq3;\n    BitFieldModel<5, 5> jsq2;\n  \
    \  BitFieldModel<0, 5> jsq1;\n  };\n};\n\nstruct jdr1\n{\n  constexpr static uint32_t\
    \ Address = 0x40012200 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr2\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0040;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0044;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct jdr4\n{\n  constexpr static uint32_t Address\
    \ = 0x40012200 + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> jdata;\n  };\n};\n\nstruct dr\n{\n  constexpr static uint32_t Address =\
    \ 0x40012200 + 0x004C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> data;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_ADC3_H */\n"
  name: ADC3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_USART6_H\n#define DRAL_STM32F446_USART6_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40011400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<9, 1> cts;\n    BitFieldModel<8,\
    \ 1> lbd;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<5,\
    \ 1> rxne;\n    BitFieldModel<4, 1> idle;\n    BitFieldModel<3, 1> ore;\n    BitFieldModel<2,\
    \ 1> nf;\n    BitFieldModel<1, 1> fe;\n    BitFieldModel<0, 1> pe;\n  };\n};\n\
    \nstruct dr\n{\n  constexpr static uint32_t Address = 0x40011400 + 0x0004;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 9> dr;\n  };\n};\n\nstruct\
    \ brr\n{\n  constexpr static uint32_t Address = 0x40011400 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<4, 12> div_mantissa;\n    BitFieldModel<0,\
    \ 4> div_fraction;\n  };\n};\n\nstruct cr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40011400 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> over8;\n    BitFieldModel<13, 1> ue;\n    BitFieldModel<12, 1> m;\n    BitFieldModel<11,\
    \ 1> wake;\n    BitFieldModel<10, 1> pce;\n    BitFieldModel<9, 1> ps;\n    BitFieldModel<8,\
    \ 1> peie;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6, 1> tcie;\n  \
    \  BitFieldModel<5, 1> rxneie;\n    BitFieldModel<4, 1> idleie;\n    BitFieldModel<3,\
    \ 1> te;\n    BitFieldModel<2, 1> re;\n    BitFieldModel<1, 1> rwu;\n    BitFieldModel<0,\
    \ 1> sbk;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40011400\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> linen;\n\
    \    BitFieldModel<12, 2> stop;\n    BitFieldModel<11, 1> clken;\n    BitFieldModel<10,\
    \ 1> cpol;\n    BitFieldModel<9, 1> cpha;\n    BitFieldModel<8, 1> lbcl;\n   \
    \ BitFieldModel<6, 1> lbdie;\n    BitFieldModel<5, 1> lbdl;\n    BitFieldModel<0,\
    \ 4> add;\n  };\n};\n\nstruct cr3\n{\n  constexpr static uint32_t Address = 0x40011400\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11, 1> onebit;\n\
    \    BitFieldModel<10, 1> ctsie;\n    BitFieldModel<9, 1> ctse;\n    BitFieldModel<8,\
    \ 1> rtse;\n    BitFieldModel<7, 1> dmat;\n    BitFieldModel<6, 1> dmar;\n   \
    \ BitFieldModel<5, 1> scen;\n    BitFieldModel<4, 1> nack;\n    BitFieldModel<3,\
    \ 1> hdsel;\n    BitFieldModel<2, 1> irlp;\n    BitFieldModel<1, 1> iren;\n  \
    \  BitFieldModel<0, 1> eie;\n  };\n};\n\nstruct gtpr\n{\n  constexpr static uint32_t\
    \ Address = 0x40011400 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 8> gt;\n    BitFieldModel<0, 8> psc;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_USART6_H\
    \ */\n"
  name: USART6
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_USART1_H\n#define DRAL_STM32F446_USART1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40011000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<9, 1> cts;\n    BitFieldModel<8,\
    \ 1> lbd;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<5,\
    \ 1> rxne;\n    BitFieldModel<4, 1> idle;\n    BitFieldModel<3, 1> ore;\n    BitFieldModel<2,\
    \ 1> nf;\n    BitFieldModel<1, 1> fe;\n    BitFieldModel<0, 1> pe;\n  };\n};\n\
    \nstruct dr\n{\n  constexpr static uint32_t Address = 0x40011000 + 0x0004;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 9> dr;\n  };\n};\n\nstruct\
    \ brr\n{\n  constexpr static uint32_t Address = 0x40011000 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<4, 12> div_mantissa;\n    BitFieldModel<0,\
    \ 4> div_fraction;\n  };\n};\n\nstruct cr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40011000 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> over8;\n    BitFieldModel<13, 1> ue;\n    BitFieldModel<12, 1> m;\n    BitFieldModel<11,\
    \ 1> wake;\n    BitFieldModel<10, 1> pce;\n    BitFieldModel<9, 1> ps;\n    BitFieldModel<8,\
    \ 1> peie;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6, 1> tcie;\n  \
    \  BitFieldModel<5, 1> rxneie;\n    BitFieldModel<4, 1> idleie;\n    BitFieldModel<3,\
    \ 1> te;\n    BitFieldModel<2, 1> re;\n    BitFieldModel<1, 1> rwu;\n    BitFieldModel<0,\
    \ 1> sbk;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40011000\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> linen;\n\
    \    BitFieldModel<12, 2> stop;\n    BitFieldModel<11, 1> clken;\n    BitFieldModel<10,\
    \ 1> cpol;\n    BitFieldModel<9, 1> cpha;\n    BitFieldModel<8, 1> lbcl;\n   \
    \ BitFieldModel<6, 1> lbdie;\n    BitFieldModel<5, 1> lbdl;\n    BitFieldModel<0,\
    \ 4> add;\n  };\n};\n\nstruct cr3\n{\n  constexpr static uint32_t Address = 0x40011000\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11, 1> onebit;\n\
    \    BitFieldModel<10, 1> ctsie;\n    BitFieldModel<9, 1> ctse;\n    BitFieldModel<8,\
    \ 1> rtse;\n    BitFieldModel<7, 1> dmat;\n    BitFieldModel<6, 1> dmar;\n   \
    \ BitFieldModel<5, 1> scen;\n    BitFieldModel<4, 1> nack;\n    BitFieldModel<3,\
    \ 1> hdsel;\n    BitFieldModel<2, 1> irlp;\n    BitFieldModel<1, 1> iren;\n  \
    \  BitFieldModel<0, 1> eie;\n  };\n};\n\nstruct gtpr\n{\n  constexpr static uint32_t\
    \ Address = 0x40011000 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 8> gt;\n    BitFieldModel<0, 8> psc;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_USART1_H\
    \ */\n"
  name: USART1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_USART2_H\n#define DRAL_STM32F446_USART2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40004400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<9, 1> cts;\n    BitFieldModel<8,\
    \ 1> lbd;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<5,\
    \ 1> rxne;\n    BitFieldModel<4, 1> idle;\n    BitFieldModel<3, 1> ore;\n    BitFieldModel<2,\
    \ 1> nf;\n    BitFieldModel<1, 1> fe;\n    BitFieldModel<0, 1> pe;\n  };\n};\n\
    \nstruct dr\n{\n  constexpr static uint32_t Address = 0x40004400 + 0x0004;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 9> dr;\n  };\n};\n\nstruct\
    \ brr\n{\n  constexpr static uint32_t Address = 0x40004400 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<4, 12> div_mantissa;\n    BitFieldModel<0,\
    \ 4> div_fraction;\n  };\n};\n\nstruct cr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40004400 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> over8;\n    BitFieldModel<13, 1> ue;\n    BitFieldModel<12, 1> m;\n    BitFieldModel<11,\
    \ 1> wake;\n    BitFieldModel<10, 1> pce;\n    BitFieldModel<9, 1> ps;\n    BitFieldModel<8,\
    \ 1> peie;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6, 1> tcie;\n  \
    \  BitFieldModel<5, 1> rxneie;\n    BitFieldModel<4, 1> idleie;\n    BitFieldModel<3,\
    \ 1> te;\n    BitFieldModel<2, 1> re;\n    BitFieldModel<1, 1> rwu;\n    BitFieldModel<0,\
    \ 1> sbk;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40004400\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> linen;\n\
    \    BitFieldModel<12, 2> stop;\n    BitFieldModel<11, 1> clken;\n    BitFieldModel<10,\
    \ 1> cpol;\n    BitFieldModel<9, 1> cpha;\n    BitFieldModel<8, 1> lbcl;\n   \
    \ BitFieldModel<6, 1> lbdie;\n    BitFieldModel<5, 1> lbdl;\n    BitFieldModel<0,\
    \ 4> add;\n  };\n};\n\nstruct cr3\n{\n  constexpr static uint32_t Address = 0x40004400\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11, 1> onebit;\n\
    \    BitFieldModel<10, 1> ctsie;\n    BitFieldModel<9, 1> ctse;\n    BitFieldModel<8,\
    \ 1> rtse;\n    BitFieldModel<7, 1> dmat;\n    BitFieldModel<6, 1> dmar;\n   \
    \ BitFieldModel<5, 1> scen;\n    BitFieldModel<4, 1> nack;\n    BitFieldModel<3,\
    \ 1> hdsel;\n    BitFieldModel<2, 1> irlp;\n    BitFieldModel<1, 1> iren;\n  \
    \  BitFieldModel<0, 1> eie;\n  };\n};\n\nstruct gtpr\n{\n  constexpr static uint32_t\
    \ Address = 0x40004400 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 8> gt;\n    BitFieldModel<0, 8> psc;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_USART2_H\
    \ */\n"
  name: USART2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_USART3_H\n#define DRAL_STM32F446_USART3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40004800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<9, 1> cts;\n    BitFieldModel<8,\
    \ 1> lbd;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<5,\
    \ 1> rxne;\n    BitFieldModel<4, 1> idle;\n    BitFieldModel<3, 1> ore;\n    BitFieldModel<2,\
    \ 1> nf;\n    BitFieldModel<1, 1> fe;\n    BitFieldModel<0, 1> pe;\n  };\n};\n\
    \nstruct dr\n{\n  constexpr static uint32_t Address = 0x40004800 + 0x0004;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 9> dr;\n  };\n};\n\nstruct\
    \ brr\n{\n  constexpr static uint32_t Address = 0x40004800 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<4, 12> div_mantissa;\n    BitFieldModel<0,\
    \ 4> div_fraction;\n  };\n};\n\nstruct cr1\n{\n  constexpr static uint32_t Address\
    \ = 0x40004800 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> over8;\n    BitFieldModel<13, 1> ue;\n    BitFieldModel<12, 1> m;\n    BitFieldModel<11,\
    \ 1> wake;\n    BitFieldModel<10, 1> pce;\n    BitFieldModel<9, 1> ps;\n    BitFieldModel<8,\
    \ 1> peie;\n    BitFieldModel<7, 1> txeie;\n    BitFieldModel<6, 1> tcie;\n  \
    \  BitFieldModel<5, 1> rxneie;\n    BitFieldModel<4, 1> idleie;\n    BitFieldModel<3,\
    \ 1> te;\n    BitFieldModel<2, 1> re;\n    BitFieldModel<1, 1> rwu;\n    BitFieldModel<0,\
    \ 1> sbk;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40004800\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> linen;\n\
    \    BitFieldModel<12, 2> stop;\n    BitFieldModel<11, 1> clken;\n    BitFieldModel<10,\
    \ 1> cpol;\n    BitFieldModel<9, 1> cpha;\n    BitFieldModel<8, 1> lbcl;\n   \
    \ BitFieldModel<6, 1> lbdie;\n    BitFieldModel<5, 1> lbdl;\n    BitFieldModel<0,\
    \ 4> add;\n  };\n};\n\nstruct cr3\n{\n  constexpr static uint32_t Address = 0x40004800\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11, 1> onebit;\n\
    \    BitFieldModel<10, 1> ctsie;\n    BitFieldModel<9, 1> ctse;\n    BitFieldModel<8,\
    \ 1> rtse;\n    BitFieldModel<7, 1> dmat;\n    BitFieldModel<6, 1> dmar;\n   \
    \ BitFieldModel<5, 1> scen;\n    BitFieldModel<4, 1> nack;\n    BitFieldModel<3,\
    \ 1> hdsel;\n    BitFieldModel<2, 1> irlp;\n    BitFieldModel<1, 1> iren;\n  \
    \  BitFieldModel<0, 1> eie;\n  };\n};\n\nstruct gtpr\n{\n  constexpr static uint32_t\
    \ Address = 0x40004800 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 8> gt;\n    BitFieldModel<0, 8> psc;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_USART3_H\
    \ */\n"
  name: USART3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_DAC_H\n#define DRAL_STM32F446_DAC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0x40007400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<29, 1> dmaudrie2;\n    BitFieldModel<28,\
    \ 1> dmaen2;\n    BitFieldModel<24, 4> mamp2;\n    BitFieldModel<22, 2> wave2;\n\
    \    BitFieldModel<19, 3> tsel2;\n    BitFieldModel<18, 1> ten2;\n    BitFieldModel<17,\
    \ 1> boff2;\n    BitFieldModel<16, 1> en2;\n    BitFieldModel<13, 1> dmaudrie1;\n\
    \    BitFieldModel<12, 1> dmaen1;\n    BitFieldModel<8, 4> mamp1;\n    BitFieldModel<6,\
    \ 2> wave1;\n    BitFieldModel<3, 3> tsel1;\n    BitFieldModel<2, 1> ten1;\n \
    \   BitFieldModel<1, 1> boff1;\n    BitFieldModel<0, 1> en1;\n  };\n};\n\nstruct\
    \ swtrigr\n{\n  constexpr static uint32_t Address = 0x40007400 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<1, 1> swtrig2;\n    BitFieldModel<0,\
    \ 1> swtrig1;\n  };\n};\n\nstruct dhr12r1\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> dacc1dhr;\n  };\n};\n\nstruct dhr12l1\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 12> dacc1dhr;\n  };\n};\n\nstruct dhr8r1\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> dacc1dhr;\n  };\n};\n\nstruct dhr12r2\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> dacc2dhr;\n  };\n};\n\nstruct dhr12l2\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 12> dacc2dhr;\n  };\n};\n\nstruct dhr8r2\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> dacc2dhr;\n  };\n};\n\nstruct dhr12rd\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 12> dacc2dhr;\n    BitFieldModel<0, 12> dacc1dhr;\n  };\n};\n\nstruct dhr12ld\n\
    {\n  constexpr static uint32_t Address = 0x40007400 + 0x0024;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<20, 12> dacc2dhr;\n    BitFieldModel<4,\
    \ 12> dacc1dhr;\n  };\n};\n\nstruct dhr8rd\n{\n  constexpr static uint32_t Address\
    \ = 0x40007400 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8,\
    \ 8> dacc2dhr;\n    BitFieldModel<0, 8> dacc1dhr;\n  };\n};\n\nstruct dor1\n{\n\
    \  constexpr static uint32_t Address = 0x40007400 + 0x002C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 12> dacc1dor;\n  };\n};\n\nstruct dor2\n\
    {\n  constexpr static uint32_t Address = 0x40007400 + 0x0030;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 12> dacc2dor;\n  };\n};\n\nstruct sr\n\
    {\n  constexpr static uint32_t Address = 0x40007400 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<29, 1> dmaudr2;\n    BitFieldModel<13,\
    \ 1> dmaudr1;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_DAC_H */\n"
  name: DAC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_FMPI2C_H\n#define DRAL_STM32F446_FMPI2C_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40006000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<23, 1> pecen;\n    BitFieldModel<22,\
    \ 1> alerten;\n    BitFieldModel<21, 1> smbden;\n    BitFieldModel<20, 1> smbhen;\n\
    \    BitFieldModel<19, 1> gcen;\n    BitFieldModel<17, 1> nostretch;\n    BitFieldModel<16,\
    \ 1> sbc;\n    BitFieldModel<15, 1> rxdmaen;\n    BitFieldModel<14, 1> txdmaen;\n\
    \    BitFieldModel<12, 1> anfoff;\n    BitFieldModel<8, 4> dnf;\n    BitFieldModel<7,\
    \ 1> errie;\n    BitFieldModel<6, 1> tcie;\n    BitFieldModel<5, 1> stopie;\n\
    \    BitFieldModel<4, 1> nackie;\n    BitFieldModel<3, 1> addrie;\n    BitFieldModel<2,\
    \ 1> rxie;\n    BitFieldModel<1, 1> txie;\n    BitFieldModel<0, 1> pe;\n  };\n\
    };\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40006000 + 0x0004;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> sadd0;\n    BitFieldModel<1,\
    \ 7> sadd7_1;\n    BitFieldModel<8, 2> sadd9_8;\n    BitFieldModel<10, 1> rd_wrn;\n\
    \    BitFieldModel<11, 1> add10;\n    BitFieldModel<12, 1> head10r;\n    BitFieldModel<13,\
    \ 1> start;\n    BitFieldModel<14, 1> stop;\n    BitFieldModel<15, 1> nack;\n\
    \    BitFieldModel<16, 8> nbytes;\n    BitFieldModel<24, 1> reload;\n    BitFieldModel<25,\
    \ 1> autoend;\n    BitFieldModel<26, 1> pecbyte;\n  };\n};\n\nstruct oar1\n{\n\
    \  constexpr static uint32_t Address = 0x40006000 + 0x0008;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 1> oa1_0;\n    BitFieldModel<1, 7> oa1_7_1;\n\
    \    BitFieldModel<8, 2> oa1_9_8;\n    BitFieldModel<10, 1> oa1mode;\n    BitFieldModel<15,\
    \ 1> oa1en;\n  };\n};\n\nstruct oar2\n{\n  constexpr static uint32_t Address =\
    \ 0x40006000 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1,\
    \ 7> oa2;\n    BitFieldModel<8, 3> oa2msk;\n    BitFieldModel<15, 1> oa2en;\n\
    \  };\n};\n\nstruct timingr\n{\n  constexpr static uint32_t Address = 0x40006000\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> scll;\n\
    \    BitFieldModel<8, 8> sclh;\n    BitFieldModel<16, 4> sdadel;\n    BitFieldModel<20,\
    \ 4> scldel;\n    BitFieldModel<28, 4> presc;\n  };\n};\n\nstruct timeoutr\n{\n\
    \  constexpr static uint32_t Address = 0x40006000 + 0x0014;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 12> timeouta;\n    BitFieldModel<12,\
    \ 1> tidle;\n    BitFieldModel<15, 1> timouten;\n    BitFieldModel<16, 12> timeoutb;\n\
    \    BitFieldModel<31, 1> texten;\n  };\n};\n\nstruct isr\n{\n  constexpr static\
    \ uint32_t Address = 0x40006000 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> txe;\n    BitFieldModel<1, 1> txis;\n    BitFieldModel<2,\
    \ 1> rxne;\n    BitFieldModel<3, 1> addr;\n    BitFieldModel<4, 1> nackf;\n  \
    \  BitFieldModel<5, 1> stopf;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<7,\
    \ 1> tcr;\n    BitFieldModel<8, 1> berr;\n    BitFieldModel<9, 1> arlo;\n    BitFieldModel<10,\
    \ 1> ovr;\n    BitFieldModel<11, 1> pecerr;\n    BitFieldModel<12, 1> timeout;\n\
    \    BitFieldModel<13, 1> alert;\n    BitFieldModel<15, 1> busy;\n    BitFieldModel<16,\
    \ 1> dir;\n    BitFieldModel<17, 7> addcode;\n  };\n};\n\nstruct icr\n{\n  constexpr\
    \ static uint32_t Address = 0x40006000 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<3, 1> addrcf;\n    BitFieldModel<4, 1> nackcf;\n    BitFieldModel<5,\
    \ 1> stopcf;\n    BitFieldModel<8, 1> berrcf;\n    BitFieldModel<9, 1> arlocf;\n\
    \    BitFieldModel<10, 1> ovrcf;\n    BitFieldModel<11, 1> peccf;\n    BitFieldModel<12,\
    \ 1> timoutcf;\n    BitFieldModel<13, 1> alertcf;\n  };\n};\n\nstruct pecr\n{\n\
    \  constexpr static uint32_t Address = 0x40006000 + 0x0020;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 8> pec;\n  };\n};\n\nstruct rxdr\n{\n\
    \  constexpr static uint32_t Address = 0x40006000 + 0x0024;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 8> rxdata;\n  };\n};\n\nstruct txdr\n\
    {\n  constexpr static uint32_t Address = 0x40006000 + 0x0028;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 8> txdata;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_FMPI2C_H */\n"
  name: FMPI2C
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_I2C3_H\n#define DRAL_STM32F446_I2C3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40005C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> swrst;\n    BitFieldModel<13,\
    \ 1> alert;\n    BitFieldModel<12, 1> pec;\n    BitFieldModel<11, 1> pos;\n  \
    \  BitFieldModel<10, 1> ack;\n    BitFieldModel<9, 1> stop;\n    BitFieldModel<8,\
    \ 1> start;\n    BitFieldModel<7, 1> nostretch;\n    BitFieldModel<6, 1> engc;\n\
    \    BitFieldModel<5, 1> enpec;\n    BitFieldModel<4, 1> enarp;\n    BitFieldModel<3,\
    \ 1> smbtype;\n    BitFieldModel<1, 1> smbus;\n    BitFieldModel<0, 1> pe;\n \
    \ };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40005C00 +\
    \ 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> last;\n\
    \    BitFieldModel<11, 1> dmaen;\n    BitFieldModel<10, 1> itbufen;\n    BitFieldModel<9,\
    \ 1> itevten;\n    BitFieldModel<8, 1> iterren;\n    BitFieldModel<0, 6> freq;\n\
    \  };\n};\n\nstruct oar1\n{\n  constexpr static uint32_t Address = 0x40005C00\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> addmode;\n\
    \    BitFieldModel<8, 2> add10;\n    BitFieldModel<1, 7> add7;\n    BitFieldModel<0,\
    \ 1> add0;\n  };\n};\n\nstruct oar2\n{\n  constexpr static uint32_t Address =\
    \ 0x40005C00 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1,\
    \ 7> add2;\n    BitFieldModel<0, 1> endual;\n  };\n};\n\nstruct dr\n{\n  constexpr\
    \ static uint32_t Address = 0x40005C00 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> dr;\n  };\n};\n\nstruct sr1\n{\n  constexpr static uint32_t\
    \ Address = 0x40005C00 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> smbalert;\n    BitFieldModel<14, 1> timeout;\n    BitFieldModel<12, 1> pecerr;\n\
    \    BitFieldModel<11, 1> ovr;\n    BitFieldModel<10, 1> af;\n    BitFieldModel<9,\
    \ 1> arlo;\n    BitFieldModel<8, 1> berr;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6,\
    \ 1> rxne;\n    BitFieldModel<4, 1> stopf;\n    BitFieldModel<3, 1> add10;\n \
    \   BitFieldModel<2, 1> btf;\n    BitFieldModel<1, 1> addr;\n    BitFieldModel<0,\
    \ 1> sb;\n  };\n};\n\nstruct sr2\n{\n  constexpr static uint32_t Address = 0x40005C00\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 8> pec;\n\
    \    BitFieldModel<7, 1> dualf;\n    BitFieldModel<6, 1> smbhost;\n    BitFieldModel<5,\
    \ 1> smbdefault;\n    BitFieldModel<4, 1> gencall;\n    BitFieldModel<2, 1> tra;\n\
    \    BitFieldModel<1, 1> busy;\n    BitFieldModel<0, 1> msl;\n  };\n};\n\nstruct\
    \ ccr\n{\n  constexpr static uint32_t Address = 0x40005C00 + 0x001C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> f_s;\n    BitFieldModel<14,\
    \ 1> duty;\n    BitFieldModel<0, 12> ccr;\n  };\n};\n\nstruct trise\n{\n  constexpr\
    \ static uint32_t Address = 0x40005C00 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 6> trise;\n  };\n};\n\nstruct fltr\n{\n  constexpr static\
    \ uint32_t Address = 0x40005C00 + 0x0024;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 4> dnf;\n    BitFieldModel<4, 1> anoff;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_I2C3_H */\n"
  name: I2C3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_I2C2_H\n#define DRAL_STM32F446_I2C2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40005800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> swrst;\n    BitFieldModel<13,\
    \ 1> alert;\n    BitFieldModel<12, 1> pec;\n    BitFieldModel<11, 1> pos;\n  \
    \  BitFieldModel<10, 1> ack;\n    BitFieldModel<9, 1> stop;\n    BitFieldModel<8,\
    \ 1> start;\n    BitFieldModel<7, 1> nostretch;\n    BitFieldModel<6, 1> engc;\n\
    \    BitFieldModel<5, 1> enpec;\n    BitFieldModel<4, 1> enarp;\n    BitFieldModel<3,\
    \ 1> smbtype;\n    BitFieldModel<1, 1> smbus;\n    BitFieldModel<0, 1> pe;\n \
    \ };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40005800 +\
    \ 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> last;\n\
    \    BitFieldModel<11, 1> dmaen;\n    BitFieldModel<10, 1> itbufen;\n    BitFieldModel<9,\
    \ 1> itevten;\n    BitFieldModel<8, 1> iterren;\n    BitFieldModel<0, 6> freq;\n\
    \  };\n};\n\nstruct oar1\n{\n  constexpr static uint32_t Address = 0x40005800\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> addmode;\n\
    \    BitFieldModel<8, 2> add10;\n    BitFieldModel<1, 7> add7;\n    BitFieldModel<0,\
    \ 1> add0;\n  };\n};\n\nstruct oar2\n{\n  constexpr static uint32_t Address =\
    \ 0x40005800 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1,\
    \ 7> add2;\n    BitFieldModel<0, 1> endual;\n  };\n};\n\nstruct dr\n{\n  constexpr\
    \ static uint32_t Address = 0x40005800 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> dr;\n  };\n};\n\nstruct sr1\n{\n  constexpr static uint32_t\
    \ Address = 0x40005800 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> smbalert;\n    BitFieldModel<14, 1> timeout;\n    BitFieldModel<12, 1> pecerr;\n\
    \    BitFieldModel<11, 1> ovr;\n    BitFieldModel<10, 1> af;\n    BitFieldModel<9,\
    \ 1> arlo;\n    BitFieldModel<8, 1> berr;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6,\
    \ 1> rxne;\n    BitFieldModel<4, 1> stopf;\n    BitFieldModel<3, 1> add10;\n \
    \   BitFieldModel<2, 1> btf;\n    BitFieldModel<1, 1> addr;\n    BitFieldModel<0,\
    \ 1> sb;\n  };\n};\n\nstruct sr2\n{\n  constexpr static uint32_t Address = 0x40005800\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 8> pec;\n\
    \    BitFieldModel<7, 1> dualf;\n    BitFieldModel<6, 1> smbhost;\n    BitFieldModel<5,\
    \ 1> smbdefault;\n    BitFieldModel<4, 1> gencall;\n    BitFieldModel<2, 1> tra;\n\
    \    BitFieldModel<1, 1> busy;\n    BitFieldModel<0, 1> msl;\n  };\n};\n\nstruct\
    \ ccr\n{\n  constexpr static uint32_t Address = 0x40005800 + 0x001C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> f_s;\n    BitFieldModel<14,\
    \ 1> duty;\n    BitFieldModel<0, 12> ccr;\n  };\n};\n\nstruct trise\n{\n  constexpr\
    \ static uint32_t Address = 0x40005800 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 6> trise;\n  };\n};\n\nstruct fltr\n{\n  constexpr static\
    \ uint32_t Address = 0x40005800 + 0x0024;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 4> dnf;\n    BitFieldModel<4, 1> anoff;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_I2C2_H */\n"
  name: I2C2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_I2C1_H\n#define DRAL_STM32F446_I2C1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40005400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> swrst;\n    BitFieldModel<13,\
    \ 1> alert;\n    BitFieldModel<12, 1> pec;\n    BitFieldModel<11, 1> pos;\n  \
    \  BitFieldModel<10, 1> ack;\n    BitFieldModel<9, 1> stop;\n    BitFieldModel<8,\
    \ 1> start;\n    BitFieldModel<7, 1> nostretch;\n    BitFieldModel<6, 1> engc;\n\
    \    BitFieldModel<5, 1> enpec;\n    BitFieldModel<4, 1> enarp;\n    BitFieldModel<3,\
    \ 1> smbtype;\n    BitFieldModel<1, 1> smbus;\n    BitFieldModel<0, 1> pe;\n \
    \ };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40005400 +\
    \ 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> last;\n\
    \    BitFieldModel<11, 1> dmaen;\n    BitFieldModel<10, 1> itbufen;\n    BitFieldModel<9,\
    \ 1> itevten;\n    BitFieldModel<8, 1> iterren;\n    BitFieldModel<0, 6> freq;\n\
    \  };\n};\n\nstruct oar1\n{\n  constexpr static uint32_t Address = 0x40005400\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> addmode;\n\
    \    BitFieldModel<8, 2> add10;\n    BitFieldModel<1, 7> add7;\n    BitFieldModel<0,\
    \ 1> add0;\n  };\n};\n\nstruct oar2\n{\n  constexpr static uint32_t Address =\
    \ 0x40005400 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1,\
    \ 7> add2;\n    BitFieldModel<0, 1> endual;\n  };\n};\n\nstruct dr\n{\n  constexpr\
    \ static uint32_t Address = 0x40005400 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> dr;\n  };\n};\n\nstruct sr1\n{\n  constexpr static uint32_t\
    \ Address = 0x40005400 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> smbalert;\n    BitFieldModel<14, 1> timeout;\n    BitFieldModel<12, 1> pecerr;\n\
    \    BitFieldModel<11, 1> ovr;\n    BitFieldModel<10, 1> af;\n    BitFieldModel<9,\
    \ 1> arlo;\n    BitFieldModel<8, 1> berr;\n    BitFieldModel<7, 1> txe;\n    BitFieldModel<6,\
    \ 1> rxne;\n    BitFieldModel<4, 1> stopf;\n    BitFieldModel<3, 1> add10;\n \
    \   BitFieldModel<2, 1> btf;\n    BitFieldModel<1, 1> addr;\n    BitFieldModel<0,\
    \ 1> sb;\n  };\n};\n\nstruct sr2\n{\n  constexpr static uint32_t Address = 0x40005400\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 8> pec;\n\
    \    BitFieldModel<7, 1> dualf;\n    BitFieldModel<6, 1> smbhost;\n    BitFieldModel<5,\
    \ 1> smbdefault;\n    BitFieldModel<4, 1> gencall;\n    BitFieldModel<2, 1> tra;\n\
    \    BitFieldModel<1, 1> busy;\n    BitFieldModel<0, 1> msl;\n  };\n};\n\nstruct\
    \ ccr\n{\n  constexpr static uint32_t Address = 0x40005400 + 0x001C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> f_s;\n    BitFieldModel<14,\
    \ 1> duty;\n    BitFieldModel<0, 12> ccr;\n  };\n};\n\nstruct trise\n{\n  constexpr\
    \ static uint32_t Address = 0x40005400 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 6> trise;\n  };\n};\n\nstruct fltr\n{\n  constexpr static\
    \ uint32_t Address = 0x40005400 + 0x0024;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 4> dnf;\n    BitFieldModel<4, 1> anoff;\n  };\n};\n\n}\n\
    \n#endif /* DRAL_STM32F446_I2C1_H */\n"
  name: I2C1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_IWDG_H\n#define DRAL_STM32F446_IWDG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ kr\n{\n  constexpr static uint32_t Address = 0x40003000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> key;\n  };\n};\n\nstruct pr\n\
    {\n  constexpr static uint32_t Address = 0x40003000 + 0x0004;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 3> pr;\n  };\n};\n\nstruct rlr\n{\n\
    \  constexpr static uint32_t Address = 0x40003000 + 0x0008;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 12> rl;\n  };\n};\n\nstruct sr\n{\n \
    \ constexpr static uint32_t Address = 0x40003000 + 0x000C;\n  union\n  {\n   \
    \ uint32_t value;\n    BitFieldModel<1, 1> rvu;\n    BitFieldModel<0, 1> pvu;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_IWDG_H */\n"
  name: IWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_WWDG_H\n#define DRAL_STM32F446_WWDG_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0x40002C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<7, 1> wdga;\n    BitFieldModel<0,\
    \ 7> t;\n  };\n};\n\nstruct cfr\n{\n  constexpr static uint32_t Address = 0x40002C00\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9, 1> ewi;\n\
    \    BitFieldModel<8, 1> wdgtb1;\n    BitFieldModel<7, 1> wdgtb0;\n    BitFieldModel<0,\
    \ 7> w;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40002C00\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> ewif;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_WWDG_H */\n"
  name: WWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_RTC_H\n#define DRAL_STM32F446_RTC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ tr\n{\n  constexpr static uint32_t Address = 0x40002800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<22, 1> pm;\n    BitFieldModel<20,\
    \ 2> ht;\n    BitFieldModel<16, 4> hu;\n    BitFieldModel<12, 3> mnt;\n    BitFieldModel<8,\
    \ 4> mnu;\n    BitFieldModel<4, 3> st;\n    BitFieldModel<0, 4> su;\n  };\n};\n\
    \nstruct dr\n{\n  constexpr static uint32_t Address = 0x40002800 + 0x0004;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<20, 4> yt;\n    BitFieldModel<16,\
    \ 4> yu;\n    BitFieldModel<13, 3> wdu;\n    BitFieldModel<12, 1> mt;\n    BitFieldModel<8,\
    \ 4> mu;\n    BitFieldModel<4, 2> dt;\n    BitFieldModel<0, 4> du;\n  };\n};\n\
    \nstruct cr\n{\n  constexpr static uint32_t Address = 0x40002800 + 0x0008;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<23, 1> coe;\n    BitFieldModel<21,\
    \ 2> osel;\n    BitFieldModel<20, 1> pol;\n    BitFieldModel<18, 1> bkp;\n   \
    \ BitFieldModel<17, 1> sub1h;\n    BitFieldModel<16, 1> add1h;\n    BitFieldModel<15,\
    \ 1> tsie;\n    BitFieldModel<14, 1> wutie;\n    BitFieldModel<13, 1> alrbie;\n\
    \    BitFieldModel<12, 1> alraie;\n    BitFieldModel<11, 1> tse;\n    BitFieldModel<10,\
    \ 1> wute;\n    BitFieldModel<9, 1> alrbe;\n    BitFieldModel<8, 1> alrae;\n \
    \   BitFieldModel<7, 1> dce;\n    BitFieldModel<6, 1> fmt;\n    BitFieldModel<4,\
    \ 1> refckon;\n    BitFieldModel<3, 1> tsedge;\n    BitFieldModel<0, 3> wcksel;\n\
    \  };\n};\n\nstruct isr\n{\n  constexpr static uint32_t Address = 0x40002800 +\
    \ 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> alrawf;\n\
    \    BitFieldModel<1, 1> alrbwf;\n    BitFieldModel<2, 1> wutwf;\n    BitFieldModel<3,\
    \ 1> shpf;\n    BitFieldModel<4, 1> inits;\n    BitFieldModel<5, 1> rsf;\n   \
    \ BitFieldModel<6, 1> initf;\n    BitFieldModel<7, 1> init;\n    BitFieldModel<8,\
    \ 1> alraf;\n    BitFieldModel<9, 1> alrbf;\n    BitFieldModel<10, 1> wutf;\n\
    \    BitFieldModel<11, 1> tsf;\n    BitFieldModel<12, 1> tsovf;\n    BitFieldModel<13,\
    \ 1> tamp1f;\n    BitFieldModel<14, 1> tamp2f;\n    BitFieldModel<16, 1> recalpf;\n\
    \  };\n};\n\nstruct prer\n{\n  constexpr static uint32_t Address = 0x40002800\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 7> prediv_a;\n\
    \    BitFieldModel<0, 15> prediv_s;\n  };\n};\n\nstruct wutr\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> wut;\n  };\n};\n\nstruct calibr\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> dcs;\n    BitFieldModel<0, 5> dc;\n  };\n};\n\nstruct\
    \ alrmar\n{\n  constexpr static uint32_t Address = 0x40002800 + 0x001C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<31, 1> msk4;\n    BitFieldModel<30,\
    \ 1> wdsel;\n    BitFieldModel<28, 2> dt;\n    BitFieldModel<24, 4> du;\n    BitFieldModel<23,\
    \ 1> msk3;\n    BitFieldModel<22, 1> pm;\n    BitFieldModel<20, 2> ht;\n    BitFieldModel<16,\
    \ 4> hu;\n    BitFieldModel<15, 1> msk2;\n    BitFieldModel<12, 3> mnt;\n    BitFieldModel<8,\
    \ 4> mnu;\n    BitFieldModel<7, 1> msk1;\n    BitFieldModel<4, 3> st;\n    BitFieldModel<0,\
    \ 4> su;\n  };\n};\n\nstruct alrmbr\n{\n  constexpr static uint32_t Address =\
    \ 0x40002800 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31,\
    \ 1> msk4;\n    BitFieldModel<30, 1> wdsel;\n    BitFieldModel<28, 2> dt;\n  \
    \  BitFieldModel<24, 4> du;\n    BitFieldModel<23, 1> msk3;\n    BitFieldModel<22,\
    \ 1> pm;\n    BitFieldModel<20, 2> ht;\n    BitFieldModel<16, 4> hu;\n    BitFieldModel<15,\
    \ 1> msk2;\n    BitFieldModel<12, 3> mnt;\n    BitFieldModel<8, 4> mnu;\n    BitFieldModel<7,\
    \ 1> msk1;\n    BitFieldModel<4, 3> st;\n    BitFieldModel<0, 4> su;\n  };\n};\n\
    \nstruct wpr\n{\n  constexpr static uint32_t Address = 0x40002800 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> key;\n  };\n};\n\n\
    struct ssr\n{\n  constexpr static uint32_t Address = 0x40002800 + 0x0028;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> ss;\n  };\n};\n\nstruct shiftr\n\
    {\n  constexpr static uint32_t Address = 0x40002800 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<31, 1> add1s;\n    BitFieldModel<0, 15>\
    \ subfs;\n  };\n};\n\nstruct tstr\n{\n  constexpr static uint32_t Address = 0x40002800\
    \ + 0x0030;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<18, 1> alarmouttype;\n\
    \    BitFieldModel<17, 1> tsinsel;\n    BitFieldModel<16, 1> tamp1insel;\n   \
    \ BitFieldModel<2, 1> tampie;\n    BitFieldModel<1, 1> tamp1trg;\n    BitFieldModel<0,\
    \ 1> tamp1e;\n  };\n};\n\nstruct tsdr\n{\n  constexpr static uint32_t Address\
    \ = 0x40002800 + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<13,\
    \ 3> wdu;\n    BitFieldModel<12, 1> mt;\n    BitFieldModel<8, 4> mu;\n    BitFieldModel<4,\
    \ 2> dt;\n    BitFieldModel<0, 4> du;\n  };\n};\n\nstruct tsssr\n{\n  constexpr\
    \ static uint32_t Address = 0x40002800 + 0x0038;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ss;\n  };\n};\n\nstruct calr\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x003C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> calp;\n    BitFieldModel<14, 1> calw8;\n    BitFieldModel<13,\
    \ 1> calw16;\n    BitFieldModel<0, 9> calm;\n  };\n};\n\nstruct tafcr\n{\n  constexpr\
    \ static uint32_t Address = 0x40002800 + 0x0040;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<18, 1> alarmouttype;\n    BitFieldModel<17, 1> tsinsel;\n \
    \   BitFieldModel<16, 1> tamp1insel;\n    BitFieldModel<15, 1> tamppudis;\n  \
    \  BitFieldModel<13, 2> tampprch;\n    BitFieldModel<11, 2> tampflt;\n    BitFieldModel<8,\
    \ 3> tampfreq;\n    BitFieldModel<7, 1> tampts;\n    BitFieldModel<4, 1> tamp2trg;\n\
    \    BitFieldModel<3, 1> tamp2e;\n    BitFieldModel<2, 1> tampie;\n    BitFieldModel<1,\
    \ 1> tamp1trg;\n    BitFieldModel<0, 1> tamp1e;\n  };\n};\n\nstruct alrmassr\n\
    {\n  constexpr static uint32_t Address = 0x40002800 + 0x0044;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<24, 4> maskss;\n    BitFieldModel<0, 15>\
    \ ss;\n  };\n};\n\nstruct alrmbssr\n{\n  constexpr static uint32_t Address = 0x40002800\
    \ + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 4> maskss;\n\
    \    BitFieldModel<0, 15> ss;\n  };\n};\n\nstruct bkp0r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0050;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp1r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0054;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp2r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0058;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp3r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x005C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp4r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0060;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp5r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0064;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp6r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0068;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp7r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x006C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp8r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0070;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp9r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0074;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp10r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0078;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp11r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x007C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp12r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0080;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp13r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0084;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp14r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0088;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp15r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x008C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp16r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0090;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp17r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0094;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp18r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x0098;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\nstruct bkp19r\n{\n  constexpr static\
    \ uint32_t Address = 0x40002800 + 0x009C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> bkp;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_RTC_H\
    \ */\n"
  name: RTC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_UART4_H\n#define DRAL_STM32F446_UART4_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40004C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 1> lbd;\n    BitFieldModel<7,\
    \ 1> txe;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<5, 1> rxne;\n    BitFieldModel<4,\
    \ 1> idle;\n    BitFieldModel<3, 1> ore;\n    BitFieldModel<2, 1> nf;\n    BitFieldModel<1,\
    \ 1> fe;\n    BitFieldModel<0, 1> pe;\n  };\n};\n\nstruct dr\n{\n  constexpr static\
    \ uint32_t Address = 0x40004C00 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 9> dr;\n  };\n};\n\nstruct brr\n{\n  constexpr static uint32_t\
    \ Address = 0x40004C00 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 12> div_mantissa;\n    BitFieldModel<0, 4> div_fraction;\n  };\n};\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40004C00 + 0x000C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> over8;\n    BitFieldModel<13,\
    \ 1> ue;\n    BitFieldModel<12, 1> m;\n    BitFieldModel<11, 1> wake;\n    BitFieldModel<10,\
    \ 1> pce;\n    BitFieldModel<9, 1> ps;\n    BitFieldModel<8, 1> peie;\n    BitFieldModel<7,\
    \ 1> txeie;\n    BitFieldModel<6, 1> tcie;\n    BitFieldModel<5, 1> rxneie;\n\
    \    BitFieldModel<4, 1> idleie;\n    BitFieldModel<3, 1> te;\n    BitFieldModel<2,\
    \ 1> re;\n    BitFieldModel<1, 1> rwu;\n    BitFieldModel<0, 1> sbk;\n  };\n};\n\
    \nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40004C00 + 0x0010;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> linen;\n    BitFieldModel<12,\
    \ 2> stop;\n    BitFieldModel<6, 1> lbdie;\n    BitFieldModel<5, 1> lbdl;\n  \
    \  BitFieldModel<0, 4> add;\n  };\n};\n\nstruct cr3\n{\n  constexpr static uint32_t\
    \ Address = 0x40004C00 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> onebit;\n    BitFieldModel<10, 1> ctsie;\n    BitFieldModel<9, 1> ctse;\n\
    \    BitFieldModel<8, 1> rtse;\n    BitFieldModel<7, 1> dmat;\n    BitFieldModel<6,\
    \ 1> dmar;\n    BitFieldModel<3, 1> hdsel;\n    BitFieldModel<2, 1> irlp;\n  \
    \  BitFieldModel<1, 1> iren;\n    BitFieldModel<0, 1> eie;\n  };\n};\n\n}\n\n\
    #endif /* DRAL_STM32F446_UART4_H */\n"
  name: UART4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_UART5_H\n#define DRAL_STM32F446_UART5_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ sr\n{\n  constexpr static uint32_t Address = 0x40005000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 1> lbd;\n    BitFieldModel<7,\
    \ 1> txe;\n    BitFieldModel<6, 1> tc;\n    BitFieldModel<5, 1> rxne;\n    BitFieldModel<4,\
    \ 1> idle;\n    BitFieldModel<3, 1> ore;\n    BitFieldModel<2, 1> nf;\n    BitFieldModel<1,\
    \ 1> fe;\n    BitFieldModel<0, 1> pe;\n  };\n};\n\nstruct dr\n{\n  constexpr static\
    \ uint32_t Address = 0x40005000 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 9> dr;\n  };\n};\n\nstruct brr\n{\n  constexpr static uint32_t\
    \ Address = 0x40005000 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 12> div_mantissa;\n    BitFieldModel<0, 4> div_fraction;\n  };\n};\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40005000 + 0x000C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> over8;\n    BitFieldModel<13,\
    \ 1> ue;\n    BitFieldModel<12, 1> m;\n    BitFieldModel<11, 1> wake;\n    BitFieldModel<10,\
    \ 1> pce;\n    BitFieldModel<9, 1> ps;\n    BitFieldModel<8, 1> peie;\n    BitFieldModel<7,\
    \ 1> txeie;\n    BitFieldModel<6, 1> tcie;\n    BitFieldModel<5, 1> rxneie;\n\
    \    BitFieldModel<4, 1> idleie;\n    BitFieldModel<3, 1> te;\n    BitFieldModel<2,\
    \ 1> re;\n    BitFieldModel<1, 1> rwu;\n    BitFieldModel<0, 1> sbk;\n  };\n};\n\
    \nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40005000 + 0x0010;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> linen;\n    BitFieldModel<12,\
    \ 2> stop;\n    BitFieldModel<6, 1> lbdie;\n    BitFieldModel<5, 1> lbdl;\n  \
    \  BitFieldModel<0, 4> add;\n  };\n};\n\nstruct cr3\n{\n  constexpr static uint32_t\
    \ Address = 0x40005000 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> onebit;\n    BitFieldModel<10, 1> ctsie;\n    BitFieldModel<9, 1> ctse;\n\
    \    BitFieldModel<8, 1> rtse;\n    BitFieldModel<7, 1> dmat;\n    BitFieldModel<6,\
    \ 1> dmar;\n    BitFieldModel<3, 1> hdsel;\n    BitFieldModel<2, 1> irlp;\n  \
    \  BitFieldModel<1, 1> iren;\n    BitFieldModel<0, 1> eie;\n  };\n};\n\n}\n\n\
    #endif /* DRAL_STM32F446_UART5_H */\n"
  name: UART5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_C_ADC_H\n#define DRAL_STM32F446_C_ADC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ csr\n{\n  constexpr static uint32_t Address = 0x40012300 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<21, 1> ovr3;\n    BitFieldModel<20,\
    \ 1> strt3;\n    BitFieldModel<19, 1> jstrt3;\n    BitFieldModel<18, 1> jeoc3;\n\
    \    BitFieldModel<17, 1> eoc3;\n    BitFieldModel<16, 1> awd3;\n    BitFieldModel<13,\
    \ 1> ovr2;\n    BitFieldModel<12, 1> strt2;\n    BitFieldModel<11, 1> jstrt2;\n\
    \    BitFieldModel<10, 1> jeoc2;\n    BitFieldModel<9, 1> eoc2;\n    BitFieldModel<8,\
    \ 1> awd2;\n    BitFieldModel<5, 1> ovr1;\n    BitFieldModel<4, 1> strt1;\n  \
    \  BitFieldModel<3, 1> jstrt1;\n    BitFieldModel<2, 1> jeoc1;\n    BitFieldModel<1,\
    \ 1> eoc1;\n    BitFieldModel<0, 1> awd1;\n  };\n};\n\nstruct ccr\n{\n  constexpr\
    \ static uint32_t Address = 0x40012300 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<23, 1> tsvrefe;\n    BitFieldModel<22, 1> vbate;\n    BitFieldModel<16,\
    \ 2> adcpre;\n    BitFieldModel<14, 2> dma;\n    BitFieldModel<13, 1> dds;\n \
    \   BitFieldModel<8, 4> delay;\n    BitFieldModel<0, 5> mult;\n  };\n};\n\nstruct\
    \ cdr\n{\n  constexpr static uint32_t Address = 0x40012300 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> data2;\n    BitFieldModel<0,\
    \ 16> data1;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_C_ADC_H */\n"
  name: C_ADC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM1_H\n#define DRAL_STM32F446_TIM1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40010000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<5, 2> cms;\n    BitFieldModel<4, 1> dir;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> ois4;\n\
    \    BitFieldModel<13, 1> ois3n;\n    BitFieldModel<12, 1> ois3;\n    BitFieldModel<11,\
    \ 1> ois2n;\n    BitFieldModel<10, 1> ois2;\n    BitFieldModel<9, 1> ois1n;\n\
    \    BitFieldModel<8, 1> ois1;\n    BitFieldModel<7, 1> ti1s;\n    BitFieldModel<4,\
    \ 3> mms;\n    BitFieldModel<3, 1> ccds;\n    BitFieldModel<2, 1> ccus;\n    BitFieldModel<0,\
    \ 1> ccpc;\n  };\n};\n\nstruct smcr\n{\n  constexpr static uint32_t Address =\
    \ 0x40010000 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> etp;\n    BitFieldModel<14, 1> ece;\n    BitFieldModel<12, 2> etps;\n   \
    \ BitFieldModel<8, 4> etf;\n    BitFieldModel<7, 1> msm;\n    BitFieldModel<4,\
    \ 3> ts;\n    BitFieldModel<0, 3> sms;\n  };\n};\n\nstruct dier\n{\n  constexpr\
    \ static uint32_t Address = 0x40010000 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<14, 1> tde;\n    BitFieldModel<13, 1> comde;\n    BitFieldModel<12,\
    \ 1> cc4de;\n    BitFieldModel<11, 1> cc3de;\n    BitFieldModel<10, 1> cc2de;\n\
    \    BitFieldModel<9, 1> cc1de;\n    BitFieldModel<8, 1> ude;\n    BitFieldModel<6,\
    \ 1> tie;\n    BitFieldModel<4, 1> cc4ie;\n    BitFieldModel<3, 1> cc3ie;\n  \
    \  BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n    BitFieldModel<7, 1> bie;\n    BitFieldModel<5, 1> comie;\n  };\n\
    };\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40010000 + 0x0010;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> cc4of;\n    BitFieldModel<11,\
    \ 1> cc3of;\n    BitFieldModel<10, 1> cc2of;\n    BitFieldModel<9, 1> cc1of;\n\
    \    BitFieldModel<7, 1> bif;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<5,\
    \ 1> comif;\n    BitFieldModel<4, 1> cc4if;\n    BitFieldModel<3, 1> cc3if;\n\
    \    BitFieldModel<2, 1> cc2if;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0,\
    \ 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> bg;\n\
    \    BitFieldModel<6, 1> tg;\n    BitFieldModel<5, 1> comg;\n    BitFieldModel<4,\
    \ 1> cc4g;\n    BitFieldModel<3, 1> cc3g;\n    BitFieldModel<2, 1> cc2g;\n   \
    \ BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0, 1> ug;\n  };\n};\n\nstruct ccmr1_output\n\
    {\n  constexpr static uint32_t Address = 0x40010000 + 0x0018;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<15, 1> oc2ce;\n    BitFieldModel<12, 3>\
    \ oc2m;\n    BitFieldModel<11, 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n  \
    \  BitFieldModel<8, 2> cc2s;\n    BitFieldModel<7, 1> oc1ce;\n    BitFieldModel<4,\
    \ 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n \
    \   BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr1_input\n{\n  constexpr\
    \ static uint32_t Address = 0x40010000 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<12, 4> ic2f;\n    BitFieldModel<10, 2> ic2pcs;\n    BitFieldModel<8,\
    \ 2> cc2s;\n    BitFieldModel<4, 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n  \
    \  BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr2_output\n{\n  constexpr\
    \ static uint32_t Address = 0x40010000 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> oc4ce;\n    BitFieldModel<12, 3> oc4m;\n    BitFieldModel<11,\
    \ 1> oc4pe;\n    BitFieldModel<10, 1> oc4fe;\n    BitFieldModel<8, 2> cc4s;\n\
    \    BitFieldModel<7, 1> oc3ce;\n    BitFieldModel<4, 3> oc3m;\n    BitFieldModel<3,\
    \ 1> oc3pe;\n    BitFieldModel<2, 1> oc3fe;\n    BitFieldModel<0, 2> cc3s;\n \
    \ };\n};\n\nstruct ccmr2_input\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> ic4f;\n\
    \    BitFieldModel<10, 2> ic4psc;\n    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<4,\
    \ 4> ic3f;\n    BitFieldModel<2, 2> ic3psc;\n    BitFieldModel<0, 2> cc3s;\n \
    \ };\n};\n\nstruct ccer\n{\n  constexpr static uint32_t Address = 0x40010000 +\
    \ 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<13, 1> cc4p;\n\
    \    BitFieldModel<12, 1> cc4e;\n    BitFieldModel<11, 1> cc3np;\n    BitFieldModel<10,\
    \ 1> cc3ne;\n    BitFieldModel<9, 1> cc3p;\n    BitFieldModel<8, 1> cc3e;\n  \
    \  BitFieldModel<7, 1> cc2np;\n    BitFieldModel<6, 1> cc2ne;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<2, 1> cc1ne;\n    BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0,\
    \ 1> cc1e;\n  };\n};\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n\
    \  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address = 0x40010000 +\
    \ 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n\
    \  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40010000 +\
    \ 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> arr;\n\
    \  };\n};\n\nstruct ccr1\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n\
    \  };\n};\n\nstruct ccr2\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0038;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr2;\n\
    \  };\n};\n\nstruct ccr3\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr3;\n\
    \  };\n};\n\nstruct ccr4\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0040;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr4;\n\
    \  };\n};\n\nstruct dcr\n{\n  constexpr static uint32_t Address = 0x40010000 +\
    \ 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 5> dbl;\n \
    \   BitFieldModel<0, 5> dba;\n  };\n};\n\nstruct dmar\n{\n  constexpr static uint32_t\
    \ Address = 0x40010000 + 0x004C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> dmab;\n  };\n};\n\nstruct rcr\n{\n  constexpr static uint32_t Address =\
    \ 0x40010000 + 0x0030;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> rep;\n  };\n};\n\nstruct bdtr\n{\n  constexpr static uint32_t Address = 0x40010000\
    \ + 0x0044;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> moe;\n\
    \    BitFieldModel<14, 1> aoe;\n    BitFieldModel<13, 1> bkp;\n    BitFieldModel<12,\
    \ 1> bke;\n    BitFieldModel<11, 1> ossr;\n    BitFieldModel<10, 1> ossi;\n  \
    \  BitFieldModel<8, 2> lock;\n    BitFieldModel<0, 8> dtg;\n  };\n};\n\n}\n\n\
    #endif /* DRAL_STM32F446_TIM1_H */\n"
  name: TIM1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM8_H\n#define DRAL_STM32F446_TIM8_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40010400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<5, 2> cms;\n    BitFieldModel<4, 1> dir;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> ois4;\n\
    \    BitFieldModel<13, 1> ois3n;\n    BitFieldModel<12, 1> ois3;\n    BitFieldModel<11,\
    \ 1> ois2n;\n    BitFieldModel<10, 1> ois2;\n    BitFieldModel<9, 1> ois1n;\n\
    \    BitFieldModel<8, 1> ois1;\n    BitFieldModel<7, 1> ti1s;\n    BitFieldModel<4,\
    \ 3> mms;\n    BitFieldModel<3, 1> ccds;\n    BitFieldModel<2, 1> ccus;\n    BitFieldModel<0,\
    \ 1> ccpc;\n  };\n};\n\nstruct smcr\n{\n  constexpr static uint32_t Address =\
    \ 0x40010400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15,\
    \ 1> etp;\n    BitFieldModel<14, 1> ece;\n    BitFieldModel<12, 2> etps;\n   \
    \ BitFieldModel<8, 4> etf;\n    BitFieldModel<7, 1> msm;\n    BitFieldModel<4,\
    \ 3> ts;\n    BitFieldModel<0, 3> sms;\n  };\n};\n\nstruct dier\n{\n  constexpr\
    \ static uint32_t Address = 0x40010400 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<14, 1> tde;\n    BitFieldModel<13, 1> comde;\n    BitFieldModel<12,\
    \ 1> cc4de;\n    BitFieldModel<11, 1> cc3de;\n    BitFieldModel<10, 1> cc2de;\n\
    \    BitFieldModel<9, 1> cc1de;\n    BitFieldModel<8, 1> ude;\n    BitFieldModel<6,\
    \ 1> tie;\n    BitFieldModel<4, 1> cc4ie;\n    BitFieldModel<3, 1> cc3ie;\n  \
    \  BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n    BitFieldModel<7, 1> bie;\n    BitFieldModel<5, 1> comie;\n  };\n\
    };\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40010400 + 0x0010;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> cc4of;\n    BitFieldModel<11,\
    \ 1> cc3of;\n    BitFieldModel<10, 1> cc2of;\n    BitFieldModel<9, 1> cc1of;\n\
    \    BitFieldModel<7, 1> bif;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<5,\
    \ 1> comif;\n    BitFieldModel<4, 1> cc4if;\n    BitFieldModel<3, 1> cc3if;\n\
    \    BitFieldModel<2, 1> cc2if;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0,\
    \ 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> bg;\n\
    \    BitFieldModel<6, 1> tg;\n    BitFieldModel<5, 1> comg;\n    BitFieldModel<4,\
    \ 1> cc4g;\n    BitFieldModel<3, 1> cc3g;\n    BitFieldModel<2, 1> cc2g;\n   \
    \ BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0, 1> ug;\n  };\n};\n\nstruct ccmr1_output\n\
    {\n  constexpr static uint32_t Address = 0x40010400 + 0x0018;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<15, 1> oc2ce;\n    BitFieldModel<12, 3>\
    \ oc2m;\n    BitFieldModel<11, 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n  \
    \  BitFieldModel<8, 2> cc2s;\n    BitFieldModel<7, 1> oc1ce;\n    BitFieldModel<4,\
    \ 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n \
    \   BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr1_input\n{\n  constexpr\
    \ static uint32_t Address = 0x40010400 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<12, 4> ic2f;\n    BitFieldModel<10, 2> ic2pcs;\n    BitFieldModel<8,\
    \ 2> cc2s;\n    BitFieldModel<4, 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n  \
    \  BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr2_output\n{\n  constexpr\
    \ static uint32_t Address = 0x40010400 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> oc4ce;\n    BitFieldModel<12, 3> oc4m;\n    BitFieldModel<11,\
    \ 1> oc4pe;\n    BitFieldModel<10, 1> oc4fe;\n    BitFieldModel<8, 2> cc4s;\n\
    \    BitFieldModel<7, 1> oc3ce;\n    BitFieldModel<4, 3> oc3m;\n    BitFieldModel<3,\
    \ 1> oc3pe;\n    BitFieldModel<2, 1> oc3fe;\n    BitFieldModel<0, 2> cc3s;\n \
    \ };\n};\n\nstruct ccmr2_input\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> ic4f;\n\
    \    BitFieldModel<10, 2> ic4psc;\n    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<4,\
    \ 4> ic3f;\n    BitFieldModel<2, 2> ic3psc;\n    BitFieldModel<0, 2> cc3s;\n \
    \ };\n};\n\nstruct ccer\n{\n  constexpr static uint32_t Address = 0x40010400 +\
    \ 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<13, 1> cc4p;\n\
    \    BitFieldModel<12, 1> cc4e;\n    BitFieldModel<11, 1> cc3np;\n    BitFieldModel<10,\
    \ 1> cc3ne;\n    BitFieldModel<9, 1> cc3p;\n    BitFieldModel<8, 1> cc3e;\n  \
    \  BitFieldModel<7, 1> cc2np;\n    BitFieldModel<6, 1> cc2ne;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<2, 1> cc1ne;\n    BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0,\
    \ 1> cc1e;\n  };\n};\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n\
    \  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address = 0x40010400 +\
    \ 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n\
    \  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40010400 +\
    \ 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> arr;\n\
    \  };\n};\n\nstruct ccr1\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n\
    \  };\n};\n\nstruct ccr2\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0038;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr2;\n\
    \  };\n};\n\nstruct ccr3\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr3;\n\
    \  };\n};\n\nstruct ccr4\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0040;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ccr4;\n\
    \  };\n};\n\nstruct dcr\n{\n  constexpr static uint32_t Address = 0x40010400 +\
    \ 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 5> dbl;\n \
    \   BitFieldModel<0, 5> dba;\n  };\n};\n\nstruct dmar\n{\n  constexpr static uint32_t\
    \ Address = 0x40010400 + 0x004C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> dmab;\n  };\n};\n\nstruct rcr\n{\n  constexpr static uint32_t Address =\
    \ 0x40010400 + 0x0030;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> rep;\n  };\n};\n\nstruct bdtr\n{\n  constexpr static uint32_t Address = 0x40010400\
    \ + 0x0044;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> moe;\n\
    \    BitFieldModel<14, 1> aoe;\n    BitFieldModel<13, 1> bkp;\n    BitFieldModel<12,\
    \ 1> bke;\n    BitFieldModel<11, 1> ossr;\n    BitFieldModel<10, 1> ossi;\n  \
    \  BitFieldModel<8, 2> lock;\n    BitFieldModel<0, 8> dtg;\n  };\n};\n\n}\n\n\
    #endif /* DRAL_STM32F446_TIM8_H */\n"
  name: TIM8
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM2_H\n#define DRAL_STM32F446_TIM2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40000000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<5, 2> cms;\n    BitFieldModel<4, 1> dir;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40000000\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> ti1s;\n\
    \    BitFieldModel<4, 3> mms;\n    BitFieldModel<3, 1> ccds;\n  };\n};\n\nstruct\
    \ smcr\n{\n  constexpr static uint32_t Address = 0x40000000 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> etp;\n    BitFieldModel<14,\
    \ 1> ece;\n    BitFieldModel<12, 2> etps;\n    BitFieldModel<8, 4> etf;\n    BitFieldModel<7,\
    \ 1> msm;\n    BitFieldModel<4, 3> ts;\n    BitFieldModel<0, 3> sms;\n  };\n};\n\
    \nstruct dier\n{\n  constexpr static uint32_t Address = 0x40000000 + 0x000C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> tde;\n    BitFieldModel<12,\
    \ 1> cc4de;\n    BitFieldModel<11, 1> cc3de;\n    BitFieldModel<10, 1> cc2de;\n\
    \    BitFieldModel<9, 1> cc1de;\n    BitFieldModel<8, 1> ude;\n    BitFieldModel<6,\
    \ 1> tie;\n    BitFieldModel<4, 1> cc4ie;\n    BitFieldModel<3, 1> cc3ie;\n  \
    \  BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40000000\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> cc4of;\n\
    \    BitFieldModel<11, 1> cc3of;\n    BitFieldModel<10, 1> cc2of;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<4, 1> cc4if;\n  \
    \  BitFieldModel<3, 1> cc3if;\n    BitFieldModel<2, 1> cc2if;\n    BitFieldModel<1,\
    \ 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr\
    \ static uint32_t Address = 0x40000000 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> tg;\n    BitFieldModel<4, 1> cc4g;\n    BitFieldModel<3,\
    \ 1> cc3g;\n    BitFieldModel<2, 1> cc2g;\n    BitFieldModel<1, 1> cc1g;\n   \
    \ BitFieldModel<0, 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static\
    \ uint32_t Address = 0x40000000 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> oc2ce;\n    BitFieldModel<12, 3> oc2m;\n    BitFieldModel<11,\
    \ 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n    BitFieldModel<8, 2> cc2s;\n\
    \    BitFieldModel<7, 1> oc1ce;\n    BitFieldModel<4, 3> oc1m;\n    BitFieldModel<3,\
    \ 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n    BitFieldModel<0, 2> cc1s;\n \
    \ };\n};\n\nstruct ccmr1_input\n{\n  constexpr static uint32_t Address = 0x40000000\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> ic2f;\n\
    \    BitFieldModel<10, 2> ic2pcs;\n    BitFieldModel<8, 2> cc2s;\n    BitFieldModel<4,\
    \ 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0, 2> cc1s;\n  };\n\
    };\n\nstruct ccmr2_output\n{\n  constexpr static uint32_t Address = 0x40000000\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> oc4ce;\n\
    \    BitFieldModel<12, 3> oc4m;\n    BitFieldModel<11, 1> oc4pe;\n    BitFieldModel<10,\
    \ 1> oc4fe;\n    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<7, 1> oc3ce;\n \
    \   BitFieldModel<4, 3> oc3m;\n    BitFieldModel<3, 1> oc3pe;\n    BitFieldModel<2,\
    \ 1> oc3fe;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccmr2_input\n{\n\
    \  constexpr static uint32_t Address = 0x40000000 + 0x001C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<12, 4> ic4f;\n    BitFieldModel<10, 2> ic4psc;\n\
    \    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<4, 4> ic3f;\n    BitFieldModel<2,\
    \ 2> ic3psc;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccer\n{\n  constexpr\
    \ static uint32_t Address = 0x40000000 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> cc4np;\n    BitFieldModel<13, 1> cc4p;\n    BitFieldModel<12,\
    \ 1> cc4e;\n    BitFieldModel<11, 1> cc3np;\n    BitFieldModel<9, 1> cc3p;\n \
    \   BitFieldModel<8, 1> cc3e;\n    BitFieldModel<7, 1> cc2np;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n};\n\nstruct\
    \ cnt\n{\n  constexpr static uint32_t Address = 0x40000000 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> cnt_h;\n    BitFieldModel<0,\
    \ 16> cnt_l;\n  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address =\
    \ 0x40000000 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> psc;\n  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40000000\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> arr_h;\n\
    \    BitFieldModel<0, 16> arr_l;\n  };\n};\n\nstruct ccr1\n{\n  constexpr static\
    \ uint32_t Address = 0x40000000 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> ccr1_h;\n    BitFieldModel<0, 16> ccr1_l;\n  };\n};\n\
    \nstruct ccr2\n{\n  constexpr static uint32_t Address = 0x40000000 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> ccr2_h;\n    BitFieldModel<0,\
    \ 16> ccr2_l;\n  };\n};\n\nstruct ccr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40000000 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 16> ccr3_h;\n    BitFieldModel<0, 16> ccr3_l;\n  };\n};\n\nstruct ccr4\n{\n\
    \  constexpr static uint32_t Address = 0x40000000 + 0x0040;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<16, 16> ccr4_h;\n    BitFieldModel<0, 16>\
    \ ccr4_l;\n  };\n};\n\nstruct dcr\n{\n  constexpr static uint32_t Address = 0x40000000\
    \ + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 5> dbl;\n\
    \    BitFieldModel<0, 5> dba;\n  };\n};\n\nstruct dmar\n{\n  constexpr static\
    \ uint32_t Address = 0x40000000 + 0x004C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> dmab;\n  };\n};\n\nstruct _or\n{\n  constexpr static\
    \ uint32_t Address = 0x40000000 + 0x0050;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<10, 2> itr1_rmp;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_TIM2_H\
    \ */\n"
  name: TIM2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM3_H\n#define DRAL_STM32F446_TIM3_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40000400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<5, 2> cms;\n    BitFieldModel<4, 1> dir;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40000400\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> ti1s;\n\
    \    BitFieldModel<4, 3> mms;\n    BitFieldModel<3, 1> ccds;\n  };\n};\n\nstruct\
    \ smcr\n{\n  constexpr static uint32_t Address = 0x40000400 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> etp;\n    BitFieldModel<14,\
    \ 1> ece;\n    BitFieldModel<12, 2> etps;\n    BitFieldModel<8, 4> etf;\n    BitFieldModel<7,\
    \ 1> msm;\n    BitFieldModel<4, 3> ts;\n    BitFieldModel<0, 3> sms;\n  };\n};\n\
    \nstruct dier\n{\n  constexpr static uint32_t Address = 0x40000400 + 0x000C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> tde;\n    BitFieldModel<12,\
    \ 1> cc4de;\n    BitFieldModel<11, 1> cc3de;\n    BitFieldModel<10, 1> cc2de;\n\
    \    BitFieldModel<9, 1> cc1de;\n    BitFieldModel<8, 1> ude;\n    BitFieldModel<6,\
    \ 1> tie;\n    BitFieldModel<4, 1> cc4ie;\n    BitFieldModel<3, 1> cc3ie;\n  \
    \  BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40000400\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> cc4of;\n\
    \    BitFieldModel<11, 1> cc3of;\n    BitFieldModel<10, 1> cc2of;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<4, 1> cc4if;\n  \
    \  BitFieldModel<3, 1> cc3if;\n    BitFieldModel<2, 1> cc2if;\n    BitFieldModel<1,\
    \ 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr\
    \ static uint32_t Address = 0x40000400 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> tg;\n    BitFieldModel<4, 1> cc4g;\n    BitFieldModel<3,\
    \ 1> cc3g;\n    BitFieldModel<2, 1> cc2g;\n    BitFieldModel<1, 1> cc1g;\n   \
    \ BitFieldModel<0, 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static\
    \ uint32_t Address = 0x40000400 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> oc2ce;\n    BitFieldModel<12, 3> oc2m;\n    BitFieldModel<11,\
    \ 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n    BitFieldModel<8, 2> cc2s;\n\
    \    BitFieldModel<7, 1> oc1ce;\n    BitFieldModel<4, 3> oc1m;\n    BitFieldModel<3,\
    \ 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n    BitFieldModel<0, 2> cc1s;\n \
    \ };\n};\n\nstruct ccmr1_input\n{\n  constexpr static uint32_t Address = 0x40000400\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> ic2f;\n\
    \    BitFieldModel<10, 2> ic2pcs;\n    BitFieldModel<8, 2> cc2s;\n    BitFieldModel<4,\
    \ 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0, 2> cc1s;\n  };\n\
    };\n\nstruct ccmr2_output\n{\n  constexpr static uint32_t Address = 0x40000400\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> oc4ce;\n\
    \    BitFieldModel<12, 3> oc4m;\n    BitFieldModel<11, 1> oc4pe;\n    BitFieldModel<10,\
    \ 1> oc4fe;\n    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<7, 1> oc3ce;\n \
    \   BitFieldModel<4, 3> oc3m;\n    BitFieldModel<3, 1> oc3pe;\n    BitFieldModel<2,\
    \ 1> oc3fe;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccmr2_input\n{\n\
    \  constexpr static uint32_t Address = 0x40000400 + 0x001C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<12, 4> ic4f;\n    BitFieldModel<10, 2> ic4psc;\n\
    \    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<4, 4> ic3f;\n    BitFieldModel<2,\
    \ 2> ic3psc;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccer\n{\n  constexpr\
    \ static uint32_t Address = 0x40000400 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> cc4np;\n    BitFieldModel<13, 1> cc4p;\n    BitFieldModel<12,\
    \ 1> cc4e;\n    BitFieldModel<11, 1> cc3np;\n    BitFieldModel<9, 1> cc3p;\n \
    \   BitFieldModel<8, 1> cc3e;\n    BitFieldModel<7, 1> cc2np;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n};\n\nstruct\
    \ cnt\n{\n  constexpr static uint32_t Address = 0x40000400 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> cnt_h;\n    BitFieldModel<0,\
    \ 16> cnt_l;\n  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address =\
    \ 0x40000400 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> psc;\n  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40000400\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> arr_h;\n\
    \    BitFieldModel<0, 16> arr_l;\n  };\n};\n\nstruct ccr1\n{\n  constexpr static\
    \ uint32_t Address = 0x40000400 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> ccr1_h;\n    BitFieldModel<0, 16> ccr1_l;\n  };\n};\n\
    \nstruct ccr2\n{\n  constexpr static uint32_t Address = 0x40000400 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> ccr2_h;\n    BitFieldModel<0,\
    \ 16> ccr2_l;\n  };\n};\n\nstruct ccr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40000400 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 16> ccr3_h;\n    BitFieldModel<0, 16> ccr3_l;\n  };\n};\n\nstruct ccr4\n{\n\
    \  constexpr static uint32_t Address = 0x40000400 + 0x0040;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<16, 16> ccr4_h;\n    BitFieldModel<0, 16>\
    \ ccr4_l;\n  };\n};\n\nstruct dcr\n{\n  constexpr static uint32_t Address = 0x40000400\
    \ + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 5> dbl;\n\
    \    BitFieldModel<0, 5> dba;\n  };\n};\n\nstruct dmar\n{\n  constexpr static\
    \ uint32_t Address = 0x40000400 + 0x004C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> dmab;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_TIM3_H\
    \ */\n"
  name: TIM3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM4_H\n#define DRAL_STM32F446_TIM4_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40000800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<5, 2> cms;\n    BitFieldModel<4, 1> dir;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40000800\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> ti1s;\n\
    \    BitFieldModel<4, 3> mms;\n    BitFieldModel<3, 1> ccds;\n  };\n};\n\nstruct\
    \ smcr\n{\n  constexpr static uint32_t Address = 0x40000800 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> etp;\n    BitFieldModel<14,\
    \ 1> ece;\n    BitFieldModel<12, 2> etps;\n    BitFieldModel<8, 4> etf;\n    BitFieldModel<7,\
    \ 1> msm;\n    BitFieldModel<4, 3> ts;\n    BitFieldModel<0, 3> sms;\n  };\n};\n\
    \nstruct dier\n{\n  constexpr static uint32_t Address = 0x40000800 + 0x000C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> tde;\n    BitFieldModel<12,\
    \ 1> cc4de;\n    BitFieldModel<11, 1> cc3de;\n    BitFieldModel<10, 1> cc2de;\n\
    \    BitFieldModel<9, 1> cc1de;\n    BitFieldModel<8, 1> ude;\n    BitFieldModel<6,\
    \ 1> tie;\n    BitFieldModel<4, 1> cc4ie;\n    BitFieldModel<3, 1> cc3ie;\n  \
    \  BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40000800\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> cc4of;\n\
    \    BitFieldModel<11, 1> cc3of;\n    BitFieldModel<10, 1> cc2of;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<4, 1> cc4if;\n  \
    \  BitFieldModel<3, 1> cc3if;\n    BitFieldModel<2, 1> cc2if;\n    BitFieldModel<1,\
    \ 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr\
    \ static uint32_t Address = 0x40000800 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> tg;\n    BitFieldModel<4, 1> cc4g;\n    BitFieldModel<3,\
    \ 1> cc3g;\n    BitFieldModel<2, 1> cc2g;\n    BitFieldModel<1, 1> cc1g;\n   \
    \ BitFieldModel<0, 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static\
    \ uint32_t Address = 0x40000800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> oc2ce;\n    BitFieldModel<12, 3> oc2m;\n    BitFieldModel<11,\
    \ 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n    BitFieldModel<8, 2> cc2s;\n\
    \    BitFieldModel<7, 1> oc1ce;\n    BitFieldModel<4, 3> oc1m;\n    BitFieldModel<3,\
    \ 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n    BitFieldModel<0, 2> cc1s;\n \
    \ };\n};\n\nstruct ccmr1_input\n{\n  constexpr static uint32_t Address = 0x40000800\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> ic2f;\n\
    \    BitFieldModel<10, 2> ic2pcs;\n    BitFieldModel<8, 2> cc2s;\n    BitFieldModel<4,\
    \ 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0, 2> cc1s;\n  };\n\
    };\n\nstruct ccmr2_output\n{\n  constexpr static uint32_t Address = 0x40000800\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> oc4ce;\n\
    \    BitFieldModel<12, 3> oc4m;\n    BitFieldModel<11, 1> oc4pe;\n    BitFieldModel<10,\
    \ 1> oc4fe;\n    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<7, 1> oc3ce;\n \
    \   BitFieldModel<4, 3> oc3m;\n    BitFieldModel<3, 1> oc3pe;\n    BitFieldModel<2,\
    \ 1> oc3fe;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccmr2_input\n{\n\
    \  constexpr static uint32_t Address = 0x40000800 + 0x001C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<12, 4> ic4f;\n    BitFieldModel<10, 2> ic4psc;\n\
    \    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<4, 4> ic3f;\n    BitFieldModel<2,\
    \ 2> ic3psc;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccer\n{\n  constexpr\
    \ static uint32_t Address = 0x40000800 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> cc4np;\n    BitFieldModel<13, 1> cc4p;\n    BitFieldModel<12,\
    \ 1> cc4e;\n    BitFieldModel<11, 1> cc3np;\n    BitFieldModel<9, 1> cc3p;\n \
    \   BitFieldModel<8, 1> cc3e;\n    BitFieldModel<7, 1> cc2np;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n};\n\nstruct\
    \ cnt\n{\n  constexpr static uint32_t Address = 0x40000800 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> cnt_h;\n    BitFieldModel<0,\
    \ 16> cnt_l;\n  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address =\
    \ 0x40000800 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> psc;\n  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40000800\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> arr_h;\n\
    \    BitFieldModel<0, 16> arr_l;\n  };\n};\n\nstruct ccr1\n{\n  constexpr static\
    \ uint32_t Address = 0x40000800 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> ccr1_h;\n    BitFieldModel<0, 16> ccr1_l;\n  };\n};\n\
    \nstruct ccr2\n{\n  constexpr static uint32_t Address = 0x40000800 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> ccr2_h;\n    BitFieldModel<0,\
    \ 16> ccr2_l;\n  };\n};\n\nstruct ccr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40000800 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 16> ccr3_h;\n    BitFieldModel<0, 16> ccr3_l;\n  };\n};\n\nstruct ccr4\n{\n\
    \  constexpr static uint32_t Address = 0x40000800 + 0x0040;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<16, 16> ccr4_h;\n    BitFieldModel<0, 16>\
    \ ccr4_l;\n  };\n};\n\nstruct dcr\n{\n  constexpr static uint32_t Address = 0x40000800\
    \ + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 5> dbl;\n\
    \    BitFieldModel<0, 5> dba;\n  };\n};\n\nstruct dmar\n{\n  constexpr static\
    \ uint32_t Address = 0x40000800 + 0x004C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> dmab;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_TIM4_H\
    \ */\n"
  name: TIM4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM5_H\n#define DRAL_STM32F446_TIM5_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40000C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<5, 2> cms;\n    BitFieldModel<4, 1> dir;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40000C00\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<7, 1> ti1s;\n\
    \    BitFieldModel<4, 3> mms;\n    BitFieldModel<3, 1> ccds;\n  };\n};\n\nstruct\
    \ smcr\n{\n  constexpr static uint32_t Address = 0x40000C00 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<15, 1> etp;\n    BitFieldModel<14,\
    \ 1> ece;\n    BitFieldModel<12, 2> etps;\n    BitFieldModel<8, 4> etf;\n    BitFieldModel<7,\
    \ 1> msm;\n    BitFieldModel<4, 3> ts;\n    BitFieldModel<0, 3> sms;\n  };\n};\n\
    \nstruct dier\n{\n  constexpr static uint32_t Address = 0x40000C00 + 0x000C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<14, 1> tde;\n    BitFieldModel<12,\
    \ 1> cc4de;\n    BitFieldModel<11, 1> cc3de;\n    BitFieldModel<10, 1> cc2de;\n\
    \    BitFieldModel<9, 1> cc1de;\n    BitFieldModel<8, 1> ude;\n    BitFieldModel<6,\
    \ 1> tie;\n    BitFieldModel<4, 1> cc4ie;\n    BitFieldModel<3, 1> cc3ie;\n  \
    \  BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40000C00\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> cc4of;\n\
    \    BitFieldModel<11, 1> cc3of;\n    BitFieldModel<10, 1> cc2of;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<4, 1> cc4if;\n  \
    \  BitFieldModel<3, 1> cc3if;\n    BitFieldModel<2, 1> cc2if;\n    BitFieldModel<1,\
    \ 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr\
    \ static uint32_t Address = 0x40000C00 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> tg;\n    BitFieldModel<4, 1> cc4g;\n    BitFieldModel<3,\
    \ 1> cc3g;\n    BitFieldModel<2, 1> cc2g;\n    BitFieldModel<1, 1> cc1g;\n   \
    \ BitFieldModel<0, 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static\
    \ uint32_t Address = 0x40000C00 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> oc2ce;\n    BitFieldModel<12, 3> oc2m;\n    BitFieldModel<11,\
    \ 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n    BitFieldModel<8, 2> cc2s;\n\
    \    BitFieldModel<7, 1> oc1ce;\n    BitFieldModel<4, 3> oc1m;\n    BitFieldModel<3,\
    \ 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n    BitFieldModel<0, 2> cc1s;\n \
    \ };\n};\n\nstruct ccmr1_input\n{\n  constexpr static uint32_t Address = 0x40000C00\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 4> ic2f;\n\
    \    BitFieldModel<10, 2> ic2pcs;\n    BitFieldModel<8, 2> cc2s;\n    BitFieldModel<4,\
    \ 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0, 2> cc1s;\n  };\n\
    };\n\nstruct ccmr2_output\n{\n  constexpr static uint32_t Address = 0x40000C00\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<15, 1> oc4ce;\n\
    \    BitFieldModel<12, 3> oc4m;\n    BitFieldModel<11, 1> oc4pe;\n    BitFieldModel<10,\
    \ 1> oc4fe;\n    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<7, 1> oc3ce;\n \
    \   BitFieldModel<4, 3> oc3m;\n    BitFieldModel<3, 1> oc3pe;\n    BitFieldModel<2,\
    \ 1> oc3fe;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccmr2_input\n{\n\
    \  constexpr static uint32_t Address = 0x40000C00 + 0x001C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<12, 4> ic4f;\n    BitFieldModel<10, 2> ic4psc;\n\
    \    BitFieldModel<8, 2> cc4s;\n    BitFieldModel<4, 4> ic3f;\n    BitFieldModel<2,\
    \ 2> ic3psc;\n    BitFieldModel<0, 2> cc3s;\n  };\n};\n\nstruct ccer\n{\n  constexpr\
    \ static uint32_t Address = 0x40000C00 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<15, 1> cc4np;\n    BitFieldModel<13, 1> cc4p;\n    BitFieldModel<12,\
    \ 1> cc4e;\n    BitFieldModel<11, 1> cc3np;\n    BitFieldModel<9, 1> cc3p;\n \
    \   BitFieldModel<8, 1> cc3e;\n    BitFieldModel<7, 1> cc2np;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n};\n\nstruct\
    \ cnt\n{\n  constexpr static uint32_t Address = 0x40000C00 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> cnt_h;\n    BitFieldModel<0,\
    \ 16> cnt_l;\n  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address =\
    \ 0x40000C00 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> psc;\n  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40000C00\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> arr_h;\n\
    \    BitFieldModel<0, 16> arr_l;\n  };\n};\n\nstruct ccr1\n{\n  constexpr static\
    \ uint32_t Address = 0x40000C00 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> ccr1_h;\n    BitFieldModel<0, 16> ccr1_l;\n  };\n};\n\
    \nstruct ccr2\n{\n  constexpr static uint32_t Address = 0x40000C00 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> ccr2_h;\n    BitFieldModel<0,\
    \ 16> ccr2_l;\n  };\n};\n\nstruct ccr3\n{\n  constexpr static uint32_t Address\
    \ = 0x40000C00 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 16> ccr3_h;\n    BitFieldModel<0, 16> ccr3_l;\n  };\n};\n\nstruct ccr4\n{\n\
    \  constexpr static uint32_t Address = 0x40000C00 + 0x0040;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<16, 16> ccr4_h;\n    BitFieldModel<0, 16>\
    \ ccr4_l;\n  };\n};\n\nstruct dcr\n{\n  constexpr static uint32_t Address = 0x40000C00\
    \ + 0x0048;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 5> dbl;\n\
    \    BitFieldModel<0, 5> dba;\n  };\n};\n\nstruct dmar\n{\n  constexpr static\
    \ uint32_t Address = 0x40000C00 + 0x004C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> dmab;\n  };\n};\n\nstruct _or\n{\n  constexpr static\
    \ uint32_t Address = 0x40000C00 + 0x0050;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 2> it4_rmp;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_TIM5_H\
    \ */\n"
  name: TIM5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM9_H\n#define DRAL_STM32F446_TIM9_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40014000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<3, 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1,\
    \ 1> udis;\n    BitFieldModel<0, 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr\
    \ static uint32_t Address = 0x40014000 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 3> mms;\n  };\n};\n\nstruct smcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40014000 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> msm;\n    BitFieldModel<4, 3> ts;\n    BitFieldModel<0,\
    \ 3> sms;\n  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40014000\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> tie;\n\
    \    BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40014000\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<10, 1> cc2of;\n\
    \    BitFieldModel<9, 1> cc1of;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<2,\
    \ 1> cc2if;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n\
    };\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40014000 + 0x0014;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> tg;\n    BitFieldModel<2,\
    \ 1> cc2g;\n    BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0, 1> ug;\n  };\n\
    };\n\nstruct ccmr1_output\n{\n  constexpr static uint32_t Address = 0x40014000\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 3> oc2m;\n\
    \    BitFieldModel<11, 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n    BitFieldModel<8,\
    \ 2> cc2s;\n    BitFieldModel<4, 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n  \
    \  BitFieldModel<2, 1> oc1fe;\n    BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct\
    \ ccmr1_input\n{\n  constexpr static uint32_t Address = 0x40014000 + 0x0018;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 3> ic2f;\n    BitFieldModel<10,\
    \ 2> ic2pcs;\n    BitFieldModel<8, 2> cc2s;\n    BitFieldModel<4, 3> ic1f;\n \
    \   BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct\
    \ ccer\n{\n  constexpr static uint32_t Address = 0x40014000 + 0x0020;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<7, 1> cc2np;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n};\n\nstruct\
    \ cnt\n{\n  constexpr static uint32_t Address = 0x40014000 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n  };\n};\n\nstruct psc\n\
    {\n  constexpr static uint32_t Address = 0x40014000 + 0x0028;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> psc;\n  };\n};\n\nstruct arr\n\
    {\n  constexpr static uint32_t Address = 0x40014000 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> arr;\n  };\n};\n\nstruct ccr1\n\
    {\n  constexpr static uint32_t Address = 0x40014000 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n  };\n};\n\nstruct ccr2\n\
    {\n  constexpr static uint32_t Address = 0x40014000 + 0x0038;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr2;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_TIM9_H */\n"
  name: TIM9
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM12_H\n#define DRAL_STM32F446_TIM12_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40001800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<3, 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1,\
    \ 1> udis;\n    BitFieldModel<0, 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr\
    \ static uint32_t Address = 0x40001800 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 3> mms;\n  };\n};\n\nstruct smcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40001800 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> msm;\n    BitFieldModel<4, 3> ts;\n    BitFieldModel<0,\
    \ 3> sms;\n  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40001800\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> tie;\n\
    \    BitFieldModel<2, 1> cc2ie;\n    BitFieldModel<1, 1> cc1ie;\n    BitFieldModel<0,\
    \ 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t Address = 0x40001800\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<10, 1> cc2of;\n\
    \    BitFieldModel<9, 1> cc1of;\n    BitFieldModel<6, 1> tif;\n    BitFieldModel<2,\
    \ 1> cc2if;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n\
    };\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40001800 + 0x0014;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> tg;\n    BitFieldModel<2,\
    \ 1> cc2g;\n    BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0, 1> ug;\n  };\n\
    };\n\nstruct ccmr1_output\n{\n  constexpr static uint32_t Address = 0x40001800\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 3> oc2m;\n\
    \    BitFieldModel<11, 1> oc2pe;\n    BitFieldModel<10, 1> oc2fe;\n    BitFieldModel<8,\
    \ 2> cc2s;\n    BitFieldModel<4, 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n  \
    \  BitFieldModel<2, 1> oc1fe;\n    BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct\
    \ ccmr1_input\n{\n  constexpr static uint32_t Address = 0x40001800 + 0x0018;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 3> ic2f;\n    BitFieldModel<10,\
    \ 2> ic2pcs;\n    BitFieldModel<8, 2> cc2s;\n    BitFieldModel<4, 3> ic1f;\n \
    \   BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct\
    \ ccer\n{\n  constexpr static uint32_t Address = 0x40001800 + 0x0020;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<7, 1> cc2np;\n    BitFieldModel<5,\
    \ 1> cc2p;\n    BitFieldModel<4, 1> cc2e;\n    BitFieldModel<3, 1> cc1np;\n  \
    \  BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n};\n\nstruct\
    \ cnt\n{\n  constexpr static uint32_t Address = 0x40001800 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n  };\n};\n\nstruct psc\n\
    {\n  constexpr static uint32_t Address = 0x40001800 + 0x0028;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> psc;\n  };\n};\n\nstruct arr\n\
    {\n  constexpr static uint32_t Address = 0x40001800 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> arr;\n  };\n};\n\nstruct ccr1\n\
    {\n  constexpr static uint32_t Address = 0x40001800 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n  };\n};\n\nstruct ccr2\n\
    {\n  constexpr static uint32_t Address = 0x40001800 + 0x0038;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr2;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_TIM12_H */\n"
  name: TIM12
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM10_H\n#define DRAL_STM32F446_TIM10_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40014400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40014400\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1ie;\n\
    \    BitFieldModel<0, 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t\
    \ Address = 0x40014400 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n\
    };\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40014400 + 0x0014;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0,\
    \ 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static uint32_t Address\
    \ = 0x40014400 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n \
    \   BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr1_input\n{\n  constexpr\
    \ static uint32_t Address = 0x40014400 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0,\
    \ 2> cc1s;\n  };\n};\n\nstruct ccer\n{\n  constexpr static uint32_t Address =\
    \ 0x40014400 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<3,\
    \ 1> cc1np;\n    BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n\
    };\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40014400 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n  };\n};\n\n\
    struct psc\n{\n  constexpr static uint32_t Address = 0x40014400 + 0x0028;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n  };\n};\n\nstruct arr\n\
    {\n  constexpr static uint32_t Address = 0x40014400 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> arr;\n  };\n};\n\nstruct ccr1\n\
    {\n  constexpr static uint32_t Address = 0x40014400 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_TIM10_H */\n"
  name: TIM10
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM13_H\n#define DRAL_STM32F446_TIM13_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40001C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40001C00\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1ie;\n\
    \    BitFieldModel<0, 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t\
    \ Address = 0x40001C00 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n\
    };\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40001C00 + 0x0014;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0,\
    \ 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static uint32_t Address\
    \ = 0x40001C00 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n \
    \   BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr1_input\n{\n  constexpr\
    \ static uint32_t Address = 0x40001C00 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0,\
    \ 2> cc1s;\n  };\n};\n\nstruct ccer\n{\n  constexpr static uint32_t Address =\
    \ 0x40001C00 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<3,\
    \ 1> cc1np;\n    BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n\
    };\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40001C00 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n  };\n};\n\n\
    struct psc\n{\n  constexpr static uint32_t Address = 0x40001C00 + 0x0028;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n  };\n};\n\nstruct arr\n\
    {\n  constexpr static uint32_t Address = 0x40001C00 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> arr;\n  };\n};\n\nstruct ccr1\n\
    {\n  constexpr static uint32_t Address = 0x40001C00 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_TIM13_H */\n"
  name: TIM13
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM14_H\n#define DRAL_STM32F446_TIM14_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40002000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40002000\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1ie;\n\
    \    BitFieldModel<0, 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t\
    \ Address = 0x40002000 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n\
    };\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40002000 + 0x0014;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0,\
    \ 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static uint32_t Address\
    \ = 0x40002000 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n \
    \   BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr1_input\n{\n  constexpr\
    \ static uint32_t Address = 0x40002000 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0,\
    \ 2> cc1s;\n  };\n};\n\nstruct ccer\n{\n  constexpr static uint32_t Address =\
    \ 0x40002000 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<3,\
    \ 1> cc1np;\n    BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n\
    };\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40002000 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n  };\n};\n\n\
    struct psc\n{\n  constexpr static uint32_t Address = 0x40002000 + 0x0028;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n  };\n};\n\nstruct arr\n\
    {\n  constexpr static uint32_t Address = 0x40002000 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> arr;\n  };\n};\n\nstruct ccr1\n\
    {\n  constexpr static uint32_t Address = 0x40002000 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_TIM14_H */\n"
  name: TIM14
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM11_H\n#define DRAL_STM32F446_TIM11_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40014800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<8, 2> ckd;\n    BitFieldModel<7,\
    \ 1> arpe;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40014800\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1ie;\n\
    \    BitFieldModel<0, 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t\
    \ Address = 0x40014800 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9,\
    \ 1> cc1of;\n    BitFieldModel<1, 1> cc1if;\n    BitFieldModel<0, 1> uif;\n  };\n\
    };\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40014800 + 0x0014;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> cc1g;\n    BitFieldModel<0,\
    \ 1> ug;\n  };\n};\n\nstruct ccmr1_output\n{\n  constexpr static uint32_t Address\
    \ = 0x40014800 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4,\
    \ 3> oc1m;\n    BitFieldModel<3, 1> oc1pe;\n    BitFieldModel<2, 1> oc1fe;\n \
    \   BitFieldModel<0, 2> cc1s;\n  };\n};\n\nstruct ccmr1_input\n{\n  constexpr\
    \ static uint32_t Address = 0x40014800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 4> ic1f;\n    BitFieldModel<2, 2> icpcs;\n    BitFieldModel<0,\
    \ 2> cc1s;\n  };\n};\n\nstruct ccer\n{\n  constexpr static uint32_t Address =\
    \ 0x40014800 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<3,\
    \ 1> cc1np;\n    BitFieldModel<1, 1> cc1p;\n    BitFieldModel<0, 1> cc1e;\n  };\n\
    };\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40014800 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n  };\n};\n\n\
    struct psc\n{\n  constexpr static uint32_t Address = 0x40014800 + 0x0028;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n  };\n};\n\nstruct arr\n\
    {\n  constexpr static uint32_t Address = 0x40014800 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> arr;\n  };\n};\n\nstruct ccr1\n\
    {\n  constexpr static uint32_t Address = 0x40014800 + 0x0034;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ccr1;\n  };\n};\n\nstruct or_\n\
    {\n  constexpr static uint32_t Address = 0x40014800 + 0x0050;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 2> rmp;\n  };\n};\n\n}\n\n#endif /*\
    \ DRAL_STM32F446_TIM11_H */\n"
  name: TIM11
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM6_H\n#define DRAL_STM32F446_TIM6_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40001000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<7, 1> arpe;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40001000\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4, 3> mms;\n\
    \  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40001000\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 1> ude;\n\
    \    BitFieldModel<0, 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t\
    \ Address = 0x40001000 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40001000\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> ug;\n\
    \  };\n};\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40001000 +\
    \ 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n\
    \  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address = 0x40001000 +\
    \ 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n\
    \  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40001000 +\
    \ 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> arr;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_TIM6_H */\n"
  name: TIM6
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_TIM7_H\n#define DRAL_STM32F446_TIM7_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr1\n{\n  constexpr static uint32_t Address = 0x40001400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<7, 1> arpe;\n    BitFieldModel<3,\
    \ 1> opm;\n    BitFieldModel<2, 1> urs;\n    BitFieldModel<1, 1> udis;\n    BitFieldModel<0,\
    \ 1> cen;\n  };\n};\n\nstruct cr2\n{\n  constexpr static uint32_t Address = 0x40001400\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<4, 3> mms;\n\
    \  };\n};\n\nstruct dier\n{\n  constexpr static uint32_t Address = 0x40001400\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<8, 1> ude;\n\
    \    BitFieldModel<0, 1> uie;\n  };\n};\n\nstruct sr\n{\n  constexpr static uint32_t\
    \ Address = 0x40001400 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> uif;\n  };\n};\n\nstruct egr\n{\n  constexpr static uint32_t Address = 0x40001400\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> ug;\n\
    \  };\n};\n\nstruct cnt\n{\n  constexpr static uint32_t Address = 0x40001400 +\
    \ 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> cnt;\n\
    \  };\n};\n\nstruct psc\n{\n  constexpr static uint32_t Address = 0x40001400 +\
    \ 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> psc;\n\
    \  };\n};\n\nstruct arr\n{\n  constexpr static uint32_t Address = 0x40001400 +\
    \ 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> arr;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_TIM7_H */\n"
  name: TIM7
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_CRC_H\n#define DRAL_STM32F446_CRC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ dr\n{\n  constexpr static uint32_t Address = 0x40023000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> dr;\n  };\n};\n\nstruct idr\n\
    {\n  constexpr static uint32_t Address = 0x40023000 + 0x0004;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 8> idr;\n  };\n};\n\nstruct cr\n{\n\
    \  constexpr static uint32_t Address = 0x40023000 + 0x0008;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 1> cr;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_CRC_H\
    \ */\n"
  name: CRC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_FS_GLOBAL_H\n#define DRAL_STM32F446_OTG_FS_GLOBAL_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ fs_gotgctl\n{\n  constexpr static uint32_t Address = 0x50000000 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> srqscs;\n    BitFieldModel<1,\
    \ 1> srq;\n    BitFieldModel<4, 1> avaloen;\n    BitFieldModel<6, 1> bvaloen;\n\
    \    BitFieldModel<7, 1> bvaloval;\n    BitFieldModel<8, 1> hngscs;\n    BitFieldModel<9,\
    \ 1> hnprq;\n    BitFieldModel<10, 1> hshnpen;\n    BitFieldModel<11, 1> dhnpen;\n\
    \    BitFieldModel<16, 1> cidsts;\n    BitFieldModel<17, 1> dbct;\n    BitFieldModel<18,\
    \ 1> asvld;\n    BitFieldModel<19, 1> bsvld;\n  };\n};\n\nstruct fs_gotgint\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x0004;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<2, 1> sedet;\n    BitFieldModel<8, 1>\
    \ srsschg;\n    BitFieldModel<9, 1> hnsschg;\n    BitFieldModel<17, 1> hngdet;\n\
    \    BitFieldModel<18, 1> adtochg;\n    BitFieldModel<19, 1> dbcdne;\n  };\n};\n\
    \nstruct fs_gahbcfg\n{\n  constexpr static uint32_t Address = 0x50000000 + 0x0008;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> gint;\n    BitFieldModel<7,\
    \ 1> txfelvl;\n    BitFieldModel<8, 1> ptxfelvl;\n  };\n};\n\nstruct fs_gusbcfg\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 3> tocal;\n    BitFieldModel<6, 1>\
    \ physel;\n    BitFieldModel<8, 1> srpcap;\n    BitFieldModel<9, 1> hnpcap;\n\
    \    BitFieldModel<10, 4> trdt;\n    BitFieldModel<29, 1> fhmod;\n    BitFieldModel<30,\
    \ 1> fdmod;\n    BitFieldModel<31, 1> ctxpkt;\n  };\n};\n\nstruct fs_grstctl\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x0010;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> csrst;\n    BitFieldModel<1, 1>\
    \ hsrst;\n    BitFieldModel<2, 1> fcrst;\n    BitFieldModel<4, 1> rxfflsh;\n \
    \   BitFieldModel<5, 1> txfflsh;\n    BitFieldModel<6, 5> txfnum;\n    BitFieldModel<31,\
    \ 1> ahbidl;\n  };\n};\n\nstruct fs_gintsts\n{\n  constexpr static uint32_t Address\
    \ = 0x50000000 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> cmod;\n    BitFieldModel<1, 1> mmis;\n    BitFieldModel<2, 1> otgint;\n \
    \   BitFieldModel<3, 1> sof;\n    BitFieldModel<4, 1> rxflvl;\n    BitFieldModel<5,\
    \ 1> nptxfe;\n    BitFieldModel<6, 1> ginakeff;\n    BitFieldModel<7, 1> goutnakeff;\n\
    \    BitFieldModel<10, 1> esusp;\n    BitFieldModel<11, 1> usbsusp;\n    BitFieldModel<12,\
    \ 1> usbrst;\n    BitFieldModel<13, 1> enumdne;\n    BitFieldModel<14, 1> isoodrp;\n\
    \    BitFieldModel<15, 1> eopf;\n    BitFieldModel<18, 1> iepint;\n    BitFieldModel<19,\
    \ 1> oepint;\n    BitFieldModel<20, 1> iisoixfr;\n    BitFieldModel<21, 1> ipxfr_incompisoout;\n\
    \    BitFieldModel<24, 1> hprtint;\n    BitFieldModel<25, 1> hcint;\n    BitFieldModel<26,\
    \ 1> ptxfe;\n    BitFieldModel<28, 1> cidschg;\n    BitFieldModel<29, 1> discint;\n\
    \    BitFieldModel<30, 1> srqint;\n    BitFieldModel<31, 1> wkupint;\n  };\n};\n\
    \nstruct fs_gintmsk\n{\n  constexpr static uint32_t Address = 0x50000000 + 0x0018;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> mmism;\n    BitFieldModel<2,\
    \ 1> otgint;\n    BitFieldModel<3, 1> sofm;\n    BitFieldModel<4, 1> rxflvlm;\n\
    \    BitFieldModel<5, 1> nptxfem;\n    BitFieldModel<6, 1> ginakeffm;\n    BitFieldModel<7,\
    \ 1> gonakeffm;\n    BitFieldModel<10, 1> esuspm;\n    BitFieldModel<11, 1> usbsuspm;\n\
    \    BitFieldModel<12, 1> usbrst;\n    BitFieldModel<13, 1> enumdnem;\n    BitFieldModel<14,\
    \ 1> isoodrpm;\n    BitFieldModel<15, 1> eopfm;\n    BitFieldModel<17, 1> epmism;\n\
    \    BitFieldModel<18, 1> iepint;\n    BitFieldModel<19, 1> oepint;\n    BitFieldModel<20,\
    \ 1> iisoixfrm;\n    BitFieldModel<21, 1> ipxfrm_iisooxfrm;\n    BitFieldModel<24,\
    \ 1> prtim;\n    BitFieldModel<25, 1> hcim;\n    BitFieldModel<26, 1> ptxfem;\n\
    \    BitFieldModel<28, 1> cidschgm;\n    BitFieldModel<29, 1> discint;\n    BitFieldModel<30,\
    \ 1> srqim;\n    BitFieldModel<31, 1> wuim;\n  };\n};\n\nstruct fs_grxstsr_device\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x001C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 4> epnum;\n    BitFieldModel<4, 11>\
    \ bcnt;\n    BitFieldModel<15, 2> dpid;\n    BitFieldModel<17, 4> pktsts;\n  \
    \  BitFieldModel<21, 4> frmnum;\n  };\n};\n\nstruct fs_grxstsp_device\n{\n  constexpr\
    \ static uint32_t Address = 0x50000000 + 0x0020;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 4> epnum;\n    BitFieldModel<4, 11> bcnt;\n    BitFieldModel<15,\
    \ 2> dpid;\n    BitFieldModel<17, 4> pktsts;\n    BitFieldModel<21, 4> frmnum;\n\
    \  };\n};\n\nstruct fs_grxstsr_host\n{\n  constexpr static uint32_t Address =\
    \ 0x50000000 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 4> epnum;\n    BitFieldModel<4, 11> bcnt;\n    BitFieldModel<15, 2> dpid;\n\
    \    BitFieldModel<17, 4> pktsts;\n    BitFieldModel<21, 4> frmnum;\n  };\n};\n\
    \nstruct fs_grxstsp_host\n{\n  constexpr static uint32_t Address = 0x50000000\
    \ + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 4> epnum;\n\
    \    BitFieldModel<4, 11> bcnt;\n    BitFieldModel<15, 2> dpid;\n    BitFieldModel<17,\
    \ 4> pktsts;\n    BitFieldModel<21, 4> frmnum;\n  };\n};\n\nstruct fs_grxfsiz\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x0024;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> rxfd;\n  };\n};\n\nstruct fs_gnptxfsiz_device\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x0028;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> tx0fsa;\n    BitFieldModel<16,\
    \ 16> tx0fd;\n  };\n};\n\nstruct fs_gnptxfsiz_host\n{\n  constexpr static uint32_t\
    \ Address = 0x50000000 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> nptxfsa;\n    BitFieldModel<16, 16> nptxfd;\n  };\n};\n\nstruct fs_gnptxsts\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x002C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> nptxfsav;\n    BitFieldModel<16,\
    \ 8> nptqxsav;\n    BitFieldModel<24, 7> nptxqtop;\n  };\n};\n\nstruct fs_gccfg\n\
    {\n  constexpr static uint32_t Address = 0x50000000 + 0x0038;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<16, 1> pwrdwn;\n    BitFieldModel<18,\
    \ 1> vbusasen;\n    BitFieldModel<19, 1> vbusbsen;\n    BitFieldModel<20, 1> sofouten;\n\
    \  };\n};\n\nstruct fs_cid\n{\n  constexpr static uint32_t Address = 0x50000000\
    \ + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> product_id;\n\
    \  };\n};\n\nstruct fs_hptxfsiz\n{\n  constexpr static uint32_t Address = 0x50000000\
    \ + 0x0100;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ptxsa;\n\
    \    BitFieldModel<16, 16> ptxfsiz;\n  };\n};\n\nstruct fs_dieptxf1\n{\n  constexpr\
    \ static uint32_t Address = 0x50000000 + 0x0104;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ineptxsa;\n    BitFieldModel<16, 16> ineptxfd;\n  };\n\
    };\n\nstruct fs_dieptxf2\n{\n  constexpr static uint32_t Address = 0x50000000\
    \ + 0x0108;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptxsa;\n\
    \    BitFieldModel<16, 16> ineptxfd;\n  };\n};\n\nstruct fs_dieptxf3\n{\n  constexpr\
    \ static uint32_t Address = 0x50000000 + 0x010C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> ineptxsa;\n    BitFieldModel<16, 16> ineptxfd;\n  };\n\
    };\n\n}\n\n#endif /* DRAL_STM32F446_OTG_FS_GLOBAL_H */\n"
  name: OTG_FS_GLOBAL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_FS_HOST_H\n#define DRAL_STM32F446_OTG_FS_HOST_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ fs_hcfg\n{\n  constexpr static uint32_t Address = 0x50000400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 2> fslspcs;\n    BitFieldModel<2,\
    \ 1> fslss;\n  };\n};\n\nstruct hfir\n{\n  constexpr static uint32_t Address =\
    \ 0x50000400 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> frivl;\n  };\n};\n\nstruct fs_hfnum\n{\n  constexpr static uint32_t Address\
    \ = 0x50000400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> frnum;\n    BitFieldModel<16, 16> ftrem;\n  };\n};\n\nstruct fs_hptxsts\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0010;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ptxfsavl;\n    BitFieldModel<16,\
    \ 8> ptxqsav;\n    BitFieldModel<24, 8> ptxqtop;\n  };\n};\n\nstruct haint\n{\n\
    \  constexpr static uint32_t Address = 0x50000400 + 0x0014;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 16> haint;\n  };\n};\n\nstruct haintmsk\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0018;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> haintm;\n  };\n};\n\nstruct fs_hprt\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0040;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> pcsts;\n    BitFieldModel<1, 1>\
    \ pcdet;\n    BitFieldModel<2, 1> pena;\n    BitFieldModel<3, 1> penchng;\n  \
    \  BitFieldModel<4, 1> poca;\n    BitFieldModel<5, 1> pocchng;\n    BitFieldModel<6,\
    \ 1> pres;\n    BitFieldModel<7, 1> psusp;\n    BitFieldModel<8, 1> prst;\n  \
    \  BitFieldModel<10, 2> plsts;\n    BitFieldModel<12, 1> ppwr;\n    BitFieldModel<13,\
    \ 4> ptctl;\n    BitFieldModel<17, 2> pspd;\n  };\n};\n\nstruct fs_hcchar0\n{\n\
    \  constexpr static uint32_t Address = 0x50000400 + 0x0100;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mcnt;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct fs_hcchar1\n{\n  constexpr\
    \ static uint32_t Address = 0x50000400 + 0x0120;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mcnt;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct fs_hcchar2\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x0140;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17,\
    \ 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mcnt;\n\
    \    BitFieldModel<22, 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30,\
    \ 1> chdis;\n    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct fs_hcchar3\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0160;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mcnt;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct fs_hcchar4\n{\n  constexpr\
    \ static uint32_t Address = 0x50000400 + 0x0180;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mcnt;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct fs_hcchar5\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x01A0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17,\
    \ 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mcnt;\n\
    \    BitFieldModel<22, 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30,\
    \ 1> chdis;\n    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct fs_hcchar6\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x01C0;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mcnt;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct fs_hcchar7\n{\n  constexpr\
    \ static uint32_t Address = 0x50000400 + 0x01E0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mcnt;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct fs_hcint0\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x0108;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint1\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x0128;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint2\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x0148;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint3\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x0168;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint4\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x0188;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint5\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x01A8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint6\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x01C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcint7\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x01E8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<3, 1> stall;\n    BitFieldModel<4,\
    \ 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8,\
    \ 1> bberr;\n    BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n\
    \  };\n};\n\nstruct fs_hcintmsk0\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x010C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n\
    \    BitFieldModel<1, 1> chhm;\n    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4,\
    \ 1> nakm;\n    BitFieldModel<5, 1> ackm;\n    BitFieldModel<6, 1> nyet;\n   \
    \ BitFieldModel<7, 1> txerrm;\n    BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9,\
    \ 1> frmorm;\n    BitFieldModel<10, 1> dterrm;\n  };\n};\n\nstruct fs_hcintmsk1\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x012C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n    BitFieldModel<1, 1>\
    \ chhm;\n    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct fs_hcintmsk2\n{\n  constexpr static uint32_t\
    \ Address = 0x50000400 + 0x014C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<3, 1> stallm;\n\
    \    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5, 1> ackm;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n    BitFieldModel<8, 1> bberrm;\n\
    \    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10, 1> dterrm;\n  };\n};\n\
    \nstruct fs_hcintmsk3\n{\n  constexpr static uint32_t Address = 0x50000400 + 0x016C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n    BitFieldModel<1,\
    \ 1> chhm;\n    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n \
    \   BitFieldModel<5, 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7,\
    \ 1> txerrm;\n    BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n\
    \    BitFieldModel<10, 1> dterrm;\n  };\n};\n\nstruct fs_hcintmsk4\n{\n  constexpr\
    \ static uint32_t Address = 0x50000400 + 0x018C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<3,\
    \ 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5, 1> ackm;\n \
    \   BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n    BitFieldModel<8,\
    \ 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10, 1> dterrm;\n\
    \  };\n};\n\nstruct fs_hcintmsk5\n{\n  constexpr static uint32_t Address = 0x50000400\
    \ + 0x01AC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n\
    \    BitFieldModel<1, 1> chhm;\n    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4,\
    \ 1> nakm;\n    BitFieldModel<5, 1> ackm;\n    BitFieldModel<6, 1> nyet;\n   \
    \ BitFieldModel<7, 1> txerrm;\n    BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9,\
    \ 1> frmorm;\n    BitFieldModel<10, 1> dterrm;\n  };\n};\n\nstruct fs_hcintmsk6\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x01CC;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n    BitFieldModel<1, 1>\
    \ chhm;\n    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct fs_hcintmsk7\n{\n  constexpr static uint32_t\
    \ Address = 0x50000400 + 0x01EC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<3, 1> stallm;\n\
    \    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5, 1> ackm;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n    BitFieldModel<8, 1> bberrm;\n\
    \    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10, 1> dterrm;\n  };\n};\n\
    \nstruct fs_hctsiz0\n{\n  constexpr static uint32_t Address = 0x50000400 + 0x0110;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz1\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0130;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz2\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0150;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz3\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0170;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz4\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x0190;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz5\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x01B0;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz6\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x01D0;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\nstruct fs_hctsiz7\n\
    {\n  constexpr static uint32_t Address = 0x50000400 + 0x01F0;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_OTG_FS_HOST_H\
    \ */\n"
  name: OTG_FS_HOST
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_FS_DEVICE_H\n#define DRAL_STM32F446_OTG_FS_DEVICE_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ fs_dcfg\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 2> dspd;\n    BitFieldModel<2,\
    \ 1> nzlsohsk;\n    BitFieldModel<4, 7> dad;\n    BitFieldModel<11, 2> pfivl;\n\
    \    BitFieldModel<15, 1> erratim;\n  };\n};\n\nstruct fs_dctl\n{\n  constexpr\
    \ static uint32_t Address = 0x50000800 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> rwusig;\n    BitFieldModel<1, 1> sdis;\n    BitFieldModel<2,\
    \ 1> ginsts;\n    BitFieldModel<3, 1> gonsts;\n    BitFieldModel<4, 3> tctl;\n\
    \    BitFieldModel<7, 1> sginak;\n    BitFieldModel<8, 1> cginak;\n    BitFieldModel<9,\
    \ 1> sgonak;\n    BitFieldModel<10, 1> cgonak;\n    BitFieldModel<11, 1> poprgdne;\n\
    \  };\n};\n\nstruct fs_dsts\n{\n  constexpr static uint32_t Address = 0x50000800\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> suspsts;\n\
    \    BitFieldModel<1, 2> enumspd;\n    BitFieldModel<3, 1> eerr;\n    BitFieldModel<8,\
    \ 14> fnsof;\n  };\n};\n\nstruct fs_diepmsk\n{\n  constexpr static uint32_t Address\
    \ = 0x50000800 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> epdm;\n    BitFieldModel<3, 1> tom;\n   \
    \ BitFieldModel<4, 1> ittxfemsk;\n    BitFieldModel<5, 1> inepnmm;\n    BitFieldModel<6,\
    \ 1> inepnem;\n  };\n};\n\nstruct fs_doepmsk\n{\n  constexpr static uint32_t Address\
    \ = 0x50000800 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> epdm;\n    BitFieldModel<3, 1> stupm;\n \
    \   BitFieldModel<4, 1> otepdm;\n  };\n};\n\nstruct fs_daint\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> iepint;\n    BitFieldModel<16, 16> oepint;\n  };\n};\n\
    \nstruct fs_daintmsk\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x001C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> iepm;\n    BitFieldModel<16,\
    \ 16> oepm;\n  };\n};\n\nstruct dvbusdis\n{\n  constexpr static uint32_t Address\
    \ = 0x50000800 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> vbusdt;\n  };\n};\n\nstruct dvbuspulse\n{\n  constexpr static uint32_t Address\
    \ = 0x50000800 + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 12> dvbusp;\n  };\n};\n\nstruct diepempmsk\n{\n  constexpr static uint32_t Address\
    \ = 0x50000800 + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptxfem;\n  };\n};\n\nstruct fs_diepctl0\n{\n  constexpr static uint32_t\
    \ Address = 0x50000800 + 0x0100;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 2> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<17, 1> naksts;\n\
    \    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21, 1> stall;\n    BitFieldModel<22,\
    \ 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<27, 1> snak;\n\
    \    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31, 1> epena;\n  };\n};\n\n\
    struct diepctl1\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0120;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> epena;\n    BitFieldModel<30,\
    \ 1> epdis;\n    BitFieldModel<29, 1> soddfrm_sd1pid;\n    BitFieldModel<28, 1>\
    \ sd0pid_sevnfrm;\n    BitFieldModel<27, 1> snak;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<21, 1> stall;\n    BitFieldModel<18,\
    \ 2> eptyp;\n    BitFieldModel<17, 1> naksts;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<0, 11> mpsiz;\n  };\n};\n\
    \nstruct diepctl2\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0140;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> epena;\n    BitFieldModel<30,\
    \ 1> epdis;\n    BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<22,\
    \ 4> txfnum;\n    BitFieldModel<21, 1> stall;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<15,\
    \ 1> usbaep;\n    BitFieldModel<0, 11> mpsiz;\n  };\n};\n\nstruct diepctl3\n{\n\
    \  constexpr static uint32_t Address = 0x50000800 + 0x0160;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<31, 1> epena;\n    BitFieldModel<30, 1>\
    \ epdis;\n    BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<22,\
    \ 4> txfnum;\n    BitFieldModel<21, 1> stall;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<15,\
    \ 1> usbaep;\n    BitFieldModel<0, 11> mpsiz;\n  };\n};\n\nstruct doepctl0\n{\n\
    \  constexpr static uint32_t Address = 0x50000800 + 0x0300;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<31, 1> epena;\n    BitFieldModel<30, 1>\
    \ epdis;\n    BitFieldModel<27, 1> snak;\n    BitFieldModel<26, 1> cnak;\n   \
    \ BitFieldModel<21, 1> stall;\n    BitFieldModel<20, 1> snpm;\n    BitFieldModel<18,\
    \ 2> eptyp;\n    BitFieldModel<17, 1> naksts;\n    BitFieldModel<15, 1> usbaep;\n\
    \    BitFieldModel<0, 2> mpsiz;\n  };\n};\n\nstruct doepctl1\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0320;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<31, 1> epena;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<29,\
    \ 1> soddfrm;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n    BitFieldModel<27,\
    \ 1> snak;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<21, 1> stall;\n\
    \    BitFieldModel<20, 1> snpm;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<17,\
    \ 1> naksts;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<15, 1> usbaep;\n\
    \    BitFieldModel<0, 11> mpsiz;\n  };\n};\n\nstruct doepctl2\n{\n  constexpr\
    \ static uint32_t Address = 0x50000800 + 0x0340;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<31, 1> epena;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<29,\
    \ 1> soddfrm;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n    BitFieldModel<27,\
    \ 1> snak;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<21, 1> stall;\n\
    \    BitFieldModel<20, 1> snpm;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<17,\
    \ 1> naksts;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<15, 1> usbaep;\n\
    \    BitFieldModel<0, 11> mpsiz;\n  };\n};\n\nstruct doepctl3\n{\n  constexpr\
    \ static uint32_t Address = 0x50000800 + 0x0360;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<31, 1> epena;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<29,\
    \ 1> soddfrm;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n    BitFieldModel<27,\
    \ 1> snak;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<21, 1> stall;\n\
    \    BitFieldModel<20, 1> snpm;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<17,\
    \ 1> naksts;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<15, 1> usbaep;\n\
    \    BitFieldModel<0, 11> mpsiz;\n  };\n};\n\nstruct diepint0\n{\n  constexpr\
    \ static uint32_t Address = 0x50000800 + 0x0108;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> txfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<4,\
    \ 1> ittxfe;\n    BitFieldModel<3, 1> toc;\n    BitFieldModel<1, 1> epdisd;\n\
    \    BitFieldModel<0, 1> xfrc;\n  };\n};\n\nstruct diepint1\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0128;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> txfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<4,\
    \ 1> ittxfe;\n    BitFieldModel<3, 1> toc;\n    BitFieldModel<1, 1> epdisd;\n\
    \    BitFieldModel<0, 1> xfrc;\n  };\n};\n\nstruct diepint2\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0148;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> txfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<4,\
    \ 1> ittxfe;\n    BitFieldModel<3, 1> toc;\n    BitFieldModel<1, 1> epdisd;\n\
    \    BitFieldModel<0, 1> xfrc;\n  };\n};\n\nstruct diepint3\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0168;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<7, 1> txfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<4,\
    \ 1> ittxfe;\n    BitFieldModel<3, 1> toc;\n    BitFieldModel<1, 1> epdisd;\n\
    \    BitFieldModel<0, 1> xfrc;\n  };\n};\n\nstruct doepint0\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0308;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<4, 1> otepdis;\n    BitFieldModel<3,\
    \ 1> stup;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<0, 1> xfrc;\n \
    \ };\n};\n\nstruct doepint1\n{\n  constexpr static uint32_t Address = 0x50000800\
    \ + 0x0328;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> b2bstup;\n\
    \    BitFieldModel<4, 1> otepdis;\n    BitFieldModel<3, 1> stup;\n    BitFieldModel<1,\
    \ 1> epdisd;\n    BitFieldModel<0, 1> xfrc;\n  };\n};\n\nstruct doepint2\n{\n\
    \  constexpr static uint32_t Address = 0x50000800 + 0x0348;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<4, 1>\
    \ otepdis;\n    BitFieldModel<3, 1> stup;\n    BitFieldModel<1, 1> epdisd;\n \
    \   BitFieldModel<0, 1> xfrc;\n  };\n};\n\nstruct doepint3\n{\n  constexpr static\
    \ uint32_t Address = 0x50000800 + 0x0368;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<4, 1> otepdis;\n    BitFieldModel<3,\
    \ 1> stup;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<0, 1> xfrc;\n \
    \ };\n};\n\nstruct dieptsiz0\n{\n  constexpr static uint32_t Address = 0x50000800\
    \ + 0x0110;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<19, 2> pktcnt;\n\
    \    BitFieldModel<0, 7> xfrsiz;\n  };\n};\n\nstruct doeptsiz0\n{\n  constexpr\
    \ static uint32_t Address = 0x50000800 + 0x0310;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<29, 2> stupcnt;\n    BitFieldModel<19, 1> pktcnt;\n    BitFieldModel<0,\
    \ 7> xfrsiz;\n  };\n};\n\nstruct dieptsiz1\n{\n  constexpr static uint32_t Address\
    \ = 0x50000800 + 0x0130;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<29,\
    \ 2> mcnt;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \  };\n};\n\nstruct dieptsiz2\n{\n  constexpr static uint32_t Address = 0x50000800\
    \ + 0x0150;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<29, 2> mcnt;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<0, 19> xfrsiz;\n  };\n};\n\
    \nstruct dieptsiz3\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0170;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<29, 2> mcnt;\n    BitFieldModel<19,\
    \ 10> pktcnt;\n    BitFieldModel<0, 19> xfrsiz;\n  };\n};\n\nstruct dtxfsts0\n\
    {\n  constexpr static uint32_t Address = 0x50000800 + 0x0118;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n  };\n};\n\nstruct\
    \ dtxfsts1\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0138;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n  };\n};\n\nstruct\
    \ dtxfsts2\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0158;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n  };\n};\n\nstruct\
    \ dtxfsts3\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0178;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n  };\n};\n\nstruct\
    \ doeptsiz1\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0330;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<0, 19> xfrsiz;\n  };\n};\n\
    \nstruct doeptsiz2\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0350;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<0, 19> xfrsiz;\n  };\n};\n\
    \nstruct doeptsiz3\n{\n  constexpr static uint32_t Address = 0x50000800 + 0x0370;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<0, 19> xfrsiz;\n  };\n};\n\
    \n}\n\n#endif /* DRAL_STM32F446_OTG_FS_DEVICE_H */\n"
  name: OTG_FS_DEVICE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_FS_PWRCLK_H\n#define DRAL_STM32F446_OTG_FS_PWRCLK_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ fs_pcgcctl\n{\n  constexpr static uint32_t Address = 0x50000E00 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> stppclk;\n    BitFieldModel<1,\
    \ 1> gatehclk;\n    BitFieldModel<4, 1> physusp;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_OTG_FS_PWRCLK_H\
    \ */\n"
  name: OTG_FS_PWRCLK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_CAN1_H\n#define DRAL_STM32F446_CAN1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ mcr\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 1> dbf;\n    BitFieldModel<15,\
    \ 1> reset;\n    BitFieldModel<7, 1> ttcm;\n    BitFieldModel<6, 1> abom;\n  \
    \  BitFieldModel<5, 1> awum;\n    BitFieldModel<4, 1> nart;\n    BitFieldModel<3,\
    \ 1> rflm;\n    BitFieldModel<2, 1> txfp;\n    BitFieldModel<1, 1> sleep;\n  \
    \  BitFieldModel<0, 1> inrq;\n  };\n};\n\nstruct msr\n{\n  constexpr static uint32_t\
    \ Address = 0x40006400 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> rx;\n    BitFieldModel<10, 1> samp;\n    BitFieldModel<9, 1> rxm;\n    BitFieldModel<8,\
    \ 1> txm;\n    BitFieldModel<4, 1> slaki;\n    BitFieldModel<3, 1> wkui;\n   \
    \ BitFieldModel<2, 1> erri;\n    BitFieldModel<1, 1> slak;\n    BitFieldModel<0,\
    \ 1> inak;\n  };\n};\n\nstruct tsr\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> low2;\n\
    \    BitFieldModel<30, 1> low1;\n    BitFieldModel<29, 1> low0;\n    BitFieldModel<28,\
    \ 1> tme2;\n    BitFieldModel<27, 1> tme1;\n    BitFieldModel<26, 1> tme0;\n \
    \   BitFieldModel<24, 2> code;\n    BitFieldModel<23, 1> abrq2;\n    BitFieldModel<19,\
    \ 1> terr2;\n    BitFieldModel<18, 1> alst2;\n    BitFieldModel<17, 1> txok2;\n\
    \    BitFieldModel<16, 1> rqcp2;\n    BitFieldModel<15, 1> abrq1;\n    BitFieldModel<11,\
    \ 1> terr1;\n    BitFieldModel<10, 1> alst1;\n    BitFieldModel<9, 1> txok1;\n\
    \    BitFieldModel<8, 1> rqcp1;\n    BitFieldModel<7, 1> abrq0;\n    BitFieldModel<3,\
    \ 1> terr0;\n    BitFieldModel<2, 1> alst0;\n    BitFieldModel<1, 1> txok0;\n\
    \    BitFieldModel<0, 1> rqcp0;\n  };\n};\n\nstruct rf0r\n{\n  constexpr static\
    \ uint32_t Address = 0x40006400 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<5, 1> rfom0;\n    BitFieldModel<4, 1> fovr0;\n    BitFieldModel<3,\
    \ 1> full0;\n    BitFieldModel<0, 2> fmp0;\n  };\n};\n\nstruct rf1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<5, 1> rfom1;\n    BitFieldModel<4, 1> fovr1;\n    BitFieldModel<3,\
    \ 1> full1;\n    BitFieldModel<0, 2> fmp1;\n  };\n};\n\nstruct ier\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<17, 1> slkie;\n    BitFieldModel<16, 1> wkuie;\n    BitFieldModel<15,\
    \ 1> errie;\n    BitFieldModel<11, 1> lecie;\n    BitFieldModel<10, 1> bofie;\n\
    \    BitFieldModel<9, 1> epvie;\n    BitFieldModel<8, 1> ewgie;\n    BitFieldModel<6,\
    \ 1> fovie1;\n    BitFieldModel<5, 1> ffie1;\n    BitFieldModel<4, 1> fmpie1;\n\
    \    BitFieldModel<3, 1> fovie0;\n    BitFieldModel<2, 1> ffie0;\n    BitFieldModel<1,\
    \ 1> fmpie0;\n    BitFieldModel<0, 1> tmeie;\n  };\n};\n\nstruct esr\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> rec;\n    BitFieldModel<16, 8> tec;\n    BitFieldModel<4,\
    \ 3> lec;\n    BitFieldModel<2, 1> boff;\n    BitFieldModel<1, 1> epvf;\n    BitFieldModel<0,\
    \ 1> ewgf;\n  };\n};\n\nstruct btr\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> silm;\n\
    \    BitFieldModel<30, 1> lbkm;\n    BitFieldModel<24, 2> sjw;\n    BitFieldModel<20,\
    \ 3> ts2;\n    BitFieldModel<16, 4> ts1;\n    BitFieldModel<0, 10> brp;\n  };\n\
    };\n\nstruct ti0r\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x0180;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<21, 11> stid;\n    BitFieldModel<3,\
    \ 18> exid;\n    BitFieldModel<2, 1> ide;\n    BitFieldModel<1, 1> rtr;\n    BitFieldModel<0,\
    \ 1> txrq;\n  };\n};\n\nstruct tdt0r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006400 + 0x0184;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 16> time;\n    BitFieldModel<8, 1> tgt;\n    BitFieldModel<0, 4> dlc;\n  };\n\
    };\n\nstruct tdl0r\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x0188;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 8> data3;\n    BitFieldModel<16,\
    \ 8> data2;\n    BitFieldModel<8, 8> data1;\n    BitFieldModel<0, 8> data0;\n\
    \  };\n};\n\nstruct tdh0r\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x018C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 8> data7;\n\
    \    BitFieldModel<16, 8> data6;\n    BitFieldModel<8, 8> data5;\n    BitFieldModel<0,\
    \ 8> data4;\n  };\n};\n\nstruct ti1r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006400 + 0x0190;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<21,\
    \ 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2, 1> ide;\n  \
    \  BitFieldModel<1, 1> rtr;\n    BitFieldModel<0, 1> txrq;\n  };\n};\n\nstruct\
    \ tdt1r\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x0194;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> time;\n    BitFieldModel<8,\
    \ 1> tgt;\n    BitFieldModel<0, 4> dlc;\n  };\n};\n\nstruct tdl1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x0198;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8,\
    \ 8> data1;\n    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct tdh1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x019C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct ti2r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01A0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<21, 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2,\
    \ 1> ide;\n    BitFieldModel<1, 1> rtr;\n    BitFieldModel<0, 1> txrq;\n  };\n\
    };\n\nstruct tdt2r\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x01A4;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> time;\n    BitFieldModel<8,\
    \ 1> tgt;\n    BitFieldModel<0, 4> dlc;\n  };\n};\n\nstruct tdl2r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01A8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8,\
    \ 8> data1;\n    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct tdh2r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01AC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct ri0r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01B0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<21, 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2,\
    \ 1> ide;\n    BitFieldModel<1, 1> rtr;\n  };\n};\n\nstruct rdt0r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01B4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> time;\n    BitFieldModel<8, 8> fmi;\n    BitFieldModel<0,\
    \ 4> dlc;\n  };\n};\n\nstruct rdl0r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006400 + 0x01B8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24,\
    \ 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8, 8> data1;\n\
    \    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct rdh0r\n{\n  constexpr static\
    \ uint32_t Address = 0x40006400 + 0x01BC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct ri1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01C0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<21, 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2,\
    \ 1> ide;\n    BitFieldModel<1, 1> rtr;\n  };\n};\n\nstruct rdt1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x01C4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> time;\n    BitFieldModel<8, 8> fmi;\n    BitFieldModel<0,\
    \ 4> dlc;\n  };\n};\n\nstruct rdl1r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006400 + 0x01C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24,\
    \ 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8, 8> data1;\n\
    \    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct rdh1r\n{\n  constexpr static\
    \ uint32_t Address = 0x40006400 + 0x01CC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct fmr\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x0200;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<8, 6> can2sb;\n    BitFieldModel<0, 1> finit;\n  };\n};\n\n\
    struct fm1r\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x0204;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fbm0;\n    BitFieldModel<1,\
    \ 1> fbm1;\n    BitFieldModel<2, 1> fbm2;\n    BitFieldModel<3, 1> fbm3;\n   \
    \ BitFieldModel<4, 1> fbm4;\n    BitFieldModel<5, 1> fbm5;\n    BitFieldModel<6,\
    \ 1> fbm6;\n    BitFieldModel<7, 1> fbm7;\n    BitFieldModel<8, 1> fbm8;\n   \
    \ BitFieldModel<9, 1> fbm9;\n    BitFieldModel<10, 1> fbm10;\n    BitFieldModel<11,\
    \ 1> fbm11;\n    BitFieldModel<12, 1> fbm12;\n    BitFieldModel<13, 1> fbm13;\n\
    \    BitFieldModel<14, 1> fbm14;\n    BitFieldModel<15, 1> fbm15;\n    BitFieldModel<16,\
    \ 1> fbm16;\n    BitFieldModel<17, 1> fbm17;\n    BitFieldModel<18, 1> fbm18;\n\
    \    BitFieldModel<19, 1> fbm19;\n    BitFieldModel<20, 1> fbm20;\n    BitFieldModel<21,\
    \ 1> fbm21;\n    BitFieldModel<22, 1> fbm22;\n    BitFieldModel<23, 1> fbm23;\n\
    \    BitFieldModel<24, 1> fbm24;\n    BitFieldModel<25, 1> fbm25;\n    BitFieldModel<26,\
    \ 1> fbm26;\n    BitFieldModel<27, 1> fbm27;\n  };\n};\n\nstruct fs1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x020C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> fsc0;\n    BitFieldModel<1, 1> fsc1;\n    BitFieldModel<2,\
    \ 1> fsc2;\n    BitFieldModel<3, 1> fsc3;\n    BitFieldModel<4, 1> fsc4;\n   \
    \ BitFieldModel<5, 1> fsc5;\n    BitFieldModel<6, 1> fsc6;\n    BitFieldModel<7,\
    \ 1> fsc7;\n    BitFieldModel<8, 1> fsc8;\n    BitFieldModel<9, 1> fsc9;\n   \
    \ BitFieldModel<10, 1> fsc10;\n    BitFieldModel<11, 1> fsc11;\n    BitFieldModel<12,\
    \ 1> fsc12;\n    BitFieldModel<13, 1> fsc13;\n    BitFieldModel<14, 1> fsc14;\n\
    \    BitFieldModel<15, 1> fsc15;\n    BitFieldModel<16, 1> fsc16;\n    BitFieldModel<17,\
    \ 1> fsc17;\n    BitFieldModel<18, 1> fsc18;\n    BitFieldModel<19, 1> fsc19;\n\
    \    BitFieldModel<20, 1> fsc20;\n    BitFieldModel<21, 1> fsc21;\n    BitFieldModel<22,\
    \ 1> fsc22;\n    BitFieldModel<23, 1> fsc23;\n    BitFieldModel<24, 1> fsc24;\n\
    \    BitFieldModel<25, 1> fsc25;\n    BitFieldModel<26, 1> fsc26;\n    BitFieldModel<27,\
    \ 1> fsc27;\n  };\n};\n\nstruct ffa1r\n{\n  constexpr static uint32_t Address\
    \ = 0x40006400 + 0x0214;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> ffa0;\n    BitFieldModel<1, 1> ffa1;\n    BitFieldModel<2, 1> ffa2;\n   \
    \ BitFieldModel<3, 1> ffa3;\n    BitFieldModel<4, 1> ffa4;\n    BitFieldModel<5,\
    \ 1> ffa5;\n    BitFieldModel<6, 1> ffa6;\n    BitFieldModel<7, 1> ffa7;\n   \
    \ BitFieldModel<8, 1> ffa8;\n    BitFieldModel<9, 1> ffa9;\n    BitFieldModel<10,\
    \ 1> ffa10;\n    BitFieldModel<11, 1> ffa11;\n    BitFieldModel<12, 1> ffa12;\n\
    \    BitFieldModel<13, 1> ffa13;\n    BitFieldModel<14, 1> ffa14;\n    BitFieldModel<15,\
    \ 1> ffa15;\n    BitFieldModel<16, 1> ffa16;\n    BitFieldModel<17, 1> ffa17;\n\
    \    BitFieldModel<18, 1> ffa18;\n    BitFieldModel<19, 1> ffa19;\n    BitFieldModel<20,\
    \ 1> ffa20;\n    BitFieldModel<21, 1> ffa21;\n    BitFieldModel<22, 1> ffa22;\n\
    \    BitFieldModel<23, 1> ffa23;\n    BitFieldModel<24, 1> ffa24;\n    BitFieldModel<25,\
    \ 1> ffa25;\n    BitFieldModel<26, 1> ffa26;\n    BitFieldModel<27, 1> ffa27;\n\
    \  };\n};\n\nstruct fa1r\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x021C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fact0;\n\
    \    BitFieldModel<1, 1> fact1;\n    BitFieldModel<2, 1> fact2;\n    BitFieldModel<3,\
    \ 1> fact3;\n    BitFieldModel<4, 1> fact4;\n    BitFieldModel<5, 1> fact5;\n\
    \    BitFieldModel<6, 1> fact6;\n    BitFieldModel<7, 1> fact7;\n    BitFieldModel<8,\
    \ 1> fact8;\n    BitFieldModel<9, 1> fact9;\n    BitFieldModel<10, 1> fact10;\n\
    \    BitFieldModel<11, 1> fact11;\n    BitFieldModel<12, 1> fact12;\n    BitFieldModel<13,\
    \ 1> fact13;\n    BitFieldModel<14, 1> fact14;\n    BitFieldModel<15, 1> fact15;\n\
    \    BitFieldModel<16, 1> fact16;\n    BitFieldModel<17, 1> fact17;\n    BitFieldModel<18,\
    \ 1> fact18;\n    BitFieldModel<19, 1> fact19;\n    BitFieldModel<20, 1> fact20;\n\
    \    BitFieldModel<21, 1> fact21;\n    BitFieldModel<22, 1> fact22;\n    BitFieldModel<23,\
    \ 1> fact23;\n    BitFieldModel<24, 1> fact24;\n    BitFieldModel<25, 1> fact25;\n\
    \    BitFieldModel<26, 1> fact26;\n    BitFieldModel<27, 1> fact27;\n  };\n};\n\
    \nstruct f0r1\n{\n  constexpr static uint32_t Address = 0x40006400 + 0x0240;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n    BitFieldModel<1,\
    \ 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3, 1> fb3;\n    BitFieldModel<4,\
    \ 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6, 1> fb6;\n    BitFieldModel<7,\
    \ 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9, 1> fb9;\n    BitFieldModel<10,\
    \ 1> fb10;\n    BitFieldModel<11, 1> fb11;\n    BitFieldModel<12, 1> fb12;\n \
    \   BitFieldModel<13, 1> fb13;\n    BitFieldModel<14, 1> fb14;\n    BitFieldModel<15,\
    \ 1> fb15;\n    BitFieldModel<16, 1> fb16;\n    BitFieldModel<17, 1> fb17;\n \
    \   BitFieldModel<18, 1> fb18;\n    BitFieldModel<19, 1> fb19;\n    BitFieldModel<20,\
    \ 1> fb20;\n    BitFieldModel<21, 1> fb21;\n    BitFieldModel<22, 1> fb22;\n \
    \   BitFieldModel<23, 1> fb23;\n    BitFieldModel<24, 1> fb24;\n    BitFieldModel<25,\
    \ 1> fb25;\n    BitFieldModel<26, 1> fb26;\n    BitFieldModel<27, 1> fb27;\n \
    \   BitFieldModel<28, 1> fb28;\n    BitFieldModel<29, 1> fb29;\n    BitFieldModel<30,\
    \ 1> fb30;\n    BitFieldModel<31, 1> fb31;\n  };\n};\n\nstruct f0r2\n{\n  constexpr\
    \ static uint32_t Address = 0x40006400 + 0x0244;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> fb0;\n    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2,\
    \ 1> fb2;\n    BitFieldModel<3, 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5,\
    \ 1> fb5;\n    BitFieldModel<6, 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8,\
    \ 1> fb8;\n    BitFieldModel<9, 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11,\
    \ 1> fb11;\n    BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n \
    \   BitFieldModel<14, 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16,\
    \ 1> fb16;\n    BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n \
    \   BitFieldModel<19, 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21,\
    \ 1> fb21;\n    BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n \
    \   BitFieldModel<24, 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26,\
    \ 1> fb26;\n    BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n \
    \   BitFieldModel<29, 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31,\
    \ 1> fb31;\n  };\n};\n\nstruct f1r1\n{\n  constexpr static uint32_t Address =\
    \ 0x40006400 + 0x0248;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> fb0;\n    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f1r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x024C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f2r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0250;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f2r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0254;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f3r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0258;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f3r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x025C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f4r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0260;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f4r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0264;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f5r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0268;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f5r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x026C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f6r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0270;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f6r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0274;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f7r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0278;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f7r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x027C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f8r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0280;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f8r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0284;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f9r1\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x0288;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f9r2\n{\n  constexpr static uint32_t Address = 0x40006400 +\
    \ 0x028C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f10r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0290;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f10r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0294;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f11r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0298;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f11r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x029C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f12r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02A0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f12r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02A4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f13r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02A8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f13r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02AC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f14r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02B0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f14r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02B4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f15r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02B8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f15r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02BC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f16r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02C0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f16r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02C4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f17r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f17r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02CC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f18r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02D0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f18r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02D4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f19r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02D8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f19r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02DC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f20r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02E0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f20r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02E4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f21r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02E8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f21r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02EC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f22r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02F0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f22r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02F4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f23r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02F8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f23r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x02FC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f24r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0300;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f24r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0304;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f25r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0308;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f25r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x030C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f26r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0310;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f26r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0314;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f27r1\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x0318;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f27r2\n{\n  constexpr static uint32_t Address = 0x40006400\
    \ + 0x031C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\n}\n\n#endif /* DRAL_STM32F446_CAN1_H */\n"
  name: CAN1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_CAN2_H\n#define DRAL_STM32F446_CAN2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ mcr\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 1> dbf;\n    BitFieldModel<15,\
    \ 1> reset;\n    BitFieldModel<7, 1> ttcm;\n    BitFieldModel<6, 1> abom;\n  \
    \  BitFieldModel<5, 1> awum;\n    BitFieldModel<4, 1> nart;\n    BitFieldModel<3,\
    \ 1> rflm;\n    BitFieldModel<2, 1> txfp;\n    BitFieldModel<1, 1> sleep;\n  \
    \  BitFieldModel<0, 1> inrq;\n  };\n};\n\nstruct msr\n{\n  constexpr static uint32_t\
    \ Address = 0x40006800 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<11,\
    \ 1> rx;\n    BitFieldModel<10, 1> samp;\n    BitFieldModel<9, 1> rxm;\n    BitFieldModel<8,\
    \ 1> txm;\n    BitFieldModel<4, 1> slaki;\n    BitFieldModel<3, 1> wkui;\n   \
    \ BitFieldModel<2, 1> erri;\n    BitFieldModel<1, 1> slak;\n    BitFieldModel<0,\
    \ 1> inak;\n  };\n};\n\nstruct tsr\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> low2;\n\
    \    BitFieldModel<30, 1> low1;\n    BitFieldModel<29, 1> low0;\n    BitFieldModel<28,\
    \ 1> tme2;\n    BitFieldModel<27, 1> tme1;\n    BitFieldModel<26, 1> tme0;\n \
    \   BitFieldModel<24, 2> code;\n    BitFieldModel<23, 1> abrq2;\n    BitFieldModel<19,\
    \ 1> terr2;\n    BitFieldModel<18, 1> alst2;\n    BitFieldModel<17, 1> txok2;\n\
    \    BitFieldModel<16, 1> rqcp2;\n    BitFieldModel<15, 1> abrq1;\n    BitFieldModel<11,\
    \ 1> terr1;\n    BitFieldModel<10, 1> alst1;\n    BitFieldModel<9, 1> txok1;\n\
    \    BitFieldModel<8, 1> rqcp1;\n    BitFieldModel<7, 1> abrq0;\n    BitFieldModel<3,\
    \ 1> terr0;\n    BitFieldModel<2, 1> alst0;\n    BitFieldModel<1, 1> txok0;\n\
    \    BitFieldModel<0, 1> rqcp0;\n  };\n};\n\nstruct rf0r\n{\n  constexpr static\
    \ uint32_t Address = 0x40006800 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<5, 1> rfom0;\n    BitFieldModel<4, 1> fovr0;\n    BitFieldModel<3,\
    \ 1> full0;\n    BitFieldModel<0, 2> fmp0;\n  };\n};\n\nstruct rf1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<5, 1> rfom1;\n    BitFieldModel<4, 1> fovr1;\n    BitFieldModel<3,\
    \ 1> full1;\n    BitFieldModel<0, 2> fmp1;\n  };\n};\n\nstruct ier\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<17, 1> slkie;\n    BitFieldModel<16, 1> wkuie;\n    BitFieldModel<15,\
    \ 1> errie;\n    BitFieldModel<11, 1> lecie;\n    BitFieldModel<10, 1> bofie;\n\
    \    BitFieldModel<9, 1> epvie;\n    BitFieldModel<8, 1> ewgie;\n    BitFieldModel<6,\
    \ 1> fovie1;\n    BitFieldModel<5, 1> ffie1;\n    BitFieldModel<4, 1> fmpie1;\n\
    \    BitFieldModel<3, 1> fovie0;\n    BitFieldModel<2, 1> ffie0;\n    BitFieldModel<1,\
    \ 1> fmpie0;\n    BitFieldModel<0, 1> tmeie;\n  };\n};\n\nstruct esr\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> rec;\n    BitFieldModel<16, 8> tec;\n    BitFieldModel<4,\
    \ 3> lec;\n    BitFieldModel<2, 1> boff;\n    BitFieldModel<1, 1> epvf;\n    BitFieldModel<0,\
    \ 1> ewgf;\n  };\n};\n\nstruct btr\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31, 1> silm;\n\
    \    BitFieldModel<30, 1> lbkm;\n    BitFieldModel<24, 2> sjw;\n    BitFieldModel<20,\
    \ 3> ts2;\n    BitFieldModel<16, 4> ts1;\n    BitFieldModel<0, 10> brp;\n  };\n\
    };\n\nstruct ti0r\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x0180;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<21, 11> stid;\n    BitFieldModel<3,\
    \ 18> exid;\n    BitFieldModel<2, 1> ide;\n    BitFieldModel<1, 1> rtr;\n    BitFieldModel<0,\
    \ 1> txrq;\n  };\n};\n\nstruct tdt0r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006800 + 0x0184;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 16> time;\n    BitFieldModel<8, 1> tgt;\n    BitFieldModel<0, 4> dlc;\n  };\n\
    };\n\nstruct tdl0r\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x0188;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 8> data3;\n    BitFieldModel<16,\
    \ 8> data2;\n    BitFieldModel<8, 8> data1;\n    BitFieldModel<0, 8> data0;\n\
    \  };\n};\n\nstruct tdh0r\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x018C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 8> data7;\n\
    \    BitFieldModel<16, 8> data6;\n    BitFieldModel<8, 8> data5;\n    BitFieldModel<0,\
    \ 8> data4;\n  };\n};\n\nstruct ti1r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006800 + 0x0190;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<21,\
    \ 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2, 1> ide;\n  \
    \  BitFieldModel<1, 1> rtr;\n    BitFieldModel<0, 1> txrq;\n  };\n};\n\nstruct\
    \ tdt1r\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x0194;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 16> time;\n    BitFieldModel<8,\
    \ 1> tgt;\n    BitFieldModel<0, 4> dlc;\n  };\n};\n\nstruct tdl1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x0198;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8,\
    \ 8> data1;\n    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct tdh1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x019C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct ti2r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01A0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<21, 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2,\
    \ 1> ide;\n    BitFieldModel<1, 1> rtr;\n    BitFieldModel<0, 1> txrq;\n  };\n\
    };\n\nstruct tdt2r\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x01A4;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> time;\n    BitFieldModel<8,\
    \ 1> tgt;\n    BitFieldModel<0, 4> dlc;\n  };\n};\n\nstruct tdl2r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01A8;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8,\
    \ 8> data1;\n    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct tdh2r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01AC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct ri0r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01B0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<21, 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2,\
    \ 1> ide;\n    BitFieldModel<1, 1> rtr;\n  };\n};\n\nstruct rdt0r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01B4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> time;\n    BitFieldModel<8, 8> fmi;\n    BitFieldModel<0,\
    \ 4> dlc;\n  };\n};\n\nstruct rdl0r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006800 + 0x01B8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24,\
    \ 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8, 8> data1;\n\
    \    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct rdh0r\n{\n  constexpr static\
    \ uint32_t Address = 0x40006800 + 0x01BC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct ri1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01C0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<21, 11> stid;\n    BitFieldModel<3, 18> exid;\n    BitFieldModel<2,\
    \ 1> ide;\n    BitFieldModel<1, 1> rtr;\n  };\n};\n\nstruct rdt1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x01C4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> time;\n    BitFieldModel<8, 8> fmi;\n    BitFieldModel<0,\
    \ 4> dlc;\n  };\n};\n\nstruct rdl1r\n{\n  constexpr static uint32_t Address =\
    \ 0x40006800 + 0x01C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<24,\
    \ 8> data3;\n    BitFieldModel<16, 8> data2;\n    BitFieldModel<8, 8> data1;\n\
    \    BitFieldModel<0, 8> data0;\n  };\n};\n\nstruct rdh1r\n{\n  constexpr static\
    \ uint32_t Address = 0x40006800 + 0x01CC;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<24, 8> data7;\n    BitFieldModel<16, 8> data6;\n    BitFieldModel<8,\
    \ 8> data5;\n    BitFieldModel<0, 8> data4;\n  };\n};\n\nstruct fmr\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x0200;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<8, 6> can2sb;\n    BitFieldModel<0, 1> finit;\n  };\n};\n\n\
    struct fm1r\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x0204;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fbm0;\n    BitFieldModel<1,\
    \ 1> fbm1;\n    BitFieldModel<2, 1> fbm2;\n    BitFieldModel<3, 1> fbm3;\n   \
    \ BitFieldModel<4, 1> fbm4;\n    BitFieldModel<5, 1> fbm5;\n    BitFieldModel<6,\
    \ 1> fbm6;\n    BitFieldModel<7, 1> fbm7;\n    BitFieldModel<8, 1> fbm8;\n   \
    \ BitFieldModel<9, 1> fbm9;\n    BitFieldModel<10, 1> fbm10;\n    BitFieldModel<11,\
    \ 1> fbm11;\n    BitFieldModel<12, 1> fbm12;\n    BitFieldModel<13, 1> fbm13;\n\
    \    BitFieldModel<14, 1> fbm14;\n    BitFieldModel<15, 1> fbm15;\n    BitFieldModel<16,\
    \ 1> fbm16;\n    BitFieldModel<17, 1> fbm17;\n    BitFieldModel<18, 1> fbm18;\n\
    \    BitFieldModel<19, 1> fbm19;\n    BitFieldModel<20, 1> fbm20;\n    BitFieldModel<21,\
    \ 1> fbm21;\n    BitFieldModel<22, 1> fbm22;\n    BitFieldModel<23, 1> fbm23;\n\
    \    BitFieldModel<24, 1> fbm24;\n    BitFieldModel<25, 1> fbm25;\n    BitFieldModel<26,\
    \ 1> fbm26;\n    BitFieldModel<27, 1> fbm27;\n  };\n};\n\nstruct fs1r\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x020C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> fsc0;\n    BitFieldModel<1, 1> fsc1;\n    BitFieldModel<2,\
    \ 1> fsc2;\n    BitFieldModel<3, 1> fsc3;\n    BitFieldModel<4, 1> fsc4;\n   \
    \ BitFieldModel<5, 1> fsc5;\n    BitFieldModel<6, 1> fsc6;\n    BitFieldModel<7,\
    \ 1> fsc7;\n    BitFieldModel<8, 1> fsc8;\n    BitFieldModel<9, 1> fsc9;\n   \
    \ BitFieldModel<10, 1> fsc10;\n    BitFieldModel<11, 1> fsc11;\n    BitFieldModel<12,\
    \ 1> fsc12;\n    BitFieldModel<13, 1> fsc13;\n    BitFieldModel<14, 1> fsc14;\n\
    \    BitFieldModel<15, 1> fsc15;\n    BitFieldModel<16, 1> fsc16;\n    BitFieldModel<17,\
    \ 1> fsc17;\n    BitFieldModel<18, 1> fsc18;\n    BitFieldModel<19, 1> fsc19;\n\
    \    BitFieldModel<20, 1> fsc20;\n    BitFieldModel<21, 1> fsc21;\n    BitFieldModel<22,\
    \ 1> fsc22;\n    BitFieldModel<23, 1> fsc23;\n    BitFieldModel<24, 1> fsc24;\n\
    \    BitFieldModel<25, 1> fsc25;\n    BitFieldModel<26, 1> fsc26;\n    BitFieldModel<27,\
    \ 1> fsc27;\n  };\n};\n\nstruct ffa1r\n{\n  constexpr static uint32_t Address\
    \ = 0x40006800 + 0x0214;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> ffa0;\n    BitFieldModel<1, 1> ffa1;\n    BitFieldModel<2, 1> ffa2;\n   \
    \ BitFieldModel<3, 1> ffa3;\n    BitFieldModel<4, 1> ffa4;\n    BitFieldModel<5,\
    \ 1> ffa5;\n    BitFieldModel<6, 1> ffa6;\n    BitFieldModel<7, 1> ffa7;\n   \
    \ BitFieldModel<8, 1> ffa8;\n    BitFieldModel<9, 1> ffa9;\n    BitFieldModel<10,\
    \ 1> ffa10;\n    BitFieldModel<11, 1> ffa11;\n    BitFieldModel<12, 1> ffa12;\n\
    \    BitFieldModel<13, 1> ffa13;\n    BitFieldModel<14, 1> ffa14;\n    BitFieldModel<15,\
    \ 1> ffa15;\n    BitFieldModel<16, 1> ffa16;\n    BitFieldModel<17, 1> ffa17;\n\
    \    BitFieldModel<18, 1> ffa18;\n    BitFieldModel<19, 1> ffa19;\n    BitFieldModel<20,\
    \ 1> ffa20;\n    BitFieldModel<21, 1> ffa21;\n    BitFieldModel<22, 1> ffa22;\n\
    \    BitFieldModel<23, 1> ffa23;\n    BitFieldModel<24, 1> ffa24;\n    BitFieldModel<25,\
    \ 1> ffa25;\n    BitFieldModel<26, 1> ffa26;\n    BitFieldModel<27, 1> ffa27;\n\
    \  };\n};\n\nstruct fa1r\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x021C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fact0;\n\
    \    BitFieldModel<1, 1> fact1;\n    BitFieldModel<2, 1> fact2;\n    BitFieldModel<3,\
    \ 1> fact3;\n    BitFieldModel<4, 1> fact4;\n    BitFieldModel<5, 1> fact5;\n\
    \    BitFieldModel<6, 1> fact6;\n    BitFieldModel<7, 1> fact7;\n    BitFieldModel<8,\
    \ 1> fact8;\n    BitFieldModel<9, 1> fact9;\n    BitFieldModel<10, 1> fact10;\n\
    \    BitFieldModel<11, 1> fact11;\n    BitFieldModel<12, 1> fact12;\n    BitFieldModel<13,\
    \ 1> fact13;\n    BitFieldModel<14, 1> fact14;\n    BitFieldModel<15, 1> fact15;\n\
    \    BitFieldModel<16, 1> fact16;\n    BitFieldModel<17, 1> fact17;\n    BitFieldModel<18,\
    \ 1> fact18;\n    BitFieldModel<19, 1> fact19;\n    BitFieldModel<20, 1> fact20;\n\
    \    BitFieldModel<21, 1> fact21;\n    BitFieldModel<22, 1> fact22;\n    BitFieldModel<23,\
    \ 1> fact23;\n    BitFieldModel<24, 1> fact24;\n    BitFieldModel<25, 1> fact25;\n\
    \    BitFieldModel<26, 1> fact26;\n    BitFieldModel<27, 1> fact27;\n  };\n};\n\
    \nstruct f0r1\n{\n  constexpr static uint32_t Address = 0x40006800 + 0x0240;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n    BitFieldModel<1,\
    \ 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3, 1> fb3;\n    BitFieldModel<4,\
    \ 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6, 1> fb6;\n    BitFieldModel<7,\
    \ 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9, 1> fb9;\n    BitFieldModel<10,\
    \ 1> fb10;\n    BitFieldModel<11, 1> fb11;\n    BitFieldModel<12, 1> fb12;\n \
    \   BitFieldModel<13, 1> fb13;\n    BitFieldModel<14, 1> fb14;\n    BitFieldModel<15,\
    \ 1> fb15;\n    BitFieldModel<16, 1> fb16;\n    BitFieldModel<17, 1> fb17;\n \
    \   BitFieldModel<18, 1> fb18;\n    BitFieldModel<19, 1> fb19;\n    BitFieldModel<20,\
    \ 1> fb20;\n    BitFieldModel<21, 1> fb21;\n    BitFieldModel<22, 1> fb22;\n \
    \   BitFieldModel<23, 1> fb23;\n    BitFieldModel<24, 1> fb24;\n    BitFieldModel<25,\
    \ 1> fb25;\n    BitFieldModel<26, 1> fb26;\n    BitFieldModel<27, 1> fb27;\n \
    \   BitFieldModel<28, 1> fb28;\n    BitFieldModel<29, 1> fb29;\n    BitFieldModel<30,\
    \ 1> fb30;\n    BitFieldModel<31, 1> fb31;\n  };\n};\n\nstruct f0r2\n{\n  constexpr\
    \ static uint32_t Address = 0x40006800 + 0x0244;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> fb0;\n    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2,\
    \ 1> fb2;\n    BitFieldModel<3, 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5,\
    \ 1> fb5;\n    BitFieldModel<6, 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8,\
    \ 1> fb8;\n    BitFieldModel<9, 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11,\
    \ 1> fb11;\n    BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n \
    \   BitFieldModel<14, 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16,\
    \ 1> fb16;\n    BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n \
    \   BitFieldModel<19, 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21,\
    \ 1> fb21;\n    BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n \
    \   BitFieldModel<24, 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26,\
    \ 1> fb26;\n    BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n \
    \   BitFieldModel<29, 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31,\
    \ 1> fb31;\n  };\n};\n\nstruct f1r1\n{\n  constexpr static uint32_t Address =\
    \ 0x40006800 + 0x0248;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> fb0;\n    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f1r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x024C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f2r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0250;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f2r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0254;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f3r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0258;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f3r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x025C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f4r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0260;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f4r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0264;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f5r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0268;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f5r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x026C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f6r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0270;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f6r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0274;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f7r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0278;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f7r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x027C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f8r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0280;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f8r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0284;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f9r1\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x0288;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f9r2\n{\n  constexpr static uint32_t Address = 0x40006800 +\
    \ 0x028C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n \
    \   BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f10r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0290;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f10r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0294;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f11r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0298;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f11r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x029C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f12r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02A0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f12r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02A4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f13r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02A8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f13r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02AC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f14r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02B0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f14r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02B4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f15r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02B8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f15r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02BC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f16r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02C0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f16r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02C4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f17r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f17r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02CC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f18r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02D0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f18r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02D4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f19r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02D8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f19r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02DC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f20r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02E0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f20r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02E4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f21r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02E8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f21r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02EC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f22r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02F0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f22r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02F4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f23r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02F8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f23r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x02FC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f24r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0300;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f24r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0304;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f25r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0308;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f25r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x030C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f26r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0310;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f26r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0314;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f27r1\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x0318;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\nstruct f27r2\n{\n  constexpr static uint32_t Address = 0x40006800\
    \ + 0x031C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> fb0;\n\
    \    BitFieldModel<1, 1> fb1;\n    BitFieldModel<2, 1> fb2;\n    BitFieldModel<3,\
    \ 1> fb3;\n    BitFieldModel<4, 1> fb4;\n    BitFieldModel<5, 1> fb5;\n    BitFieldModel<6,\
    \ 1> fb6;\n    BitFieldModel<7, 1> fb7;\n    BitFieldModel<8, 1> fb8;\n    BitFieldModel<9,\
    \ 1> fb9;\n    BitFieldModel<10, 1> fb10;\n    BitFieldModel<11, 1> fb11;\n  \
    \  BitFieldModel<12, 1> fb12;\n    BitFieldModel<13, 1> fb13;\n    BitFieldModel<14,\
    \ 1> fb14;\n    BitFieldModel<15, 1> fb15;\n    BitFieldModel<16, 1> fb16;\n \
    \   BitFieldModel<17, 1> fb17;\n    BitFieldModel<18, 1> fb18;\n    BitFieldModel<19,\
    \ 1> fb19;\n    BitFieldModel<20, 1> fb20;\n    BitFieldModel<21, 1> fb21;\n \
    \   BitFieldModel<22, 1> fb22;\n    BitFieldModel<23, 1> fb23;\n    BitFieldModel<24,\
    \ 1> fb24;\n    BitFieldModel<25, 1> fb25;\n    BitFieldModel<26, 1> fb26;\n \
    \   BitFieldModel<27, 1> fb27;\n    BitFieldModel<28, 1> fb28;\n    BitFieldModel<29,\
    \ 1> fb29;\n    BitFieldModel<30, 1> fb30;\n    BitFieldModel<31, 1> fb31;\n \
    \ };\n};\n\n}\n\n#endif /* DRAL_STM32F446_CAN2_H */\n"
  name: CAN2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_NVIC_H\n#define DRAL_STM32F446_NVIC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ iser0\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> setena;\n  };\n};\n\nstruct\
    \ iser1\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> setena;\n  };\n};\n\nstruct\
    \ iser2\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> setena;\n  };\n};\n\nstruct\
    \ icer0\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0080;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> clrena;\n  };\n};\n\nstruct\
    \ icer1\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0084;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> clrena;\n  };\n};\n\nstruct\
    \ icer2\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0088;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> clrena;\n  };\n};\n\nstruct\
    \ ispr0\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0100;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> setpend;\n  };\n};\n\nstruct\
    \ ispr1\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0104;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> setpend;\n  };\n};\n\nstruct\
    \ ispr2\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0108;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> setpend;\n  };\n};\n\nstruct\
    \ icpr0\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0180;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> clrpend;\n  };\n};\n\nstruct\
    \ icpr1\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0184;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> clrpend;\n  };\n};\n\nstruct\
    \ icpr2\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0188;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> clrpend;\n  };\n};\n\nstruct\
    \ iabr0\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0200;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> active;\n  };\n};\n\nstruct\
    \ iabr1\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0204;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> active;\n  };\n};\n\nstruct\
    \ iabr2\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0208;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> active;\n  };\n};\n\nstruct\
    \ ipr0\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0300;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8,\
    \ 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n\
    \  };\n};\n\nstruct ipr1\n{\n  constexpr static uint32_t Address = 0xE000E100\
    \ + 0x0304;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n\
    \    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24,\
    \ 8> ipr_n3;\n  };\n};\n\nstruct ipr2\n{\n  constexpr static uint32_t Address\
    \ = 0xE000E100 + 0x0308;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n\
    \    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr3\n{\n  constexpr static\
    \ uint32_t Address = 0xE000E100 + 0x030C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16,\
    \ 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr4\n{\n \
    \ constexpr static uint32_t Address = 0xE000E100 + 0x0310;\n  union\n  {\n   \
    \ uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n\
    \    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\
    \nstruct ipr5\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0314;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8,\
    \ 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n\
    \  };\n};\n\nstruct ipr6\n{\n  constexpr static uint32_t Address = 0xE000E100\
    \ + 0x0318;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n\
    \    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24,\
    \ 8> ipr_n3;\n  };\n};\n\nstruct ipr7\n{\n  constexpr static uint32_t Address\
    \ = 0xE000E100 + 0x031C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n\
    \    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr8\n{\n  constexpr static\
    \ uint32_t Address = 0xE000E100 + 0x0320;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16,\
    \ 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr9\n{\n \
    \ constexpr static uint32_t Address = 0xE000E100 + 0x0324;\n  union\n  {\n   \
    \ uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n\
    \    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\
    \nstruct ipr10\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0328;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8,\
    \ 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n\
    \  };\n};\n\nstruct ipr11\n{\n  constexpr static uint32_t Address = 0xE000E100\
    \ + 0x032C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n\
    \    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24,\
    \ 8> ipr_n3;\n  };\n};\n\nstruct ipr12\n{\n  constexpr static uint32_t Address\
    \ = 0xE000E100 + 0x0330;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n\
    \    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr13\n{\n  constexpr static\
    \ uint32_t Address = 0xE000E100 + 0x0334;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16,\
    \ 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr14\n{\n\
    \  constexpr static uint32_t Address = 0xE000E100 + 0x0338;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n\
    \    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\
    \nstruct ipr15\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x033C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8,\
    \ 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n\
    \  };\n};\n\nstruct ipr16\n{\n  constexpr static uint32_t Address = 0xE000E100\
    \ + 0x0340;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n\
    \    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24,\
    \ 8> ipr_n3;\n  };\n};\n\nstruct ipr17\n{\n  constexpr static uint32_t Address\
    \ = 0xE000E100 + 0x0344;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n\
    \    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr18\n{\n  constexpr static\
    \ uint32_t Address = 0xE000E100 + 0x0348;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n    BitFieldModel<16,\
    \ 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\nstruct ipr19\n{\n\
    \  constexpr static uint32_t Address = 0xE000E100 + 0x034C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8, 8> ipr_n1;\n\
    \    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n  };\n};\n\
    \nstruct ipr20\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0350;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> ipr_n0;\n    BitFieldModel<8,\
    \ 8> ipr_n1;\n    BitFieldModel<16, 8> ipr_n2;\n    BitFieldModel<24, 8> ipr_n3;\n\
    \  };\n};\n\nstruct ipr21\n{\n  constexpr static uint32_t Address = 0xE000E100\
    \ + 0x0354;\n  union\n  {\n    uint32_t value;\n    \n  };\n};\n\nstruct ipr22\n\
    {\n  constexpr static uint32_t Address = 0xE000E100 + 0x0358;\n  union\n  {\n\
    \    uint32_t value;\n    \n  };\n};\n\nstruct ipr23\n{\n  constexpr static uint32_t\
    \ Address = 0xE000E100 + 0x035C;\n  union\n  {\n    uint32_t value;\n    \n  };\n\
    };\n\nstruct ipr24\n{\n  constexpr static uint32_t Address = 0xE000E100 + 0x0360;\n\
    \  union\n  {\n    uint32_t value;\n    \n  };\n};\n\nstruct ipr25\n{\n  constexpr\
    \ static uint32_t Address = 0xE000E100 + 0x0364;\n  union\n  {\n    uint32_t value;\n\
    \    \n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_NVIC_H */\n"
  name: NVIC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_FLASH_H\n#define DRAL_STM32F446_FLASH_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ acr\n{\n  constexpr static uint32_t Address = 0x40023C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 3> latency;\n    BitFieldModel<8,\
    \ 1> prften;\n    BitFieldModel<9, 1> icen;\n    BitFieldModel<10, 1> dcen;\n\
    \    BitFieldModel<11, 1> icrst;\n    BitFieldModel<12, 1> dcrst;\n  };\n};\n\n\
    struct keyr\n{\n  constexpr static uint32_t Address = 0x40023C00 + 0x0004;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> key;\n  };\n};\n\n\
    struct optkeyr\n{\n  constexpr static uint32_t Address = 0x40023C00 + 0x0008;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> optkey;\n  };\n};\n\
    \nstruct sr\n{\n  constexpr static uint32_t Address = 0x40023C00 + 0x000C;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> eop;\n    BitFieldModel<1,\
    \ 1> operr;\n    BitFieldModel<4, 1> wrperr;\n    BitFieldModel<5, 1> pgaerr;\n\
    \    BitFieldModel<6, 1> pgperr;\n    BitFieldModel<7, 1> pgserr;\n    BitFieldModel<8,\
    \ 1> rderr;\n    BitFieldModel<16, 1> bsy;\n  };\n};\n\nstruct cr\n{\n  constexpr\
    \ static uint32_t Address = 0x40023C00 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> pg;\n    BitFieldModel<1, 1> ser;\n    BitFieldModel<2,\
    \ 1> mer;\n    BitFieldModel<3, 4> snb;\n    BitFieldModel<8, 2> psize;\n    BitFieldModel<16,\
    \ 1> strt;\n    BitFieldModel<24, 1> eopie;\n    BitFieldModel<25, 1> errie;\n\
    \    BitFieldModel<31, 1> lock;\n  };\n};\n\nstruct optcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40023C00 + 0x0014;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> optlock;\n    BitFieldModel<1, 1> optstrt;\n    BitFieldModel<2,\
    \ 2> bor_lev;\n    BitFieldModel<5, 1> wdg_sw;\n    BitFieldModel<6, 1> nrst_stop;\n\
    \    BitFieldModel<7, 1> nrst_stdby;\n    BitFieldModel<8, 8> rdp;\n    BitFieldModel<16,\
    \ 8> nwrp;\n    BitFieldModel<31, 1> sprmod;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_FLASH_H\
    \ */\n"
  name: FLASH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_EXTI_H\n#define DRAL_STM32F446_EXTI_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ imr\n{\n  constexpr static uint32_t Address = 0x40013C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> mr0;\n    BitFieldModel<1,\
    \ 1> mr1;\n    BitFieldModel<2, 1> mr2;\n    BitFieldModel<3, 1> mr3;\n    BitFieldModel<4,\
    \ 1> mr4;\n    BitFieldModel<5, 1> mr5;\n    BitFieldModel<6, 1> mr6;\n    BitFieldModel<7,\
    \ 1> mr7;\n    BitFieldModel<8, 1> mr8;\n    BitFieldModel<9, 1> mr9;\n    BitFieldModel<10,\
    \ 1> mr10;\n    BitFieldModel<11, 1> mr11;\n    BitFieldModel<12, 1> mr12;\n \
    \   BitFieldModel<13, 1> mr13;\n    BitFieldModel<14, 1> mr14;\n    BitFieldModel<15,\
    \ 1> mr15;\n    BitFieldModel<16, 1> mr16;\n    BitFieldModel<17, 1> mr17;\n \
    \   BitFieldModel<18, 1> mr18;\n    BitFieldModel<19, 1> mr19;\n    BitFieldModel<20,\
    \ 1> mr20;\n    BitFieldModel<21, 1> mr21;\n    BitFieldModel<22, 1> mr22;\n \
    \ };\n};\n\nstruct emr\n{\n  constexpr static uint32_t Address = 0x40013C00 +\
    \ 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> mr0;\n \
    \   BitFieldModel<1, 1> mr1;\n    BitFieldModel<2, 1> mr2;\n    BitFieldModel<3,\
    \ 1> mr3;\n    BitFieldModel<4, 1> mr4;\n    BitFieldModel<5, 1> mr5;\n    BitFieldModel<6,\
    \ 1> mr6;\n    BitFieldModel<7, 1> mr7;\n    BitFieldModel<8, 1> mr8;\n    BitFieldModel<9,\
    \ 1> mr9;\n    BitFieldModel<10, 1> mr10;\n    BitFieldModel<11, 1> mr11;\n  \
    \  BitFieldModel<12, 1> mr12;\n    BitFieldModel<13, 1> mr13;\n    BitFieldModel<14,\
    \ 1> mr14;\n    BitFieldModel<15, 1> mr15;\n    BitFieldModel<16, 1> mr16;\n \
    \   BitFieldModel<17, 1> mr17;\n    BitFieldModel<18, 1> mr18;\n    BitFieldModel<19,\
    \ 1> mr19;\n    BitFieldModel<20, 1> mr20;\n    BitFieldModel<21, 1> mr21;\n \
    \   BitFieldModel<22, 1> mr22;\n  };\n};\n\nstruct rtsr\n{\n  constexpr static\
    \ uint32_t Address = 0x40013C00 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> tr0;\n    BitFieldModel<1, 1> tr1;\n    BitFieldModel<2,\
    \ 1> tr2;\n    BitFieldModel<3, 1> tr3;\n    BitFieldModel<4, 1> tr4;\n    BitFieldModel<5,\
    \ 1> tr5;\n    BitFieldModel<6, 1> tr6;\n    BitFieldModel<7, 1> tr7;\n    BitFieldModel<8,\
    \ 1> tr8;\n    BitFieldModel<9, 1> tr9;\n    BitFieldModel<10, 1> tr10;\n    BitFieldModel<11,\
    \ 1> tr11;\n    BitFieldModel<12, 1> tr12;\n    BitFieldModel<13, 1> tr13;\n \
    \   BitFieldModel<14, 1> tr14;\n    BitFieldModel<15, 1> tr15;\n    BitFieldModel<16,\
    \ 1> tr16;\n    BitFieldModel<17, 1> tr17;\n    BitFieldModel<18, 1> tr18;\n \
    \   BitFieldModel<19, 1> tr19;\n    BitFieldModel<20, 1> tr20;\n    BitFieldModel<21,\
    \ 1> tr21;\n    BitFieldModel<22, 1> tr22;\n  };\n};\n\nstruct ftsr\n{\n  constexpr\
    \ static uint32_t Address = 0x40013C00 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> tr0;\n    BitFieldModel<1, 1> tr1;\n    BitFieldModel<2,\
    \ 1> tr2;\n    BitFieldModel<3, 1> tr3;\n    BitFieldModel<4, 1> tr4;\n    BitFieldModel<5,\
    \ 1> tr5;\n    BitFieldModel<6, 1> tr6;\n    BitFieldModel<7, 1> tr7;\n    BitFieldModel<8,\
    \ 1> tr8;\n    BitFieldModel<9, 1> tr9;\n    BitFieldModel<10, 1> tr10;\n    BitFieldModel<11,\
    \ 1> tr11;\n    BitFieldModel<12, 1> tr12;\n    BitFieldModel<13, 1> tr13;\n \
    \   BitFieldModel<14, 1> tr14;\n    BitFieldModel<15, 1> tr15;\n    BitFieldModel<16,\
    \ 1> tr16;\n    BitFieldModel<17, 1> tr17;\n    BitFieldModel<18, 1> tr18;\n \
    \   BitFieldModel<19, 1> tr19;\n    BitFieldModel<20, 1> tr20;\n    BitFieldModel<21,\
    \ 1> tr21;\n    BitFieldModel<22, 1> tr22;\n  };\n};\n\nstruct swier\n{\n  constexpr\
    \ static uint32_t Address = 0x40013C00 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> swier0;\n    BitFieldModel<1, 1> swier1;\n    BitFieldModel<2,\
    \ 1> swier2;\n    BitFieldModel<3, 1> swier3;\n    BitFieldModel<4, 1> swier4;\n\
    \    BitFieldModel<5, 1> swier5;\n    BitFieldModel<6, 1> swier6;\n    BitFieldModel<7,\
    \ 1> swier7;\n    BitFieldModel<8, 1> swier8;\n    BitFieldModel<9, 1> swier9;\n\
    \    BitFieldModel<10, 1> swier10;\n    BitFieldModel<11, 1> swier11;\n    BitFieldModel<12,\
    \ 1> swier12;\n    BitFieldModel<13, 1> swier13;\n    BitFieldModel<14, 1> swier14;\n\
    \    BitFieldModel<15, 1> swier15;\n    BitFieldModel<16, 1> swier16;\n    BitFieldModel<17,\
    \ 1> swier17;\n    BitFieldModel<18, 1> swier18;\n    BitFieldModel<19, 1> swier19;\n\
    \    BitFieldModel<20, 1> swier20;\n    BitFieldModel<21, 1> swier21;\n    BitFieldModel<22,\
    \ 1> swier22;\n  };\n};\n\nstruct pr\n{\n  constexpr static uint32_t Address =\
    \ 0x40013C00 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> pr0;\n    BitFieldModel<1, 1> pr1;\n    BitFieldModel<2, 1> pr2;\n    BitFieldModel<3,\
    \ 1> pr3;\n    BitFieldModel<4, 1> pr4;\n    BitFieldModel<5, 1> pr5;\n    BitFieldModel<6,\
    \ 1> pr6;\n    BitFieldModel<7, 1> pr7;\n    BitFieldModel<8, 1> pr8;\n    BitFieldModel<9,\
    \ 1> pr9;\n    BitFieldModel<10, 1> pr10;\n    BitFieldModel<11, 1> pr11;\n  \
    \  BitFieldModel<12, 1> pr12;\n    BitFieldModel<13, 1> pr13;\n    BitFieldModel<14,\
    \ 1> pr14;\n    BitFieldModel<15, 1> pr15;\n    BitFieldModel<16, 1> pr16;\n \
    \   BitFieldModel<17, 1> pr17;\n    BitFieldModel<18, 1> pr18;\n    BitFieldModel<19,\
    \ 1> pr19;\n    BitFieldModel<20, 1> pr20;\n    BitFieldModel<21, 1> pr21;\n \
    \   BitFieldModel<22, 1> pr22;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_EXTI_H\
    \ */\n"
  name: EXTI
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_HS_GLOBAL_H\n#define DRAL_STM32F446_OTG_HS_GLOBAL_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ otg_hs_gotgctl\n{\n  constexpr static uint32_t Address = 0x40040000 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> srqscs;\n    BitFieldModel<1,\
    \ 1> srq;\n    BitFieldModel<8, 1> hngscs;\n    BitFieldModel<9, 1> hnprq;\n \
    \   BitFieldModel<10, 1> hshnpen;\n    BitFieldModel<11, 1> dhnpen;\n    BitFieldModel<16,\
    \ 1> cidsts;\n    BitFieldModel<17, 1> dbct;\n    BitFieldModel<18, 1> asvld;\n\
    \    BitFieldModel<19, 1> bsvld;\n  };\n};\n\nstruct otg_hs_gotgint\n{\n  constexpr\
    \ static uint32_t Address = 0x40040000 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<2, 1> sedet;\n    BitFieldModel<8, 1> srsschg;\n    BitFieldModel<9,\
    \ 1> hnsschg;\n    BitFieldModel<17, 1> hngdet;\n    BitFieldModel<18, 1> adtochg;\n\
    \    BitFieldModel<19, 1> dbcdne;\n  };\n};\n\nstruct otg_hs_gahbcfg\n{\n  constexpr\
    \ static uint32_t Address = 0x40040000 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> gint;\n    BitFieldModel<1, 4> hbstlen;\n    BitFieldModel<5,\
    \ 1> dmaen;\n    BitFieldModel<7, 1> txfelvl;\n    BitFieldModel<8, 1> ptxfelvl;\n\
    \  };\n};\n\nstruct otg_hs_gusbcfg\n{\n  constexpr static uint32_t Address = 0x40040000\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 3> tocal;\n\
    \    BitFieldModel<6, 1> physel;\n    BitFieldModel<8, 1> srpcap;\n    BitFieldModel<9,\
    \ 1> hnpcap;\n    BitFieldModel<10, 4> trdt;\n    BitFieldModel<15, 1> phylpcs;\n\
    \    BitFieldModel<17, 1> ulpifsls;\n    BitFieldModel<18, 1> ulpiar;\n    BitFieldModel<19,\
    \ 1> ulpicsm;\n    BitFieldModel<20, 1> ulpievbusd;\n    BitFieldModel<21, 1>\
    \ ulpievbusi;\n    BitFieldModel<22, 1> tsdps;\n    BitFieldModel<23, 1> pcci;\n\
    \    BitFieldModel<24, 1> ptci;\n    BitFieldModel<25, 1> ulpiipd;\n    BitFieldModel<29,\
    \ 1> fhmod;\n    BitFieldModel<30, 1> fdmod;\n    BitFieldModel<31, 1> ctxpkt;\n\
    \  };\n};\n\nstruct otg_hs_grstctl\n{\n  constexpr static uint32_t Address = 0x40040000\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> csrst;\n\
    \    BitFieldModel<1, 1> hsrst;\n    BitFieldModel<2, 1> fcrst;\n    BitFieldModel<4,\
    \ 1> rxfflsh;\n    BitFieldModel<5, 1> txfflsh;\n    BitFieldModel<6, 5> txfnum;\n\
    \    BitFieldModel<30, 1> dmareq;\n    BitFieldModel<31, 1> ahbidl;\n  };\n};\n\
    \nstruct otg_hs_gintsts\n{\n  constexpr static uint32_t Address = 0x40040000 +\
    \ 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> cmod;\n\
    \    BitFieldModel<1, 1> mmis;\n    BitFieldModel<2, 1> otgint;\n    BitFieldModel<3,\
    \ 1> sof;\n    BitFieldModel<4, 1> rxflvl;\n    BitFieldModel<5, 1> nptxfe;\n\
    \    BitFieldModel<6, 1> ginakeff;\n    BitFieldModel<7, 1> boutnakeff;\n    BitFieldModel<10,\
    \ 1> esusp;\n    BitFieldModel<11, 1> usbsusp;\n    BitFieldModel<12, 1> usbrst;\n\
    \    BitFieldModel<13, 1> enumdne;\n    BitFieldModel<14, 1> isoodrp;\n    BitFieldModel<15,\
    \ 1> eopf;\n    BitFieldModel<18, 1> iepint;\n    BitFieldModel<19, 1> oepint;\n\
    \    BitFieldModel<20, 1> iisoixfr;\n    BitFieldModel<21, 1> pxfr_incompisoout;\n\
    \    BitFieldModel<22, 1> datafsusp;\n    BitFieldModel<24, 1> hprtint;\n    BitFieldModel<25,\
    \ 1> hcint;\n    BitFieldModel<26, 1> ptxfe;\n    BitFieldModel<28, 1> cidschg;\n\
    \    BitFieldModel<29, 1> discint;\n    BitFieldModel<30, 1> srqint;\n    BitFieldModel<31,\
    \ 1> wkuint;\n  };\n};\n\nstruct otg_hs_gintmsk\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1,\
    \ 1> mmism;\n    BitFieldModel<2, 1> otgint;\n    BitFieldModel<3, 1> sofm;\n\
    \    BitFieldModel<4, 1> rxflvlm;\n    BitFieldModel<5, 1> nptxfem;\n    BitFieldModel<6,\
    \ 1> ginakeffm;\n    BitFieldModel<7, 1> gonakeffm;\n    BitFieldModel<10, 1>\
    \ esuspm;\n    BitFieldModel<11, 1> usbsuspm;\n    BitFieldModel<12, 1> usbrst;\n\
    \    BitFieldModel<13, 1> enumdnem;\n    BitFieldModel<14, 1> isoodrpm;\n    BitFieldModel<15,\
    \ 1> eopfm;\n    BitFieldModel<17, 1> epmism;\n    BitFieldModel<18, 1> iepint;\n\
    \    BitFieldModel<19, 1> oepint;\n    BitFieldModel<20, 1> iisoixfrm;\n    BitFieldModel<21,\
    \ 1> pxfrm_iisooxfrm;\n    BitFieldModel<22, 1> fsuspm;\n    BitFieldModel<24,\
    \ 1> prtim;\n    BitFieldModel<25, 1> hcim;\n    BitFieldModel<26, 1> ptxfem;\n\
    \    BitFieldModel<28, 1> cidschgm;\n    BitFieldModel<29, 1> discint;\n    BitFieldModel<30,\
    \ 1> srqim;\n    BitFieldModel<31, 1> wuim;\n  };\n};\n\nstruct otg_hs_grxstsr_host\n\
    {\n  constexpr static uint32_t Address = 0x40040000 + 0x001C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 4> chnum;\n    BitFieldModel<4, 11>\
    \ bcnt;\n    BitFieldModel<15, 2> dpid;\n    BitFieldModel<17, 4> pktsts;\n  };\n\
    };\n\nstruct otg_hs_grxstsp_host\n{\n  constexpr static uint32_t Address = 0x40040000\
    \ + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 4> chnum;\n\
    \    BitFieldModel<4, 11> bcnt;\n    BitFieldModel<15, 2> dpid;\n    BitFieldModel<17,\
    \ 4> pktsts;\n  };\n};\n\nstruct otg_hs_grxfsiz\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> rxfd;\n  };\n};\n\nstruct otg_hs_gnptxfsiz_host\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> nptxfsa;\n    BitFieldModel<16, 16> nptxfd;\n  };\n};\n\nstruct otg_hs_tx0fsiz_peripheral\n\
    {\n  constexpr static uint32_t Address = 0x40040000 + 0x0028;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> tx0fsa;\n    BitFieldModel<16,\
    \ 16> tx0fd;\n  };\n};\n\nstruct otg_hs_gnptxsts\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> nptxfsav;\n    BitFieldModel<16, 8> nptqxsav;\n    BitFieldModel<24, 7>\
    \ nptxqtop;\n  };\n};\n\nstruct otg_hs_gccfg\n{\n  constexpr static uint32_t Address\
    \ = 0x40040000 + 0x0038;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<16,\
    \ 1> pwrdwn;\n    BitFieldModel<17, 1> i2cpaden;\n    BitFieldModel<18, 1> vbusasen;\n\
    \    BitFieldModel<19, 1> vbusbsen;\n    BitFieldModel<20, 1> sofouten;\n    BitFieldModel<21,\
    \ 1> novbussens;\n  };\n};\n\nstruct otg_hs_cid\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> product_id;\n  };\n};\n\nstruct otg_hs_hptxfsiz\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0100;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ptxsa;\n    BitFieldModel<16, 16> ptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf1\n\
    {\n  constexpr static uint32_t Address = 0x40040000 + 0x0104;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ineptxsa;\n    BitFieldModel<16,\
    \ 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf2\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0108;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptxsa;\n    BitFieldModel<16, 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf3\n\
    {\n  constexpr static uint32_t Address = 0x40040000 + 0x010C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ineptxsa;\n    BitFieldModel<16,\
    \ 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf4\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0110;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptxsa;\n    BitFieldModel<16, 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf5\n\
    {\n  constexpr static uint32_t Address = 0x40040000 + 0x0114;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ineptxsa;\n    BitFieldModel<16,\
    \ 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf6\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0118;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptxsa;\n    BitFieldModel<16, 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_dieptxf7\n\
    {\n  constexpr static uint32_t Address = 0x40040000 + 0x011C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ineptxsa;\n    BitFieldModel<16,\
    \ 16> ineptxfd;\n  };\n};\n\nstruct otg_hs_grxstsr_peripheral\n{\n  constexpr\
    \ static uint32_t Address = 0x40040000 + 0x001C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 4> epnum;\n    BitFieldModel<4, 11> bcnt;\n    BitFieldModel<15,\
    \ 2> dpid;\n    BitFieldModel<17, 4> pktsts;\n    BitFieldModel<21, 4> frmnum;\n\
    \  };\n};\n\nstruct otg_hs_grxstsp_peripheral\n{\n  constexpr static uint32_t\
    \ Address = 0x40040000 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 4> epnum;\n    BitFieldModel<4, 11> bcnt;\n    BitFieldModel<15, 2> dpid;\n\
    \    BitFieldModel<17, 4> pktsts;\n    BitFieldModel<21, 4> frmnum;\n  };\n};\n\
    \n}\n\n#endif /* DRAL_STM32F446_OTG_HS_GLOBAL_H */\n"
  name: OTG_HS_GLOBAL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_HS_HOST_H\n#define DRAL_STM32F446_OTG_HS_HOST_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ otg_hs_hcfg\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 2> fslspcs;\n    BitFieldModel<2,\
    \ 1> fslss;\n  };\n};\n\nstruct otg_hs_hfir\n{\n  constexpr static uint32_t Address\
    \ = 0x40040400 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> frivl;\n  };\n};\n\nstruct otg_hs_hfnum\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> frnum;\n    BitFieldModel<16, 16> ftrem;\n  };\n};\n\nstruct otg_hs_hptxsts\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0010;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ptxfsavl;\n    BitFieldModel<16,\
    \ 8> ptxqsav;\n    BitFieldModel<24, 8> ptxqtop;\n  };\n};\n\nstruct otg_hs_haint\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0014;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> haint;\n  };\n};\n\nstruct otg_hs_haintmsk\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0018;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> haintm;\n  };\n};\n\nstruct otg_hs_hprt\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0040;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> pcsts;\n    BitFieldModel<1, 1>\
    \ pcdet;\n    BitFieldModel<2, 1> pena;\n    BitFieldModel<3, 1> penchng;\n  \
    \  BitFieldModel<4, 1> poca;\n    BitFieldModel<5, 1> pocchng;\n    BitFieldModel<6,\
    \ 1> pres;\n    BitFieldModel<7, 1> psusp;\n    BitFieldModel<8, 1> prst;\n  \
    \  BitFieldModel<10, 2> plsts;\n    BitFieldModel<12, 1> ppwr;\n    BitFieldModel<13,\
    \ 4> ptctl;\n    BitFieldModel<17, 2> pspd;\n  };\n};\n\nstruct otg_hs_hcchar0\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0100;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar1\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x0120;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mc;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct otg_hs_hcchar2\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0140;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17,\
    \ 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n \
    \   BitFieldModel<22, 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30,\
    \ 1> chdis;\n    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar3\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0160;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar4\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x0180;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mc;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct otg_hs_hcchar5\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x01A0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17,\
    \ 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n \
    \   BitFieldModel<22, 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30,\
    \ 1> chdis;\n    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar6\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x01C0;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar7\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x01E0;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mc;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct otg_hs_hcchar8\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0200;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17,\
    \ 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n \
    \   BitFieldModel<22, 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30,\
    \ 1> chdis;\n    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar9\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0220;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4>\
    \ epnum;\n    BitFieldModel<15, 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n \
    \   BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 2> mc;\n    BitFieldModel<22,\
    \ 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n\
    \    BitFieldModel<31, 1> chena;\n  };\n};\n\nstruct otg_hs_hcchar10\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x0240;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15,\
    \ 1> epdir;\n    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n\
    \    BitFieldModel<20, 2> mc;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29,\
    \ 1> oddfrm;\n    BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n\
    \  };\n};\n\nstruct otg_hs_hcchar11\n{\n  constexpr static uint32_t Address =\
    \ 0x40040400 + 0x0260;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<11, 4> epnum;\n    BitFieldModel<15, 1> epdir;\n\
    \    BitFieldModel<17, 1> lsdev;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20,\
    \ 2> mc;\n    BitFieldModel<22, 7> dad;\n    BitFieldModel<29, 1> oddfrm;\n  \
    \  BitFieldModel<30, 1> chdis;\n    BitFieldModel<31, 1> chena;\n  };\n};\n\n\
    struct otg_hs_hcsplt0\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0104;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7,\
    \ 7> hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n\
    \    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt1\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x0124;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14,\
    \ 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n\
    \  };\n};\n\nstruct otg_hs_hcsplt2\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0144;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n\
    \    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16,\
    \ 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt3\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0164;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7>\
    \ hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n\
    \    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt4\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x0184;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14,\
    \ 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n\
    \  };\n};\n\nstruct otg_hs_hcsplt5\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x01A4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n\
    \    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16,\
    \ 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt6\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x01C4;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7>\
    \ hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n\
    \    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt7\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x01E4;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14,\
    \ 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n\
    \  };\n};\n\nstruct otg_hs_hcsplt8\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0204;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n\
    \    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16,\
    \ 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt9\n\
    {\n  constexpr static uint32_t Address = 0x40040400 + 0x0224;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7>\
    \ hubaddr;\n    BitFieldModel<14, 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n\
    \    BitFieldModel<31, 1> spliten;\n  };\n};\n\nstruct otg_hs_hcsplt10\n{\n  constexpr\
    \ static uint32_t Address = 0x40040400 + 0x0244;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 7> prtaddr;\n    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14,\
    \ 2> xactpos;\n    BitFieldModel<16, 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n\
    \  };\n};\n\nstruct otg_hs_hcsplt11\n{\n  constexpr static uint32_t Address =\
    \ 0x40040400 + 0x0264;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 7> prtaddr;\n    BitFieldModel<7, 7> hubaddr;\n    BitFieldModel<14, 2> xactpos;\n\
    \    BitFieldModel<16, 1> complsplt;\n    BitFieldModel<31, 1> spliten;\n  };\n\
    };\n\nstruct otg_hs_hcint0\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0108;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n\
    \    BitFieldModel<1, 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3,\
    \ 1> stall;\n    BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint1\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0128;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint2\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0148;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint3\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0168;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint4\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0188;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint5\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x01A8;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint6\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x01C8;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint7\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x01E8;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint8\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0208;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint9\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0228;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint10\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0248;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcint11\n{\n  constexpr static uint32_t Address = 0x40040400 + 0x0268;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrc;\n    BitFieldModel<1,\
    \ 1> chh;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3, 1> stall;\n \
    \   BitFieldModel<4, 1> nak;\n    BitFieldModel<5, 1> ack;\n    BitFieldModel<6,\
    \ 1> nyet;\n    BitFieldModel<7, 1> txerr;\n    BitFieldModel<8, 1> bberr;\n \
    \   BitFieldModel<9, 1> frmor;\n    BitFieldModel<10, 1> dterr;\n  };\n};\n\n\
    struct otg_hs_hcintmsk0\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x010C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n\
    \    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n    BitFieldModel<3,\
    \ 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5, 1> ackm;\n \
    \   BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n    BitFieldModel<8,\
    \ 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10, 1> dterrm;\n\
    \  };\n};\n\nstruct otg_hs_hcintmsk1\n{\n  constexpr static uint32_t Address =\
    \ 0x40040400 + 0x012C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk2\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x014C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk3\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x016C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk4\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x018C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk5\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x01AC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk6\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x01CC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk7\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x01EC;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk8\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x020C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk9\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x022C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk10\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x024C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hcintmsk11\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x026C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> chhm;\n    BitFieldModel<2, 1> ahberr;\n\
    \    BitFieldModel<3, 1> stallm;\n    BitFieldModel<4, 1> nakm;\n    BitFieldModel<5,\
    \ 1> ackm;\n    BitFieldModel<6, 1> nyet;\n    BitFieldModel<7, 1> txerrm;\n \
    \   BitFieldModel<8, 1> bberrm;\n    BitFieldModel<9, 1> frmorm;\n    BitFieldModel<10,\
    \ 1> dterrm;\n  };\n};\n\nstruct otg_hs_hctsiz0\n{\n  constexpr static uint32_t\
    \ Address = 0x40040400 + 0x0110;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n\
    \  };\n};\n\nstruct otg_hs_hctsiz1\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0130;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz2\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x0150;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz3\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x0170;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz4\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x0190;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz5\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x01B0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz6\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x01D0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz7\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x01F0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz8\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x0210;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz9\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x0230;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz10\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0250;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hctsiz11\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0270;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 19> xfrsiz;\n\
    \    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> dpid;\n  };\n};\n\
    \nstruct otg_hs_hcdma0\n{\n  constexpr static uint32_t Address = 0x40040400 +\
    \ 0x0114;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma1\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0134;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma2\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0154;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma3\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0174;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma4\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0194;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma5\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x01B4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma6\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x01D4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma7\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x01F4;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma8\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0214;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma9\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0234;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma10\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0254;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\nstruct otg_hs_hcdma11\n{\n  constexpr static uint32_t Address = 0x40040400\
    \ + 0x0274;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_OTG_HS_HOST_H */\n"
  name: OTG_HS_HOST
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_HS_DEVICE_H\n#define DRAL_STM32F446_OTG_HS_DEVICE_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ otg_hs_dcfg\n{\n  constexpr static uint32_t Address = 0x40040800 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 2> dspd;\n    BitFieldModel<2,\
    \ 1> nzlsohsk;\n    BitFieldModel<4, 7> dad;\n    BitFieldModel<11, 2> pfivl;\n\
    \    BitFieldModel<24, 2> perschivl;\n    BitFieldModel<14, 1> xcvrdly;\n    BitFieldModel<15,\
    \ 1> erratim;\n  };\n};\n\nstruct otg_hs_dctl\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> rwusig;\n    BitFieldModel<1, 1> sdis;\n    BitFieldModel<2, 1> ginsts;\n\
    \    BitFieldModel<3, 1> gonsts;\n    BitFieldModel<4, 3> tctl;\n    BitFieldModel<7,\
    \ 1> sginak;\n    BitFieldModel<8, 1> cginak;\n    BitFieldModel<9, 1> sgonak;\n\
    \    BitFieldModel<10, 1> cgonak;\n    BitFieldModel<11, 1> poprgdne;\n  };\n\
    };\n\nstruct otg_hs_dsts\n{\n  constexpr static uint32_t Address = 0x40040800\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> suspsts;\n\
    \    BitFieldModel<1, 2> enumspd;\n    BitFieldModel<3, 1> eerr;\n    BitFieldModel<8,\
    \ 14> fnsof;\n  };\n};\n\nstruct otg_hs_diepmsk\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrcm;\n    BitFieldModel<1, 1> epdm;\n    BitFieldModel<3, 1> tom;\n   \
    \ BitFieldModel<4, 1> ittxfemsk;\n    BitFieldModel<5, 1> inepnmm;\n    BitFieldModel<6,\
    \ 1> inepnem;\n    BitFieldModel<8, 1> txfurm;\n    BitFieldModel<9, 1> bim;\n\
    \  };\n};\n\nstruct otg_hs_doepmsk\n{\n  constexpr static uint32_t Address = 0x40040800\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n\
    \    BitFieldModel<1, 1> epdm;\n    BitFieldModel<3, 1> stupm;\n    BitFieldModel<4,\
    \ 1> otepdm;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<8, 1> opem;\n\
    \    BitFieldModel<9, 1> boim;\n  };\n};\n\nstruct otg_hs_daint\n{\n  constexpr\
    \ static uint32_t Address = 0x40040800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> iepint;\n    BitFieldModel<16, 16> oepint;\n  };\n};\n\
    \nstruct otg_hs_daintmsk\n{\n  constexpr static uint32_t Address = 0x40040800\
    \ + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> iepm;\n\
    \    BitFieldModel<16, 16> oepm;\n  };\n};\n\nstruct otg_hs_dvbusdis\n{\n  constexpr\
    \ static uint32_t Address = 0x40040800 + 0x0028;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 16> vbusdt;\n  };\n};\n\nstruct otg_hs_dvbuspulse\n{\n \
    \ constexpr static uint32_t Address = 0x40040800 + 0x002C;\n  union\n  {\n   \
    \ uint32_t value;\n    BitFieldModel<0, 12> dvbusp;\n  };\n};\n\nstruct otg_hs_dthrctl\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0030;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> nonisothren;\n    BitFieldModel<1,\
    \ 1> isothren;\n    BitFieldModel<2, 9> txthrlen;\n    BitFieldModel<16, 1> rxthren;\n\
    \    BitFieldModel<17, 9> rxthrlen;\n    BitFieldModel<27, 1> arpen;\n  };\n};\n\
    \nstruct otg_hs_diepempmsk\n{\n  constexpr static uint32_t Address = 0x40040800\
    \ + 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptxfem;\n\
    \  };\n};\n\nstruct otg_hs_deachint\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0038;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1,\
    \ 1> iep1int;\n    BitFieldModel<17, 1> oep1int;\n  };\n};\n\nstruct otg_hs_deachintmsk\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x003C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<1, 1> iep1intm;\n    BitFieldModel<17,\
    \ 1> oep1intm;\n  };\n};\n\nstruct otg_hs_diepeachmsk1\n{\n  constexpr static\
    \ uint32_t Address = 0x40040800 + 0x0044;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> xfrcm;\n    BitFieldModel<1, 1> epdm;\n    BitFieldModel<3,\
    \ 1> tom;\n    BitFieldModel<4, 1> ittxfemsk;\n    BitFieldModel<5, 1> inepnmm;\n\
    \    BitFieldModel<6, 1> inepnem;\n    BitFieldModel<8, 1> txfurm;\n    BitFieldModel<9,\
    \ 1> bim;\n    BitFieldModel<13, 1> nakm;\n  };\n};\n\nstruct otg_hs_doepeachmsk1\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0084;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> xfrcm;\n    BitFieldModel<1, 1>\
    \ epdm;\n    BitFieldModel<3, 1> tom;\n    BitFieldModel<4, 1> ittxfemsk;\n  \
    \  BitFieldModel<5, 1> inepnmm;\n    BitFieldModel<6, 1> inepnem;\n    BitFieldModel<8,\
    \ 1> txfurm;\n    BitFieldModel<9, 1> bim;\n    BitFieldModel<12, 1> berrm;\n\
    \    BitFieldModel<13, 1> nakm;\n    BitFieldModel<14, 1> nyetm;\n  };\n};\n\n\
    struct otg_hs_diepctl0\n{\n  constexpr static uint32_t Address = 0x40040800 +\
    \ 0x0100;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<17,\
    \ 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21, 1> stall;\n\
    \    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<27,\
    \ 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n    BitFieldModel<29, 1>\
    \ soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31, 1> epena;\n\
    \  };\n};\n\nstruct otg_hs_diepctl1\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0120;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepctl2\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0140;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepctl3\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0160;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepctl4\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0180;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepctl5\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01A0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepctl6\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01C0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepctl7\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01E0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<22, 4> txfnum;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_diepint0\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0108;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint1\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0128;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint2\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0148;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint3\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0168;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint4\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0188;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint5\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01A8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint6\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_diepint7\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01E8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> toc;\n  \
    \  BitFieldModel<4, 1> ittxfe;\n    BitFieldModel<6, 1> inepne;\n    BitFieldModel<7,\
    \ 1> txfe;\n    BitFieldModel<8, 1> txfifoudrn;\n    BitFieldModel<9, 1> bna;\n\
    \    BitFieldModel<11, 1> pktdrpsts;\n    BitFieldModel<12, 1> berr;\n    BitFieldModel<13,\
    \ 1> nak;\n  };\n};\n\nstruct otg_hs_dieptsiz0\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0110;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 7> xfrsiz;\n    BitFieldModel<19, 2> pktcnt;\n  };\n};\n\nstruct otg_hs_diepdma1\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0114;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n  };\n};\n\nstruct otg_hs_diepdma2\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0134;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n  };\n};\n\nstruct otg_hs_diepdma3\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0154;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n  };\n};\n\nstruct otg_hs_diepdma4\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0174;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n  };\n};\n\nstruct otg_hs_diepdma5\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0194;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> dmaaddr;\n  };\n};\n\nstruct otg_hs_dtxfsts0\n\
    {\n  constexpr static uint32_t Address = 0x40040800 + 0x0118;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n  };\n};\n\nstruct\
    \ otg_hs_dtxfsts1\n{\n  constexpr static uint32_t Address = 0x40040800 + 0x0138;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n  };\n\
    };\n\nstruct otg_hs_dtxfsts2\n{\n  constexpr static uint32_t Address = 0x40040800\
    \ + 0x0158;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> ineptfsav;\n\
    \  };\n};\n\nstruct otg_hs_dtxfsts3\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0178;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptfsav;\n  };\n};\n\nstruct otg_hs_dtxfsts4\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0198;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptfsav;\n  };\n};\n\nstruct otg_hs_dtxfsts5\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x01B8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 16> ineptfsav;\n  };\n};\n\nstruct otg_hs_dieptsiz1\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0130;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> mcnt;\n\
    \  };\n};\n\nstruct otg_hs_dieptsiz2\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0150;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> mcnt;\n\
    \  };\n};\n\nstruct otg_hs_dieptsiz3\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0170;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> mcnt;\n\
    \  };\n};\n\nstruct otg_hs_dieptsiz4\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0190;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> mcnt;\n\
    \  };\n};\n\nstruct otg_hs_dieptsiz5\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x01B0;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> mcnt;\n\
    \  };\n};\n\nstruct otg_hs_doepctl0\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0300;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 2> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<17, 1> naksts;\n\
    \    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 1> snpm;\n    BitFieldModel<21,\
    \ 1> stall;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<27, 1> snak;\n\
    \    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31, 1> epena;\n  };\n};\n\n\
    struct otg_hs_doepctl1\n{\n  constexpr static uint32_t Address = 0x40040800 +\
    \ 0x0320;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 11> mpsiz;\n\
    \    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n    BitFieldModel<17,\
    \ 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20, 1> snpm;\n\
    \    BitFieldModel<21, 1> stall;\n    BitFieldModel<26, 1> cnak;\n    BitFieldModel<27,\
    \ 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n    BitFieldModel<29, 1>\
    \ soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31, 1> epena;\n\
    \  };\n};\n\nstruct otg_hs_doepctl2\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0340;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20,\
    \ 1> snpm;\n    BitFieldModel<21, 1> stall;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_doepctl3\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0360;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 11> mpsiz;\n    BitFieldModel<15, 1> usbaep;\n    BitFieldModel<16, 1> eonum_dpid;\n\
    \    BitFieldModel<17, 1> naksts;\n    BitFieldModel<18, 2> eptyp;\n    BitFieldModel<20,\
    \ 1> snpm;\n    BitFieldModel<21, 1> stall;\n    BitFieldModel<26, 1> cnak;\n\
    \    BitFieldModel<27, 1> snak;\n    BitFieldModel<28, 1> sd0pid_sevnfrm;\n  \
    \  BitFieldModel<29, 1> soddfrm;\n    BitFieldModel<30, 1> epdis;\n    BitFieldModel<31,\
    \ 1> epena;\n  };\n};\n\nstruct otg_hs_doepint0\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0308;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint1\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0328;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint2\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0348;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint3\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0368;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint4\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0388;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint5\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x03A8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint6\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x03C8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doepint7\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x03E8;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> xfrc;\n    BitFieldModel<1, 1> epdisd;\n    BitFieldModel<3, 1> stup;\n \
    \   BitFieldModel<4, 1> otepdis;\n    BitFieldModel<6, 1> b2bstup;\n    BitFieldModel<14,\
    \ 1> nyet;\n  };\n};\n\nstruct otg_hs_doeptsiz0\n{\n  constexpr static uint32_t\
    \ Address = 0x40040800 + 0x0310;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 7> xfrsiz;\n    BitFieldModel<19, 1> pktcnt;\n    BitFieldModel<29, 2> stupcnt;\n\
    \  };\n};\n\nstruct otg_hs_doeptsiz1\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0330;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \  };\n};\n\nstruct otg_hs_doeptsiz2\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0350;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \  };\n};\n\nstruct otg_hs_doeptsiz3\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0370;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \  };\n};\n\nstruct otg_hs_doeptsiz4\n{\n  constexpr static uint32_t Address =\
    \ 0x40040800 + 0x0390;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 19> xfrsiz;\n    BitFieldModel<19, 10> pktcnt;\n    BitFieldModel<29, 2> rxdpid_stupcnt;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_OTG_HS_DEVICE_H */\n"
  name: OTG_HS_DEVICE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_OTG_HS_PWRCLK_H\n#define DRAL_STM32F446_OTG_HS_PWRCLK_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ otg_hs_pcgcr\n{\n  constexpr static uint32_t Address = 0x40040E00 + 0x0000;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> stppclk;\n    BitFieldModel<1,\
    \ 1> gatehclk;\n    BitFieldModel<4, 1> physusp;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_OTG_HS_PWRCLK_H\
    \ */\n"
  name: OTG_HS_PWRCLK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SAI1_H\n#define DRAL_STM32F446_SAI1_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ bcr1\n{\n  constexpr static uint32_t Address = 0x40015800 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<20, 4> mcjdiv;\n    BitFieldModel<19,\
    \ 1> nodiv;\n    BitFieldModel<17, 1> dmaen;\n    BitFieldModel<16, 1> saiben;\n\
    \    BitFieldModel<13, 1> outdri;\n    BitFieldModel<12, 1> mono;\n    BitFieldModel<10,\
    \ 2> syncen;\n    BitFieldModel<9, 1> ckstr;\n    BitFieldModel<8, 1> lsbfirst;\n\
    \    BitFieldModel<5, 3> ds;\n    BitFieldModel<2, 2> prtcfg;\n    BitFieldModel<0,\
    \ 2> mode;\n  };\n};\n\nstruct bcr2\n{\n  constexpr static uint32_t Address =\
    \ 0x40015800 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14,\
    \ 2> comp;\n    BitFieldModel<13, 1> cpl;\n    BitFieldModel<7, 6> mutecn;\n \
    \   BitFieldModel<6, 1> muteval;\n    BitFieldModel<5, 1> mute;\n    BitFieldModel<4,\
    \ 1> tris;\n    BitFieldModel<3, 1> fflus;\n    BitFieldModel<0, 3> fth;\n  };\n\
    };\n\nstruct bfrcr\n{\n  constexpr static uint32_t Address = 0x40015800 + 0x002C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<18, 1> fsoff;\n    BitFieldModel<17,\
    \ 1> fspol;\n    BitFieldModel<16, 1> fsdef;\n    BitFieldModel<8, 7> fsall;\n\
    \    BitFieldModel<0, 8> frl;\n  };\n};\n\nstruct bslotr\n{\n  constexpr static\
    \ uint32_t Address = 0x40015800 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> sloten;\n    BitFieldModel<8, 4> nbslot;\n    BitFieldModel<6,\
    \ 2> slotsz;\n    BitFieldModel<0, 5> fboff;\n  };\n};\n\nstruct bim\n{\n  constexpr\
    \ static uint32_t Address = 0x40015800 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> lfsdetie;\n    BitFieldModel<5, 1> afsdetie;\n    BitFieldModel<4,\
    \ 1> cnrdyie;\n    BitFieldModel<3, 1> freqie;\n    BitFieldModel<2, 1> wckcfg;\n\
    \    BitFieldModel<1, 1> mutedet;\n    BitFieldModel<0, 1> ovrudrie;\n  };\n};\n\
    \nstruct bsr\n{\n  constexpr static uint32_t Address = 0x40015800 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 3> flvl;\n    BitFieldModel<6,\
    \ 1> lfsdet;\n    BitFieldModel<5, 1> afsdet;\n    BitFieldModel<4, 1> cnrdy;\n\
    \    BitFieldModel<3, 1> freq;\n    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1,\
    \ 1> mutedet;\n    BitFieldModel<0, 1> ovrudr;\n  };\n};\n\nstruct bclrfr\n{\n\
    \  constexpr static uint32_t Address = 0x40015800 + 0x003C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<6, 1> lfsdet;\n    BitFieldModel<5, 1> cafsdet;\n\
    \    BitFieldModel<4, 1> cnrdy;\n    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1,\
    \ 1> mutedet;\n    BitFieldModel<0, 1> ovrudr;\n  };\n};\n\nstruct bdr\n{\n  constexpr\
    \ static uint32_t Address = 0x40015800 + 0x0040;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> data;\n  };\n};\n\nstruct acr1\n{\n  constexpr static\
    \ uint32_t Address = 0x40015800 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<20, 4> mcjdiv;\n    BitFieldModel<19, 1> nodiv;\n    BitFieldModel<17,\
    \ 1> dmaen;\n    BitFieldModel<16, 1> saiaen;\n    BitFieldModel<13, 1> outdri;\n\
    \    BitFieldModel<12, 1> mono;\n    BitFieldModel<10, 2> syncen;\n    BitFieldModel<9,\
    \ 1> ckstr;\n    BitFieldModel<8, 1> lsbfirst;\n    BitFieldModel<5, 3> ds;\n\
    \    BitFieldModel<2, 2> prtcfg;\n    BitFieldModel<0, 2> mode;\n  };\n};\n\n\
    struct acr2\n{\n  constexpr static uint32_t Address = 0x40015800 + 0x0008;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<14, 2> comp;\n    BitFieldModel<13,\
    \ 1> cpl;\n    BitFieldModel<7, 6> mutecn;\n    BitFieldModel<6, 1> muteval;\n\
    \    BitFieldModel<5, 1> mute;\n    BitFieldModel<4, 1> tris;\n    BitFieldModel<3,\
    \ 1> fflus;\n    BitFieldModel<0, 3> fth;\n  };\n};\n\nstruct afrcr\n{\n  constexpr\
    \ static uint32_t Address = 0x40015800 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<18, 1> fsoff;\n    BitFieldModel<17, 1> fspol;\n    BitFieldModel<16,\
    \ 1> fsdef;\n    BitFieldModel<8, 7> fsall;\n    BitFieldModel<0, 8> frl;\n  };\n\
    };\n\nstruct aslotr\n{\n  constexpr static uint32_t Address = 0x40015800 + 0x0010;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> sloten;\n    BitFieldModel<8,\
    \ 4> nbslot;\n    BitFieldModel<6, 2> slotsz;\n    BitFieldModel<0, 5> fboff;\n\
    \  };\n};\n\nstruct aim\n{\n  constexpr static uint32_t Address = 0x40015800 +\
    \ 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> lfsdet;\n\
    \    BitFieldModel<5, 1> afsdetie;\n    BitFieldModel<4, 1> cnrdyie;\n    BitFieldModel<3,\
    \ 1> freqie;\n    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1, 1> mutedet;\n\
    \    BitFieldModel<0, 1> ovrudrie;\n  };\n};\n\nstruct asr\n{\n  constexpr static\
    \ uint32_t Address = 0x40015800 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 3> flvl;\n    BitFieldModel<6, 1> lfsdet;\n    BitFieldModel<5,\
    \ 1> afsdet;\n    BitFieldModel<4, 1> cnrdy;\n    BitFieldModel<3, 1> freq;\n\
    \    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1, 1> mutedet;\n    BitFieldModel<0,\
    \ 1> ovrudr;\n  };\n};\n\nstruct aclrfr\n{\n  constexpr static uint32_t Address\
    \ = 0x40015800 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6,\
    \ 1> lfsdet;\n    BitFieldModel<5, 1> cafsdet;\n    BitFieldModel<4, 1> cnrdy;\n\
    \    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1, 1> mutedet;\n    BitFieldModel<0,\
    \ 1> ovrudr;\n  };\n};\n\nstruct adr\n{\n  constexpr static uint32_t Address =\
    \ 0x40015800 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> data;\n  };\n};\n\nstruct gcr\n{\n  constexpr static uint32_t Address =\
    \ 0x40015800 + 0x0000;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 2> syncin;\n    BitFieldModel<4, 2> syncout;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_SAI1_H\
    \ */\n"
  name: SAI1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SAI2_H\n#define DRAL_STM32F446_SAI2_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ bcr1\n{\n  constexpr static uint32_t Address = 0x40015C00 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<20, 4> mcjdiv;\n    BitFieldModel<19,\
    \ 1> nodiv;\n    BitFieldModel<17, 1> dmaen;\n    BitFieldModel<16, 1> saiben;\n\
    \    BitFieldModel<13, 1> outdri;\n    BitFieldModel<12, 1> mono;\n    BitFieldModel<10,\
    \ 2> syncen;\n    BitFieldModel<9, 1> ckstr;\n    BitFieldModel<8, 1> lsbfirst;\n\
    \    BitFieldModel<5, 3> ds;\n    BitFieldModel<2, 2> prtcfg;\n    BitFieldModel<0,\
    \ 2> mode;\n  };\n};\n\nstruct bcr2\n{\n  constexpr static uint32_t Address =\
    \ 0x40015C00 + 0x0028;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14,\
    \ 2> comp;\n    BitFieldModel<13, 1> cpl;\n    BitFieldModel<7, 6> mutecn;\n \
    \   BitFieldModel<6, 1> muteval;\n    BitFieldModel<5, 1> mute;\n    BitFieldModel<4,\
    \ 1> tris;\n    BitFieldModel<3, 1> fflus;\n    BitFieldModel<0, 3> fth;\n  };\n\
    };\n\nstruct bfrcr\n{\n  constexpr static uint32_t Address = 0x40015C00 + 0x002C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<18, 1> fsoff;\n    BitFieldModel<17,\
    \ 1> fspol;\n    BitFieldModel<16, 1> fsdef;\n    BitFieldModel<8, 7> fsall;\n\
    \    BitFieldModel<0, 8> frl;\n  };\n};\n\nstruct bslotr\n{\n  constexpr static\
    \ uint32_t Address = 0x40015C00 + 0x0030;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 16> sloten;\n    BitFieldModel<8, 4> nbslot;\n    BitFieldModel<6,\
    \ 2> slotsz;\n    BitFieldModel<0, 5> fboff;\n  };\n};\n\nstruct bim\n{\n  constexpr\
    \ static uint32_t Address = 0x40015C00 + 0x0034;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<6, 1> lfsdetie;\n    BitFieldModel<5, 1> afsdetie;\n    BitFieldModel<4,\
    \ 1> cnrdyie;\n    BitFieldModel<3, 1> freqie;\n    BitFieldModel<2, 1> wckcfg;\n\
    \    BitFieldModel<1, 1> mutedet;\n    BitFieldModel<0, 1> ovrudrie;\n  };\n};\n\
    \nstruct bsr\n{\n  constexpr static uint32_t Address = 0x40015C00 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 3> flvl;\n    BitFieldModel<6,\
    \ 1> lfsdet;\n    BitFieldModel<5, 1> afsdet;\n    BitFieldModel<4, 1> cnrdy;\n\
    \    BitFieldModel<3, 1> freq;\n    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1,\
    \ 1> mutedet;\n    BitFieldModel<0, 1> ovrudr;\n  };\n};\n\nstruct bclrfr\n{\n\
    \  constexpr static uint32_t Address = 0x40015C00 + 0x003C;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<6, 1> lfsdet;\n    BitFieldModel<5, 1> cafsdet;\n\
    \    BitFieldModel<4, 1> cnrdy;\n    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1,\
    \ 1> mutedet;\n    BitFieldModel<0, 1> ovrudr;\n  };\n};\n\nstruct bdr\n{\n  constexpr\
    \ static uint32_t Address = 0x40015C00 + 0x0040;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> data;\n  };\n};\n\nstruct acr1\n{\n  constexpr static\
    \ uint32_t Address = 0x40015C00 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<20, 4> mcjdiv;\n    BitFieldModel<19, 1> nodiv;\n    BitFieldModel<17,\
    \ 1> dmaen;\n    BitFieldModel<16, 1> saiaen;\n    BitFieldModel<13, 1> outdri;\n\
    \    BitFieldModel<12, 1> mono;\n    BitFieldModel<10, 2> syncen;\n    BitFieldModel<9,\
    \ 1> ckstr;\n    BitFieldModel<8, 1> lsbfirst;\n    BitFieldModel<5, 3> ds;\n\
    \    BitFieldModel<2, 2> prtcfg;\n    BitFieldModel<0, 2> mode;\n  };\n};\n\n\
    struct acr2\n{\n  constexpr static uint32_t Address = 0x40015C00 + 0x0008;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<14, 2> comp;\n    BitFieldModel<13,\
    \ 1> cpl;\n    BitFieldModel<7, 6> mutecn;\n    BitFieldModel<6, 1> muteval;\n\
    \    BitFieldModel<5, 1> mute;\n    BitFieldModel<4, 1> tris;\n    BitFieldModel<3,\
    \ 1> fflus;\n    BitFieldModel<0, 3> fth;\n  };\n};\n\nstruct afrcr\n{\n  constexpr\
    \ static uint32_t Address = 0x40015C00 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<18, 1> fsoff;\n    BitFieldModel<17, 1> fspol;\n    BitFieldModel<16,\
    \ 1> fsdef;\n    BitFieldModel<8, 7> fsall;\n    BitFieldModel<0, 8> frl;\n  };\n\
    };\n\nstruct aslotr\n{\n  constexpr static uint32_t Address = 0x40015C00 + 0x0010;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 16> sloten;\n    BitFieldModel<8,\
    \ 4> nbslot;\n    BitFieldModel<6, 2> slotsz;\n    BitFieldModel<0, 5> fboff;\n\
    \  };\n};\n\nstruct aim\n{\n  constexpr static uint32_t Address = 0x40015C00 +\
    \ 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6, 1> lfsdet;\n\
    \    BitFieldModel<5, 1> afsdetie;\n    BitFieldModel<4, 1> cnrdyie;\n    BitFieldModel<3,\
    \ 1> freqie;\n    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1, 1> mutedet;\n\
    \    BitFieldModel<0, 1> ovrudrie;\n  };\n};\n\nstruct asr\n{\n  constexpr static\
    \ uint32_t Address = 0x40015C00 + 0x0018;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<16, 3> flvl;\n    BitFieldModel<6, 1> lfsdet;\n    BitFieldModel<5,\
    \ 1> afsdet;\n    BitFieldModel<4, 1> cnrdy;\n    BitFieldModel<3, 1> freq;\n\
    \    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1, 1> mutedet;\n    BitFieldModel<0,\
    \ 1> ovrudr;\n  };\n};\n\nstruct aclrfr\n{\n  constexpr static uint32_t Address\
    \ = 0x40015C00 + 0x001C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<6,\
    \ 1> lfsdet;\n    BitFieldModel<5, 1> cafsdet;\n    BitFieldModel<4, 1> cnrdy;\n\
    \    BitFieldModel<2, 1> wckcfg;\n    BitFieldModel<1, 1> mutedet;\n    BitFieldModel<0,\
    \ 1> ovrudr;\n  };\n};\n\nstruct adr\n{\n  constexpr static uint32_t Address =\
    \ 0x40015C00 + 0x0020;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> data;\n  };\n};\n\nstruct gcr\n{\n  constexpr static uint32_t Address =\
    \ 0x40015C00 + 0x0000;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 2> syncin;\n    BitFieldModel<4, 2> syncout;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_SAI2_H\
    \ */\n"
  name: SAI2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_PWR_H\n#define DRAL_STM32F446_PWR_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0x40007000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> lpds;\n    BitFieldModel<1,\
    \ 1> pdds;\n    BitFieldModel<2, 1> cwuf;\n    BitFieldModel<3, 1> csbf;\n   \
    \ BitFieldModel<4, 1> pvde;\n    BitFieldModel<5, 3> pls;\n    BitFieldModel<8,\
    \ 1> dbp;\n    BitFieldModel<9, 1> fpds;\n    BitFieldModel<10, 1> lplvds;\n \
    \   BitFieldModel<11, 1> mrlvds;\n    BitFieldModel<13, 1> adcdc1;\n    BitFieldModel<14,\
    \ 2> vos;\n    BitFieldModel<16, 1> oden;\n    BitFieldModel<17, 1> odswen;\n\
    \    BitFieldModel<18, 2> uden;\n    BitFieldModel<20, 1> fmssr;\n    BitFieldModel<21,\
    \ 1> fissr;\n  };\n};\n\nstruct csr\n{\n  constexpr static uint32_t Address =\
    \ 0x40007000 + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> wuf;\n    BitFieldModel<1, 1> sbf;\n    BitFieldModel<2, 1> pvdo;\n    BitFieldModel<3,\
    \ 1> brr;\n    BitFieldModel<7, 1> ewup2;\n    BitFieldModel<8, 1> ewup;\n   \
    \ BitFieldModel<9, 1> bre;\n    BitFieldModel<14, 1> vosrdy;\n    BitFieldModel<16,\
    \ 1> odrdy;\n    BitFieldModel<17, 1> odswrdy;\n    BitFieldModel<18, 2> udrdy;\n\
    \  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_PWR_H */\n"
  name: PWR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_QUADSPI_H\n#define DRAL_STM32F446_QUADSPI_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<24, 8> prescaler;\n    BitFieldModel<23,\
    \ 1> pmm;\n    BitFieldModel<22, 1> apms;\n    BitFieldModel<20, 1> toie;\n  \
    \  BitFieldModel<19, 1> smie;\n    BitFieldModel<18, 1> ftie;\n    BitFieldModel<17,\
    \ 1> tcie;\n    BitFieldModel<16, 1> teie;\n    BitFieldModel<8, 5> fthres;\n\
    \    BitFieldModel<7, 1> fsel;\n    BitFieldModel<6, 1> dfm;\n    BitFieldModel<4,\
    \ 1> sshift;\n    BitFieldModel<3, 1> tcen;\n    BitFieldModel<2, 1> dmaen;\n\
    \    BitFieldModel<1, 1> abort;\n    BitFieldModel<0, 1> en;\n  };\n};\n\nstruct\
    \ dcr\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<16, 5> fsize;\n    BitFieldModel<8,\
    \ 3> csht;\n    BitFieldModel<0, 1> ckmode;\n  };\n};\n\nstruct sr\n{\n  constexpr\
    \ static uint32_t Address = 0xA0001000 + 0x0008;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<8, 7> flevel;\n    BitFieldModel<5, 1> busy;\n    BitFieldModel<4,\
    \ 1> tof;\n    BitFieldModel<3, 1> smf;\n    BitFieldModel<2, 1> ftf;\n    BitFieldModel<1,\
    \ 1> tcf;\n    BitFieldModel<0, 1> tef;\n  };\n};\n\nstruct fcr\n{\n  constexpr\
    \ static uint32_t Address = 0xA0001000 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<4, 1> ctof;\n    BitFieldModel<3, 1> csmf;\n    BitFieldModel<1,\
    \ 1> ctcf;\n    BitFieldModel<0, 1> ctef;\n  };\n};\n\nstruct dlr\n{\n  constexpr\
    \ static uint32_t Address = 0xA0001000 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 32> dl;\n  };\n};\n\nstruct ccr\n{\n  constexpr static uint32_t\
    \ Address = 0xA0001000 + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<31,\
    \ 1> ddrm;\n    BitFieldModel<30, 1> dhhc;\n    BitFieldModel<28, 1> sioo;\n \
    \   BitFieldModel<26, 2> fmode;\n    BitFieldModel<24, 2> dmode;\n    BitFieldModel<18,\
    \ 5> dcyc;\n    BitFieldModel<16, 2> absize;\n    BitFieldModel<14, 2> abmode;\n\
    \    BitFieldModel<12, 2> adsize;\n    BitFieldModel<10, 2> admode;\n    BitFieldModel<8,\
    \ 2> imode;\n    BitFieldModel<0, 8> instruction;\n  };\n};\n\nstruct ar\n{\n\
    \  constexpr static uint32_t Address = 0xA0001000 + 0x0018;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<0, 32> address;\n  };\n};\n\nstruct abr\n\
    {\n  constexpr static uint32_t Address = 0xA0001000 + 0x001C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> alternate;\n  };\n};\n\nstruct\
    \ dr\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x0020;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> data;\n  };\n};\n\nstruct\
    \ psmkr\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x0024;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> mask;\n  };\n};\n\nstruct\
    \ psmar\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x0028;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> match;\n  };\n};\n\nstruct\
    \ pir\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x002C;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> interval;\n  };\n};\n\nstruct\
    \ lptr\n{\n  constexpr static uint32_t Address = 0xA0001000 + 0x0030;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 16> timeout;\n  };\n};\n\n}\n\n\
    #endif /* DRAL_STM32F446_QUADSPI_H */\n"
  name: QUADSPI
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SPDIF_RX_H\n#define DRAL_STM32F446_SPDIF_RX_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cr\n{\n  constexpr static uint32_t Address = 0x40004000 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 2> spdifen;\n    BitFieldModel<2,\
    \ 1> rxdmaen;\n    BitFieldModel<3, 1> rxsteo;\n    BitFieldModel<4, 2> drfmt;\n\
    \    BitFieldModel<6, 1> pmsk;\n    BitFieldModel<7, 1> vmsk;\n    BitFieldModel<8,\
    \ 1> cumsk;\n    BitFieldModel<9, 1> ptmsk;\n    BitFieldModel<10, 1> cbdmaen;\n\
    \    BitFieldModel<11, 1> chsel;\n    BitFieldModel<12, 2> nbtr;\n    BitFieldModel<14,\
    \ 1> wfa;\n    BitFieldModel<16, 3> insel;\n  };\n};\n\nstruct imr\n{\n  constexpr\
    \ static uint32_t Address = 0x40004000 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> rxneie;\n    BitFieldModel<1, 1> csrneie;\n    BitFieldModel<2,\
    \ 1> perrie;\n    BitFieldModel<3, 1> ovrie;\n    BitFieldModel<4, 1> sblkie;\n\
    \    BitFieldModel<5, 1> syncdie;\n    BitFieldModel<6, 1> ifeie;\n  };\n};\n\n\
    struct sr\n{\n  constexpr static uint32_t Address = 0x40004000 + 0x0008;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> rxne;\n    BitFieldModel<1,\
    \ 1> csrne;\n    BitFieldModel<2, 1> perr;\n    BitFieldModel<3, 1> ovr;\n   \
    \ BitFieldModel<4, 1> sbd;\n    BitFieldModel<5, 1> syncd;\n    BitFieldModel<6,\
    \ 1> ferr;\n    BitFieldModel<7, 1> serr;\n    BitFieldModel<8, 1> terr;\n   \
    \ BitFieldModel<16, 15> width5;\n  };\n};\n\nstruct ifcr\n{\n  constexpr static\
    \ uint32_t Address = 0x40004000 + 0x000C;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<2, 1> perrcf;\n    BitFieldModel<3, 1> ovrcf;\n    BitFieldModel<4,\
    \ 1> sbdcf;\n    BitFieldModel<5, 1> syncdcf;\n  };\n};\n\nstruct dr\n{\n  constexpr\
    \ static uint32_t Address = 0x40004000 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 24> dr;\n    BitFieldModel<24, 1> pe;\n    BitFieldModel<25,\
    \ 1> v;\n    BitFieldModel<26, 1> u;\n    BitFieldModel<27, 1> c;\n    BitFieldModel<28,\
    \ 2> pt;\n  };\n};\n\nstruct csr\n{\n  constexpr static uint32_t Address = 0x40004000\
    \ + 0x0014;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 16> usr;\n\
    \    BitFieldModel<16, 8> cs;\n    BitFieldModel<24, 1> sob;\n  };\n};\n\nstruct\
    \ dir\n{\n  constexpr static uint32_t Address = 0x40004000 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 13> thi;\n    BitFieldModel<16,\
    \ 13> tlo;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_SPDIF_RX_H */\n"
  name: SPDIF_RX
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_HDMI_CEC_H\n#define DRAL_STM32F446_HDMI_CEC_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cec_cr\n{\n  constexpr static uint32_t Address = 0x40006C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<2, 1> txeom;\n    BitFieldModel<1,\
    \ 1> txsom;\n    BitFieldModel<0, 1> cecen;\n  };\n};\n\nstruct cec_cfgr\n{\n\
    \  constexpr static uint32_t Address = 0x40006C00 + 0x0004;\n  union\n  {\n  \
    \  uint32_t value;\n    BitFieldModel<31, 1> lstn;\n    BitFieldModel<16, 15>\
    \ oar;\n    BitFieldModel<8, 1> sftop;\n    BitFieldModel<7, 1> brdnogen;\n  \
    \  BitFieldModel<6, 1> lbpegen;\n    BitFieldModel<5, 1> bregen;\n    BitFieldModel<4,\
    \ 1> brestp;\n    BitFieldModel<3, 1> rxtol;\n    BitFieldModel<0, 3> sft;\n \
    \ };\n};\n\nstruct cec_txdr\n{\n  constexpr static uint32_t Address = 0x40006C00\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> txd;\n\
    \  };\n};\n\nstruct cec_rxdr\n{\n  constexpr static uint32_t Address = 0x40006C00\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> rxd;\n\
    \  };\n};\n\nstruct cec_isr\n{\n  constexpr static uint32_t Address = 0x40006C00\
    \ + 0x0010;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<12, 1> txacke;\n\
    \    BitFieldModel<11, 1> txerr;\n    BitFieldModel<10, 1> txudr;\n    BitFieldModel<9,\
    \ 1> txend;\n    BitFieldModel<8, 1> txbr;\n    BitFieldModel<7, 1> arblst;\n\
    \    BitFieldModel<6, 1> rxacke;\n    BitFieldModel<5, 1> lbpe;\n    BitFieldModel<4,\
    \ 1> sbpe;\n    BitFieldModel<3, 1> bre;\n    BitFieldModel<2, 1> rxovr;\n   \
    \ BitFieldModel<1, 1> rxend;\n    BitFieldModel<0, 1> rxbr;\n  };\n};\n\nstruct\
    \ cec_ier\n{\n  constexpr static uint32_t Address = 0x40006C00 + 0x0014;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<12, 1> txackie;\n    BitFieldModel<11,\
    \ 1> txerrie;\n    BitFieldModel<10, 1> txudrie;\n    BitFieldModel<9, 1> txendie;\n\
    \    BitFieldModel<8, 1> txbrie;\n    BitFieldModel<7, 1> arblstie;\n    BitFieldModel<6,\
    \ 1> rxackie;\n    BitFieldModel<5, 1> lbpeie;\n    BitFieldModel<4, 1> sbpeie;\n\
    \    BitFieldModel<3, 1> breie;\n    BitFieldModel<2, 1> rxovrie;\n    BitFieldModel<1,\
    \ 1> rxendie;\n    BitFieldModel<0, 1> rxbrie;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_HDMI_CEC_H\
    \ */\n"
  name: HDMI_CEC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_FPU_H\n#define DRAL_STM32F446_FPU_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ fpccr\n{\n  constexpr static uint32_t Address = 0xE000EF34 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> lspact;\n    BitFieldModel<1,\
    \ 1> user;\n    BitFieldModel<3, 1> thread;\n    BitFieldModel<4, 1> hfrdy;\n\
    \    BitFieldModel<5, 1> mmrdy;\n    BitFieldModel<6, 1> bfrdy;\n    BitFieldModel<8,\
    \ 1> monrdy;\n    BitFieldModel<30, 1> lspen;\n    BitFieldModel<31, 1> aspen;\n\
    \  };\n};\n\nstruct fpcar\n{\n  constexpr static uint32_t Address = 0xE000EF34\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<3, 29> address;\n\
    \  };\n};\n\nstruct fpscr\n{\n  constexpr static uint32_t Address = 0xE000EF34\
    \ + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> ioc;\n\
    \    BitFieldModel<1, 1> dzc;\n    BitFieldModel<2, 1> ofc;\n    BitFieldModel<3,\
    \ 1> ufc;\n    BitFieldModel<4, 1> ixc;\n    BitFieldModel<7, 1> idc;\n    BitFieldModel<22,\
    \ 2> rmode;\n    BitFieldModel<24, 1> fz;\n    BitFieldModel<25, 1> dn;\n    BitFieldModel<26,\
    \ 1> ahp;\n    BitFieldModel<28, 1> v;\n    BitFieldModel<29, 1> c;\n    BitFieldModel<30,\
    \ 1> z;\n    BitFieldModel<31, 1> n;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_FPU_H\
    \ */\n"
  name: FPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_MPU_H\n#define DRAL_STM32F446_MPU_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ mpu_typer\n{\n  constexpr static uint32_t Address = 0xE000ED90 + 0x0000;\n \
    \ union\n  {\n    uint32_t value;\n    BitFieldModel<0, 1> separate;\n    BitFieldModel<8,\
    \ 8> dregion;\n    BitFieldModel<16, 8> iregion;\n  };\n};\n\nstruct mpu_ctrl\n\
    {\n  constexpr static uint32_t Address = 0xE000ED90 + 0x0004;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> enable;\n    BitFieldModel<1, 1>\
    \ hfnmiena;\n    BitFieldModel<2, 1> privdefena;\n  };\n};\n\nstruct mpu_rnr\n\
    {\n  constexpr static uint32_t Address = 0xE000ED90 + 0x0008;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 8> region;\n  };\n};\n\nstruct mpu_rbar\n\
    {\n  constexpr static uint32_t Address = 0xE000ED90 + 0x000C;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 4> region;\n    BitFieldModel<4, 1>\
    \ valid;\n    BitFieldModel<5, 27> addr;\n  };\n};\n\nstruct mpu_rasr\n{\n  constexpr\
    \ static uint32_t Address = 0xE000ED90 + 0x0010;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 1> enable;\n    BitFieldModel<1, 5> size;\n    BitFieldModel<8,\
    \ 8> srd;\n    BitFieldModel<16, 1> b;\n    BitFieldModel<17, 1> c;\n    BitFieldModel<18,\
    \ 1> s;\n    BitFieldModel<19, 3> tex;\n    BitFieldModel<24, 3> ap;\n    BitFieldModel<28,\
    \ 1> xn;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_MPU_H */\n"
  name: MPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_STK_H\n#define DRAL_STM32F446_STK_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ ctrl\n{\n  constexpr static uint32_t Address = 0xE000E010 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> enable;\n    BitFieldModel<1,\
    \ 1> tickint;\n    BitFieldModel<2, 1> clksource;\n    BitFieldModel<16, 1> countflag;\n\
    \  };\n};\n\nstruct load\n{\n  constexpr static uint32_t Address = 0xE000E010\
    \ + 0x0004;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 24> reload;\n\
    \  };\n};\n\nstruct val\n{\n  constexpr static uint32_t Address = 0xE000E010 +\
    \ 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 24> current;\n\
    \  };\n};\n\nstruct calib\n{\n  constexpr static uint32_t Address = 0xE000E010\
    \ + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 24> tenms;\n\
    \    BitFieldModel<30, 1> skew;\n    BitFieldModel<31, 1> noref;\n  };\n};\n\n\
    }\n\n#endif /* DRAL_STM32F446_STK_H */\n"
  name: STK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SCB_H\n#define DRAL_STM32F446_SCB_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cpuid\n{\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 4> revision;\n    BitFieldModel<4,\
    \ 12> partno;\n    BitFieldModel<16, 4> constant;\n    BitFieldModel<20, 4> variant;\n\
    \    BitFieldModel<24, 8> implementer;\n  };\n};\n\nstruct icsr\n{\n  constexpr\
    \ static uint32_t Address = 0xE000ED00 + 0x0004;\n  union\n  {\n    uint32_t value;\n\
    \    BitFieldModel<0, 9> vectactive;\n    BitFieldModel<11, 1> rettobase;\n  \
    \  BitFieldModel<12, 7> vectpending;\n    BitFieldModel<22, 1> isrpending;\n \
    \   BitFieldModel<25, 1> pendstclr;\n    BitFieldModel<26, 1> pendstset;\n   \
    \ BitFieldModel<27, 1> pendsvclr;\n    BitFieldModel<28, 1> pendsvset;\n    BitFieldModel<31,\
    \ 1> nmipendset;\n  };\n};\n\nstruct vtor\n{\n  constexpr static uint32_t Address\
    \ = 0xE000ED00 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<9,\
    \ 21> tbloff;\n  };\n};\n\nstruct aircr\n{\n  constexpr static uint32_t Address\
    \ = 0xE000ED00 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> vectreset;\n    BitFieldModel<1, 1> vectclractive;\n    BitFieldModel<2,\
    \ 1> sysresetreq;\n    BitFieldModel<8, 3> prigroup;\n    BitFieldModel<15, 1>\
    \ endianess;\n    BitFieldModel<16, 16> vectkeystat;\n  };\n};\n\nstruct scr\n\
    {\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0010;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<1, 1> sleeponexit;\n    BitFieldModel<2,\
    \ 1> sleepdeep;\n    BitFieldModel<4, 1> seveonpend;\n  };\n};\n\nstruct ccr\n\
    {\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0014;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 1> nonbasethrdena;\n    BitFieldModel<1,\
    \ 1> usersetmpend;\n    BitFieldModel<3, 1> unalign__trp;\n    BitFieldModel<4,\
    \ 1> div_0_trp;\n    BitFieldModel<8, 1> bfhfnmign;\n    BitFieldModel<9, 1> stkalign;\n\
    \  };\n};\n\nstruct shpr1\n{\n  constexpr static uint32_t Address = 0xE000ED00\
    \ + 0x0018;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 8> pri_4;\n\
    \    BitFieldModel<8, 8> pri_5;\n    BitFieldModel<16, 8> pri_6;\n  };\n};\n\n\
    struct shpr2\n{\n  constexpr static uint32_t Address = 0xE000ED00 + 0x001C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<24, 8> pri_11;\n  };\n};\n\
    \nstruct shpr3\n{\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0020;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<16, 8> pri_14;\n    BitFieldModel<24,\
    \ 8> pri_15;\n  };\n};\n\nstruct shcsr\n{\n  constexpr static uint32_t Address\
    \ = 0xE000ED00 + 0x0024;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 1> memfaultact;\n    BitFieldModel<1, 1> busfaultact;\n    BitFieldModel<3,\
    \ 1> usgfaultact;\n    BitFieldModel<7, 1> svcallact;\n    BitFieldModel<8, 1>\
    \ monitoract;\n    BitFieldModel<10, 1> pendsvact;\n    BitFieldModel<11, 1> systickact;\n\
    \    BitFieldModel<12, 1> usgfaultpended;\n    BitFieldModel<13, 1> memfaultpended;\n\
    \    BitFieldModel<14, 1> busfaultpended;\n    BitFieldModel<15, 1> svcallpended;\n\
    \    BitFieldModel<16, 1> memfaultena;\n    BitFieldModel<17, 1> busfaultena;\n\
    \    BitFieldModel<18, 1> usgfaultena;\n  };\n};\n\nstruct cfsr_ufsr_bfsr_mmfsr\n\
    {\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0028;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<1, 1> iaccviol;\n    BitFieldModel<3,\
    \ 1> munstkerr;\n    BitFieldModel<4, 1> mstkerr;\n    BitFieldModel<5, 1> mlsperr;\n\
    \    BitFieldModel<7, 1> mmarvalid;\n    BitFieldModel<8, 1> ibuserr;\n    BitFieldModel<9,\
    \ 1> preciserr;\n    BitFieldModel<10, 1> impreciserr;\n    BitFieldModel<11,\
    \ 1> unstkerr;\n    BitFieldModel<12, 1> stkerr;\n    BitFieldModel<13, 1> lsperr;\n\
    \    BitFieldModel<15, 1> bfarvalid;\n    BitFieldModel<16, 1> undefinstr;\n \
    \   BitFieldModel<17, 1> invstate;\n    BitFieldModel<18, 1> invpc;\n    BitFieldModel<19,\
    \ 1> nocp;\n    BitFieldModel<24, 1> unaligned;\n    BitFieldModel<25, 1> divbyzero;\n\
    \  };\n};\n\nstruct hfsr\n{\n  constexpr static uint32_t Address = 0xE000ED00\
    \ + 0x002C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<1, 1> vecttbl;\n\
    \    BitFieldModel<30, 1> forced;\n    BitFieldModel<31, 1> debug_vt;\n  };\n\
    };\n\nstruct mmfar\n{\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0034;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> mmfar;\n  };\n};\n\
    \nstruct bfar\n{\n  constexpr static uint32_t Address = 0xE000ED00 + 0x0038;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> bfar;\n  };\n};\n\
    \nstruct afsr\n{\n  constexpr static uint32_t Address = 0xE000ED00 + 0x003C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> impdef;\n  };\n};\n\
    \n}\n\n#endif /* DRAL_STM32F446_SCB_H */\n"
  name: SCB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_NVIC_STIR_H\n#define DRAL_STM32F446_NVIC_STIR_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ stir\n{\n  constexpr static uint32_t Address = 0xE000EF00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 9> intid;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_NVIC_STIR_H */\n"
  name: NVIC_STIR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_FPU_CPACR_H\n#define DRAL_STM32F446_FPU_CPACR_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ cpacr\n{\n  constexpr static uint32_t Address = 0xE000ED88 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<20, 4> cp;\n  };\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F446_FPU_CPACR_H */\n"
  name: FPU_CPACR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SCB_ACTRL_H\n#define DRAL_STM32F446_SCB_ACTRL_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ actrl\n{\n  constexpr static uint32_t Address = 0xE000E008 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 1> dismcycint;\n    BitFieldModel<1,\
    \ 1> disdefwbuf;\n    BitFieldModel<2, 1> disfold;\n    BitFieldModel<8, 1> disfpca;\n\
    \    BitFieldModel<9, 1> disoofp;\n  };\n};\n\n}\n\n#endif /* DRAL_STM32F446_SCB_ACTRL_H\
    \ */\n"
  name: SCB_ACTRL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n *\n * Copyright (c) 2023 Gembcior\n *\n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n *\n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F446_SDIO_H\n#define DRAL_STM32F446_SDIO_H\n\
    \n#include \"dral/register_model.h\"\n\nnamespace dral::stm32f446 {\n\nstruct\
    \ power\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0000;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 2> pwrctrl;\n  };\n};\n\nstruct\
    \ clkcr\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0004;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<14, 1> hwfc_en;\n    BitFieldModel<13,\
    \ 1> negedge;\n    BitFieldModel<11, 2> widbus;\n    BitFieldModel<10, 1> bypass;\n\
    \    BitFieldModel<9, 1> pwrsav;\n    BitFieldModel<8, 1> clken;\n    BitFieldModel<0,\
    \ 8> clkdiv;\n  };\n};\n\nstruct arg\n{\n  constexpr static uint32_t Address =\
    \ 0x40012C00 + 0x0008;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0,\
    \ 32> cmdarg;\n  };\n};\n\nstruct cmd\n{\n  constexpr static uint32_t Address\
    \ = 0x40012C00 + 0x000C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<14,\
    \ 1> ce_atacmd;\n    BitFieldModel<13, 1> nien;\n    BitFieldModel<12, 1> encmdcompl;\n\
    \    BitFieldModel<11, 1> sdiosuspend;\n    BitFieldModel<10, 1> cpsmen;\n   \
    \ BitFieldModel<9, 1> waitpend;\n    BitFieldModel<8, 1> waitint;\n    BitFieldModel<6,\
    \ 2> waitresp;\n    BitFieldModel<0, 6> cmdindex;\n  };\n};\n\nstruct respcmd\n\
    {\n  constexpr static uint32_t Address = 0x40012C00 + 0x0010;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 6> respcmd;\n  };\n};\n\nstruct resp1\n\
    {\n  constexpr static uint32_t Address = 0x40012C00 + 0x0014;\n  union\n  {\n\
    \    uint32_t value;\n    BitFieldModel<0, 32> cardstatus1;\n  };\n};\n\nstruct\
    \ resp2\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0018;\n  union\n\
    \  {\n    uint32_t value;\n    BitFieldModel<0, 32> cardstatus2;\n  };\n};\n\n\
    struct resp3\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x001C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> cardstatus3;\n  };\n\
    };\n\nstruct resp4\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0020;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> cardstatus4;\n  };\n\
    };\n\nstruct dtimer\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0024;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> datatime;\n  };\n\
    };\n\nstruct dlen\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0028;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 25> datalength;\n  };\n\
    };\n\nstruct dctrl\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x002C;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<11, 1> sdioen;\n    BitFieldModel<10,\
    \ 1> rwmod;\n    BitFieldModel<9, 1> rwstop;\n    BitFieldModel<8, 1> rwstart;\n\
    \    BitFieldModel<4, 4> dblocksize;\n    BitFieldModel<3, 1> dmaen;\n    BitFieldModel<2,\
    \ 1> dtmode;\n    BitFieldModel<1, 1> dtdir;\n    BitFieldModel<0, 1> dten;\n\
    \  };\n};\n\nstruct dcount\n{\n  constexpr static uint32_t Address = 0x40012C00\
    \ + 0x0030;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 25> datacount;\n\
    \  };\n};\n\nstruct sta\n{\n  constexpr static uint32_t Address = 0x40012C00 +\
    \ 0x0034;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<23, 1> ceataend;\n\
    \    BitFieldModel<22, 1> sdioit;\n    BitFieldModel<21, 1> rxdavl;\n    BitFieldModel<20,\
    \ 1> txdavl;\n    BitFieldModel<19, 1> rxfifoe;\n    BitFieldModel<18, 1> txfifoe;\n\
    \    BitFieldModel<17, 1> rxfifof;\n    BitFieldModel<16, 1> txfifof;\n    BitFieldModel<15,\
    \ 1> rxfifohf;\n    BitFieldModel<14, 1> txfifohe;\n    BitFieldModel<13, 1> rxact;\n\
    \    BitFieldModel<12, 1> txact;\n    BitFieldModel<11, 1> cmdact;\n    BitFieldModel<10,\
    \ 1> dbckend;\n    BitFieldModel<9, 1> stbiterr;\n    BitFieldModel<8, 1> dataend;\n\
    \    BitFieldModel<7, 1> cmdsent;\n    BitFieldModel<6, 1> cmdrend;\n    BitFieldModel<5,\
    \ 1> rxoverr;\n    BitFieldModel<4, 1> txunderr;\n    BitFieldModel<3, 1> dtimeout;\n\
    \    BitFieldModel<2, 1> ctimeout;\n    BitFieldModel<1, 1> dcrcfail;\n    BitFieldModel<0,\
    \ 1> ccrcfail;\n  };\n};\n\nstruct icr\n{\n  constexpr static uint32_t Address\
    \ = 0x40012C00 + 0x0038;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<23,\
    \ 1> ceataendc;\n    BitFieldModel<22, 1> sdioitc;\n    BitFieldModel<10, 1> dbckendc;\n\
    \    BitFieldModel<9, 1> stbiterrc;\n    BitFieldModel<8, 1> dataendc;\n    BitFieldModel<7,\
    \ 1> cmdsentc;\n    BitFieldModel<6, 1> cmdrendc;\n    BitFieldModel<5, 1> rxoverrc;\n\
    \    BitFieldModel<4, 1> txunderrc;\n    BitFieldModel<3, 1> dtimeoutc;\n    BitFieldModel<2,\
    \ 1> ctimeoutc;\n    BitFieldModel<1, 1> dcrcfailc;\n    BitFieldModel<0, 1> ccrcfailc;\n\
    \  };\n};\n\nstruct mask\n{\n  constexpr static uint32_t Address = 0x40012C00\
    \ + 0x003C;\n  union\n  {\n    uint32_t value;\n    BitFieldModel<23, 1> ceataendie;\n\
    \    BitFieldModel<22, 1> sdioitie;\n    BitFieldModel<21, 1> rxdavlie;\n    BitFieldModel<20,\
    \ 1> txdavlie;\n    BitFieldModel<19, 1> rxfifoeie;\n    BitFieldModel<18, 1>\
    \ txfifoeie;\n    BitFieldModel<17, 1> rxfifofie;\n    BitFieldModel<16, 1> txfifofie;\n\
    \    BitFieldModel<15, 1> rxfifohfie;\n    BitFieldModel<14, 1> txfifoheie;\n\
    \    BitFieldModel<13, 1> rxactie;\n    BitFieldModel<12, 1> txactie;\n    BitFieldModel<11,\
    \ 1> cmdactie;\n    BitFieldModel<10, 1> dbckendie;\n    BitFieldModel<9, 1> stbiterrie;\n\
    \    BitFieldModel<8, 1> dataendie;\n    BitFieldModel<7, 1> cmdsentie;\n    BitFieldModel<6,\
    \ 1> cmdrendie;\n    BitFieldModel<5, 1> rxoverrie;\n    BitFieldModel<4, 1> txunderrie;\n\
    \    BitFieldModel<3, 1> dtimeoutie;\n    BitFieldModel<2, 1> ctimeoutie;\n  \
    \  BitFieldModel<1, 1> dcrcfailie;\n    BitFieldModel<0, 1> ccrcfailie;\n  };\n\
    };\n\nstruct fifocnt\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0048;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 24> fifocount;\n  };\n\
    };\n\nstruct fifo\n{\n  constexpr static uint32_t Address = 0x40012C00 + 0x0080;\n\
    \  union\n  {\n    uint32_t value;\n    BitFieldModel<0, 32> fifodata;\n  };\n\
    };\n\n}\n\n#endif /* DRAL_STM32F446_SDIO_H */\n"
  name: SDIO
