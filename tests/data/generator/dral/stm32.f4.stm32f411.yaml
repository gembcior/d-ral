- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_ADC_COMMON_H\n#define DRAL_STM32F411_ADC_COMMON_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass adc_common\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40012300;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CsrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ovr3 = FieldModel<address, 21, 0x00000001>;\n    using\
    \ strt3 = FieldModel<address, 20, 0x00000001>;\n    using jstrt3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using jeoc3 = FieldModel<address, 18, 0x00000001>;\n \
    \   using eoc3 = FieldModel<address, 17, 0x00000001>;\n    using awd3 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using ovr2 = FieldModel<address, 13, 0x00000001>;\n  \
    \  using strt2 = FieldModel<address, 12, 0x00000001>;\n    using jstrt2 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using jeoc2 = FieldModel<address, 10, 0x00000001>;\n \
    \   using eoc2 = FieldModel<address, 9, 0x00000001>;\n    using awd2 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using ovr1 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ strt1 = FieldModel<address, 4, 0x00000001>;\n    using jstrt1 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using jeoc1 = FieldModel<address, 2, 0x00000001>;\n   \
    \ using eoc1 = FieldModel<address, 1, 0x00000001>;\n    using awd1 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using csr = CsrReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class CcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tsvrefe = FieldModel<address, 23, 0x00000001>;\n  \
    \  using vbate = FieldModel<address, 22, 0x00000001>;\n    using adcpre = FieldModel<address,\
    \ 16, 0x00000003>;\n    using dma = FieldModel<address, 14, 0x00000003>;\n   \
    \ using dds = FieldModel<address, 13, 0x00000001>;\n    using delay = FieldModel<address,\
    \ 8, 0x0000000F>;\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x0004>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_ADC_COMMON_H */\n"
  name: ADC_Common
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_ADC1_H\n#define DRAL_STM32F411_ADC1_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass adc1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40012000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ovr = FieldModel<address, 5, 0x00000001>;\n    using\
    \ strt = FieldModel<address, 4, 0x00000001>;\n    using jstrt = FieldModel<address,\
    \ 3, 0x00000001>;\n    using jeoc = FieldModel<address, 2, 0x00000001>;\n    using\
    \ eoc = FieldModel<address, 1, 0x00000001>;\n    using awd = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ovrie = FieldModel<address, 26, 0x00000001>;\n    using\
    \ res = FieldModel<address, 24, 0x00000003>;\n    using awden = FieldModel<address,\
    \ 23, 0x00000001>;\n    using jawden = FieldModel<address, 22, 0x00000001>;\n\
    \    using discnum = FieldModel<address, 13, 0x00000007>;\n    using jdiscen =\
    \ FieldModel<address, 12, 0x00000001>;\n    using discen = FieldModel<address,\
    \ 11, 0x00000001>;\n    using jauto = FieldModel<address, 10, 0x00000001>;\n \
    \   using awdsgl = FieldModel<address, 9, 0x00000001>;\n    using scan = FieldModel<address,\
    \ 8, 0x00000001>;\n    using jeocie = FieldModel<address, 7, 0x00000001>;\n  \
    \  using awdie = FieldModel<address, 6, 0x00000001>;\n    using eocie = FieldModel<address,\
    \ 5, 0x00000001>;\n    using awdch = FieldModel<address, 0, 0x0000001F>;\n  };\n\
    \npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Cr2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using swstart = FieldModel<address, 30, 0x00000001>;\n    using exten = FieldModel<address,\
    \ 28, 0x00000003>;\n    using extsel = FieldModel<address, 24, 0x0000000F>;\n\
    \    using jswstart = FieldModel<address, 22, 0x00000001>;\n    using jexten =\
    \ FieldModel<address, 20, 0x00000003>;\n    using jextsel = FieldModel<address,\
    \ 16, 0x0000000F>;\n    using align = FieldModel<address, 11, 0x00000001>;\n \
    \   using eocs = FieldModel<address, 10, 0x00000001>;\n    using dds = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dma = FieldModel<address, 8, 0x00000001>;\n    using\
    \ cont = FieldModel<address, 1, 0x00000001>;\n    using adon = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Smpr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using smpx_x = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\
    \npublic:\n  using smpr1 = Smpr1Reg<BaseAddress + 0x000C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Smpr2Reg: public RegisterModel<address>\n  {\n \
    \ public:\n    using smpx_x = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using smpr2 = Smpr2Reg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Jofr1Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using joffset1 = FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n \
    \ using jofr1 = Jofr1Reg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Jofr2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using joffset2 = FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n \
    \ using jofr2 = Jofr2Reg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Jofr3Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using joffset3 = FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n \
    \ using jofr3 = Jofr3Reg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Jofr4Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using joffset4 = FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n \
    \ using jofr4 = Jofr4Reg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class HtrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using ht = FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n  using htr\
    \ = HtrReg<BaseAddress + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class LtrReg: public RegisterModel<address>\n  {\n  public:\n    using lt =\
    \ FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n  using ltr = LtrReg<BaseAddress\
    \ + 0x0028>;\n\nprivate:\n  template <uint32_t address>\n  class Sqr1Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using l = FieldModel<address, 20,\
    \ 0x0000000F>;\n    using sq16 = FieldModel<address, 15, 0x0000001F>;\n    using\
    \ sq15 = FieldModel<address, 10, 0x0000001F>;\n    using sq14 = FieldModel<address,\
    \ 5, 0x0000001F>;\n    using sq13 = FieldModel<address, 0, 0x0000001F>;\n  };\n\
    \npublic:\n  using sqr1 = Sqr1Reg<BaseAddress + 0x002C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Sqr2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using sq12 = FieldModel<address, 25, 0x0000001F>;\n    using sq11 = FieldModel<address,\
    \ 20, 0x0000001F>;\n    using sq10 = FieldModel<address, 15, 0x0000001F>;\n  \
    \  using sq9 = FieldModel<address, 10, 0x0000001F>;\n    using sq8 = FieldModel<address,\
    \ 5, 0x0000001F>;\n    using sq7 = FieldModel<address, 0, 0x0000001F>;\n  };\n\
    \npublic:\n  using sqr2 = Sqr2Reg<BaseAddress + 0x0030>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Sqr3Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using sq6 = FieldModel<address, 25, 0x0000001F>;\n    using sq5 = FieldModel<address,\
    \ 20, 0x0000001F>;\n    using sq4 = FieldModel<address, 15, 0x0000001F>;\n   \
    \ using sq3 = FieldModel<address, 10, 0x0000001F>;\n    using sq2 = FieldModel<address,\
    \ 5, 0x0000001F>;\n    using sq1 = FieldModel<address, 0, 0x0000001F>;\n  };\n\
    \npublic:\n  using sqr3 = Sqr3Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class JsqrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using jl = FieldModel<address, 20, 0x00000003>;\n    using jsq4 = FieldModel<address,\
    \ 15, 0x0000001F>;\n    using jsq3 = FieldModel<address, 10, 0x0000001F>;\n  \
    \  using jsq2 = FieldModel<address, 5, 0x0000001F>;\n    using jsq1 = FieldModel<address,\
    \ 0, 0x0000001F>;\n  };\n\npublic:\n  using jsqr = JsqrReg<BaseAddress + 0x0038>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Jdr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using jdata = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\
    \npublic:\n  using jdr1 = Jdr1Reg<BaseAddress + 0x003C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Jdr2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using jdata = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ jdr2 = Jdr2Reg<BaseAddress + 0x0040>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Jdr3Reg: public RegisterModel<address>\n  {\n  public:\n    using jdata\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using jdr3 = Jdr3Reg<BaseAddress\
    \ + 0x0044>;\n\nprivate:\n  template <uint32_t address>\n  class Jdr4Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using jdata = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using jdr4 = Jdr4Reg<BaseAddress + 0x0048>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using data = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x004C>;\nprivate:\n  template <uint32_t\
    \ address, uint32_t bankOffset>\n  class SmprxBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using smpx_x = FieldModel<address, 0, 0xFFFFFFFF,\
    \ bankOffset>;\n  };\n\npublic:\n  using smprx = SmprxBankReg<BaseAddress + 0x000C,\
    \ 0x0004>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n \
    \ class JdrxBankReg: public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using jdata = FieldModel<address, 0, 0x0000FFFF, bankOffset>;\n  };\n\npublic:\n\
    \  using jdrx = JdrxBankReg<BaseAddress + 0x003C, 0x0004>;\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_ADC1_H */\n"
  name: ADC1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_CRC_H\n#define DRAL_STM32F411_CRC_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass crc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40023000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class IdrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using idr = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using idr\
    \ = IdrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CrReg: public RegisterModel<address>\n  {\n  public:\n    using cr =\
    \ FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr = CrReg<BaseAddress\
    \ + 0x0008>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_CRC_H */\n"
  name: CRC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DBG_H\n#define DRAL_STM32F411_DBG_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass dbg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE0042000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Dbgmcu_idcodeReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dev_id = FieldModel<address, 0, 0x00000FFF>;\n    using\
    \ rev_id = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using dbgmcu_idcode\
    \ = Dbgmcu_idcodeReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Dbgmcu_crReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using dbg_sleep = FieldModel<address, 0, 0x00000001>;\n    using dbg_stop\
    \ = FieldModel<address, 1, 0x00000001>;\n    using dbg_standby = FieldModel<address,\
    \ 2, 0x00000001>;\n    using trace_ioen = FieldModel<address, 5, 0x00000001>;\n\
    \    using trace_mode = FieldModel<address, 6, 0x00000003>;\n  };\n\npublic:\n\
    \  using dbgmcu_cr = Dbgmcu_crReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Dbgmcu_apb1_fzReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dbg_tim2_stop = FieldModel<address, 0, 0x00000001>;\n\
    \    using dbg_tim3_stop = FieldModel<address, 1, 0x00000001>;\n    using dbg_tim4_stop\
    \ = FieldModel<address, 2, 0x00000001>;\n    using dbg_tim5_stop = FieldModel<address,\
    \ 3, 0x00000001>;\n    using dbg_rtc_stop = FieldModel<address, 10, 0x00000001>;\n\
    \    using dbg_wwdg_stop = FieldModel<address, 11, 0x00000001>;\n    using dbg_iwdeg_stop\
    \ = FieldModel<address, 12, 0x00000001>;\n    using dbg_i2c1_smbus_timeout = FieldModel<address,\
    \ 21, 0x00000001>;\n    using dbg_i2c2_smbus_timeout = FieldModel<address, 22,\
    \ 0x00000001>;\n    using dbg_i2c3smbus_timeout = FieldModel<address, 23, 0x00000001>;\n\
    \  };\n\npublic:\n  using dbgmcu_apb1_fz = Dbgmcu_apb1_fzReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Dbgmcu_apb2_fzReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dbg_tim1_stop = FieldModel<address, 0, 0x00000001>;\n\
    \    using dbg_tim9_stop = FieldModel<address, 16, 0x00000001>;\n    using dbg_tim10_stop\
    \ = FieldModel<address, 17, 0x00000001>;\n    using dbg_tim11_stop = FieldModel<address,\
    \ 18, 0x00000001>;\n  };\n\npublic:\n  using dbgmcu_apb2_fz = Dbgmcu_apb2_fzReg<BaseAddress\
    \ + 0x000C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_DBG_H */\n"
  name: DBG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_EXTI_H\n#define DRAL_STM32F411_EXTI_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass exti\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ImrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using mr0 = FieldModel<address, 0, 0x00000001>;\n    using\
    \ mr1 = FieldModel<address, 1, 0x00000001>;\n    using mr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using mr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ mr4 = FieldModel<address, 4, 0x00000001>;\n    using mr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using mr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ mr7 = FieldModel<address, 7, 0x00000001>;\n    using mr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using mr9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ mr10 = FieldModel<address, 10, 0x00000001>;\n    using mr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using mr12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using mr13 = FieldModel<address, 13, 0x00000001>;\n    using mr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using mr15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using mr16 = FieldModel<address, 16, 0x00000001>;\n    using mr17 = FieldModel<address,\
    \ 17, 0x00000001>;\n    using mr18 = FieldModel<address, 18, 0x00000001>;\n  \
    \  using mr19 = FieldModel<address, 19, 0x00000001>;\n    using mr20 = FieldModel<address,\
    \ 20, 0x00000001>;\n    using mr21 = FieldModel<address, 21, 0x00000001>;\n  \
    \  using mr22 = FieldModel<address, 22, 0x00000001>;\n  };\n\npublic:\n  using\
    \ imr = ImrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class EmrReg: public RegisterModel<address>\n  {\n  public:\n    using mr0\
    \ = FieldModel<address, 0, 0x00000001>;\n    using mr1 = FieldModel<address, 1,\
    \ 0x00000001>;\n    using mr2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ mr3 = FieldModel<address, 3, 0x00000001>;\n    using mr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using mr5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ mr6 = FieldModel<address, 6, 0x00000001>;\n    using mr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using mr8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ mr9 = FieldModel<address, 9, 0x00000001>;\n    using mr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using mr11 = FieldModel<address, 11, 0x00000001>;\n  \
    \  using mr12 = FieldModel<address, 12, 0x00000001>;\n    using mr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using mr14 = FieldModel<address, 14, 0x00000001>;\n  \
    \  using mr15 = FieldModel<address, 15, 0x00000001>;\n    using mr16 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using mr17 = FieldModel<address, 17, 0x00000001>;\n  \
    \  using mr18 = FieldModel<address, 18, 0x00000001>;\n    using mr19 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using mr20 = FieldModel<address, 20, 0x00000001>;\n  \
    \  using mr21 = FieldModel<address, 21, 0x00000001>;\n    using mr22 = FieldModel<address,\
    \ 22, 0x00000001>;\n  };\n\npublic:\n  using emr = EmrReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class RtsrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tr0 = FieldModel<address, 0, 0x00000001>;\n    using\
    \ tr1 = FieldModel<address, 1, 0x00000001>;\n    using tr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using tr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ tr4 = FieldModel<address, 4, 0x00000001>;\n    using tr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using tr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ tr7 = FieldModel<address, 7, 0x00000001>;\n    using tr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using tr9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ tr10 = FieldModel<address, 10, 0x00000001>;\n    using tr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using tr12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using tr13 = FieldModel<address, 13, 0x00000001>;\n    using tr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using tr15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using tr16 = FieldModel<address, 16, 0x00000001>;\n    using tr17 = FieldModel<address,\
    \ 17, 0x00000001>;\n    using tr18 = FieldModel<address, 18, 0x00000001>;\n  \
    \  using tr19 = FieldModel<address, 19, 0x00000001>;\n    using tr20 = FieldModel<address,\
    \ 20, 0x00000001>;\n    using tr21 = FieldModel<address, 21, 0x00000001>;\n  \
    \  using tr22 = FieldModel<address, 22, 0x00000001>;\n  };\n\npublic:\n  using\
    \ rtsr = RtsrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class FtsrReg: public RegisterModel<address>\n  {\n  public:\n    using tr0\
    \ = FieldModel<address, 0, 0x00000001>;\n    using tr1 = FieldModel<address, 1,\
    \ 0x00000001>;\n    using tr2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ tr3 = FieldModel<address, 3, 0x00000001>;\n    using tr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using tr5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ tr6 = FieldModel<address, 6, 0x00000001>;\n    using tr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using tr8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ tr9 = FieldModel<address, 9, 0x00000001>;\n    using tr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using tr11 = FieldModel<address, 11, 0x00000001>;\n  \
    \  using tr12 = FieldModel<address, 12, 0x00000001>;\n    using tr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using tr14 = FieldModel<address, 14, 0x00000001>;\n  \
    \  using tr15 = FieldModel<address, 15, 0x00000001>;\n    using tr16 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using tr17 = FieldModel<address, 17, 0x00000001>;\n  \
    \  using tr18 = FieldModel<address, 18, 0x00000001>;\n    using tr19 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using tr20 = FieldModel<address, 20, 0x00000001>;\n  \
    \  using tr21 = FieldModel<address, 21, 0x00000001>;\n    using tr22 = FieldModel<address,\
    \ 22, 0x00000001>;\n  };\n\npublic:\n  using ftsr = FtsrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SwierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using swier0 = FieldModel<address, 0, 0x00000001>;\n    using\
    \ swier1 = FieldModel<address, 1, 0x00000001>;\n    using swier2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using swier3 = FieldModel<address, 3, 0x00000001>;\n  \
    \  using swier4 = FieldModel<address, 4, 0x00000001>;\n    using swier5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using swier6 = FieldModel<address, 6, 0x00000001>;\n  \
    \  using swier7 = FieldModel<address, 7, 0x00000001>;\n    using swier8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using swier9 = FieldModel<address, 9, 0x00000001>;\n  \
    \  using swier10 = FieldModel<address, 10, 0x00000001>;\n    using swier11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using swier12 = FieldModel<address, 12, 0x00000001>;\n\
    \    using swier13 = FieldModel<address, 13, 0x00000001>;\n    using swier14 =\
    \ FieldModel<address, 14, 0x00000001>;\n    using swier15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using swier16 = FieldModel<address, 16, 0x00000001>;\n\
    \    using swier17 = FieldModel<address, 17, 0x00000001>;\n    using swier18 =\
    \ FieldModel<address, 18, 0x00000001>;\n    using swier19 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using swier20 = FieldModel<address, 20, 0x00000001>;\n\
    \    using swier21 = FieldModel<address, 21, 0x00000001>;\n    using swier22 =\
    \ FieldModel<address, 22, 0x00000001>;\n  };\n\npublic:\n  using swier = SwierReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n  class PrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using pr0 = FieldModel<address,\
    \ 0, 0x00000001>;\n    using pr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ pr2 = FieldModel<address, 2, 0x00000001>;\n    using pr3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using pr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ pr5 = FieldModel<address, 5, 0x00000001>;\n    using pr6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using pr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ pr8 = FieldModel<address, 8, 0x00000001>;\n    using pr9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using pr10 = FieldModel<address, 10, 0x00000001>;\n   \
    \ using pr11 = FieldModel<address, 11, 0x00000001>;\n    using pr12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using pr13 = FieldModel<address, 13, 0x00000001>;\n  \
    \  using pr14 = FieldModel<address, 14, 0x00000001>;\n    using pr15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using pr16 = FieldModel<address, 16, 0x00000001>;\n  \
    \  using pr17 = FieldModel<address, 17, 0x00000001>;\n    using pr18 = FieldModel<address,\
    \ 18, 0x00000001>;\n    using pr19 = FieldModel<address, 19, 0x00000001>;\n  \
    \  using pr20 = FieldModel<address, 20, 0x00000001>;\n    using pr21 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using pr22 = FieldModel<address, 22, 0x00000001>;\n  };\n\
    \npublic:\n  using pr = PrReg<BaseAddress + 0x0014>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_EXTI_H\
    \ */\n"
  name: EXTI
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FLASH_H\n#define DRAL_STM32F411_FLASH_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass flash\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40023C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class AcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using latency = FieldModel<address, 0, 0x00000007>;\n   \
    \ using prften = FieldModel<address, 8, 0x00000001>;\n    using icen = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dcen = FieldModel<address, 10, 0x00000001>;\n   \
    \ using icrst = FieldModel<address, 11, 0x00000001>;\n    using dcrst = FieldModel<address,\
    \ 12, 0x00000001>;\n  };\n\npublic:\n  using acr = AcrReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class KeyrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using key = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using keyr = KeyrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OptkeyrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using optkey = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using optkeyr = OptkeyrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class SrReg: public RegisterModel<address>\n  {\n  public:\n   \
    \ using eop = FieldModel<address, 0, 0x00000001>;\n    using operr = FieldModel<address,\
    \ 1, 0x00000001>;\n    using wrperr = FieldModel<address, 4, 0x00000001>;\n  \
    \  using pgaerr = FieldModel<address, 5, 0x00000001>;\n    using pgperr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using pgserr = FieldModel<address, 7, 0x00000001>;\n  \
    \  using bsy = FieldModel<address, 16, 0x00000001>;\n  };\n\npublic:\n  using\
    \ sr = SrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CrReg: public RegisterModel<address>\n  {\n  public:\n    using pg =\
    \ FieldModel<address, 0, 0x00000001>;\n    using ser = FieldModel<address, 1,\
    \ 0x00000001>;\n    using mer = FieldModel<address, 2, 0x00000001>;\n    using\
    \ snb = FieldModel<address, 3, 0x0000000F>;\n    using psize = FieldModel<address,\
    \ 8, 0x00000003>;\n    using strt = FieldModel<address, 16, 0x00000001>;\n   \
    \ using eopie = FieldModel<address, 24, 0x00000001>;\n    using errie = FieldModel<address,\
    \ 25, 0x00000001>;\n    using lock = FieldModel<address, 31, 0x00000001>;\n  };\n\
    \npublic:\n  using cr = CrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class OptcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using optlock = FieldModel<address, 0, 0x00000001>;\n    using optstrt =\
    \ FieldModel<address, 1, 0x00000001>;\n    using bor_lev = FieldModel<address,\
    \ 2, 0x00000003>;\n    using wdg_sw = FieldModel<address, 5, 0x00000001>;\n  \
    \  using nrst_stop = FieldModel<address, 6, 0x00000001>;\n    using nrst_stdby\
    \ = FieldModel<address, 7, 0x00000001>;\n    using rdp = FieldModel<address, 8,\
    \ 0x000000FF>;\n    using nwrp = FieldModel<address, 16, 0x00000FFF>;\n  };\n\n\
    public:\n  using optcr = OptcrReg<BaseAddress + 0x0014>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_FLASH_H */\n"
  name: FLASH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_IWDG_H\n#define DRAL_STM32F411_IWDG_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass iwdg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class KrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using key = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using kr = KrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class PrReg: public RegisterModel<address>\n  {\n  public:\n   \
    \ using pr = FieldModel<address, 0, 0x00000007>;\n  };\n\npublic:\n  using pr\
    \ = PrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RlrReg: public RegisterModel<address>\n  {\n  public:\n    using rl =\
    \ FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n  using rlr = RlrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n  class SrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using rvu = FieldModel<address,\
    \ 1, 0x00000001>;\n    using pvu = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x000C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_IWDG_H\
    \ */\n"
  name: IWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_DEVICE_H\n#define DRAL_STM32F411_OTG_FS_DEVICE_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_device\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_dcfgReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dspd = FieldModel<address, 0, 0x00000003>;\n    using\
    \ nzlsohsk = FieldModel<address, 2, 0x00000001>;\n    using dad = FieldModel<address,\
    \ 4, 0x0000007F>;\n    using pfivl = FieldModel<address, 11, 0x00000003>;\n  };\n\
    \npublic:\n  using fs_dcfg = Fs_dcfgReg<BaseAddress + 0x0000>;\n\nprivate:\n \
    \ template <uint32_t address>\n  class Fs_dctlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using rwusig = FieldModel<address, 0, 0x00000001>;\n    using\
    \ sdis = FieldModel<address, 1, 0x00000001>;\n    using ginsts = FieldModel<address,\
    \ 2, 0x00000001>;\n    using gonsts = FieldModel<address, 3, 0x00000001>;\n  \
    \  using tctl = FieldModel<address, 4, 0x00000007>;\n    using sginak = FieldModel<address,\
    \ 7, 0x00000001>;\n    using cginak = FieldModel<address, 8, 0x00000001>;\n  \
    \  using sgonak = FieldModel<address, 9, 0x00000001>;\n    using cgonak = FieldModel<address,\
    \ 10, 0x00000001>;\n    using poprgdne = FieldModel<address, 11, 0x00000001>;\n\
    \  };\n\npublic:\n  using fs_dctl = Fs_dctlReg<BaseAddress + 0x0004>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_dstsReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using suspsts = FieldModel<address, 0, 0x00000001>;\n   \
    \ using enumspd = FieldModel<address, 1, 0x00000003>;\n    using eerr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using fnsof = FieldModel<address, 8, 0x00003FFF>;\n  };\n\
    \npublic:\n  using fs_dsts = Fs_dstsReg<BaseAddress + 0x0008>;\n\nprivate:\n \
    \ template <uint32_t address>\n  class Fs_diepmskReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrcm = FieldModel<address, 0, 0x00000001>;\n    using\
    \ epdm = FieldModel<address, 1, 0x00000001>;\n    using tom = FieldModel<address,\
    \ 3, 0x00000001>;\n    using ittxfemsk = FieldModel<address, 4, 0x00000001>;\n\
    \    using inepnmm = FieldModel<address, 5, 0x00000001>;\n    using inepnem =\
    \ FieldModel<address, 6, 0x00000001>;\n  };\n\npublic:\n  using fs_diepmsk = Fs_diepmskReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_doepmskReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using epdm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stupm = FieldModel<address, 3, 0x00000001>;\n    using otepdm = FieldModel<address,\
    \ 4, 0x00000001>;\n  };\n\npublic:\n  using fs_doepmsk = Fs_doepmskReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_daintReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using iepint = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n    using oepint = FieldModel<address, 16, 0x0000FFFF>;\n \
    \ };\n\npublic:\n  using fs_daint = Fs_daintReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_daintmskReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using iepm = FieldModel<address, 0, 0x0000FFFF>;\n    using\
    \ oepint = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using fs_daintmsk\
    \ = Fs_daintmskReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class DvbusdisReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ vbusdt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dvbusdis\
    \ = DvbusdisReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class DvbuspulseReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ dvbusp = FieldModel<address, 0, 0x00000FFF>;\n  };\n\npublic:\n  using dvbuspulse\
    \ = DvbuspulseReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class DiepempmskReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ineptxfem = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using diepempmsk\
    \ = DiepempmskReg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Fs_diepctl0Reg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ mpsiz = FieldModel<address, 0, 0x00000003>;\n    using usbaep = FieldModel<address,\
    \ 15, 0x00000001>;\n    using naksts = FieldModel<address, 17, 0x00000001>;\n\
    \    using eptyp = FieldModel<address, 18, 0x00000003>;\n    using stall = FieldModel<address,\
    \ 21, 0x00000001>;\n    using txfnum = FieldModel<address, 22, 0x0000000F>;\n\
    \    using cnak = FieldModel<address, 26, 0x00000001>;\n    using snak = FieldModel<address,\
    \ 27, 0x00000001>;\n    using epdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using epena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_diepctl0 = Fs_diepctl0Reg<BaseAddress + 0x0100>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Diepctl1Reg: public RegisterModel<address>\n  {\n\
    \  public:\n    using epena = FieldModel<address, 31, 0x00000001>;\n    using\
    \ epdis = FieldModel<address, 30, 0x00000001>;\n    using soddfrm_sd1pid = FieldModel<address,\
    \ 29, 0x00000001>;\n    using sd0pid_sevnfrm = FieldModel<address, 28, 0x00000001>;\n\
    \    using snak = FieldModel<address, 27, 0x00000001>;\n    using cnak = FieldModel<address,\
    \ 26, 0x00000001>;\n    using txfnum = FieldModel<address, 22, 0x0000000F>;\n\
    \    using stall = FieldModel<address, 21, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using naksts = FieldModel<address, 17, 0x00000001>;\n\
    \    using eonum_dpid = FieldModel<address, 16, 0x00000001>;\n    using usbaep\
    \ = FieldModel<address, 15, 0x00000001>;\n    using mpsiz = FieldModel<address,\
    \ 0, 0x000007FF>;\n  };\n\npublic:\n  using diepctl1 = Diepctl1Reg<BaseAddress\
    \ + 0x0120>;\n\nprivate:\n  template <uint32_t address>\n  class Diepctl2Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using epena = FieldModel<address,\
    \ 31, 0x00000001>;\n    using epdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using soddfrm = FieldModel<address, 29, 0x00000001>;\n    using sd0pid_sevnfrm\
    \ = FieldModel<address, 28, 0x00000001>;\n    using snak = FieldModel<address,\
    \ 27, 0x00000001>;\n    using cnak = FieldModel<address, 26, 0x00000001>;\n  \
    \  using txfnum = FieldModel<address, 22, 0x0000000F>;\n    using stall = FieldModel<address,\
    \ 21, 0x00000001>;\n    using eptyp = FieldModel<address, 18, 0x00000003>;\n \
    \   using naksts = FieldModel<address, 17, 0x00000001>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 0x00000001>;\n    using usbaep = FieldModel<address,\
    \ 15, 0x00000001>;\n    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n  };\n\
    \npublic:\n  using diepctl2 = Diepctl2Reg<BaseAddress + 0x0140>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Diepctl3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using epena = FieldModel<address, 31, 0x00000001>;\n    using\
    \ epdis = FieldModel<address, 30, 0x00000001>;\n    using soddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using sd0pid_sevnfrm = FieldModel<address, 28, 0x00000001>;\n\
    \    using snak = FieldModel<address, 27, 0x00000001>;\n    using cnak = FieldModel<address,\
    \ 26, 0x00000001>;\n    using txfnum = FieldModel<address, 22, 0x0000000F>;\n\
    \    using stall = FieldModel<address, 21, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using naksts = FieldModel<address, 17, 0x00000001>;\n\
    \    using eonum_dpid = FieldModel<address, 16, 0x00000001>;\n    using usbaep\
    \ = FieldModel<address, 15, 0x00000001>;\n    using mpsiz = FieldModel<address,\
    \ 0, 0x000007FF>;\n  };\n\npublic:\n  using diepctl3 = Diepctl3Reg<BaseAddress\
    \ + 0x0160>;\n\nprivate:\n  template <uint32_t address>\n  class Doepctl0Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using epena = FieldModel<address,\
    \ 31, 0x00000001>;\n    using epdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using snak = FieldModel<address, 27, 0x00000001>;\n    using cnak = FieldModel<address,\
    \ 26, 0x00000001>;\n    using stall = FieldModel<address, 21, 0x00000001>;\n \
    \   using snpm = FieldModel<address, 20, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using naksts = FieldModel<address, 17, 0x00000001>;\n\
    \    using usbaep = FieldModel<address, 15, 0x00000001>;\n    using mpsiz = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using doepctl0 = Doepctl0Reg<BaseAddress\
    \ + 0x0300>;\n\nprivate:\n  template <uint32_t address>\n  class Doepctl1Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using epena = FieldModel<address,\
    \ 31, 0x00000001>;\n    using epdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using soddfrm = FieldModel<address, 29, 0x00000001>;\n    using sd0pid_sevnfrm\
    \ = FieldModel<address, 28, 0x00000001>;\n    using snak = FieldModel<address,\
    \ 27, 0x00000001>;\n    using cnak = FieldModel<address, 26, 0x00000001>;\n  \
    \  using stall = FieldModel<address, 21, 0x00000001>;\n    using snpm = FieldModel<address,\
    \ 20, 0x00000001>;\n    using eptyp = FieldModel<address, 18, 0x00000003>;\n \
    \   using naksts = FieldModel<address, 17, 0x00000001>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 0x00000001>;\n    using usbaep = FieldModel<address,\
    \ 15, 0x00000001>;\n    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n  };\n\
    \npublic:\n  using doepctl1 = Doepctl1Reg<BaseAddress + 0x0320>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Doepctl2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using epena = FieldModel<address, 31, 0x00000001>;\n    using\
    \ epdis = FieldModel<address, 30, 0x00000001>;\n    using soddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using sd0pid_sevnfrm = FieldModel<address, 28, 0x00000001>;\n\
    \    using snak = FieldModel<address, 27, 0x00000001>;\n    using cnak = FieldModel<address,\
    \ 26, 0x00000001>;\n    using stall = FieldModel<address, 21, 0x00000001>;\n \
    \   using snpm = FieldModel<address, 20, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using naksts = FieldModel<address, 17, 0x00000001>;\n\
    \    using eonum_dpid = FieldModel<address, 16, 0x00000001>;\n    using usbaep\
    \ = FieldModel<address, 15, 0x00000001>;\n    using mpsiz = FieldModel<address,\
    \ 0, 0x000007FF>;\n  };\n\npublic:\n  using doepctl2 = Doepctl2Reg<BaseAddress\
    \ + 0x0340>;\n\nprivate:\n  template <uint32_t address>\n  class Doepctl3Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using epena = FieldModel<address,\
    \ 31, 0x00000001>;\n    using epdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using soddfrm = FieldModel<address, 29, 0x00000001>;\n    using sd0pid_sevnfrm\
    \ = FieldModel<address, 28, 0x00000001>;\n    using snak = FieldModel<address,\
    \ 27, 0x00000001>;\n    using cnak = FieldModel<address, 26, 0x00000001>;\n  \
    \  using stall = FieldModel<address, 21, 0x00000001>;\n    using snpm = FieldModel<address,\
    \ 20, 0x00000001>;\n    using eptyp = FieldModel<address, 18, 0x00000003>;\n \
    \   using naksts = FieldModel<address, 17, 0x00000001>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 0x00000001>;\n    using usbaep = FieldModel<address,\
    \ 15, 0x00000001>;\n    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n  };\n\
    \npublic:\n  using doepctl3 = Doepctl3Reg<BaseAddress + 0x0360>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Diepint0Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using txfe = FieldModel<address, 7, 0x00000001>;\n    using\
    \ inepne = FieldModel<address, 6, 0x00000001>;\n    using ittxfe = FieldModel<address,\
    \ 4, 0x00000001>;\n    using toc = FieldModel<address, 3, 0x00000001>;\n    using\
    \ epdisd = FieldModel<address, 1, 0x00000001>;\n    using xfrc = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using diepint0 = Diepint0Reg<BaseAddress\
    \ + 0x0108>;\n\nprivate:\n  template <uint32_t address>\n  class Diepint1Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using txfe = FieldModel<address,\
    \ 7, 0x00000001>;\n    using inepne = FieldModel<address, 6, 0x00000001>;\n  \
    \  using ittxfe = FieldModel<address, 4, 0x00000001>;\n    using toc = FieldModel<address,\
    \ 3, 0x00000001>;\n    using epdisd = FieldModel<address, 1, 0x00000001>;\n  \
    \  using xfrc = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ diepint1 = Diepint1Reg<BaseAddress + 0x0128>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Diepint2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using txfe = FieldModel<address, 7, 0x00000001>;\n    using inepne = FieldModel<address,\
    \ 6, 0x00000001>;\n    using ittxfe = FieldModel<address, 4, 0x00000001>;\n  \
    \  using toc = FieldModel<address, 3, 0x00000001>;\n    using epdisd = FieldModel<address,\
    \ 1, 0x00000001>;\n    using xfrc = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using diepint2 = Diepint2Reg<BaseAddress + 0x0148>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Diepint3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using txfe = FieldModel<address, 7, 0x00000001>;\n    using\
    \ inepne = FieldModel<address, 6, 0x00000001>;\n    using ittxfe = FieldModel<address,\
    \ 4, 0x00000001>;\n    using toc = FieldModel<address, 3, 0x00000001>;\n    using\
    \ epdisd = FieldModel<address, 1, 0x00000001>;\n    using xfrc = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using diepint3 = Diepint3Reg<BaseAddress\
    \ + 0x0168>;\n\nprivate:\n  template <uint32_t address>\n  class Doepint0Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using b2bstup = FieldModel<address,\
    \ 6, 0x00000001>;\n    using otepdis = FieldModel<address, 4, 0x00000001>;\n \
    \   using stup = FieldModel<address, 3, 0x00000001>;\n    using epdisd = FieldModel<address,\
    \ 1, 0x00000001>;\n    using xfrc = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using doepint0 = Doepint0Reg<BaseAddress + 0x0308>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Doepint1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using b2bstup = FieldModel<address, 6, 0x00000001>;\n   \
    \ using otepdis = FieldModel<address, 4, 0x00000001>;\n    using stup = FieldModel<address,\
    \ 3, 0x00000001>;\n    using epdisd = FieldModel<address, 1, 0x00000001>;\n  \
    \  using xfrc = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ doepint1 = Doepint1Reg<BaseAddress + 0x0328>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Doepint2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using b2bstup = FieldModel<address, 6, 0x00000001>;\n    using otepdis =\
    \ FieldModel<address, 4, 0x00000001>;\n    using stup = FieldModel<address, 3,\
    \ 0x00000001>;\n    using epdisd = FieldModel<address, 1, 0x00000001>;\n    using\
    \ xfrc = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using doepint2\
    \ = Doepint2Reg<BaseAddress + 0x0348>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Doepint3Reg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ b2bstup = FieldModel<address, 6, 0x00000001>;\n    using otepdis = FieldModel<address,\
    \ 4, 0x00000001>;\n    using stup = FieldModel<address, 3, 0x00000001>;\n    using\
    \ epdisd = FieldModel<address, 1, 0x00000001>;\n    using xfrc = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using doepint3 = Doepint3Reg<BaseAddress\
    \ + 0x0368>;\n\nprivate:\n  template <uint32_t address>\n  class Dieptsiz0Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using pktcnt = FieldModel<address,\
    \ 19, 0x00000003>;\n    using xfrsiz = FieldModel<address, 0, 0x0000007F>;\n \
    \ };\n\npublic:\n  using dieptsiz0 = Dieptsiz0Reg<BaseAddress + 0x0110>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Doeptsiz0Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using stupcnt = FieldModel<address, 29, 0x00000003>;\n  \
    \  using pktcnt = FieldModel<address, 19, 0x00000001>;\n    using xfrsiz = FieldModel<address,\
    \ 0, 0x0000007F>;\n  };\n\npublic:\n  using doeptsiz0 = Doeptsiz0Reg<BaseAddress\
    \ + 0x0310>;\n\nprivate:\n  template <uint32_t address>\n  class Dieptsiz1Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using mcnt = FieldModel<address,\
    \ 29, 0x00000003>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF>;\n\
    \    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n  };\n\npublic:\n  using\
    \ dieptsiz1 = Dieptsiz1Reg<BaseAddress + 0x0130>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Dieptsiz2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mcnt = FieldModel<address, 29, 0x00000003>;\n    using pktcnt = FieldModel<address,\
    \ 19, 0x000003FF>;\n    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n \
    \ };\n\npublic:\n  using dieptsiz2 = Dieptsiz2Reg<BaseAddress + 0x0150>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Dieptsiz3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using mcnt = FieldModel<address, 29, 0x00000003>;\n    using\
    \ pktcnt = FieldModel<address, 19, 0x000003FF>;\n    using xfrsiz = FieldModel<address,\
    \ 0, 0x0007FFFF>;\n  };\n\npublic:\n  using dieptsiz3 = Dieptsiz3Reg<BaseAddress\
    \ + 0x0170>;\n\nprivate:\n  template <uint32_t address>\n  class Dtxfsts0Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ineptfsav = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dtxfsts0 = Dtxfsts0Reg<BaseAddress\
    \ + 0x0118>;\n\nprivate:\n  template <uint32_t address>\n  class Dtxfsts1Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ineptfsav = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dtxfsts1 = Dtxfsts1Reg<BaseAddress\
    \ + 0x0138>;\n\nprivate:\n  template <uint32_t address>\n  class Dtxfsts2Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ineptfsav = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dtxfsts2 = Dtxfsts2Reg<BaseAddress\
    \ + 0x0158>;\n\nprivate:\n  template <uint32_t address>\n  class Dtxfsts3Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ineptfsav = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dtxfsts3 = Dtxfsts3Reg<BaseAddress\
    \ + 0x0178>;\n\nprivate:\n  template <uint32_t address>\n  class Doeptsiz1Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using rxdpid_stupcnt = FieldModel<address,\
    \ 29, 0x00000003>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF>;\n\
    \    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n  };\n\npublic:\n  using\
    \ doeptsiz1 = Doeptsiz1Reg<BaseAddress + 0x0330>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Doeptsiz2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using rxdpid_stupcnt = FieldModel<address, 29, 0x00000003>;\n    using pktcnt\
    \ = FieldModel<address, 19, 0x000003FF>;\n    using xfrsiz = FieldModel<address,\
    \ 0, 0x0007FFFF>;\n  };\n\npublic:\n  using doeptsiz2 = Doeptsiz2Reg<BaseAddress\
    \ + 0x0350>;\n\nprivate:\n  template <uint32_t address>\n  class Doeptsiz3Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using rxdpid_stupcnt = FieldModel<address,\
    \ 29, 0x00000003>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF>;\n\
    \    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n  };\n\npublic:\n  using\
    \ doeptsiz3 = Doeptsiz3Reg<BaseAddress + 0x0370>;\nprivate:\n  template <uint32_t\
    \ address, uint32_t bankOffset>\n  class DiepctlxBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using epena = FieldModel<address, 31, 0x00000001,\
    \ bankOffset>;\n    using epdis = FieldModel<address, 30, 0x00000001, bankOffset>;\n\
    \    using soddfrm = FieldModel<address, 29, 0x00000001, bankOffset>;\n    using\
    \ sd0pid_sevnfrm = FieldModel<address, 28, 0x00000001, bankOffset>;\n    using\
    \ snak = FieldModel<address, 27, 0x00000001, bankOffset>;\n    using cnak = FieldModel<address,\
    \ 26, 0x00000001, bankOffset>;\n    using txfnum = FieldModel<address, 22, 0x0000000F,\
    \ bankOffset>;\n    using stall = FieldModel<address, 21, 0x00000001, bankOffset>;\n\
    \    using eptyp = FieldModel<address, 18, 0x00000003, bankOffset>;\n    using\
    \ naksts = FieldModel<address, 17, 0x00000001, bankOffset>;\n    using eonum_dpid\
    \ = FieldModel<address, 16, 0x00000001, bankOffset>;\n    using usbaep = FieldModel<address,\
    \ 15, 0x00000001, bankOffset>;\n    using mpsiz = FieldModel<address, 0, 0x000007FF,\
    \ bankOffset>;\n  };\n\npublic:\n  using diepctlx = DiepctlxBankReg<BaseAddress\
    \ + 0x0140, 0x0020>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n\
    \  class DoepctlxBankReg: public RegisterBankModel<address, bankOffset>\n  {\n\
    \  public:\n    using epena = FieldModel<address, 31, 0x00000001, bankOffset>;\n\
    \    using epdis = FieldModel<address, 30, 0x00000001, bankOffset>;\n    using\
    \ soddfrm = FieldModel<address, 29, 0x00000001, bankOffset>;\n    using sd0pid_sevnfrm\
    \ = FieldModel<address, 28, 0x00000001, bankOffset>;\n    using snak = FieldModel<address,\
    \ 27, 0x00000001, bankOffset>;\n    using cnak = FieldModel<address, 26, 0x00000001,\
    \ bankOffset>;\n    using stall = FieldModel<address, 21, 0x00000001, bankOffset>;\n\
    \    using snpm = FieldModel<address, 20, 0x00000001, bankOffset>;\n    using\
    \ eptyp = FieldModel<address, 18, 0x00000003, bankOffset>;\n    using naksts =\
    \ FieldModel<address, 17, 0x00000001, bankOffset>;\n    using eonum_dpid = FieldModel<address,\
    \ 16, 0x00000001, bankOffset>;\n    using usbaep = FieldModel<address, 15, 0x00000001,\
    \ bankOffset>;\n    using mpsiz = FieldModel<address, 0, 0x000007FF, bankOffset>;\n\
    \  };\n\npublic:\n  using doepctlx = DoepctlxBankReg<BaseAddress + 0x0320, 0x0020>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class DiepintxBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using txfe\
    \ = FieldModel<address, 7, 0x00000001, bankOffset>;\n    using inepne = FieldModel<address,\
    \ 6, 0x00000001, bankOffset>;\n    using ittxfe = FieldModel<address, 4, 0x00000001,\
    \ bankOffset>;\n    using toc = FieldModel<address, 3, 0x00000001, bankOffset>;\n\
    \    using epdisd = FieldModel<address, 1, 0x00000001, bankOffset>;\n    using\
    \ xfrc = FieldModel<address, 0, 0x00000001, bankOffset>;\n  };\n\npublic:\n  using\
    \ diepintx = DiepintxBankReg<BaseAddress + 0x0108, 0x0020>;\n\nprivate:\n  template\
    \ <uint32_t address, uint32_t bankOffset>\n  class DoepintxBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using b2bstup = FieldModel<address, 6, 0x00000001,\
    \ bankOffset>;\n    using otepdis = FieldModel<address, 4, 0x00000001, bankOffset>;\n\
    \    using stup = FieldModel<address, 3, 0x00000001, bankOffset>;\n    using epdisd\
    \ = FieldModel<address, 1, 0x00000001, bankOffset>;\n    using xfrc = FieldModel<address,\
    \ 0, 0x00000001, bankOffset>;\n  };\n\npublic:\n  using doepintx = DoepintxBankReg<BaseAddress\
    \ + 0x0308, 0x0020>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n\
    \  class DieptsizxBankReg: public RegisterBankModel<address, bankOffset>\n  {\n\
    \  public:\n    using mcnt = FieldModel<address, 29, 0x00000003, bankOffset>;\n\
    \    using pktcnt = FieldModel<address, 19, 0x000003FF, bankOffset>;\n    using\
    \ xfrsiz = FieldModel<address, 0, 0x0007FFFF, bankOffset>;\n  };\n\npublic:\n\
    \  using dieptsizx = DieptsizxBankReg<BaseAddress + 0x0130, 0x0020>;\n\nprivate:\n\
    \  template <uint32_t address, uint32_t bankOffset>\n  class DtxfstsxBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using ineptfsav\
    \ = FieldModel<address, 0, 0x0000FFFF, bankOffset>;\n  };\n\npublic:\n  using\
    \ dtxfstsx = DtxfstsxBankReg<BaseAddress + 0x0118, 0x0020>;\n\nprivate:\n  template\
    \ <uint32_t address, uint32_t bankOffset>\n  class DoeptsizxBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using rxdpid_stupcnt = FieldModel<address,\
    \ 29, 0x00000003, bankOffset>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF,\
    \ bankOffset>;\n    using xfrsiz = FieldModel<address, 0, 0x0007FFFF, bankOffset>;\n\
    \  };\n\npublic:\n  using doeptsizx = DoeptsizxBankReg<BaseAddress + 0x0330, 0x0020>;\n\
    };\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_DEVICE_H */\n"
  name: OTG_FS_DEVICE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_GLOBAL_H\n#define DRAL_STM32F411_OTG_FS_GLOBAL_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_global\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_gotgctlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using srqscs = FieldModel<address, 0, 0x00000001>;\n    using\
    \ srq = FieldModel<address, 1, 0x00000001>;\n    using hngscs = FieldModel<address,\
    \ 8, 0x00000001>;\n    using hnprq = FieldModel<address, 9, 0x00000001>;\n   \
    \ using hshnpen = FieldModel<address, 10, 0x00000001>;\n    using dhnpen = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cidsts = FieldModel<address, 16, 0x00000001>;\n\
    \    using dbct = FieldModel<address, 17, 0x00000001>;\n    using asvld = FieldModel<address,\
    \ 18, 0x00000001>;\n    using bsvld = FieldModel<address, 19, 0x00000001>;\n \
    \ };\n\npublic:\n  using fs_gotgctl = Fs_gotgctlReg<BaseAddress + 0x0000>;\n\n\
    private:\n  template <uint32_t address>\n  class Fs_gotgintReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using sedet = FieldModel<address, 2, 0x00000001>;\n    using\
    \ srsschg = FieldModel<address, 8, 0x00000001>;\n    using hnsschg = FieldModel<address,\
    \ 9, 0x00000001>;\n    using hngdet = FieldModel<address, 17, 0x00000001>;\n \
    \   using adtochg = FieldModel<address, 18, 0x00000001>;\n    using dbcdne = FieldModel<address,\
    \ 19, 0x00000001>;\n  };\n\npublic:\n  using fs_gotgint = Fs_gotgintReg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_gahbcfgReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using gint = FieldModel<address,\
    \ 0, 0x00000001>;\n    using txfelvl = FieldModel<address, 7, 0x00000001>;\n \
    \   using ptxfelvl = FieldModel<address, 8, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_gahbcfg = Fs_gahbcfgReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_gusbcfgReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using tocal = FieldModel<address, 0, 0x00000007>;\n    using physel = FieldModel<address,\
    \ 6, 0x00000001>;\n    using srpcap = FieldModel<address, 8, 0x00000001>;\n  \
    \  using hnpcap = FieldModel<address, 9, 0x00000001>;\n    using trdt = FieldModel<address,\
    \ 10, 0x0000000F>;\n    using fhmod = FieldModel<address, 29, 0x00000001>;\n \
    \   using fdmod = FieldModel<address, 30, 0x00000001>;\n    using ctxpkt = FieldModel<address,\
    \ 31, 0x00000001>;\n  };\n\npublic:\n  using fs_gusbcfg = Fs_gusbcfgReg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_grstctlReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using csrst = FieldModel<address,\
    \ 0, 0x00000001>;\n    using hsrst = FieldModel<address, 1, 0x00000001>;\n   \
    \ using fcrst = FieldModel<address, 2, 0x00000001>;\n    using rxfflsh = FieldModel<address,\
    \ 4, 0x00000001>;\n    using txfflsh = FieldModel<address, 5, 0x00000001>;\n \
    \   using txfnum = FieldModel<address, 6, 0x0000001F>;\n    using ahbidl = FieldModel<address,\
    \ 31, 0x00000001>;\n  };\n\npublic:\n  using fs_grstctl = Fs_grstctlReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_gintstsReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using cmod = FieldModel<address,\
    \ 0, 0x00000001>;\n    using mmis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ otgint = FieldModel<address, 2, 0x00000001>;\n    using sof = FieldModel<address,\
    \ 3, 0x00000001>;\n    using rxflvl = FieldModel<address, 4, 0x00000001>;\n  \
    \  using nptxfe = FieldModel<address, 5, 0x00000001>;\n    using ginakeff = FieldModel<address,\
    \ 6, 0x00000001>;\n    using goutnakeff = FieldModel<address, 7, 0x00000001>;\n\
    \    using esusp = FieldModel<address, 10, 0x00000001>;\n    using usbsusp = FieldModel<address,\
    \ 11, 0x00000001>;\n    using usbrst = FieldModel<address, 12, 0x00000001>;\n\
    \    using enumdne = FieldModel<address, 13, 0x00000001>;\n    using isoodrp =\
    \ FieldModel<address, 14, 0x00000001>;\n    using eopf = FieldModel<address, 15,\
    \ 0x00000001>;\n    using iepint = FieldModel<address, 18, 0x00000001>;\n    using\
    \ oepint = FieldModel<address, 19, 0x00000001>;\n    using iisoixfr = FieldModel<address,\
    \ 20, 0x00000001>;\n    using ipxfr_incompisoout = FieldModel<address, 21, 0x00000001>;\n\
    \    using hprtint = FieldModel<address, 24, 0x00000001>;\n    using hcint = FieldModel<address,\
    \ 25, 0x00000001>;\n    using ptxfe = FieldModel<address, 26, 0x00000001>;\n \
    \   using cidschg = FieldModel<address, 28, 0x00000001>;\n    using discint =\
    \ FieldModel<address, 29, 0x00000001>;\n    using srqint = FieldModel<address,\
    \ 30, 0x00000001>;\n    using wkupint = FieldModel<address, 31, 0x00000001>;\n\
    \  };\n\npublic:\n  using fs_gintsts = Fs_gintstsReg<BaseAddress + 0x0014>;\n\n\
    private:\n  template <uint32_t address>\n  class Fs_gintmskReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using mmism = FieldModel<address, 1, 0x00000001>;\n    using\
    \ otgint = FieldModel<address, 2, 0x00000001>;\n    using sofm = FieldModel<address,\
    \ 3, 0x00000001>;\n    using rxflvlm = FieldModel<address, 4, 0x00000001>;\n \
    \   using nptxfem = FieldModel<address, 5, 0x00000001>;\n    using ginakeffm =\
    \ FieldModel<address, 6, 0x00000001>;\n    using gonakeffm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using esuspm = FieldModel<address, 10, 0x00000001>;\n \
    \   using usbsuspm = FieldModel<address, 11, 0x00000001>;\n    using usbrst =\
    \ FieldModel<address, 12, 0x00000001>;\n    using enumdnem = FieldModel<address,\
    \ 13, 0x00000001>;\n    using isoodrpm = FieldModel<address, 14, 0x00000001>;\n\
    \    using eopfm = FieldModel<address, 15, 0x00000001>;\n    using epmism = FieldModel<address,\
    \ 17, 0x00000001>;\n    using iepint = FieldModel<address, 18, 0x00000001>;\n\
    \    using oepint = FieldModel<address, 19, 0x00000001>;\n    using iisoixfrm\
    \ = FieldModel<address, 20, 0x00000001>;\n    using ipxfrm_iisooxfrm = FieldModel<address,\
    \ 21, 0x00000001>;\n    using prtim = FieldModel<address, 24, 0x00000001>;\n \
    \   using hcim = FieldModel<address, 25, 0x00000001>;\n    using ptxfem = FieldModel<address,\
    \ 26, 0x00000001>;\n    using cidschgm = FieldModel<address, 28, 0x00000001>;\n\
    \    using discint = FieldModel<address, 29, 0x00000001>;\n    using srqim = FieldModel<address,\
    \ 30, 0x00000001>;\n    using wuim = FieldModel<address, 31, 0x00000001>;\n  };\n\
    \npublic:\n  using fs_gintmsk = Fs_gintmskReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_grxstsr_deviceReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using epnum = FieldModel<address, 0, 0x0000000F>;\n    using\
    \ bcnt = FieldModel<address, 4, 0x000007FF>;\n    using dpid = FieldModel<address,\
    \ 15, 0x00000003>;\n    using pktsts = FieldModel<address, 17, 0x0000000F>;\n\
    \    using frmnum = FieldModel<address, 21, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ fs_grxstsr_device = Fs_grxstsr_deviceReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_grxstsr_hostReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using epnum = FieldModel<address, 0, 0x0000000F>;\n    using\
    \ bcnt = FieldModel<address, 4, 0x000007FF>;\n    using dpid = FieldModel<address,\
    \ 15, 0x00000003>;\n    using pktsts = FieldModel<address, 17, 0x0000000F>;\n\
    \    using frmnum = FieldModel<address, 21, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ fs_grxstsr_host = Fs_grxstsr_hostReg<BaseAddress + 0x001C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Fs_grxfsizReg: public RegisterModel<address>\n \
    \ {\n  public:\n    using rxfd = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using fs_grxfsiz = Fs_grxfsizReg<BaseAddress + 0x0024>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_gnptxfsiz_deviceReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tx0fsa = FieldModel<address, 0, 0x0000FFFF>;\n    using\
    \ tx0fd = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using fs_gnptxfsiz_device\
    \ = Fs_gnptxfsiz_deviceReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_gnptxfsiz_hostReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using nptxfsa = FieldModel<address, 0, 0x0000FFFF>;\n    using\
    \ nptxfd = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using fs_gnptxfsiz_host\
    \ = Fs_gnptxfsiz_hostReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_gnptxstsReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using nptxfsav = FieldModel<address, 0, 0x0000FFFF>;\n    using nptqxsav\
    \ = FieldModel<address, 16, 0x000000FF>;\n    using nptxqtop = FieldModel<address,\
    \ 24, 0x0000007F>;\n  };\n\npublic:\n  using fs_gnptxsts = Fs_gnptxstsReg<BaseAddress\
    \ + 0x002C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_gccfgReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using pwrdwn = FieldModel<address,\
    \ 16, 0x00000001>;\n    using vbusasen = FieldModel<address, 18, 0x00000001>;\n\
    \    using vbusbsen = FieldModel<address, 19, 0x00000001>;\n    using sofouten\
    \ = FieldModel<address, 20, 0x00000001>;\n  };\n\npublic:\n  using fs_gccfg =\
    \ Fs_gccfgReg<BaseAddress + 0x0038>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Fs_cidReg: public RegisterModel<address>\n  {\n  public:\n    using product_id\
    \ = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using fs_cid = Fs_cidReg<BaseAddress\
    \ + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hptxfsizReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ptxsa = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n    using ptxfsiz = FieldModel<address, 16, 0x0000FFFF>;\n\
    \  };\n\npublic:\n  using fs_hptxfsiz = Fs_hptxfsizReg<BaseAddress + 0x0100>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Fs_dieptxf1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptxsa = FieldModel<address, 0, 0x0000FFFF>;\n  \
    \  using ineptxfd = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ fs_dieptxf1 = Fs_dieptxf1Reg<BaseAddress + 0x0104>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Fs_dieptxf2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptxsa = FieldModel<address, 0, 0x0000FFFF>;\n  \
    \  using ineptxfd = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ fs_dieptxf2 = Fs_dieptxf2Reg<BaseAddress + 0x0108>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Fs_dieptxf3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ineptxsa = FieldModel<address, 0, 0x0000FFFF>;\n  \
    \  using ineptxfd = FieldModel<address, 16, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ fs_dieptxf3 = Fs_dieptxf3Reg<BaseAddress + 0x010C>;\n\n};\n\n}\n\n#endif /*\
    \ DRAL_STM32F411_OTG_FS_GLOBAL_H */\n"
  name: OTG_FS_GLOBAL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_HOST_H\n#define DRAL_STM32F411_OTG_FS_HOST_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_host\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_hcfgReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using fslspcs = FieldModel<address, 0, 0x00000003>;\n   \
    \ using fslss = FieldModel<address, 2, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcfg = Fs_hcfgReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class HfirReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using frivl = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ hfir = HfirReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Fs_hfnumReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ frnum = FieldModel<address, 0, 0x0000FFFF>;\n    using ftrem = FieldModel<address,\
    \ 16, 0x0000FFFF>;\n  };\n\npublic:\n  using fs_hfnum = Fs_hfnumReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hptxstsReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ptxfsavl = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n    using ptxqsav = FieldModel<address, 16, 0x000000FF>;\n\
    \    using ptxqtop = FieldModel<address, 24, 0x000000FF>;\n  };\n\npublic:\n \
    \ using fs_hptxsts = Fs_hptxstsReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class HaintReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using haint = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n\
    \  using haint = HaintReg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class HaintmskReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using haintm = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ haintmsk = HaintmskReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hprtReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using pcsts = FieldModel<address, 0, 0x00000001>;\n    using pcdet = FieldModel<address,\
    \ 1, 0x00000001>;\n    using pena = FieldModel<address, 2, 0x00000001>;\n    using\
    \ penchng = FieldModel<address, 3, 0x00000001>;\n    using poca = FieldModel<address,\
    \ 4, 0x00000001>;\n    using pocchng = FieldModel<address, 5, 0x00000001>;\n \
    \   using pres = FieldModel<address, 6, 0x00000001>;\n    using psusp = FieldModel<address,\
    \ 7, 0x00000001>;\n    using prst = FieldModel<address, 8, 0x00000001>;\n    using\
    \ plsts = FieldModel<address, 10, 0x00000003>;\n    using ppwr = FieldModel<address,\
    \ 12, 0x00000001>;\n    using ptctl = FieldModel<address, 13, 0x0000000F>;\n \
    \   using pspd = FieldModel<address, 17, 0x00000003>;\n  };\n\npublic:\n  using\
    \ fs_hprt = Fs_hprtReg<BaseAddress + 0x0040>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar0Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar0 = Fs_hcchar0Reg<BaseAddress + 0x0100>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar1Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar1 = Fs_hcchar1Reg<BaseAddress + 0x0120>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar2 = Fs_hcchar2Reg<BaseAddress + 0x0140>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar3Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar3 = Fs_hcchar3Reg<BaseAddress + 0x0160>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar4Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar4 = Fs_hcchar4Reg<BaseAddress + 0x0180>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar5Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar5 = Fs_hcchar5Reg<BaseAddress + 0x01A0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar6Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar6 = Fs_hcchar6Reg<BaseAddress + 0x01C0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcchar7Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mpsiz = FieldModel<address, 0, 0x000007FF>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F>;\n    using epdir = FieldModel<address, 15, 0x00000001>;\n \
    \   using lsdev = FieldModel<address, 17, 0x00000001>;\n    using eptyp = FieldModel<address,\
    \ 18, 0x00000003>;\n    using mcnt = FieldModel<address, 20, 0x00000003>;\n  \
    \  using dad = FieldModel<address, 22, 0x0000007F>;\n    using oddfrm = FieldModel<address,\
    \ 29, 0x00000001>;\n    using chdis = FieldModel<address, 30, 0x00000001>;\n \
    \   using chena = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcchar7 = Fs_hcchar7Reg<BaseAddress + 0x01E0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcint0Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrc = FieldModel<address, 0, 0x00000001>;\n    using chh = FieldModel<address,\
    \ 1, 0x00000001>;\n    using stall = FieldModel<address, 3, 0x00000001>;\n   \
    \ using nak = FieldModel<address, 4, 0x00000001>;\n    using ack = FieldModel<address,\
    \ 5, 0x00000001>;\n    using txerr = FieldModel<address, 7, 0x00000001>;\n   \
    \ using bberr = FieldModel<address, 8, 0x00000001>;\n    using frmor = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dterr = FieldModel<address, 10, 0x00000001>;\n  };\n\
    \npublic:\n  using fs_hcint0 = Fs_hcint0Reg<BaseAddress + 0x0108>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_hcint1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 0x00000001>;\n    using\
    \ chh = FieldModel<address, 1, 0x00000001>;\n    using stall = FieldModel<address,\
    \ 3, 0x00000001>;\n    using nak = FieldModel<address, 4, 0x00000001>;\n    using\
    \ ack = FieldModel<address, 5, 0x00000001>;\n    using txerr = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberr = FieldModel<address, 8, 0x00000001>;\n   \
    \ using frmor = FieldModel<address, 9, 0x00000001>;\n    using dterr = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcint1 = Fs_hcint1Reg<BaseAddress\
    \ + 0x0128>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcint2Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrc = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chh = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stall = FieldModel<address, 3, 0x00000001>;\n    using nak = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ack = FieldModel<address, 5, 0x00000001>;\n    using\
    \ txerr = FieldModel<address, 7, 0x00000001>;\n    using bberr = FieldModel<address,\
    \ 8, 0x00000001>;\n    using frmor = FieldModel<address, 9, 0x00000001>;\n   \
    \ using dterr = FieldModel<address, 10, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcint2 = Fs_hcint2Reg<BaseAddress + 0x0148>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcint3Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrc = FieldModel<address, 0, 0x00000001>;\n    using chh = FieldModel<address,\
    \ 1, 0x00000001>;\n    using stall = FieldModel<address, 3, 0x00000001>;\n   \
    \ using nak = FieldModel<address, 4, 0x00000001>;\n    using ack = FieldModel<address,\
    \ 5, 0x00000001>;\n    using txerr = FieldModel<address, 7, 0x00000001>;\n   \
    \ using bberr = FieldModel<address, 8, 0x00000001>;\n    using frmor = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dterr = FieldModel<address, 10, 0x00000001>;\n  };\n\
    \npublic:\n  using fs_hcint3 = Fs_hcint3Reg<BaseAddress + 0x0168>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_hcint4Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 0x00000001>;\n    using\
    \ chh = FieldModel<address, 1, 0x00000001>;\n    using stall = FieldModel<address,\
    \ 3, 0x00000001>;\n    using nak = FieldModel<address, 4, 0x00000001>;\n    using\
    \ ack = FieldModel<address, 5, 0x00000001>;\n    using txerr = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberr = FieldModel<address, 8, 0x00000001>;\n   \
    \ using frmor = FieldModel<address, 9, 0x00000001>;\n    using dterr = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcint4 = Fs_hcint4Reg<BaseAddress\
    \ + 0x0188>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcint5Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrc = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chh = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stall = FieldModel<address, 3, 0x00000001>;\n    using nak = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ack = FieldModel<address, 5, 0x00000001>;\n    using\
    \ txerr = FieldModel<address, 7, 0x00000001>;\n    using bberr = FieldModel<address,\
    \ 8, 0x00000001>;\n    using frmor = FieldModel<address, 9, 0x00000001>;\n   \
    \ using dterr = FieldModel<address, 10, 0x00000001>;\n  };\n\npublic:\n  using\
    \ fs_hcint5 = Fs_hcint5Reg<BaseAddress + 0x01A8>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hcint6Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrc = FieldModel<address, 0, 0x00000001>;\n    using chh = FieldModel<address,\
    \ 1, 0x00000001>;\n    using stall = FieldModel<address, 3, 0x00000001>;\n   \
    \ using nak = FieldModel<address, 4, 0x00000001>;\n    using ack = FieldModel<address,\
    \ 5, 0x00000001>;\n    using txerr = FieldModel<address, 7, 0x00000001>;\n   \
    \ using bberr = FieldModel<address, 8, 0x00000001>;\n    using frmor = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dterr = FieldModel<address, 10, 0x00000001>;\n  };\n\
    \npublic:\n  using fs_hcint6 = Fs_hcint6Reg<BaseAddress + 0x01C8>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_hcint7Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrc = FieldModel<address, 0, 0x00000001>;\n    using\
    \ chh = FieldModel<address, 1, 0x00000001>;\n    using stall = FieldModel<address,\
    \ 3, 0x00000001>;\n    using nak = FieldModel<address, 4, 0x00000001>;\n    using\
    \ ack = FieldModel<address, 5, 0x00000001>;\n    using txerr = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberr = FieldModel<address, 8, 0x00000001>;\n   \
    \ using frmor = FieldModel<address, 9, 0x00000001>;\n    using dterr = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcint7 = Fs_hcint7Reg<BaseAddress\
    \ + 0x01E8>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk0Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk0 = Fs_hcintmsk0Reg<BaseAddress\
    \ + 0x010C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk1Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk1 = Fs_hcintmsk1Reg<BaseAddress\
    \ + 0x012C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk2Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk2 = Fs_hcintmsk2Reg<BaseAddress\
    \ + 0x014C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk3Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk3 = Fs_hcintmsk3Reg<BaseAddress\
    \ + 0x016C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk4Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk4 = Fs_hcintmsk4Reg<BaseAddress\
    \ + 0x018C>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk5Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk5 = Fs_hcintmsk5Reg<BaseAddress\
    \ + 0x01AC>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk6Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk6 = Fs_hcintmsk6Reg<BaseAddress\
    \ + 0x01CC>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hcintmsk7Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrcm = FieldModel<address,\
    \ 0, 0x00000001>;\n    using chhm = FieldModel<address, 1, 0x00000001>;\n    using\
    \ stallm = FieldModel<address, 3, 0x00000001>;\n    using nakm = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ackm = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nyet = FieldModel<address, 6, 0x00000001>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bberrm = FieldModel<address, 8, 0x00000001>;\n  \
    \  using frmorm = FieldModel<address, 9, 0x00000001>;\n    using dterrm = FieldModel<address,\
    \ 10, 0x00000001>;\n  };\n\npublic:\n  using fs_hcintmsk7 = Fs_hcintmsk7Reg<BaseAddress\
    \ + 0x01EC>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hctsiz0Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 0x0007FFFF>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF>;\n \
    \   using dpid = FieldModel<address, 29, 0x00000003>;\n  };\n\npublic:\n  using\
    \ fs_hctsiz0 = Fs_hctsiz0Reg<BaseAddress + 0x0110>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hctsiz1Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n    using pktcnt = FieldModel<address,\
    \ 19, 0x000003FF>;\n    using dpid = FieldModel<address, 29, 0x00000003>;\n  };\n\
    \npublic:\n  using fs_hctsiz1 = Fs_hctsiz1Reg<BaseAddress + 0x0130>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_hctsiz2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n    using\
    \ pktcnt = FieldModel<address, 19, 0x000003FF>;\n    using dpid = FieldModel<address,\
    \ 29, 0x00000003>;\n  };\n\npublic:\n  using fs_hctsiz2 = Fs_hctsiz2Reg<BaseAddress\
    \ + 0x0150>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hctsiz3Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 0x0007FFFF>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF>;\n \
    \   using dpid = FieldModel<address, 29, 0x00000003>;\n  };\n\npublic:\n  using\
    \ fs_hctsiz3 = Fs_hctsiz3Reg<BaseAddress + 0x0170>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hctsiz4Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n    using pktcnt = FieldModel<address,\
    \ 19, 0x000003FF>;\n    using dpid = FieldModel<address, 29, 0x00000003>;\n  };\n\
    \npublic:\n  using fs_hctsiz4 = Fs_hctsiz4Reg<BaseAddress + 0x0190>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_hctsiz5Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n    using\
    \ pktcnt = FieldModel<address, 19, 0x000003FF>;\n    using dpid = FieldModel<address,\
    \ 29, 0x00000003>;\n  };\n\npublic:\n  using fs_hctsiz5 = Fs_hctsiz5Reg<BaseAddress\
    \ + 0x01B0>;\n\nprivate:\n  template <uint32_t address>\n  class Fs_hctsiz6Reg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using xfrsiz = FieldModel<address,\
    \ 0, 0x0007FFFF>;\n    using pktcnt = FieldModel<address, 19, 0x000003FF>;\n \
    \   using dpid = FieldModel<address, 29, 0x00000003>;\n  };\n\npublic:\n  using\
    \ fs_hctsiz6 = Fs_hctsiz6Reg<BaseAddress + 0x01D0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Fs_hctsiz7Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using xfrsiz = FieldModel<address, 0, 0x0007FFFF>;\n    using pktcnt = FieldModel<address,\
    \ 19, 0x000003FF>;\n    using dpid = FieldModel<address, 29, 0x00000003>;\n  };\n\
    \npublic:\n  using fs_hctsiz7 = Fs_hctsiz7Reg<BaseAddress + 0x01F0>;\nprivate:\n\
    \  template <uint32_t address, uint32_t bankOffset>\n  class Fs_hccharxBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using mpsiz\
    \ = FieldModel<address, 0, 0x000007FF, bankOffset>;\n    using epnum = FieldModel<address,\
    \ 11, 0x0000000F, bankOffset>;\n    using epdir = FieldModel<address, 15, 0x00000001,\
    \ bankOffset>;\n    using lsdev = FieldModel<address, 17, 0x00000001, bankOffset>;\n\
    \    using eptyp = FieldModel<address, 18, 0x00000003, bankOffset>;\n    using\
    \ mcnt = FieldModel<address, 20, 0x00000003, bankOffset>;\n    using dad = FieldModel<address,\
    \ 22, 0x0000007F, bankOffset>;\n    using oddfrm = FieldModel<address, 29, 0x00000001,\
    \ bankOffset>;\n    using chdis = FieldModel<address, 30, 0x00000001, bankOffset>;\n\
    \    using chena = FieldModel<address, 31, 0x00000001, bankOffset>;\n  };\n\n\
    public:\n  using fs_hccharx = Fs_hccharxBankReg<BaseAddress + 0x0100, 0x0020>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class Fs_hcintxBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using xfrc\
    \ = FieldModel<address, 0, 0x00000001, bankOffset>;\n    using chh = FieldModel<address,\
    \ 1, 0x00000001, bankOffset>;\n    using stall = FieldModel<address, 3, 0x00000001,\
    \ bankOffset>;\n    using nak = FieldModel<address, 4, 0x00000001, bankOffset>;\n\
    \    using ack = FieldModel<address, 5, 0x00000001, bankOffset>;\n    using txerr\
    \ = FieldModel<address, 7, 0x00000001, bankOffset>;\n    using bberr = FieldModel<address,\
    \ 8, 0x00000001, bankOffset>;\n    using frmor = FieldModel<address, 9, 0x00000001,\
    \ bankOffset>;\n    using dterr = FieldModel<address, 10, 0x00000001, bankOffset>;\n\
    \  };\n\npublic:\n  using fs_hcintx = Fs_hcintxBankReg<BaseAddress + 0x0108, 0x0020>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class Fs_hcintmskxBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using xfrcm\
    \ = FieldModel<address, 0, 0x00000001, bankOffset>;\n    using chhm = FieldModel<address,\
    \ 1, 0x00000001, bankOffset>;\n    using stallm = FieldModel<address, 3, 0x00000001,\
    \ bankOffset>;\n    using nakm = FieldModel<address, 4, 0x00000001, bankOffset>;\n\
    \    using ackm = FieldModel<address, 5, 0x00000001, bankOffset>;\n    using nyet\
    \ = FieldModel<address, 6, 0x00000001, bankOffset>;\n    using txerrm = FieldModel<address,\
    \ 7, 0x00000001, bankOffset>;\n    using bberrm = FieldModel<address, 8, 0x00000001,\
    \ bankOffset>;\n    using frmorm = FieldModel<address, 9, 0x00000001, bankOffset>;\n\
    \    using dterrm = FieldModel<address, 10, 0x00000001, bankOffset>;\n  };\n\n\
    public:\n  using fs_hcintmskx = Fs_hcintmskxBankReg<BaseAddress + 0x010C, 0x0020>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class Fs_hctsizxBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using xfrsiz\
    \ = FieldModel<address, 0, 0x0007FFFF, bankOffset>;\n    using pktcnt = FieldModel<address,\
    \ 19, 0x000003FF, bankOffset>;\n    using dpid = FieldModel<address, 29, 0x00000003,\
    \ bankOffset>;\n  };\n\npublic:\n  using fs_hctsizx = Fs_hctsizxBankReg<BaseAddress\
    \ + 0x0110, 0x0020>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_HOST_H */\n"
  name: OTG_FS_HOST
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_OTG_FS_PWRCLK_H\n#define DRAL_STM32F411_OTG_FS_PWRCLK_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass otg_fs_pwrclk\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x50000E00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Fs_pcgcctlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using stppclk = FieldModel<address, 0, 0x00000001>;\n   \
    \ using gatehclk = FieldModel<address, 1, 0x00000001>;\n    using physusp = FieldModel<address,\
    \ 4, 0x00000001>;\n  };\n\npublic:\n  using fs_pcgcctl = Fs_pcgcctlReg<BaseAddress\
    \ + 0x0000>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_OTG_FS_PWRCLK_H */\n"
  name: OTG_FS_PWRCLK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_PWR_H\n#define DRAL_STM32F411_PWR_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass pwr\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40007000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using vos = FieldModel<address, 14, 0x00000003>;\n    using\
    \ adcdc1 = FieldModel<address, 13, 0x00000001>;\n    using fpds = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dbp = FieldModel<address, 8, 0x00000001>;\n    using\
    \ pls = FieldModel<address, 5, 0x00000007>;\n    using pvde = FieldModel<address,\
    \ 4, 0x00000001>;\n    using csbf = FieldModel<address, 3, 0x00000001>;\n    using\
    \ cwuf = FieldModel<address, 2, 0x00000001>;\n    using pdds = FieldModel<address,\
    \ 1, 0x00000001>;\n    using lpds = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using cr = CrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CsrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using wuf = FieldModel<address, 0, 0x00000001>;\n    using sbf = FieldModel<address,\
    \ 1, 0x00000001>;\n    using pvdo = FieldModel<address, 2, 0x00000001>;\n    using\
    \ brr = FieldModel<address, 3, 0x00000001>;\n    using ewup = FieldModel<address,\
    \ 8, 0x00000001>;\n    using bre = FieldModel<address, 9, 0x00000001>;\n    using\
    \ vosrdy = FieldModel<address, 14, 0x00000001>;\n  };\n\npublic:\n  using csr\
    \ = CsrReg<BaseAddress + 0x0004>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_PWR_H\
    \ */\n"
  name: PWR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_RCC_H\n#define DRAL_STM32F411_RCC_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass rcc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40023800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using plli2srdy = FieldModel<address, 27, 0x00000001>;\n\
    \    using plli2son = FieldModel<address, 26, 0x00000001>;\n    using pllrdy =\
    \ FieldModel<address, 25, 0x00000001>;\n    using pllon = FieldModel<address,\
    \ 24, 0x00000001>;\n    using csson = FieldModel<address, 19, 0x00000001>;\n \
    \   using hsebyp = FieldModel<address, 18, 0x00000001>;\n    using hserdy = FieldModel<address,\
    \ 17, 0x00000001>;\n    using hseon = FieldModel<address, 16, 0x00000001>;\n \
    \   using hsical = FieldModel<address, 8, 0x000000FF>;\n    using hsitrim = FieldModel<address,\
    \ 3, 0x0000001F>;\n    using hsirdy = FieldModel<address, 1, 0x00000001>;\n  \
    \  using hsion = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ cr = CrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class PllcfgrReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ pllq3 = FieldModel<address, 27, 0x00000001>;\n    using pllq2 = FieldModel<address,\
    \ 26, 0x00000001>;\n    using pllq1 = FieldModel<address, 25, 0x00000001>;\n \
    \   using pllq0 = FieldModel<address, 24, 0x00000001>;\n    using pllsrc = FieldModel<address,\
    \ 22, 0x00000001>;\n    using pllp1 = FieldModel<address, 17, 0x00000001>;\n \
    \   using pllp0 = FieldModel<address, 16, 0x00000001>;\n    using plln8 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using plln7 = FieldModel<address, 13, 0x00000001>;\n \
    \   using plln6 = FieldModel<address, 12, 0x00000001>;\n    using plln5 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using plln4 = FieldModel<address, 10, 0x00000001>;\n \
    \   using plln3 = FieldModel<address, 9, 0x00000001>;\n    using plln2 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using plln1 = FieldModel<address, 7, 0x00000001>;\n   \
    \ using plln0 = FieldModel<address, 6, 0x00000001>;\n    using pllm5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using pllm4 = FieldModel<address, 4, 0x00000001>;\n   \
    \ using pllm3 = FieldModel<address, 3, 0x00000001>;\n    using pllm2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using pllm1 = FieldModel<address, 1, 0x00000001>;\n   \
    \ using pllm0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ pllcfgr = PllcfgrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CfgrReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using mco2 = FieldModel<address, 30, 0x00000003>;\n    using mco2pre = FieldModel<address,\
    \ 27, 0x00000007>;\n    using mco1pre = FieldModel<address, 24, 0x00000007>;\n\
    \    using i2ssrc = FieldModel<address, 23, 0x00000001>;\n    using mco1 = FieldModel<address,\
    \ 21, 0x00000003>;\n    using rtcpre = FieldModel<address, 16, 0x0000001F>;\n\
    \    using ppre2 = FieldModel<address, 13, 0x00000007>;\n    using ppre1 = FieldModel<address,\
    \ 10, 0x00000007>;\n    using hpre = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using sws1 = FieldModel<address, 3, 0x00000001>;\n    using sws0 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using sw1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ sw0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cfgr = CfgrReg<BaseAddress\
    \ + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n  class CirReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cssc = FieldModel<address,\
    \ 23, 0x00000001>;\n    using plli2srdyc = FieldModel<address, 21, 0x00000001>;\n\
    \    using pllrdyc = FieldModel<address, 20, 0x00000001>;\n    using hserdyc =\
    \ FieldModel<address, 19, 0x00000001>;\n    using hsirdyc = FieldModel<address,\
    \ 18, 0x00000001>;\n    using lserdyc = FieldModel<address, 17, 0x00000001>;\n\
    \    using lsirdyc = FieldModel<address, 16, 0x00000001>;\n    using plli2srdyie\
    \ = FieldModel<address, 13, 0x00000001>;\n    using pllrdyie = FieldModel<address,\
    \ 12, 0x00000001>;\n    using hserdyie = FieldModel<address, 11, 0x00000001>;\n\
    \    using hsirdyie = FieldModel<address, 10, 0x00000001>;\n    using lserdyie\
    \ = FieldModel<address, 9, 0x00000001>;\n    using lsirdyie = FieldModel<address,\
    \ 8, 0x00000001>;\n    using cssf = FieldModel<address, 7, 0x00000001>;\n    using\
    \ plli2srdyf = FieldModel<address, 5, 0x00000001>;\n    using pllrdyf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using hserdyf = FieldModel<address, 3, 0x00000001>;\n \
    \   using hsirdyf = FieldModel<address, 2, 0x00000001>;\n    using lserdyf = FieldModel<address,\
    \ 1, 0x00000001>;\n    using lsirdyf = FieldModel<address, 0, 0x00000001>;\n \
    \ };\n\npublic:\n  using cir = CirReg<BaseAddress + 0x000C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Ahb1rstrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using dma2rst = FieldModel<address, 22, 0x00000001>;\n    using\
    \ dma1rst = FieldModel<address, 21, 0x00000001>;\n    using crcrst = FieldModel<address,\
    \ 12, 0x00000001>;\n    using gpiohrst = FieldModel<address, 7, 0x00000001>;\n\
    \    using gpioerst = FieldModel<address, 4, 0x00000001>;\n    using gpiodrst\
    \ = FieldModel<address, 3, 0x00000001>;\n    using gpiocrst = FieldModel<address,\
    \ 2, 0x00000001>;\n    using gpiobrst = FieldModel<address, 1, 0x00000001>;\n\
    \    using gpioarst = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n \
    \ using ahb1rstr = Ahb1rstrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Ahb2rstrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using otgfsrst = FieldModel<address, 7, 0x00000001>;\n  };\n\n\
    public:\n  using ahb2rstr = Ahb2rstrReg<BaseAddress + 0x0014>;\n\nprivate:\n \
    \ template <uint32_t address>\n  class Apb1rstrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pwrrst = FieldModel<address, 28, 0x00000001>;\n   \
    \ using i2c3rst = FieldModel<address, 23, 0x00000001>;\n    using i2c2rst = FieldModel<address,\
    \ 22, 0x00000001>;\n    using i2c1rst = FieldModel<address, 21, 0x00000001>;\n\
    \    using uart2rst = FieldModel<address, 17, 0x00000001>;\n    using spi3rst\
    \ = FieldModel<address, 15, 0x00000001>;\n    using spi2rst = FieldModel<address,\
    \ 14, 0x00000001>;\n    using wwdgrst = FieldModel<address, 11, 0x00000001>;\n\
    \    using tim5rst = FieldModel<address, 3, 0x00000001>;\n    using tim4rst =\
    \ FieldModel<address, 2, 0x00000001>;\n    using tim3rst = FieldModel<address,\
    \ 1, 0x00000001>;\n    using tim2rst = FieldModel<address, 0, 0x00000001>;\n \
    \ };\n\npublic:\n  using apb1rstr = Apb1rstrReg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Apb2rstrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tim11rst = FieldModel<address, 18, 0x00000001>;\n \
    \   using tim10rst = FieldModel<address, 17, 0x00000001>;\n    using tim9rst =\
    \ FieldModel<address, 16, 0x00000001>;\n    using syscfgrst = FieldModel<address,\
    \ 14, 0x00000001>;\n    using spi1rst = FieldModel<address, 12, 0x00000001>;\n\
    \    using sdiorst = FieldModel<address, 11, 0x00000001>;\n    using adcrst =\
    \ FieldModel<address, 8, 0x00000001>;\n    using usart6rst = FieldModel<address,\
    \ 5, 0x00000001>;\n    using usart1rst = FieldModel<address, 4, 0x00000001>;\n\
    \    using tim1rst = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ apb2rstr = Apb2rstrReg<BaseAddress + 0x0024>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ahb1enrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using dma2en = FieldModel<address, 22, 0x00000001>;\n    using dma1en = FieldModel<address,\
    \ 21, 0x00000001>;\n    using crcen = FieldModel<address, 12, 0x00000001>;\n \
    \   using gpiohen = FieldModel<address, 7, 0x00000001>;\n    using gpioeen = FieldModel<address,\
    \ 4, 0x00000001>;\n    using gpioden = FieldModel<address, 3, 0x00000001>;\n \
    \   using gpiocen = FieldModel<address, 2, 0x00000001>;\n    using gpioben = FieldModel<address,\
    \ 1, 0x00000001>;\n    using gpioaen = FieldModel<address, 0, 0x00000001>;\n \
    \ };\n\npublic:\n  using ahb1enr = Ahb1enrReg<BaseAddress + 0x0030>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ahb2enrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using otgfsen = FieldModel<address, 7, 0x00000001>;\n  };\n\
    \npublic:\n  using ahb2enr = Ahb2enrReg<BaseAddress + 0x0034>;\n\nprivate:\n \
    \ template <uint32_t address>\n  class Apb1enrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pwren = FieldModel<address, 28, 0x00000001>;\n    using\
    \ i2c3en = FieldModel<address, 23, 0x00000001>;\n    using i2c2en = FieldModel<address,\
    \ 22, 0x00000001>;\n    using i2c1en = FieldModel<address, 21, 0x00000001>;\n\
    \    using usart2en = FieldModel<address, 17, 0x00000001>;\n    using spi3en =\
    \ FieldModel<address, 15, 0x00000001>;\n    using spi2en = FieldModel<address,\
    \ 14, 0x00000001>;\n    using wwdgen = FieldModel<address, 11, 0x00000001>;\n\
    \    using tim5en = FieldModel<address, 3, 0x00000001>;\n    using tim4en = FieldModel<address,\
    \ 2, 0x00000001>;\n    using tim3en = FieldModel<address, 1, 0x00000001>;\n  \
    \  using tim2en = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ apb1enr = Apb1enrReg<BaseAddress + 0x0040>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Apb2enrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using tim1en = FieldModel<address, 0, 0x00000001>;\n    using usart1en =\
    \ FieldModel<address, 4, 0x00000001>;\n    using usart6en = FieldModel<address,\
    \ 5, 0x00000001>;\n    using adc1en = FieldModel<address, 8, 0x00000001>;\n  \
    \  using sdioen = FieldModel<address, 11, 0x00000001>;\n    using spi1en = FieldModel<address,\
    \ 12, 0x00000001>;\n    using spi4en = FieldModel<address, 13, 0x00000001>;\n\
    \    using syscfgen = FieldModel<address, 14, 0x00000001>;\n    using tim9en =\
    \ FieldModel<address, 16, 0x00000001>;\n    using tim10en = FieldModel<address,\
    \ 17, 0x00000001>;\n    using tim11en = FieldModel<address, 18, 0x00000001>;\n\
    \  };\n\npublic:\n  using apb2enr = Apb2enrReg<BaseAddress + 0x0044>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ahb1lpenrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dma2lpen = FieldModel<address, 22, 0x00000001>;\n \
    \   using dma1lpen = FieldModel<address, 21, 0x00000001>;\n    using sram1lpen\
    \ = FieldModel<address, 16, 0x00000001>;\n    using flitflpen = FieldModel<address,\
    \ 15, 0x00000001>;\n    using crclpen = FieldModel<address, 12, 0x00000001>;\n\
    \    using gpiohlpen = FieldModel<address, 7, 0x00000001>;\n    using gpioelpen\
    \ = FieldModel<address, 4, 0x00000001>;\n    using gpiodlpen = FieldModel<address,\
    \ 3, 0x00000001>;\n    using gpioclpen = FieldModel<address, 2, 0x00000001>;\n\
    \    using gpioblpen = FieldModel<address, 1, 0x00000001>;\n    using gpioalpen\
    \ = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ahb1lpenr =\
    \ Ahb1lpenrReg<BaseAddress + 0x0050>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ahb2lpenrReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ otgfslpen = FieldModel<address, 7, 0x00000001>;\n  };\n\npublic:\n  using ahb2lpenr\
    \ = Ahb2lpenrReg<BaseAddress + 0x0054>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Apb1lpenrReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ pwrlpen = FieldModel<address, 28, 0x00000001>;\n    using i2c3lpen = FieldModel<address,\
    \ 23, 0x00000001>;\n    using i2c2lpen = FieldModel<address, 22, 0x00000001>;\n\
    \    using i2c1lpen = FieldModel<address, 21, 0x00000001>;\n    using usart2lpen\
    \ = FieldModel<address, 17, 0x00000001>;\n    using spi3lpen = FieldModel<address,\
    \ 15, 0x00000001>;\n    using spi2lpen = FieldModel<address, 14, 0x00000001>;\n\
    \    using wwdglpen = FieldModel<address, 11, 0x00000001>;\n    using tim5lpen\
    \ = FieldModel<address, 3, 0x00000001>;\n    using tim4lpen = FieldModel<address,\
    \ 2, 0x00000001>;\n    using tim3lpen = FieldModel<address, 1, 0x00000001>;\n\
    \    using tim2lpen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n \
    \ using apb1lpenr = Apb1lpenrReg<BaseAddress + 0x0060>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Apb2lpenrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using tim1lpen = FieldModel<address, 0, 0x00000001>;\n    using\
    \ usart1lpen = FieldModel<address, 4, 0x00000001>;\n    using usart6lpen = FieldModel<address,\
    \ 5, 0x00000001>;\n    using adc1lpen = FieldModel<address, 8, 0x00000001>;\n\
    \    using sdiolpen = FieldModel<address, 11, 0x00000001>;\n    using spi1lpen\
    \ = FieldModel<address, 12, 0x00000001>;\n    using spi4lpen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using syscfglpen = FieldModel<address, 14, 0x00000001>;\n\
    \    using tim9lpen = FieldModel<address, 16, 0x00000001>;\n    using tim10lpen\
    \ = FieldModel<address, 17, 0x00000001>;\n    using tim11lpen = FieldModel<address,\
    \ 18, 0x00000001>;\n  };\n\npublic:\n  using apb2lpenr = Apb2lpenrReg<BaseAddress\
    \ + 0x0064>;\n\nprivate:\n  template <uint32_t address>\n  class BdcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using bdrst = FieldModel<address,\
    \ 16, 0x00000001>;\n    using rtcen = FieldModel<address, 15, 0x00000001>;\n \
    \   using rtcsel1 = FieldModel<address, 9, 0x00000001>;\n    using rtcsel0 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using lsebyp = FieldModel<address, 2, 0x00000001>;\n  \
    \  using lserdy = FieldModel<address, 1, 0x00000001>;\n    using lseon = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using bdcr = BdcrReg<BaseAddress + 0x0070>;\n\
    \nprivate:\n  template <uint32_t address>\n  class CsrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using lpwrrstf = FieldModel<address, 31, 0x00000001>;\n \
    \   using wwdgrstf = FieldModel<address, 30, 0x00000001>;\n    using wdgrstf =\
    \ FieldModel<address, 29, 0x00000001>;\n    using sftrstf = FieldModel<address,\
    \ 28, 0x00000001>;\n    using porrstf = FieldModel<address, 27, 0x00000001>;\n\
    \    using padrstf = FieldModel<address, 26, 0x00000001>;\n    using borrstf =\
    \ FieldModel<address, 25, 0x00000001>;\n    using rmvf = FieldModel<address, 24,\
    \ 0x00000001>;\n    using lsirdy = FieldModel<address, 1, 0x00000001>;\n    using\
    \ lsion = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using csr =\
    \ CsrReg<BaseAddress + 0x0074>;\n\nprivate:\n  template <uint32_t address>\n \
    \ class SscgrReg: public RegisterModel<address>\n  {\n  public:\n    using sscgen\
    \ = FieldModel<address, 31, 0x00000001>;\n    using spreadsel = FieldModel<address,\
    \ 30, 0x00000001>;\n    using incstep = FieldModel<address, 13, 0x00007FFF>;\n\
    \    using modper = FieldModel<address, 0, 0x00001FFF>;\n  };\n\npublic:\n  using\
    \ sscgr = SscgrReg<BaseAddress + 0x0080>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Plli2scfgrReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ plli2srx = FieldModel<address, 28, 0x00000007>;\n    using plli2snx = FieldModel<address,\
    \ 6, 0x000001FF>;\n  };\n\npublic:\n  using plli2scfgr = Plli2scfgrReg<BaseAddress\
    \ + 0x0084>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_RCC_H */\n"
  name: RCC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_RTC_H\n#define DRAL_STM32F411_RTC_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass rtc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40002800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class TrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pm = FieldModel<address, 22, 0x00000001>;\n    using\
    \ ht = FieldModel<address, 20, 0x00000003>;\n    using hu = FieldModel<address,\
    \ 16, 0x0000000F>;\n    using mnt = FieldModel<address, 12, 0x00000007>;\n   \
    \ using mnu = FieldModel<address, 8, 0x0000000F>;\n    using st = FieldModel<address,\
    \ 4, 0x00000007>;\n    using su = FieldModel<address, 0, 0x0000000F>;\n  };\n\n\
    public:\n  using tr = TrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class DrReg: public RegisterModel<address>\n  {\n  public:\n   \
    \ using yt = FieldModel<address, 20, 0x0000000F>;\n    using yu = FieldModel<address,\
    \ 16, 0x0000000F>;\n    using wdu = FieldModel<address, 13, 0x00000007>;\n   \
    \ using mt = FieldModel<address, 12, 0x00000001>;\n    using mu = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using dt = FieldModel<address, 4, 0x00000003>;\n    using\
    \ du = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using dr = DrReg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class CrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using coe = FieldModel<address,\
    \ 23, 0x00000001>;\n    using osel = FieldModel<address, 21, 0x00000003>;\n  \
    \  using pol = FieldModel<address, 20, 0x00000001>;\n    using cosel = FieldModel<address,\
    \ 19, 0x00000001>;\n    using bkp = FieldModel<address, 18, 0x00000001>;\n   \
    \ using sub1h = FieldModel<address, 17, 0x00000001>;\n    using add1h = FieldModel<address,\
    \ 16, 0x00000001>;\n    using tsie = FieldModel<address, 15, 0x00000001>;\n  \
    \  using wutie = FieldModel<address, 14, 0x00000001>;\n    using alrbie = FieldModel<address,\
    \ 13, 0x00000001>;\n    using alraie = FieldModel<address, 12, 0x00000001>;\n\
    \    using tse = FieldModel<address, 11, 0x00000001>;\n    using wute = FieldModel<address,\
    \ 10, 0x00000001>;\n    using alrbe = FieldModel<address, 9, 0x00000001>;\n  \
    \  using alrae = FieldModel<address, 8, 0x00000001>;\n    using dce = FieldModel<address,\
    \ 7, 0x00000001>;\n    using fmt = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bypshad = FieldModel<address, 5, 0x00000001>;\n    using refckon = FieldModel<address,\
    \ 4, 0x00000001>;\n    using tsedge = FieldModel<address, 3, 0x00000001>;\n  \
    \  using wcksel = FieldModel<address, 0, 0x00000007>;\n  };\n\npublic:\n  using\
    \ cr = CrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class IsrReg: public RegisterModel<address>\n  {\n  public:\n    using alrawf\
    \ = FieldModel<address, 0, 0x00000001>;\n    using alrbwf = FieldModel<address,\
    \ 1, 0x00000001>;\n    using wutwf = FieldModel<address, 2, 0x00000001>;\n   \
    \ using shpf = FieldModel<address, 3, 0x00000001>;\n    using inits = FieldModel<address,\
    \ 4, 0x00000001>;\n    using rsf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ initf = FieldModel<address, 6, 0x00000001>;\n    using init = FieldModel<address,\
    \ 7, 0x00000001>;\n    using alraf = FieldModel<address, 8, 0x00000001>;\n   \
    \ using alrbf = FieldModel<address, 9, 0x00000001>;\n    using wutf = FieldModel<address,\
    \ 10, 0x00000001>;\n    using tsf = FieldModel<address, 11, 0x00000001>;\n   \
    \ using tsovf = FieldModel<address, 12, 0x00000001>;\n    using tamp1f = FieldModel<address,\
    \ 13, 0x00000001>;\n    using tamp2f = FieldModel<address, 14, 0x00000001>;\n\
    \    using recalpf = FieldModel<address, 16, 0x00000001>;\n  };\n\npublic:\n \
    \ using isr = IsrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class PrerReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using prediv_a = FieldModel<address, 16, 0x0000007F>;\n    using prediv_s\
    \ = FieldModel<address, 0, 0x00007FFF>;\n  };\n\npublic:\n  using prer = PrerReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n  class WutrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using wut = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using wutr = WutrReg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class CalibrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dcs = FieldModel<address, 7, 0x00000001>;\n    using\
    \ dc = FieldModel<address, 0, 0x0000001F>;\n  };\n\npublic:\n  using calibr =\
    \ CalibrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AlrmarReg: public RegisterModel<address>\n  {\n  public:\n    using msk4\
    \ = FieldModel<address, 31, 0x00000001>;\n    using wdsel = FieldModel<address,\
    \ 30, 0x00000001>;\n    using dt = FieldModel<address, 28, 0x00000003>;\n    using\
    \ du = FieldModel<address, 24, 0x0000000F>;\n    using msk3 = FieldModel<address,\
    \ 23, 0x00000001>;\n    using pm = FieldModel<address, 22, 0x00000001>;\n    using\
    \ ht = FieldModel<address, 20, 0x00000003>;\n    using hu = FieldModel<address,\
    \ 16, 0x0000000F>;\n    using msk2 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using mnt = FieldModel<address, 12, 0x00000007>;\n    using mnu = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msk1 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ st = FieldModel<address, 4, 0x00000007>;\n    using su = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using alrmar = AlrmarReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AlrmbrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using msk4 = FieldModel<address, 31, 0x00000001>;\n    using\
    \ wdsel = FieldModel<address, 30, 0x00000001>;\n    using dt = FieldModel<address,\
    \ 28, 0x00000003>;\n    using du = FieldModel<address, 24, 0x0000000F>;\n    using\
    \ msk3 = FieldModel<address, 23, 0x00000001>;\n    using pm = FieldModel<address,\
    \ 22, 0x00000001>;\n    using ht = FieldModel<address, 20, 0x00000003>;\n    using\
    \ hu = FieldModel<address, 16, 0x0000000F>;\n    using msk2 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using mnt = FieldModel<address, 12, 0x00000007>;\n   \
    \ using mnu = FieldModel<address, 8, 0x0000000F>;\n    using msk1 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using st = FieldModel<address, 4, 0x00000007>;\n    using\
    \ su = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using alrmbr =\
    \ AlrmbrReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class WprReg: public RegisterModel<address>\n  {\n  public:\n    using key\
    \ = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using wpr = WprReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n  class SsrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ss = FieldModel<address, 0,\
    \ 0x0000FFFF>;\n  };\n\npublic:\n  using ssr = SsrReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ShiftrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using add1s = FieldModel<address, 31, 0x00000001>;\n    using\
    \ subfs = FieldModel<address, 0, 0x00007FFF>;\n  };\n\npublic:\n  using shiftr\
    \ = ShiftrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class TstrReg: public RegisterModel<address>\n  {\n  public:\n    using pm\
    \ = FieldModel<address, 22, 0x00000001>;\n    using ht = FieldModel<address, 20,\
    \ 0x00000003>;\n    using hu = FieldModel<address, 16, 0x0000000F>;\n    using\
    \ mnt = FieldModel<address, 12, 0x00000007>;\n    using mnu = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using st = FieldModel<address, 4, 0x00000007>;\n    using\
    \ su = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using tstr = TstrReg<BaseAddress\
    \ + 0x0030>;\n\nprivate:\n  template <uint32_t address>\n  class TsdrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using wdu = FieldModel<address,\
    \ 13, 0x00000007>;\n    using mt = FieldModel<address, 12, 0x00000001>;\n    using\
    \ mu = FieldModel<address, 8, 0x0000000F>;\n    using dt = FieldModel<address,\
    \ 4, 0x00000003>;\n    using du = FieldModel<address, 0, 0x0000000F>;\n  };\n\n\
    public:\n  using tsdr = TsdrReg<BaseAddress + 0x0034>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class TsssrReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using ss = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n\
    \  using tsssr = TsssrReg<BaseAddress + 0x0038>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CalrReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using calp = FieldModel<address, 15, 0x00000001>;\n    using calw8 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using calw16 = FieldModel<address, 13, 0x00000001>;\n\
    \    using calm = FieldModel<address, 0, 0x000001FF>;\n  };\n\npublic:\n  using\
    \ calr = CalrReg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class TafcrReg: public RegisterModel<address>\n  {\n  public:\n    using alarmouttype\
    \ = FieldModel<address, 18, 0x00000001>;\n    using tsinsel = FieldModel<address,\
    \ 17, 0x00000001>;\n    using tamp1insel = FieldModel<address, 16, 0x00000001>;\n\
    \    using tamppudis = FieldModel<address, 15, 0x00000001>;\n    using tampprch\
    \ = FieldModel<address, 13, 0x00000003>;\n    using tampflt = FieldModel<address,\
    \ 11, 0x00000003>;\n    using tampfreq = FieldModel<address, 8, 0x00000007>;\n\
    \    using tampts = FieldModel<address, 7, 0x00000001>;\n    using tamp2trg =\
    \ FieldModel<address, 4, 0x00000001>;\n    using tamp2e = FieldModel<address,\
    \ 3, 0x00000001>;\n    using tampie = FieldModel<address, 2, 0x00000001>;\n  \
    \  using tamp1trg = FieldModel<address, 1, 0x00000001>;\n    using tamp1e = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using tafcr = TafcrReg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AlrmassrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using maskss = FieldModel<address, 24, 0x0000000F>;\n   \
    \ using ss = FieldModel<address, 0, 0x00007FFF>;\n  };\n\npublic:\n  using alrmassr\
    \ = AlrmassrReg<BaseAddress + 0x0044>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AlrmbssrReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ maskss = FieldModel<address, 24, 0x0000000F>;\n    using ss = FieldModel<address,\
    \ 0, 0x00007FFF>;\n  };\n\npublic:\n  using alrmbssr = AlrmbssrReg<BaseAddress\
    \ + 0x0048>;\n\nprivate:\n  template <uint32_t address>\n  class Bkp0rReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using bkp = FieldModel<address,\
    \ 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using bkp0r = Bkp0rReg<BaseAddress + 0x0050>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Bkp1rReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using bkp1r = Bkp1rReg<BaseAddress + 0x0054>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Bkp2rReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using bkp2r = Bkp2rReg<BaseAddress + 0x0058>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp3rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp3r = Bkp3rReg<BaseAddress + 0x005C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Bkp4rReg: public RegisterModel<address>\n  {\n  public:\n    using bkp\
    \ = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using bkp4r = Bkp4rReg<BaseAddress\
    \ + 0x0060>;\n\nprivate:\n  template <uint32_t address>\n  class Bkp5rReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using bkp = FieldModel<address,\
    \ 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using bkp5r = Bkp5rReg<BaseAddress + 0x0064>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Bkp6rReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using bkp6r = Bkp6rReg<BaseAddress + 0x0068>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Bkp7rReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using bkp7r = Bkp7rReg<BaseAddress + 0x006C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp8rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp8r = Bkp8rReg<BaseAddress + 0x0070>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Bkp9rReg: public RegisterModel<address>\n  {\n  public:\n    using bkp\
    \ = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using bkp9r = Bkp9rReg<BaseAddress\
    \ + 0x0074>;\n\nprivate:\n  template <uint32_t address>\n  class Bkp10rReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using bkp = FieldModel<address,\
    \ 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using bkp10r = Bkp10rReg<BaseAddress + 0x0078>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Bkp11rReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using bkp11r = Bkp11rReg<BaseAddress + 0x007C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Bkp12rReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using bkp12r = Bkp12rReg<BaseAddress + 0x0080>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp13rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp13r = Bkp13rReg<BaseAddress + 0x0084>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp14rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp14r = Bkp14rReg<BaseAddress + 0x0088>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp15rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp15r = Bkp15rReg<BaseAddress + 0x008C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp16rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp16r = Bkp16rReg<BaseAddress + 0x0090>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp17rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp17r = Bkp17rReg<BaseAddress + 0x0094>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp18rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp18r = Bkp18rReg<BaseAddress + 0x0098>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Bkp19rReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bkp = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bkp19r = Bkp19rReg<BaseAddress + 0x009C>;\nprivate:\n  template <uint32_t address,\
    \ uint32_t bankOffset>\n  class AlrmxssrBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using maskss = FieldModel<address, 24, 0x0000000F,\
    \ bankOffset>;\n    using ss = FieldModel<address, 0, 0x00007FFF, bankOffset>;\n\
    \  };\n\npublic:\n  using alrmxssr = AlrmxssrBankReg<BaseAddress + 0x0044, 0x0004>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class BkpxrBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using bkp\
    \ = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n  };\n\npublic:\n  using\
    \ bkpxr = BkpxrBankReg<BaseAddress + 0x0050, 0x0004>;\n};\n\n}\n\n#endif /* DRAL_STM32F411_RTC_H\
    \ */\n"
  name: RTC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SDIO_H\n#define DRAL_STM32F411_SDIO_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass sdio\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40012C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PowerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pwrctrl = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using power = PowerReg<BaseAddress + 0x0000>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class ClkcrReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using hwfc_en = FieldModel<address, 14, 0x00000001>;\n    using\
    \ negedge = FieldModel<address, 13, 0x00000001>;\n    using widbus = FieldModel<address,\
    \ 11, 0x00000003>;\n    using bypass = FieldModel<address, 10, 0x00000001>;\n\
    \    using pwrsav = FieldModel<address, 9, 0x00000001>;\n    using clken = FieldModel<address,\
    \ 8, 0x00000001>;\n    using clkdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using clkcr = ClkcrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class ArgReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using cmdarg = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ arg = ArgReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CmdReg: public RegisterModel<address>\n  {\n  public:\n    using ce_atacmd\
    \ = FieldModel<address, 14, 0x00000001>;\n    using nien = FieldModel<address,\
    \ 13, 0x00000001>;\n    using encmdcompl = FieldModel<address, 12, 0x00000001>;\n\
    \    using sdiosuspend = FieldModel<address, 11, 0x00000001>;\n    using cpsmen\
    \ = FieldModel<address, 10, 0x00000001>;\n    using waitpend = FieldModel<address,\
    \ 9, 0x00000001>;\n    using waitint = FieldModel<address, 8, 0x00000001>;\n \
    \   using waitresp = FieldModel<address, 6, 0x00000003>;\n    using cmdindex =\
    \ FieldModel<address, 0, 0x0000003F>;\n  };\n\npublic:\n  using cmd = CmdReg<BaseAddress\
    \ + 0x000C>;\n\nprivate:\n  template <uint32_t address>\n  class RespcmdReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using respcmd = FieldModel<address,\
    \ 0, 0x0000003F>;\n  };\n\npublic:\n  using respcmd = RespcmdReg<BaseAddress +\
    \ 0x0010>;\n\nprivate:\n  template <uint32_t address>\n  class Resp1Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cardstatus1 = FieldModel<address,\
    \ 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using resp1 = Resp1Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Resp2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus2 = FieldModel<address, 0, 0xFFFFFFFF>;\n\
    \  };\n\npublic:\n  using resp2 = Resp2Reg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Resp3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus3 = FieldModel<address, 0, 0xFFFFFFFF>;\n\
    \  };\n\npublic:\n  using resp3 = Resp3Reg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Resp4Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cardstatus4 = FieldModel<address, 0, 0xFFFFFFFF>;\n\
    \  };\n\npublic:\n  using resp4 = Resp4Reg<BaseAddress + 0x0020>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class DtimerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using datatime = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\
    \npublic:\n  using dtimer = DtimerReg<BaseAddress + 0x0024>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class DlenReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using datalength = FieldModel<address, 0, 0x01FFFFFF>;\n  };\n\npublic:\n\
    \  using dlen = DlenReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class DctrlReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using sdioen = FieldModel<address, 11, 0x00000001>;\n    using rwmod = FieldModel<address,\
    \ 10, 0x00000001>;\n    using rwstop = FieldModel<address, 9, 0x00000001>;\n \
    \   using rwstart = FieldModel<address, 8, 0x00000001>;\n    using dblocksize\
    \ = FieldModel<address, 4, 0x0000000F>;\n    using dmaen = FieldModel<address,\
    \ 3, 0x00000001>;\n    using dtmode = FieldModel<address, 2, 0x00000001>;\n  \
    \  using dtdir = FieldModel<address, 1, 0x00000001>;\n    using dten = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dctrl = DctrlReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DcountReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using datacount = FieldModel<address, 0, 0x01FFFFFF>;\n \
    \ };\n\npublic:\n  using dcount = DcountReg<BaseAddress + 0x0030>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class StaReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ceataend = FieldModel<address, 23, 0x00000001>;\n \
    \   using sdioit = FieldModel<address, 22, 0x00000001>;\n    using rxdavl = FieldModel<address,\
    \ 21, 0x00000001>;\n    using txdavl = FieldModel<address, 20, 0x00000001>;\n\
    \    using rxfifoe = FieldModel<address, 19, 0x00000001>;\n    using txfifoe =\
    \ FieldModel<address, 18, 0x00000001>;\n    using rxfifof = FieldModel<address,\
    \ 17, 0x00000001>;\n    using txfifof = FieldModel<address, 16, 0x00000001>;\n\
    \    using rxfifohf = FieldModel<address, 15, 0x00000001>;\n    using txfifohe\
    \ = FieldModel<address, 14, 0x00000001>;\n    using rxact = FieldModel<address,\
    \ 13, 0x00000001>;\n    using txact = FieldModel<address, 12, 0x00000001>;\n \
    \   using cmdact = FieldModel<address, 11, 0x00000001>;\n    using dbckend = FieldModel<address,\
    \ 10, 0x00000001>;\n    using stbiterr = FieldModel<address, 9, 0x00000001>;\n\
    \    using dataend = FieldModel<address, 8, 0x00000001>;\n    using cmdsent =\
    \ FieldModel<address, 7, 0x00000001>;\n    using cmdrend = FieldModel<address,\
    \ 6, 0x00000001>;\n    using rxoverr = FieldModel<address, 5, 0x00000001>;\n \
    \   using txunderr = FieldModel<address, 4, 0x00000001>;\n    using dtimeout =\
    \ FieldModel<address, 3, 0x00000001>;\n    using ctimeout = FieldModel<address,\
    \ 2, 0x00000001>;\n    using dcrcfail = FieldModel<address, 1, 0x00000001>;\n\
    \    using ccrcfail = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n \
    \ using sta = StaReg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class IcrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using ceataendc = FieldModel<address, 23, 0x00000001>;\n    using sdioitc =\
    \ FieldModel<address, 22, 0x00000001>;\n    using dbckendc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using stbiterrc = FieldModel<address, 9, 0x00000001>;\n\
    \    using dataendc = FieldModel<address, 8, 0x00000001>;\n    using cmdsentc\
    \ = FieldModel<address, 7, 0x00000001>;\n    using cmdrendc = FieldModel<address,\
    \ 6, 0x00000001>;\n    using rxoverrc = FieldModel<address, 5, 0x00000001>;\n\
    \    using txunderrc = FieldModel<address, 4, 0x00000001>;\n    using dtimeoutc\
    \ = FieldModel<address, 3, 0x00000001>;\n    using ctimeoutc = FieldModel<address,\
    \ 2, 0x00000001>;\n    using dcrcfailc = FieldModel<address, 1, 0x00000001>;\n\
    \    using ccrcfailc = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n\
    \  using icr = IcrReg<BaseAddress + 0x0038>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class MaskReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using ceataendie = FieldModel<address, 23, 0x00000001>;\n    using sdioitie\
    \ = FieldModel<address, 22, 0x00000001>;\n    using rxdavlie = FieldModel<address,\
    \ 21, 0x00000001>;\n    using txdavlie = FieldModel<address, 20, 0x00000001>;\n\
    \    using rxfifoeie = FieldModel<address, 19, 0x00000001>;\n    using txfifoeie\
    \ = FieldModel<address, 18, 0x00000001>;\n    using rxfifofie = FieldModel<address,\
    \ 17, 0x00000001>;\n    using txfifofie = FieldModel<address, 16, 0x00000001>;\n\
    \    using rxfifohfie = FieldModel<address, 15, 0x00000001>;\n    using txfifoheie\
    \ = FieldModel<address, 14, 0x00000001>;\n    using rxactie = FieldModel<address,\
    \ 13, 0x00000001>;\n    using txactie = FieldModel<address, 12, 0x00000001>;\n\
    \    using cmdactie = FieldModel<address, 11, 0x00000001>;\n    using dbckendie\
    \ = FieldModel<address, 10, 0x00000001>;\n    using stbiterrie = FieldModel<address,\
    \ 9, 0x00000001>;\n    using dataendie = FieldModel<address, 8, 0x00000001>;\n\
    \    using cmdsentie = FieldModel<address, 7, 0x00000001>;\n    using cmdrendie\
    \ = FieldModel<address, 6, 0x00000001>;\n    using rxoverrie = FieldModel<address,\
    \ 5, 0x00000001>;\n    using txunderrie = FieldModel<address, 4, 0x00000001>;\n\
    \    using dtimeoutie = FieldModel<address, 3, 0x00000001>;\n    using ctimeoutie\
    \ = FieldModel<address, 2, 0x00000001>;\n    using dcrcfailie = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ccrcfailie = FieldModel<address, 0, 0x00000001>;\n\
    \  };\n\npublic:\n  using mask = MaskReg<BaseAddress + 0x003C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class FifocntReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using fifocount = FieldModel<address, 0, 0x00FFFFFF>;\n \
    \ };\n\npublic:\n  using fifocnt = FifocntReg<BaseAddress + 0x0048>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class FifoReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using fifodata = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\
    \npublic:\n  using fifo = FifoReg<BaseAddress + 0x0080>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_SDIO_H */\n"
  name: SDIO
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SYSCFG_H\n#define DRAL_STM32F411_SYSCFG_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass syscfg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class MemrmReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using mem_mode = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using memrm = MemrmReg<BaseAddress + 0x0000>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class PmcReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using adc1dc2 = FieldModel<address, 16, 0x00000001>;\n  };\n\npublic:\n \
    \ using pmc = PmcReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Exticr1Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using exti3 = FieldModel<address, 12, 0x0000000F>;\n    using exti2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using exti1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using exti0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ exticr1 = Exticr1Reg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Exticr2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using exti7 = FieldModel<address, 12, 0x0000000F>;\n    using exti6 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using exti5 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using exti4 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ exticr2 = Exticr2Reg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Exticr3Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using exti11 = FieldModel<address, 12, 0x0000000F>;\n    using exti10 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using exti9 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using exti8 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ exticr3 = Exticr3Reg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Exticr4Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using exti15 = FieldModel<address, 12, 0x0000000F>;\n    using exti14 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using exti13 = FieldModel<address, 4, 0x0000000F>;\n  \
    \  using exti12 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ exticr4 = Exticr4Reg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CmpcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using ready = FieldModel<address, 8, 0x00000001>;\n    using cmp_pd = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cmpcr = CmpcrReg<BaseAddress + 0x0020>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_SYSCFG_H */\n"
  name: SYSCFG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM1_H\n#define DRAL_STM32F411_TIM1_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40010000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using cms = FieldModel<address,\
    \ 5, 0x00000003>;\n    using dir = FieldModel<address, 4, 0x00000001>;\n    using\
    \ opm = FieldModel<address, 3, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ois4 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using ois3n = FieldModel<address, 13, 0x00000001>;\n \
    \   using ois3 = FieldModel<address, 12, 0x00000001>;\n    using ois2n = FieldModel<address,\
    \ 11, 0x00000001>;\n    using ois2 = FieldModel<address, 10, 0x00000001>;\n  \
    \  using ois1n = FieldModel<address, 9, 0x00000001>;\n    using ois1 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using ti1s = FieldModel<address, 7, 0x00000001>;\n    using\
    \ mms = FieldModel<address, 4, 0x00000007>;\n    using ccds = FieldModel<address,\
    \ 3, 0x00000001>;\n    using ccus = FieldModel<address, 2, 0x00000001>;\n    using\
    \ ccpc = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class SmcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using etp = FieldModel<address,\
    \ 15, 0x00000001>;\n    using ece = FieldModel<address, 14, 0x00000001>;\n   \
    \ using etps = FieldModel<address, 12, 0x00000003>;\n    using etf = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msm = FieldModel<address, 7, 0x00000001>;\n    using\
    \ ts = FieldModel<address, 4, 0x00000007>;\n    using sms = FieldModel<address,\
    \ 0, 0x00000007>;\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 0x00000001>;\n    using\
    \ comde = FieldModel<address, 13, 0x00000001>;\n    using cc4de = FieldModel<address,\
    \ 12, 0x00000001>;\n    using cc3de = FieldModel<address, 11, 0x00000001>;\n \
    \   using cc2de = FieldModel<address, 10, 0x00000001>;\n    using cc1de = FieldModel<address,\
    \ 9, 0x00000001>;\n    using ude = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bie = FieldModel<address, 7, 0x00000001>;\n    using tie = FieldModel<address,\
    \ 6, 0x00000001>;\n    using comie = FieldModel<address, 5, 0x00000001>;\n   \
    \ using cc4ie = FieldModel<address, 4, 0x00000001>;\n    using cc3ie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2ie = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1ie = FieldModel<address, 1, 0x00000001>;\n    using uie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 0x00000001>;\n    using\
    \ cc3of = FieldModel<address, 11, 0x00000001>;\n    using cc2of = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc1of = FieldModel<address, 9, 0x00000001>;\n  \
    \  using bif = FieldModel<address, 7, 0x00000001>;\n    using tif = FieldModel<address,\
    \ 6, 0x00000001>;\n    using comif = FieldModel<address, 5, 0x00000001>;\n   \
    \ using cc4if = FieldModel<address, 4, 0x00000001>;\n    using cc3if = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2if = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1if = FieldModel<address, 1, 0x00000001>;\n    using uif = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template <uint32_t address>\n  class EgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bg = FieldModel<address, 7, 0x00000001>;\n    using\
    \ tg = FieldModel<address, 6, 0x00000001>;\n    using comg = FieldModel<address,\
    \ 5, 0x00000001>;\n    using cc4g = FieldModel<address, 4, 0x00000001>;\n    using\
    \ cc3g = FieldModel<address, 3, 0x00000001>;\n    using cc2g = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1g = FieldModel<address, 1, 0x00000001>;\n    using\
    \ ug = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Ccmr1_outputReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using oc2ce = FieldModel<address,\
    \ 15, 0x00000001>;\n    using oc2m = FieldModel<address, 12, 0x00000007>;\n  \
    \  using oc2pe = FieldModel<address, 11, 0x00000001>;\n    using oc2fe = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc2s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using oc1ce = FieldModel<address, 7, 0x00000001>;\n    using oc1m = FieldModel<address,\
    \ 4, 0x00000007>;\n    using oc1pe = FieldModel<address, 3, 0x00000001>;\n   \
    \ using oc1fe = FieldModel<address, 2, 0x00000001>;\n    using cc1s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n  class Ccmr1_inputReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ic2f = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using ic2pcs = FieldModel<address, 10, 0x00000003>;\n\
    \    using cc2s = FieldModel<address, 8, 0x00000003>;\n    using ic1f = FieldModel<address,\
    \ 4, 0x0000000F>;\n    using icpcs = FieldModel<address, 2, 0x00000003>;\n   \
    \ using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_input\
    \ = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr2_outputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ oc4ce = FieldModel<address, 15, 0x00000001>;\n    using oc4m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc4pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc4fe = FieldModel<address, 10, 0x00000001>;\n    using cc4s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc3ce = FieldModel<address, 7, 0x00000001>;\n   \
    \ using oc3m = FieldModel<address, 4, 0x00000007>;\n    using oc3pe = FieldModel<address,\
    \ 3, 0x00000001>;\n    using oc3fe = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr2_output\
    \ = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr2_inputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic4f = FieldModel<address, 12, 0x0000000F>;\n    using ic4psc = FieldModel<address,\
    \ 10, 0x00000003>;\n    using cc4s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using ic3f = FieldModel<address, 4, 0x0000000F>;\n    using ic3psc = FieldModel<address,\
    \ 2, 0x00000003>;\n    using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CcerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4p = FieldModel<address, 13, 0x00000001>;\n    using\
    \ cc4e = FieldModel<address, 12, 0x00000001>;\n    using cc3np = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc3ne = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc3p = FieldModel<address, 9, 0x00000001>;\n    using cc3e = FieldModel<address,\
    \ 8, 0x00000001>;\n    using cc2np = FieldModel<address, 7, 0x00000001>;\n   \
    \ using cc2ne = FieldModel<address, 6, 0x00000001>;\n    using cc2p = FieldModel<address,\
    \ 5, 0x00000001>;\n    using cc2e = FieldModel<address, 4, 0x00000001>;\n    using\
    \ cc1np = FieldModel<address, 3, 0x00000001>;\n    using cc1ne = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n  class PscReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ArrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccr1Reg: public RegisterModel<address>\n  {\n  public:\n \
    \   using ccr1 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress\
    \ + 0x0038>;\n\nprivate:\n  template <uint32_t address>\n  class Ccr3Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ccr3 = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr4Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class DcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using dbl = FieldModel<address, 8, 0x0000001F>;\n    using dba = FieldModel<address,\
    \ 0, 0x0000001F>;\n  };\n\npublic:\n  using dcr = DcrReg<BaseAddress + 0x0048>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DmarReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dmab = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dmar = DmarReg<BaseAddress + 0x004C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class RcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using rep = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using\
    \ rcr = RcrReg<BaseAddress + 0x0030>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class BdtrReg: public RegisterModel<address>\n  {\n  public:\n    using moe\
    \ = FieldModel<address, 15, 0x00000001>;\n    using aoe = FieldModel<address,\
    \ 14, 0x00000001>;\n    using bkp = FieldModel<address, 13, 0x00000001>;\n   \
    \ using bke = FieldModel<address, 12, 0x00000001>;\n    using ossr = FieldModel<address,\
    \ 11, 0x00000001>;\n    using ossi = FieldModel<address, 10, 0x00000001>;\n  \
    \  using lock = FieldModel<address, 8, 0x00000003>;\n    using dtg = FieldModel<address,\
    \ 0, 0x000000FF>;\n  };\n\npublic:\n  using bdtr = BdtrReg<BaseAddress + 0x0044>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM1_H */\n"
  name: TIM1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM8_H\n#define DRAL_STM32F411_TIM8_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim8\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40010400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using cms = FieldModel<address,\
    \ 5, 0x00000003>;\n    using dir = FieldModel<address, 4, 0x00000001>;\n    using\
    \ opm = FieldModel<address, 3, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ois4 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using ois3n = FieldModel<address, 13, 0x00000001>;\n \
    \   using ois3 = FieldModel<address, 12, 0x00000001>;\n    using ois2n = FieldModel<address,\
    \ 11, 0x00000001>;\n    using ois2 = FieldModel<address, 10, 0x00000001>;\n  \
    \  using ois1n = FieldModel<address, 9, 0x00000001>;\n    using ois1 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using ti1s = FieldModel<address, 7, 0x00000001>;\n    using\
    \ mms = FieldModel<address, 4, 0x00000007>;\n    using ccds = FieldModel<address,\
    \ 3, 0x00000001>;\n    using ccus = FieldModel<address, 2, 0x00000001>;\n    using\
    \ ccpc = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class SmcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using etp = FieldModel<address,\
    \ 15, 0x00000001>;\n    using ece = FieldModel<address, 14, 0x00000001>;\n   \
    \ using etps = FieldModel<address, 12, 0x00000003>;\n    using etf = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msm = FieldModel<address, 7, 0x00000001>;\n    using\
    \ ts = FieldModel<address, 4, 0x00000007>;\n    using sms = FieldModel<address,\
    \ 0, 0x00000007>;\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 0x00000001>;\n    using\
    \ comde = FieldModel<address, 13, 0x00000001>;\n    using cc4de = FieldModel<address,\
    \ 12, 0x00000001>;\n    using cc3de = FieldModel<address, 11, 0x00000001>;\n \
    \   using cc2de = FieldModel<address, 10, 0x00000001>;\n    using cc1de = FieldModel<address,\
    \ 9, 0x00000001>;\n    using ude = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bie = FieldModel<address, 7, 0x00000001>;\n    using tie = FieldModel<address,\
    \ 6, 0x00000001>;\n    using comie = FieldModel<address, 5, 0x00000001>;\n   \
    \ using cc4ie = FieldModel<address, 4, 0x00000001>;\n    using cc3ie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2ie = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1ie = FieldModel<address, 1, 0x00000001>;\n    using uie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 0x00000001>;\n    using\
    \ cc3of = FieldModel<address, 11, 0x00000001>;\n    using cc2of = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc1of = FieldModel<address, 9, 0x00000001>;\n  \
    \  using bif = FieldModel<address, 7, 0x00000001>;\n    using tif = FieldModel<address,\
    \ 6, 0x00000001>;\n    using comif = FieldModel<address, 5, 0x00000001>;\n   \
    \ using cc4if = FieldModel<address, 4, 0x00000001>;\n    using cc3if = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2if = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1if = FieldModel<address, 1, 0x00000001>;\n    using uif = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template <uint32_t address>\n  class EgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bg = FieldModel<address, 7, 0x00000001>;\n    using\
    \ tg = FieldModel<address, 6, 0x00000001>;\n    using comg = FieldModel<address,\
    \ 5, 0x00000001>;\n    using cc4g = FieldModel<address, 4, 0x00000001>;\n    using\
    \ cc3g = FieldModel<address, 3, 0x00000001>;\n    using cc2g = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1g = FieldModel<address, 1, 0x00000001>;\n    using\
    \ ug = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Ccmr1_outputReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using oc2ce = FieldModel<address,\
    \ 15, 0x00000001>;\n    using oc2m = FieldModel<address, 12, 0x00000007>;\n  \
    \  using oc2pe = FieldModel<address, 11, 0x00000001>;\n    using oc2fe = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc2s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using oc1ce = FieldModel<address, 7, 0x00000001>;\n    using oc1m = FieldModel<address,\
    \ 4, 0x00000007>;\n    using oc1pe = FieldModel<address, 3, 0x00000001>;\n   \
    \ using oc1fe = FieldModel<address, 2, 0x00000001>;\n    using cc1s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n  class Ccmr1_inputReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using ic2f = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using ic2pcs = FieldModel<address, 10, 0x00000003>;\n\
    \    using cc2s = FieldModel<address, 8, 0x00000003>;\n    using ic1f = FieldModel<address,\
    \ 4, 0x0000000F>;\n    using icpcs = FieldModel<address, 2, 0x00000003>;\n   \
    \ using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_input\
    \ = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr2_outputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ oc4ce = FieldModel<address, 15, 0x00000001>;\n    using oc4m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc4pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc4fe = FieldModel<address, 10, 0x00000001>;\n    using cc4s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc3ce = FieldModel<address, 7, 0x00000001>;\n   \
    \ using oc3m = FieldModel<address, 4, 0x00000007>;\n    using oc3pe = FieldModel<address,\
    \ 3, 0x00000001>;\n    using oc3fe = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr2_output\
    \ = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr2_inputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic4f = FieldModel<address, 12, 0x0000000F>;\n    using ic4psc = FieldModel<address,\
    \ 10, 0x00000003>;\n    using cc4s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using ic3f = FieldModel<address, 4, 0x0000000F>;\n    using ic3psc = FieldModel<address,\
    \ 2, 0x00000003>;\n    using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CcerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4p = FieldModel<address, 13, 0x00000001>;\n    using\
    \ cc4e = FieldModel<address, 12, 0x00000001>;\n    using cc3np = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc3ne = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc3p = FieldModel<address, 9, 0x00000001>;\n    using cc3e = FieldModel<address,\
    \ 8, 0x00000001>;\n    using cc2np = FieldModel<address, 7, 0x00000001>;\n   \
    \ using cc2ne = FieldModel<address, 6, 0x00000001>;\n    using cc2p = FieldModel<address,\
    \ 5, 0x00000001>;\n    using cc2e = FieldModel<address, 4, 0x00000001>;\n    using\
    \ cc1np = FieldModel<address, 3, 0x00000001>;\n    using cc1ne = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n  class PscReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ArrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccr1Reg: public RegisterModel<address>\n  {\n  public:\n \
    \   using ccr1 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress\
    \ + 0x0038>;\n\nprivate:\n  template <uint32_t address>\n  class Ccr3Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ccr3 = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr4Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr4 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class DcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using dbl = FieldModel<address, 8, 0x0000001F>;\n    using dba = FieldModel<address,\
    \ 0, 0x0000001F>;\n  };\n\npublic:\n  using dcr = DcrReg<BaseAddress + 0x0048>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DmarReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dmab = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dmar = DmarReg<BaseAddress + 0x004C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class RcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using rep = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using\
    \ rcr = RcrReg<BaseAddress + 0x0030>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class BdtrReg: public RegisterModel<address>\n  {\n  public:\n    using moe\
    \ = FieldModel<address, 15, 0x00000001>;\n    using aoe = FieldModel<address,\
    \ 14, 0x00000001>;\n    using bkp = FieldModel<address, 13, 0x00000001>;\n   \
    \ using bke = FieldModel<address, 12, 0x00000001>;\n    using ossr = FieldModel<address,\
    \ 11, 0x00000001>;\n    using ossi = FieldModel<address, 10, 0x00000001>;\n  \
    \  using lock = FieldModel<address, 8, 0x00000003>;\n    using dtg = FieldModel<address,\
    \ 0, 0x000000FF>;\n  };\n\npublic:\n  using bdtr = BdtrReg<BaseAddress + 0x0044>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM8_H */\n"
  name: TIM8
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM10_H\n#define DRAL_STM32F411_TIM10_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim10\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40014400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class DierReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc1ie = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uie = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class SrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using cc1of = FieldModel<address, 9, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using cc1g = FieldModel<address, 1, 0x00000001>;\n    using ug = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccmr1_outputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using oc1m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc1pe = FieldModel<address, 3, 0x00000001>;\n    using oc1fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr1_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic1f = FieldModel<address, 4, 0x0000000F>;\n    using\
    \ icpcs = FieldModel<address, 2, 0x00000003>;\n    using cc1s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n  class PscReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ArrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccr1Reg: public RegisterModel<address>\n  {\n  public:\n \
    \   using ccr1 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM10_H\
    \ */\n"
  name: TIM10
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM11_H\n#define DRAL_STM32F411_TIM11_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim11\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40014800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class DierReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc1ie = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uie = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class SrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using cc1of = FieldModel<address, 9, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using cc1g = FieldModel<address, 1, 0x00000001>;\n    using ug = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccmr1_outputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using oc1m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc1pe = FieldModel<address, 3, 0x00000001>;\n    using oc1fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr1_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic1f = FieldModel<address, 4, 0x0000000F>;\n    using\
    \ icpcs = FieldModel<address, 2, 0x00000003>;\n    using cc1s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n  class PscReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ArrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccr1Reg: public RegisterModel<address>\n  {\n  public:\n \
    \   using ccr1 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class OrReg: public RegisterModel<address>\n  {\n  public:\n    using rmp =\
    \ FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using or = OrReg<BaseAddress\
    \ + 0x0050>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM11_H */\n"
  name: TIM11
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM2_H\n#define DRAL_STM32F411_TIM2_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using cms = FieldModel<address,\
    \ 5, 0x00000003>;\n    using dir = FieldModel<address, 4, 0x00000001>;\n    using\
    \ opm = FieldModel<address, 3, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ti1s = FieldModel<address,\
    \ 7, 0x00000001>;\n    using mms = FieldModel<address, 4, 0x00000007>;\n    using\
    \ ccds = FieldModel<address, 3, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class SmcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using etp = FieldModel<address,\
    \ 15, 0x00000001>;\n    using ece = FieldModel<address, 14, 0x00000001>;\n   \
    \ using etps = FieldModel<address, 12, 0x00000003>;\n    using etf = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msm = FieldModel<address, 7, 0x00000001>;\n    using\
    \ ts = FieldModel<address, 4, 0x00000007>;\n    using sms = FieldModel<address,\
    \ 0, 0x00000007>;\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 0x00000001>;\n    using\
    \ cc4de = FieldModel<address, 12, 0x00000001>;\n    using cc3de = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc2de = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc1de = FieldModel<address, 9, 0x00000001>;\n    using ude = FieldModel<address,\
    \ 8, 0x00000001>;\n    using tie = FieldModel<address, 6, 0x00000001>;\n    using\
    \ cc4ie = FieldModel<address, 4, 0x00000001>;\n    using cc3ie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2ie = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1ie = FieldModel<address, 1, 0x00000001>;\n    using uie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 0x00000001>;\n    using\
    \ cc3of = FieldModel<address, 11, 0x00000001>;\n    using cc2of = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc1of = FieldModel<address, 9, 0x00000001>;\n  \
    \  using tif = FieldModel<address, 6, 0x00000001>;\n    using cc4if = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3if = FieldModel<address, 3, 0x00000001>;\n   \
    \ using cc2if = FieldModel<address, 2, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using tg = FieldModel<address, 6, 0x00000001>;\n    using cc4g = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3g = FieldModel<address, 3, 0x00000001>;\n    using\
    \ cc2g = FieldModel<address, 2, 0x00000001>;\n    using cc1g = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ug = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccmr1_outputReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 0x00000001>;\n    using oc2m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc2pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc2fe = FieldModel<address, 10, 0x00000001>;\n    using cc2s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc1ce = FieldModel<address, 7, 0x00000001>;\n   \
    \ using oc1m = FieldModel<address, 4, 0x00000007>;\n    using oc1pe = FieldModel<address,\
    \ 3, 0x00000001>;\n    using oc1fe = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_output\
    \ = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr1_inputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic2f = FieldModel<address, 12, 0x0000000F>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 0x00000003>;\n    using cc2s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using ic1f = FieldModel<address, 4, 0x0000000F>;\n    using icpcs = FieldModel<address,\
    \ 2, 0x00000003>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_outputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 0x00000001>;\n    using\
    \ oc4m = FieldModel<address, 12, 0x00000007>;\n    using oc4pe = FieldModel<address,\
    \ 11, 0x00000001>;\n    using oc4fe = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc4s = FieldModel<address, 8, 0x00000003>;\n    using oc3ce = FieldModel<address,\
    \ 7, 0x00000001>;\n    using oc3m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc3pe = FieldModel<address, 3, 0x00000001>;\n    using oc3fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic4f = FieldModel<address, 12, 0x0000000F>;\n    using\
    \ ic4psc = FieldModel<address, 10, 0x00000003>;\n    using cc4s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using ic3f = FieldModel<address, 4, 0x0000000F>;\n    using\
    \ ic3psc = FieldModel<address, 2, 0x00000003>;\n    using cc3s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 0x00000001>;\n    using cc4p = FieldModel<address, 13, 0x00000001>;\n  \
    \  using cc4e = FieldModel<address, 12, 0x00000001>;\n    using cc3np = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc3p = FieldModel<address, 9, 0x00000001>;\n   \
    \ using cc3e = FieldModel<address, 8, 0x00000001>;\n    using cc2np = FieldModel<address,\
    \ 7, 0x00000001>;\n    using cc2p = FieldModel<address, 5, 0x00000001>;\n    using\
    \ cc2e = FieldModel<address, 4, 0x00000001>;\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using cnt_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress + 0x0024>;\n\
    \nprivate:\n  template <uint32_t address>\n  class PscReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using psc = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class ArrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using arr_h = FieldModel<address, 16, 0x0000FFFF>;\n    using arr_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr1_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr2_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr3_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr4Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr4_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr4_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 0x0000001F>;\n    using\
    \ dba = FieldModel<address, 0, 0x0000001F>;\n  };\n\npublic:\n  using dcr = DcrReg<BaseAddress\
    \ + 0x0048>;\n\nprivate:\n  template <uint32_t address>\n  class DmarReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using dmab = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dmar = DmarReg<BaseAddress + 0x004C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using itr1_rmp = FieldModel<address, 10, 0x00000003>;\n \
    \ };\n\npublic:\n  using or = OrReg<BaseAddress + 0x0050>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_TIM2_H */\n"
  name: TIM2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM3_H\n#define DRAL_STM32F411_TIM3_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim3\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using cms = FieldModel<address,\
    \ 5, 0x00000003>;\n    using dir = FieldModel<address, 4, 0x00000001>;\n    using\
    \ opm = FieldModel<address, 3, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ti1s = FieldModel<address,\
    \ 7, 0x00000001>;\n    using mms = FieldModel<address, 4, 0x00000007>;\n    using\
    \ ccds = FieldModel<address, 3, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class SmcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using etp = FieldModel<address,\
    \ 15, 0x00000001>;\n    using ece = FieldModel<address, 14, 0x00000001>;\n   \
    \ using etps = FieldModel<address, 12, 0x00000003>;\n    using etf = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msm = FieldModel<address, 7, 0x00000001>;\n    using\
    \ ts = FieldModel<address, 4, 0x00000007>;\n    using sms = FieldModel<address,\
    \ 0, 0x00000007>;\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 0x00000001>;\n    using\
    \ cc4de = FieldModel<address, 12, 0x00000001>;\n    using cc3de = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc2de = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc1de = FieldModel<address, 9, 0x00000001>;\n    using ude = FieldModel<address,\
    \ 8, 0x00000001>;\n    using tie = FieldModel<address, 6, 0x00000001>;\n    using\
    \ cc4ie = FieldModel<address, 4, 0x00000001>;\n    using cc3ie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2ie = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1ie = FieldModel<address, 1, 0x00000001>;\n    using uie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 0x00000001>;\n    using\
    \ cc3of = FieldModel<address, 11, 0x00000001>;\n    using cc2of = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc1of = FieldModel<address, 9, 0x00000001>;\n  \
    \  using tif = FieldModel<address, 6, 0x00000001>;\n    using cc4if = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3if = FieldModel<address, 3, 0x00000001>;\n   \
    \ using cc2if = FieldModel<address, 2, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using tg = FieldModel<address, 6, 0x00000001>;\n    using cc4g = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3g = FieldModel<address, 3, 0x00000001>;\n    using\
    \ cc2g = FieldModel<address, 2, 0x00000001>;\n    using cc1g = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ug = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccmr1_outputReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 0x00000001>;\n    using oc2m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc2pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc2fe = FieldModel<address, 10, 0x00000001>;\n    using cc2s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc1ce = FieldModel<address, 7, 0x00000001>;\n   \
    \ using oc1m = FieldModel<address, 4, 0x00000007>;\n    using oc1pe = FieldModel<address,\
    \ 3, 0x00000001>;\n    using oc1fe = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_output\
    \ = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr1_inputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic2f = FieldModel<address, 12, 0x0000000F>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 0x00000003>;\n    using cc2s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using ic1f = FieldModel<address, 4, 0x0000000F>;\n    using icpcs = FieldModel<address,\
    \ 2, 0x00000003>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_outputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 0x00000001>;\n    using\
    \ oc4m = FieldModel<address, 12, 0x00000007>;\n    using oc4pe = FieldModel<address,\
    \ 11, 0x00000001>;\n    using oc4fe = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc4s = FieldModel<address, 8, 0x00000003>;\n    using oc3ce = FieldModel<address,\
    \ 7, 0x00000001>;\n    using oc3m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc3pe = FieldModel<address, 3, 0x00000001>;\n    using oc3fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic4f = FieldModel<address, 12, 0x0000000F>;\n    using\
    \ ic4psc = FieldModel<address, 10, 0x00000003>;\n    using cc4s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using ic3f = FieldModel<address, 4, 0x0000000F>;\n    using\
    \ ic3psc = FieldModel<address, 2, 0x00000003>;\n    using cc3s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 0x00000001>;\n    using cc4p = FieldModel<address, 13, 0x00000001>;\n  \
    \  using cc4e = FieldModel<address, 12, 0x00000001>;\n    using cc3np = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc3p = FieldModel<address, 9, 0x00000001>;\n   \
    \ using cc3e = FieldModel<address, 8, 0x00000001>;\n    using cc2np = FieldModel<address,\
    \ 7, 0x00000001>;\n    using cc2p = FieldModel<address, 5, 0x00000001>;\n    using\
    \ cc2e = FieldModel<address, 4, 0x00000001>;\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using cnt_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress + 0x0024>;\n\
    \nprivate:\n  template <uint32_t address>\n  class PscReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using psc = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class ArrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using arr_h = FieldModel<address, 16, 0x0000FFFF>;\n    using arr_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr1_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr2_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr3_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr4Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr4_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr4_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 0x0000001F>;\n    using\
    \ dba = FieldModel<address, 0, 0x0000001F>;\n  };\n\npublic:\n  using dcr = DcrReg<BaseAddress\
    \ + 0x0048>;\n\nprivate:\n  template <uint32_t address>\n  class DmarReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using dmab = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dmar = DmarReg<BaseAddress + 0x004C>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM3_H */\n"
  name: TIM3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM4_H\n#define DRAL_STM32F411_TIM4_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim4\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using cms = FieldModel<address,\
    \ 5, 0x00000003>;\n    using dir = FieldModel<address, 4, 0x00000001>;\n    using\
    \ opm = FieldModel<address, 3, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ti1s = FieldModel<address,\
    \ 7, 0x00000001>;\n    using mms = FieldModel<address, 4, 0x00000007>;\n    using\
    \ ccds = FieldModel<address, 3, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class SmcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using etp = FieldModel<address,\
    \ 15, 0x00000001>;\n    using ece = FieldModel<address, 14, 0x00000001>;\n   \
    \ using etps = FieldModel<address, 12, 0x00000003>;\n    using etf = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msm = FieldModel<address, 7, 0x00000001>;\n    using\
    \ ts = FieldModel<address, 4, 0x00000007>;\n    using sms = FieldModel<address,\
    \ 0, 0x00000007>;\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 0x00000001>;\n    using\
    \ cc4de = FieldModel<address, 12, 0x00000001>;\n    using cc3de = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc2de = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc1de = FieldModel<address, 9, 0x00000001>;\n    using ude = FieldModel<address,\
    \ 8, 0x00000001>;\n    using tie = FieldModel<address, 6, 0x00000001>;\n    using\
    \ cc4ie = FieldModel<address, 4, 0x00000001>;\n    using cc3ie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2ie = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1ie = FieldModel<address, 1, 0x00000001>;\n    using uie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 0x00000001>;\n    using\
    \ cc3of = FieldModel<address, 11, 0x00000001>;\n    using cc2of = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc1of = FieldModel<address, 9, 0x00000001>;\n  \
    \  using tif = FieldModel<address, 6, 0x00000001>;\n    using cc4if = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3if = FieldModel<address, 3, 0x00000001>;\n   \
    \ using cc2if = FieldModel<address, 2, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using tg = FieldModel<address, 6, 0x00000001>;\n    using cc4g = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3g = FieldModel<address, 3, 0x00000001>;\n    using\
    \ cc2g = FieldModel<address, 2, 0x00000001>;\n    using cc1g = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ug = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccmr1_outputReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 0x00000001>;\n    using oc2m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc2pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc2fe = FieldModel<address, 10, 0x00000001>;\n    using cc2s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc1ce = FieldModel<address, 7, 0x00000001>;\n   \
    \ using oc1m = FieldModel<address, 4, 0x00000007>;\n    using oc1pe = FieldModel<address,\
    \ 3, 0x00000001>;\n    using oc1fe = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_output\
    \ = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr1_inputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic2f = FieldModel<address, 12, 0x0000000F>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 0x00000003>;\n    using cc2s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using ic1f = FieldModel<address, 4, 0x0000000F>;\n    using icpcs = FieldModel<address,\
    \ 2, 0x00000003>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_outputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 0x00000001>;\n    using\
    \ oc4m = FieldModel<address, 12, 0x00000007>;\n    using oc4pe = FieldModel<address,\
    \ 11, 0x00000001>;\n    using oc4fe = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc4s = FieldModel<address, 8, 0x00000003>;\n    using oc3ce = FieldModel<address,\
    \ 7, 0x00000001>;\n    using oc3m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc3pe = FieldModel<address, 3, 0x00000001>;\n    using oc3fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic4f = FieldModel<address, 12, 0x0000000F>;\n    using\
    \ ic4psc = FieldModel<address, 10, 0x00000003>;\n    using cc4s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using ic3f = FieldModel<address, 4, 0x0000000F>;\n    using\
    \ ic3psc = FieldModel<address, 2, 0x00000003>;\n    using cc3s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 0x00000001>;\n    using cc4p = FieldModel<address, 13, 0x00000001>;\n  \
    \  using cc4e = FieldModel<address, 12, 0x00000001>;\n    using cc3np = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc3p = FieldModel<address, 9, 0x00000001>;\n   \
    \ using cc3e = FieldModel<address, 8, 0x00000001>;\n    using cc2np = FieldModel<address,\
    \ 7, 0x00000001>;\n    using cc2p = FieldModel<address, 5, 0x00000001>;\n    using\
    \ cc2e = FieldModel<address, 4, 0x00000001>;\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using cnt_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress + 0x0024>;\n\
    \nprivate:\n  template <uint32_t address>\n  class PscReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using psc = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class ArrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using arr_h = FieldModel<address, 16, 0x0000FFFF>;\n    using arr_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr1_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr2_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr3_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr4Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr4_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr4_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 0x0000001F>;\n    using\
    \ dba = FieldModel<address, 0, 0x0000001F>;\n  };\n\npublic:\n  using dcr = DcrReg<BaseAddress\
    \ + 0x0048>;\n\nprivate:\n  template <uint32_t address>\n  class DmarReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using dmab = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dmar = DmarReg<BaseAddress + 0x004C>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM4_H */\n"
  name: TIM4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM5_H\n#define DRAL_STM32F411_TIM5_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim5\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40000C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using cms = FieldModel<address,\
    \ 5, 0x00000003>;\n    using dir = FieldModel<address, 4, 0x00000001>;\n    using\
    \ opm = FieldModel<address, 3, 0x00000001>;\n    using urs = FieldModel<address,\
    \ 2, 0x00000001>;\n    using udis = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ti1s = FieldModel<address,\
    \ 7, 0x00000001>;\n    using mms = FieldModel<address, 4, 0x00000007>;\n    using\
    \ ccds = FieldModel<address, 3, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress\
    \ + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n  class SmcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using etp = FieldModel<address,\
    \ 15, 0x00000001>;\n    using ece = FieldModel<address, 14, 0x00000001>;\n   \
    \ using etps = FieldModel<address, 12, 0x00000003>;\n    using etf = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using msm = FieldModel<address, 7, 0x00000001>;\n    using\
    \ ts = FieldModel<address, 4, 0x00000007>;\n    using sms = FieldModel<address,\
    \ 0, 0x00000007>;\n  };\n\npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DierReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tde = FieldModel<address, 14, 0x00000001>;\n    using\
    \ cc4de = FieldModel<address, 12, 0x00000001>;\n    using cc3de = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc2de = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc1de = FieldModel<address, 9, 0x00000001>;\n    using ude = FieldModel<address,\
    \ 8, 0x00000001>;\n    using tie = FieldModel<address, 6, 0x00000001>;\n    using\
    \ cc4ie = FieldModel<address, 4, 0x00000001>;\n    using cc3ie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc2ie = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1ie = FieldModel<address, 1, 0x00000001>;\n    using uie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using dier = DierReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cc4of = FieldModel<address, 12, 0x00000001>;\n    using\
    \ cc3of = FieldModel<address, 11, 0x00000001>;\n    using cc2of = FieldModel<address,\
    \ 10, 0x00000001>;\n    using cc1of = FieldModel<address, 9, 0x00000001>;\n  \
    \  using tif = FieldModel<address, 6, 0x00000001>;\n    using cc4if = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3if = FieldModel<address, 3, 0x00000001>;\n   \
    \ using cc2if = FieldModel<address, 2, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using tg = FieldModel<address, 6, 0x00000001>;\n    using cc4g = FieldModel<address,\
    \ 4, 0x00000001>;\n    using cc3g = FieldModel<address, 3, 0x00000001>;\n    using\
    \ cc2g = FieldModel<address, 2, 0x00000001>;\n    using cc1g = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ug = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using egr = EgrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccmr1_outputReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using oc2ce = FieldModel<address, 15, 0x00000001>;\n    using oc2m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc2pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc2fe = FieldModel<address, 10, 0x00000001>;\n    using cc2s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc1ce = FieldModel<address, 7, 0x00000001>;\n   \
    \ using oc1m = FieldModel<address, 4, 0x00000007>;\n    using oc1pe = FieldModel<address,\
    \ 3, 0x00000001>;\n    using oc1fe = FieldModel<address, 2, 0x00000001>;\n   \
    \ using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_output\
    \ = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccmr1_inputReg: public RegisterModel<address>\n  {\n  public:\n    using\
    \ ic2f = FieldModel<address, 12, 0x0000000F>;\n    using ic2pcs = FieldModel<address,\
    \ 10, 0x00000003>;\n    using cc2s = FieldModel<address, 8, 0x00000003>;\n   \
    \ using ic1f = FieldModel<address, 4, 0x0000000F>;\n    using icpcs = FieldModel<address,\
    \ 2, 0x00000003>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_outputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using oc4ce = FieldModel<address, 15, 0x00000001>;\n    using\
    \ oc4m = FieldModel<address, 12, 0x00000007>;\n    using oc4pe = FieldModel<address,\
    \ 11, 0x00000001>;\n    using oc4fe = FieldModel<address, 10, 0x00000001>;\n \
    \   using cc4s = FieldModel<address, 8, 0x00000003>;\n    using oc3ce = FieldModel<address,\
    \ 7, 0x00000001>;\n    using oc3m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc3pe = FieldModel<address, 3, 0x00000001>;\n    using oc3fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc3s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr2_output = Ccmr2_outputReg<BaseAddress + 0x001C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr2_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic4f = FieldModel<address, 12, 0x0000000F>;\n    using\
    \ ic4psc = FieldModel<address, 10, 0x00000003>;\n    using cc4s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using ic3f = FieldModel<address, 4, 0x0000000F>;\n    using\
    \ ic3psc = FieldModel<address, 2, 0x00000003>;\n    using cc3s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr2_input = Ccmr2_inputReg<BaseAddress\
    \ + 0x001C>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc4np = FieldModel<address,\
    \ 15, 0x00000001>;\n    using cc4p = FieldModel<address, 13, 0x00000001>;\n  \
    \  using cc4e = FieldModel<address, 12, 0x00000001>;\n    using cc3np = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cc3p = FieldModel<address, 9, 0x00000001>;\n   \
    \ using cc3e = FieldModel<address, 8, 0x00000001>;\n    using cc2np = FieldModel<address,\
    \ 7, 0x00000001>;\n    using cc2p = FieldModel<address, 5, 0x00000001>;\n    using\
    \ cc2e = FieldModel<address, 4, 0x00000001>;\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using cnt_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress + 0x0024>;\n\
    \nprivate:\n  template <uint32_t address>\n  class PscReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using psc = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class ArrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using arr_h = FieldModel<address, 16, 0x0000FFFF>;\n    using arr_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr1_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr1_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr2_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress + 0x0038>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ccr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ccr3_h = FieldModel<address, 16, 0x0000FFFF>;\n   \
    \ using ccr3_l = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr3 = Ccr3Reg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr4Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr4_h\
    \ = FieldModel<address, 16, 0x0000FFFF>;\n    using ccr4_l = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr4 = Ccr4Reg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dbl = FieldModel<address, 8, 0x0000001F>;\n    using\
    \ dba = FieldModel<address, 0, 0x0000001F>;\n  };\n\npublic:\n  using dcr = DcrReg<BaseAddress\
    \ + 0x0048>;\n\nprivate:\n  template <uint32_t address>\n  class DmarReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using dmab = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using dmar = DmarReg<BaseAddress + 0x004C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using it4_rmp = FieldModel<address, 6, 0x00000003>;\n  };\n\
    \npublic:\n  using or = OrReg<BaseAddress + 0x0050>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM5_H\
    \ */\n"
  name: TIM5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_TIM9_H\n#define DRAL_STM32F411_TIM9_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass tim9\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40014000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ckd = FieldModel<address, 8, 0x00000003>;\n    using\
    \ arpe = FieldModel<address, 7, 0x00000001>;\n    using opm = FieldModel<address,\
    \ 3, 0x00000001>;\n    using urs = FieldModel<address, 2, 0x00000001>;\n    using\
    \ udis = FieldModel<address, 1, 0x00000001>;\n    using cen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using mms = FieldModel<address, 4, 0x00000007>;\n  };\n\n\
    public:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class SmcrReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using msm = FieldModel<address, 7, 0x00000001>;\n    using ts = FieldModel<address,\
    \ 4, 0x00000007>;\n    using sms = FieldModel<address, 0, 0x00000007>;\n  };\n\
    \npublic:\n  using smcr = SmcrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class DierReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using tie = FieldModel<address, 6, 0x00000001>;\n    using cc2ie = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1ie = FieldModel<address, 1, 0x00000001>;\n   \
    \ using uie = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using dier\
    \ = DierReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class SrReg: public RegisterModel<address>\n  {\n  public:\n    using cc2of\
    \ = FieldModel<address, 10, 0x00000001>;\n    using cc1of = FieldModel<address,\
    \ 9, 0x00000001>;\n    using tif = FieldModel<address, 6, 0x00000001>;\n    using\
    \ cc2if = FieldModel<address, 2, 0x00000001>;\n    using cc1if = FieldModel<address,\
    \ 1, 0x00000001>;\n    using uif = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using sr = SrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class EgrReg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using tg = FieldModel<address, 6, 0x00000001>;\n    using cc2g = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1g = FieldModel<address, 1, 0x00000001>;\n    using\
    \ ug = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using egr = EgrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Ccmr1_outputReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using oc2m = FieldModel<address,\
    \ 12, 0x00000007>;\n    using oc2pe = FieldModel<address, 11, 0x00000001>;\n \
    \   using oc2fe = FieldModel<address, 10, 0x00000001>;\n    using cc2s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using oc1m = FieldModel<address, 4, 0x00000007>;\n    using\
    \ oc1pe = FieldModel<address, 3, 0x00000001>;\n    using oc1fe = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cc1s = FieldModel<address, 0, 0x00000003>;\n  };\n\
    \npublic:\n  using ccmr1_output = Ccmr1_outputReg<BaseAddress + 0x0018>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ccmr1_inputReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ic2f = FieldModel<address, 12, 0x00000007>;\n    using\
    \ ic2pcs = FieldModel<address, 10, 0x00000003>;\n    using cc2s = FieldModel<address,\
    \ 8, 0x00000003>;\n    using ic1f = FieldModel<address, 4, 0x00000007>;\n    using\
    \ icpcs = FieldModel<address, 2, 0x00000003>;\n    using cc1s = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using ccmr1_input = Ccmr1_inputReg<BaseAddress\
    \ + 0x0018>;\n\nprivate:\n  template <uint32_t address>\n  class CcerReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using cc2np = FieldModel<address,\
    \ 7, 0x00000001>;\n    using cc2p = FieldModel<address, 5, 0x00000001>;\n    using\
    \ cc2e = FieldModel<address, 4, 0x00000001>;\n    using cc1np = FieldModel<address,\
    \ 3, 0x00000001>;\n    using cc1p = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cc1e = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using ccer =\
    \ CcerReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CntReg: public RegisterModel<address>\n  {\n  public:\n    using cnt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using cnt = CntReg<BaseAddress\
    \ + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n  class PscReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using psc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using psc = PscReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ArrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using arr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using arr = ArrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Ccr1Reg: public RegisterModel<address>\n  {\n  public:\n \
    \   using ccr1 = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ ccr1 = Ccr1Reg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ccr2Reg: public RegisterModel<address>\n  {\n  public:\n    using ccr2\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using ccr2 = Ccr2Reg<BaseAddress\
    \ + 0x0038>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_TIM9_H */\n"
  name: TIM9
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART1_H\n#define DRAL_STM32F411_USART1_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass usart1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40011000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cts = FieldModel<address, 9, 0x00000001>;\n    using\
    \ lbd = FieldModel<address, 8, 0x00000001>;\n    using txe = FieldModel<address,\
    \ 7, 0x00000001>;\n    using tc = FieldModel<address, 6, 0x00000001>;\n    using\
    \ rxne = FieldModel<address, 5, 0x00000001>;\n    using idle = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ore = FieldModel<address, 3, 0x00000001>;\n    using\
    \ nf = FieldModel<address, 2, 0x00000001>;\n    using fe = FieldModel<address,\
    \ 1, 0x00000001>;\n    using pe = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class DrReg: public RegisterModel<address>\n  {\n  public:\n   \
    \ using dr = FieldModel<address, 0, 0x000001FF>;\n  };\n\npublic:\n  using dr\
    \ = DrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class BrrReg: public RegisterModel<address>\n  {\n  public:\n    using div_mantissa\
    \ = FieldModel<address, 4, 0x00000FFF>;\n    using div_fraction = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using brr = BrrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using over8 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ue = FieldModel<address, 13, 0x00000001>;\n    using m = FieldModel<address,\
    \ 12, 0x00000001>;\n    using wake = FieldModel<address, 11, 0x00000001>;\n  \
    \  using pce = FieldModel<address, 10, 0x00000001>;\n    using ps = FieldModel<address,\
    \ 9, 0x00000001>;\n    using peie = FieldModel<address, 8, 0x00000001>;\n    using\
    \ txeie = FieldModel<address, 7, 0x00000001>;\n    using tcie = FieldModel<address,\
    \ 6, 0x00000001>;\n    using rxneie = FieldModel<address, 5, 0x00000001>;\n  \
    \  using idleie = FieldModel<address, 4, 0x00000001>;\n    using te = FieldModel<address,\
    \ 3, 0x00000001>;\n    using re = FieldModel<address, 2, 0x00000001>;\n    using\
    \ rwu = FieldModel<address, 1, 0x00000001>;\n    using sbk = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using linen = FieldModel<address, 14, 0x00000001>;\n    using\
    \ stop = FieldModel<address, 12, 0x00000003>;\n    using clken = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cpol = FieldModel<address, 10, 0x00000001>;\n  \
    \  using cpha = FieldModel<address, 9, 0x00000001>;\n    using lbcl = FieldModel<address,\
    \ 8, 0x00000001>;\n    using lbdie = FieldModel<address, 6, 0x00000001>;\n   \
    \ using lbdl = FieldModel<address, 5, 0x00000001>;\n    using add = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using onebit = FieldModel<address, 11, 0x00000001>;\n   \
    \ using ctsie = FieldModel<address, 10, 0x00000001>;\n    using ctse = FieldModel<address,\
    \ 9, 0x00000001>;\n    using rtse = FieldModel<address, 8, 0x00000001>;\n    using\
    \ dmat = FieldModel<address, 7, 0x00000001>;\n    using dmar = FieldModel<address,\
    \ 6, 0x00000001>;\n    using scen = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nack = FieldModel<address, 4, 0x00000001>;\n    using hdsel = FieldModel<address,\
    \ 3, 0x00000001>;\n    using irlp = FieldModel<address, 2, 0x00000001>;\n    using\
    \ iren = FieldModel<address, 1, 0x00000001>;\n    using eie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr3 = Cr3Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class GtprReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using gt = FieldModel<address, 8, 0x000000FF>;\n    using\
    \ psc = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using gtpr = GtprReg<BaseAddress\
    \ + 0x0018>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_USART1_H */\n"
  name: USART1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART2_H\n#define DRAL_STM32F411_USART2_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass usart2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40004400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cts = FieldModel<address, 9, 0x00000001>;\n    using\
    \ lbd = FieldModel<address, 8, 0x00000001>;\n    using txe = FieldModel<address,\
    \ 7, 0x00000001>;\n    using tc = FieldModel<address, 6, 0x00000001>;\n    using\
    \ rxne = FieldModel<address, 5, 0x00000001>;\n    using idle = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ore = FieldModel<address, 3, 0x00000001>;\n    using\
    \ nf = FieldModel<address, 2, 0x00000001>;\n    using fe = FieldModel<address,\
    \ 1, 0x00000001>;\n    using pe = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class DrReg: public RegisterModel<address>\n  {\n  public:\n   \
    \ using dr = FieldModel<address, 0, 0x000001FF>;\n  };\n\npublic:\n  using dr\
    \ = DrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class BrrReg: public RegisterModel<address>\n  {\n  public:\n    using div_mantissa\
    \ = FieldModel<address, 4, 0x00000FFF>;\n    using div_fraction = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using brr = BrrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using over8 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ue = FieldModel<address, 13, 0x00000001>;\n    using m = FieldModel<address,\
    \ 12, 0x00000001>;\n    using wake = FieldModel<address, 11, 0x00000001>;\n  \
    \  using pce = FieldModel<address, 10, 0x00000001>;\n    using ps = FieldModel<address,\
    \ 9, 0x00000001>;\n    using peie = FieldModel<address, 8, 0x00000001>;\n    using\
    \ txeie = FieldModel<address, 7, 0x00000001>;\n    using tcie = FieldModel<address,\
    \ 6, 0x00000001>;\n    using rxneie = FieldModel<address, 5, 0x00000001>;\n  \
    \  using idleie = FieldModel<address, 4, 0x00000001>;\n    using te = FieldModel<address,\
    \ 3, 0x00000001>;\n    using re = FieldModel<address, 2, 0x00000001>;\n    using\
    \ rwu = FieldModel<address, 1, 0x00000001>;\n    using sbk = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using linen = FieldModel<address, 14, 0x00000001>;\n    using\
    \ stop = FieldModel<address, 12, 0x00000003>;\n    using clken = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cpol = FieldModel<address, 10, 0x00000001>;\n  \
    \  using cpha = FieldModel<address, 9, 0x00000001>;\n    using lbcl = FieldModel<address,\
    \ 8, 0x00000001>;\n    using lbdie = FieldModel<address, 6, 0x00000001>;\n   \
    \ using lbdl = FieldModel<address, 5, 0x00000001>;\n    using add = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using onebit = FieldModel<address, 11, 0x00000001>;\n   \
    \ using ctsie = FieldModel<address, 10, 0x00000001>;\n    using ctse = FieldModel<address,\
    \ 9, 0x00000001>;\n    using rtse = FieldModel<address, 8, 0x00000001>;\n    using\
    \ dmat = FieldModel<address, 7, 0x00000001>;\n    using dmar = FieldModel<address,\
    \ 6, 0x00000001>;\n    using scen = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nack = FieldModel<address, 4, 0x00000001>;\n    using hdsel = FieldModel<address,\
    \ 3, 0x00000001>;\n    using irlp = FieldModel<address, 2, 0x00000001>;\n    using\
    \ iren = FieldModel<address, 1, 0x00000001>;\n    using eie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr3 = Cr3Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class GtprReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using gt = FieldModel<address, 8, 0x000000FF>;\n    using\
    \ psc = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using gtpr = GtprReg<BaseAddress\
    \ + 0x0018>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_USART2_H */\n"
  name: USART2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_USART6_H\n#define DRAL_STM32F411_USART6_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass usart6\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40011400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cts = FieldModel<address, 9, 0x00000001>;\n    using\
    \ lbd = FieldModel<address, 8, 0x00000001>;\n    using txe = FieldModel<address,\
    \ 7, 0x00000001>;\n    using tc = FieldModel<address, 6, 0x00000001>;\n    using\
    \ rxne = FieldModel<address, 5, 0x00000001>;\n    using idle = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ore = FieldModel<address, 3, 0x00000001>;\n    using\
    \ nf = FieldModel<address, 2, 0x00000001>;\n    using fe = FieldModel<address,\
    \ 1, 0x00000001>;\n    using pe = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class DrReg: public RegisterModel<address>\n  {\n  public:\n   \
    \ using dr = FieldModel<address, 0, 0x000001FF>;\n  };\n\npublic:\n  using dr\
    \ = DrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class BrrReg: public RegisterModel<address>\n  {\n  public:\n    using div_mantissa\
    \ = FieldModel<address, 4, 0x00000FFF>;\n    using div_fraction = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using brr = BrrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using over8 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ue = FieldModel<address, 13, 0x00000001>;\n    using m = FieldModel<address,\
    \ 12, 0x00000001>;\n    using wake = FieldModel<address, 11, 0x00000001>;\n  \
    \  using pce = FieldModel<address, 10, 0x00000001>;\n    using ps = FieldModel<address,\
    \ 9, 0x00000001>;\n    using peie = FieldModel<address, 8, 0x00000001>;\n    using\
    \ txeie = FieldModel<address, 7, 0x00000001>;\n    using tcie = FieldModel<address,\
    \ 6, 0x00000001>;\n    using rxneie = FieldModel<address, 5, 0x00000001>;\n  \
    \  using idleie = FieldModel<address, 4, 0x00000001>;\n    using te = FieldModel<address,\
    \ 3, 0x00000001>;\n    using re = FieldModel<address, 2, 0x00000001>;\n    using\
    \ rwu = FieldModel<address, 1, 0x00000001>;\n    using sbk = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using linen = FieldModel<address, 14, 0x00000001>;\n    using\
    \ stop = FieldModel<address, 12, 0x00000003>;\n    using clken = FieldModel<address,\
    \ 11, 0x00000001>;\n    using cpol = FieldModel<address, 10, 0x00000001>;\n  \
    \  using cpha = FieldModel<address, 9, 0x00000001>;\n    using lbcl = FieldModel<address,\
    \ 8, 0x00000001>;\n    using lbdie = FieldModel<address, 6, 0x00000001>;\n   \
    \ using lbdl = FieldModel<address, 5, 0x00000001>;\n    using add = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0010>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using onebit = FieldModel<address, 11, 0x00000001>;\n   \
    \ using ctsie = FieldModel<address, 10, 0x00000001>;\n    using ctse = FieldModel<address,\
    \ 9, 0x00000001>;\n    using rtse = FieldModel<address, 8, 0x00000001>;\n    using\
    \ dmat = FieldModel<address, 7, 0x00000001>;\n    using dmar = FieldModel<address,\
    \ 6, 0x00000001>;\n    using scen = FieldModel<address, 5, 0x00000001>;\n    using\
    \ nack = FieldModel<address, 4, 0x00000001>;\n    using hdsel = FieldModel<address,\
    \ 3, 0x00000001>;\n    using irlp = FieldModel<address, 2, 0x00000001>;\n    using\
    \ iren = FieldModel<address, 1, 0x00000001>;\n    using eie = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr3 = Cr3Reg<BaseAddress + 0x0014>;\n\
    \nprivate:\n  template <uint32_t address>\n  class GtprReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using gt = FieldModel<address, 8, 0x000000FF>;\n    using\
    \ psc = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n  using gtpr = GtprReg<BaseAddress\
    \ + 0x0018>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_USART6_H */\n"
  name: USART6
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_WWDG_H\n#define DRAL_STM32F411_WWDG_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass wwdg\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40002C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using wdga = FieldModel<address, 7, 0x00000001>;\n    using\
    \ t = FieldModel<address, 0, 0x0000007F>;\n  };\n\npublic:\n  using cr = CrReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class CfrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using ewi = FieldModel<address,\
    \ 9, 0x00000001>;\n    using wdgtb1 = FieldModel<address, 8, 0x00000001>;\n  \
    \  using wdgtb0 = FieldModel<address, 7, 0x00000001>;\n    using w = FieldModel<address,\
    \ 0, 0x0000007F>;\n  };\n\npublic:\n  using cfr = CfrReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ewif = FieldModel<address, 0, 0x00000001>;\n  };\n\n\
    public:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_WWDG_H\
    \ */\n"
  name: WWDG
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DMA2_H\n#define DRAL_STM32F411_DMA2_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass dma2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40026400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class LisrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tcif3 = FieldModel<address, 27, 0x00000001>;\n    using\
    \ htif3 = FieldModel<address, 26, 0x00000001>;\n    using teif3 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using dmeif3 = FieldModel<address, 24, 0x00000001>;\n\
    \    using feif3 = FieldModel<address, 22, 0x00000001>;\n    using tcif2 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using htif2 = FieldModel<address, 20, 0x00000001>;\n \
    \   using teif2 = FieldModel<address, 19, 0x00000001>;\n    using dmeif2 = FieldModel<address,\
    \ 18, 0x00000001>;\n    using feif2 = FieldModel<address, 16, 0x00000001>;\n \
    \   using tcif1 = FieldModel<address, 11, 0x00000001>;\n    using htif1 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using teif1 = FieldModel<address, 9, 0x00000001>;\n  \
    \  using dmeif1 = FieldModel<address, 8, 0x00000001>;\n    using feif1 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using tcif0 = FieldModel<address, 5, 0x00000001>;\n   \
    \ using htif0 = FieldModel<address, 4, 0x00000001>;\n    using teif0 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using dmeif0 = FieldModel<address, 2, 0x00000001>;\n  \
    \  using feif0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ lisr = LisrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class HisrReg: public RegisterModel<address>\n  {\n  public:\n    using tcif7\
    \ = FieldModel<address, 27, 0x00000001>;\n    using htif7 = FieldModel<address,\
    \ 26, 0x00000001>;\n    using teif7 = FieldModel<address, 25, 0x00000001>;\n \
    \   using dmeif7 = FieldModel<address, 24, 0x00000001>;\n    using feif7 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using tcif6 = FieldModel<address, 21, 0x00000001>;\n \
    \   using htif6 = FieldModel<address, 20, 0x00000001>;\n    using teif6 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dmeif6 = FieldModel<address, 18, 0x00000001>;\n\
    \    using feif6 = FieldModel<address, 16, 0x00000001>;\n    using tcif5 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using htif5 = FieldModel<address, 10, 0x00000001>;\n \
    \   using teif5 = FieldModel<address, 9, 0x00000001>;\n    using dmeif5 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using feif5 = FieldModel<address, 6, 0x00000001>;\n   \
    \ using tcif4 = FieldModel<address, 5, 0x00000001>;\n    using htif4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using teif4 = FieldModel<address, 3, 0x00000001>;\n   \
    \ using dmeif4 = FieldModel<address, 2, 0x00000001>;\n    using feif4 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using hisr = HisrReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class LifcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ctcif3 = FieldModel<address, 27, 0x00000001>;\n   \
    \ using chtif3 = FieldModel<address, 26, 0x00000001>;\n    using cteif3 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using cdmeif3 = FieldModel<address, 24, 0x00000001>;\n\
    \    using cfeif3 = FieldModel<address, 22, 0x00000001>;\n    using ctcif2 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using chtif2 = FieldModel<address, 20, 0x00000001>;\n\
    \    using cteif2 = FieldModel<address, 19, 0x00000001>;\n    using cdmeif2 =\
    \ FieldModel<address, 18, 0x00000001>;\n    using cfeif2 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using ctcif1 = FieldModel<address, 11, 0x00000001>;\n\
    \    using chtif1 = FieldModel<address, 10, 0x00000001>;\n    using cteif1 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using cdmeif1 = FieldModel<address, 8, 0x00000001>;\n \
    \   using cfeif1 = FieldModel<address, 6, 0x00000001>;\n    using ctcif0 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using chtif0 = FieldModel<address, 4, 0x00000001>;\n  \
    \  using cteif0 = FieldModel<address, 3, 0x00000001>;\n    using cdmeif0 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cfeif0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using lifcr = LifcrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class HifcrReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using ctcif7 = FieldModel<address, 27, 0x00000001>;\n    using\
    \ chtif7 = FieldModel<address, 26, 0x00000001>;\n    using cteif7 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using cdmeif7 = FieldModel<address, 24, 0x00000001>;\n\
    \    using cfeif7 = FieldModel<address, 22, 0x00000001>;\n    using ctcif6 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using chtif6 = FieldModel<address, 20, 0x00000001>;\n\
    \    using cteif6 = FieldModel<address, 19, 0x00000001>;\n    using cdmeif6 =\
    \ FieldModel<address, 18, 0x00000001>;\n    using cfeif6 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using ctcif5 = FieldModel<address, 11, 0x00000001>;\n\
    \    using chtif5 = FieldModel<address, 10, 0x00000001>;\n    using cteif5 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using cdmeif5 = FieldModel<address, 8, 0x00000001>;\n \
    \   using cfeif5 = FieldModel<address, 6, 0x00000001>;\n    using ctcif4 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using chtif4 = FieldModel<address, 4, 0x00000001>;\n  \
    \  using cteif4 = FieldModel<address, 3, 0x00000001>;\n    using cdmeif4 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cfeif4 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using hifcr = HifcrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S0crReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using chsel = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ct = FieldModel<address, 19, 0x00000001>;\n    using dbm = FieldModel<address,\
    \ 18, 0x00000001>;\n    using pl = FieldModel<address, 16, 0x00000003>;\n    using\
    \ pincos = FieldModel<address, 15, 0x00000001>;\n    using msize = FieldModel<address,\
    \ 13, 0x00000003>;\n    using psize = FieldModel<address, 11, 0x00000003>;\n \
    \   using minc = FieldModel<address, 10, 0x00000001>;\n    using pinc = FieldModel<address,\
    \ 9, 0x00000001>;\n    using circ = FieldModel<address, 8, 0x00000001>;\n    using\
    \ dir = FieldModel<address, 6, 0x00000003>;\n    using pfctrl = FieldModel<address,\
    \ 5, 0x00000001>;\n    using tcie = FieldModel<address, 4, 0x00000001>;\n    using\
    \ htie = FieldModel<address, 3, 0x00000001>;\n    using teie = FieldModel<address,\
    \ 2, 0x00000001>;\n    using dmeie = FieldModel<address, 1, 0x00000001>;\n   \
    \ using en = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using s0cr\
    \ = S0crReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S0ndtrReg: public RegisterModel<address>\n  {\n  public:\n    using ndt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using s0ndtr = S0ndtrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class S0parReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using pa = FieldModel<address, 0,\
    \ 0xFFFFFFFF>;\n  };\n\npublic:\n  using s0par = S0parReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S0m0arReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using s0m0ar = S0m0arReg<BaseAddress + 0x001C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S0m1arReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s0m1ar = S0m1arReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S0fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s0fcr\
    \ = S0fcrReg<BaseAddress + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S1crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s1cr = S1crReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S1ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s1ndtr = S1ndtrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S1parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s1par = S1parReg<BaseAddress + 0x0030>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S1m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s1m0ar = S1m0arReg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S1m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s1m1ar = S1m1arReg<BaseAddress + 0x0038>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S1fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s1fcr\
    \ = S1fcrReg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S2crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s2cr = S2crReg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S2ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s2ndtr = S2ndtrReg<BaseAddress + 0x0044>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S2parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s2par = S2parReg<BaseAddress + 0x0048>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S2m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s2m0ar = S2m0arReg<BaseAddress + 0x004C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S2m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s2m1ar = S2m1arReg<BaseAddress + 0x0050>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S2fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s2fcr\
    \ = S2fcrReg<BaseAddress + 0x0054>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S3crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s3cr = S3crReg<BaseAddress + 0x0058>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S3ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s3ndtr = S3ndtrReg<BaseAddress + 0x005C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S3parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s3par = S3parReg<BaseAddress + 0x0060>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S3m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s3m0ar = S3m0arReg<BaseAddress + 0x0064>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S3m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s3m1ar = S3m1arReg<BaseAddress + 0x0068>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S3fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s3fcr\
    \ = S3fcrReg<BaseAddress + 0x006C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S4crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s4cr = S4crReg<BaseAddress + 0x0070>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S4ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s4ndtr = S4ndtrReg<BaseAddress + 0x0074>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S4parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s4par = S4parReg<BaseAddress + 0x0078>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S4m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s4m0ar = S4m0arReg<BaseAddress + 0x007C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S4m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s4m1ar = S4m1arReg<BaseAddress + 0x0080>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S4fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s4fcr\
    \ = S4fcrReg<BaseAddress + 0x0084>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S5crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s5cr = S5crReg<BaseAddress + 0x0088>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S5ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s5ndtr = S5ndtrReg<BaseAddress + 0x008C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S5parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s5par = S5parReg<BaseAddress + 0x0090>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S5m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s5m0ar = S5m0arReg<BaseAddress + 0x0094>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S5m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s5m1ar = S5m1arReg<BaseAddress + 0x0098>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S5fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s5fcr\
    \ = S5fcrReg<BaseAddress + 0x009C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S6crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s6cr = S6crReg<BaseAddress + 0x00A0>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S6ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s6ndtr = S6ndtrReg<BaseAddress + 0x00A4>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S6parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s6par = S6parReg<BaseAddress + 0x00A8>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S6m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s6m0ar = S6m0arReg<BaseAddress + 0x00AC>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S6m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s6m1ar = S6m1arReg<BaseAddress + 0x00B0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S6fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s6fcr\
    \ = S6fcrReg<BaseAddress + 0x00B4>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S7crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s7cr = S7crReg<BaseAddress + 0x00B8>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S7ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s7ndtr = S7ndtrReg<BaseAddress + 0x00BC>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S7parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s7par = S7parReg<BaseAddress + 0x00C0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S7m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s7m0ar = S7m0arReg<BaseAddress + 0x00C4>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S7m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s7m1ar = S7m1arReg<BaseAddress + 0x00C8>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S7fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s7fcr\
    \ = S7fcrReg<BaseAddress + 0x00CC>;\nprivate:\n  template <uint32_t address, uint32_t\
    \ bankOffset>\n  class SxndtrBankReg: public RegisterBankModel<address, bankOffset>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF, bankOffset>;\n\
    \  };\n\npublic:\n  using sxndtr = SxndtrBankReg<BaseAddress + 0x0014, 0x0018>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class SxparBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using pa\
    \ = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n  };\n\npublic:\n  using\
    \ sxpar = SxparBankReg<BaseAddress + 0x0018, 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address, uint32_t bankOffset>\n  class Sxm0arBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using m0a = FieldModel<address, 0, 0xFFFFFFFF,\
    \ bankOffset>;\n  };\n\npublic:\n  using sxm0ar = Sxm0arBankReg<BaseAddress +\
    \ 0x001C, 0x0018>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n\
    \  class Sxm1arBankReg: public RegisterBankModel<address, bankOffset>\n  {\n \
    \ public:\n    using m1a = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n \
    \ };\n\npublic:\n  using sxm1ar = Sxm1arBankReg<BaseAddress + 0x0020, 0x0018>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class SxfcrBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using feie\
    \ = FieldModel<address, 7, 0x00000001, bankOffset>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007, bankOffset>;\n    using dmdis = FieldModel<address, 2, 0x00000001,\
    \ bankOffset>;\n    using fth = FieldModel<address, 0, 0x00000003, bankOffset>;\n\
    \  };\n\npublic:\n  using sxfcr = SxfcrBankReg<BaseAddress + 0x0024, 0x0018>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class SxcrBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007, bankOffset>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003, bankOffset>;\n    using pburst = FieldModel<address, 21, 0x00000003,\
    \ bankOffset>;\n    using ack = FieldModel<address, 20, 0x00000001, bankOffset>;\n\
    \    using ct = FieldModel<address, 19, 0x00000001, bankOffset>;\n    using dbm\
    \ = FieldModel<address, 18, 0x00000001, bankOffset>;\n    using pl = FieldModel<address,\
    \ 16, 0x00000003, bankOffset>;\n    using pincos = FieldModel<address, 15, 0x00000001,\
    \ bankOffset>;\n    using msize = FieldModel<address, 13, 0x00000003, bankOffset>;\n\
    \    using psize = FieldModel<address, 11, 0x00000003, bankOffset>;\n    using\
    \ minc = FieldModel<address, 10, 0x00000001, bankOffset>;\n    using pinc = FieldModel<address,\
    \ 9, 0x00000001, bankOffset>;\n    using circ = FieldModel<address, 8, 0x00000001,\
    \ bankOffset>;\n    using dir = FieldModel<address, 6, 0x00000003, bankOffset>;\n\
    \    using pfctrl = FieldModel<address, 5, 0x00000001, bankOffset>;\n    using\
    \ tcie = FieldModel<address, 4, 0x00000001, bankOffset>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001, bankOffset>;\n    using teie = FieldModel<address, 2, 0x00000001,\
    \ bankOffset>;\n    using dmeie = FieldModel<address, 1, 0x00000001, bankOffset>;\n\
    \    using en = FieldModel<address, 0, 0x00000001, bankOffset>;\n  };\n\npublic:\n\
    \  using sxcr = SxcrBankReg<BaseAddress + 0x0028, 0x0018>;\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_DMA2_H */\n"
  name: DMA2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_DMA1_H\n#define DRAL_STM32F411_DMA1_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass dma1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40026000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class LisrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tcif3 = FieldModel<address, 27, 0x00000001>;\n    using\
    \ htif3 = FieldModel<address, 26, 0x00000001>;\n    using teif3 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using dmeif3 = FieldModel<address, 24, 0x00000001>;\n\
    \    using feif3 = FieldModel<address, 22, 0x00000001>;\n    using tcif2 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using htif2 = FieldModel<address, 20, 0x00000001>;\n \
    \   using teif2 = FieldModel<address, 19, 0x00000001>;\n    using dmeif2 = FieldModel<address,\
    \ 18, 0x00000001>;\n    using feif2 = FieldModel<address, 16, 0x00000001>;\n \
    \   using tcif1 = FieldModel<address, 11, 0x00000001>;\n    using htif1 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using teif1 = FieldModel<address, 9, 0x00000001>;\n  \
    \  using dmeif1 = FieldModel<address, 8, 0x00000001>;\n    using feif1 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using tcif0 = FieldModel<address, 5, 0x00000001>;\n   \
    \ using htif0 = FieldModel<address, 4, 0x00000001>;\n    using teif0 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using dmeif0 = FieldModel<address, 2, 0x00000001>;\n  \
    \  using feif0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ lisr = LisrReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class HisrReg: public RegisterModel<address>\n  {\n  public:\n    using tcif7\
    \ = FieldModel<address, 27, 0x00000001>;\n    using htif7 = FieldModel<address,\
    \ 26, 0x00000001>;\n    using teif7 = FieldModel<address, 25, 0x00000001>;\n \
    \   using dmeif7 = FieldModel<address, 24, 0x00000001>;\n    using feif7 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using tcif6 = FieldModel<address, 21, 0x00000001>;\n \
    \   using htif6 = FieldModel<address, 20, 0x00000001>;\n    using teif6 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dmeif6 = FieldModel<address, 18, 0x00000001>;\n\
    \    using feif6 = FieldModel<address, 16, 0x00000001>;\n    using tcif5 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using htif5 = FieldModel<address, 10, 0x00000001>;\n \
    \   using teif5 = FieldModel<address, 9, 0x00000001>;\n    using dmeif5 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using feif5 = FieldModel<address, 6, 0x00000001>;\n   \
    \ using tcif4 = FieldModel<address, 5, 0x00000001>;\n    using htif4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using teif4 = FieldModel<address, 3, 0x00000001>;\n   \
    \ using dmeif4 = FieldModel<address, 2, 0x00000001>;\n    using feif4 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using hisr = HisrReg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class LifcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ctcif3 = FieldModel<address, 27, 0x00000001>;\n   \
    \ using chtif3 = FieldModel<address, 26, 0x00000001>;\n    using cteif3 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using cdmeif3 = FieldModel<address, 24, 0x00000001>;\n\
    \    using cfeif3 = FieldModel<address, 22, 0x00000001>;\n    using ctcif2 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using chtif2 = FieldModel<address, 20, 0x00000001>;\n\
    \    using cteif2 = FieldModel<address, 19, 0x00000001>;\n    using cdmeif2 =\
    \ FieldModel<address, 18, 0x00000001>;\n    using cfeif2 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using ctcif1 = FieldModel<address, 11, 0x00000001>;\n\
    \    using chtif1 = FieldModel<address, 10, 0x00000001>;\n    using cteif1 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using cdmeif1 = FieldModel<address, 8, 0x00000001>;\n \
    \   using cfeif1 = FieldModel<address, 6, 0x00000001>;\n    using ctcif0 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using chtif0 = FieldModel<address, 4, 0x00000001>;\n  \
    \  using cteif0 = FieldModel<address, 3, 0x00000001>;\n    using cdmeif0 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cfeif0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using lifcr = LifcrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class HifcrReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using ctcif7 = FieldModel<address, 27, 0x00000001>;\n    using\
    \ chtif7 = FieldModel<address, 26, 0x00000001>;\n    using cteif7 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using cdmeif7 = FieldModel<address, 24, 0x00000001>;\n\
    \    using cfeif7 = FieldModel<address, 22, 0x00000001>;\n    using ctcif6 = FieldModel<address,\
    \ 21, 0x00000001>;\n    using chtif6 = FieldModel<address, 20, 0x00000001>;\n\
    \    using cteif6 = FieldModel<address, 19, 0x00000001>;\n    using cdmeif6 =\
    \ FieldModel<address, 18, 0x00000001>;\n    using cfeif6 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using ctcif5 = FieldModel<address, 11, 0x00000001>;\n\
    \    using chtif5 = FieldModel<address, 10, 0x00000001>;\n    using cteif5 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using cdmeif5 = FieldModel<address, 8, 0x00000001>;\n \
    \   using cfeif5 = FieldModel<address, 6, 0x00000001>;\n    using ctcif4 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using chtif4 = FieldModel<address, 4, 0x00000001>;\n  \
    \  using cteif4 = FieldModel<address, 3, 0x00000001>;\n    using cdmeif4 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cfeif4 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using hifcr = HifcrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S0crReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using chsel = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ct = FieldModel<address, 19, 0x00000001>;\n    using dbm = FieldModel<address,\
    \ 18, 0x00000001>;\n    using pl = FieldModel<address, 16, 0x00000003>;\n    using\
    \ pincos = FieldModel<address, 15, 0x00000001>;\n    using msize = FieldModel<address,\
    \ 13, 0x00000003>;\n    using psize = FieldModel<address, 11, 0x00000003>;\n \
    \   using minc = FieldModel<address, 10, 0x00000001>;\n    using pinc = FieldModel<address,\
    \ 9, 0x00000001>;\n    using circ = FieldModel<address, 8, 0x00000001>;\n    using\
    \ dir = FieldModel<address, 6, 0x00000003>;\n    using pfctrl = FieldModel<address,\
    \ 5, 0x00000001>;\n    using tcie = FieldModel<address, 4, 0x00000001>;\n    using\
    \ htie = FieldModel<address, 3, 0x00000001>;\n    using teie = FieldModel<address,\
    \ 2, 0x00000001>;\n    using dmeie = FieldModel<address, 1, 0x00000001>;\n   \
    \ using en = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using s0cr\
    \ = S0crReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S0ndtrReg: public RegisterModel<address>\n  {\n  public:\n    using ndt\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using s0ndtr = S0ndtrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class S0parReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using pa = FieldModel<address, 0,\
    \ 0xFFFFFFFF>;\n  };\n\npublic:\n  using s0par = S0parReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S0m0arReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\n\
    public:\n  using s0m0ar = S0m0arReg<BaseAddress + 0x001C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S0m1arReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s0m1ar = S0m1arReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S0fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s0fcr\
    \ = S0fcrReg<BaseAddress + 0x0024>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S1crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s1cr = S1crReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S1ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s1ndtr = S1ndtrReg<BaseAddress + 0x002C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S1parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s1par = S1parReg<BaseAddress + 0x0030>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S1m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s1m0ar = S1m0arReg<BaseAddress + 0x0034>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S1m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s1m1ar = S1m1arReg<BaseAddress + 0x0038>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S1fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s1fcr\
    \ = S1fcrReg<BaseAddress + 0x003C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S2crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s2cr = S2crReg<BaseAddress + 0x0040>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S2ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s2ndtr = S2ndtrReg<BaseAddress + 0x0044>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S2parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s2par = S2parReg<BaseAddress + 0x0048>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S2m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s2m0ar = S2m0arReg<BaseAddress + 0x004C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S2m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s2m1ar = S2m1arReg<BaseAddress + 0x0050>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S2fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s2fcr\
    \ = S2fcrReg<BaseAddress + 0x0054>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S3crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s3cr = S3crReg<BaseAddress + 0x0058>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S3ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s3ndtr = S3ndtrReg<BaseAddress + 0x005C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S3parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s3par = S3parReg<BaseAddress + 0x0060>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S3m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s3m0ar = S3m0arReg<BaseAddress + 0x0064>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S3m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s3m1ar = S3m1arReg<BaseAddress + 0x0068>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S3fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s3fcr\
    \ = S3fcrReg<BaseAddress + 0x006C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S4crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s4cr = S4crReg<BaseAddress + 0x0070>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S4ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s4ndtr = S4ndtrReg<BaseAddress + 0x0074>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S4parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s4par = S4parReg<BaseAddress + 0x0078>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S4m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s4m0ar = S4m0arReg<BaseAddress + 0x007C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S4m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s4m1ar = S4m1arReg<BaseAddress + 0x0080>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S4fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s4fcr\
    \ = S4fcrReg<BaseAddress + 0x0084>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S5crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s5cr = S5crReg<BaseAddress + 0x0088>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S5ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s5ndtr = S5ndtrReg<BaseAddress + 0x008C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S5parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s5par = S5parReg<BaseAddress + 0x0090>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S5m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s5m0ar = S5m0arReg<BaseAddress + 0x0094>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S5m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s5m1ar = S5m1arReg<BaseAddress + 0x0098>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S5fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s5fcr\
    \ = S5fcrReg<BaseAddress + 0x009C>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S6crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s6cr = S6crReg<BaseAddress + 0x00A0>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S6ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s6ndtr = S6ndtrReg<BaseAddress + 0x00A4>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S6parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s6par = S6parReg<BaseAddress + 0x00A8>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S6m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s6m0ar = S6m0arReg<BaseAddress + 0x00AC>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S6m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s6m1ar = S6m1arReg<BaseAddress + 0x00B0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S6fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s6fcr\
    \ = S6fcrReg<BaseAddress + 0x00B4>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class S7crReg: public RegisterModel<address>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003>;\n    using pburst = FieldModel<address, 21, 0x00000003>;\n\
    \    using ack = FieldModel<address, 20, 0x00000001>;\n    using ct = FieldModel<address,\
    \ 19, 0x00000001>;\n    using dbm = FieldModel<address, 18, 0x00000001>;\n   \
    \ using pl = FieldModel<address, 16, 0x00000003>;\n    using pincos = FieldModel<address,\
    \ 15, 0x00000001>;\n    using msize = FieldModel<address, 13, 0x00000003>;\n \
    \   using psize = FieldModel<address, 11, 0x00000003>;\n    using minc = FieldModel<address,\
    \ 10, 0x00000001>;\n    using pinc = FieldModel<address, 9, 0x00000001>;\n   \
    \ using circ = FieldModel<address, 8, 0x00000001>;\n    using dir = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pfctrl = FieldModel<address, 5, 0x00000001>;\n  \
    \  using tcie = FieldModel<address, 4, 0x00000001>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001>;\n    using teie = FieldModel<address, 2, 0x00000001>;\n    using\
    \ dmeie = FieldModel<address, 1, 0x00000001>;\n    using en = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using s7cr = S7crReg<BaseAddress + 0x00B8>;\n\
    \nprivate:\n  template <uint32_t address>\n  class S7ndtrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using s7ndtr = S7ndtrReg<BaseAddress + 0x00BC>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class S7parReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pa = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using s7par = S7parReg<BaseAddress + 0x00C0>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S7m0arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m0a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s7m0ar = S7m0arReg<BaseAddress + 0x00C4>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S7m1arReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using m1a = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ s7m1ar = S7m1arReg<BaseAddress + 0x00C8>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class S7fcrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using feie = FieldModel<address, 7, 0x00000001>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007>;\n    using dmdis = FieldModel<address, 2, 0x00000001>;\n   \
    \ using fth = FieldModel<address, 0, 0x00000003>;\n  };\n\npublic:\n  using s7fcr\
    \ = S7fcrReg<BaseAddress + 0x00CC>;\nprivate:\n  template <uint32_t address, uint32_t\
    \ bankOffset>\n  class SxndtrBankReg: public RegisterBankModel<address, bankOffset>\n\
    \  {\n  public:\n    using ndt = FieldModel<address, 0, 0x0000FFFF, bankOffset>;\n\
    \  };\n\npublic:\n  using sxndtr = SxndtrBankReg<BaseAddress + 0x0014, 0x0018>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class SxparBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using pa\
    \ = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n  };\n\npublic:\n  using\
    \ sxpar = SxparBankReg<BaseAddress + 0x0018, 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address, uint32_t bankOffset>\n  class Sxm0arBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using m0a = FieldModel<address, 0, 0xFFFFFFFF,\
    \ bankOffset>;\n  };\n\npublic:\n  using sxm0ar = Sxm0arBankReg<BaseAddress +\
    \ 0x001C, 0x0018>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n\
    \  class Sxm1arBankReg: public RegisterBankModel<address, bankOffset>\n  {\n \
    \ public:\n    using m1a = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n \
    \ };\n\npublic:\n  using sxm1ar = Sxm1arBankReg<BaseAddress + 0x0020, 0x0018>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class SxfcrBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using feie\
    \ = FieldModel<address, 7, 0x00000001, bankOffset>;\n    using fs = FieldModel<address,\
    \ 3, 0x00000007, bankOffset>;\n    using dmdis = FieldModel<address, 2, 0x00000001,\
    \ bankOffset>;\n    using fth = FieldModel<address, 0, 0x00000003, bankOffset>;\n\
    \  };\n\npublic:\n  using sxfcr = SxfcrBankReg<BaseAddress + 0x0024, 0x0018>;\n\
    \nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n  class SxcrBankReg:\
    \ public RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using chsel\
    \ = FieldModel<address, 25, 0x00000007, bankOffset>;\n    using mburst = FieldModel<address,\
    \ 23, 0x00000003, bankOffset>;\n    using pburst = FieldModel<address, 21, 0x00000003,\
    \ bankOffset>;\n    using ack = FieldModel<address, 20, 0x00000001, bankOffset>;\n\
    \    using ct = FieldModel<address, 19, 0x00000001, bankOffset>;\n    using dbm\
    \ = FieldModel<address, 18, 0x00000001, bankOffset>;\n    using pl = FieldModel<address,\
    \ 16, 0x00000003, bankOffset>;\n    using pincos = FieldModel<address, 15, 0x00000001,\
    \ bankOffset>;\n    using msize = FieldModel<address, 13, 0x00000003, bankOffset>;\n\
    \    using psize = FieldModel<address, 11, 0x00000003, bankOffset>;\n    using\
    \ minc = FieldModel<address, 10, 0x00000001, bankOffset>;\n    using pinc = FieldModel<address,\
    \ 9, 0x00000001, bankOffset>;\n    using circ = FieldModel<address, 8, 0x00000001,\
    \ bankOffset>;\n    using dir = FieldModel<address, 6, 0x00000003, bankOffset>;\n\
    \    using pfctrl = FieldModel<address, 5, 0x00000001, bankOffset>;\n    using\
    \ tcie = FieldModel<address, 4, 0x00000001, bankOffset>;\n    using htie = FieldModel<address,\
    \ 3, 0x00000001, bankOffset>;\n    using teie = FieldModel<address, 2, 0x00000001,\
    \ bankOffset>;\n    using dmeie = FieldModel<address, 1, 0x00000001, bankOffset>;\n\
    \    using en = FieldModel<address, 0, 0x00000001, bankOffset>;\n  };\n\npublic:\n\
    \  using sxcr = SxcrBankReg<BaseAddress + 0x0028, 0x0018>;\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_DMA1_H */\n"
  name: DMA1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOH_H\n#define DRAL_STM32F411_GPIOH_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioh\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40021C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ModerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using moder14 = FieldModel<address, 28, 0x00000003>;\n    using moder13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using moder12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using moder11 = FieldModel<address, 22, 0x00000003>;\n    using moder10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using moder9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using moder8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using moder7 = FieldModel<address, 14, 0x00000003>;\n    using moder6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using moder5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using moder4 = FieldModel<address, 8, 0x00000003>;\n    using moder3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using moder2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using moder1 = FieldModel<address, 2, 0x00000003>;\n    using moder0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using moder = ModerReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OtyperReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ot15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ot14 = FieldModel<address, 14, 0x00000001>;\n    using ot13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using ot12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using ot11 = FieldModel<address, 11, 0x00000001>;\n    using ot10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ot9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ot8 = FieldModel<address, 8, 0x00000001>;\n    using ot7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ot6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ ot5 = FieldModel<address, 5, 0x00000001>;\n    using ot4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ot3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ot2 = FieldModel<address, 2, 0x00000001>;\n    using ot1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ot0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OspeedrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using ospeedr15 = FieldModel<address, 30, 0x00000003>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 0x00000003>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using ospeedr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using ospeedr11 = FieldModel<address, 22, 0x00000003>;\n    using ospeedr10\
    \ = FieldModel<address, 20, 0x00000003>;\n    using ospeedr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using ospeedr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using ospeedr7 = FieldModel<address, 14, 0x00000003>;\n    using ospeedr6\
    \ = FieldModel<address, 12, 0x00000003>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 0x00000003>;\n    using ospeedr4 = FieldModel<address, 8, 0x00000003>;\n\
    \    using ospeedr3 = FieldModel<address, 6, 0x00000003>;\n    using ospeedr2\
    \ = FieldModel<address, 4, 0x00000003>;\n    using ospeedr1 = FieldModel<address,\
    \ 2, 0x00000003>;\n    using ospeedr0 = FieldModel<address, 0, 0x00000003>;\n\
    \  };\n\npublic:\n  using ospeedr = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PupdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pupdr15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using pupdr14 = FieldModel<address, 28, 0x00000003>;\n    using pupdr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using pupdr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using pupdr11 = FieldModel<address, 22, 0x00000003>;\n    using pupdr10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using pupdr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using pupdr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using pupdr7 = FieldModel<address, 14, 0x00000003>;\n    using pupdr6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using pupdr5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using pupdr4 = FieldModel<address, 8, 0x00000003>;\n    using pupdr3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pupdr2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using pupdr1 = FieldModel<address, 2, 0x00000003>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using pupdr = PupdrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class IdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using idr15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ idr14 = FieldModel<address, 14, 0x00000001>;\n    using idr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using idr12 = FieldModel<address, 12, 0x00000001>;\n \
    \   using idr11 = FieldModel<address, 11, 0x00000001>;\n    using idr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using idr9 = FieldModel<address, 9, 0x00000001>;\n   \
    \ using idr8 = FieldModel<address, 8, 0x00000001>;\n    using idr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using idr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ idr5 = FieldModel<address, 5, 0x00000001>;\n    using idr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using idr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ idr2 = FieldModel<address, 2, 0x00000001>;\n    using idr1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using idr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OdrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using odr15 = FieldModel<address, 15, 0x00000001>;\n    using odr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using odr13 = FieldModel<address, 13, 0x00000001>;\n \
    \   using odr12 = FieldModel<address, 12, 0x00000001>;\n    using odr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using odr10 = FieldModel<address, 10, 0x00000001>;\n \
    \   using odr9 = FieldModel<address, 9, 0x00000001>;\n    using odr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using odr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ odr6 = FieldModel<address, 6, 0x00000001>;\n    using odr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using odr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ odr3 = FieldModel<address, 3, 0x00000001>;\n    using odr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using odr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ odr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class BsrrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using br15 = FieldModel<address,\
    \ 31, 0x00000001>;\n    using br14 = FieldModel<address, 30, 0x00000001>;\n  \
    \  using br13 = FieldModel<address, 29, 0x00000001>;\n    using br12 = FieldModel<address,\
    \ 28, 0x00000001>;\n    using br11 = FieldModel<address, 27, 0x00000001>;\n  \
    \  using br10 = FieldModel<address, 26, 0x00000001>;\n    using br9 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using br8 = FieldModel<address, 24, 0x00000001>;\n   \
    \ using br7 = FieldModel<address, 23, 0x00000001>;\n    using br6 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using br5 = FieldModel<address, 21, 0x00000001>;\n   \
    \ using br4 = FieldModel<address, 20, 0x00000001>;\n    using br3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using br2 = FieldModel<address, 18, 0x00000001>;\n   \
    \ using br1 = FieldModel<address, 17, 0x00000001>;\n    using br0 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using bs15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using bs14 = FieldModel<address, 14, 0x00000001>;\n    using bs13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using bs12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using bs11 = FieldModel<address, 11, 0x00000001>;\n    using bs10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using bs9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ bs8 = FieldModel<address, 8, 0x00000001>;\n    using bs7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bs6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bs5 = FieldModel<address, 5, 0x00000001>;\n    using bs4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using bs3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ bs2 = FieldModel<address, 2, 0x00000001>;\n    using bs1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using bs0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class LckrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using lckk = FieldModel<address, 16, 0x00000001>;\n    using lck15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using lck14 = FieldModel<address, 14, 0x00000001>;\n \
    \   using lck13 = FieldModel<address, 13, 0x00000001>;\n    using lck12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using lck11 = FieldModel<address, 11, 0x00000001>;\n \
    \   using lck10 = FieldModel<address, 10, 0x00000001>;\n    using lck9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using lck8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ lck7 = FieldModel<address, 7, 0x00000001>;\n    using lck6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using lck5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ lck4 = FieldModel<address, 4, 0x00000001>;\n    using lck3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using lck2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ lck1 = FieldModel<address, 1, 0x00000001>;\n    using lck0 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using lckr = LckrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AfrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using afrl7 = FieldModel<address, 28, 0x0000000F>;\n    using\
    \ afrl6 = FieldModel<address, 24, 0x0000000F>;\n    using afrl5 = FieldModel<address,\
    \ 20, 0x0000000F>;\n    using afrl4 = FieldModel<address, 16, 0x0000000F>;\n \
    \   using afrl3 = FieldModel<address, 12, 0x0000000F>;\n    using afrl2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using afrl1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using afrl0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfrhReg: public RegisterModel<address>\n  {\n  public:\n    using afrh15\
    \ = FieldModel<address, 28, 0x0000000F>;\n    using afrh14 = FieldModel<address,\
    \ 24, 0x0000000F>;\n    using afrh13 = FieldModel<address, 20, 0x0000000F>;\n\
    \    using afrh12 = FieldModel<address, 16, 0x0000000F>;\n    using afrh11 = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using afrh10 = FieldModel<address, 8, 0x0000000F>;\n \
    \   using afrh9 = FieldModel<address, 4, 0x0000000F>;\n    using afrh8 = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOH_H */\n"
  name: GPIOH
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOE_H\n#define DRAL_STM32F411_GPIOE_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioe\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40021000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ModerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using moder14 = FieldModel<address, 28, 0x00000003>;\n    using moder13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using moder12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using moder11 = FieldModel<address, 22, 0x00000003>;\n    using moder10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using moder9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using moder8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using moder7 = FieldModel<address, 14, 0x00000003>;\n    using moder6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using moder5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using moder4 = FieldModel<address, 8, 0x00000003>;\n    using moder3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using moder2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using moder1 = FieldModel<address, 2, 0x00000003>;\n    using moder0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using moder = ModerReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OtyperReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ot15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ot14 = FieldModel<address, 14, 0x00000001>;\n    using ot13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using ot12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using ot11 = FieldModel<address, 11, 0x00000001>;\n    using ot10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ot9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ot8 = FieldModel<address, 8, 0x00000001>;\n    using ot7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ot6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ ot5 = FieldModel<address, 5, 0x00000001>;\n    using ot4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ot3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ot2 = FieldModel<address, 2, 0x00000001>;\n    using ot1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ot0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OspeedrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using ospeedr15 = FieldModel<address, 30, 0x00000003>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 0x00000003>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using ospeedr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using ospeedr11 = FieldModel<address, 22, 0x00000003>;\n    using ospeedr10\
    \ = FieldModel<address, 20, 0x00000003>;\n    using ospeedr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using ospeedr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using ospeedr7 = FieldModel<address, 14, 0x00000003>;\n    using ospeedr6\
    \ = FieldModel<address, 12, 0x00000003>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 0x00000003>;\n    using ospeedr4 = FieldModel<address, 8, 0x00000003>;\n\
    \    using ospeedr3 = FieldModel<address, 6, 0x00000003>;\n    using ospeedr2\
    \ = FieldModel<address, 4, 0x00000003>;\n    using ospeedr1 = FieldModel<address,\
    \ 2, 0x00000003>;\n    using ospeedr0 = FieldModel<address, 0, 0x00000003>;\n\
    \  };\n\npublic:\n  using ospeedr = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PupdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pupdr15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using pupdr14 = FieldModel<address, 28, 0x00000003>;\n    using pupdr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using pupdr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using pupdr11 = FieldModel<address, 22, 0x00000003>;\n    using pupdr10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using pupdr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using pupdr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using pupdr7 = FieldModel<address, 14, 0x00000003>;\n    using pupdr6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using pupdr5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using pupdr4 = FieldModel<address, 8, 0x00000003>;\n    using pupdr3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pupdr2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using pupdr1 = FieldModel<address, 2, 0x00000003>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using pupdr = PupdrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class IdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using idr15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ idr14 = FieldModel<address, 14, 0x00000001>;\n    using idr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using idr12 = FieldModel<address, 12, 0x00000001>;\n \
    \   using idr11 = FieldModel<address, 11, 0x00000001>;\n    using idr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using idr9 = FieldModel<address, 9, 0x00000001>;\n   \
    \ using idr8 = FieldModel<address, 8, 0x00000001>;\n    using idr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using idr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ idr5 = FieldModel<address, 5, 0x00000001>;\n    using idr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using idr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ idr2 = FieldModel<address, 2, 0x00000001>;\n    using idr1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using idr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OdrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using odr15 = FieldModel<address, 15, 0x00000001>;\n    using odr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using odr13 = FieldModel<address, 13, 0x00000001>;\n \
    \   using odr12 = FieldModel<address, 12, 0x00000001>;\n    using odr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using odr10 = FieldModel<address, 10, 0x00000001>;\n \
    \   using odr9 = FieldModel<address, 9, 0x00000001>;\n    using odr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using odr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ odr6 = FieldModel<address, 6, 0x00000001>;\n    using odr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using odr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ odr3 = FieldModel<address, 3, 0x00000001>;\n    using odr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using odr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ odr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class BsrrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using br15 = FieldModel<address,\
    \ 31, 0x00000001>;\n    using br14 = FieldModel<address, 30, 0x00000001>;\n  \
    \  using br13 = FieldModel<address, 29, 0x00000001>;\n    using br12 = FieldModel<address,\
    \ 28, 0x00000001>;\n    using br11 = FieldModel<address, 27, 0x00000001>;\n  \
    \  using br10 = FieldModel<address, 26, 0x00000001>;\n    using br9 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using br8 = FieldModel<address, 24, 0x00000001>;\n   \
    \ using br7 = FieldModel<address, 23, 0x00000001>;\n    using br6 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using br5 = FieldModel<address, 21, 0x00000001>;\n   \
    \ using br4 = FieldModel<address, 20, 0x00000001>;\n    using br3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using br2 = FieldModel<address, 18, 0x00000001>;\n   \
    \ using br1 = FieldModel<address, 17, 0x00000001>;\n    using br0 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using bs15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using bs14 = FieldModel<address, 14, 0x00000001>;\n    using bs13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using bs12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using bs11 = FieldModel<address, 11, 0x00000001>;\n    using bs10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using bs9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ bs8 = FieldModel<address, 8, 0x00000001>;\n    using bs7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bs6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bs5 = FieldModel<address, 5, 0x00000001>;\n    using bs4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using bs3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ bs2 = FieldModel<address, 2, 0x00000001>;\n    using bs1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using bs0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class LckrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using lckk = FieldModel<address, 16, 0x00000001>;\n    using lck15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using lck14 = FieldModel<address, 14, 0x00000001>;\n \
    \   using lck13 = FieldModel<address, 13, 0x00000001>;\n    using lck12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using lck11 = FieldModel<address, 11, 0x00000001>;\n \
    \   using lck10 = FieldModel<address, 10, 0x00000001>;\n    using lck9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using lck8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ lck7 = FieldModel<address, 7, 0x00000001>;\n    using lck6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using lck5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ lck4 = FieldModel<address, 4, 0x00000001>;\n    using lck3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using lck2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ lck1 = FieldModel<address, 1, 0x00000001>;\n    using lck0 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using lckr = LckrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AfrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using afrl7 = FieldModel<address, 28, 0x0000000F>;\n    using\
    \ afrl6 = FieldModel<address, 24, 0x0000000F>;\n    using afrl5 = FieldModel<address,\
    \ 20, 0x0000000F>;\n    using afrl4 = FieldModel<address, 16, 0x0000000F>;\n \
    \   using afrl3 = FieldModel<address, 12, 0x0000000F>;\n    using afrl2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using afrl1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using afrl0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfrhReg: public RegisterModel<address>\n  {\n  public:\n    using afrh15\
    \ = FieldModel<address, 28, 0x0000000F>;\n    using afrh14 = FieldModel<address,\
    \ 24, 0x0000000F>;\n    using afrh13 = FieldModel<address, 20, 0x0000000F>;\n\
    \    using afrh12 = FieldModel<address, 16, 0x0000000F>;\n    using afrh11 = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using afrh10 = FieldModel<address, 8, 0x0000000F>;\n \
    \   using afrh9 = FieldModel<address, 4, 0x0000000F>;\n    using afrh8 = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOE_H */\n"
  name: GPIOE
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOD_H\n#define DRAL_STM32F411_GPIOD_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpiod\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ModerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using moder14 = FieldModel<address, 28, 0x00000003>;\n    using moder13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using moder12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using moder11 = FieldModel<address, 22, 0x00000003>;\n    using moder10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using moder9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using moder8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using moder7 = FieldModel<address, 14, 0x00000003>;\n    using moder6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using moder5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using moder4 = FieldModel<address, 8, 0x00000003>;\n    using moder3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using moder2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using moder1 = FieldModel<address, 2, 0x00000003>;\n    using moder0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using moder = ModerReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OtyperReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ot15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ot14 = FieldModel<address, 14, 0x00000001>;\n    using ot13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using ot12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using ot11 = FieldModel<address, 11, 0x00000001>;\n    using ot10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ot9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ot8 = FieldModel<address, 8, 0x00000001>;\n    using ot7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ot6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ ot5 = FieldModel<address, 5, 0x00000001>;\n    using ot4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ot3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ot2 = FieldModel<address, 2, 0x00000001>;\n    using ot1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ot0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OspeedrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using ospeedr15 = FieldModel<address, 30, 0x00000003>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 0x00000003>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using ospeedr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using ospeedr11 = FieldModel<address, 22, 0x00000003>;\n    using ospeedr10\
    \ = FieldModel<address, 20, 0x00000003>;\n    using ospeedr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using ospeedr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using ospeedr7 = FieldModel<address, 14, 0x00000003>;\n    using ospeedr6\
    \ = FieldModel<address, 12, 0x00000003>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 0x00000003>;\n    using ospeedr4 = FieldModel<address, 8, 0x00000003>;\n\
    \    using ospeedr3 = FieldModel<address, 6, 0x00000003>;\n    using ospeedr2\
    \ = FieldModel<address, 4, 0x00000003>;\n    using ospeedr1 = FieldModel<address,\
    \ 2, 0x00000003>;\n    using ospeedr0 = FieldModel<address, 0, 0x00000003>;\n\
    \  };\n\npublic:\n  using ospeedr = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PupdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pupdr15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using pupdr14 = FieldModel<address, 28, 0x00000003>;\n    using pupdr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using pupdr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using pupdr11 = FieldModel<address, 22, 0x00000003>;\n    using pupdr10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using pupdr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using pupdr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using pupdr7 = FieldModel<address, 14, 0x00000003>;\n    using pupdr6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using pupdr5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using pupdr4 = FieldModel<address, 8, 0x00000003>;\n    using pupdr3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pupdr2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using pupdr1 = FieldModel<address, 2, 0x00000003>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using pupdr = PupdrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class IdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using idr15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ idr14 = FieldModel<address, 14, 0x00000001>;\n    using idr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using idr12 = FieldModel<address, 12, 0x00000001>;\n \
    \   using idr11 = FieldModel<address, 11, 0x00000001>;\n    using idr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using idr9 = FieldModel<address, 9, 0x00000001>;\n   \
    \ using idr8 = FieldModel<address, 8, 0x00000001>;\n    using idr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using idr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ idr5 = FieldModel<address, 5, 0x00000001>;\n    using idr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using idr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ idr2 = FieldModel<address, 2, 0x00000001>;\n    using idr1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using idr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OdrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using odr15 = FieldModel<address, 15, 0x00000001>;\n    using odr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using odr13 = FieldModel<address, 13, 0x00000001>;\n \
    \   using odr12 = FieldModel<address, 12, 0x00000001>;\n    using odr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using odr10 = FieldModel<address, 10, 0x00000001>;\n \
    \   using odr9 = FieldModel<address, 9, 0x00000001>;\n    using odr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using odr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ odr6 = FieldModel<address, 6, 0x00000001>;\n    using odr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using odr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ odr3 = FieldModel<address, 3, 0x00000001>;\n    using odr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using odr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ odr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class BsrrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using br15 = FieldModel<address,\
    \ 31, 0x00000001>;\n    using br14 = FieldModel<address, 30, 0x00000001>;\n  \
    \  using br13 = FieldModel<address, 29, 0x00000001>;\n    using br12 = FieldModel<address,\
    \ 28, 0x00000001>;\n    using br11 = FieldModel<address, 27, 0x00000001>;\n  \
    \  using br10 = FieldModel<address, 26, 0x00000001>;\n    using br9 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using br8 = FieldModel<address, 24, 0x00000001>;\n   \
    \ using br7 = FieldModel<address, 23, 0x00000001>;\n    using br6 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using br5 = FieldModel<address, 21, 0x00000001>;\n   \
    \ using br4 = FieldModel<address, 20, 0x00000001>;\n    using br3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using br2 = FieldModel<address, 18, 0x00000001>;\n   \
    \ using br1 = FieldModel<address, 17, 0x00000001>;\n    using br0 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using bs15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using bs14 = FieldModel<address, 14, 0x00000001>;\n    using bs13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using bs12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using bs11 = FieldModel<address, 11, 0x00000001>;\n    using bs10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using bs9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ bs8 = FieldModel<address, 8, 0x00000001>;\n    using bs7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bs6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bs5 = FieldModel<address, 5, 0x00000001>;\n    using bs4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using bs3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ bs2 = FieldModel<address, 2, 0x00000001>;\n    using bs1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using bs0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class LckrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using lckk = FieldModel<address, 16, 0x00000001>;\n    using lck15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using lck14 = FieldModel<address, 14, 0x00000001>;\n \
    \   using lck13 = FieldModel<address, 13, 0x00000001>;\n    using lck12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using lck11 = FieldModel<address, 11, 0x00000001>;\n \
    \   using lck10 = FieldModel<address, 10, 0x00000001>;\n    using lck9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using lck8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ lck7 = FieldModel<address, 7, 0x00000001>;\n    using lck6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using lck5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ lck4 = FieldModel<address, 4, 0x00000001>;\n    using lck3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using lck2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ lck1 = FieldModel<address, 1, 0x00000001>;\n    using lck0 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using lckr = LckrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AfrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using afrl7 = FieldModel<address, 28, 0x0000000F>;\n    using\
    \ afrl6 = FieldModel<address, 24, 0x0000000F>;\n    using afrl5 = FieldModel<address,\
    \ 20, 0x0000000F>;\n    using afrl4 = FieldModel<address, 16, 0x0000000F>;\n \
    \   using afrl3 = FieldModel<address, 12, 0x0000000F>;\n    using afrl2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using afrl1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using afrl0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfrhReg: public RegisterModel<address>\n  {\n  public:\n    using afrh15\
    \ = FieldModel<address, 28, 0x0000000F>;\n    using afrh14 = FieldModel<address,\
    \ 24, 0x0000000F>;\n    using afrh13 = FieldModel<address, 20, 0x0000000F>;\n\
    \    using afrh12 = FieldModel<address, 16, 0x0000000F>;\n    using afrh11 = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using afrh10 = FieldModel<address, 8, 0x0000000F>;\n \
    \   using afrh9 = FieldModel<address, 4, 0x0000000F>;\n    using afrh8 = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOD_H */\n"
  name: GPIOD
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOC_H\n#define DRAL_STM32F411_GPIOC_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioc\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ModerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using moder14 = FieldModel<address, 28, 0x00000003>;\n    using moder13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using moder12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using moder11 = FieldModel<address, 22, 0x00000003>;\n    using moder10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using moder9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using moder8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using moder7 = FieldModel<address, 14, 0x00000003>;\n    using moder6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using moder5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using moder4 = FieldModel<address, 8, 0x00000003>;\n    using moder3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using moder2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using moder1 = FieldModel<address, 2, 0x00000003>;\n    using moder0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using moder = ModerReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OtyperReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ot15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ot14 = FieldModel<address, 14, 0x00000001>;\n    using ot13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using ot12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using ot11 = FieldModel<address, 11, 0x00000001>;\n    using ot10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ot9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ot8 = FieldModel<address, 8, 0x00000001>;\n    using ot7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ot6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ ot5 = FieldModel<address, 5, 0x00000001>;\n    using ot4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ot3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ot2 = FieldModel<address, 2, 0x00000001>;\n    using ot1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ot0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OspeedrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using ospeedr15 = FieldModel<address, 30, 0x00000003>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 0x00000003>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using ospeedr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using ospeedr11 = FieldModel<address, 22, 0x00000003>;\n    using ospeedr10\
    \ = FieldModel<address, 20, 0x00000003>;\n    using ospeedr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using ospeedr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using ospeedr7 = FieldModel<address, 14, 0x00000003>;\n    using ospeedr6\
    \ = FieldModel<address, 12, 0x00000003>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 0x00000003>;\n    using ospeedr4 = FieldModel<address, 8, 0x00000003>;\n\
    \    using ospeedr3 = FieldModel<address, 6, 0x00000003>;\n    using ospeedr2\
    \ = FieldModel<address, 4, 0x00000003>;\n    using ospeedr1 = FieldModel<address,\
    \ 2, 0x00000003>;\n    using ospeedr0 = FieldModel<address, 0, 0x00000003>;\n\
    \  };\n\npublic:\n  using ospeedr = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PupdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pupdr15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using pupdr14 = FieldModel<address, 28, 0x00000003>;\n    using pupdr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using pupdr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using pupdr11 = FieldModel<address, 22, 0x00000003>;\n    using pupdr10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using pupdr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using pupdr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using pupdr7 = FieldModel<address, 14, 0x00000003>;\n    using pupdr6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using pupdr5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using pupdr4 = FieldModel<address, 8, 0x00000003>;\n    using pupdr3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pupdr2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using pupdr1 = FieldModel<address, 2, 0x00000003>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using pupdr = PupdrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class IdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using idr15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ idr14 = FieldModel<address, 14, 0x00000001>;\n    using idr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using idr12 = FieldModel<address, 12, 0x00000001>;\n \
    \   using idr11 = FieldModel<address, 11, 0x00000001>;\n    using idr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using idr9 = FieldModel<address, 9, 0x00000001>;\n   \
    \ using idr8 = FieldModel<address, 8, 0x00000001>;\n    using idr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using idr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ idr5 = FieldModel<address, 5, 0x00000001>;\n    using idr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using idr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ idr2 = FieldModel<address, 2, 0x00000001>;\n    using idr1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using idr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OdrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using odr15 = FieldModel<address, 15, 0x00000001>;\n    using odr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using odr13 = FieldModel<address, 13, 0x00000001>;\n \
    \   using odr12 = FieldModel<address, 12, 0x00000001>;\n    using odr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using odr10 = FieldModel<address, 10, 0x00000001>;\n \
    \   using odr9 = FieldModel<address, 9, 0x00000001>;\n    using odr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using odr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ odr6 = FieldModel<address, 6, 0x00000001>;\n    using odr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using odr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ odr3 = FieldModel<address, 3, 0x00000001>;\n    using odr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using odr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ odr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class BsrrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using br15 = FieldModel<address,\
    \ 31, 0x00000001>;\n    using br14 = FieldModel<address, 30, 0x00000001>;\n  \
    \  using br13 = FieldModel<address, 29, 0x00000001>;\n    using br12 = FieldModel<address,\
    \ 28, 0x00000001>;\n    using br11 = FieldModel<address, 27, 0x00000001>;\n  \
    \  using br10 = FieldModel<address, 26, 0x00000001>;\n    using br9 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using br8 = FieldModel<address, 24, 0x00000001>;\n   \
    \ using br7 = FieldModel<address, 23, 0x00000001>;\n    using br6 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using br5 = FieldModel<address, 21, 0x00000001>;\n   \
    \ using br4 = FieldModel<address, 20, 0x00000001>;\n    using br3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using br2 = FieldModel<address, 18, 0x00000001>;\n   \
    \ using br1 = FieldModel<address, 17, 0x00000001>;\n    using br0 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using bs15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using bs14 = FieldModel<address, 14, 0x00000001>;\n    using bs13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using bs12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using bs11 = FieldModel<address, 11, 0x00000001>;\n    using bs10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using bs9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ bs8 = FieldModel<address, 8, 0x00000001>;\n    using bs7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bs6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bs5 = FieldModel<address, 5, 0x00000001>;\n    using bs4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using bs3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ bs2 = FieldModel<address, 2, 0x00000001>;\n    using bs1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using bs0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class LckrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using lckk = FieldModel<address, 16, 0x00000001>;\n    using lck15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using lck14 = FieldModel<address, 14, 0x00000001>;\n \
    \   using lck13 = FieldModel<address, 13, 0x00000001>;\n    using lck12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using lck11 = FieldModel<address, 11, 0x00000001>;\n \
    \   using lck10 = FieldModel<address, 10, 0x00000001>;\n    using lck9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using lck8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ lck7 = FieldModel<address, 7, 0x00000001>;\n    using lck6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using lck5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ lck4 = FieldModel<address, 4, 0x00000001>;\n    using lck3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using lck2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ lck1 = FieldModel<address, 1, 0x00000001>;\n    using lck0 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using lckr = LckrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AfrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using afrl7 = FieldModel<address, 28, 0x0000000F>;\n    using\
    \ afrl6 = FieldModel<address, 24, 0x0000000F>;\n    using afrl5 = FieldModel<address,\
    \ 20, 0x0000000F>;\n    using afrl4 = FieldModel<address, 16, 0x0000000F>;\n \
    \   using afrl3 = FieldModel<address, 12, 0x0000000F>;\n    using afrl2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using afrl1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using afrl0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfrhReg: public RegisterModel<address>\n  {\n  public:\n    using afrh15\
    \ = FieldModel<address, 28, 0x0000000F>;\n    using afrh14 = FieldModel<address,\
    \ 24, 0x0000000F>;\n    using afrh13 = FieldModel<address, 20, 0x0000000F>;\n\
    \    using afrh12 = FieldModel<address, 16, 0x0000000F>;\n    using afrh11 = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using afrh10 = FieldModel<address, 8, 0x0000000F>;\n \
    \   using afrh9 = FieldModel<address, 4, 0x0000000F>;\n    using afrh8 = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOC_H */\n"
  name: GPIOC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOB_H\n#define DRAL_STM32F411_GPIOB_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpiob\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ModerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using moder14 = FieldModel<address, 28, 0x00000003>;\n    using moder13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using moder12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using moder11 = FieldModel<address, 22, 0x00000003>;\n    using moder10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using moder9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using moder8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using moder7 = FieldModel<address, 14, 0x00000003>;\n    using moder6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using moder5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using moder4 = FieldModel<address, 8, 0x00000003>;\n    using moder3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using moder2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using moder1 = FieldModel<address, 2, 0x00000003>;\n    using moder0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using moder = ModerReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OtyperReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ot15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ot14 = FieldModel<address, 14, 0x00000001>;\n    using ot13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using ot12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using ot11 = FieldModel<address, 11, 0x00000001>;\n    using ot10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ot9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ot8 = FieldModel<address, 8, 0x00000001>;\n    using ot7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ot6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ ot5 = FieldModel<address, 5, 0x00000001>;\n    using ot4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ot3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ot2 = FieldModel<address, 2, 0x00000001>;\n    using ot1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ot0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OspeedrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using ospeedr15 = FieldModel<address, 30, 0x00000003>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 0x00000003>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using ospeedr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using ospeedr11 = FieldModel<address, 22, 0x00000003>;\n    using ospeedr10\
    \ = FieldModel<address, 20, 0x00000003>;\n    using ospeedr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using ospeedr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using ospeedr7 = FieldModel<address, 14, 0x00000003>;\n    using ospeedr6\
    \ = FieldModel<address, 12, 0x00000003>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 0x00000003>;\n    using ospeedr4 = FieldModel<address, 8, 0x00000003>;\n\
    \    using ospeedr3 = FieldModel<address, 6, 0x00000003>;\n    using ospeedr2\
    \ = FieldModel<address, 4, 0x00000003>;\n    using ospeedr1 = FieldModel<address,\
    \ 2, 0x00000003>;\n    using ospeedr0 = FieldModel<address, 0, 0x00000003>;\n\
    \  };\n\npublic:\n  using ospeedr = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PupdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pupdr15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using pupdr14 = FieldModel<address, 28, 0x00000003>;\n    using pupdr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using pupdr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using pupdr11 = FieldModel<address, 22, 0x00000003>;\n    using pupdr10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using pupdr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using pupdr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using pupdr7 = FieldModel<address, 14, 0x00000003>;\n    using pupdr6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using pupdr5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using pupdr4 = FieldModel<address, 8, 0x00000003>;\n    using pupdr3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pupdr2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using pupdr1 = FieldModel<address, 2, 0x00000003>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using pupdr = PupdrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class IdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using idr15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ idr14 = FieldModel<address, 14, 0x00000001>;\n    using idr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using idr12 = FieldModel<address, 12, 0x00000001>;\n \
    \   using idr11 = FieldModel<address, 11, 0x00000001>;\n    using idr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using idr9 = FieldModel<address, 9, 0x00000001>;\n   \
    \ using idr8 = FieldModel<address, 8, 0x00000001>;\n    using idr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using idr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ idr5 = FieldModel<address, 5, 0x00000001>;\n    using idr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using idr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ idr2 = FieldModel<address, 2, 0x00000001>;\n    using idr1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using idr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OdrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using odr15 = FieldModel<address, 15, 0x00000001>;\n    using odr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using odr13 = FieldModel<address, 13, 0x00000001>;\n \
    \   using odr12 = FieldModel<address, 12, 0x00000001>;\n    using odr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using odr10 = FieldModel<address, 10, 0x00000001>;\n \
    \   using odr9 = FieldModel<address, 9, 0x00000001>;\n    using odr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using odr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ odr6 = FieldModel<address, 6, 0x00000001>;\n    using odr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using odr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ odr3 = FieldModel<address, 3, 0x00000001>;\n    using odr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using odr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ odr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class BsrrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using br15 = FieldModel<address,\
    \ 31, 0x00000001>;\n    using br14 = FieldModel<address, 30, 0x00000001>;\n  \
    \  using br13 = FieldModel<address, 29, 0x00000001>;\n    using br12 = FieldModel<address,\
    \ 28, 0x00000001>;\n    using br11 = FieldModel<address, 27, 0x00000001>;\n  \
    \  using br10 = FieldModel<address, 26, 0x00000001>;\n    using br9 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using br8 = FieldModel<address, 24, 0x00000001>;\n   \
    \ using br7 = FieldModel<address, 23, 0x00000001>;\n    using br6 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using br5 = FieldModel<address, 21, 0x00000001>;\n   \
    \ using br4 = FieldModel<address, 20, 0x00000001>;\n    using br3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using br2 = FieldModel<address, 18, 0x00000001>;\n   \
    \ using br1 = FieldModel<address, 17, 0x00000001>;\n    using br0 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using bs15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using bs14 = FieldModel<address, 14, 0x00000001>;\n    using bs13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using bs12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using bs11 = FieldModel<address, 11, 0x00000001>;\n    using bs10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using bs9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ bs8 = FieldModel<address, 8, 0x00000001>;\n    using bs7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bs6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bs5 = FieldModel<address, 5, 0x00000001>;\n    using bs4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using bs3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ bs2 = FieldModel<address, 2, 0x00000001>;\n    using bs1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using bs0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class LckrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using lckk = FieldModel<address, 16, 0x00000001>;\n    using lck15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using lck14 = FieldModel<address, 14, 0x00000001>;\n \
    \   using lck13 = FieldModel<address, 13, 0x00000001>;\n    using lck12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using lck11 = FieldModel<address, 11, 0x00000001>;\n \
    \   using lck10 = FieldModel<address, 10, 0x00000001>;\n    using lck9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using lck8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ lck7 = FieldModel<address, 7, 0x00000001>;\n    using lck6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using lck5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ lck4 = FieldModel<address, 4, 0x00000001>;\n    using lck3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using lck2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ lck1 = FieldModel<address, 1, 0x00000001>;\n    using lck0 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using lckr = LckrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AfrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using afrl7 = FieldModel<address, 28, 0x0000000F>;\n    using\
    \ afrl6 = FieldModel<address, 24, 0x0000000F>;\n    using afrl5 = FieldModel<address,\
    \ 20, 0x0000000F>;\n    using afrl4 = FieldModel<address, 16, 0x0000000F>;\n \
    \   using afrl3 = FieldModel<address, 12, 0x0000000F>;\n    using afrl2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using afrl1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using afrl0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfrhReg: public RegisterModel<address>\n  {\n  public:\n    using afrh15\
    \ = FieldModel<address, 28, 0x0000000F>;\n    using afrh14 = FieldModel<address,\
    \ 24, 0x0000000F>;\n    using afrh13 = FieldModel<address, 20, 0x0000000F>;\n\
    \    using afrh12 = FieldModel<address, 16, 0x0000000F>;\n    using afrh11 = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using afrh10 = FieldModel<address, 8, 0x0000000F>;\n \
    \   using afrh9 = FieldModel<address, 4, 0x0000000F>;\n    using afrh8 = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOB_H */\n"
  name: GPIOB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_GPIOA_H\n#define DRAL_STM32F411_GPIOA_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass gpioa\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40020000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ModerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using moder15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using moder14 = FieldModel<address, 28, 0x00000003>;\n    using moder13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using moder12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using moder11 = FieldModel<address, 22, 0x00000003>;\n    using moder10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using moder9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using moder8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using moder7 = FieldModel<address, 14, 0x00000003>;\n    using moder6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using moder5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using moder4 = FieldModel<address, 8, 0x00000003>;\n    using moder3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using moder2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using moder1 = FieldModel<address, 2, 0x00000003>;\n    using moder0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using moder = ModerReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class OtyperReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ot15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ ot14 = FieldModel<address, 14, 0x00000001>;\n    using ot13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using ot12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using ot11 = FieldModel<address, 11, 0x00000001>;\n    using ot10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ot9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ot8 = FieldModel<address, 8, 0x00000001>;\n    using ot7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ot6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ ot5 = FieldModel<address, 5, 0x00000001>;\n    using ot4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ot3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ot2 = FieldModel<address, 2, 0x00000001>;\n    using ot1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using ot0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using otyper = OtyperReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OspeedrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using ospeedr15 = FieldModel<address, 30, 0x00000003>;\n    using\
    \ ospeedr14 = FieldModel<address, 28, 0x00000003>;\n    using ospeedr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using ospeedr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using ospeedr11 = FieldModel<address, 22, 0x00000003>;\n    using ospeedr10\
    \ = FieldModel<address, 20, 0x00000003>;\n    using ospeedr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using ospeedr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using ospeedr7 = FieldModel<address, 14, 0x00000003>;\n    using ospeedr6\
    \ = FieldModel<address, 12, 0x00000003>;\n    using ospeedr5 = FieldModel<address,\
    \ 10, 0x00000003>;\n    using ospeedr4 = FieldModel<address, 8, 0x00000003>;\n\
    \    using ospeedr3 = FieldModel<address, 6, 0x00000003>;\n    using ospeedr2\
    \ = FieldModel<address, 4, 0x00000003>;\n    using ospeedr1 = FieldModel<address,\
    \ 2, 0x00000003>;\n    using ospeedr0 = FieldModel<address, 0, 0x00000003>;\n\
    \  };\n\npublic:\n  using ospeedr = OspeedrReg<BaseAddress + 0x0008>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class PupdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pupdr15 = FieldModel<address, 30, 0x00000003>;\n  \
    \  using pupdr14 = FieldModel<address, 28, 0x00000003>;\n    using pupdr13 = FieldModel<address,\
    \ 26, 0x00000003>;\n    using pupdr12 = FieldModel<address, 24, 0x00000003>;\n\
    \    using pupdr11 = FieldModel<address, 22, 0x00000003>;\n    using pupdr10 =\
    \ FieldModel<address, 20, 0x00000003>;\n    using pupdr9 = FieldModel<address,\
    \ 18, 0x00000003>;\n    using pupdr8 = FieldModel<address, 16, 0x00000003>;\n\
    \    using pupdr7 = FieldModel<address, 14, 0x00000003>;\n    using pupdr6 = FieldModel<address,\
    \ 12, 0x00000003>;\n    using pupdr5 = FieldModel<address, 10, 0x00000003>;\n\
    \    using pupdr4 = FieldModel<address, 8, 0x00000003>;\n    using pupdr3 = FieldModel<address,\
    \ 6, 0x00000003>;\n    using pupdr2 = FieldModel<address, 4, 0x00000003>;\n  \
    \  using pupdr1 = FieldModel<address, 2, 0x00000003>;\n    using pupdr0 = FieldModel<address,\
    \ 0, 0x00000003>;\n  };\n\npublic:\n  using pupdr = PupdrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class IdrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using idr15 = FieldModel<address, 15, 0x00000001>;\n    using\
    \ idr14 = FieldModel<address, 14, 0x00000001>;\n    using idr13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using idr12 = FieldModel<address, 12, 0x00000001>;\n \
    \   using idr11 = FieldModel<address, 11, 0x00000001>;\n    using idr10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using idr9 = FieldModel<address, 9, 0x00000001>;\n   \
    \ using idr8 = FieldModel<address, 8, 0x00000001>;\n    using idr7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using idr6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ idr5 = FieldModel<address, 5, 0x00000001>;\n    using idr4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using idr3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ idr2 = FieldModel<address, 2, 0x00000001>;\n    using idr1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using idr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using idr = IdrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class OdrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using odr15 = FieldModel<address, 15, 0x00000001>;\n    using odr14 = FieldModel<address,\
    \ 14, 0x00000001>;\n    using odr13 = FieldModel<address, 13, 0x00000001>;\n \
    \   using odr12 = FieldModel<address, 12, 0x00000001>;\n    using odr11 = FieldModel<address,\
    \ 11, 0x00000001>;\n    using odr10 = FieldModel<address, 10, 0x00000001>;\n \
    \   using odr9 = FieldModel<address, 9, 0x00000001>;\n    using odr8 = FieldModel<address,\
    \ 8, 0x00000001>;\n    using odr7 = FieldModel<address, 7, 0x00000001>;\n    using\
    \ odr6 = FieldModel<address, 6, 0x00000001>;\n    using odr5 = FieldModel<address,\
    \ 5, 0x00000001>;\n    using odr4 = FieldModel<address, 4, 0x00000001>;\n    using\
    \ odr3 = FieldModel<address, 3, 0x00000001>;\n    using odr2 = FieldModel<address,\
    \ 2, 0x00000001>;\n    using odr1 = FieldModel<address, 1, 0x00000001>;\n    using\
    \ odr0 = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using odr = OdrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class BsrrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using br15 = FieldModel<address,\
    \ 31, 0x00000001>;\n    using br14 = FieldModel<address, 30, 0x00000001>;\n  \
    \  using br13 = FieldModel<address, 29, 0x00000001>;\n    using br12 = FieldModel<address,\
    \ 28, 0x00000001>;\n    using br11 = FieldModel<address, 27, 0x00000001>;\n  \
    \  using br10 = FieldModel<address, 26, 0x00000001>;\n    using br9 = FieldModel<address,\
    \ 25, 0x00000001>;\n    using br8 = FieldModel<address, 24, 0x00000001>;\n   \
    \ using br7 = FieldModel<address, 23, 0x00000001>;\n    using br6 = FieldModel<address,\
    \ 22, 0x00000001>;\n    using br5 = FieldModel<address, 21, 0x00000001>;\n   \
    \ using br4 = FieldModel<address, 20, 0x00000001>;\n    using br3 = FieldModel<address,\
    \ 19, 0x00000001>;\n    using br2 = FieldModel<address, 18, 0x00000001>;\n   \
    \ using br1 = FieldModel<address, 17, 0x00000001>;\n    using br0 = FieldModel<address,\
    \ 16, 0x00000001>;\n    using bs15 = FieldModel<address, 15, 0x00000001>;\n  \
    \  using bs14 = FieldModel<address, 14, 0x00000001>;\n    using bs13 = FieldModel<address,\
    \ 13, 0x00000001>;\n    using bs12 = FieldModel<address, 12, 0x00000001>;\n  \
    \  using bs11 = FieldModel<address, 11, 0x00000001>;\n    using bs10 = FieldModel<address,\
    \ 10, 0x00000001>;\n    using bs9 = FieldModel<address, 9, 0x00000001>;\n    using\
    \ bs8 = FieldModel<address, 8, 0x00000001>;\n    using bs7 = FieldModel<address,\
    \ 7, 0x00000001>;\n    using bs6 = FieldModel<address, 6, 0x00000001>;\n    using\
    \ bs5 = FieldModel<address, 5, 0x00000001>;\n    using bs4 = FieldModel<address,\
    \ 4, 0x00000001>;\n    using bs3 = FieldModel<address, 3, 0x00000001>;\n    using\
    \ bs2 = FieldModel<address, 2, 0x00000001>;\n    using bs1 = FieldModel<address,\
    \ 1, 0x00000001>;\n    using bs0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using bsrr = BsrrReg<BaseAddress + 0x0018>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class LckrReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using lckk = FieldModel<address, 16, 0x00000001>;\n    using lck15 = FieldModel<address,\
    \ 15, 0x00000001>;\n    using lck14 = FieldModel<address, 14, 0x00000001>;\n \
    \   using lck13 = FieldModel<address, 13, 0x00000001>;\n    using lck12 = FieldModel<address,\
    \ 12, 0x00000001>;\n    using lck11 = FieldModel<address, 11, 0x00000001>;\n \
    \   using lck10 = FieldModel<address, 10, 0x00000001>;\n    using lck9 = FieldModel<address,\
    \ 9, 0x00000001>;\n    using lck8 = FieldModel<address, 8, 0x00000001>;\n    using\
    \ lck7 = FieldModel<address, 7, 0x00000001>;\n    using lck6 = FieldModel<address,\
    \ 6, 0x00000001>;\n    using lck5 = FieldModel<address, 5, 0x00000001>;\n    using\
    \ lck4 = FieldModel<address, 4, 0x00000001>;\n    using lck3 = FieldModel<address,\
    \ 3, 0x00000001>;\n    using lck2 = FieldModel<address, 2, 0x00000001>;\n    using\
    \ lck1 = FieldModel<address, 1, 0x00000001>;\n    using lck0 = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using lckr = LckrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class AfrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using afrl7 = FieldModel<address, 28, 0x0000000F>;\n    using\
    \ afrl6 = FieldModel<address, 24, 0x0000000F>;\n    using afrl5 = FieldModel<address,\
    \ 20, 0x0000000F>;\n    using afrl4 = FieldModel<address, 16, 0x0000000F>;\n \
    \   using afrl3 = FieldModel<address, 12, 0x0000000F>;\n    using afrl2 = FieldModel<address,\
    \ 8, 0x0000000F>;\n    using afrl1 = FieldModel<address, 4, 0x0000000F>;\n   \
    \ using afrl0 = FieldModel<address, 0, 0x0000000F>;\n  };\n\npublic:\n  using\
    \ afrl = AfrlReg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfrhReg: public RegisterModel<address>\n  {\n  public:\n    using afrh15\
    \ = FieldModel<address, 28, 0x0000000F>;\n    using afrh14 = FieldModel<address,\
    \ 24, 0x0000000F>;\n    using afrh13 = FieldModel<address, 20, 0x0000000F>;\n\
    \    using afrh12 = FieldModel<address, 16, 0x0000000F>;\n    using afrh11 = FieldModel<address,\
    \ 12, 0x0000000F>;\n    using afrh10 = FieldModel<address, 8, 0x0000000F>;\n \
    \   using afrh9 = FieldModel<address, 4, 0x0000000F>;\n    using afrh8 = FieldModel<address,\
    \ 0, 0x0000000F>;\n  };\n\npublic:\n  using afrh = AfrhReg<BaseAddress + 0x0024>;\n\
    \n};\n\n}\n\n#endif /* DRAL_STM32F411_GPIOA_H */\n"
  name: GPIOA
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C3_H\n#define DRAL_STM32F411_I2C3_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2c3\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40005C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using swrst = FieldModel<address, 15, 0x00000001>;\n    using\
    \ alert = FieldModel<address, 13, 0x00000001>;\n    using pec = FieldModel<address,\
    \ 12, 0x00000001>;\n    using pos = FieldModel<address, 11, 0x00000001>;\n   \
    \ using ack = FieldModel<address, 10, 0x00000001>;\n    using stop = FieldModel<address,\
    \ 9, 0x00000001>;\n    using start = FieldModel<address, 8, 0x00000001>;\n   \
    \ using nostretch = FieldModel<address, 7, 0x00000001>;\n    using engc = FieldModel<address,\
    \ 6, 0x00000001>;\n    using enpec = FieldModel<address, 5, 0x00000001>;\n   \
    \ using enarp = FieldModel<address, 4, 0x00000001>;\n    using smbtype = FieldModel<address,\
    \ 3, 0x00000001>;\n    using smbus = FieldModel<address, 1, 0x00000001>;\n   \
    \ using pe = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Cr2Reg: public RegisterModel<address>\n  {\n  public:\n    using last\
    \ = FieldModel<address, 12, 0x00000001>;\n    using dmaen = FieldModel<address,\
    \ 11, 0x00000001>;\n    using itbufen = FieldModel<address, 10, 0x00000001>;\n\
    \    using itevten = FieldModel<address, 9, 0x00000001>;\n    using iterren =\
    \ FieldModel<address, 8, 0x00000001>;\n    using freq = FieldModel<address, 0,\
    \ 0x0000003F>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Oar1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using addmode = FieldModel<address, 15, 0x00000001>;\n  \
    \  using add10 = FieldModel<address, 8, 0x00000003>;\n    using add7 = FieldModel<address,\
    \ 1, 0x0000007F>;\n    using add0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using oar1 = Oar1Reg<BaseAddress + 0x0008>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Oar2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using add2 = FieldModel<address, 1, 0x0000007F>;\n    using endual = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using oar2 = Oar2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x000000FF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Sr1Reg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using smbalert = FieldModel<address, 15, 0x00000001>;\n    using timeout =\
    \ FieldModel<address, 14, 0x00000001>;\n    using pecerr = FieldModel<address,\
    \ 12, 0x00000001>;\n    using ovr = FieldModel<address, 11, 0x00000001>;\n   \
    \ using af = FieldModel<address, 10, 0x00000001>;\n    using arlo = FieldModel<address,\
    \ 9, 0x00000001>;\n    using berr = FieldModel<address, 8, 0x00000001>;\n    using\
    \ txe = FieldModel<address, 7, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 6, 0x00000001>;\n    using stopf = FieldModel<address, 4, 0x00000001>;\n   \
    \ using add10 = FieldModel<address, 3, 0x00000001>;\n    using btf = FieldModel<address,\
    \ 2, 0x00000001>;\n    using addr = FieldModel<address, 1, 0x00000001>;\n    using\
    \ sb = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using sr1 = Sr1Reg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Sr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using pec = FieldModel<address,\
    \ 8, 0x000000FF>;\n    using dualf = FieldModel<address, 7, 0x00000001>;\n   \
    \ using smbhost = FieldModel<address, 6, 0x00000001>;\n    using smbdefault =\
    \ FieldModel<address, 5, 0x00000001>;\n    using gencall = FieldModel<address,\
    \ 4, 0x00000001>;\n    using tra = FieldModel<address, 2, 0x00000001>;\n    using\
    \ busy = FieldModel<address, 1, 0x00000001>;\n    using msl = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr2 = Sr2Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class CcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using f_s = FieldModel<address, 15, 0x00000001>;\n    using\
    \ duty = FieldModel<address, 14, 0x00000001>;\n    using ccr = FieldModel<address,\
    \ 0, 0x00000FFF>;\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class TriseReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using trise = FieldModel<address, 0, 0x0000003F>;\n  };\n\
    \npublic:\n  using trise = TriseReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2C3_H */\n"
  name: I2C3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C2_H\n#define DRAL_STM32F411_I2C2_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2c2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40005800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using swrst = FieldModel<address, 15, 0x00000001>;\n    using\
    \ alert = FieldModel<address, 13, 0x00000001>;\n    using pec = FieldModel<address,\
    \ 12, 0x00000001>;\n    using pos = FieldModel<address, 11, 0x00000001>;\n   \
    \ using ack = FieldModel<address, 10, 0x00000001>;\n    using stop = FieldModel<address,\
    \ 9, 0x00000001>;\n    using start = FieldModel<address, 8, 0x00000001>;\n   \
    \ using nostretch = FieldModel<address, 7, 0x00000001>;\n    using engc = FieldModel<address,\
    \ 6, 0x00000001>;\n    using enpec = FieldModel<address, 5, 0x00000001>;\n   \
    \ using enarp = FieldModel<address, 4, 0x00000001>;\n    using smbtype = FieldModel<address,\
    \ 3, 0x00000001>;\n    using smbus = FieldModel<address, 1, 0x00000001>;\n   \
    \ using pe = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Cr2Reg: public RegisterModel<address>\n  {\n  public:\n    using last\
    \ = FieldModel<address, 12, 0x00000001>;\n    using dmaen = FieldModel<address,\
    \ 11, 0x00000001>;\n    using itbufen = FieldModel<address, 10, 0x00000001>;\n\
    \    using itevten = FieldModel<address, 9, 0x00000001>;\n    using iterren =\
    \ FieldModel<address, 8, 0x00000001>;\n    using freq = FieldModel<address, 0,\
    \ 0x0000003F>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Oar1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using addmode = FieldModel<address, 15, 0x00000001>;\n  \
    \  using add10 = FieldModel<address, 8, 0x00000003>;\n    using add7 = FieldModel<address,\
    \ 1, 0x0000007F>;\n    using add0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using oar1 = Oar1Reg<BaseAddress + 0x0008>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Oar2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using add2 = FieldModel<address, 1, 0x0000007F>;\n    using endual = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using oar2 = Oar2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x000000FF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Sr1Reg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using smbalert = FieldModel<address, 15, 0x00000001>;\n    using timeout =\
    \ FieldModel<address, 14, 0x00000001>;\n    using pecerr = FieldModel<address,\
    \ 12, 0x00000001>;\n    using ovr = FieldModel<address, 11, 0x00000001>;\n   \
    \ using af = FieldModel<address, 10, 0x00000001>;\n    using arlo = FieldModel<address,\
    \ 9, 0x00000001>;\n    using berr = FieldModel<address, 8, 0x00000001>;\n    using\
    \ txe = FieldModel<address, 7, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 6, 0x00000001>;\n    using stopf = FieldModel<address, 4, 0x00000001>;\n   \
    \ using add10 = FieldModel<address, 3, 0x00000001>;\n    using btf = FieldModel<address,\
    \ 2, 0x00000001>;\n    using addr = FieldModel<address, 1, 0x00000001>;\n    using\
    \ sb = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using sr1 = Sr1Reg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Sr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using pec = FieldModel<address,\
    \ 8, 0x000000FF>;\n    using dualf = FieldModel<address, 7, 0x00000001>;\n   \
    \ using smbhost = FieldModel<address, 6, 0x00000001>;\n    using smbdefault =\
    \ FieldModel<address, 5, 0x00000001>;\n    using gencall = FieldModel<address,\
    \ 4, 0x00000001>;\n    using tra = FieldModel<address, 2, 0x00000001>;\n    using\
    \ busy = FieldModel<address, 1, 0x00000001>;\n    using msl = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr2 = Sr2Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class CcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using f_s = FieldModel<address, 15, 0x00000001>;\n    using\
    \ duty = FieldModel<address, 14, 0x00000001>;\n    using ccr = FieldModel<address,\
    \ 0, 0x00000FFF>;\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class TriseReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using trise = FieldModel<address, 0, 0x0000003F>;\n  };\n\
    \npublic:\n  using trise = TriseReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2C2_H */\n"
  name: I2C2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2C1_H\n#define DRAL_STM32F411_I2C1_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2c1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40005400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using swrst = FieldModel<address, 15, 0x00000001>;\n    using\
    \ alert = FieldModel<address, 13, 0x00000001>;\n    using pec = FieldModel<address,\
    \ 12, 0x00000001>;\n    using pos = FieldModel<address, 11, 0x00000001>;\n   \
    \ using ack = FieldModel<address, 10, 0x00000001>;\n    using stop = FieldModel<address,\
    \ 9, 0x00000001>;\n    using start = FieldModel<address, 8, 0x00000001>;\n   \
    \ using nostretch = FieldModel<address, 7, 0x00000001>;\n    using engc = FieldModel<address,\
    \ 6, 0x00000001>;\n    using enpec = FieldModel<address, 5, 0x00000001>;\n   \
    \ using enarp = FieldModel<address, 4, 0x00000001>;\n    using smbtype = FieldModel<address,\
    \ 3, 0x00000001>;\n    using smbus = FieldModel<address, 1, 0x00000001>;\n   \
    \ using pe = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1\
    \ = Cr1Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Cr2Reg: public RegisterModel<address>\n  {\n  public:\n    using last\
    \ = FieldModel<address, 12, 0x00000001>;\n    using dmaen = FieldModel<address,\
    \ 11, 0x00000001>;\n    using itbufen = FieldModel<address, 10, 0x00000001>;\n\
    \    using itevten = FieldModel<address, 9, 0x00000001>;\n    using iterren =\
    \ FieldModel<address, 8, 0x00000001>;\n    using freq = FieldModel<address, 0,\
    \ 0x0000003F>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Oar1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using addmode = FieldModel<address, 15, 0x00000001>;\n  \
    \  using add10 = FieldModel<address, 8, 0x00000003>;\n    using add7 = FieldModel<address,\
    \ 1, 0x0000007F>;\n    using add0 = FieldModel<address, 0, 0x00000001>;\n  };\n\
    \npublic:\n  using oar1 = Oar1Reg<BaseAddress + 0x0008>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Oar2Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using add2 = FieldModel<address, 1, 0x0000007F>;\n    using endual = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using oar2 = Oar2Reg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x000000FF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Sr1Reg: public RegisterModel<address>\n  {\n  public:\n  \
    \  using smbalert = FieldModel<address, 15, 0x00000001>;\n    using timeout =\
    \ FieldModel<address, 14, 0x00000001>;\n    using pecerr = FieldModel<address,\
    \ 12, 0x00000001>;\n    using ovr = FieldModel<address, 11, 0x00000001>;\n   \
    \ using af = FieldModel<address, 10, 0x00000001>;\n    using arlo = FieldModel<address,\
    \ 9, 0x00000001>;\n    using berr = FieldModel<address, 8, 0x00000001>;\n    using\
    \ txe = FieldModel<address, 7, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 6, 0x00000001>;\n    using stopf = FieldModel<address, 4, 0x00000001>;\n   \
    \ using add10 = FieldModel<address, 3, 0x00000001>;\n    using btf = FieldModel<address,\
    \ 2, 0x00000001>;\n    using addr = FieldModel<address, 1, 0x00000001>;\n    using\
    \ sb = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using sr1 = Sr1Reg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class Sr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using pec = FieldModel<address,\
    \ 8, 0x000000FF>;\n    using dualf = FieldModel<address, 7, 0x00000001>;\n   \
    \ using smbhost = FieldModel<address, 6, 0x00000001>;\n    using smbdefault =\
    \ FieldModel<address, 5, 0x00000001>;\n    using gencall = FieldModel<address,\
    \ 4, 0x00000001>;\n    using tra = FieldModel<address, 2, 0x00000001>;\n    using\
    \ busy = FieldModel<address, 1, 0x00000001>;\n    using msl = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr2 = Sr2Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class CcrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using f_s = FieldModel<address, 15, 0x00000001>;\n    using\
    \ duty = FieldModel<address, 14, 0x00000001>;\n    using ccr = FieldModel<address,\
    \ 0, 0x00000FFF>;\n  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x001C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class TriseReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using trise = FieldModel<address, 0, 0x0000003F>;\n  };\n\
    \npublic:\n  using trise = TriseReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2C1_H */\n"
  name: I2C1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2S2EXT_H\n#define DRAL_STM32F411_I2S2EXT_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2s2ext\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2S2EXT_H */\n"
  name: I2S2ext
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_I2S3EXT_H\n#define DRAL_STM32F411_I2S3EXT_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass i2s3ext\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40004000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_I2S3EXT_H */\n"
  name: I2S3ext
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI1_H\n#define DRAL_STM32F411_SPI1_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi1\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_SPI1_H */\n"
  name: SPI1
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI2_H\n#define DRAL_STM32F411_SPI2_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi2\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003800;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_SPI2_H */\n"
  name: SPI2
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI3_H\n#define DRAL_STM32F411_SPI3_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi3\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40003C00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_SPI3_H */\n"
  name: SPI3
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI4_H\n#define DRAL_STM32F411_SPI4_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi4\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40013400;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_SPI4_H */\n"
  name: SPI4
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SPI5_H\n#define DRAL_STM32F411_SPI5_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass spi5\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0x40015000;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Cr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using bidimode = FieldModel<address, 15, 0x00000001>;\n \
    \   using bidioe = FieldModel<address, 14, 0x00000001>;\n    using crcen = FieldModel<address,\
    \ 13, 0x00000001>;\n    using crcnext = FieldModel<address, 12, 0x00000001>;\n\
    \    using dff = FieldModel<address, 11, 0x00000001>;\n    using rxonly = FieldModel<address,\
    \ 10, 0x00000001>;\n    using ssm = FieldModel<address, 9, 0x00000001>;\n    using\
    \ ssi = FieldModel<address, 8, 0x00000001>;\n    using lsbfirst = FieldModel<address,\
    \ 7, 0x00000001>;\n    using spe = FieldModel<address, 6, 0x00000001>;\n    using\
    \ br = FieldModel<address, 3, 0x00000007>;\n    using mstr = FieldModel<address,\
    \ 2, 0x00000001>;\n    using cpol = FieldModel<address, 1, 0x00000001>;\n    using\
    \ cpha = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using cr1 = Cr1Reg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Cr2Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txeie = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rxneie = FieldModel<address, 6, 0x00000001>;\n  \
    \  using errie = FieldModel<address, 5, 0x00000001>;\n    using frf = FieldModel<address,\
    \ 4, 0x00000001>;\n    using ssoe = FieldModel<address, 2, 0x00000001>;\n    using\
    \ txdmaen = FieldModel<address, 1, 0x00000001>;\n    using rxdmaen = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using cr2 = Cr2Reg<BaseAddress + 0x0004>;\n\
    \nprivate:\n  template <uint32_t address>\n  class SrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using tifrfe = FieldModel<address, 8, 0x00000001>;\n    using\
    \ bsy = FieldModel<address, 7, 0x00000001>;\n    using ovr = FieldModel<address,\
    \ 6, 0x00000001>;\n    using modf = FieldModel<address, 5, 0x00000001>;\n    using\
    \ crcerr = FieldModel<address, 4, 0x00000001>;\n    using udr = FieldModel<address,\
    \ 3, 0x00000001>;\n    using chside = FieldModel<address, 2, 0x00000001>;\n  \
    \  using txe = FieldModel<address, 1, 0x00000001>;\n    using rxne = FieldModel<address,\
    \ 0, 0x00000001>;\n  };\n\npublic:\n  using sr = SrReg<BaseAddress + 0x0008>;\n\
    \nprivate:\n  template <uint32_t address>\n  class DrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dr = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\n\
    public:\n  using dr = DrReg<BaseAddress + 0x000C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class CrcprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using crcpoly = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using\
    \ crcpr = CrcprReg<BaseAddress + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class RxcrcrReg: public RegisterModel<address>\n  {\n  public:\n    using rxcrc\
    \ = FieldModel<address, 0, 0x0000FFFF>;\n  };\n\npublic:\n  using rxcrcr = RxcrcrReg<BaseAddress\
    \ + 0x0014>;\n\nprivate:\n  template <uint32_t address>\n  class TxcrcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using txcrc = FieldModel<address,\
    \ 0, 0x0000FFFF>;\n  };\n\npublic:\n  using txcrcr = TxcrcrReg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class I2scfgrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using i2smod = FieldModel<address, 11, 0x00000001>;\n   \
    \ using i2se = FieldModel<address, 10, 0x00000001>;\n    using i2scfg = FieldModel<address,\
    \ 8, 0x00000003>;\n    using pcmsync = FieldModel<address, 7, 0x00000001>;\n \
    \   using i2sstd = FieldModel<address, 4, 0x00000003>;\n    using ckpol = FieldModel<address,\
    \ 3, 0x00000001>;\n    using datlen = FieldModel<address, 1, 0x00000003>;\n  \
    \  using chlen = FieldModel<address, 0, 0x00000001>;\n  };\n\npublic:\n  using\
    \ i2scfgr = I2scfgrReg<BaseAddress + 0x001C>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class I2sprReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using mckoe = FieldModel<address, 9, 0x00000001>;\n    using odd = FieldModel<address,\
    \ 8, 0x00000001>;\n    using i2sdiv = FieldModel<address, 0, 0x000000FF>;\n  };\n\
    \npublic:\n  using i2spr = I2sprReg<BaseAddress + 0x0020>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_SPI5_H */\n"
  name: SPI5
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_NVIC_H\n#define DRAL_STM32F411_NVIC_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass nvic\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000E100;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Iser0Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using setena = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\
    \npublic:\n  using iser0 = Iser0Reg<BaseAddress + 0x0000>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Iser1Reg: public RegisterModel<address>\n  {\n \
    \ public:\n    using setena = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using iser1 = Iser1Reg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Icer0Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using clrena = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ icer0 = Icer0Reg<BaseAddress + 0x0080>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Icer1Reg: public RegisterModel<address>\n  {\n  public:\n    using clrena\
    \ = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using icer1 = Icer1Reg<BaseAddress\
    \ + 0x0084>;\n\nprivate:\n  template <uint32_t address>\n  class Ispr0Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using setpend = FieldModel<address,\
    \ 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using ispr0 = Ispr0Reg<BaseAddress + 0x0100>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ispr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using setpend = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\
    \npublic:\n  using ispr1 = Ispr1Reg<BaseAddress + 0x0104>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Icpr0Reg: public RegisterModel<address>\n  {\n \
    \ public:\n    using clrpend = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n\
    \  using icpr0 = Icpr0Reg<BaseAddress + 0x0180>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Icpr1Reg: public RegisterModel<address>\n  {\n  public:\n\
    \    using clrpend = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ icpr1 = Icpr1Reg<BaseAddress + 0x0184>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Iabr0Reg: public RegisterModel<address>\n  {\n  public:\n    using active\
    \ = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using iabr0 = Iabr0Reg<BaseAddress\
    \ + 0x0200>;\n\nprivate:\n  template <uint32_t address>\n  class Iabr1Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using active = FieldModel<address,\
    \ 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using iabr1 = Iabr1Reg<BaseAddress + 0x0204>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Ipr0Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr0 = Ipr0Reg<BaseAddress + 0x0300>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr1Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr1 = Ipr1Reg<BaseAddress + 0x0304>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr2 = Ipr2Reg<BaseAddress + 0x0308>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr3Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr3 = Ipr3Reg<BaseAddress + 0x030C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr4Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr4 = Ipr4Reg<BaseAddress + 0x0310>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr5Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr5 = Ipr5Reg<BaseAddress + 0x0314>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr6Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr6 = Ipr6Reg<BaseAddress + 0x0318>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr7Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr7 = Ipr7Reg<BaseAddress + 0x031C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr8Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr8 = Ipr8Reg<BaseAddress + 0x0320>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr9Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr9 = Ipr9Reg<BaseAddress + 0x0324>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr10Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr10 = Ipr10Reg<BaseAddress + 0x0328>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr11Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr11 = Ipr11Reg<BaseAddress + 0x032C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr12Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr12 = Ipr12Reg<BaseAddress + 0x0330>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr13Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr13 = Ipr13Reg<BaseAddress + 0x0334>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr14Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr14 = Ipr14Reg<BaseAddress + 0x0338>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr15Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr15 = Ipr15Reg<BaseAddress + 0x033C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr16Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr16 = Ipr16Reg<BaseAddress + 0x0340>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr17Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr17 = Ipr17Reg<BaseAddress + 0x0344>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr18Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr18 = Ipr18Reg<BaseAddress + 0x0348>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr19Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using ipr_n0 = FieldModel<address, 0, 0x000000FF>;\n    using\
    \ ipr_n1 = FieldModel<address, 8, 0x000000FF>;\n    using ipr_n2 = FieldModel<address,\
    \ 16, 0x000000FF>;\n    using ipr_n3 = FieldModel<address, 24, 0x000000FF>;\n\
    \  };\n\npublic:\n  using ipr19 = Ipr19Reg<BaseAddress + 0x034C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Ipr20Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    \n  };\n\npublic:\n  using ipr20 = Ipr20Reg<BaseAddress +\
    \ 0x0350>;\n\nprivate:\n  template <uint32_t address>\n  class Ipr21Reg: public\
    \ RegisterModel<address>\n  {\n  public:\n    \n  };\n\npublic:\n  using ipr21\
    \ = Ipr21Reg<BaseAddress + 0x0354>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class Ipr22Reg: public RegisterModel<address>\n  {\n  public:\n    \n  };\n\
    \npublic:\n  using ipr22 = Ipr22Reg<BaseAddress + 0x0358>;\nprivate:\n  template\
    \ <uint32_t address, uint32_t bankOffset>\n  class IserxBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using setena = FieldModel<address, 0, 0xFFFFFFFF,\
    \ bankOffset>;\n  };\n\npublic:\n  using iserx = IserxBankReg<BaseAddress + 0x0000,\
    \ 0x0004>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n \
    \ class IcerxBankReg: public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using clrena = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n  };\n\n\
    public:\n  using icerx = IcerxBankReg<BaseAddress + 0x0080, 0x0004>;\n\nprivate:\n\
    \  template <uint32_t address, uint32_t bankOffset>\n  class IsprxBankReg: public\
    \ RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using setpend =\
    \ FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n  };\n\npublic:\n  using isprx\
    \ = IsprxBankReg<BaseAddress + 0x0100, 0x0004>;\n\nprivate:\n  template <uint32_t\
    \ address, uint32_t bankOffset>\n  class IcprxBankReg: public RegisterBankModel<address,\
    \ bankOffset>\n  {\n  public:\n    using clrpend = FieldModel<address, 0, 0xFFFFFFFF,\
    \ bankOffset>;\n  };\n\npublic:\n  using icprx = IcprxBankReg<BaseAddress + 0x0180,\
    \ 0x0004>;\n\nprivate:\n  template <uint32_t address, uint32_t bankOffset>\n \
    \ class IabrxBankReg: public RegisterBankModel<address, bankOffset>\n  {\n  public:\n\
    \    using active = FieldModel<address, 0, 0xFFFFFFFF, bankOffset>;\n  };\n\n\
    public:\n  using iabrx = IabrxBankReg<BaseAddress + 0x0200, 0x0004>;\n\nprivate:\n\
    \  template <uint32_t address, uint32_t bankOffset>\n  class IprxBankReg: public\
    \ RegisterBankModel<address, bankOffset>\n  {\n  public:\n    using ipr_n0 = FieldModel<address,\
    \ 0, 0x000000FF, bankOffset>;\n    using ipr_n1 = FieldModel<address, 8, 0x000000FF,\
    \ bankOffset>;\n    using ipr_n2 = FieldModel<address, 16, 0x000000FF, bankOffset>;\n\
    \    using ipr_n3 = FieldModel<address, 24, 0x000000FF, bankOffset>;\n  };\n\n\
    public:\n  using iprx = IprxBankReg<BaseAddress + 0x0300, 0x0004>;\n\nprivate:\n\
    \  template <uint32_t address, uint32_t bankOffset>\n  class Ipr2xBankReg: public\
    \ RegisterBankModel<address, bankOffset>\n  {\n  public:\n    \n  };\n\npublic:\n\
    \  using ipr2x = Ipr2xBankReg<BaseAddress + 0x0350, 0x0004>;\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_NVIC_H */\n"
  name: NVIC
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FPU_H\n#define DRAL_STM32F411_FPU_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass fpu\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000EF34;\n\nprivate:\n\
    \  template <uint32_t address>\n  class FpccrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using lspact = FieldModel<address, 0, 0x00000001>;\n    using\
    \ user = FieldModel<address, 1, 0x00000001>;\n    using thread = FieldModel<address,\
    \ 3, 0x00000001>;\n    using hfrdy = FieldModel<address, 4, 0x00000001>;\n   \
    \ using mmrdy = FieldModel<address, 5, 0x00000001>;\n    using bfrdy = FieldModel<address,\
    \ 6, 0x00000001>;\n    using monrdy = FieldModel<address, 8, 0x00000001>;\n  \
    \  using lspen = FieldModel<address, 30, 0x00000001>;\n    using aspen = FieldModel<address,\
    \ 31, 0x00000001>;\n  };\n\npublic:\n  using fpccr = FpccrReg<BaseAddress + 0x0000>;\n\
    \nprivate:\n  template <uint32_t address>\n  class FpcarReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using address = FieldModel<address, 3, 0x1FFFFFFF>;\n  };\n\
    \npublic:\n  using fpcar = FpcarReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class FpscrReg: public RegisterModel<address>\n  {\n \
    \ public:\n    using ioc = FieldModel<address, 0, 0x00000001>;\n    using dzc\
    \ = FieldModel<address, 1, 0x00000001>;\n    using ofc = FieldModel<address, 2,\
    \ 0x00000001>;\n    using ufc = FieldModel<address, 3, 0x00000001>;\n    using\
    \ ixc = FieldModel<address, 4, 0x00000001>;\n    using idc = FieldModel<address,\
    \ 7, 0x00000001>;\n    using rmode = FieldModel<address, 22, 0x00000003>;\n  \
    \  using fz = FieldModel<address, 24, 0x00000001>;\n    using dn = FieldModel<address,\
    \ 25, 0x00000001>;\n    using ahp = FieldModel<address, 26, 0x00000001>;\n   \
    \ using v = FieldModel<address, 28, 0x00000001>;\n    using c = FieldModel<address,\
    \ 29, 0x00000001>;\n    using z = FieldModel<address, 30, 0x00000001>;\n    using\
    \ n = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n  using fpscr = FpscrReg<BaseAddress\
    \ + 0x0008>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_FPU_H */\n"
  name: FPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_MPU_H\n#define DRAL_STM32F411_MPU_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass mpu\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000ED90;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Mpu_typerReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using separate = FieldModel<address, 0, 0x00000001>;\n  \
    \  using dregion = FieldModel<address, 8, 0x000000FF>;\n    using iregion = FieldModel<address,\
    \ 16, 0x000000FF>;\n  };\n\npublic:\n  using mpu_typer = Mpu_typerReg<BaseAddress\
    \ + 0x0000>;\n\nprivate:\n  template <uint32_t address>\n  class Mpu_ctrlReg:\
    \ public RegisterModel<address>\n  {\n  public:\n    using enable = FieldModel<address,\
    \ 0, 0x00000001>;\n    using hfnmiena = FieldModel<address, 1, 0x00000001>;\n\
    \    using privdefena = FieldModel<address, 2, 0x00000001>;\n  };\n\npublic:\n\
    \  using mpu_ctrl = Mpu_ctrlReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Mpu_rnrReg: public RegisterModel<address>\n  {\n\
    \  public:\n    using region = FieldModel<address, 0, 0x000000FF>;\n  };\n\npublic:\n\
    \  using mpu_rnr = Mpu_rnrReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class Mpu_rbarReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using region = FieldModel<address, 0, 0x0000000F>;\n    using valid = FieldModel<address,\
    \ 4, 0x00000001>;\n    using addr = FieldModel<address, 5, 0x07FFFFFF>;\n  };\n\
    \npublic:\n  using mpu_rbar = Mpu_rbarReg<BaseAddress + 0x000C>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class Mpu_rasrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using enable = FieldModel<address, 0, 0x00000001>;\n    using\
    \ size = FieldModel<address, 1, 0x0000001F>;\n    using srd = FieldModel<address,\
    \ 8, 0x000000FF>;\n    using b = FieldModel<address, 16, 0x00000001>;\n    using\
    \ c = FieldModel<address, 17, 0x00000001>;\n    using s = FieldModel<address,\
    \ 18, 0x00000001>;\n    using tex = FieldModel<address, 19, 0x00000007>;\n   \
    \ using ap = FieldModel<address, 24, 0x00000007>;\n    using xn = FieldModel<address,\
    \ 28, 0x00000001>;\n  };\n\npublic:\n  using mpu_rasr = Mpu_rasrReg<BaseAddress\
    \ + 0x0010>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_MPU_H */\n"
  name: MPU
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_STK_H\n#define DRAL_STM32F411_STK_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass stk\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000E010;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CtrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using enable = FieldModel<address, 0, 0x00000001>;\n    using\
    \ tickint = FieldModel<address, 1, 0x00000001>;\n    using clksource = FieldModel<address,\
    \ 2, 0x00000001>;\n    using countflag = FieldModel<address, 16, 0x00000001>;\n\
    \  };\n\npublic:\n  using ctrl = CtrlReg<BaseAddress + 0x0000>;\n\nprivate:\n\
    \  template <uint32_t address>\n  class LoadReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using reload = FieldModel<address, 0, 0x00FFFFFF>;\n  };\n\
    \npublic:\n  using load = LoadReg<BaseAddress + 0x0004>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class ValReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using current = FieldModel<address, 0, 0x00FFFFFF>;\n  };\n\npublic:\n  using\
    \ val = ValReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class CalibReg: public RegisterModel<address>\n  {\n  public:\n    using tenms\
    \ = FieldModel<address, 0, 0x00FFFFFF>;\n    using skew = FieldModel<address,\
    \ 30, 0x00000001>;\n    using noref = FieldModel<address, 31, 0x00000001>;\n \
    \ };\n\npublic:\n  using calib = CalibReg<BaseAddress + 0x000C>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_STK_H */\n"
  name: STK
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SCB_H\n#define DRAL_STM32F411_SCB_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass scb\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000ED00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CpuidReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using revision = FieldModel<address, 0, 0x0000000F>;\n  \
    \  using partno = FieldModel<address, 4, 0x00000FFF>;\n    using constant = FieldModel<address,\
    \ 16, 0x0000000F>;\n    using variant = FieldModel<address, 20, 0x0000000F>;\n\
    \    using implementer = FieldModel<address, 24, 0x000000FF>;\n  };\n\npublic:\n\
    \  using cpuid = CpuidReg<BaseAddress + 0x0000>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class IcsrReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using vectactive = FieldModel<address, 0, 0x000001FF>;\n    using rettobase\
    \ = FieldModel<address, 11, 0x00000001>;\n    using vectpending = FieldModel<address,\
    \ 12, 0x0000007F>;\n    using isrpending = FieldModel<address, 22, 0x00000001>;\n\
    \    using pendstclr = FieldModel<address, 25, 0x00000001>;\n    using pendstset\
    \ = FieldModel<address, 26, 0x00000001>;\n    using pendsvclr = FieldModel<address,\
    \ 27, 0x00000001>;\n    using pendsvset = FieldModel<address, 28, 0x00000001>;\n\
    \    using nmipendset = FieldModel<address, 31, 0x00000001>;\n  };\n\npublic:\n\
    \  using icsr = IcsrReg<BaseAddress + 0x0004>;\n\nprivate:\n  template <uint32_t\
    \ address>\n  class VtorReg: public RegisterModel<address>\n  {\n  public:\n \
    \   using tbloff = FieldModel<address, 9, 0x001FFFFF>;\n  };\n\npublic:\n  using\
    \ vtor = VtorReg<BaseAddress + 0x0008>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AircrReg: public RegisterModel<address>\n  {\n  public:\n    using vectreset\
    \ = FieldModel<address, 0, 0x00000001>;\n    using vectclractive = FieldModel<address,\
    \ 1, 0x00000001>;\n    using sysresetreq = FieldModel<address, 2, 0x00000001>;\n\
    \    using prigroup = FieldModel<address, 8, 0x00000007>;\n    using endianess\
    \ = FieldModel<address, 15, 0x00000001>;\n    using vectkeystat = FieldModel<address,\
    \ 16, 0x0000FFFF>;\n  };\n\npublic:\n  using aircr = AircrReg<BaseAddress + 0x000C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class ScrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using sleeponexit = FieldModel<address, 1, 0x00000001>;\n\
    \    using sleepdeep = FieldModel<address, 2, 0x00000001>;\n    using seveonpend\
    \ = FieldModel<address, 4, 0x00000001>;\n  };\n\npublic:\n  using scr = ScrReg<BaseAddress\
    \ + 0x0010>;\n\nprivate:\n  template <uint32_t address>\n  class CcrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using nonbasethrdena = FieldModel<address,\
    \ 0, 0x00000001>;\n    using usersetmpend = FieldModel<address, 1, 0x00000001>;\n\
    \    using unalign__trp = FieldModel<address, 3, 0x00000001>;\n    using div_0_trp\
    \ = FieldModel<address, 4, 0x00000001>;\n    using bfhfnmign = FieldModel<address,\
    \ 8, 0x00000001>;\n    using stkalign = FieldModel<address, 9, 0x00000001>;\n\
    \  };\n\npublic:\n  using ccr = CcrReg<BaseAddress + 0x0014>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Shpr1Reg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pri_4 = FieldModel<address, 0, 0x000000FF>;\n    using pri_5\
    \ = FieldModel<address, 8, 0x000000FF>;\n    using pri_6 = FieldModel<address,\
    \ 16, 0x000000FF>;\n  };\n\npublic:\n  using shpr1 = Shpr1Reg<BaseAddress + 0x0018>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Shpr2Reg: public RegisterModel<address>\n\
    \  {\n  public:\n    using pri_11 = FieldModel<address, 24, 0x000000FF>;\n  };\n\
    \npublic:\n  using shpr2 = Shpr2Reg<BaseAddress + 0x001C>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class Shpr3Reg: public RegisterModel<address>\n  {\n \
    \ public:\n    using pri_14 = FieldModel<address, 16, 0x000000FF>;\n    using\
    \ pri_15 = FieldModel<address, 24, 0x000000FF>;\n  };\n\npublic:\n  using shpr3\
    \ = Shpr3Reg<BaseAddress + 0x0020>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class ShcsrReg: public RegisterModel<address>\n  {\n  public:\n    using memfaultact\
    \ = FieldModel<address, 0, 0x00000001>;\n    using busfaultact = FieldModel<address,\
    \ 1, 0x00000001>;\n    using usgfaultact = FieldModel<address, 3, 0x00000001>;\n\
    \    using svcallact = FieldModel<address, 7, 0x00000001>;\n    using monitoract\
    \ = FieldModel<address, 8, 0x00000001>;\n    using pendsvact = FieldModel<address,\
    \ 10, 0x00000001>;\n    using systickact = FieldModel<address, 11, 0x00000001>;\n\
    \    using usgfaultpended = FieldModel<address, 12, 0x00000001>;\n    using memfaultpended\
    \ = FieldModel<address, 13, 0x00000001>;\n    using busfaultpended = FieldModel<address,\
    \ 14, 0x00000001>;\n    using svcallpended = FieldModel<address, 15, 0x00000001>;\n\
    \    using memfaultena = FieldModel<address, 16, 0x00000001>;\n    using busfaultena\
    \ = FieldModel<address, 17, 0x00000001>;\n    using usgfaultena = FieldModel<address,\
    \ 18, 0x00000001>;\n  };\n\npublic:\n  using shcsr = ShcsrReg<BaseAddress + 0x0024>;\n\
    \nprivate:\n  template <uint32_t address>\n  class Cfsr_ufsr_bfsr_mmfsrReg: public\
    \ RegisterModel<address>\n  {\n  public:\n    using iaccviol = FieldModel<address,\
    \ 1, 0x00000001>;\n    using munstkerr = FieldModel<address, 3, 0x00000001>;\n\
    \    using mstkerr = FieldModel<address, 4, 0x00000001>;\n    using mlsperr =\
    \ FieldModel<address, 5, 0x00000001>;\n    using mmarvalid = FieldModel<address,\
    \ 7, 0x00000001>;\n    using ibuserr = FieldModel<address, 8, 0x00000001>;\n \
    \   using preciserr = FieldModel<address, 9, 0x00000001>;\n    using impreciserr\
    \ = FieldModel<address, 10, 0x00000001>;\n    using unstkerr = FieldModel<address,\
    \ 11, 0x00000001>;\n    using stkerr = FieldModel<address, 12, 0x00000001>;\n\
    \    using lsperr = FieldModel<address, 13, 0x00000001>;\n    using bfarvalid\
    \ = FieldModel<address, 15, 0x00000001>;\n    using undefinstr = FieldModel<address,\
    \ 16, 0x00000001>;\n    using invstate = FieldModel<address, 17, 0x00000001>;\n\
    \    using invpc = FieldModel<address, 18, 0x00000001>;\n    using nocp = FieldModel<address,\
    \ 19, 0x00000001>;\n    using unaligned = FieldModel<address, 24, 0x00000001>;\n\
    \    using divbyzero = FieldModel<address, 25, 0x00000001>;\n  };\n\npublic:\n\
    \  using cfsr_ufsr_bfsr_mmfsr = Cfsr_ufsr_bfsr_mmfsrReg<BaseAddress + 0x0028>;\n\
    \nprivate:\n  template <uint32_t address>\n  class HfsrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using vecttbl = FieldModel<address, 1, 0x00000001>;\n   \
    \ using forced = FieldModel<address, 30, 0x00000001>;\n    using debug_vt = FieldModel<address,\
    \ 31, 0x00000001>;\n  };\n\npublic:\n  using hfsr = HfsrReg<BaseAddress + 0x002C>;\n\
    \nprivate:\n  template <uint32_t address>\n  class MmfarReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using mmfar = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\
    \npublic:\n  using mmfar = MmfarReg<BaseAddress + 0x0034>;\n\nprivate:\n  template\
    \ <uint32_t address>\n  class BfarReg: public RegisterModel<address>\n  {\n  public:\n\
    \    using bfar = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using\
    \ bfar = BfarReg<BaseAddress + 0x0038>;\n\nprivate:\n  template <uint32_t address>\n\
    \  class AfsrReg: public RegisterModel<address>\n  {\n  public:\n    using impdef\
    \ = FieldModel<address, 0, 0xFFFFFFFF>;\n  };\n\npublic:\n  using afsr = AfsrReg<BaseAddress\
    \ + 0x003C>;\n\n};\n\n}\n\n#endif /* DRAL_STM32F411_SCB_H */\n"
  name: SCB
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_NVIC_STIR_H\n#define DRAL_STM32F411_NVIC_STIR_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass nvic_stir\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000EF00;\n\nprivate:\n\
    \  template <uint32_t address>\n  class StirReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using intid = FieldModel<address, 0, 0x000001FF>;\n  };\n\
    \npublic:\n  using stir = StirReg<BaseAddress + 0x0000>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_NVIC_STIR_H */\n"
  name: NVIC_STIR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_FPU_CPACR_H\n#define DRAL_STM32F411_FPU_CPACR_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass fpu_cpacr\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000ED88;\n\nprivate:\n\
    \  template <uint32_t address>\n  class CpacrReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using cp = FieldModel<address, 20, 0x0000000F>;\n  };\n\n\
    public:\n  using cpacr = CpacrReg<BaseAddress + 0x0000>;\n\n};\n\n}\n\n#endif\
    \ /* DRAL_STM32F411_FPU_CPACR_H */\n"
  name: FPU_CPACR
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_STM32F411_SCB_ACTRL_H\n#define DRAL_STM32F411_SCB_ACTRL_H\n\
    \n#include \"register_model.h\"\n\nnamespace dral::stm32f411 {\n\nclass scb_actrl\n\
    {\npublic:\n  static constexpr uint32_t BaseAddress = 0xE000E008;\n\nprivate:\n\
    \  template <uint32_t address>\n  class ActrlReg: public RegisterModel<address>\n\
    \  {\n  public:\n    using dismcycint = FieldModel<address, 0, 0x00000001>;\n\
    \    using disdefwbuf = FieldModel<address, 1, 0x00000001>;\n    using disfold\
    \ = FieldModel<address, 2, 0x00000001>;\n    using disfpca = FieldModel<address,\
    \ 8, 0x00000001>;\n    using disoofp = FieldModel<address, 9, 0x00000001>;\n \
    \ };\n\npublic:\n  using actrl = ActrlReg<BaseAddress + 0x0000>;\n\n};\n\n}\n\n\
    #endif /* DRAL_STM32F411_SCB_ACTRL_H */\n"
  name: SCB_ACTRL
- content: "/*\n * D-RAL - Device Register Access Layer\n * https://github.com/gembcior/d-ral\n\
    \ *\n * MIT License\n * \n * Copyright (c) 2023 Gembcior\n * \n * Permission is\
    \ hereby granted, free of charge, to any person obtaining a copy\n * of this software\
    \ and associated documentation files (the \"Software\"), to deal\n * in the Software\
    \ without restriction, including without limitation the rights\n * to use, copy,\
    \ modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the\
    \ Software, and to permit persons to whom the Software is\n * furnished to do\
    \ so, subject to the following conditions:\n * \n * The above copyright notice\
    \ and this permission notice shall be included in all\n * copies or substantial\
    \ portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\
    \ WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE\
    \ WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\
    \ IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\
    \ ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\
    \ DEALINGS IN THE\n * SOFTWARE.\n *\n * This is an auto generated file. Do not\
    \ modify!\n */\n\n#ifndef DRAL_REGISTER_MODEL_H\n#define DRAL_REGISTER_MODEL_H\n\
    \n#include <cstdint>\n\nnamespace dral {\n\ntemplate <uint32_t address>\nclass\
    \ RegisterModel\n{\npublic:\n  static constexpr uint32_t Address = address;\n\n\
    public:\n  static uint32_t read()\n  {\n    volatile uint32_t* reg = reinterpret_cast<volatile\
    \ uint32_t*>(address);\n    return *reg;\n  }\n\n  static void write(uint32_t\
    \ value)\n  {\n    volatile uint32_t* reg = reinterpret_cast<volatile uint32_t*>(address);\n\
    \    *reg = value;\n  }\n};\n\n\ntemplate <uint32_t address, uint32_t bankOffset>\n\
    class RegisterBankModel\n{\npublic:\n  static constexpr uint32_t Address = address;\n\
    \npublic:\n  static uint32_t read(uint32_t bank)\n  {\n    volatile uint32_t*\
    \ reg = reinterpret_cast<volatile uint32_t*>(address + (bankOffset * bank));\n\
    \    return *reg;\n  }\n\n  static void write(uint32_t bank, uint32_t value)\n\
    \  {\n    volatile uint32_t* reg = reinterpret_cast<volatile uint32_t*>(address\
    \ + (bankOffset * bank));\n    *reg = value;\n  }\n};\n\n\ntemplate <uint32_t\
    \ address, uint32_t position, uint32_t mask, uint32_t bankOffset = 0>\nclass FieldModel\n\
    {\npublic:\n  static constexpr uint32_t Mask = mask;\n  static constexpr uint32_t\
    \ Position = position;\n\npublic:\n  static void write(uint32_t bank, uint32_t\
    \ value)\n  {\n    volatile uint32_t* reg = reinterpret_cast<volatile uint32_t*>(address\
    \ + (bankOffset * bank));\n    *reg = (*reg & ~(mask << position)) | ((value &\
    \ mask) << position);\n  }\n\n  static uint32_t read(uint32_t bank)\n  {\n   \
    \ volatile uint32_t* reg = reinterpret_cast<volatile uint32_t*>(address + (bankOffset\
    \ * bank));\n    return (*reg >> position) & mask;\n  }\n\n  static uint32_t set(uint32_t\
    \ value)\n  {\n    return (value & mask) << position;\n  }\n\n  static void set(uint32_t&\
    \ reg, uint32_t value)\n  {\n    reg |= (value & mask) << position;\n  }\n\n \
    \ static uint32_t clear()\n  {\n    return ~mask;\n  }\n\n  static void clear(uint32_t&\
    \ reg)\n  {\n    reg &= ~mask;\n  }\n\n  static uint32_t getFromRegValue(uint32_t\
    \ regValue)\n  {\n    return (regValue >> position) & mask;\n  }\n};\n\n\ntemplate\
    \ <uint32_t address, uint32_t position, uint32_t mask>\nclass FieldModel<address,\
    \ position, mask, 0>\n{\npublic:\n  static constexpr uint32_t Mask = mask;\n \
    \ static constexpr uint32_t Position = position;\n\npublic:\n  static void write(uint32_t\
    \ value)\n  {\n    volatile uint32_t* reg = reinterpret_cast<volatile uint32_t*>(address);\n\
    \    *reg = (*reg & ~(mask << position)) | ((value & mask) << position);\n  }\n\
    \n  static uint32_t read()\n  {\n    volatile uint32_t* reg = reinterpret_cast<volatile\
    \ uint32_t*>(address);\n    return (*reg >> position) & mask;\n  }\n\n  static\
    \ uint32_t set(uint32_t value)\n  {\n    return (value & mask) << position;\n\
    \  }\n\n  static void set(uint32_t& reg, uint32_t value)\n  {\n    reg |= (value\
    \ & mask) << position;\n  }\n\n  static uint32_t clear()\n  {\n    return ~mask;\n\
    \  }\n\n  static void clear(uint32_t& reg)\n  {\n    reg &= ~mask;\n  }\n\n  static\
    \ uint32_t getFromRegValue(uint32_t regValue)\n  {\n    return (regValue >> position)\
    \ & mask;\n  }\n};\n\n} // namespace\n\n#endif /* DRAL_REGISTER_MODEL_H */\n"
  name: register_model
