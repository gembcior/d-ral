- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Dcmi(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"control register 1\", address + 0x0000,\
    \ 32, \"\", 0x0000, proxy)\n            self.capture = Field(\"capture\", \"Capture\
    \ enable\", self._address, 0, 0x0001, 1, proxy)\n            self.cm = Field(\"\
    cm\", \"Capture mode\", self._address, 1, 0x0001, 1, proxy)\n            self.crop\
    \ = Field(\"crop\", \"Crop feature\", self._address, 2, 0x0001, 1, proxy)\n  \
    \          self.jpeg = Field(\"jpeg\", \"JPEG format\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.ess = Field(\"ess\", \"Embedded synchronization\n\
    \                          select\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.pckpol = Field(\"pckpol\", \"Pixel clock polarity\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.hspol = Field(\"hspol\", \"Horizontal\
    \ synchronization\n                          polarity\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.vspol = Field(\"vspol\", \"Vertical synchronization\n\
    \                          polarity\", self._address, 7, 0x0001, 1, proxy)\n \
    \           self.edm = Field(\"edm\", \"Extended data mode\", self._address, 10,\
    \ 0x0003, 2, proxy)\n            self.enable = Field(\"enable\", \"DCMI enable\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bsm = Field(\"bsm\",\
    \ \"Byte Select mode\", self._address, 16, 0x0003, 2, proxy)\n            self.oebs\
    \ = Field(\"oebs\", \"Odd/Even Byte Select\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.lsm = Field(\"lsm\", \"Line Select mode\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.oels = Field(\"oels\", \"Odd/Even Line Select\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fcrc = Field(\"fcrc\"\
    , \"Frame capture rate control\", self._address, 8, 0x0003, 2, proxy)\n    \n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"status register\", address + 0x0004, 32,\
    \ \"read-only\", 0x0000, proxy)\n            self.fne = Field(\"fne\", \"FIFO\
    \ not empty\", self._address, 2, 0x0001, 1, proxy)\n            self.vsync = Field(\"\
    vsync\", \"VSYNC\", self._address, 1, 0x0001, 1, proxy)\n            self.hsync\
    \ = Field(\"hsync\", \"HSYNC\", self._address, 0, 0x0001, 1, proxy)\n    \n  \
    \  class RisRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RIS\", \"raw interrupt status register\", address\
    \ + 0x0008, 32, \"read-only\", 0x0000, proxy)\n            self.line_ris = Field(\"\
    line_ris\", \"Line raw interrupt status\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.vsync_ris = Field(\"vsync_ris\", \"VSYNC raw interrupt status\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.err_ris = Field(\"err_ris\"\
    , \"Synchronization error raw interrupt\n                          status\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.ovr_ris = Field(\"ovr_ris\", \"Overrun\
    \ raw interrupt\n                          status\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.frame_ris = Field(\"frame_ris\", \"Capture complete\
    \ raw interrupt\n                          status\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class IerRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"IER\", \"interrupt enable register\"\
    , address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.line_ie\
    \ = Field(\"line_ie\", \"Line interrupt enable\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.vsync_ie = Field(\"vsync_ie\", \"VSYNC interrupt enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.err_ie = Field(\"err_ie\"\
    , \"Synchronization error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.ovr_ie = Field(\"ovr_ie\", \"Overrun\
    \ interrupt enable\", self._address, 1, 0x0001, 1, proxy)\n            self.frame_ie\
    \ = Field(\"frame_ie\", \"Capture complete interrupt\n                       \
    \   enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class MisRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    MIS\", \"masked interrupt status\n              register\", address + 0x0010,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.line_mis = Field(\"line_mis\"\
    , \"Line masked interrupt\n                          status\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.vsync_mis = Field(\"vsync_mis\", \"VSYNC\
    \ masked interrupt\n                          status\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.err_mis = Field(\"err_mis\", \"Synchronization error\
    \ masked interrupt\n                          status\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.ovr_mis = Field(\"ovr_mis\", \"Overrun masked interrupt\n\
    \                          status\", self._address, 1, 0x0001, 1, proxy)\n   \
    \         self.frame_mis = Field(\"frame_mis\", \"Capture complete masked interrupt\n\
    \                          status\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class IcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ICR\", \"interrupt clear register\", address +\
    \ 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.line_isc = Field(\"\
    line_isc\", \"line interrupt status\n                          clear\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.vsync_isc = Field(\"vsync_isc\", \"Vertical\
    \ synch interrupt status\n                          clear\", self._address, 3,\
    \ 0x0001, 1, proxy)\n            self.err_isc = Field(\"err_isc\", \"Synchronization\
    \ error interrupt status\n                          clear\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.ovr_isc = Field(\"ovr_isc\", \"Overrun interrupt\
    \ status\n                          clear\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.frame_isc = Field(\"frame_isc\", \"Capture complete interrupt\
    \ status\n                          clear\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class EscrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"ESCR\", \"embedded synchronization code\n\
    \              register\", address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.fec = Field(\"fec\", \"Frame end delimiter code\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n            self.lec = Field(\"lec\", \"Line end delimiter\
    \ code\", self._address, 16, 0x00FF, 8, proxy)\n            self.lsc = Field(\"\
    lsc\", \"Line start delimiter code\", self._address, 8, 0x00FF, 8, proxy)\n  \
    \          self.fsc = Field(\"fsc\", \"Frame start delimiter code\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class EsurRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ESUR\", \"embedded synchronization\
    \ unmask\n              register\", address + 0x001C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.feu = Field(\"feu\", \"Frame end delimiter unmask\"\
    , self._address, 24, 0x00FF, 8, proxy)\n            self.leu = Field(\"leu\",\
    \ \"Line end delimiter unmask\", self._address, 16, 0x00FF, 8, proxy)\n      \
    \      self.lsu = Field(\"lsu\", \"Line start delimiter\n                    \
    \      unmask\", self._address, 8, 0x00FF, 8, proxy)\n            self.fsu = Field(\"\
    fsu\", \"Frame start delimiter\n                          unmask\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class CwstrtRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CWSTRT\", \"\
    crop window start\", address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n  \
    \          self.vst = Field(\"vst\", \"Vertical start line count\", self._address,\
    \ 16, 0x1FFF, 13, proxy)\n            self.hoffcnt = Field(\"hoffcnt\", \"Horizontal\
    \ offset count\", self._address, 0, 0x3FFF, 14, proxy)\n    \n    class CwsizeRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CWSIZE\", \"crop window size\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.vline = Field(\"vline\", \"Vertical line count\", self._address,\
    \ 16, 0x3FFF, 14, proxy)\n            self.capcnt = Field(\"capcnt\", \"Capture\
    \ count\", self._address, 0, 0x3FFF, 14, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"data register\", address + 0x0028, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.byte3 = Field(\"byte3\", \"Data byte 3\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.byte2 = Field(\"byte2\", \"Data byte 2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.byte1 = Field(\"byte1\"\
    , \"Data byte 1\", self._address, 8, 0x00FF, 8, proxy)\n            self.byte0\
    \ = Field(\"byte0\", \"Data byte 0\", self._address, 0, 0x00FF, 8, proxy)\n  \
    \  \n    def __init__(self, proxy):\n        super().__init__(\"dcmi\", \"Digital\
    \ camera interface\", 0x50050000)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.sr = self.SrRegister(self.address, proxy)\n        self.ris\
    \ = self.RisRegister(self.address, proxy)\n        self.ier = self.IerRegister(self.address,\
    \ proxy)\n        self.mis = self.MisRegister(self.address, proxy)\n        self.icr\
    \ = self.IcrRegister(self.address, proxy)\n        self.escr = self.EscrRegister(self.address,\
    \ proxy)\n        self.esur = self.EsurRegister(self.address, proxy)\n       \
    \ self.cwstrt = self.CwstrtRegister(self.address, proxy)\n        self.cwsize\
    \ = self.CwsizeRegister(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n"
  name: DCMI
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Fmc(Peripheral):\n\
    \    class Bcr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BCR1\", \"SRAM/NOR-Flash chip-select control register\n\
    \              1\", address + 0x0000, 32, \"read-write\", 0x30D0, proxy)\n   \
    \         self.cclken = Field(\"cclken\", \"CCLKEN\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.cburstrw = Field(\"cburstrw\", \"CBURSTRW\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.asyncwait = Field(\"asyncwait\", \"\
    ASYNCWAIT\", self._address, 15, 0x0001, 1, proxy)\n            self.extmod = Field(\"\
    extmod\", \"EXTMOD\", self._address, 14, 0x0001, 1, proxy)\n            self.waiten\
    \ = Field(\"waiten\", \"WAITEN\", self._address, 13, 0x0001, 1, proxy)\n     \
    \       self.wren = Field(\"wren\", \"WREN\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.waitcfg = Field(\"waitcfg\", \"WAITCFG\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.waitpol = Field(\"waitpol\", \"WAITPOL\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.bursten = Field(\"bursten\"\
    , \"BURSTEN\", self._address, 8, 0x0001, 1, proxy)\n            self.faccen =\
    \ Field(\"faccen\", \"FACCEN\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.mwid = Field(\"mwid\", \"MWID\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.mtyp = Field(\"mtyp\", \"MTYP\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.muxen = Field(\"muxen\", \"MUXEN\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.mbken = Field(\"mbken\", \"MBKEN\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Btr1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BTR1\", \"SRAM/NOR-Flash chip-select\
    \ timing register\n              1\", address + 0x0004, 32, \"read-write\", 0xFFFFFFFF,\
    \ proxy)\n            self.accmod = Field(\"accmod\", \"ACCMOD\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.datlat = Field(\"datlat\", \"DATLAT\"\
    , self._address, 24, 0x000F, 4, proxy)\n            self.clkdiv = Field(\"clkdiv\"\
    , \"CLKDIV\", self._address, 20, 0x000F, 4, proxy)\n            self.busturn =\
    \ Field(\"busturn\", \"BUSTURN\", self._address, 16, 0x000F, 4, proxy)\n     \
    \       self.datast = Field(\"datast\", \"DATAST\", self._address, 8, 0x00FF,\
    \ 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\", \"ADDSET\"\
    , self._address, 0, 0x000F, 4, proxy)\n    \n    class Bcr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BCR2\", \"SRAM/NOR-Flash chip-select control register\n              2\", address\
    \ + 0x0008, 32, \"read-write\", 0x30D0, proxy)\n            self.cburstrw = Field(\"\
    cburstrw\", \"CBURSTRW\", self._address, 19, 0x0001, 1, proxy)\n            self.asyncwait\
    \ = Field(\"asyncwait\", \"ASYNCWAIT\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.extmod = Field(\"extmod\", \"EXTMOD\", self._address, 14, 0x0001,\
    \ 1, proxy)\n            self.waiten = Field(\"waiten\", \"WAITEN\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.wren = Field(\"wren\", \"WREN\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.waitcfg = Field(\"waitcfg\", \"WAITCFG\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.wrapmod = Field(\"wrapmod\"\
    , \"WRAPMOD\", self._address, 10, 0x0001, 1, proxy)\n            self.waitpol\
    \ = Field(\"waitpol\", \"WAITPOL\", self._address, 9, 0x0001, 1, proxy)\n    \
    \        self.bursten = Field(\"bursten\", \"BURSTEN\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.faccen = Field(\"faccen\", \"FACCEN\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.mwid = Field(\"mwid\", \"MWID\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.mtyp = Field(\"mtyp\", \"MTYP\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.muxen = Field(\"muxen\", \"MUXEN\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.mbken = Field(\"mbken\", \"MBKEN\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Btr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BTR2\", \"SRAM/NOR-Flash chip-select\
    \ timing register\n              2\", address + 0x000C, 32, \"read-write\", 0xFFFFFFFF,\
    \ proxy)\n            self.accmod = Field(\"accmod\", \"ACCMOD\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.datlat = Field(\"datlat\", \"DATLAT\"\
    , self._address, 24, 0x000F, 4, proxy)\n            self.clkdiv = Field(\"clkdiv\"\
    , \"CLKDIV\", self._address, 20, 0x000F, 4, proxy)\n            self.busturn =\
    \ Field(\"busturn\", \"BUSTURN\", self._address, 16, 0x000F, 4, proxy)\n     \
    \       self.datast = Field(\"datast\", \"DATAST\", self._address, 8, 0x00FF,\
    \ 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\", \"ADDSET\"\
    , self._address, 0, 0x000F, 4, proxy)\n    \n    class Bcr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BCR3\", \"SRAM/NOR-Flash chip-select control register\n              3\", address\
    \ + 0x0010, 32, \"read-write\", 0x30D0, proxy)\n            self.cburstrw = Field(\"\
    cburstrw\", \"CBURSTRW\", self._address, 19, 0x0001, 1, proxy)\n            self.asyncwait\
    \ = Field(\"asyncwait\", \"ASYNCWAIT\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.extmod = Field(\"extmod\", \"EXTMOD\", self._address, 14, 0x0001,\
    \ 1, proxy)\n            self.waiten = Field(\"waiten\", \"WAITEN\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.wren = Field(\"wren\", \"WREN\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.waitcfg = Field(\"waitcfg\", \"WAITCFG\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.wrapmod = Field(\"wrapmod\"\
    , \"WRAPMOD\", self._address, 10, 0x0001, 1, proxy)\n            self.waitpol\
    \ = Field(\"waitpol\", \"WAITPOL\", self._address, 9, 0x0001, 1, proxy)\n    \
    \        self.bursten = Field(\"bursten\", \"BURSTEN\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.faccen = Field(\"faccen\", \"FACCEN\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.mwid = Field(\"mwid\", \"MWID\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.mtyp = Field(\"mtyp\", \"MTYP\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.muxen = Field(\"muxen\", \"MUXEN\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.mbken = Field(\"mbken\", \"MBKEN\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Btr3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BTR3\", \"SRAM/NOR-Flash chip-select\
    \ timing register\n              3\", address + 0x0014, 32, \"read-write\", 0xFFFFFFFF,\
    \ proxy)\n            self.accmod = Field(\"accmod\", \"ACCMOD\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.datlat = Field(\"datlat\", \"DATLAT\"\
    , self._address, 24, 0x000F, 4, proxy)\n            self.clkdiv = Field(\"clkdiv\"\
    , \"CLKDIV\", self._address, 20, 0x000F, 4, proxy)\n            self.busturn =\
    \ Field(\"busturn\", \"BUSTURN\", self._address, 16, 0x000F, 4, proxy)\n     \
    \       self.datast = Field(\"datast\", \"DATAST\", self._address, 8, 0x00FF,\
    \ 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\", \"ADDSET\"\
    , self._address, 0, 0x000F, 4, proxy)\n    \n    class Bcr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BCR4\", \"SRAM/NOR-Flash chip-select control register\n              4\", address\
    \ + 0x0018, 32, \"read-write\", 0x30D0, proxy)\n            self.cburstrw = Field(\"\
    cburstrw\", \"CBURSTRW\", self._address, 19, 0x0001, 1, proxy)\n            self.asyncwait\
    \ = Field(\"asyncwait\", \"ASYNCWAIT\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.extmod = Field(\"extmod\", \"EXTMOD\", self._address, 14, 0x0001,\
    \ 1, proxy)\n            self.waiten = Field(\"waiten\", \"WAITEN\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.wren = Field(\"wren\", \"WREN\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.waitcfg = Field(\"waitcfg\", \"WAITCFG\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.wrapmod = Field(\"wrapmod\"\
    , \"WRAPMOD\", self._address, 10, 0x0001, 1, proxy)\n            self.waitpol\
    \ = Field(\"waitpol\", \"WAITPOL\", self._address, 9, 0x0001, 1, proxy)\n    \
    \        self.bursten = Field(\"bursten\", \"BURSTEN\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.faccen = Field(\"faccen\", \"FACCEN\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.mwid = Field(\"mwid\", \"MWID\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.mtyp = Field(\"mtyp\", \"MTYP\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.muxen = Field(\"muxen\", \"MUXEN\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.mbken = Field(\"mbken\", \"MBKEN\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Btr4Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BTR4\", \"SRAM/NOR-Flash chip-select\
    \ timing register\n              4\", address + 0x001C, 32, \"read-write\", 0xFFFFFFFF,\
    \ proxy)\n            self.accmod = Field(\"accmod\", \"ACCMOD\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.datlat = Field(\"datlat\", \"DATLAT\"\
    , self._address, 24, 0x000F, 4, proxy)\n            self.clkdiv = Field(\"clkdiv\"\
    , \"CLKDIV\", self._address, 20, 0x000F, 4, proxy)\n            self.busturn =\
    \ Field(\"busturn\", \"BUSTURN\", self._address, 16, 0x000F, 4, proxy)\n     \
    \       self.datast = Field(\"datast\", \"DATAST\", self._address, 8, 0x00FF,\
    \ 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\", \"ADDSET\"\
    , self._address, 0, 0x000F, 4, proxy)\n    \n    class Pcr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PCR2\", \"PC Card/NAND Flash control register\n              2\", address + 0x0060,\
    \ 32, \"read-write\", 0x0018, proxy)\n            self.eccps = Field(\"eccps\"\
    , \"ECCPS\", self._address, 17, 0x0007, 3, proxy)\n            self.tar = Field(\"\
    tar\", \"TAR\", self._address, 13, 0x000F, 4, proxy)\n            self.tclr =\
    \ Field(\"tclr\", \"TCLR\", self._address, 9, 0x000F, 4, proxy)\n            self.eccen\
    \ = Field(\"eccen\", \"ECCEN\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.pwid = Field(\"pwid\", \"PWID\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.ptyp = Field(\"ptyp\", \"PTYP\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.pbken = Field(\"pbken\", \"PBKEN\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.pwaiten = Field(\"pwaiten\", \"PWAITEN\"\
    , self._address, 1, 0x0001, 1, proxy)\n    \n    class Sr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR2\", \"FIFO status and interrupt register\n              2\", address + 0x0064,\
    \ 32, \"\", 0x0040, proxy)\n            self.fempt = Field(\"fempt\", \"FEMPT\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.ifen = Field(\"ifen\"\
    , \"IFEN\", self._address, 5, 0x0001, 1, proxy)\n            self.ilen = Field(\"\
    ilen\", \"ILEN\", self._address, 4, 0x0001, 1, proxy)\n            self.iren =\
    \ Field(\"iren\", \"IREN\", self._address, 3, 0x0001, 1, proxy)\n            self.ifs\
    \ = Field(\"ifs\", \"IFS\", self._address, 2, 0x0001, 1, proxy)\n            self.ils\
    \ = Field(\"ils\", \"ILS\", self._address, 1, 0x0001, 1, proxy)\n            self.irs\
    \ = Field(\"irs\", \"IRS\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ Pmem2Register(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"PMEM2\", \"Common memory space timing register\n \
    \             2\", address + 0x0068, 32, \"read-write\", 0xFCFCFCFC, proxy)\n\
    \            self.memhizx = Field(\"memhizx\", \"MEMHIZx\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.memholdx = Field(\"memholdx\", \"MEMHOLDx\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.memwaitx = Field(\"memwaitx\"\
    , \"MEMWAITx\", self._address, 8, 0x00FF, 8, proxy)\n            self.memsetx\
    \ = Field(\"memsetx\", \"MEMSETx\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class Patt2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"PATT2\", \"Attribute memory space timing register\n\
    \              2\", address + 0x006C, 32, \"read-write\", 0xFCFCFCFC, proxy)\n\
    \            self.atthizx = Field(\"atthizx\", \"ATTHIZx\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.attholdx = Field(\"attholdx\", \"ATTHOLDx\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.attwaitx = Field(\"attwaitx\"\
    , \"ATTWAITx\", self._address, 8, 0x00FF, 8, proxy)\n            self.attsetx\
    \ = Field(\"attsetx\", \"ATTSETx\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class Eccr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ECCR2\", \"ECC result register 2\", address +\
    \ 0x0074, 32, \"read-only\", 0x0000, proxy)\n            self.eccx = Field(\"\
    eccx\", \"ECCx\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Pcr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PCR3\", \"PC Card/NAND Flash control register\n              3\", address + 0x0080,\
    \ 32, \"read-write\", 0x0018, proxy)\n            self.eccps = Field(\"eccps\"\
    , \"ECCPS\", self._address, 17, 0x0007, 3, proxy)\n            self.tar = Field(\"\
    tar\", \"TAR\", self._address, 13, 0x000F, 4, proxy)\n            self.tclr =\
    \ Field(\"tclr\", \"TCLR\", self._address, 9, 0x000F, 4, proxy)\n            self.eccen\
    \ = Field(\"eccen\", \"ECCEN\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.pwid = Field(\"pwid\", \"PWID\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.ptyp = Field(\"ptyp\", \"PTYP\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.pbken = Field(\"pbken\", \"PBKEN\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.pwaiten = Field(\"pwaiten\", \"PWAITEN\"\
    , self._address, 1, 0x0001, 1, proxy)\n    \n    class Sr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR3\", \"FIFO status and interrupt register\n              3\", address + 0x0084,\
    \ 32, \"\", 0x0040, proxy)\n            self.fempt = Field(\"fempt\", \"FEMPT\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.ifen = Field(\"ifen\"\
    , \"IFEN\", self._address, 5, 0x0001, 1, proxy)\n            self.ilen = Field(\"\
    ilen\", \"ILEN\", self._address, 4, 0x0001, 1, proxy)\n            self.iren =\
    \ Field(\"iren\", \"IREN\", self._address, 3, 0x0001, 1, proxy)\n            self.ifs\
    \ = Field(\"ifs\", \"IFS\", self._address, 2, 0x0001, 1, proxy)\n            self.ils\
    \ = Field(\"ils\", \"ILS\", self._address, 1, 0x0001, 1, proxy)\n            self.irs\
    \ = Field(\"irs\", \"IRS\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ Pmem3Register(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"PMEM3\", \"Common memory space timing register\n \
    \             3\", address + 0x0088, 32, \"read-write\", 0xFCFCFCFC, proxy)\n\
    \            self.memhizx = Field(\"memhizx\", \"MEMHIZx\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.memholdx = Field(\"memholdx\", \"MEMHOLDx\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.memwaitx = Field(\"memwaitx\"\
    , \"MEMWAITx\", self._address, 8, 0x00FF, 8, proxy)\n            self.memsetx\
    \ = Field(\"memsetx\", \"MEMSETx\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class Patt3Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"PATT3\", \"Attribute memory space timing register\n\
    \              3\", address + 0x008C, 32, \"read-write\", 0xFCFCFCFC, proxy)\n\
    \            self.atthizx = Field(\"atthizx\", \"ATTHIZx\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.attholdx = Field(\"attholdx\", \"ATTHOLDx\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.attwaitx = Field(\"attwaitx\"\
    , \"ATTWAITx\", self._address, 8, 0x00FF, 8, proxy)\n            self.attsetx\
    \ = Field(\"attsetx\", \"ATTSETx\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class Eccr3Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ECCR3\", \"ECC result register 3\", address +\
    \ 0x0094, 32, \"read-only\", 0x0000, proxy)\n            self.eccx = Field(\"\
    eccx\", \"ECCx\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Pcr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PCR4\", \"PC Card/NAND Flash control register\n              4\", address + 0x00A0,\
    \ 32, \"read-write\", 0x0018, proxy)\n            self.eccps = Field(\"eccps\"\
    , \"ECCPS\", self._address, 17, 0x0007, 3, proxy)\n            self.tar = Field(\"\
    tar\", \"TAR\", self._address, 13, 0x000F, 4, proxy)\n            self.tclr =\
    \ Field(\"tclr\", \"TCLR\", self._address, 9, 0x000F, 4, proxy)\n            self.eccen\
    \ = Field(\"eccen\", \"ECCEN\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.pwid = Field(\"pwid\", \"PWID\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.ptyp = Field(\"ptyp\", \"PTYP\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.pbken = Field(\"pbken\", \"PBKEN\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.pwaiten = Field(\"pwaiten\", \"PWAITEN\"\
    , self._address, 1, 0x0001, 1, proxy)\n    \n    class Sr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR4\", \"FIFO status and interrupt register\n              4\", address + 0x00A4,\
    \ 32, \"\", 0x0040, proxy)\n            self.fempt = Field(\"fempt\", \"FEMPT\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.ifen = Field(\"ifen\"\
    , \"IFEN\", self._address, 5, 0x0001, 1, proxy)\n            self.ilen = Field(\"\
    ilen\", \"ILEN\", self._address, 4, 0x0001, 1, proxy)\n            self.iren =\
    \ Field(\"iren\", \"IREN\", self._address, 3, 0x0001, 1, proxy)\n            self.ifs\
    \ = Field(\"ifs\", \"IFS\", self._address, 2, 0x0001, 1, proxy)\n            self.ils\
    \ = Field(\"ils\", \"ILS\", self._address, 1, 0x0001, 1, proxy)\n            self.irs\
    \ = Field(\"irs\", \"IRS\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ Pmem4Register(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"PMEM4\", \"Common memory space timing register\n \
    \             4\", address + 0x00A8, 32, \"read-write\", 0xFCFCFCFC, proxy)\n\
    \            self.memhizx = Field(\"memhizx\", \"MEMHIZx\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.memholdx = Field(\"memholdx\", \"MEMHOLDx\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.memwaitx = Field(\"memwaitx\"\
    , \"MEMWAITx\", self._address, 8, 0x00FF, 8, proxy)\n            self.memsetx\
    \ = Field(\"memsetx\", \"MEMSETx\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class Patt4Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"PATT4\", \"Attribute memory space timing register\n\
    \              4\", address + 0x00AC, 32, \"read-write\", 0xFCFCFCFC, proxy)\n\
    \            self.atthizx = Field(\"atthizx\", \"ATTHIZx\", self._address, 24,\
    \ 0x00FF, 8, proxy)\n            self.attholdx = Field(\"attholdx\", \"ATTHOLDx\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.attwaitx = Field(\"attwaitx\"\
    , \"ATTWAITx\", self._address, 8, 0x00FF, 8, proxy)\n            self.attsetx\
    \ = Field(\"attsetx\", \"ATTSETx\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class Pio4Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"PIO4\", \"I/O space timing register 4\", address\
    \ + 0x00B0, 32, \"read-write\", 0xFCFCFCFC, proxy)\n            self.iohizx =\
    \ Field(\"iohizx\", \"IOHIZx\", self._address, 24, 0x00FF, 8, proxy)\n       \
    \     self.ioholdx = Field(\"ioholdx\", \"IOHOLDx\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.iowaitx = Field(\"iowaitx\", \"IOWAITx\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.iosetx = Field(\"iosetx\", \"IOSETx\"\
    , self._address, 0, 0x00FF, 8, proxy)\n    \n    class Bwtr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BWTR1\", \"SRAM/NOR-Flash write timing registers\n              1\", address +\
    \ 0x0104, 32, \"read-write\", 0xFFFFFFF, proxy)\n            self.accmod = Field(\"\
    accmod\", \"ACCMOD\", self._address, 28, 0x0003, 2, proxy)\n            self.datlat\
    \ = Field(\"datlat\", \"DATLAT\", self._address, 24, 0x000F, 4, proxy)\n     \
    \       self.clkdiv = Field(\"clkdiv\", \"CLKDIV\", self._address, 20, 0x000F,\
    \ 4, proxy)\n            self.datast = Field(\"datast\", \"DATAST\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\"\
    , self._address, 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\"\
    , \"ADDSET\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Bwtr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BWTR2\", \"SRAM/NOR-Flash write timing registers\n              2\", address +\
    \ 0x010C, 32, \"read-write\", 0xFFFFFFF, proxy)\n            self.accmod = Field(\"\
    accmod\", \"ACCMOD\", self._address, 28, 0x0003, 2, proxy)\n            self.datlat\
    \ = Field(\"datlat\", \"DATLAT\", self._address, 24, 0x000F, 4, proxy)\n     \
    \       self.clkdiv = Field(\"clkdiv\", \"CLKDIV\", self._address, 20, 0x000F,\
    \ 4, proxy)\n            self.datast = Field(\"datast\", \"DATAST\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\"\
    , self._address, 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\"\
    , \"ADDSET\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Bwtr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BWTR3\", \"SRAM/NOR-Flash write timing registers\n              3\", address +\
    \ 0x0114, 32, \"read-write\", 0xFFFFFFF, proxy)\n            self.accmod = Field(\"\
    accmod\", \"ACCMOD\", self._address, 28, 0x0003, 2, proxy)\n            self.datlat\
    \ = Field(\"datlat\", \"DATLAT\", self._address, 24, 0x000F, 4, proxy)\n     \
    \       self.clkdiv = Field(\"clkdiv\", \"CLKDIV\", self._address, 20, 0x000F,\
    \ 4, proxy)\n            self.datast = Field(\"datast\", \"DATAST\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\"\
    , self._address, 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\"\
    , \"ADDSET\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Bwtr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BWTR4\", \"SRAM/NOR-Flash write timing registers\n              4\", address +\
    \ 0x011C, 32, \"read-write\", 0xFFFFFFF, proxy)\n            self.accmod = Field(\"\
    accmod\", \"ACCMOD\", self._address, 28, 0x0003, 2, proxy)\n            self.datlat\
    \ = Field(\"datlat\", \"DATLAT\", self._address, 24, 0x000F, 4, proxy)\n     \
    \       self.clkdiv = Field(\"clkdiv\", \"CLKDIV\", self._address, 20, 0x000F,\
    \ 4, proxy)\n            self.datast = Field(\"datast\", \"DATAST\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.addhld = Field(\"addhld\", \"ADDHLD\"\
    , self._address, 4, 0x000F, 4, proxy)\n            self.addset = Field(\"addset\"\
    , \"ADDSET\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Sdcr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SDCR1\", \"SDRAM Control Register 1\", address + 0x0140, 32, \"read-write\", 0x02D0,\
    \ proxy)\n            self.nc = Field(\"nc\", \"Number of column address\n   \
    \                       bits\", self._address, 0, 0x0003, 2, proxy)\n        \
    \    self.nr = Field(\"nr\", \"Number of row address bits\", self._address, 2,\
    \ 0x0003, 2, proxy)\n            self.mwid = Field(\"mwid\", \"Memory data bus\
    \ width\", self._address, 4, 0x0003, 2, proxy)\n            self.nb = Field(\"\
    nb\", \"Number of internal banks\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.cas = Field(\"cas\", \"CAS latency\", self._address, 7, 0x0003,\
    \ 2, proxy)\n            self.wp = Field(\"wp\", \"Write protection\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.sdclk = Field(\"sdclk\", \"SDRAM clock\
    \ configuration\", self._address, 10, 0x0003, 2, proxy)\n            self.rburst\
    \ = Field(\"rburst\", \"Burst read\", self._address, 12, 0x0001, 1, proxy)\n \
    \           self.rpipe = Field(\"rpipe\", \"Read pipe\", self._address, 13, 0x0003,\
    \ 2, proxy)\n    \n    class Sdcr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SDCR2\", \"SDRAM Control Register\
    \ 2\", address + 0x0144, 32, \"read-write\", 0x02D0, proxy)\n            self.nc\
    \ = Field(\"nc\", \"Number of column address\n                          bits\"\
    , self._address, 0, 0x0003, 2, proxy)\n            self.nr = Field(\"nr\", \"\
    Number of row address bits\", self._address, 2, 0x0003, 2, proxy)\n          \
    \  self.mwid = Field(\"mwid\", \"Memory data bus width\", self._address, 4, 0x0003,\
    \ 2, proxy)\n            self.nb = Field(\"nb\", \"Number of internal banks\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.cas = Field(\"cas\", \"\
    CAS latency\", self._address, 7, 0x0003, 2, proxy)\n            self.wp = Field(\"\
    wp\", \"Write protection\", self._address, 9, 0x0001, 1, proxy)\n            self.sdclk\
    \ = Field(\"sdclk\", \"SDRAM clock configuration\", self._address, 10, 0x0003,\
    \ 2, proxy)\n            self.rburst = Field(\"rburst\", \"Burst read\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.rpipe = Field(\"rpipe\", \"Read pipe\"\
    , self._address, 13, 0x0003, 2, proxy)\n    \n    class Sdtr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SDTR1\", \"SDRAM Timing register 1\", address + 0x0148, 32, \"read-write\", 0xFFFFFFF,\
    \ proxy)\n            self.tmrd = Field(\"tmrd\", \"Load Mode Register to\n  \
    \                        Active\", self._address, 0, 0x000F, 4, proxy)\n     \
    \       self.txsr = Field(\"txsr\", \"Exit self-refresh delay\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.tras = Field(\"tras\", \"Self refresh\
    \ time\", self._address, 8, 0x000F, 4, proxy)\n            self.trc = Field(\"\
    trc\", \"Row cycle delay\", self._address, 12, 0x000F, 4, proxy)\n           \
    \ self.twr = Field(\"twr\", \"Recovery delay\", self._address, 16, 0x000F, 4,\
    \ proxy)\n            self.trp = Field(\"trp\", \"Row precharge delay\", self._address,\
    \ 20, 0x000F, 4, proxy)\n            self.trcd = Field(\"trcd\", \"Row to column\
    \ delay\", self._address, 24, 0x000F, 4, proxy)\n    \n    class Sdtr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SDTR2\", \"SDRAM Timing register 2\", address + 0x014C, 32, \"read-write\", 0xFFFFFFF,\
    \ proxy)\n            self.tmrd = Field(\"tmrd\", \"Load Mode Register to\n  \
    \                        Active\", self._address, 0, 0x000F, 4, proxy)\n     \
    \       self.txsr = Field(\"txsr\", \"Exit self-refresh delay\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.tras = Field(\"tras\", \"Self refresh\
    \ time\", self._address, 8, 0x000F, 4, proxy)\n            self.trc = Field(\"\
    trc\", \"Row cycle delay\", self._address, 12, 0x000F, 4, proxy)\n           \
    \ self.twr = Field(\"twr\", \"Recovery delay\", self._address, 16, 0x000F, 4,\
    \ proxy)\n            self.trp = Field(\"trp\", \"Row precharge delay\", self._address,\
    \ 20, 0x000F, 4, proxy)\n            self.trcd = Field(\"trcd\", \"Row to column\
    \ delay\", self._address, 24, 0x000F, 4, proxy)\n    \n    class SdcmrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SDCMR\", \"SDRAM Command Mode register\", address + 0x0150, 32, \"\", 0x0000,\
    \ proxy)\n            self.mode = Field(\"mode\", \"Command mode\", self._address,\
    \ 0, 0x0007, 3, proxy)\n            self.ctb2 = Field(\"ctb2\", \"Command target\
    \ bank 2\", self._address, 3, 0x0001, 1, proxy)\n            self.ctb1 = Field(\"\
    ctb1\", \"Command target bank 1\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.nrfs = Field(\"nrfs\", \"Number of Auto-refresh\", self._address,\
    \ 5, 0x000F, 4, proxy)\n            self.mrd = Field(\"mrd\", \"Mode Register\
    \ definition\", self._address, 9, 0x1FFF, 13, proxy)\n    \n    class SdrtrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SDRTR\", \"SDRAM Refresh Timer register\", address + 0x0154, 32, \"\", 0x0000,\
    \ proxy)\n            self.cre = Field(\"cre\", \"Clear Refresh error flag\",\
    \ self._address, 0, 0x0001, 1, proxy)\n            self.count = Field(\"count\"\
    , \"Refresh Timer Count\", self._address, 1, 0x1FFF, 13, proxy)\n            self.reie\
    \ = Field(\"reie\", \"RES Interrupt Enable\", self._address, 14, 0x0001, 1, proxy)\n\
    \    \n    class SdsrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"SDSR\", \"SDRAM Status register\", address\
    \ + 0x0158, 32, \"read-only\", 0x0000, proxy)\n            self.re = Field(\"\
    re\", \"Refresh error flag\", self._address, 0, 0x0001, 1, proxy)\n          \
    \  self.modes1 = Field(\"modes1\", \"Status Mode for Bank 1\", self._address,\
    \ 1, 0x0003, 2, proxy)\n            self.modes2 = Field(\"modes2\", \"Status Mode\
    \ for Bank 2\", self._address, 3, 0x0003, 2, proxy)\n            self.busy = Field(\"\
    busy\", \"Busy status\", self._address, 5, 0x0001, 1, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"fmc\", \"Flexible memory controller\", 0xA0000000)\n\
    \        self.bcr1 = self.Bcr1Register(self.address, proxy)\n        self.btr1\
    \ = self.Btr1Register(self.address, proxy)\n        self.bcr2 = self.Bcr2Register(self.address,\
    \ proxy)\n        self.btr2 = self.Btr2Register(self.address, proxy)\n       \
    \ self.bcr3 = self.Bcr3Register(self.address, proxy)\n        self.btr3 = self.Btr3Register(self.address,\
    \ proxy)\n        self.bcr4 = self.Bcr4Register(self.address, proxy)\n       \
    \ self.btr4 = self.Btr4Register(self.address, proxy)\n        self.pcr2 = self.Pcr2Register(self.address,\
    \ proxy)\n        self.sr2 = self.Sr2Register(self.address, proxy)\n        self.pmem2\
    \ = self.Pmem2Register(self.address, proxy)\n        self.patt2 = self.Patt2Register(self.address,\
    \ proxy)\n        self.eccr2 = self.Eccr2Register(self.address, proxy)\n     \
    \   self.pcr3 = self.Pcr3Register(self.address, proxy)\n        self.sr3 = self.Sr3Register(self.address,\
    \ proxy)\n        self.pmem3 = self.Pmem3Register(self.address, proxy)\n     \
    \   self.patt3 = self.Patt3Register(self.address, proxy)\n        self.eccr3 =\
    \ self.Eccr3Register(self.address, proxy)\n        self.pcr4 = self.Pcr4Register(self.address,\
    \ proxy)\n        self.sr4 = self.Sr4Register(self.address, proxy)\n        self.pmem4\
    \ = self.Pmem4Register(self.address, proxy)\n        self.patt4 = self.Patt4Register(self.address,\
    \ proxy)\n        self.pio4 = self.Pio4Register(self.address, proxy)\n       \
    \ self.bwtr1 = self.Bwtr1Register(self.address, proxy)\n        self.bwtr2 = self.Bwtr2Register(self.address,\
    \ proxy)\n        self.bwtr3 = self.Bwtr3Register(self.address, proxy)\n     \
    \   self.bwtr4 = self.Bwtr4Register(self.address, proxy)\n        self.sdcr1 =\
    \ self.Sdcr1Register(self.address, proxy)\n        self.sdcr2 = self.Sdcr2Register(self.address,\
    \ proxy)\n        self.sdtr1 = self.Sdtr1Register(self.address, proxy)\n     \
    \   self.sdtr2 = self.Sdtr2Register(self.address, proxy)\n        self.sdcmr =\
    \ self.SdcmrRegister(self.address, proxy)\n        self.sdrtr = self.SdrtrRegister(self.address,\
    \ proxy)\n        self.sdsr = self.SdsrRegister(self.address, proxy)\n"
  name: FMC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Dbg(Peripheral):\n\
    \    class Dbgmcu_idcodeRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DBGMCU_IDCODE\", \"IDCODE\", address\
    \ + 0x0000, 32, \"read-only\", 0x10006411, proxy)\n            self.dev_id = Field(\"\
    dev_id\", \"DEV_ID\", self._address, 0, 0x0FFF, 12, proxy)\n            self.rev_id\
    \ = Field(\"rev_id\", \"REV_ID\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Dbgmcu_crRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DBGMCU_CR\", \"Control Register\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.dbg_sleep = Field(\"dbg_sleep\"\
    , \"DBG_SLEEP\", self._address, 0, 0x0001, 1, proxy)\n            self.dbg_stop\
    \ = Field(\"dbg_stop\", \"DBG_STOP\", self._address, 1, 0x0001, 1, proxy)\n  \
    \          self.dbg_standby = Field(\"dbg_standby\", \"DBG_STANDBY\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.trace_ioen = Field(\"trace_ioen\", \"\
    TRACE_IOEN\", self._address, 5, 0x0001, 1, proxy)\n            self.trace_mode\
    \ = Field(\"trace_mode\", \"TRACE_MODE\", self._address, 6, 0x0003, 2, proxy)\n\
    \    \n    class Dbgmcu_apb1_fzRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DBGMCU_APB1_FZ\", \"Debug MCU\
    \ APB1 Freeze registe\", address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dbg_tim2_stop = Field(\"dbg_tim2_stop\", \"DBG_TIM2_STOP\",\
    \ self._address, 0, 0x0001, 1, proxy)\n            self.dbg_tim3_stop = Field(\"\
    dbg_tim3_stop\", \"DBG_TIM3 _STOP\", self._address, 1, 0x0001, 1, proxy)\n   \
    \         self.dbg_tim4_stop = Field(\"dbg_tim4_stop\", \"DBG_TIM4_STOP\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dbg_tim5_stop = Field(\"dbg_tim5_stop\"\
    , \"DBG_TIM5_STOP\", self._address, 3, 0x0001, 1, proxy)\n            self.dbg_tim6_stop\
    \ = Field(\"dbg_tim6_stop\", \"DBG_TIM6_STOP\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.dbg_tim7_stop = Field(\"dbg_tim7_stop\", \"DBG_TIM7_STOP\",\
    \ self._address, 5, 0x0001, 1, proxy)\n            self.dbg_tim12_stop = Field(\"\
    dbg_tim12_stop\", \"DBG_TIM12_STOP\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.dbg_tim13_stop = Field(\"dbg_tim13_stop\", \"DBG_TIM13_STOP\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.dbg_tim14_stop = Field(\"\
    dbg_tim14_stop\", \"DBG_TIM14_STOP\", self._address, 8, 0x0001, 1, proxy)\n  \
    \          self.dbg_rtc_stop = Field(\"dbg_rtc_stop\", \"RTC stopped when Core\
    \ is\n                          halted\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.dbg_wwdg_stop = Field(\"dbg_wwdg_stop\", \"DBG_WWDG_STOP\",\
    \ self._address, 11, 0x0001, 1, proxy)\n            self.dbg_iwdeg_stop = Field(\"\
    dbg_iwdeg_stop\", \"DBG_IWDEG_STOP\", self._address, 12, 0x0001, 1, proxy)\n \
    \           self.dbg_j2c1_smbus_timeout = Field(\"dbg_j2c1_smbus_timeout\", \"\
    DBG_J2C1_SMBUS_TIMEOUT\", self._address, 21, 0x0001, 1, proxy)\n            self.dbg_j2c2_smbus_timeout\
    \ = Field(\"dbg_j2c2_smbus_timeout\", \"DBG_J2C2_SMBUS_TIMEOUT\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.dbg_j2c3smbus_timeout = Field(\"dbg_j2c3smbus_timeout\"\
    , \"DBG_J2C3SMBUS_TIMEOUT\", self._address, 23, 0x0001, 1, proxy)\n          \
    \  self.dbg_i2cfmp_smbus_timeout = Field(\"dbg_i2cfmp_smbus_timeout\", \"SMBUS\
    \ timeout mode stopped when Core is\n                          halted\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.dbg_can1_stop = Field(\"dbg_can1_stop\"\
    , \"DBG_CAN1_STOP\", self._address, 25, 0x0001, 1, proxy)\n            self.dbg_can2_stop\
    \ = Field(\"dbg_can2_stop\", \"DBG_CAN2_STOP\", self._address, 26, 0x0001, 1,\
    \ proxy)\n    \n    class Dbgmcu_apb2_fzRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DBGMCU_APB2_FZ\", \"Debug MCU\
    \ APB2 Freeze registe\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dbg_tim1_stop = Field(\"dbg_tim1_stop\", \"TIM1 counter stopped\
    \ when core is\n                          halted\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.dbg_tim8_stop = Field(\"dbg_tim8_stop\", \"TIM8\
    \ counter stopped when core is\n                          halted\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.dbg_tim9_stop = Field(\"dbg_tim9_stop\"\
    , \"TIM9 counter stopped when core is\n                          halted\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.dbg_tim10_stop = Field(\"dbg_tim10_stop\"\
    , \"TIM10 counter stopped when core is\n                          halted\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.dbg_tim11_stop = Field(\"dbg_tim11_stop\"\
    , \"TIM11 counter stopped when core is\n                          halted\", self._address,\
    \ 18, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    dbg\", \"Debug support\", 0xE0042000)\n        self.dbgmcu_idcode = self.Dbgmcu_idcodeRegister(self.address,\
    \ proxy)\n        self.dbgmcu_cr = self.Dbgmcu_crRegister(self.address, proxy)\n\
    \        self.dbgmcu_apb1_fz = self.Dbgmcu_apb1_fzRegister(self.address, proxy)\n\
    \        self.dbgmcu_apb2_fz = self.Dbgmcu_apb2_fzRegister(self.address, proxy)\n"
  name: DBG
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Dma2(Peripheral):\n\
    \    class LisrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"LISR\", \"low interrupt status register\", address\
    \ + 0x0000, 32, \"read-only\", 0x0000, proxy)\n            self.tcif3 = Field(\"\
    tcif3\", \"Stream x transfer complete interrupt\n                          flag\
    \ (x = 3..0)\", self._address, 27, 0x0001, 1, proxy)\n            self.htif3 =\
    \ Field(\"htif3\", \"Stream x half transfer interrupt flag\n                 \
    \         (x=3..0)\", self._address, 26, 0x0001, 1, proxy)\n            self.teif3\
    \ = Field(\"teif3\", \"Stream x transfer error interrupt flag\n              \
    \            (x=3..0)\", self._address, 25, 0x0001, 1, proxy)\n            self.dmeif3\
    \ = Field(\"dmeif3\", \"Stream x direct mode error interrupt\n               \
    \           flag (x=3..0)\", self._address, 24, 0x0001, 1, proxy)\n          \
    \  self.feif3 = Field(\"feif3\", \"Stream x FIFO error interrupt flag\n      \
    \                    (x=3..0)\", self._address, 22, 0x0001, 1, proxy)\n      \
    \      self.tcif2 = Field(\"tcif2\", \"Stream x transfer complete interrupt\n\
    \                          flag (x = 3..0)\", self._address, 21, 0x0001, 1, proxy)\n\
    \            self.htif2 = Field(\"htif2\", \"Stream x half transfer interrupt\
    \ flag\n                          (x=3..0)\", self._address, 20, 0x0001, 1, proxy)\n\
    \            self.teif2 = Field(\"teif2\", \"Stream x transfer error interrupt\
    \ flag\n                          (x=3..0)\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.dmeif2 = Field(\"dmeif2\", \"Stream x direct mode error interrupt\n\
    \                          flag (x=3..0)\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.feif2 = Field(\"feif2\", \"Stream x FIFO error interrupt flag\n\
    \                          (x=3..0)\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.tcif1 = Field(\"tcif1\", \"Stream x transfer complete interrupt\n\
    \                          flag (x = 3..0)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.htif1 = Field(\"htif1\", \"Stream x half transfer interrupt\
    \ flag\n                          (x=3..0)\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.teif1 = Field(\"teif1\", \"Stream x transfer error interrupt\
    \ flag\n                          (x=3..0)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.dmeif1 = Field(\"dmeif1\", \"Stream x direct mode error interrupt\n\
    \                          flag (x=3..0)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.feif1 = Field(\"feif1\", \"Stream x FIFO error interrupt flag\n\
    \                          (x=3..0)\", self._address, 6, 0x0001, 1, proxy)\n \
    \           self.tcif0 = Field(\"tcif0\", \"Stream x transfer complete interrupt\n\
    \                          flag (x = 3..0)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.htif0 = Field(\"htif0\", \"Stream x half transfer interrupt\
    \ flag\n                          (x=3..0)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.teif0 = Field(\"teif0\", \"Stream x transfer error interrupt\
    \ flag\n                          (x=3..0)\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.dmeif0 = Field(\"dmeif0\", \"Stream x direct mode error interrupt\n\
    \                          flag (x=3..0)\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.feif0 = Field(\"feif0\", \"Stream x FIFO error interrupt flag\n\
    \                          (x=3..0)\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class HisrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"HISR\", \"high interrupt status register\", address\
    \ + 0x0004, 32, \"read-only\", 0x0000, proxy)\n            self.tcif7 = Field(\"\
    tcif7\", \"Stream x transfer complete interrupt\n                          flag\
    \ (x=7..4)\", self._address, 27, 0x0001, 1, proxy)\n            self.htif7 = Field(\"\
    htif7\", \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.teif7 = Field(\"teif7\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.dmeif7 = Field(\"dmeif7\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.feif7 = Field(\"feif7\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 22, 0x0001, 1, proxy)\n            self.tcif6 = Field(\"tcif6\"\
    , \"Stream x transfer complete interrupt\n                          flag (x=7..4)\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.htif6 = Field(\"htif6\"\
    , \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.teif6 = Field(\"teif6\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.dmeif6 = Field(\"dmeif6\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.feif6 = Field(\"feif6\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 16, 0x0001, 1, proxy)\n            self.tcif5 = Field(\"tcif5\"\
    , \"Stream x transfer complete interrupt\n                          flag (x=7..4)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.htif5 = Field(\"htif5\"\
    , \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.teif5 = Field(\"teif5\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dmeif5 = Field(\"dmeif5\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.feif5 = Field(\"feif5\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 6, 0x0001, 1, proxy)\n            self.tcif4 = Field(\"tcif4\"\
    , \"Stream x transfer complete interrupt\n                          flag (x=7..4)\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.htif4 = Field(\"htif4\"\
    , \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.teif4 = Field(\"teif4\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.dmeif4 = Field(\"dmeif4\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.feif4 = Field(\"feif4\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 0, 0x0001, 1, proxy)\n    \n    class LifcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LIFCR\", \"low interrupt flag clear\n              register\", address + 0x0008,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ctcif3 = Field(\"ctcif3\"\
    , \"Stream x clear transfer complete\n                          interrupt flag\
    \ (x = 3..0)\", self._address, 27, 0x0001, 1, proxy)\n            self.chtif3\
    \ = Field(\"chtif3\", \"Stream x clear half transfer interrupt\n             \
    \             flag (x = 3..0)\", self._address, 26, 0x0001, 1, proxy)\n      \
    \      self.cteif3 = Field(\"cteif3\", \"Stream x clear transfer error interrupt\n\
    \                          flag (x = 3..0)\", self._address, 25, 0x0001, 1, proxy)\n\
    \            self.cdmeif3 = Field(\"cdmeif3\", \"Stream x clear direct mode error\n\
    \                          interrupt flag (x = 3..0)\", self._address, 24, 0x0001,\
    \ 1, proxy)\n            self.cfeif3 = Field(\"cfeif3\", \"Stream x clear FIFO\
    \ error interrupt flag\n                          (x = 3..0)\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.ctcif2 = Field(\"ctcif2\", \"Stream\
    \ x clear transfer complete\n                          interrupt flag (x = 3..0)\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.chtif2 = Field(\"chtif2\"\
    , \"Stream x clear half transfer interrupt\n                          flag (x\
    \ = 3..0)\", self._address, 20, 0x0001, 1, proxy)\n            self.cteif2 = Field(\"\
    cteif2\", \"Stream x clear transfer error interrupt\n                        \
    \  flag (x = 3..0)\", self._address, 19, 0x0001, 1, proxy)\n            self.cdmeif2\
    \ = Field(\"cdmeif2\", \"Stream x clear direct mode error\n                  \
    \        interrupt flag (x = 3..0)\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.cfeif2 = Field(\"cfeif2\", \"Stream x clear FIFO error interrupt\
    \ flag\n                          (x = 3..0)\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.ctcif1 = Field(\"ctcif1\", \"Stream x clear transfer\
    \ complete\n                          interrupt flag (x = 3..0)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.chtif1 = Field(\"chtif1\", \"Stream\
    \ x clear half transfer interrupt\n                          flag (x = 3..0)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cteif1 = Field(\"cteif1\"\
    , \"Stream x clear transfer error interrupt\n                          flag (x\
    \ = 3..0)\", self._address, 9, 0x0001, 1, proxy)\n            self.cdmeif1 = Field(\"\
    cdmeif1\", \"Stream x clear direct mode error\n                          interrupt\
    \ flag (x = 3..0)\", self._address, 8, 0x0001, 1, proxy)\n            self.cfeif1\
    \ = Field(\"cfeif1\", \"Stream x clear FIFO error interrupt flag\n           \
    \               (x = 3..0)\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.ctcif0 = Field(\"ctcif0\", \"Stream x clear transfer complete\n      \
    \                    interrupt flag (x = 3..0)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.chtif0 = Field(\"chtif0\", \"Stream x clear half transfer\
    \ interrupt\n                          flag (x = 3..0)\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.cteif0 = Field(\"cteif0\", \"Stream x clear transfer\
    \ error interrupt\n                          flag (x = 3..0)\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cdmeif0 = Field(\"cdmeif0\", \"Stream\
    \ x clear direct mode error\n                          interrupt flag (x = 3..0)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cfeif0 = Field(\"cfeif0\"\
    , \"Stream x clear FIFO error interrupt flag\n                          (x = 3..0)\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class HifcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    HIFCR\", \"high interrupt flag clear\n              register\", address + 0x000C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ctcif7 = Field(\"ctcif7\"\
    , \"Stream x clear transfer complete\n                          interrupt flag\
    \ (x = 7..4)\", self._address, 27, 0x0001, 1, proxy)\n            self.chtif7\
    \ = Field(\"chtif7\", \"Stream x clear half transfer interrupt\n             \
    \             flag (x = 7..4)\", self._address, 26, 0x0001, 1, proxy)\n      \
    \      self.cteif7 = Field(\"cteif7\", \"Stream x clear transfer error interrupt\n\
    \                          flag (x = 7..4)\", self._address, 25, 0x0001, 1, proxy)\n\
    \            self.cdmeif7 = Field(\"cdmeif7\", \"Stream x clear direct mode error\n\
    \                          interrupt flag (x = 7..4)\", self._address, 24, 0x0001,\
    \ 1, proxy)\n            self.cfeif7 = Field(\"cfeif7\", \"Stream x clear FIFO\
    \ error interrupt flag\n                          (x = 7..4)\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.ctcif6 = Field(\"ctcif6\", \"Stream\
    \ x clear transfer complete\n                          interrupt flag (x = 7..4)\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.chtif6 = Field(\"chtif6\"\
    , \"Stream x clear half transfer interrupt\n                          flag (x\
    \ = 7..4)\", self._address, 20, 0x0001, 1, proxy)\n            self.cteif6 = Field(\"\
    cteif6\", \"Stream x clear transfer error interrupt\n                        \
    \  flag (x = 7..4)\", self._address, 19, 0x0001, 1, proxy)\n            self.cdmeif6\
    \ = Field(\"cdmeif6\", \"Stream x clear direct mode error\n                  \
    \        interrupt flag (x = 7..4)\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.cfeif6 = Field(\"cfeif6\", \"Stream x clear FIFO error interrupt\
    \ flag\n                          (x = 7..4)\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.ctcif5 = Field(\"ctcif5\", \"Stream x clear transfer\
    \ complete\n                          interrupt flag (x = 7..4)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.chtif5 = Field(\"chtif5\", \"Stream\
    \ x clear half transfer interrupt\n                          flag (x = 7..4)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cteif5 = Field(\"cteif5\"\
    , \"Stream x clear transfer error interrupt\n                          flag (x\
    \ = 7..4)\", self._address, 9, 0x0001, 1, proxy)\n            self.cdmeif5 = Field(\"\
    cdmeif5\", \"Stream x clear direct mode error\n                          interrupt\
    \ flag (x = 7..4)\", self._address, 8, 0x0001, 1, proxy)\n            self.cfeif5\
    \ = Field(\"cfeif5\", \"Stream x clear FIFO error interrupt flag\n           \
    \               (x = 7..4)\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.ctcif4 = Field(\"ctcif4\", \"Stream x clear transfer complete\n      \
    \                    interrupt flag (x = 7..4)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.chtif4 = Field(\"chtif4\", \"Stream x clear half transfer\
    \ interrupt\n                          flag (x = 7..4)\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.cteif4 = Field(\"cteif4\", \"Stream x clear transfer\
    \ error interrupt\n                          flag (x = 7..4)\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cdmeif4 = Field(\"cdmeif4\", \"Stream\
    \ x clear direct mode error\n                          interrupt flag (x = 7..4)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cfeif4 = Field(\"cfeif4\"\
    , \"Stream x clear FIFO error interrupt flag\n                          (x = 7..4)\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class S0crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S0CR\", \"stream x configuration\n              register\", address + 0x0010,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S0ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S0NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x0014, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S0parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S0PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S0m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S0M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x001C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S0m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S0M1AR\", \"stream x memory 1 address\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S0fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S0FCR\", \"stream x FIFO control register\", address + 0x0024, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S1crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S1CR\", \"stream x configuration\n              register\", address + 0x0028,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S1ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S1NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x002C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S1parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S1PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0030, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S1m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S1M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x0034, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S1m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S1M1AR\", \"stream x memory 1 address\n              register\", address + 0x0038,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S1fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S1FCR\", \"stream x FIFO control register\", address + 0x003C, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S2crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S2CR\", \"stream x configuration\n              register\", address + 0x0040,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S2ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S2NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x0044, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S2parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S2PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0048, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S2m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S2M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x004C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S2m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S2M1AR\", \"stream x memory 1 address\n              register\", address + 0x0050,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S2fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S2FCR\", \"stream x FIFO control register\", address + 0x0054, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S3crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S3CR\", \"stream x configuration\n              register\", address + 0x0058,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S3ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S3NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x005C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S3parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S3PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0060, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S3m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S3M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x0064, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S3m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S3M1AR\", \"stream x memory 1 address\n              register\", address + 0x0068,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S3fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S3FCR\", \"stream x FIFO control register\", address + 0x006C, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S4crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S4CR\", \"stream x configuration\n              register\", address + 0x0070,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S4ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S4NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x0074, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S4parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S4PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0078, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S4m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S4M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x007C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S4m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S4M1AR\", \"stream x memory 1 address\n              register\", address + 0x0080,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S4fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S4FCR\", \"stream x FIFO control register\", address + 0x0084, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S5crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S5CR\", \"stream x configuration\n              register\", address + 0x0088,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S5ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S5NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x008C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S5parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S5PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0090, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S5m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S5M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x0094, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S5m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S5M1AR\", \"stream x memory 1 address\n              register\", address + 0x0098,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S5fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S5FCR\", \"stream x FIFO control register\", address + 0x009C, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S6crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S6CR\", \"stream x configuration\n              register\", address + 0x00A0,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S6ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S6NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x00A4, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S6parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S6PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x00A8, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S6m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S6M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x00AC, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S6m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S6M1AR\", \"stream x memory 1 address\n              register\", address + 0x00B0,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S6fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S6FCR\", \"stream x FIFO control register\", address + 0x00B4, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S7crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S7CR\", \"stream x configuration\n              register\", address + 0x00B8,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S7ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S7NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x00BC, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S7parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S7PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x00C0, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S7m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S7M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x00C4, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S7m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S7M1AR\", \"stream x memory 1 address\n              register\", address + 0x00C8,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S7fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S7FCR\", \"stream x FIFO control register\", address + 0x00CC, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"dma2\", \"DMA controller\", 0x40026400)\n\
    \        self.lisr = self.LisrRegister(self.address, proxy)\n        self.hisr\
    \ = self.HisrRegister(self.address, proxy)\n        self.lifcr = self.LifcrRegister(self.address,\
    \ proxy)\n        self.hifcr = self.HifcrRegister(self.address, proxy)\n     \
    \   self.s0cr = self.S0crRegister(self.address, proxy)\n        self.s0ndtr =\
    \ self.S0ndtrRegister(self.address, proxy)\n        self.s0par = self.S0parRegister(self.address,\
    \ proxy)\n        self.s0m0ar = self.S0m0arRegister(self.address, proxy)\n   \
    \     self.s0m1ar = self.S0m1arRegister(self.address, proxy)\n        self.s0fcr\
    \ = self.S0fcrRegister(self.address, proxy)\n        self.s1cr = self.S1crRegister(self.address,\
    \ proxy)\n        self.s1ndtr = self.S1ndtrRegister(self.address, proxy)\n   \
    \     self.s1par = self.S1parRegister(self.address, proxy)\n        self.s1m0ar\
    \ = self.S1m0arRegister(self.address, proxy)\n        self.s1m1ar = self.S1m1arRegister(self.address,\
    \ proxy)\n        self.s1fcr = self.S1fcrRegister(self.address, proxy)\n     \
    \   self.s2cr = self.S2crRegister(self.address, proxy)\n        self.s2ndtr =\
    \ self.S2ndtrRegister(self.address, proxy)\n        self.s2par = self.S2parRegister(self.address,\
    \ proxy)\n        self.s2m0ar = self.S2m0arRegister(self.address, proxy)\n   \
    \     self.s2m1ar = self.S2m1arRegister(self.address, proxy)\n        self.s2fcr\
    \ = self.S2fcrRegister(self.address, proxy)\n        self.s3cr = self.S3crRegister(self.address,\
    \ proxy)\n        self.s3ndtr = self.S3ndtrRegister(self.address, proxy)\n   \
    \     self.s3par = self.S3parRegister(self.address, proxy)\n        self.s3m0ar\
    \ = self.S3m0arRegister(self.address, proxy)\n        self.s3m1ar = self.S3m1arRegister(self.address,\
    \ proxy)\n        self.s3fcr = self.S3fcrRegister(self.address, proxy)\n     \
    \   self.s4cr = self.S4crRegister(self.address, proxy)\n        self.s4ndtr =\
    \ self.S4ndtrRegister(self.address, proxy)\n        self.s4par = self.S4parRegister(self.address,\
    \ proxy)\n        self.s4m0ar = self.S4m0arRegister(self.address, proxy)\n   \
    \     self.s4m1ar = self.S4m1arRegister(self.address, proxy)\n        self.s4fcr\
    \ = self.S4fcrRegister(self.address, proxy)\n        self.s5cr = self.S5crRegister(self.address,\
    \ proxy)\n        self.s5ndtr = self.S5ndtrRegister(self.address, proxy)\n   \
    \     self.s5par = self.S5parRegister(self.address, proxy)\n        self.s5m0ar\
    \ = self.S5m0arRegister(self.address, proxy)\n        self.s5m1ar = self.S5m1arRegister(self.address,\
    \ proxy)\n        self.s5fcr = self.S5fcrRegister(self.address, proxy)\n     \
    \   self.s6cr = self.S6crRegister(self.address, proxy)\n        self.s6ndtr =\
    \ self.S6ndtrRegister(self.address, proxy)\n        self.s6par = self.S6parRegister(self.address,\
    \ proxy)\n        self.s6m0ar = self.S6m0arRegister(self.address, proxy)\n   \
    \     self.s6m1ar = self.S6m1arRegister(self.address, proxy)\n        self.s6fcr\
    \ = self.S6fcrRegister(self.address, proxy)\n        self.s7cr = self.S7crRegister(self.address,\
    \ proxy)\n        self.s7ndtr = self.S7ndtrRegister(self.address, proxy)\n   \
    \     self.s7par = self.S7parRegister(self.address, proxy)\n        self.s7m0ar\
    \ = self.S7m0arRegister(self.address, proxy)\n        self.s7m1ar = self.S7m1arRegister(self.address,\
    \ proxy)\n        self.s7fcr = self.S7fcrRegister(self.address, proxy)\n"
  name: DMA2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Dma1(Peripheral):\n\
    \    class LisrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"LISR\", \"low interrupt status register\", address\
    \ + 0x0000, 32, \"read-only\", 0x0000, proxy)\n            self.tcif3 = Field(\"\
    tcif3\", \"Stream x transfer complete interrupt\n                          flag\
    \ (x = 3..0)\", self._address, 27, 0x0001, 1, proxy)\n            self.htif3 =\
    \ Field(\"htif3\", \"Stream x half transfer interrupt flag\n                 \
    \         (x=3..0)\", self._address, 26, 0x0001, 1, proxy)\n            self.teif3\
    \ = Field(\"teif3\", \"Stream x transfer error interrupt flag\n              \
    \            (x=3..0)\", self._address, 25, 0x0001, 1, proxy)\n            self.dmeif3\
    \ = Field(\"dmeif3\", \"Stream x direct mode error interrupt\n               \
    \           flag (x=3..0)\", self._address, 24, 0x0001, 1, proxy)\n          \
    \  self.feif3 = Field(\"feif3\", \"Stream x FIFO error interrupt flag\n      \
    \                    (x=3..0)\", self._address, 22, 0x0001, 1, proxy)\n      \
    \      self.tcif2 = Field(\"tcif2\", \"Stream x transfer complete interrupt\n\
    \                          flag (x = 3..0)\", self._address, 21, 0x0001, 1, proxy)\n\
    \            self.htif2 = Field(\"htif2\", \"Stream x half transfer interrupt\
    \ flag\n                          (x=3..0)\", self._address, 20, 0x0001, 1, proxy)\n\
    \            self.teif2 = Field(\"teif2\", \"Stream x transfer error interrupt\
    \ flag\n                          (x=3..0)\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.dmeif2 = Field(\"dmeif2\", \"Stream x direct mode error interrupt\n\
    \                          flag (x=3..0)\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.feif2 = Field(\"feif2\", \"Stream x FIFO error interrupt flag\n\
    \                          (x=3..0)\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.tcif1 = Field(\"tcif1\", \"Stream x transfer complete interrupt\n\
    \                          flag (x = 3..0)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.htif1 = Field(\"htif1\", \"Stream x half transfer interrupt\
    \ flag\n                          (x=3..0)\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.teif1 = Field(\"teif1\", \"Stream x transfer error interrupt\
    \ flag\n                          (x=3..0)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.dmeif1 = Field(\"dmeif1\", \"Stream x direct mode error interrupt\n\
    \                          flag (x=3..0)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.feif1 = Field(\"feif1\", \"Stream x FIFO error interrupt flag\n\
    \                          (x=3..0)\", self._address, 6, 0x0001, 1, proxy)\n \
    \           self.tcif0 = Field(\"tcif0\", \"Stream x transfer complete interrupt\n\
    \                          flag (x = 3..0)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.htif0 = Field(\"htif0\", \"Stream x half transfer interrupt\
    \ flag\n                          (x=3..0)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.teif0 = Field(\"teif0\", \"Stream x transfer error interrupt\
    \ flag\n                          (x=3..0)\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.dmeif0 = Field(\"dmeif0\", \"Stream x direct mode error interrupt\n\
    \                          flag (x=3..0)\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.feif0 = Field(\"feif0\", \"Stream x FIFO error interrupt flag\n\
    \                          (x=3..0)\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class HisrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"HISR\", \"high interrupt status register\", address\
    \ + 0x0004, 32, \"read-only\", 0x0000, proxy)\n            self.tcif7 = Field(\"\
    tcif7\", \"Stream x transfer complete interrupt\n                          flag\
    \ (x=7..4)\", self._address, 27, 0x0001, 1, proxy)\n            self.htif7 = Field(\"\
    htif7\", \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.teif7 = Field(\"teif7\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.dmeif7 = Field(\"dmeif7\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.feif7 = Field(\"feif7\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 22, 0x0001, 1, proxy)\n            self.tcif6 = Field(\"tcif6\"\
    , \"Stream x transfer complete interrupt\n                          flag (x=7..4)\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.htif6 = Field(\"htif6\"\
    , \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.teif6 = Field(\"teif6\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.dmeif6 = Field(\"dmeif6\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.feif6 = Field(\"feif6\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 16, 0x0001, 1, proxy)\n            self.tcif5 = Field(\"tcif5\"\
    , \"Stream x transfer complete interrupt\n                          flag (x=7..4)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.htif5 = Field(\"htif5\"\
    , \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.teif5 = Field(\"teif5\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dmeif5 = Field(\"dmeif5\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.feif5 = Field(\"feif5\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 6, 0x0001, 1, proxy)\n            self.tcif4 = Field(\"tcif4\"\
    , \"Stream x transfer complete interrupt\n                          flag (x=7..4)\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.htif4 = Field(\"htif4\"\
    , \"Stream x half transfer interrupt flag\n                          (x=7..4)\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.teif4 = Field(\"teif4\"\
    , \"Stream x transfer error interrupt flag\n                          (x=7..4)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.dmeif4 = Field(\"dmeif4\"\
    , \"Stream x direct mode error interrupt\n                          flag (x=7..4)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.feif4 = Field(\"feif4\"\
    , \"Stream x FIFO error interrupt flag\n                          (x=7..4)\",\
    \ self._address, 0, 0x0001, 1, proxy)\n    \n    class LifcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LIFCR\", \"low interrupt flag clear\n              register\", address + 0x0008,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ctcif3 = Field(\"ctcif3\"\
    , \"Stream x clear transfer complete\n                          interrupt flag\
    \ (x = 3..0)\", self._address, 27, 0x0001, 1, proxy)\n            self.chtif3\
    \ = Field(\"chtif3\", \"Stream x clear half transfer interrupt\n             \
    \             flag (x = 3..0)\", self._address, 26, 0x0001, 1, proxy)\n      \
    \      self.cteif3 = Field(\"cteif3\", \"Stream x clear transfer error interrupt\n\
    \                          flag (x = 3..0)\", self._address, 25, 0x0001, 1, proxy)\n\
    \            self.cdmeif3 = Field(\"cdmeif3\", \"Stream x clear direct mode error\n\
    \                          interrupt flag (x = 3..0)\", self._address, 24, 0x0001,\
    \ 1, proxy)\n            self.cfeif3 = Field(\"cfeif3\", \"Stream x clear FIFO\
    \ error interrupt flag\n                          (x = 3..0)\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.ctcif2 = Field(\"ctcif2\", \"Stream\
    \ x clear transfer complete\n                          interrupt flag (x = 3..0)\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.chtif2 = Field(\"chtif2\"\
    , \"Stream x clear half transfer interrupt\n                          flag (x\
    \ = 3..0)\", self._address, 20, 0x0001, 1, proxy)\n            self.cteif2 = Field(\"\
    cteif2\", \"Stream x clear transfer error interrupt\n                        \
    \  flag (x = 3..0)\", self._address, 19, 0x0001, 1, proxy)\n            self.cdmeif2\
    \ = Field(\"cdmeif2\", \"Stream x clear direct mode error\n                  \
    \        interrupt flag (x = 3..0)\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.cfeif2 = Field(\"cfeif2\", \"Stream x clear FIFO error interrupt\
    \ flag\n                          (x = 3..0)\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.ctcif1 = Field(\"ctcif1\", \"Stream x clear transfer\
    \ complete\n                          interrupt flag (x = 3..0)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.chtif1 = Field(\"chtif1\", \"Stream\
    \ x clear half transfer interrupt\n                          flag (x = 3..0)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cteif1 = Field(\"cteif1\"\
    , \"Stream x clear transfer error interrupt\n                          flag (x\
    \ = 3..0)\", self._address, 9, 0x0001, 1, proxy)\n            self.cdmeif1 = Field(\"\
    cdmeif1\", \"Stream x clear direct mode error\n                          interrupt\
    \ flag (x = 3..0)\", self._address, 8, 0x0001, 1, proxy)\n            self.cfeif1\
    \ = Field(\"cfeif1\", \"Stream x clear FIFO error interrupt flag\n           \
    \               (x = 3..0)\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.ctcif0 = Field(\"ctcif0\", \"Stream x clear transfer complete\n      \
    \                    interrupt flag (x = 3..0)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.chtif0 = Field(\"chtif0\", \"Stream x clear half transfer\
    \ interrupt\n                          flag (x = 3..0)\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.cteif0 = Field(\"cteif0\", \"Stream x clear transfer\
    \ error interrupt\n                          flag (x = 3..0)\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cdmeif0 = Field(\"cdmeif0\", \"Stream\
    \ x clear direct mode error\n                          interrupt flag (x = 3..0)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cfeif0 = Field(\"cfeif0\"\
    , \"Stream x clear FIFO error interrupt flag\n                          (x = 3..0)\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class HifcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    HIFCR\", \"high interrupt flag clear\n              register\", address + 0x000C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ctcif7 = Field(\"ctcif7\"\
    , \"Stream x clear transfer complete\n                          interrupt flag\
    \ (x = 7..4)\", self._address, 27, 0x0001, 1, proxy)\n            self.chtif7\
    \ = Field(\"chtif7\", \"Stream x clear half transfer interrupt\n             \
    \             flag (x = 7..4)\", self._address, 26, 0x0001, 1, proxy)\n      \
    \      self.cteif7 = Field(\"cteif7\", \"Stream x clear transfer error interrupt\n\
    \                          flag (x = 7..4)\", self._address, 25, 0x0001, 1, proxy)\n\
    \            self.cdmeif7 = Field(\"cdmeif7\", \"Stream x clear direct mode error\n\
    \                          interrupt flag (x = 7..4)\", self._address, 24, 0x0001,\
    \ 1, proxy)\n            self.cfeif7 = Field(\"cfeif7\", \"Stream x clear FIFO\
    \ error interrupt flag\n                          (x = 7..4)\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.ctcif6 = Field(\"ctcif6\", \"Stream\
    \ x clear transfer complete\n                          interrupt flag (x = 7..4)\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.chtif6 = Field(\"chtif6\"\
    , \"Stream x clear half transfer interrupt\n                          flag (x\
    \ = 7..4)\", self._address, 20, 0x0001, 1, proxy)\n            self.cteif6 = Field(\"\
    cteif6\", \"Stream x clear transfer error interrupt\n                        \
    \  flag (x = 7..4)\", self._address, 19, 0x0001, 1, proxy)\n            self.cdmeif6\
    \ = Field(\"cdmeif6\", \"Stream x clear direct mode error\n                  \
    \        interrupt flag (x = 7..4)\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.cfeif6 = Field(\"cfeif6\", \"Stream x clear FIFO error interrupt\
    \ flag\n                          (x = 7..4)\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.ctcif5 = Field(\"ctcif5\", \"Stream x clear transfer\
    \ complete\n                          interrupt flag (x = 7..4)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.chtif5 = Field(\"chtif5\", \"Stream\
    \ x clear half transfer interrupt\n                          flag (x = 7..4)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cteif5 = Field(\"cteif5\"\
    , \"Stream x clear transfer error interrupt\n                          flag (x\
    \ = 7..4)\", self._address, 9, 0x0001, 1, proxy)\n            self.cdmeif5 = Field(\"\
    cdmeif5\", \"Stream x clear direct mode error\n                          interrupt\
    \ flag (x = 7..4)\", self._address, 8, 0x0001, 1, proxy)\n            self.cfeif5\
    \ = Field(\"cfeif5\", \"Stream x clear FIFO error interrupt flag\n           \
    \               (x = 7..4)\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.ctcif4 = Field(\"ctcif4\", \"Stream x clear transfer complete\n      \
    \                    interrupt flag (x = 7..4)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.chtif4 = Field(\"chtif4\", \"Stream x clear half transfer\
    \ interrupt\n                          flag (x = 7..4)\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.cteif4 = Field(\"cteif4\", \"Stream x clear transfer\
    \ error interrupt\n                          flag (x = 7..4)\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cdmeif4 = Field(\"cdmeif4\", \"Stream\
    \ x clear direct mode error\n                          interrupt flag (x = 7..4)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cfeif4 = Field(\"cfeif4\"\
    , \"Stream x clear FIFO error interrupt flag\n                          (x = 7..4)\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class S0crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S0CR\", \"stream x configuration\n              register\", address + 0x0010,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S0ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S0NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x0014, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S0parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S0PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S0m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S0M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x001C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S0m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S0M1AR\", \"stream x memory 1 address\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S0fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S0FCR\", \"stream x FIFO control register\", address + 0x0024, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S1crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S1CR\", \"stream x configuration\n              register\", address + 0x0028,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S1ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S1NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x002C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S1parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S1PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0030, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S1m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S1M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x0034, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S1m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S1M1AR\", \"stream x memory 1 address\n              register\", address + 0x0038,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S1fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S1FCR\", \"stream x FIFO control register\", address + 0x003C, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S2crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S2CR\", \"stream x configuration\n              register\", address + 0x0040,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S2ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S2NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x0044, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S2parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S2PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0048, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S2m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S2M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x004C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S2m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S2M1AR\", \"stream x memory 1 address\n              register\", address + 0x0050,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S2fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S2FCR\", \"stream x FIFO control register\", address + 0x0054, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S3crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S3CR\", \"stream x configuration\n              register\", address + 0x0058,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S3ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S3NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x005C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S3parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S3PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0060, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S3m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S3M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x0064, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S3m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S3M1AR\", \"stream x memory 1 address\n              register\", address + 0x0068,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S3fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S3FCR\", \"stream x FIFO control register\", address + 0x006C, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S4crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S4CR\", \"stream x configuration\n              register\", address + 0x0070,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S4ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S4NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x0074, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S4parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S4PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0078, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S4m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S4M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x007C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S4m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S4M1AR\", \"stream x memory 1 address\n              register\", address + 0x0080,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S4fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S4FCR\", \"stream x FIFO control register\", address + 0x0084, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S5crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S5CR\", \"stream x configuration\n              register\", address + 0x0088,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S5ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S5NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x008C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S5parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S5PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x0090, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S5m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S5M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x0094, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S5m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S5M1AR\", \"stream x memory 1 address\n              register\", address + 0x0098,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S5fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S5FCR\", \"stream x FIFO control register\", address + 0x009C, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S6crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S6CR\", \"stream x configuration\n              register\", address + 0x00A0,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S6ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S6NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x00A4, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S6parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S6PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x00A8, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S6m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S6M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x00AC, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S6m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S6M1AR\", \"stream x memory 1 address\n              register\", address + 0x00B0,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S6fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S6FCR\", \"stream x FIFO control register\", address + 0x00B4, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class S7crRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S7CR\", \"stream x configuration\n              register\", address + 0x00B8,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.chsel = Field(\"chsel\"\
    , \"Channel selection\", self._address, 25, 0x0007, 3, proxy)\n            self.mburst\
    \ = Field(\"mburst\", \"Memory burst transfer\n                          configuration\"\
    , self._address, 23, 0x0003, 2, proxy)\n            self.pburst = Field(\"pburst\"\
    , \"Peripheral burst transfer\n                          configuration\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.ct = Field(\"ct\", \"Current target\
    \ (only in double buffer\n                          mode)\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.dbm = Field(\"dbm\", \"Double buffer mode\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.pl = Field(\"pl\", \"\
    Priority level\", self._address, 16, 0x0003, 2, proxy)\n            self.pincos\
    \ = Field(\"pincos\", \"Peripheral increment offset\n                        \
    \  size\", self._address, 15, 0x0001, 1, proxy)\n            self.msize = Field(\"\
    msize\", \"Memory data size\", self._address, 13, 0x0003, 2, proxy)\n        \
    \    self.psize = Field(\"psize\", \"Peripheral data size\", self._address, 11,\
    \ 0x0003, 2, proxy)\n            self.minc = Field(\"minc\", \"Memory increment\
    \ mode\", self._address, 10, 0x0001, 1, proxy)\n            self.pinc = Field(\"\
    pinc\", \"Peripheral increment mode\", self._address, 9, 0x0001, 1, proxy)\n \
    \           self.circ = Field(\"circ\", \"Circular mode\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Data transfer direction\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.pfctrl = Field(\"pfctrl\"\
    , \"Peripheral flow controller\", self._address, 5, 0x0001, 1, proxy)\n      \
    \      self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n           \
    \               enable\", self._address, 4, 0x0001, 1, proxy)\n            self.htie\
    \ = Field(\"htie\", \"Half transfer interrupt\n                          enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.teie = Field(\"teie\"\
    , \"Transfer error interrupt\n                          enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.dmeie = Field(\"dmeie\", \"Direct mode\
    \ error interrupt\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.en = Field(\"en\", \"Stream enable / flag stream\
    \ ready when\n                          read low\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class S7ndtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"S7NDTR\", \"stream x number\
    \ of data\n              register\", address + 0x00BC, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ndt = Field(\"ndt\", \"Number of data items to\n  \
    \                        transfer\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \  \n    class S7parRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"S7PAR\", \"stream x peripheral address\n     \
    \         register\", address + 0x00C0, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.pa = Field(\"pa\", \"Peripheral address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class S7m0arRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"S7M0AR\", \"\
    stream x memory 0 address\n              register\", address + 0x00C4, 32, \"\
    read-write\", 0x0000, proxy)\n            self.m0a = Field(\"m0a\", \"Memory 0\
    \ address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S7m1arRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S7M1AR\", \"stream x memory 1 address\n              register\", address + 0x00C8,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.m1a = Field(\"m1a\", \"\
    Memory 1 address (used in case of Double\n                          buffer mode)\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class S7fcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    S7FCR\", \"stream x FIFO control register\", address + 0x00CC, 32, \"\", 0x0021,\
    \ proxy)\n            self.feie = Field(\"feie\", \"FIFO error interrupt\n   \
    \                       enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fs = Field(\"fs\", \"FIFO status\", self._address, 3, 0x0007, 3, proxy)\n\
    \            self.dmdis = Field(\"dmdis\", \"Direct mode disable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\
    \ selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"dma1\", \"DMA controller\", 0x40026000)\n\
    \        self.lisr = self.LisrRegister(self.address, proxy)\n        self.hisr\
    \ = self.HisrRegister(self.address, proxy)\n        self.lifcr = self.LifcrRegister(self.address,\
    \ proxy)\n        self.hifcr = self.HifcrRegister(self.address, proxy)\n     \
    \   self.s0cr = self.S0crRegister(self.address, proxy)\n        self.s0ndtr =\
    \ self.S0ndtrRegister(self.address, proxy)\n        self.s0par = self.S0parRegister(self.address,\
    \ proxy)\n        self.s0m0ar = self.S0m0arRegister(self.address, proxy)\n   \
    \     self.s0m1ar = self.S0m1arRegister(self.address, proxy)\n        self.s0fcr\
    \ = self.S0fcrRegister(self.address, proxy)\n        self.s1cr = self.S1crRegister(self.address,\
    \ proxy)\n        self.s1ndtr = self.S1ndtrRegister(self.address, proxy)\n   \
    \     self.s1par = self.S1parRegister(self.address, proxy)\n        self.s1m0ar\
    \ = self.S1m0arRegister(self.address, proxy)\n        self.s1m1ar = self.S1m1arRegister(self.address,\
    \ proxy)\n        self.s1fcr = self.S1fcrRegister(self.address, proxy)\n     \
    \   self.s2cr = self.S2crRegister(self.address, proxy)\n        self.s2ndtr =\
    \ self.S2ndtrRegister(self.address, proxy)\n        self.s2par = self.S2parRegister(self.address,\
    \ proxy)\n        self.s2m0ar = self.S2m0arRegister(self.address, proxy)\n   \
    \     self.s2m1ar = self.S2m1arRegister(self.address, proxy)\n        self.s2fcr\
    \ = self.S2fcrRegister(self.address, proxy)\n        self.s3cr = self.S3crRegister(self.address,\
    \ proxy)\n        self.s3ndtr = self.S3ndtrRegister(self.address, proxy)\n   \
    \     self.s3par = self.S3parRegister(self.address, proxy)\n        self.s3m0ar\
    \ = self.S3m0arRegister(self.address, proxy)\n        self.s3m1ar = self.S3m1arRegister(self.address,\
    \ proxy)\n        self.s3fcr = self.S3fcrRegister(self.address, proxy)\n     \
    \   self.s4cr = self.S4crRegister(self.address, proxy)\n        self.s4ndtr =\
    \ self.S4ndtrRegister(self.address, proxy)\n        self.s4par = self.S4parRegister(self.address,\
    \ proxy)\n        self.s4m0ar = self.S4m0arRegister(self.address, proxy)\n   \
    \     self.s4m1ar = self.S4m1arRegister(self.address, proxy)\n        self.s4fcr\
    \ = self.S4fcrRegister(self.address, proxy)\n        self.s5cr = self.S5crRegister(self.address,\
    \ proxy)\n        self.s5ndtr = self.S5ndtrRegister(self.address, proxy)\n   \
    \     self.s5par = self.S5parRegister(self.address, proxy)\n        self.s5m0ar\
    \ = self.S5m0arRegister(self.address, proxy)\n        self.s5m1ar = self.S5m1arRegister(self.address,\
    \ proxy)\n        self.s5fcr = self.S5fcrRegister(self.address, proxy)\n     \
    \   self.s6cr = self.S6crRegister(self.address, proxy)\n        self.s6ndtr =\
    \ self.S6ndtrRegister(self.address, proxy)\n        self.s6par = self.S6parRegister(self.address,\
    \ proxy)\n        self.s6m0ar = self.S6m0arRegister(self.address, proxy)\n   \
    \     self.s6m1ar = self.S6m1arRegister(self.address, proxy)\n        self.s6fcr\
    \ = self.S6fcrRegister(self.address, proxy)\n        self.s7cr = self.S7crRegister(self.address,\
    \ proxy)\n        self.s7ndtr = self.S7ndtrRegister(self.address, proxy)\n   \
    \     self.s7par = self.S7parRegister(self.address, proxy)\n        self.s7m0ar\
    \ = self.S7m0arRegister(self.address, proxy)\n        self.s7m1ar = self.S7m1arRegister(self.address,\
    \ proxy)\n        self.s7fcr = self.S7fcrRegister(self.address, proxy)\n"
  name: DMA1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Rcc(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"clock control register\", address + 0x0000,\
    \ 32, \"\", 0x0083, proxy)\n            self.plli2srdy = Field(\"plli2srdy\",\
    \ \"PLLI2S clock ready flag\", self._address, 27, 0x0001, 1, proxy)\n        \
    \    self.plli2son = Field(\"plli2son\", \"PLLI2S enable\", self._address, 26,\
    \ 0x0001, 1, proxy)\n            self.pllrdy = Field(\"pllrdy\", \"Main PLL (PLL)\
    \ clock ready\n                          flag\", self._address, 25, 0x0001, 1,\
    \ proxy)\n            self.pllon = Field(\"pllon\", \"Main PLL (PLL) enable\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.csson = Field(\"csson\"\
    , \"Clock security system\n                          enable\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.hsebyp = Field(\"hsebyp\", \"HSE clock\
    \ bypass\", self._address, 18, 0x0001, 1, proxy)\n            self.hserdy = Field(\"\
    hserdy\", \"HSE clock ready flag\", self._address, 17, 0x0001, 1, proxy)\n   \
    \         self.hseon = Field(\"hseon\", \"HSE clock enable\", self._address, 16,\
    \ 0x0001, 1, proxy)\n            self.hsical = Field(\"hsical\", \"Internal high-speed\
    \ clock\n                          calibration\", self._address, 8, 0x00FF, 8,\
    \ proxy)\n            self.hsitrim = Field(\"hsitrim\", \"Internal high-speed\
    \ clock\n                          trimming\", self._address, 3, 0x001F, 5, proxy)\n\
    \            self.hsirdy = Field(\"hsirdy\", \"Internal high-speed clock ready\n\
    \                          flag\", self._address, 1, 0x0001, 1, proxy)\n     \
    \       self.hsion = Field(\"hsion\", \"Internal high-speed clock\n          \
    \                enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ PllcfgrRegister(Register):\n        def __init__(self, address, proxy):\n  \
    \          super().__init__(\"PLLCFGR\", \"PLL configuration register\", address\
    \ + 0x0004, 32, \"read-write\", 0x24003010, proxy)\n            self.pllq3 = Field(\"\
    pllq3\", \"Main PLL (PLL) division factor for USB\n                          OTG\
    \ FS, SDIO and random number generator\n                          clocks\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.pllq2 = Field(\"pllq2\", \"Main PLL\
    \ (PLL) division factor for USB\n                          OTG FS, SDIO and random\
    \ number generator\n                          clocks\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.pllq1 = Field(\"pllq1\", \"Main PLL (PLL) division\
    \ factor for USB\n                          OTG FS, SDIO and random number generator\n\
    \                          clocks\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.pllq0 = Field(\"pllq0\", \"Main PLL (PLL) division factor for\
    \ USB\n                          OTG FS, SDIO and random number generator\n  \
    \                        clocks\", self._address, 24, 0x0001, 1, proxy)\n    \
    \        self.pllsrc = Field(\"pllsrc\", \"Main PLL(PLL) and audio PLL (PLLI2S)\n\
    \                          entry clock source\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.pllp1 = Field(\"pllp1\", \"Main PLL (PLL) division\
    \ factor for main\n                          system clock\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.pllp0 = Field(\"pllp0\", \"Main PLL (PLL)\
    \ division factor for main\n                          system clock\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.plln8 = Field(\"plln8\", \"Main PLL\
    \ (PLL) multiplication factor for\n                          VCO\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.plln7 = Field(\"plln7\", \"Main PLL\
    \ (PLL) multiplication factor for\n                          VCO\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.plln6 = Field(\"plln6\", \"Main PLL\
    \ (PLL) multiplication factor for\n                          VCO\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.plln5 = Field(\"plln5\", \"Main PLL\
    \ (PLL) multiplication factor for\n                          VCO\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.plln4 = Field(\"plln4\", \"Main PLL\
    \ (PLL) multiplication factor for\n                          VCO\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.plln3 = Field(\"plln3\", \"Main PLL\
    \ (PLL) multiplication factor for\n                          VCO\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.plln2 = Field(\"plln2\", \"Main PLL (PLL)\
    \ multiplication factor for\n                          VCO\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.plln1 = Field(\"plln1\", \"Main PLL (PLL)\
    \ multiplication factor for\n                          VCO\", self._address, 7,\
    \ 0x0001, 1, proxy)\n            self.plln0 = Field(\"plln0\", \"Main PLL (PLL)\
    \ multiplication factor for\n                          VCO\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.pllm5 = Field(\"pllm5\", \"Division factor\
    \ for the main PLL (PLL)\n                          and audio PLL (PLLI2S) input\
    \ clock\", self._address, 5, 0x0001, 1, proxy)\n            self.pllm4 = Field(\"\
    pllm4\", \"Division factor for the main PLL (PLL)\n                          and\
    \ audio PLL (PLLI2S) input clock\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.pllm3 = Field(\"pllm3\", \"Division factor for the main PLL (PLL)\n\
    \                          and audio PLL (PLLI2S) input clock\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.pllm2 = Field(\"pllm2\", \"Division factor\
    \ for the main PLL (PLL)\n                          and audio PLL (PLLI2S) input\
    \ clock\", self._address, 2, 0x0001, 1, proxy)\n            self.pllm1 = Field(\"\
    pllm1\", \"Division factor for the main PLL (PLL)\n                          and\
    \ audio PLL (PLLI2S) input clock\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.pllm0 = Field(\"pllm0\", \"Division factor for the main PLL (PLL)\n\
    \                          and audio PLL (PLLI2S) input clock\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class CfgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CFGR\", \"clock configuration\
    \ register\", address + 0x0008, 32, \"\", 0x0000, proxy)\n            self.mco2\
    \ = Field(\"mco2\", \"Microcontroller clock output\n                         \
    \ 2\", self._address, 30, 0x0003, 2, proxy)\n            self.mco2pre = Field(\"\
    mco2pre\", \"MCO2 prescaler\", self._address, 27, 0x0007, 3, proxy)\n        \
    \    self.mco1pre = Field(\"mco1pre\", \"MCO1 prescaler\", self._address, 24,\
    \ 0x0007, 3, proxy)\n            self.i2ssrc = Field(\"i2ssrc\", \"I2S clock selection\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.mco1 = Field(\"mco1\"\
    , \"Microcontroller clock output\n                          1\", self._address,\
    \ 21, 0x0003, 2, proxy)\n            self.rtcpre = Field(\"rtcpre\", \"HSE division\
    \ factor for RTC\n                          clock\", self._address, 16, 0x001F,\
    \ 5, proxy)\n            self.ppre2 = Field(\"ppre2\", \"APB high-speed prescaler\n\
    \                          (APB2)\", self._address, 13, 0x0007, 3, proxy)\n  \
    \          self.ppre1 = Field(\"ppre1\", \"APB Low speed prescaler\n         \
    \                 (APB1)\", self._address, 10, 0x0007, 3, proxy)\n           \
    \ self.hpre = Field(\"hpre\", \"AHB prescaler\", self._address, 4, 0x000F, 4,\
    \ proxy)\n            self.sws1 = Field(\"sws1\", \"System clock switch status\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.sws0 = Field(\"sws0\"\
    , \"System clock switch status\", self._address, 2, 0x0001, 1, proxy)\n      \
    \      self.sw1 = Field(\"sw1\", \"System clock switch\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.sw0 = Field(\"sw0\", \"System clock switch\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class CirRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CIR\", \"clock interrupt register\"\
    , address + 0x000C, 32, \"\", 0x0000, proxy)\n            self.cssc = Field(\"\
    cssc\", \"Clock security system interrupt\n                          clear\",\
    \ self._address, 23, 0x0001, 1, proxy)\n            self.pllsairdyc = Field(\"\
    pllsairdyc\", \"PLLSAI Ready Interrupt\n                          Clear\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.plli2srdyc = Field(\"plli2srdyc\", \"\
    PLLI2S ready interrupt\n                          clear\", self._address, 21,\
    \ 0x0001, 1, proxy)\n            self.pllrdyc = Field(\"pllrdyc\", \"Main PLL(PLL)\
    \ ready interrupt\n                          clear\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.hserdyc = Field(\"hserdyc\", \"HSE ready interrupt\
    \ clear\", self._address, 19, 0x0001, 1, proxy)\n            self.hsirdyc = Field(\"\
    hsirdyc\", \"HSI ready interrupt clear\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.lserdyc = Field(\"lserdyc\", \"LSE ready interrupt clear\",\
    \ self._address, 17, 0x0001, 1, proxy)\n            self.lsirdyc = Field(\"lsirdyc\"\
    , \"LSI ready interrupt clear\", self._address, 16, 0x0001, 1, proxy)\n      \
    \      self.pllsairdyie = Field(\"pllsairdyie\", \"PLLSAI Ready Interrupt\n  \
    \                        Enable\", self._address, 14, 0x0001, 1, proxy)\n    \
    \        self.plli2srdyie = Field(\"plli2srdyie\", \"PLLI2S ready interrupt\n\
    \                          enable\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.pllrdyie = Field(\"pllrdyie\", \"Main PLL (PLL) ready interrupt\n\
    \                          enable\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.hserdyie = Field(\"hserdyie\", \"HSE ready interrupt enable\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.hsirdyie = Field(\"hsirdyie\"\
    , \"HSI ready interrupt enable\", self._address, 10, 0x0001, 1, proxy)\n     \
    \       self.lserdyie = Field(\"lserdyie\", \"LSE ready interrupt enable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.lsirdyie = Field(\"lsirdyie\", \"LSI\
    \ ready interrupt enable\", self._address, 8, 0x0001, 1, proxy)\n            self.cssf\
    \ = Field(\"cssf\", \"Clock security system interrupt\n                      \
    \    flag\", self._address, 7, 0x0001, 1, proxy)\n            self.pllsairdyf\
    \ = Field(\"pllsairdyf\", \"PLLSAI ready interrupt\n                         \
    \ flag\", self._address, 6, 0x0001, 1, proxy)\n            self.plli2srdyf = Field(\"\
    plli2srdyf\", \"PLLI2S ready interrupt\n                          flag\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.pllrdyf = Field(\"pllrdyf\", \"Main PLL\
    \ (PLL) ready interrupt\n                          flag\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.hserdyf = Field(\"hserdyf\", \"HSE ready interrupt\
    \ flag\", self._address, 3, 0x0001, 1, proxy)\n            self.hsirdyf = Field(\"\
    hsirdyf\", \"HSI ready interrupt flag\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.lserdyf = Field(\"lserdyf\", \"LSE ready interrupt flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lsirdyf = Field(\"lsirdyf\", \"LSI ready\
    \ interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Ahb1rstrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    AHB1RSTR\", \"AHB1 peripheral reset register\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.otghsrst = Field(\"otghsrst\", \"USB OTG HS\
    \ module reset\", self._address, 29, 0x0001, 1, proxy)\n            self.dma2rst\
    \ = Field(\"dma2rst\", \"DMA2 reset\", self._address, 22, 0x0001, 1, proxy)\n\
    \            self.dma1rst = Field(\"dma1rst\", \"DMA2 reset\", self._address,\
    \ 21, 0x0001, 1, proxy)\n            self.crcrst = Field(\"crcrst\", \"CRC reset\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.gpiohrst = Field(\"gpiohrst\"\
    , \"IO port H reset\", self._address, 7, 0x0001, 1, proxy)\n            self.gpiogrst\
    \ = Field(\"gpiogrst\", \"IO port G reset\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.gpiofrst = Field(\"gpiofrst\", \"IO port F reset\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.gpioerst = Field(\"gpioerst\", \"IO port\
    \ E reset\", self._address, 4, 0x0001, 1, proxy)\n            self.gpiodrst =\
    \ Field(\"gpiodrst\", \"IO port D reset\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.gpiocrst = Field(\"gpiocrst\", \"IO port C reset\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.gpiobrst = Field(\"gpiobrst\", \"IO port\
    \ B reset\", self._address, 1, 0x0001, 1, proxy)\n            self.gpioarst =\
    \ Field(\"gpioarst\", \"IO port A reset\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class Ahb2rstrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"AHB2RSTR\", \"AHB2 peripheral reset\
    \ register\", address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.otgfsrst = Field(\"otgfsrst\", \"USB OTG FS module reset\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.dcmirst = Field(\"dcmirst\", \"Camera\
    \ interface reset\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Ahb3rstrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    AHB3RSTR\", \"AHB3 peripheral reset register\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.fmcrst = Field(\"fmcrst\", \"Flexible memory\
    \ controller module\n                          reset\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.qspirst = Field(\"qspirst\", \"QUADSPI module reset\"\
    , self._address, 1, 0x0001, 1, proxy)\n    \n    class Apb1rstrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    APB1RSTR\", \"APB1 peripheral reset register\", address + 0x0020, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.tim2rst = Field(\"tim2rst\", \"TIM2 reset\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.tim3rst = Field(\"tim3rst\"\
    , \"TIM3 reset\", self._address, 1, 0x0001, 1, proxy)\n            self.tim4rst\
    \ = Field(\"tim4rst\", \"TIM4 reset\", self._address, 2, 0x0001, 1, proxy)\n \
    \           self.tim5rst = Field(\"tim5rst\", \"TIM5 reset\", self._address, 3,\
    \ 0x0001, 1, proxy)\n            self.tim6rst = Field(\"tim6rst\", \"TIM6 reset\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.tim7rst = Field(\"tim7rst\"\
    , \"TIM7 reset\", self._address, 5, 0x0001, 1, proxy)\n            self.tim12rst\
    \ = Field(\"tim12rst\", \"TIM12 reset\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.tim13rst = Field(\"tim13rst\", \"TIM13 reset\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.tim14rst = Field(\"tim14rst\", \"TIM14\
    \ reset\", self._address, 8, 0x0001, 1, proxy)\n            self.wwdgrst = Field(\"\
    wwdgrst\", \"Window watchdog reset\", self._address, 11, 0x0001, 1, proxy)\n \
    \           self.spi2rst = Field(\"spi2rst\", \"SPI 2 reset\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.spi3rst = Field(\"spi3rst\", \"SPI 3\
    \ reset\", self._address, 15, 0x0001, 1, proxy)\n            self.spdifrst = Field(\"\
    spdifrst\", \"SPDIF-IN reset\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.uart2rst = Field(\"uart2rst\", \"USART 2 reset\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.uart3rst = Field(\"uart3rst\", \"USART 3\
    \ reset\", self._address, 18, 0x0001, 1, proxy)\n            self.uart4rst = Field(\"\
    uart4rst\", \"USART 4 reset\", self._address, 19, 0x0001, 1, proxy)\n        \
    \    self.uart5rst = Field(\"uart5rst\", \"USART 5 reset\", self._address, 20,\
    \ 0x0001, 1, proxy)\n            self.i2c1rst = Field(\"i2c1rst\", \"I2C 1 reset\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.i2c2rst = Field(\"i2c2rst\"\
    , \"I2C 2 reset\", self._address, 22, 0x0001, 1, proxy)\n            self.i2c3rst\
    \ = Field(\"i2c3rst\", \"I2C3 reset\", self._address, 23, 0x0001, 1, proxy)\n\
    \            self.i2cfmp1rst = Field(\"i2cfmp1rst\", \"I2CFMP1 reset\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.can1rst = Field(\"can1rst\", \"CAN1\
    \ reset\", self._address, 25, 0x0001, 1, proxy)\n            self.can2rst = Field(\"\
    can2rst\", \"CAN2 reset\", self._address, 26, 0x0001, 1, proxy)\n            self.pwrrst\
    \ = Field(\"pwrrst\", \"Power interface reset\", self._address, 28, 0x0001, 1,\
    \ proxy)\n            self.dacrst = Field(\"dacrst\", \"DAC reset\", self._address,\
    \ 29, 0x0001, 1, proxy)\n    \n    class Apb2rstrRegister(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"APB2RSTR\"\
    , \"APB2 peripheral reset register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.tim1rst = Field(\"tim1rst\", \"TIM1 reset\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.tim8rst = Field(\"tim8rst\", \"TIM8 reset\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.usart1rst = Field(\"usart1rst\"\
    , \"USART1 reset\", self._address, 4, 0x0001, 1, proxy)\n            self.usart6rst\
    \ = Field(\"usart6rst\", \"USART6 reset\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.adcrst = Field(\"adcrst\", \"ADC interface reset (common to\
    \ all\n                          ADCs)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.sdiorst = Field(\"sdiorst\", \"SDIO reset\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.spi1rst = Field(\"spi1rst\", \"SPI 1\
    \ reset\", self._address, 12, 0x0001, 1, proxy)\n            self.spi4rst = Field(\"\
    spi4rst\", \"SPI4 reset\", self._address, 13, 0x0001, 1, proxy)\n            self.syscfgrst\
    \ = Field(\"syscfgrst\", \"System configuration controller\n                 \
    \         reset\", self._address, 14, 0x0001, 1, proxy)\n            self.tim9rst\
    \ = Field(\"tim9rst\", \"TIM9 reset\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.tim10rst = Field(\"tim10rst\", \"TIM10 reset\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.tim11rst = Field(\"tim11rst\", \"TIM11\
    \ reset\", self._address, 18, 0x0001, 1, proxy)\n            self.sai1rst = Field(\"\
    sai1rst\", \"SAI1 reset\", self._address, 22, 0x0001, 1, proxy)\n            self.sai2rst\
    \ = Field(\"sai2rst\", \"SAI2 reset\", self._address, 23, 0x0001, 1, proxy)\n\
    \    \n    class Ahb1enrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"AHB1ENR\", \"AHB1 peripheral clock register\"\
    , address + 0x0030, 32, \"read-write\", 0x100000, proxy)\n            self.otghsulpien\
    \ = Field(\"otghsulpien\", \"USB OTG HSULPI clock\n                          enable\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.otghsen = Field(\"otghsen\"\
    , \"USB OTG HS clock enable\", self._address, 29, 0x0001, 1, proxy)\n        \
    \    self.dma2en = Field(\"dma2en\", \"DMA2 clock enable\", self._address, 22,\
    \ 0x0001, 1, proxy)\n            self.dma1en = Field(\"dma1en\", \"DMA1 clock\
    \ enable\", self._address, 21, 0x0001, 1, proxy)\n            self.bkpsramen =\
    \ Field(\"bkpsramen\", \"Backup SRAM interface clock\n                       \
    \   enable\", self._address, 18, 0x0001, 1, proxy)\n            self.crcen = Field(\"\
    crcen\", \"CRC clock enable\", self._address, 12, 0x0001, 1, proxy)\n        \
    \    self.gpiohen = Field(\"gpiohen\", \"IO port H clock enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.gpiogen = Field(\"gpiogen\", \"IO port\
    \ G clock enable\", self._address, 6, 0x0001, 1, proxy)\n            self.gpiofen\
    \ = Field(\"gpiofen\", \"IO port F clock enable\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.gpioeen = Field(\"gpioeen\", \"IO port E clock enable\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.gpioden = Field(\"gpioden\"\
    , \"IO port D clock enable\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.gpiocen = Field(\"gpiocen\", \"IO port C clock enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.gpioben = Field(\"gpioben\", \"IO port\
    \ B clock enable\", self._address, 1, 0x0001, 1, proxy)\n            self.gpioaen\
    \ = Field(\"gpioaen\", \"IO port A clock enable\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class Ahb2enrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AHB2ENR\", \"AHB2 peripheral\
    \ clock enable\n              register\", address + 0x0034, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.otgfsen = Field(\"otgfsen\", \"USB OTG FS clock\
    \ enable\", self._address, 7, 0x0001, 1, proxy)\n            self.dcmien = Field(\"\
    dcmien\", \"Camera interface enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Ahb3enrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"AHB3ENR\", \"AHB3 peripheral clock enable\n\
    \              register\", address + 0x0038, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.fmcen = Field(\"fmcen\", \"Flexible memory controller module\
    \ clock\n                          enable\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.qspien = Field(\"qspien\", \"QUADSPI memory controller module\
    \ clock\n                          enable\", self._address, 1, 0x0001, 1, proxy)\n\
    \    \n    class Apb1enrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"APB1ENR\", \"APB1 peripheral clock enable\n\
    \              register\", address + 0x0040, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.tim2en = Field(\"tim2en\", \"TIM2 clock enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.tim3en = Field(\"tim3en\", \"TIM3 clock\
    \ enable\", self._address, 1, 0x0001, 1, proxy)\n            self.tim4en = Field(\"\
    tim4en\", \"TIM4 clock enable\", self._address, 2, 0x0001, 1, proxy)\n       \
    \     self.tim5en = Field(\"tim5en\", \"TIM5 clock enable\", self._address, 3,\
    \ 0x0001, 1, proxy)\n            self.tim6en = Field(\"tim6en\", \"TIM6 clock\
    \ enable\", self._address, 4, 0x0001, 1, proxy)\n            self.tim7en = Field(\"\
    tim7en\", \"TIM7 clock enable\", self._address, 5, 0x0001, 1, proxy)\n       \
    \     self.tim12en = Field(\"tim12en\", \"TIM12 clock enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.tim13en = Field(\"tim13en\", \"TIM13\
    \ clock enable\", self._address, 7, 0x0001, 1, proxy)\n            self.tim14en\
    \ = Field(\"tim14en\", \"TIM14 clock enable\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.wwdgen = Field(\"wwdgen\", \"Window watchdog clock\n       \
    \                   enable\", self._address, 11, 0x0001, 1, proxy)\n         \
    \   self.spi2en = Field(\"spi2en\", \"SPI2 clock enable\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.spi3en = Field(\"spi3en\", \"SPI3 clock\
    \ enable\", self._address, 15, 0x0001, 1, proxy)\n            self.spdifen = Field(\"\
    spdifen\", \"SPDIF-IN clock enable\", self._address, 16, 0x0001, 1, proxy)\n \
    \           self.usart2en = Field(\"usart2en\", \"USART 2 clock enable\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.usart3en = Field(\"usart3en\", \"USART3\
    \ clock enable\", self._address, 18, 0x0001, 1, proxy)\n            self.uart4en\
    \ = Field(\"uart4en\", \"UART4 clock enable\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.uart5en = Field(\"uart5en\", \"UART5 clock enable\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.i2c1en = Field(\"i2c1en\", \"I2C1 clock\
    \ enable\", self._address, 21, 0x0001, 1, proxy)\n            self.i2c2en = Field(\"\
    i2c2en\", \"I2C2 clock enable\", self._address, 22, 0x0001, 1, proxy)\n      \
    \      self.i2c3en = Field(\"i2c3en\", \"I2C3 clock enable\", self._address, 23,\
    \ 0x0001, 1, proxy)\n            self.i2cfmp1en = Field(\"i2cfmp1en\", \"I2CFMP1\
    \ clock enable\", self._address, 24, 0x0001, 1, proxy)\n            self.can1en\
    \ = Field(\"can1en\", \"CAN 1 clock enable\", self._address, 25, 0x0001, 1, proxy)\n\
    \            self.can2en = Field(\"can2en\", \"CAN 2 clock enable\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.cec = Field(\"cec\", \"CEC interface\
    \ clock enable\", self._address, 27, 0x0001, 1, proxy)\n            self.pwren\
    \ = Field(\"pwren\", \"Power interface clock\n                          enable\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.dacen = Field(\"dacen\"\
    , \"DAC interface clock enable\", self._address, 29, 0x0001, 1, proxy)\n    \n\
    \    class Apb2enrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"APB2ENR\", \"APB2 peripheral clock enable\n  \
    \            register\", address + 0x0044, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.tim1en = Field(\"tim1en\", \"TIM1 clock enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.tim8en = Field(\"tim8en\", \"TIM8 clock\
    \ enable\", self._address, 1, 0x0001, 1, proxy)\n            self.usart1en = Field(\"\
    usart1en\", \"USART1 clock enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.usart6en = Field(\"usart6en\", \"USART6 clock enable\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.adc1en = Field(\"adc1en\", \"ADC1 clock\
    \ enable\", self._address, 8, 0x0001, 1, proxy)\n            self.adc2en = Field(\"\
    adc2en\", \"ADC2 clock enable\", self._address, 9, 0x0001, 1, proxy)\n       \
    \     self.adc3en = Field(\"adc3en\", \"ADC3 clock enable\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.sdioen = Field(\"sdioen\", \"SDIO clock\
    \ enable\", self._address, 11, 0x0001, 1, proxy)\n            self.spi1en = Field(\"\
    spi1en\", \"SPI1 clock enable\", self._address, 12, 0x0001, 1, proxy)\n      \
    \      self.spi4enr = Field(\"spi4enr\", \"SPI4 clock enable\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.syscfgen = Field(\"syscfgen\", \"System\
    \ configuration controller clock\n                          enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.tim9en = Field(\"tim9en\", \"TIM9 clock\
    \ enable\", self._address, 16, 0x0001, 1, proxy)\n            self.tim10en = Field(\"\
    tim10en\", \"TIM10 clock enable\", self._address, 17, 0x0001, 1, proxy)\n    \
    \        self.tim11en = Field(\"tim11en\", \"TIM11 clock enable\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.sai1en = Field(\"sai1en\", \"SAI1 clock\
    \ enable\", self._address, 22, 0x0001, 1, proxy)\n            self.sai2en = Field(\"\
    sai2en\", \"SAI2 clock enable\", self._address, 23, 0x0001, 1, proxy)\n    \n\
    \    class Ahb1lpenrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"AHB1LPENR\", \"AHB1 peripheral clock enable in\
    \ low power\n              mode register\", address + 0x0050, 32, \"read-write\"\
    , 0x7E6791FF, proxy)\n            self.gpioalpen = Field(\"gpioalpen\", \"IO port\
    \ A clock enable during sleep\n                          mode\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.gpioblpen = Field(\"gpioblpen\", \"IO\
    \ port B clock enable during Sleep\n                          mode\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.gpioclpen = Field(\"gpioclpen\", \"IO\
    \ port C clock enable during Sleep\n                          mode\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.gpiodlpen = Field(\"gpiodlpen\", \"IO\
    \ port D clock enable during Sleep\n                          mode\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.gpioelpen = Field(\"gpioelpen\", \"IO\
    \ port E clock enable during Sleep\n                          mode\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.gpioflpen = Field(\"gpioflpen\", \"IO\
    \ port F clock enable during Sleep\n                          mode\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.gpioglpen = Field(\"gpioglpen\", \"IO\
    \ port G clock enable during Sleep\n                          mode\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.gpiohlpen = Field(\"gpiohlpen\", \"IO\
    \ port H clock enable during Sleep\n                          mode\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.crclpen = Field(\"crclpen\", \"CRC clock\
    \ enable during Sleep\n                          mode\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.flitflpen = Field(\"flitflpen\", \"Flash interface\
    \ clock enable during\n                          Sleep mode\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.sram1lpen = Field(\"sram1lpen\", \"\
    SRAM 1interface clock enable during\n                          Sleep mode\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.sram2lpen = Field(\"sram2lpen\", \"\
    SRAM 2 interface clock enable during\n                          Sleep mode\",\
    \ self._address, 17, 0x0001, 1, proxy)\n            self.bkpsramlpen = Field(\"\
    bkpsramlpen\", \"Backup SRAM interface clock enable\n                        \
    \  during Sleep mode\", self._address, 18, 0x0001, 1, proxy)\n            self.dma1lpen\
    \ = Field(\"dma1lpen\", \"DMA1 clock enable during Sleep\n                   \
    \       mode\", self._address, 21, 0x0001, 1, proxy)\n            self.dma2lpen\
    \ = Field(\"dma2lpen\", \"DMA2 clock enable during Sleep\n                   \
    \       mode\", self._address, 22, 0x0001, 1, proxy)\n            self.otghslpen\
    \ = Field(\"otghslpen\", \"USB OTG HS clock enable during Sleep\n            \
    \              mode\", self._address, 29, 0x0001, 1, proxy)\n            self.otghsulpilpen\
    \ = Field(\"otghsulpilpen\", \"USB OTG HS ULPI clock enable during\n         \
    \                 Sleep mode\", self._address, 30, 0x0001, 1, proxy)\n    \n \
    \   class Ahb2lpenrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"AHB2LPENR\", \"AHB2 peripheral clock enable in\
    \ low power\n              mode register\", address + 0x0054, 32, \"read-write\"\
    , 0x00F1, proxy)\n            self.otgfslpen = Field(\"otgfslpen\", \"USB OTG\
    \ FS clock enable during Sleep\n                          mode\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.dcmilpen = Field(\"dcmilpen\", \"Camera\
    \ interface enable during Sleep\n                          mode\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Ahb3lpenrRegister(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"AHB3LPENR\"\
    , \"AHB3 peripheral clock enable in low power\n              mode register\",\
    \ address + 0x0058, 32, \"read-write\", 0x0001, proxy)\n            self.fmclpen\
    \ = Field(\"fmclpen\", \"Flexible memory controller module clock\n           \
    \               enable during Sleep mode\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.qspilpen = Field(\"qspilpen\", \"QUADSPI memory controller module\
    \ clock\n                          enable during Sleep mode\", self._address,\
    \ 1, 0x0001, 1, proxy)\n    \n    class Apb1lpenrRegister(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"APB1LPENR\"\
    , \"APB1 peripheral clock enable in low power\n              mode register\",\
    \ address + 0x0060, 32, \"read-write\", 0x36FEC9FF, proxy)\n            self.tim2lpen\
    \ = Field(\"tim2lpen\", \"TIM2 clock enable during Sleep\n                   \
    \       mode\", self._address, 0, 0x0001, 1, proxy)\n            self.tim3lpen\
    \ = Field(\"tim3lpen\", \"TIM3 clock enable during Sleep\n                   \
    \       mode\", self._address, 1, 0x0001, 1, proxy)\n            self.tim4lpen\
    \ = Field(\"tim4lpen\", \"TIM4 clock enable during Sleep\n                   \
    \       mode\", self._address, 2, 0x0001, 1, proxy)\n            self.tim5lpen\
    \ = Field(\"tim5lpen\", \"TIM5 clock enable during Sleep\n                   \
    \       mode\", self._address, 3, 0x0001, 1, proxy)\n            self.tim6lpen\
    \ = Field(\"tim6lpen\", \"TIM6 clock enable during Sleep\n                   \
    \       mode\", self._address, 4, 0x0001, 1, proxy)\n            self.tim7lpen\
    \ = Field(\"tim7lpen\", \"TIM7 clock enable during Sleep\n                   \
    \       mode\", self._address, 5, 0x0001, 1, proxy)\n            self.tim12lpen\
    \ = Field(\"tim12lpen\", \"TIM12 clock enable during Sleep\n                 \
    \         mode\", self._address, 6, 0x0001, 1, proxy)\n            self.tim13lpen\
    \ = Field(\"tim13lpen\", \"TIM13 clock enable during Sleep\n                 \
    \         mode\", self._address, 7, 0x0001, 1, proxy)\n            self.tim14lpen\
    \ = Field(\"tim14lpen\", \"TIM14 clock enable during Sleep\n                 \
    \         mode\", self._address, 8, 0x0001, 1, proxy)\n            self.wwdglpen\
    \ = Field(\"wwdglpen\", \"Window watchdog clock enable during\n              \
    \            Sleep mode\", self._address, 11, 0x0001, 1, proxy)\n            self.spi2lpen\
    \ = Field(\"spi2lpen\", \"SPI2 clock enable during Sleep\n                   \
    \       mode\", self._address, 14, 0x0001, 1, proxy)\n            self.spi3lpen\
    \ = Field(\"spi3lpen\", \"SPI3 clock enable during Sleep\n                   \
    \       mode\", self._address, 15, 0x0001, 1, proxy)\n            self.spdiflpen\
    \ = Field(\"spdiflpen\", \"SPDIF clock enable during Sleep\n                 \
    \         mode\", self._address, 16, 0x0001, 1, proxy)\n            self.usart2lpen\
    \ = Field(\"usart2lpen\", \"USART2 clock enable during Sleep\n               \
    \           mode\", self._address, 17, 0x0001, 1, proxy)\n            self.usart3lpen\
    \ = Field(\"usart3lpen\", \"USART3 clock enable during Sleep\n               \
    \           mode\", self._address, 18, 0x0001, 1, proxy)\n            self.uart4lpen\
    \ = Field(\"uart4lpen\", \"UART4 clock enable during Sleep\n                 \
    \         mode\", self._address, 19, 0x0001, 1, proxy)\n            self.uart5lpen\
    \ = Field(\"uart5lpen\", \"UART5 clock enable during Sleep\n                 \
    \         mode\", self._address, 20, 0x0001, 1, proxy)\n            self.i2c1lpen\
    \ = Field(\"i2c1lpen\", \"I2C1 clock enable during Sleep\n                   \
    \       mode\", self._address, 21, 0x0001, 1, proxy)\n            self.i2c2lpen\
    \ = Field(\"i2c2lpen\", \"I2C2 clock enable during Sleep\n                   \
    \       mode\", self._address, 22, 0x0001, 1, proxy)\n            self.i2c3lpen\
    \ = Field(\"i2c3lpen\", \"I2C3 clock enable during Sleep\n                   \
    \       mode\", self._address, 23, 0x0001, 1, proxy)\n            self.i2cfmp1lpen\
    \ = Field(\"i2cfmp1lpen\", \"I2CFMP1 clock enable during Sleep\n             \
    \             mode\", self._address, 24, 0x0001, 1, proxy)\n            self.can1lpen\
    \ = Field(\"can1lpen\", \"CAN 1 clock enable during Sleep\n                  \
    \        mode\", self._address, 25, 0x0001, 1, proxy)\n            self.can2lpen\
    \ = Field(\"can2lpen\", \"CAN 2 clock enable during Sleep\n                  \
    \        mode\", self._address, 26, 0x0001, 1, proxy)\n            self.ceclpen\
    \ = Field(\"ceclpen\", \"CEC clock enable during Sleep\n                     \
    \     mode\", self._address, 27, 0x0001, 1, proxy)\n            self.pwrlpen =\
    \ Field(\"pwrlpen\", \"Power interface clock enable during\n                 \
    \         Sleep mode\", self._address, 28, 0x0001, 1, proxy)\n            self.daclpen\
    \ = Field(\"daclpen\", \"DAC interface clock enable during Sleep\n           \
    \               mode\", self._address, 29, 0x0001, 1, proxy)\n    \n    class\
    \ Apb2lpenrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"APB2LPENR\", \"APB2 peripheral clock enabled in\
    \ low power\n              mode register\", address + 0x0064, 32, \"read-write\"\
    , 0x75F33, proxy)\n            self.tim1lpen = Field(\"tim1lpen\", \"TIM1 clock\
    \ enable during Sleep\n                          mode\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.tim8lpen = Field(\"tim8lpen\", \"TIM8 clock enable\
    \ during Sleep\n                          mode\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.usart1lpen = Field(\"usart1lpen\", \"USART1 clock enable\
    \ during Sleep\n                          mode\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.usart6lpen = Field(\"usart6lpen\", \"USART6 clock enable\
    \ during Sleep\n                          mode\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.adc1lpen = Field(\"adc1lpen\", \"ADC1 clock enable\
    \ during Sleep\n                          mode\", self._address, 8, 0x0001, 1,\
    \ proxy)\n            self.adc2lpen = Field(\"adc2lpen\", \"ADC2 clock enable\
    \ during Sleep\n                          mode\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.adc3lpen = Field(\"adc3lpen\", \"ADC 3 clock enable\
    \ during Sleep\n                          mode\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.sdiolpen = Field(\"sdiolpen\", \"SDIO clock enable\
    \ during Sleep\n                          mode\", self._address, 11, 0x0001, 1,\
    \ proxy)\n            self.spi1lpen = Field(\"spi1lpen\", \"SPI 1 clock enable\
    \ during Sleep\n                          mode\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.spi4lpen = Field(\"spi4lpen\", \"SPI 4 clock enable\
    \ during Sleep\n                          mode\", self._address, 13, 0x0001, 1,\
    \ proxy)\n            self.syscfglpen = Field(\"syscfglpen\", \"System configuration\
    \ controller clock\n                          enable during Sleep mode\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.tim9lpen = Field(\"tim9lpen\", \"TIM9\
    \ clock enable during sleep\n                          mode\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.tim10lpen = Field(\"tim10lpen\", \"\
    TIM10 clock enable during Sleep\n                          mode\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.tim11lpen = Field(\"tim11lpen\", \"\
    TIM11 clock enable during Sleep\n                          mode\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.sai1lpen = Field(\"sai1lpen\", \"SAI1\
    \ clock enable\", self._address, 22, 0x0001, 1, proxy)\n            self.sai2lpen\
    \ = Field(\"sai2lpen\", \"SAI2 clock enable\", self._address, 23, 0x0001, 1, proxy)\n\
    \    \n    class BdcrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"BDCR\", \"Backup domain control register\"\
    , address + 0x0070, 32, \"\", 0x0000, proxy)\n            self.bdrst = Field(\"\
    bdrst\", \"Backup domain software\n                          reset\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.rtcen = Field(\"rtcen\", \"RTC clock\
    \ enable\", self._address, 15, 0x0001, 1, proxy)\n            self.rtcsel = Field(\"\
    rtcsel\", \"RTC clock source selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.lsemod = Field(\"lsemod\", \"External low-speed oscillator\n\
    \                          mode\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.lsebyp = Field(\"lsebyp\", \"External low-speed oscillator\n    \
    \                      bypass\", self._address, 2, 0x0001, 1, proxy)\n       \
    \     self.lserdy = Field(\"lserdy\", \"External low-speed oscillator\n      \
    \                    ready\", self._address, 1, 0x0001, 1, proxy)\n          \
    \  self.lseon = Field(\"lseon\", \"External low-speed oscillator\n           \
    \               enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ CsrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"CSR\", \"clock control & status\n              register\"\
    , address + 0x0074, 32, \"\", 0xE000000, proxy)\n            self.lpwrrstf = Field(\"\
    lpwrrstf\", \"Low-power reset flag\", self._address, 31, 0x0001, 1, proxy)\n \
    \           self.wwdgrstf = Field(\"wwdgrstf\", \"Window watchdog reset flag\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.wdgrstf = Field(\"wdgrstf\"\
    , \"Independent watchdog reset\n                          flag\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.sftrstf = Field(\"sftrstf\", \"Software\
    \ reset flag\", self._address, 28, 0x0001, 1, proxy)\n            self.porrstf\
    \ = Field(\"porrstf\", \"POR/PDR reset flag\", self._address, 27, 0x0001, 1, proxy)\n\
    \            self.padrstf = Field(\"padrstf\", \"PIN reset flag\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.borrstf = Field(\"borrstf\", \"BOR reset\
    \ flag\", self._address, 25, 0x0001, 1, proxy)\n            self.rmvf = Field(\"\
    rmvf\", \"Remove reset flag\", self._address, 24, 0x0001, 1, proxy)\n        \
    \    self.lsirdy = Field(\"lsirdy\", \"Internal low-speed oscillator\n       \
    \                   ready\", self._address, 1, 0x0001, 1, proxy)\n           \
    \ self.lsion = Field(\"lsion\", \"Internal low-speed oscillator\n            \
    \              enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ SscgrRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"SSCGR\", \"spread spectrum clock generation\n    \
    \          register\", address + 0x0080, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.sscgen = Field(\"sscgen\", \"Spread spectrum modulation\n  \
    \                        enable\", self._address, 31, 0x0001, 1, proxy)\n    \
    \        self.spreadsel = Field(\"spreadsel\", \"Spread Select\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.incstep = Field(\"incstep\", \"Incrementation\
    \ step\", self._address, 13, 0x7FFF, 15, proxy)\n            self.modper = Field(\"\
    modper\", \"Modulation period\", self._address, 0, 0x1FFF, 13, proxy)\n    \n\
    \    class Plli2scfgrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"PLLI2SCFGR\", \"PLLI2S configuration\
    \ register\", address + 0x0084, 32, \"read-write\", 0x20003000, proxy)\n     \
    \       self.plli2sm = Field(\"plli2sm\", \"Division factor for audio PLL (PLLI2S)\n\
    \                          input clock\", self._address, 0, 0x003F, 6, proxy)\n\
    \            self.plli2sn = Field(\"plli2sn\", \"PLLI2S multiplication factor\
    \ for\n                          VCO\", self._address, 6, 0x01FF, 9, proxy)\n\
    \            self.plli2sp = Field(\"plli2sp\", \"PLLI2S division factor for SPDIF-IN\n\
    \                          clock\", self._address, 16, 0x0003, 2, proxy)\n   \
    \         self.plli2sq = Field(\"plli2sq\", \"PLLI2S division factor for SAI1\n\
    \                          clock\", self._address, 24, 0x000F, 4, proxy)\n   \
    \         self.plli2sr = Field(\"plli2sr\", \"PLLI2S division factor for I2S\n\
    \                          clocks\", self._address, 28, 0x0007, 3, proxy)\n  \
    \  \n    class PllsaicfgrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"PLLSAICFGR\", \"PLL configuration register\"\
    , address + 0x0088, 32, \"read-write\", 0x24003000, proxy)\n            self.pllsaim\
    \ = Field(\"pllsaim\", \"Division factor for audio PLLSAI input\n            \
    \              clock\", self._address, 0, 0x003F, 6, proxy)\n            self.pllsain\
    \ = Field(\"pllsain\", \"PLLSAI division factor for\n                        \
    \  VCO\", self._address, 6, 0x01FF, 9, proxy)\n            self.pllsaip = Field(\"\
    pllsaip\", \"PLLSAI division factor for 48 MHz\n                          clock\"\
    , self._address, 16, 0x0003, 2, proxy)\n            self.pllsaiq = Field(\"pllsaiq\"\
    , \"PLLSAI division factor for SAIs\n                          clock\", self._address,\
    \ 24, 0x000F, 4, proxy)\n    \n    class DckcfgrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"DCKCFGR\", \"\
    Dedicated Clock Configuration\n              Register\", address + 0x008C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.plli2sdivq = Field(\"plli2sdivq\"\
    , \"PLLI2S division factor for SAIs\n                          clock\", self._address,\
    \ 0, 0x001F, 5, proxy)\n            self.pllsaidivq = Field(\"pllsaidivq\", \"\
    PLLSAI division factor for SAIs\n                          clock\", self._address,\
    \ 8, 0x001F, 5, proxy)\n            self.sai1src = Field(\"sai1src\", \"SAI1 clock\
    \ source\n                          selection\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.sai2src = Field(\"sai2src\", \"SAI2 clock source\n\
    \                          selection\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.timpre = Field(\"timpre\", \"Timers clocks prescalers\n    \
    \                      selection\", self._address, 24, 0x0001, 1, proxy)\n   \
    \         self.i2s1src = Field(\"i2s1src\", \"I2S APB1 clock source\n        \
    \                  selection\", self._address, 25, 0x0003, 2, proxy)\n       \
    \     self.i2s2src = Field(\"i2s2src\", \"I2S APB2 clock source\n            \
    \              selection\", self._address, 27, 0x0003, 2, proxy)\n    \n    class\
    \ CkgatenrRegister(Register):\n        def __init__(self, address, proxy):\n \
    \           super().__init__(\"CKGATENR\", \"clocks gated enable register\", address\
    \ + 0x0090, 32, \"read-write\", 0x0000, proxy)\n            self.ahb2apb1_cken\
    \ = Field(\"ahb2apb1_cken\", \"AHB to APB1 Bridge clock\n                    \
    \      enable\", self._address, 0, 0x0001, 1, proxy)\n            self.ahb2apb2_cken\
    \ = Field(\"ahb2apb2_cken\", \"AHB to APB2 Bridge clock\n                    \
    \      enable\", self._address, 1, 0x0001, 1, proxy)\n            self.cm4dbg_cken\
    \ = Field(\"cm4dbg_cken\", \"Cortex M4 ETM clock enable\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.spare_cken = Field(\"spare_cken\", \"Spare clock\
    \ enable\", self._address, 3, 0x0001, 1, proxy)\n            self.sram_cken =\
    \ Field(\"sram_cken\", \"SRQAM controller clock\n                          enable\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.flitf_cken = Field(\"\
    flitf_cken\", \"Flash Interface clock\n                          enable\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.rcc_cken = Field(\"rcc_cken\", \"RCC\
    \ clock enable\", self._address, 6, 0x0001, 1, proxy)\n    \n    class Dckcfgr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DCKCFGR2\", \"dedicated clocks configuration register\n              2\", address\
    \ + 0x0094, 32, \"read-write\", 0x0000, proxy)\n            self.fmpi2c1sel =\
    \ Field(\"fmpi2c1sel\", \"I2C4 kernel clock source\n                         \
    \ selection\", self._address, 22, 0x0003, 2, proxy)\n            self.cecsel =\
    \ Field(\"cecsel\", \"HDMI CEC clock source\n                          selection\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.ck48msel = Field(\"ck48msel\"\
    , \"SDIO/USBFS/HS clock\n                          selection\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.sdiosel = Field(\"sdiosel\", \"SDIO\
    \ clock selection\", self._address, 28, 0x0001, 1, proxy)\n            self.spdifsel\
    \ = Field(\"spdifsel\", \"SPDIF clock selection\", self._address, 29, 0x0001,\
    \ 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    rcc\", \"Reset and clock control\", 0x40023800)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.pllcfgr = self.PllcfgrRegister(self.address, proxy)\n \
    \       self.cfgr = self.CfgrRegister(self.address, proxy)\n        self.cir =\
    \ self.CirRegister(self.address, proxy)\n        self.ahb1rstr = self.Ahb1rstrRegister(self.address,\
    \ proxy)\n        self.ahb2rstr = self.Ahb2rstrRegister(self.address, proxy)\n\
    \        self.ahb3rstr = self.Ahb3rstrRegister(self.address, proxy)\n        self.apb1rstr\
    \ = self.Apb1rstrRegister(self.address, proxy)\n        self.apb2rstr = self.Apb2rstrRegister(self.address,\
    \ proxy)\n        self.ahb1enr = self.Ahb1enrRegister(self.address, proxy)\n \
    \       self.ahb2enr = self.Ahb2enrRegister(self.address, proxy)\n        self.ahb3enr\
    \ = self.Ahb3enrRegister(self.address, proxy)\n        self.apb1enr = self.Apb1enrRegister(self.address,\
    \ proxy)\n        self.apb2enr = self.Apb2enrRegister(self.address, proxy)\n \
    \       self.ahb1lpenr = self.Ahb1lpenrRegister(self.address, proxy)\n       \
    \ self.ahb2lpenr = self.Ahb2lpenrRegister(self.address, proxy)\n        self.ahb3lpenr\
    \ = self.Ahb3lpenrRegister(self.address, proxy)\n        self.apb1lpenr = self.Apb1lpenrRegister(self.address,\
    \ proxy)\n        self.apb2lpenr = self.Apb2lpenrRegister(self.address, proxy)\n\
    \        self.bdcr = self.BdcrRegister(self.address, proxy)\n        self.csr\
    \ = self.CsrRegister(self.address, proxy)\n        self.sscgr = self.SscgrRegister(self.address,\
    \ proxy)\n        self.plli2scfgr = self.Plli2scfgrRegister(self.address, proxy)\n\
    \        self.pllsaicfgr = self.PllsaicfgrRegister(self.address, proxy)\n    \
    \    self.dckcfgr = self.DckcfgrRegister(self.address, proxy)\n        self.ckgatenr\
    \ = self.CkgatenrRegister(self.address, proxy)\n        self.dckcfgr2 = self.Dckcfgr2Register(self.address,\
    \ proxy)\n"
  name: RCC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpioh(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpioh\", \"General-purpose I/Os\", 0x40021C00)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOH
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpiog(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpiog\", \"General-purpose I/Os\", 0x40021800)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOG
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpiof(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpiof\", \"General-purpose I/Os\", 0x40021400)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOF
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpioe(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpioe\", \"General-purpose I/Os\", 0x40021000)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOE
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpiod(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpiod\", \"General-purpose I/Os\", 0x40020C00)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOD
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpioc(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpioc\", \"General-purpose I/Os\", 0x40020800)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpiob(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0280, proxy)\n            self.moder15 = Field(\"\
    moder15\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 30, 0x0003, 2, proxy)\n            self.moder14 = Field(\"moder14\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.moder13 = Field(\"moder13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.moder12 = Field(\"moder12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.moder11 = Field(\"moder11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.moder10 = Field(\"moder10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.moder9 = Field(\"moder9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.moder8 = Field(\"moder8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.moder7 = Field(\"moder7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.moder6 = Field(\"moder6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.moder5 = Field(\"moder5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.moder4 = Field(\"moder4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.moder3 = Field(\"moder3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.moder2 = Field(\"moder2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.moder1 = Field(\"moder1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.moder0 = Field(\"moder0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class OtyperRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTYPER\", \"GPIO port output type register\",\
    \ address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.ot15\
    \ = Field(\"ot15\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.ot14 = Field(\"\
    ot14\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 14, 0x0001, 1, proxy)\n            self.ot13 = Field(\"ot13\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"ot12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ot11 = Field(\"ot11\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.ot10 = Field(\"ot10\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.ot9 = Field(\"ot9\", \"Port x configuration bits (y =\n        \
    \                  0..15)\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n               \
    \           0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.ot7\
    \ = Field(\"ot7\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6 = Field(\"\
    ot6\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"ot5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.ot1\
    \ = Field(\"ot1\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0 = Field(\"\
    ot0\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OSPEEDR\", \"\
    GPIO port output speed\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x00C0, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 30, 0x0003, 2,\
    \ proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 28, 0x0003, 2,\
    \ proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 26, 0x0003, 2,\
    \ proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 22, 0x0003, 2,\
    \ proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 18, 0x0003, 2,\
    \ proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 16, 0x0003, 2,\
    \ proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 12, 0x0003, 2,\
    \ proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0003, 2,\
    \ proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 8, 0x0003, 2,\
    \ proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0003, 2,\
    \ proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 2, 0x0003, 2,\
    \ proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class PupdrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PUPDR\", \"GPIO port pull-up/pull-down\n\
    \              register\", address + 0x000C, 32, \"read-write\", 0x0100, proxy)\n\
    \            self.pupdr15 = Field(\"pupdr15\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 30, 0x0003, 2, proxy)\n\
    \            self.pupdr14 = Field(\"pupdr14\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 28, 0x0003, 2, proxy)\n\
    \            self.pupdr13 = Field(\"pupdr13\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 26, 0x0003, 2, proxy)\n\
    \            self.pupdr12 = Field(\"pupdr12\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 24, 0x0003, 2, proxy)\n\
    \            self.pupdr11 = Field(\"pupdr11\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 22, 0x0003, 2, proxy)\n\
    \            self.pupdr10 = Field(\"pupdr10\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.pupdr9 = Field(\"pupdr9\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 18, 0x0003, 2, proxy)\n  \
    \          self.pupdr8 = Field(\"pupdr8\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 16, 0x0003, 2, proxy)\n  \
    \          self.pupdr7 = Field(\"pupdr7\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 14, 0x0003, 2, proxy)\n  \
    \          self.pupdr6 = Field(\"pupdr6\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 12, 0x0003, 2, proxy)\n  \
    \          self.pupdr5 = Field(\"pupdr5\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 10, 0x0003, 2, proxy)\n  \
    \          self.pupdr4 = Field(\"pupdr4\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 8, 0x0003, 2, proxy)\n   \
    \         self.pupdr3 = Field(\"pupdr3\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 6, 0x0003, 2, proxy)\n    \
    \        self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits (y =\n  \
    \                        0..15)\", self._address, 4, 0x0003, 2, proxy)\n     \
    \       self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n   \
    \                       0..15)\", self._address, 2, 0x0003, 2, proxy)\n      \
    \      self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n \
    \   class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpiob\", \"General-purpose I/Os\", 0x40020400)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOB
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Gpioa(Peripheral):\n\
    \    class ModerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MODER\", \"GPIO port mode register\", address\
    \ + 0x0000, 32, \"read-write\", 0xA8000000, proxy)\n            self.moder15 =\
    \ Field(\"moder15\", \"Port x configuration bits (y =\n                      \
    \    0..15)\", self._address, 30, 0x0003, 2, proxy)\n            self.moder14\
    \ = Field(\"moder14\", \"Port x configuration bits (y =\n                    \
    \      0..15)\", self._address, 28, 0x0003, 2, proxy)\n            self.moder13\
    \ = Field(\"moder13\", \"Port x configuration bits (y =\n                    \
    \      0..15)\", self._address, 26, 0x0003, 2, proxy)\n            self.moder12\
    \ = Field(\"moder12\", \"Port x configuration bits (y =\n                    \
    \      0..15)\", self._address, 24, 0x0003, 2, proxy)\n            self.moder11\
    \ = Field(\"moder11\", \"Port x configuration bits (y =\n                    \
    \      0..15)\", self._address, 22, 0x0003, 2, proxy)\n            self.moder10\
    \ = Field(\"moder10\", \"Port x configuration bits (y =\n                    \
    \      0..15)\", self._address, 20, 0x0003, 2, proxy)\n            self.moder9\
    \ = Field(\"moder9\", \"Port x configuration bits (y =\n                     \
    \     0..15)\", self._address, 18, 0x0003, 2, proxy)\n            self.moder8\
    \ = Field(\"moder8\", \"Port x configuration bits (y =\n                     \
    \     0..15)\", self._address, 16, 0x0003, 2, proxy)\n            self.moder7\
    \ = Field(\"moder7\", \"Port x configuration bits (y =\n                     \
    \     0..15)\", self._address, 14, 0x0003, 2, proxy)\n            self.moder6\
    \ = Field(\"moder6\", \"Port x configuration bits (y =\n                     \
    \     0..15)\", self._address, 12, 0x0003, 2, proxy)\n            self.moder5\
    \ = Field(\"moder5\", \"Port x configuration bits (y =\n                     \
    \     0..15)\", self._address, 10, 0x0003, 2, proxy)\n            self.moder4\
    \ = Field(\"moder4\", \"Port x configuration bits (y =\n                     \
    \     0..15)\", self._address, 8, 0x0003, 2, proxy)\n            self.moder3 =\
    \ Field(\"moder3\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 6, 0x0003, 2, proxy)\n            self.moder2 = Field(\"\
    moder2\", \"Port x configuration bits (y =\n                          0..15)\"\
    , self._address, 4, 0x0003, 2, proxy)\n            self.moder1 = Field(\"moder1\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.moder0 = Field(\"moder0\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class OtyperRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTYPER\", \"GPIO port output\
    \ type register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n    \
    \        self.ot15 = Field(\"ot15\", \"Port x configuration bits (y =\n      \
    \                    0..15)\", self._address, 15, 0x0001, 1, proxy)\n        \
    \    self.ot14 = Field(\"ot14\", \"Port x configuration bits (y =\n          \
    \                0..15)\", self._address, 14, 0x0001, 1, proxy)\n            self.ot13\
    \ = Field(\"ot13\", \"Port x configuration bits (y =\n                       \
    \   0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.ot12 = Field(\"\
    ot12\", \"Port x configuration bits (y =\n                          0..15)\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.ot11 = Field(\"ot11\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.ot10 = Field(\"ot10\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.ot9 = Field(\"ot9\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ot8 = Field(\"ot8\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 8, 0x0001, 1, proxy)\n       \
    \     self.ot7 = Field(\"ot7\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.ot6\
    \ = Field(\"ot6\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 6, 0x0001, 1, proxy)\n            self.ot5 = Field(\"\
    ot5\", \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.ot4 = Field(\"ot4\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.ot3 = Field(\"ot3\", \"Port x configuration bits (y\
    \ =\n                          0..15)\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.ot2 = Field(\"ot2\", \"Port x configuration bits (y =\n    \
    \                      0..15)\", self._address, 2, 0x0001, 1, proxy)\n       \
    \     self.ot1 = Field(\"ot1\", \"Port x configuration bits (y =\n           \
    \               0..15)\", self._address, 1, 0x0001, 1, proxy)\n            self.ot0\
    \ = Field(\"ot0\", \"Port x configuration bits (y =\n                        \
    \  0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class OspeedrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OSPEEDR\", \"GPIO port output speed\n              register\", address + 0x0008,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ospeedr15 = Field(\"ospeedr15\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 30, 0x0003, 2, proxy)\n            self.ospeedr14 = Field(\"ospeedr14\", \"\
    Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.ospeedr13 = Field(\"ospeedr13\", \"\
    Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.ospeedr12 = Field(\"ospeedr12\", \"\
    Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.ospeedr11 = Field(\"ospeedr11\", \"\
    Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.ospeedr10 = Field(\"ospeedr10\", \"\
    Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.ospeedr9 = Field(\"ospeedr9\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.ospeedr8 = Field(\"ospeedr8\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.ospeedr7 = Field(\"ospeedr7\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.ospeedr6 = Field(\"ospeedr6\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.ospeedr5 = Field(\"ospeedr5\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.ospeedr4 = Field(\"ospeedr4\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.ospeedr3 = Field(\"ospeedr3\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 6, 0x0003, 2, proxy)\n            self.ospeedr2 = Field(\"ospeedr2\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.ospeedr1 = Field(\"ospeedr1\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.ospeedr0 = Field(\"ospeedr0\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class PupdrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"PUPDR\", \"\
    GPIO port pull-up/pull-down\n              register\", address + 0x000C, 32, \"\
    read-write\", 0x64000000, proxy)\n            self.pupdr15 = Field(\"pupdr15\"\
    , \"Port x configuration bits (y =\n                          0..15)\", self._address,\
    \ 30, 0x0003, 2, proxy)\n            self.pupdr14 = Field(\"pupdr14\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 28, 0x0003, 2, proxy)\n            self.pupdr13 = Field(\"pupdr13\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 26, 0x0003, 2, proxy)\n            self.pupdr12 = Field(\"pupdr12\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 24, 0x0003, 2, proxy)\n            self.pupdr11 = Field(\"pupdr11\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.pupdr10 = Field(\"pupdr10\", \"Port\
    \ x configuration bits (y =\n                          0..15)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.pupdr9 = Field(\"pupdr9\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.pupdr8 = Field(\"pupdr8\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.pupdr7 = Field(\"pupdr7\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.pupdr6 = Field(\"pupdr6\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.pupdr5 = Field(\"pupdr5\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.pupdr4 = Field(\"pupdr4\", \"Port x\
    \ configuration bits (y =\n                          0..15)\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.pupdr3 = Field(\"pupdr3\", \"Port x configuration\
    \ bits (y =\n                          0..15)\", self._address, 6, 0x0003, 2,\
    \ proxy)\n            self.pupdr2 = Field(\"pupdr2\", \"Port x configuration bits\
    \ (y =\n                          0..15)\", self._address, 4, 0x0003, 2, proxy)\n\
    \            self.pupdr1 = Field(\"pupdr1\", \"Port x configuration bits (y =\n\
    \                          0..15)\", self._address, 2, 0x0003, 2, proxy)\n   \
    \         self.pupdr0 = Field(\"pupdr0\", \"Port x configuration bits (y =\n \
    \                         0..15)\", self._address, 0, 0x0003, 2, proxy)\n    \n\
    \    class IdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IDR\", \"GPIO port input data register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.idr15 = Field(\"\
    idr15\", \"Port input data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.idr14 = Field(\"idr14\", \"Port input\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.idr13 = Field(\"idr13\", \"Port input data (y =\n \
    \                         0..15)\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.idr12 = Field(\"idr12\", \"Port input data (y =\n             \
    \             0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.idr11\
    \ = Field(\"idr11\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.idr10 = Field(\"idr10\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.idr9 = Field(\"idr9\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.idr8 = Field(\"idr8\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.idr7\
    \ = Field(\"idr7\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.idr6 = Field(\"idr6\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.idr5 = Field(\"idr5\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idr4 = Field(\"idr4\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 4, 0x0001, 1, proxy)\n            self.idr3\
    \ = Field(\"idr3\", \"Port input data (y =\n                          0..15)\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.idr2 = Field(\"idr2\"\
    , \"Port input data (y =\n                          0..15)\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.idr1 = Field(\"idr1\", \"Port input data\
    \ (y =\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.idr0 = Field(\"idr0\", \"Port input data (y =\n            \
    \              0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ OdrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ODR\", \"GPIO port output data register\", address +\
    \ 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.odr15 = Field(\"\
    odr15\", \"Port output data (y =\n                          0..15)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.odr14 = Field(\"odr14\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 14, 0x0001, 1,\
    \ proxy)\n            self.odr13 = Field(\"odr13\", \"Port output data (y =\n\
    \                          0..15)\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.odr12 = Field(\"odr12\", \"Port output data (y =\n           \
    \               0..15)\", self._address, 12, 0x0001, 1, proxy)\n            self.odr11\
    \ = Field(\"odr11\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.odr10 = Field(\"odr10\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.odr9 = Field(\"odr9\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.odr8 = Field(\"odr8\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.odr7 = Field(\"odr7\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.odr6\
    \ = Field(\"odr6\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.odr5 = Field(\"odr5\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.odr4 = Field(\"odr4\", \"Port output\
    \ data (y =\n                          0..15)\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.odr3 = Field(\"odr3\", \"Port output data (y =\n  \
    \                        0..15)\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.odr2 = Field(\"odr2\", \"Port output data (y =\n                \
    \          0..15)\", self._address, 2, 0x0001, 1, proxy)\n            self.odr1\
    \ = Field(\"odr1\", \"Port output data (y =\n                          0..15)\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.odr0 = Field(\"odr0\"\
    , \"Port output data (y =\n                          0..15)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSRR\", \"GPIO port bit set/reset\n\
    \              register\", address + 0x0018, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.br15 = Field(\"br15\", \"Port x reset bit y (y =\n         \
    \                 0..15)\", self._address, 31, 0x0001, 1, proxy)\n           \
    \ self.br14 = Field(\"br14\", \"Port x reset bit y (y =\n                    \
    \      0..15)\", self._address, 30, 0x0001, 1, proxy)\n            self.br13 =\
    \ Field(\"br13\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.br12 = Field(\"br12\"\
    , \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.br11 = Field(\"br11\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.br10 = Field(\"br10\", \"Port x reset bit y (y =\n\
    \                          0..15)\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.br9 = Field(\"br9\", \"Port x reset bit y (y =\n             \
    \             0..15)\", self._address, 25, 0x0001, 1, proxy)\n            self.br8\
    \ = Field(\"br8\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.br7 = Field(\"br7\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.br6 = Field(\"br6\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.br5 = Field(\"br5\", \"Port x reset bit y (y =\n  \
    \                        0..15)\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.br4 = Field(\"br4\", \"Port x reset bit y (y =\n               \
    \           0..15)\", self._address, 20, 0x0001, 1, proxy)\n            self.br3\
    \ = Field(\"br3\", \"Port x reset bit y (y =\n                          0..15)\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.br2 = Field(\"br2\",\
    \ \"Port x reset bit y (y =\n                          0..15)\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.br1 = Field(\"br1\", \"Port x reset\
    \ bit y (y =\n                          0..15)\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.br0 = Field(\"br0\", \"Port x set bit y (y=\n     \
    \                     0..15)\", self._address, 16, 0x0001, 1, proxy)\n       \
    \     self.bs15 = Field(\"bs15\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 15, 0x0001, 1, proxy)\n            self.bs14\
    \ = Field(\"bs14\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.bs13 = Field(\"bs13\"\
    , \"Port x set bit y (y=\n                          0..15)\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.bs12 = Field(\"bs12\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.bs11 = Field(\"bs11\", \"Port x set bit y (y=\n            \
    \              0..15)\", self._address, 11, 0x0001, 1, proxy)\n            self.bs10\
    \ = Field(\"bs10\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.bs9 = Field(\"bs9\",\
    \ \"Port x set bit y (y=\n                          0..15)\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.bs8 = Field(\"bs8\", \"Port x set bit y\
    \ (y=\n                          0..15)\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.bs7 = Field(\"bs7\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 7, 0x0001, 1, proxy)\n            self.bs6\
    \ = Field(\"bs6\", \"Port x set bit y (y=\n                          0..15)\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.bs5 = Field(\"bs5\", \"\
    Port x set bit y (y=\n                          0..15)\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.bs4 = Field(\"bs4\", \"Port x set bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.bs3 = Field(\"bs3\", \"Port x set bit y (y=\n                   \
    \       0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.bs2 =\
    \ Field(\"bs2\", \"Port x set bit y (y=\n                          0..15)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.bs1 = Field(\"bs1\", \"Port x set bit\
    \ y (y=\n                          0..15)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.bs0 = Field(\"bs0\", \"Port x set bit y (y=\n              \
    \            0..15)\", self._address, 0, 0x0001, 1, proxy)\n    \n    class LckrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LCKR\", \"GPIO port configuration lock\n              register\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.lckk = Field(\"lckk\",\
    \ \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.lck15 = Field(\"lck15\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.lck14 = Field(\"lck14\", \"Port x lock bit y (y=\n\
    \                          0..15)\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.lck13 = Field(\"lck13\", \"Port x lock bit y (y=\n           \
    \               0..15)\", self._address, 13, 0x0001, 1, proxy)\n            self.lck12\
    \ = Field(\"lck12\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.lck11 = Field(\"lck11\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.lck10 = Field(\"lck10\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.lck9 = Field(\"lck9\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.lck8 = Field(\"lck8\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 8, 0x0001, 1, proxy)\n            self.lck7\
    \ = Field(\"lck7\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.lck6 = Field(\"lck6\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lck5 = Field(\"lck5\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.lck4 = Field(\"lck4\", \"Port x lock bit y (y=\n  \
    \                        0..15)\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.lck3 = Field(\"lck3\", \"Port x lock bit y (y=\n                \
    \          0..15)\", self._address, 3, 0x0001, 1, proxy)\n            self.lck2\
    \ = Field(\"lck2\", \"Port x lock bit y (y=\n                          0..15)\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.lck1 = Field(\"lck1\"\
    , \"Port x lock bit y (y=\n                          0..15)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.lck0 = Field(\"lck0\", \"Port x lock\
    \ bit y (y=\n                          0..15)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class AfrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRL\", \"GPIO alternate function\
    \ low\n              register\", address + 0x0020, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrl7 = Field(\"afrl7\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 0..7)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrl6 = Field(\"afrl6\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 0..7)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrl5 = Field(\"afrl5\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 0..7)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrl4 = Field(\"afrl4\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 0..7)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrl3 = Field(\"\
    afrl3\", \"Alternate function selection for port x\n                         \
    \ bit y (y = 0..7)\", self._address, 12, 0x000F, 4, proxy)\n            self.afrl2\
    \ = Field(\"afrl2\", \"Alternate function selection for port x\n             \
    \             bit y (y = 0..7)\", self._address, 8, 0x000F, 4, proxy)\n      \
    \      self.afrl1 = Field(\"afrl1\", \"Alternate function selection for port x\n\
    \                          bit y (y = 0..7)\", self._address, 4, 0x000F, 4, proxy)\n\
    \            self.afrl0 = Field(\"afrl0\", \"Alternate function selection for\
    \ port x\n                          bit y (y = 0..7)\", self._address, 0, 0x000F,\
    \ 4, proxy)\n    \n    class AfrhRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AFRH\", \"GPIO alternate function\
    \ high\n              register\", address + 0x0024, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.afrh15 = Field(\"afrh15\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 28,\
    \ 0x000F, 4, proxy)\n            self.afrh14 = Field(\"afrh14\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.afrh13 = Field(\"afrh13\", \"Alternate\
    \ function selection for port x\n                          bit y (y = 8..15)\"\
    , self._address, 20, 0x000F, 4, proxy)\n            self.afrh12 = Field(\"afrh12\"\
    , \"Alternate function selection for port x\n                          bit y (y\
    \ = 8..15)\", self._address, 16, 0x000F, 4, proxy)\n            self.afrh11 =\
    \ Field(\"afrh11\", \"Alternate function selection for port x\n              \
    \            bit y (y = 8..15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.afrh10 = Field(\"afrh10\", \"Alternate function selection for port\
    \ x\n                          bit y (y = 8..15)\", self._address, 8, 0x000F,\
    \ 4, proxy)\n            self.afrh9 = Field(\"afrh9\", \"Alternate function selection\
    \ for port x\n                          bit y (y = 8..15)\", self._address, 4,\
    \ 0x000F, 4, proxy)\n            self.afrh8 = Field(\"afrh8\", \"Alternate function\
    \ selection for port x\n                          bit y (y = 8..15)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    gpioa\", \"General-purpose I/Os\", 0x40020000)\n        self.moder = self.ModerRegister(self.address,\
    \ proxy)\n        self.otyper = self.OtyperRegister(self.address, proxy)\n   \
    \     self.ospeedr = self.OspeedrRegister(self.address, proxy)\n        self.pupdr\
    \ = self.PupdrRegister(self.address, proxy)\n        self.idr = self.IdrRegister(self.address,\
    \ proxy)\n        self.odr = self.OdrRegister(self.address, proxy)\n        self.bsrr\
    \ = self.BsrrRegister(self.address, proxy)\n        self.lckr = self.LckrRegister(self.address,\
    \ proxy)\n        self.afrl = self.AfrlRegister(self.address, proxy)\n       \
    \ self.afrh = self.AfrhRegister(self.address, proxy)\n"
  name: GPIOA
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Syscfg(Peripheral):\n\
    \    class MemrmRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MEMRM\", \"memory remap register\", address +\
    \ 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.mem_mode = Field(\"\
    mem_mode\", \"Memory mapping selection\", self._address, 0, 0x0007, 3, proxy)\n\
    \            self.fb_mode = Field(\"fb_mode\", \"Flash bank mode selection\",\
    \ self._address, 8, 0x0001, 1, proxy)\n            self.swp_fmc = Field(\"swp_fmc\"\
    , \"FMC memory mapping swap\", self._address, 10, 0x0003, 2, proxy)\n    \n  \
    \  class PmcRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"PMC\", \"peripheral mode configuration\n     \
    \         register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mii_rmii_sel = Field(\"mii_rmii_sel\", \"Ethernet PHY interface\n\
    \                          selection\", self._address, 23, 0x0001, 1, proxy)\n\
    \            self.adc1dc2 = Field(\"adc1dc2\", \"ADC1DC2\", self._address, 16,\
    \ 0x0001, 1, proxy)\n            self.adc2dc2 = Field(\"adc2dc2\", \"ADC2DC2\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.adc3dc2 = Field(\"adc3dc2\"\
    , \"ADC3DC2\", self._address, 18, 0x0001, 1, proxy)\n    \n    class Exticr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    EXTICR1\", \"external interrupt configuration register\n              1\", address\
    \ + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.exti3 = Field(\"\
    exti3\", \"EXTI x configuration (x = 0 to\n                          3)\", self._address,\
    \ 12, 0x000F, 4, proxy)\n            self.exti2 = Field(\"exti2\", \"EXTI x configuration\
    \ (x = 0 to\n                          3)\", self._address, 8, 0x000F, 4, proxy)\n\
    \            self.exti1 = Field(\"exti1\", \"EXTI x configuration (x = 0 to\n\
    \                          3)\", self._address, 4, 0x000F, 4, proxy)\n       \
    \     self.exti0 = Field(\"exti0\", \"EXTI x configuration (x = 0 to\n       \
    \                   3)\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Exticr2Register(Register):\n        def __init__(self, address, proxy):\n  \
    \          super().__init__(\"EXTICR2\", \"external interrupt configuration register\n\
    \              2\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.exti7 = Field(\"exti7\", \"EXTI x configuration (x = 4 to\n   \
    \                       7)\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.exti6 = Field(\"exti6\", \"EXTI x configuration (x = 4 to\n         \
    \                 7)\", self._address, 8, 0x000F, 4, proxy)\n            self.exti5\
    \ = Field(\"exti5\", \"EXTI x configuration (x = 4 to\n                      \
    \    7)\", self._address, 4, 0x000F, 4, proxy)\n            self.exti4 = Field(\"\
    exti4\", \"EXTI x configuration (x = 4 to\n                          7)\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    class Exticr3Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"EXTICR3\", \"\
    external interrupt configuration register\n              3\", address + 0x0010,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.exti11 = Field(\"exti11\"\
    , \"EXTI x configuration (x = 8 to\n                          11)\", self._address,\
    \ 12, 0x000F, 4, proxy)\n            self.exti10 = Field(\"exti10\", \"EXTI10\"\
    , self._address, 8, 0x000F, 4, proxy)\n            self.exti9 = Field(\"exti9\"\
    , \"EXTI x configuration (x = 8 to\n                          11)\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.exti8 = Field(\"exti8\", \"EXTI x configuration\
    \ (x = 8 to\n                          11)\", self._address, 0, 0x000F, 4, proxy)\n\
    \    \n    class Exticr4Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"EXTICR4\", \"external interrupt configuration\
    \ register\n              4\", address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.exti15 = Field(\"exti15\", \"EXTI x configuration (x = 12 to\n\
    \                          15)\", self._address, 12, 0x000F, 4, proxy)\n     \
    \       self.exti14 = Field(\"exti14\", \"EXTI x configuration (x = 12 to\n  \
    \                        15)\", self._address, 8, 0x000F, 4, proxy)\n        \
    \    self.exti13 = Field(\"exti13\", \"EXTI x configuration (x = 12 to\n     \
    \                     15)\", self._address, 4, 0x000F, 4, proxy)\n           \
    \ self.exti12 = Field(\"exti12\", \"EXTI x configuration (x = 12 to\n        \
    \                  15)\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ CmpcrRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"CMPCR\", \"Compensation cell control\n           \
    \   register\", address + 0x0020, 32, \"read-only\", 0x0000, proxy)\n        \
    \    self.ready = Field(\"ready\", \"READY\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.cmp_pd = Field(\"cmp_pd\", \"Compensation cell\n           \
    \               power-down\", self._address, 0, 0x0001, 1, proxy)\n    \n    def\
    \ __init__(self, proxy):\n        super().__init__(\"syscfg\", \"System configuration\
    \ controller\", 0x40013800)\n        self.memrm = self.MemrmRegister(self.address,\
    \ proxy)\n        self.pmc = self.PmcRegister(self.address, proxy)\n        self.exticr1\
    \ = self.Exticr1Register(self.address, proxy)\n        self.exticr2 = self.Exticr2Register(self.address,\
    \ proxy)\n        self.exticr3 = self.Exticr3Register(self.address, proxy)\n \
    \       self.exticr4 = self.Exticr4Register(self.address, proxy)\n        self.cmpcr\
    \ = self.CmpcrRegister(self.address, proxy)\n"
  name: SYSCFG
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Spi1(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bidimode = Field(\"bidimode\"\
    , \"Bidirectional data mode\n                          enable\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.bidioe = Field(\"bidioe\", \"Output\
    \ enable in bidirectional\n                          mode\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.crcen = Field(\"crcen\", \"Hardware CRC\
    \ calculation\n                          enable\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.crcnext = Field(\"crcnext\", \"CRC transfer next\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.dff = Field(\"dff\",\
    \ \"Data frame format\", self._address, 11, 0x0001, 1, proxy)\n            self.rxonly\
    \ = Field(\"rxonly\", \"Receive only\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ssm = Field(\"ssm\", \"Software slave management\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.ssi = Field(\"ssi\", \"Internal slave\
    \ select\", self._address, 8, 0x0001, 1, proxy)\n            self.lsbfirst = Field(\"\
    lsbfirst\", \"Frame format\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.spe = Field(\"spe\", \"SPI enable\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.br = Field(\"br\", \"Baud rate control\", self._address, 3,\
    \ 0x0007, 3, proxy)\n            self.mstr = Field(\"mstr\", \"Master selection\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\"\
    , \"Clock polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cpha\
    \ = Field(\"cpha\", \"Clock phase\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"Tx buffer empty interrupt\n                          enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxneie = Field(\"rxneie\", \"RX buffer\
    \ not empty interrupt\n                          enable\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.errie = Field(\"errie\", \"Error interrupt enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.frf = Field(\"frf\", \"\
    Frame format\", self._address, 4, 0x0001, 1, proxy)\n            self.ssoe = Field(\"\
    ssoe\", \"SS output enable\", self._address, 2, 0x0001, 1, proxy)\n          \
    \  self.txdmaen = Field(\"txdmaen\", \"Tx buffer DMA enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rxdmaen = Field(\"rxdmaen\", \"Rx buffer\
    \ DMA enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"status register\", address + 0x0008, 32, \"\", 0x0002, proxy)\n      \
    \      self.tifrfe = Field(\"tifrfe\", \"TI frame format error\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.bsy = Field(\"bsy\", \"Busy flag\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun flag\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.modf = Field(\"modf\"\
    , \"Mode fault\", self._address, 5, 0x0001, 1, proxy)\n            self.crcerr\
    \ = Field(\"crcerr\", \"CRC error flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.udr = Field(\"udr\", \"Underrun flag\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.chside = Field(\"chside\", \"Channel side\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"Transmit buffer\
    \ empty\", self._address, 1, 0x0001, 1, proxy)\n            self.rxne = Field(\"\
    rxne\", \"Receive buffer not empty\", self._address, 0, 0x0001, 1, proxy)\n  \
    \  \n    class DrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DR\", \"data register\", address + 0x000C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dr = Field(\"dr\", \"Data register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class CrcprRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CRCPR\", \"CRC polynomial register\", address + 0x0010, 32, \"read-write\", 0x0007,\
    \ proxy)\n            self.crcpoly = Field(\"crcpoly\", \"CRC polynomial register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class RxcrcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RXCRCR\", \"RX CRC register\", address + 0x0014, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.rxcrc = Field(\"rxcrc\", \"Rx CRC register\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class TxcrcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TXCRCR\", \"\
    TX CRC register\", address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n     \
    \       self.txcrc = Field(\"txcrc\", \"Tx CRC register\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class I2scfgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"I2SCFGR\", \"I2S configuration\
    \ register\", address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.i2smod = Field(\"i2smod\", \"I2S mode selection\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.i2se = Field(\"i2se\", \"I2S Enable\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.i2scfg = Field(\"i2scfg\", \"I2S configuration\
    \ mode\", self._address, 8, 0x0003, 2, proxy)\n            self.pcmsync = Field(\"\
    pcmsync\", \"PCM frame synchronization\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.i2sstd = Field(\"i2sstd\", \"I2S standard selection\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.ckpol = Field(\"ckpol\", \"Steady state\
    \ clock\n                          polarity\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.datlen = Field(\"datlen\", \"Data length to be\n           \
    \               transferred\", self._address, 1, 0x0003, 2, proxy)\n         \
    \   self.chlen = Field(\"chlen\", \"Channel length (number of bits per audio\n\
    \                          channel)\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class I2sprRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"I2SPR\", \"I2S prescaler register\"\
    , address + 0x0020, 32, \"read-write\", 0x000A, proxy)\n            self.mckoe\
    \ = Field(\"mckoe\", \"Master clock output enable\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.odd = Field(\"odd\", \"Odd factor for the\n    \
    \                      prescaler\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.i2sdiv = Field(\"i2sdiv\", \"I2S Linear prescaler\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    spi1\", \"Serial peripheral interface\", 0x40013000)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.sr\
    \ = self.SrRegister(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n        self.crcpr = self.CrcprRegister(self.address, proxy)\n     \
    \   self.rxcrcr = self.RxcrcrRegister(self.address, proxy)\n        self.txcrcr\
    \ = self.TxcrcrRegister(self.address, proxy)\n        self.i2scfgr = self.I2scfgrRegister(self.address,\
    \ proxy)\n        self.i2spr = self.I2sprRegister(self.address, proxy)\n"
  name: SPI1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Spi2(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bidimode = Field(\"bidimode\"\
    , \"Bidirectional data mode\n                          enable\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.bidioe = Field(\"bidioe\", \"Output\
    \ enable in bidirectional\n                          mode\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.crcen = Field(\"crcen\", \"Hardware CRC\
    \ calculation\n                          enable\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.crcnext = Field(\"crcnext\", \"CRC transfer next\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.dff = Field(\"dff\",\
    \ \"Data frame format\", self._address, 11, 0x0001, 1, proxy)\n            self.rxonly\
    \ = Field(\"rxonly\", \"Receive only\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ssm = Field(\"ssm\", \"Software slave management\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.ssi = Field(\"ssi\", \"Internal slave\
    \ select\", self._address, 8, 0x0001, 1, proxy)\n            self.lsbfirst = Field(\"\
    lsbfirst\", \"Frame format\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.spe = Field(\"spe\", \"SPI enable\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.br = Field(\"br\", \"Baud rate control\", self._address, 3,\
    \ 0x0007, 3, proxy)\n            self.mstr = Field(\"mstr\", \"Master selection\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\"\
    , \"Clock polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cpha\
    \ = Field(\"cpha\", \"Clock phase\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"Tx buffer empty interrupt\n                          enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxneie = Field(\"rxneie\", \"RX buffer\
    \ not empty interrupt\n                          enable\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.errie = Field(\"errie\", \"Error interrupt enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.frf = Field(\"frf\", \"\
    Frame format\", self._address, 4, 0x0001, 1, proxy)\n            self.ssoe = Field(\"\
    ssoe\", \"SS output enable\", self._address, 2, 0x0001, 1, proxy)\n          \
    \  self.txdmaen = Field(\"txdmaen\", \"Tx buffer DMA enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rxdmaen = Field(\"rxdmaen\", \"Rx buffer\
    \ DMA enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"status register\", address + 0x0008, 32, \"\", 0x0002, proxy)\n      \
    \      self.tifrfe = Field(\"tifrfe\", \"TI frame format error\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.bsy = Field(\"bsy\", \"Busy flag\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun flag\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.modf = Field(\"modf\"\
    , \"Mode fault\", self._address, 5, 0x0001, 1, proxy)\n            self.crcerr\
    \ = Field(\"crcerr\", \"CRC error flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.udr = Field(\"udr\", \"Underrun flag\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.chside = Field(\"chside\", \"Channel side\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"Transmit buffer\
    \ empty\", self._address, 1, 0x0001, 1, proxy)\n            self.rxne = Field(\"\
    rxne\", \"Receive buffer not empty\", self._address, 0, 0x0001, 1, proxy)\n  \
    \  \n    class DrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DR\", \"data register\", address + 0x000C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dr = Field(\"dr\", \"Data register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class CrcprRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CRCPR\", \"CRC polynomial register\", address + 0x0010, 32, \"read-write\", 0x0007,\
    \ proxy)\n            self.crcpoly = Field(\"crcpoly\", \"CRC polynomial register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class RxcrcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RXCRCR\", \"RX CRC register\", address + 0x0014, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.rxcrc = Field(\"rxcrc\", \"Rx CRC register\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class TxcrcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TXCRCR\", \"\
    TX CRC register\", address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n     \
    \       self.txcrc = Field(\"txcrc\", \"Tx CRC register\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class I2scfgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"I2SCFGR\", \"I2S configuration\
    \ register\", address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.i2smod = Field(\"i2smod\", \"I2S mode selection\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.i2se = Field(\"i2se\", \"I2S Enable\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.i2scfg = Field(\"i2scfg\", \"I2S configuration\
    \ mode\", self._address, 8, 0x0003, 2, proxy)\n            self.pcmsync = Field(\"\
    pcmsync\", \"PCM frame synchronization\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.i2sstd = Field(\"i2sstd\", \"I2S standard selection\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.ckpol = Field(\"ckpol\", \"Steady state\
    \ clock\n                          polarity\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.datlen = Field(\"datlen\", \"Data length to be\n           \
    \               transferred\", self._address, 1, 0x0003, 2, proxy)\n         \
    \   self.chlen = Field(\"chlen\", \"Channel length (number of bits per audio\n\
    \                          channel)\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class I2sprRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"I2SPR\", \"I2S prescaler register\"\
    , address + 0x0020, 32, \"read-write\", 0x000A, proxy)\n            self.mckoe\
    \ = Field(\"mckoe\", \"Master clock output enable\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.odd = Field(\"odd\", \"Odd factor for the\n    \
    \                      prescaler\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.i2sdiv = Field(\"i2sdiv\", \"I2S Linear prescaler\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    spi2\", \"Serial peripheral interface\", 0x40003800)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.sr\
    \ = self.SrRegister(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n        self.crcpr = self.CrcprRegister(self.address, proxy)\n     \
    \   self.rxcrcr = self.RxcrcrRegister(self.address, proxy)\n        self.txcrcr\
    \ = self.TxcrcrRegister(self.address, proxy)\n        self.i2scfgr = self.I2scfgrRegister(self.address,\
    \ proxy)\n        self.i2spr = self.I2sprRegister(self.address, proxy)\n"
  name: SPI2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Spi3(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bidimode = Field(\"bidimode\"\
    , \"Bidirectional data mode\n                          enable\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.bidioe = Field(\"bidioe\", \"Output\
    \ enable in bidirectional\n                          mode\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.crcen = Field(\"crcen\", \"Hardware CRC\
    \ calculation\n                          enable\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.crcnext = Field(\"crcnext\", \"CRC transfer next\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.dff = Field(\"dff\",\
    \ \"Data frame format\", self._address, 11, 0x0001, 1, proxy)\n            self.rxonly\
    \ = Field(\"rxonly\", \"Receive only\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ssm = Field(\"ssm\", \"Software slave management\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.ssi = Field(\"ssi\", \"Internal slave\
    \ select\", self._address, 8, 0x0001, 1, proxy)\n            self.lsbfirst = Field(\"\
    lsbfirst\", \"Frame format\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.spe = Field(\"spe\", \"SPI enable\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.br = Field(\"br\", \"Baud rate control\", self._address, 3,\
    \ 0x0007, 3, proxy)\n            self.mstr = Field(\"mstr\", \"Master selection\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\"\
    , \"Clock polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cpha\
    \ = Field(\"cpha\", \"Clock phase\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"Tx buffer empty interrupt\n                          enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxneie = Field(\"rxneie\", \"RX buffer\
    \ not empty interrupt\n                          enable\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.errie = Field(\"errie\", \"Error interrupt enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.frf = Field(\"frf\", \"\
    Frame format\", self._address, 4, 0x0001, 1, proxy)\n            self.ssoe = Field(\"\
    ssoe\", \"SS output enable\", self._address, 2, 0x0001, 1, proxy)\n          \
    \  self.txdmaen = Field(\"txdmaen\", \"Tx buffer DMA enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rxdmaen = Field(\"rxdmaen\", \"Rx buffer\
    \ DMA enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"status register\", address + 0x0008, 32, \"\", 0x0002, proxy)\n      \
    \      self.tifrfe = Field(\"tifrfe\", \"TI frame format error\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.bsy = Field(\"bsy\", \"Busy flag\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun flag\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.modf = Field(\"modf\"\
    , \"Mode fault\", self._address, 5, 0x0001, 1, proxy)\n            self.crcerr\
    \ = Field(\"crcerr\", \"CRC error flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.udr = Field(\"udr\", \"Underrun flag\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.chside = Field(\"chside\", \"Channel side\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"Transmit buffer\
    \ empty\", self._address, 1, 0x0001, 1, proxy)\n            self.rxne = Field(\"\
    rxne\", \"Receive buffer not empty\", self._address, 0, 0x0001, 1, proxy)\n  \
    \  \n    class DrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DR\", \"data register\", address + 0x000C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dr = Field(\"dr\", \"Data register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class CrcprRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CRCPR\", \"CRC polynomial register\", address + 0x0010, 32, \"read-write\", 0x0007,\
    \ proxy)\n            self.crcpoly = Field(\"crcpoly\", \"CRC polynomial register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class RxcrcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RXCRCR\", \"RX CRC register\", address + 0x0014, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.rxcrc = Field(\"rxcrc\", \"Rx CRC register\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class TxcrcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TXCRCR\", \"\
    TX CRC register\", address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n     \
    \       self.txcrc = Field(\"txcrc\", \"Tx CRC register\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class I2scfgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"I2SCFGR\", \"I2S configuration\
    \ register\", address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.i2smod = Field(\"i2smod\", \"I2S mode selection\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.i2se = Field(\"i2se\", \"I2S Enable\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.i2scfg = Field(\"i2scfg\", \"I2S configuration\
    \ mode\", self._address, 8, 0x0003, 2, proxy)\n            self.pcmsync = Field(\"\
    pcmsync\", \"PCM frame synchronization\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.i2sstd = Field(\"i2sstd\", \"I2S standard selection\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.ckpol = Field(\"ckpol\", \"Steady state\
    \ clock\n                          polarity\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.datlen = Field(\"datlen\", \"Data length to be\n           \
    \               transferred\", self._address, 1, 0x0003, 2, proxy)\n         \
    \   self.chlen = Field(\"chlen\", \"Channel length (number of bits per audio\n\
    \                          channel)\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class I2sprRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"I2SPR\", \"I2S prescaler register\"\
    , address + 0x0020, 32, \"read-write\", 0x000A, proxy)\n            self.mckoe\
    \ = Field(\"mckoe\", \"Master clock output enable\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.odd = Field(\"odd\", \"Odd factor for the\n    \
    \                      prescaler\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.i2sdiv = Field(\"i2sdiv\", \"I2S Linear prescaler\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    spi3\", \"Serial peripheral interface\", 0x40003C00)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.sr\
    \ = self.SrRegister(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n        self.crcpr = self.CrcprRegister(self.address, proxy)\n     \
    \   self.rxcrcr = self.RxcrcrRegister(self.address, proxy)\n        self.txcrcr\
    \ = self.TxcrcrRegister(self.address, proxy)\n        self.i2scfgr = self.I2scfgrRegister(self.address,\
    \ proxy)\n        self.i2spr = self.I2sprRegister(self.address, proxy)\n"
  name: SPI3
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Spi4(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bidimode = Field(\"bidimode\"\
    , \"Bidirectional data mode\n                          enable\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.bidioe = Field(\"bidioe\", \"Output\
    \ enable in bidirectional\n                          mode\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.crcen = Field(\"crcen\", \"Hardware CRC\
    \ calculation\n                          enable\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.crcnext = Field(\"crcnext\", \"CRC transfer next\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.dff = Field(\"dff\",\
    \ \"Data frame format\", self._address, 11, 0x0001, 1, proxy)\n            self.rxonly\
    \ = Field(\"rxonly\", \"Receive only\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ssm = Field(\"ssm\", \"Software slave management\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.ssi = Field(\"ssi\", \"Internal slave\
    \ select\", self._address, 8, 0x0001, 1, proxy)\n            self.lsbfirst = Field(\"\
    lsbfirst\", \"Frame format\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.spe = Field(\"spe\", \"SPI enable\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.br = Field(\"br\", \"Baud rate control\", self._address, 3,\
    \ 0x0007, 3, proxy)\n            self.mstr = Field(\"mstr\", \"Master selection\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\"\
    , \"Clock polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cpha\
    \ = Field(\"cpha\", \"Clock phase\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"Tx buffer empty interrupt\n                          enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxneie = Field(\"rxneie\", \"RX buffer\
    \ not empty interrupt\n                          enable\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.errie = Field(\"errie\", \"Error interrupt enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.frf = Field(\"frf\", \"\
    Frame format\", self._address, 4, 0x0001, 1, proxy)\n            self.ssoe = Field(\"\
    ssoe\", \"SS output enable\", self._address, 2, 0x0001, 1, proxy)\n          \
    \  self.txdmaen = Field(\"txdmaen\", \"Tx buffer DMA enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rxdmaen = Field(\"rxdmaen\", \"Rx buffer\
    \ DMA enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"status register\", address + 0x0008, 32, \"\", 0x0002, proxy)\n      \
    \      self.tifrfe = Field(\"tifrfe\", \"TI frame format error\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.bsy = Field(\"bsy\", \"Busy flag\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun flag\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.modf = Field(\"modf\"\
    , \"Mode fault\", self._address, 5, 0x0001, 1, proxy)\n            self.crcerr\
    \ = Field(\"crcerr\", \"CRC error flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.udr = Field(\"udr\", \"Underrun flag\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.chside = Field(\"chside\", \"Channel side\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"Transmit buffer\
    \ empty\", self._address, 1, 0x0001, 1, proxy)\n            self.rxne = Field(\"\
    rxne\", \"Receive buffer not empty\", self._address, 0, 0x0001, 1, proxy)\n  \
    \  \n    class DrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DR\", \"data register\", address + 0x000C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dr = Field(\"dr\", \"Data register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class CrcprRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CRCPR\", \"CRC polynomial register\", address + 0x0010, 32, \"read-write\", 0x0007,\
    \ proxy)\n            self.crcpoly = Field(\"crcpoly\", \"CRC polynomial register\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class RxcrcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RXCRCR\", \"RX CRC register\", address + 0x0014, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.rxcrc = Field(\"rxcrc\", \"Rx CRC register\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class TxcrcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TXCRCR\", \"\
    TX CRC register\", address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n     \
    \       self.txcrc = Field(\"txcrc\", \"Tx CRC register\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class I2scfgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"I2SCFGR\", \"I2S configuration\
    \ register\", address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.i2smod = Field(\"i2smod\", \"I2S mode selection\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.i2se = Field(\"i2se\", \"I2S Enable\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.i2scfg = Field(\"i2scfg\", \"I2S configuration\
    \ mode\", self._address, 8, 0x0003, 2, proxy)\n            self.pcmsync = Field(\"\
    pcmsync\", \"PCM frame synchronization\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.i2sstd = Field(\"i2sstd\", \"I2S standard selection\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.ckpol = Field(\"ckpol\", \"Steady state\
    \ clock\n                          polarity\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.datlen = Field(\"datlen\", \"Data length to be\n           \
    \               transferred\", self._address, 1, 0x0003, 2, proxy)\n         \
    \   self.chlen = Field(\"chlen\", \"Channel length (number of bits per audio\n\
    \                          channel)\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class I2sprRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"I2SPR\", \"I2S prescaler register\"\
    , address + 0x0020, 32, \"read-write\", 0x000A, proxy)\n            self.mckoe\
    \ = Field(\"mckoe\", \"Master clock output enable\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.odd = Field(\"odd\", \"Odd factor for the\n    \
    \                      prescaler\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.i2sdiv = Field(\"i2sdiv\", \"I2S Linear prescaler\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    spi4\", \"Serial peripheral interface\", 0x40013400)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.sr\
    \ = self.SrRegister(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n        self.crcpr = self.CrcprRegister(self.address, proxy)\n     \
    \   self.rxcrcr = self.RxcrcrRegister(self.address, proxy)\n        self.txcrcr\
    \ = self.TxcrcrRegister(self.address, proxy)\n        self.i2scfgr = self.I2scfgrRegister(self.address,\
    \ proxy)\n        self.i2spr = self.I2sprRegister(self.address, proxy)\n"
  name: SPI4
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Adc1(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"status register\", address + 0x0000, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.strt = Field(\"strt\"\
    , \"Regular channel start flag\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.jstrt = Field(\"jstrt\", \"Injected channel start\n              \
    \            flag\", self._address, 3, 0x0001, 1, proxy)\n            self.jeoc\
    \ = Field(\"jeoc\", \"Injected channel end of\n                          conversion\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.eoc = Field(\"eoc\", \"\
    Regular channel end of\n                          conversion\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.awd = Field(\"awd\", \"Analog watchdog\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"control register 1\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ovrie = Field(\"ovrie\", \"Overrun interrupt enable\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.res = Field(\"res\", \"Resolution\"\
    , self._address, 24, 0x0003, 2, proxy)\n            self.awden = Field(\"awden\"\
    , \"Analog watchdog enable on regular\n                          channels\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.jawden = Field(\"jawden\", \"Analog\
    \ watchdog enable on injected\n                          channels\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.discnum = Field(\"discnum\", \"Discontinuous\
    \ mode channel\n                          count\", self._address, 13, 0x0007,\
    \ 3, proxy)\n            self.jdiscen = Field(\"jdiscen\", \"Discontinuous mode\
    \ on injected\n                          channels\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.discen = Field(\"discen\", \"Discontinuous mode\
    \ on regular\n                          channels\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.jauto = Field(\"jauto\", \"Automatic injected group\n\
    \                          conversion\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.awdsgl = Field(\"awdsgl\", \"Enable the watchdog on a single\
    \ channel\n                          in scan mode\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.scan = Field(\"scan\", \"Scan mode\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.jeocie = Field(\"jeocie\", \"Interrupt\
    \ enable for injected\n                          channels\", self._address, 7,\
    \ 0x0001, 1, proxy)\n            self.awdie = Field(\"awdie\", \"Analog watchdog\
    \ interrupt\n                          enable\", self._address, 6, 0x0001, 1,\
    \ proxy)\n            self.eocie = Field(\"eocie\", \"Interrupt enable for EOC\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.awdch = Field(\"awdch\"\
    , \"Analog watchdog channel select\n                          bits\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"control register 2\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.swstart\
    \ = Field(\"swstart\", \"Start conversion of regular\n                       \
    \   channels\", self._address, 30, 0x0001, 1, proxy)\n            self.exten =\
    \ Field(\"exten\", \"External trigger enable for regular\n                   \
    \       channels\", self._address, 28, 0x0003, 2, proxy)\n            self.extsel\
    \ = Field(\"extsel\", \"External event select for regular\n                  \
    \        group\", self._address, 24, 0x000F, 4, proxy)\n            self.jswstart\
    \ = Field(\"jswstart\", \"Start conversion of injected\n                     \
    \     channels\", self._address, 22, 0x0001, 1, proxy)\n            self.jexten\
    \ = Field(\"jexten\", \"External trigger enable for injected\n               \
    \           channels\", self._address, 20, 0x0003, 2, proxy)\n            self.jextsel\
    \ = Field(\"jextsel\", \"External event select for injected\n                \
    \          group\", self._address, 16, 0x000F, 4, proxy)\n            self.align\
    \ = Field(\"align\", \"Data alignment\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.eocs = Field(\"eocs\", \"End of conversion\n               \
    \           selection\", self._address, 10, 0x0001, 1, proxy)\n            self.dds\
    \ = Field(\"dds\", \"DMA disable selection (for single ADC\n                 \
    \         mode)\", self._address, 9, 0x0001, 1, proxy)\n            self.dma =\
    \ Field(\"dma\", \"Direct memory access mode (for single\n                   \
    \       ADC mode)\", self._address, 8, 0x0001, 1, proxy)\n            self.cont\
    \ = Field(\"cont\", \"Continuous conversion\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.adon = Field(\"adon\", \"A/D Converter ON / OFF\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Smpr1Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"SMPR1\", \"\
    sample time register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.smpx_x = Field(\"smpx_x\", \"Sample time bits\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Smpr2Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"SMPR2\"\
    , \"sample time register 2\", address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.smpx_x = Field(\"smpx_x\", \"Sample time bits\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Jofr1Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"JOFR1\"\
    , \"injected channel data offset register\n              x\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.joffset1 = Field(\"joffset1\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR2\", \"\
    injected channel data offset register\n              x\", address + 0x0018, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset2 = Field(\"joffset2\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr3Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR3\", \"\
    injected channel data offset register\n              x\", address + 0x001C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset3 = Field(\"joffset3\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr4Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR4\", \"\
    injected channel data offset register\n              x\", address + 0x0020, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset4 = Field(\"joffset4\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class HtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"HTR\", \"watchdog higher threshold\n\
    \              register\", address + 0x0024, 32, \"read-write\", 0x0FFF, proxy)\n\
    \            self.ht = Field(\"ht\", \"Analog watchdog higher\n              \
    \            threshold\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class\
    \ LtrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"LTR\", \"watchdog lower threshold\n              register\"\
    , address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.lt =\
    \ Field(\"lt\", \"Analog watchdog lower\n                          threshold\"\
    , self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Sqr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SQR1\", \"regular sequence register 1\", address + 0x002C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.l = Field(\"l\", \"Regular channel sequence\n\
    \                          length\", self._address, 20, 0x000F, 4, proxy)\n  \
    \          self.sq16 = Field(\"sq16\", \"16th conversion in regular\n        \
    \                  sequence\", self._address, 15, 0x001F, 5, proxy)\n        \
    \    self.sq15 = Field(\"sq15\", \"15th conversion in regular\n              \
    \            sequence\", self._address, 10, 0x001F, 5, proxy)\n            self.sq14\
    \ = Field(\"sq14\", \"14th conversion in regular\n                          sequence\"\
    , self._address, 5, 0x001F, 5, proxy)\n            self.sq13 = Field(\"sq13\"\
    , \"13th conversion in regular\n                          sequence\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class Sqr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SQR2\", \"regular sequence\
    \ register 2\", address + 0x0030, 32, \"read-write\", 0x0000, proxy)\n       \
    \     self.sq12 = Field(\"sq12\", \"12th conversion in regular\n             \
    \             sequence\", self._address, 25, 0x001F, 5, proxy)\n            self.sq11\
    \ = Field(\"sq11\", \"11th conversion in regular\n                          sequence\"\
    , self._address, 20, 0x001F, 5, proxy)\n            self.sq10 = Field(\"sq10\"\
    , \"10th conversion in regular\n                          sequence\", self._address,\
    \ 15, 0x001F, 5, proxy)\n            self.sq9 = Field(\"sq9\", \"9th conversion\
    \ in regular\n                          sequence\", self._address, 10, 0x001F,\
    \ 5, proxy)\n            self.sq8 = Field(\"sq8\", \"8th conversion in regular\n\
    \                          sequence\", self._address, 5, 0x001F, 5, proxy)\n \
    \           self.sq7 = Field(\"sq7\", \"7th conversion in regular\n          \
    \                sequence\", self._address, 0, 0x001F, 5, proxy)\n    \n    class\
    \ Sqr3Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SQR3\", \"regular sequence register 3\", address +\
    \ 0x0034, 32, \"read-write\", 0x0000, proxy)\n            self.sq6 = Field(\"\
    sq6\", \"6th conversion in regular\n                          sequence\", self._address,\
    \ 25, 0x001F, 5, proxy)\n            self.sq5 = Field(\"sq5\", \"5th conversion\
    \ in regular\n                          sequence\", self._address, 20, 0x001F,\
    \ 5, proxy)\n            self.sq4 = Field(\"sq4\", \"4th conversion in regular\n\
    \                          sequence\", self._address, 15, 0x001F, 5, proxy)\n\
    \            self.sq3 = Field(\"sq3\", \"3rd conversion in regular\n         \
    \                 sequence\", self._address, 10, 0x001F, 5, proxy)\n         \
    \   self.sq2 = Field(\"sq2\", \"2nd conversion in regular\n                  \
    \        sequence\", self._address, 5, 0x001F, 5, proxy)\n            self.sq1\
    \ = Field(\"sq1\", \"1st conversion in regular\n                          sequence\"\
    , self._address, 0, 0x001F, 5, proxy)\n    \n    class JsqrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    JSQR\", \"injected sequence register\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.jl = Field(\"jl\", \"Injected sequence length\"\
    , self._address, 20, 0x0003, 2, proxy)\n            self.jsq4 = Field(\"jsq4\"\
    , \"4th conversion in injected\n                          sequence\", self._address,\
    \ 15, 0x001F, 5, proxy)\n            self.jsq3 = Field(\"jsq3\", \"3rd conversion\
    \ in injected\n                          sequence\", self._address, 10, 0x001F,\
    \ 5, proxy)\n            self.jsq2 = Field(\"jsq2\", \"2nd conversion in injected\n\
    \                          sequence\", self._address, 5, 0x001F, 5, proxy)\n \
    \           self.jsq1 = Field(\"jsq1\", \"1st conversion in injected\n       \
    \                   sequence\", self._address, 0, 0x001F, 5, proxy)\n    \n  \
    \  class Jdr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"JDR1\", \"injected data register x\", address\
    \ + 0x003C, 32, \"read-only\", 0x0000, proxy)\n            self.jdata = Field(\"\
    jdata\", \"Injected data\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Jdr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"JDR2\", \"injected data register x\", address + 0x0040,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.jdata = Field(\"jdata\"\
    , \"Injected data\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Jdr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    JDR3\", \"injected data register x\", address + 0x0044, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.jdata = Field(\"jdata\", \"Injected data\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Jdr4Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JDR4\", \"injected\
    \ data register x\", address + 0x0048, 32, \"read-only\", 0x0000, proxy)\n   \
    \         self.jdata = Field(\"jdata\", \"Injected data\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class DrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DR\", \"regular data register\"\
    , address + 0x004C, 32, \"read-only\", 0x0000, proxy)\n            self.data =\
    \ Field(\"data\", \"Regular data\", self._address, 0, 0xFFFF, 16, proxy)\n   \
    \ \n    def __init__(self, proxy):\n        super().__init__(\"adc1\", \"Analog-to-digital\
    \ converter\", 0x40012000)\n        self.sr = self.SrRegister(self.address, proxy)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smpr1 = self.Smpr1Register(self.address,\
    \ proxy)\n        self.smpr2 = self.Smpr2Register(self.address, proxy)\n     \
    \   self.jofr1 = self.Jofr1Register(self.address, proxy)\n        self.jofr2 =\
    \ self.Jofr2Register(self.address, proxy)\n        self.jofr3 = self.Jofr3Register(self.address,\
    \ proxy)\n        self.jofr4 = self.Jofr4Register(self.address, proxy)\n     \
    \   self.htr = self.HtrRegister(self.address, proxy)\n        self.ltr = self.LtrRegister(self.address,\
    \ proxy)\n        self.sqr1 = self.Sqr1Register(self.address, proxy)\n       \
    \ self.sqr2 = self.Sqr2Register(self.address, proxy)\n        self.sqr3 = self.Sqr3Register(self.address,\
    \ proxy)\n        self.jsqr = self.JsqrRegister(self.address, proxy)\n       \
    \ self.jdr1 = self.Jdr1Register(self.address, proxy)\n        self.jdr2 = self.Jdr2Register(self.address,\
    \ proxy)\n        self.jdr3 = self.Jdr3Register(self.address, proxy)\n       \
    \ self.jdr4 = self.Jdr4Register(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n"
  name: ADC1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Adc2(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"status register\", address + 0x0000, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.strt = Field(\"strt\"\
    , \"Regular channel start flag\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.jstrt = Field(\"jstrt\", \"Injected channel start\n              \
    \            flag\", self._address, 3, 0x0001, 1, proxy)\n            self.jeoc\
    \ = Field(\"jeoc\", \"Injected channel end of\n                          conversion\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.eoc = Field(\"eoc\", \"\
    Regular channel end of\n                          conversion\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.awd = Field(\"awd\", \"Analog watchdog\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"control register 1\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ovrie = Field(\"ovrie\", \"Overrun interrupt enable\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.res = Field(\"res\", \"Resolution\"\
    , self._address, 24, 0x0003, 2, proxy)\n            self.awden = Field(\"awden\"\
    , \"Analog watchdog enable on regular\n                          channels\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.jawden = Field(\"jawden\", \"Analog\
    \ watchdog enable on injected\n                          channels\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.discnum = Field(\"discnum\", \"Discontinuous\
    \ mode channel\n                          count\", self._address, 13, 0x0007,\
    \ 3, proxy)\n            self.jdiscen = Field(\"jdiscen\", \"Discontinuous mode\
    \ on injected\n                          channels\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.discen = Field(\"discen\", \"Discontinuous mode\
    \ on regular\n                          channels\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.jauto = Field(\"jauto\", \"Automatic injected group\n\
    \                          conversion\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.awdsgl = Field(\"awdsgl\", \"Enable the watchdog on a single\
    \ channel\n                          in scan mode\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.scan = Field(\"scan\", \"Scan mode\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.jeocie = Field(\"jeocie\", \"Interrupt\
    \ enable for injected\n                          channels\", self._address, 7,\
    \ 0x0001, 1, proxy)\n            self.awdie = Field(\"awdie\", \"Analog watchdog\
    \ interrupt\n                          enable\", self._address, 6, 0x0001, 1,\
    \ proxy)\n            self.eocie = Field(\"eocie\", \"Interrupt enable for EOC\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.awdch = Field(\"awdch\"\
    , \"Analog watchdog channel select\n                          bits\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"control register 2\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.swstart\
    \ = Field(\"swstart\", \"Start conversion of regular\n                       \
    \   channels\", self._address, 30, 0x0001, 1, proxy)\n            self.exten =\
    \ Field(\"exten\", \"External trigger enable for regular\n                   \
    \       channels\", self._address, 28, 0x0003, 2, proxy)\n            self.extsel\
    \ = Field(\"extsel\", \"External event select for regular\n                  \
    \        group\", self._address, 24, 0x000F, 4, proxy)\n            self.jswstart\
    \ = Field(\"jswstart\", \"Start conversion of injected\n                     \
    \     channels\", self._address, 22, 0x0001, 1, proxy)\n            self.jexten\
    \ = Field(\"jexten\", \"External trigger enable for injected\n               \
    \           channels\", self._address, 20, 0x0003, 2, proxy)\n            self.jextsel\
    \ = Field(\"jextsel\", \"External event select for injected\n                \
    \          group\", self._address, 16, 0x000F, 4, proxy)\n            self.align\
    \ = Field(\"align\", \"Data alignment\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.eocs = Field(\"eocs\", \"End of conversion\n               \
    \           selection\", self._address, 10, 0x0001, 1, proxy)\n            self.dds\
    \ = Field(\"dds\", \"DMA disable selection (for single ADC\n                 \
    \         mode)\", self._address, 9, 0x0001, 1, proxy)\n            self.dma =\
    \ Field(\"dma\", \"Direct memory access mode (for single\n                   \
    \       ADC mode)\", self._address, 8, 0x0001, 1, proxy)\n            self.cont\
    \ = Field(\"cont\", \"Continuous conversion\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.adon = Field(\"adon\", \"A/D Converter ON / OFF\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Smpr1Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"SMPR1\", \"\
    sample time register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.smpx_x = Field(\"smpx_x\", \"Sample time bits\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Smpr2Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"SMPR2\"\
    , \"sample time register 2\", address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.smpx_x = Field(\"smpx_x\", \"Sample time bits\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Jofr1Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"JOFR1\"\
    , \"injected channel data offset register\n              x\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.joffset1 = Field(\"joffset1\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR2\", \"\
    injected channel data offset register\n              x\", address + 0x0018, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset2 = Field(\"joffset2\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr3Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR3\", \"\
    injected channel data offset register\n              x\", address + 0x001C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset3 = Field(\"joffset3\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr4Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR4\", \"\
    injected channel data offset register\n              x\", address + 0x0020, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset4 = Field(\"joffset4\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class HtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"HTR\", \"watchdog higher threshold\n\
    \              register\", address + 0x0024, 32, \"read-write\", 0x0FFF, proxy)\n\
    \            self.ht = Field(\"ht\", \"Analog watchdog higher\n              \
    \            threshold\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class\
    \ LtrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"LTR\", \"watchdog lower threshold\n              register\"\
    , address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.lt =\
    \ Field(\"lt\", \"Analog watchdog lower\n                          threshold\"\
    , self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Sqr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SQR1\", \"regular sequence register 1\", address + 0x002C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.l = Field(\"l\", \"Regular channel sequence\n\
    \                          length\", self._address, 20, 0x000F, 4, proxy)\n  \
    \          self.sq16 = Field(\"sq16\", \"16th conversion in regular\n        \
    \                  sequence\", self._address, 15, 0x001F, 5, proxy)\n        \
    \    self.sq15 = Field(\"sq15\", \"15th conversion in regular\n              \
    \            sequence\", self._address, 10, 0x001F, 5, proxy)\n            self.sq14\
    \ = Field(\"sq14\", \"14th conversion in regular\n                          sequence\"\
    , self._address, 5, 0x001F, 5, proxy)\n            self.sq13 = Field(\"sq13\"\
    , \"13th conversion in regular\n                          sequence\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class Sqr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SQR2\", \"regular sequence\
    \ register 2\", address + 0x0030, 32, \"read-write\", 0x0000, proxy)\n       \
    \     self.sq12 = Field(\"sq12\", \"12th conversion in regular\n             \
    \             sequence\", self._address, 25, 0x001F, 5, proxy)\n            self.sq11\
    \ = Field(\"sq11\", \"11th conversion in regular\n                          sequence\"\
    , self._address, 20, 0x001F, 5, proxy)\n            self.sq10 = Field(\"sq10\"\
    , \"10th conversion in regular\n                          sequence\", self._address,\
    \ 15, 0x001F, 5, proxy)\n            self.sq9 = Field(\"sq9\", \"9th conversion\
    \ in regular\n                          sequence\", self._address, 10, 0x001F,\
    \ 5, proxy)\n            self.sq8 = Field(\"sq8\", \"8th conversion in regular\n\
    \                          sequence\", self._address, 5, 0x001F, 5, proxy)\n \
    \           self.sq7 = Field(\"sq7\", \"7th conversion in regular\n          \
    \                sequence\", self._address, 0, 0x001F, 5, proxy)\n    \n    class\
    \ Sqr3Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SQR3\", \"regular sequence register 3\", address +\
    \ 0x0034, 32, \"read-write\", 0x0000, proxy)\n            self.sq6 = Field(\"\
    sq6\", \"6th conversion in regular\n                          sequence\", self._address,\
    \ 25, 0x001F, 5, proxy)\n            self.sq5 = Field(\"sq5\", \"5th conversion\
    \ in regular\n                          sequence\", self._address, 20, 0x001F,\
    \ 5, proxy)\n            self.sq4 = Field(\"sq4\", \"4th conversion in regular\n\
    \                          sequence\", self._address, 15, 0x001F, 5, proxy)\n\
    \            self.sq3 = Field(\"sq3\", \"3rd conversion in regular\n         \
    \                 sequence\", self._address, 10, 0x001F, 5, proxy)\n         \
    \   self.sq2 = Field(\"sq2\", \"2nd conversion in regular\n                  \
    \        sequence\", self._address, 5, 0x001F, 5, proxy)\n            self.sq1\
    \ = Field(\"sq1\", \"1st conversion in regular\n                          sequence\"\
    , self._address, 0, 0x001F, 5, proxy)\n    \n    class JsqrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    JSQR\", \"injected sequence register\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.jl = Field(\"jl\", \"Injected sequence length\"\
    , self._address, 20, 0x0003, 2, proxy)\n            self.jsq4 = Field(\"jsq4\"\
    , \"4th conversion in injected\n                          sequence\", self._address,\
    \ 15, 0x001F, 5, proxy)\n            self.jsq3 = Field(\"jsq3\", \"3rd conversion\
    \ in injected\n                          sequence\", self._address, 10, 0x001F,\
    \ 5, proxy)\n            self.jsq2 = Field(\"jsq2\", \"2nd conversion in injected\n\
    \                          sequence\", self._address, 5, 0x001F, 5, proxy)\n \
    \           self.jsq1 = Field(\"jsq1\", \"1st conversion in injected\n       \
    \                   sequence\", self._address, 0, 0x001F, 5, proxy)\n    \n  \
    \  class Jdr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"JDR1\", \"injected data register x\", address\
    \ + 0x003C, 32, \"read-only\", 0x0000, proxy)\n            self.jdata = Field(\"\
    jdata\", \"Injected data\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Jdr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"JDR2\", \"injected data register x\", address + 0x0040,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.jdata = Field(\"jdata\"\
    , \"Injected data\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Jdr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    JDR3\", \"injected data register x\", address + 0x0044, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.jdata = Field(\"jdata\", \"Injected data\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Jdr4Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JDR4\", \"injected\
    \ data register x\", address + 0x0048, 32, \"read-only\", 0x0000, proxy)\n   \
    \         self.jdata = Field(\"jdata\", \"Injected data\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class DrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DR\", \"regular data register\"\
    , address + 0x004C, 32, \"read-only\", 0x0000, proxy)\n            self.data =\
    \ Field(\"data\", \"Regular data\", self._address, 0, 0xFFFF, 16, proxy)\n   \
    \ \n    def __init__(self, proxy):\n        super().__init__(\"adc2\", \"Analog-to-digital\
    \ converter\", 0x40012100)\n        self.sr = self.SrRegister(self.address, proxy)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smpr1 = self.Smpr1Register(self.address,\
    \ proxy)\n        self.smpr2 = self.Smpr2Register(self.address, proxy)\n     \
    \   self.jofr1 = self.Jofr1Register(self.address, proxy)\n        self.jofr2 =\
    \ self.Jofr2Register(self.address, proxy)\n        self.jofr3 = self.Jofr3Register(self.address,\
    \ proxy)\n        self.jofr4 = self.Jofr4Register(self.address, proxy)\n     \
    \   self.htr = self.HtrRegister(self.address, proxy)\n        self.ltr = self.LtrRegister(self.address,\
    \ proxy)\n        self.sqr1 = self.Sqr1Register(self.address, proxy)\n       \
    \ self.sqr2 = self.Sqr2Register(self.address, proxy)\n        self.sqr3 = self.Sqr3Register(self.address,\
    \ proxy)\n        self.jsqr = self.JsqrRegister(self.address, proxy)\n       \
    \ self.jdr1 = self.Jdr1Register(self.address, proxy)\n        self.jdr2 = self.Jdr2Register(self.address,\
    \ proxy)\n        self.jdr3 = self.Jdr3Register(self.address, proxy)\n       \
    \ self.jdr4 = self.Jdr4Register(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n"
  name: ADC2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Adc3(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"status register\", address + 0x0000, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.strt = Field(\"strt\"\
    , \"Regular channel start flag\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.jstrt = Field(\"jstrt\", \"Injected channel start\n              \
    \            flag\", self._address, 3, 0x0001, 1, proxy)\n            self.jeoc\
    \ = Field(\"jeoc\", \"Injected channel end of\n                          conversion\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.eoc = Field(\"eoc\", \"\
    Regular channel end of\n                          conversion\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.awd = Field(\"awd\", \"Analog watchdog\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"control register 1\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ovrie = Field(\"ovrie\", \"Overrun interrupt enable\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.res = Field(\"res\", \"Resolution\"\
    , self._address, 24, 0x0003, 2, proxy)\n            self.awden = Field(\"awden\"\
    , \"Analog watchdog enable on regular\n                          channels\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.jawden = Field(\"jawden\", \"Analog\
    \ watchdog enable on injected\n                          channels\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.discnum = Field(\"discnum\", \"Discontinuous\
    \ mode channel\n                          count\", self._address, 13, 0x0007,\
    \ 3, proxy)\n            self.jdiscen = Field(\"jdiscen\", \"Discontinuous mode\
    \ on injected\n                          channels\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.discen = Field(\"discen\", \"Discontinuous mode\
    \ on regular\n                          channels\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.jauto = Field(\"jauto\", \"Automatic injected group\n\
    \                          conversion\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.awdsgl = Field(\"awdsgl\", \"Enable the watchdog on a single\
    \ channel\n                          in scan mode\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.scan = Field(\"scan\", \"Scan mode\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.jeocie = Field(\"jeocie\", \"Interrupt\
    \ enable for injected\n                          channels\", self._address, 7,\
    \ 0x0001, 1, proxy)\n            self.awdie = Field(\"awdie\", \"Analog watchdog\
    \ interrupt\n                          enable\", self._address, 6, 0x0001, 1,\
    \ proxy)\n            self.eocie = Field(\"eocie\", \"Interrupt enable for EOC\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.awdch = Field(\"awdch\"\
    , \"Analog watchdog channel select\n                          bits\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"control register 2\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.swstart\
    \ = Field(\"swstart\", \"Start conversion of regular\n                       \
    \   channels\", self._address, 30, 0x0001, 1, proxy)\n            self.exten =\
    \ Field(\"exten\", \"External trigger enable for regular\n                   \
    \       channels\", self._address, 28, 0x0003, 2, proxy)\n            self.extsel\
    \ = Field(\"extsel\", \"External event select for regular\n                  \
    \        group\", self._address, 24, 0x000F, 4, proxy)\n            self.jswstart\
    \ = Field(\"jswstart\", \"Start conversion of injected\n                     \
    \     channels\", self._address, 22, 0x0001, 1, proxy)\n            self.jexten\
    \ = Field(\"jexten\", \"External trigger enable for injected\n               \
    \           channels\", self._address, 20, 0x0003, 2, proxy)\n            self.jextsel\
    \ = Field(\"jextsel\", \"External event select for injected\n                \
    \          group\", self._address, 16, 0x000F, 4, proxy)\n            self.align\
    \ = Field(\"align\", \"Data alignment\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.eocs = Field(\"eocs\", \"End of conversion\n               \
    \           selection\", self._address, 10, 0x0001, 1, proxy)\n            self.dds\
    \ = Field(\"dds\", \"DMA disable selection (for single ADC\n                 \
    \         mode)\", self._address, 9, 0x0001, 1, proxy)\n            self.dma =\
    \ Field(\"dma\", \"Direct memory access mode (for single\n                   \
    \       ADC mode)\", self._address, 8, 0x0001, 1, proxy)\n            self.cont\
    \ = Field(\"cont\", \"Continuous conversion\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.adon = Field(\"adon\", \"A/D Converter ON / OFF\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Smpr1Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"SMPR1\", \"\
    sample time register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.smpx_x = Field(\"smpx_x\", \"Sample time bits\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Smpr2Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"SMPR2\"\
    , \"sample time register 2\", address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.smpx_x = Field(\"smpx_x\", \"Sample time bits\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Jofr1Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"JOFR1\"\
    , \"injected channel data offset register\n              x\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.joffset1 = Field(\"joffset1\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR2\", \"\
    injected channel data offset register\n              x\", address + 0x0018, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset2 = Field(\"joffset2\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr3Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR3\", \"\
    injected channel data offset register\n              x\", address + 0x001C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset3 = Field(\"joffset3\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class Jofr4Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JOFR4\", \"\
    injected channel data offset register\n              x\", address + 0x0020, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.joffset4 = Field(\"joffset4\"\
    , \"Data offset for injected channel\n                          x\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class HtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"HTR\", \"watchdog higher threshold\n\
    \              register\", address + 0x0024, 32, \"read-write\", 0x0FFF, proxy)\n\
    \            self.ht = Field(\"ht\", \"Analog watchdog higher\n              \
    \            threshold\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class\
    \ LtrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"LTR\", \"watchdog lower threshold\n              register\"\
    , address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.lt =\
    \ Field(\"lt\", \"Analog watchdog lower\n                          threshold\"\
    , self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Sqr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SQR1\", \"regular sequence register 1\", address + 0x002C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.l = Field(\"l\", \"Regular channel sequence\n\
    \                          length\", self._address, 20, 0x000F, 4, proxy)\n  \
    \          self.sq16 = Field(\"sq16\", \"16th conversion in regular\n        \
    \                  sequence\", self._address, 15, 0x001F, 5, proxy)\n        \
    \    self.sq15 = Field(\"sq15\", \"15th conversion in regular\n              \
    \            sequence\", self._address, 10, 0x001F, 5, proxy)\n            self.sq14\
    \ = Field(\"sq14\", \"14th conversion in regular\n                          sequence\"\
    , self._address, 5, 0x001F, 5, proxy)\n            self.sq13 = Field(\"sq13\"\
    , \"13th conversion in regular\n                          sequence\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class Sqr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SQR2\", \"regular sequence\
    \ register 2\", address + 0x0030, 32, \"read-write\", 0x0000, proxy)\n       \
    \     self.sq12 = Field(\"sq12\", \"12th conversion in regular\n             \
    \             sequence\", self._address, 25, 0x001F, 5, proxy)\n            self.sq11\
    \ = Field(\"sq11\", \"11th conversion in regular\n                          sequence\"\
    , self._address, 20, 0x001F, 5, proxy)\n            self.sq10 = Field(\"sq10\"\
    , \"10th conversion in regular\n                          sequence\", self._address,\
    \ 15, 0x001F, 5, proxy)\n            self.sq9 = Field(\"sq9\", \"9th conversion\
    \ in regular\n                          sequence\", self._address, 10, 0x001F,\
    \ 5, proxy)\n            self.sq8 = Field(\"sq8\", \"8th conversion in regular\n\
    \                          sequence\", self._address, 5, 0x001F, 5, proxy)\n \
    \           self.sq7 = Field(\"sq7\", \"7th conversion in regular\n          \
    \                sequence\", self._address, 0, 0x001F, 5, proxy)\n    \n    class\
    \ Sqr3Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SQR3\", \"regular sequence register 3\", address +\
    \ 0x0034, 32, \"read-write\", 0x0000, proxy)\n            self.sq6 = Field(\"\
    sq6\", \"6th conversion in regular\n                          sequence\", self._address,\
    \ 25, 0x001F, 5, proxy)\n            self.sq5 = Field(\"sq5\", \"5th conversion\
    \ in regular\n                          sequence\", self._address, 20, 0x001F,\
    \ 5, proxy)\n            self.sq4 = Field(\"sq4\", \"4th conversion in regular\n\
    \                          sequence\", self._address, 15, 0x001F, 5, proxy)\n\
    \            self.sq3 = Field(\"sq3\", \"3rd conversion in regular\n         \
    \                 sequence\", self._address, 10, 0x001F, 5, proxy)\n         \
    \   self.sq2 = Field(\"sq2\", \"2nd conversion in regular\n                  \
    \        sequence\", self._address, 5, 0x001F, 5, proxy)\n            self.sq1\
    \ = Field(\"sq1\", \"1st conversion in regular\n                          sequence\"\
    , self._address, 0, 0x001F, 5, proxy)\n    \n    class JsqrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    JSQR\", \"injected sequence register\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.jl = Field(\"jl\", \"Injected sequence length\"\
    , self._address, 20, 0x0003, 2, proxy)\n            self.jsq4 = Field(\"jsq4\"\
    , \"4th conversion in injected\n                          sequence\", self._address,\
    \ 15, 0x001F, 5, proxy)\n            self.jsq3 = Field(\"jsq3\", \"3rd conversion\
    \ in injected\n                          sequence\", self._address, 10, 0x001F,\
    \ 5, proxy)\n            self.jsq2 = Field(\"jsq2\", \"2nd conversion in injected\n\
    \                          sequence\", self._address, 5, 0x001F, 5, proxy)\n \
    \           self.jsq1 = Field(\"jsq1\", \"1st conversion in injected\n       \
    \                   sequence\", self._address, 0, 0x001F, 5, proxy)\n    \n  \
    \  class Jdr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"JDR1\", \"injected data register x\", address\
    \ + 0x003C, 32, \"read-only\", 0x0000, proxy)\n            self.jdata = Field(\"\
    jdata\", \"Injected data\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Jdr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"JDR2\", \"injected data register x\", address + 0x0040,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.jdata = Field(\"jdata\"\
    , \"Injected data\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Jdr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    JDR3\", \"injected data register x\", address + 0x0044, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.jdata = Field(\"jdata\", \"Injected data\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Jdr4Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"JDR4\", \"injected\
    \ data register x\", address + 0x0048, 32, \"read-only\", 0x0000, proxy)\n   \
    \         self.jdata = Field(\"jdata\", \"Injected data\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class DrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DR\", \"regular data register\"\
    , address + 0x004C, 32, \"read-only\", 0x0000, proxy)\n            self.data =\
    \ Field(\"data\", \"Regular data\", self._address, 0, 0xFFFF, 16, proxy)\n   \
    \ \n    def __init__(self, proxy):\n        super().__init__(\"adc3\", \"Analog-to-digital\
    \ converter\", 0x40012200)\n        self.sr = self.SrRegister(self.address, proxy)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smpr1 = self.Smpr1Register(self.address,\
    \ proxy)\n        self.smpr2 = self.Smpr2Register(self.address, proxy)\n     \
    \   self.jofr1 = self.Jofr1Register(self.address, proxy)\n        self.jofr2 =\
    \ self.Jofr2Register(self.address, proxy)\n        self.jofr3 = self.Jofr3Register(self.address,\
    \ proxy)\n        self.jofr4 = self.Jofr4Register(self.address, proxy)\n     \
    \   self.htr = self.HtrRegister(self.address, proxy)\n        self.ltr = self.LtrRegister(self.address,\
    \ proxy)\n        self.sqr1 = self.Sqr1Register(self.address, proxy)\n       \
    \ self.sqr2 = self.Sqr2Register(self.address, proxy)\n        self.sqr3 = self.Sqr3Register(self.address,\
    \ proxy)\n        self.jsqr = self.JsqrRegister(self.address, proxy)\n       \
    \ self.jdr1 = self.Jdr1Register(self.address, proxy)\n        self.jdr2 = self.Jdr2Register(self.address,\
    \ proxy)\n        self.jdr3 = self.Jdr3Register(self.address, proxy)\n       \
    \ self.jdr4 = self.Jdr4Register(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n"
  name: ADC3
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Usart6(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0000, 32,\
    \ \"\", 0xC00000, proxy)\n            self.cts = Field(\"cts\", \"CTS flag\",\
    \ self._address, 9, 0x0001, 1, proxy)\n            self.lbd = Field(\"lbd\", \"\
    LIN break detection flag\", self._address, 8, 0x0001, 1, proxy)\n            self.txe\
    \ = Field(\"txe\", \"Transmit data register\n                          empty\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.tc = Field(\"tc\", \"\
    Transmission complete\", self._address, 6, 0x0001, 1, proxy)\n            self.rxne\
    \ = Field(\"rxne\", \"Read data register not\n                          empty\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.idle = Field(\"idle\"\
    , \"IDLE line detected\", self._address, 4, 0x0001, 1, proxy)\n            self.ore\
    \ = Field(\"ore\", \"Overrun error\", self._address, 3, 0x0001, 1, proxy)\n  \
    \          self.nf = Field(\"nf\", \"Noise detected flag\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.fe = Field(\"fe\", \"Framing error\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.pe = Field(\"pe\", \"Parity error\",\
    \ self._address, 0, 0x0001, 1, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"Data register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dr = Field(\"dr\", \"Data value\", self._address, 0, 0x01FF,\
    \ 9, proxy)\n    \n    class BrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BRR\", \"Baud rate register\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.div_mantissa\
    \ = Field(\"div_mantissa\", \"mantissa of USARTDIV\", self._address, 4, 0x0FFF,\
    \ 12, proxy)\n            self.div_fraction = Field(\"div_fraction\", \"fraction\
    \ of USARTDIV\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"Control register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.over8 = Field(\"over8\", \"Oversampling mode\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.ue = Field(\"ue\", \"USART enable\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.m = Field(\"m\", \"Word\
    \ length\", self._address, 12, 0x0001, 1, proxy)\n            self.wake = Field(\"\
    wake\", \"Wakeup method\", self._address, 11, 0x0001, 1, proxy)\n            self.pce\
    \ = Field(\"pce\", \"Parity control enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ps = Field(\"ps\", \"Parity selection\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.peie = Field(\"peie\", \"PE interrupt enable\",\
    \ self._address, 8, 0x0001, 1, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"TXE interrupt enable\", self._address, 7, 0x0001, 1, proxy)\n            self.tcie\
    \ = Field(\"tcie\", \"Transmission complete interrupt\n                      \
    \    enable\", self._address, 6, 0x0001, 1, proxy)\n            self.rxneie =\
    \ Field(\"rxneie\", \"RXNE interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idleie = Field(\"idleie\", \"IDLE interrupt enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.te = Field(\"te\", \"Transmitter enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.re = Field(\"re\", \"\
    Receiver enable\", self._address, 2, 0x0001, 1, proxy)\n            self.rwu =\
    \ Field(\"rwu\", \"Receiver wakeup\", self._address, 1, 0x0001, 1, proxy)\n  \
    \          self.sbk = Field(\"sbk\", \"Send break\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.linen\
    \ = Field(\"linen\", \"LIN mode enable\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.stop = Field(\"stop\", \"STOP bits\", self._address, 12, 0x0003,\
    \ 2, proxy)\n            self.clken = Field(\"clken\", \"Clock enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\", \"Clock polarity\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cpha = Field(\"cpha\"\
    , \"Clock phase\", self._address, 9, 0x0001, 1, proxy)\n            self.lbcl\
    \ = Field(\"lbcl\", \"Last bit clock pulse\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.lbdie = Field(\"lbdie\", \"LIN break detection interrupt\n \
    \                         enable\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.lbdl = Field(\"lbdl\", \"lin break detection length\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.add = Field(\"add\", \"Address of the\
    \ USART node\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR3\", \"Control register 3\", address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.onebit = Field(\"onebit\", \"One sample bit method\n       \
    \                   enable\", self._address, 11, 0x0001, 1, proxy)\n         \
    \   self.ctsie = Field(\"ctsie\", \"CTS interrupt enable\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.ctse = Field(\"ctse\", \"CTS enable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.rtse = Field(\"rtse\", \"RTS enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.dmat = Field(\"dmat\"\
    , \"DMA enable transmitter\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.dmar = Field(\"dmar\", \"DMA enable receiver\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.scen = Field(\"scen\", \"Smartcard mode enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.nack = Field(\"nack\"\
    , \"Smartcard NACK enable\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.hdsel = Field(\"hdsel\", \"Half-duplex selection\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.irlp = Field(\"irlp\", \"IrDA low-power\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.iren = Field(\"iren\", \"IrDA mode enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.eie = Field(\"eie\", \"\
    Error interrupt enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ GtprRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"GTPR\", \"Guard time and prescaler\n              register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.gt =\
    \ Field(\"gt\", \"Guard time value\", self._address, 8, 0x00FF, 8, proxy)\n  \
    \          self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    usart6\", \"Universal synchronous asynchronous receiver\n      transmitter\",\
    \ 0x40011400)\n        self.sr = self.SrRegister(self.address, proxy)\n      \
    \  self.dr = self.DrRegister(self.address, proxy)\n        self.brr = self.BrrRegister(self.address,\
    \ proxy)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2\
    \ = self.Cr2Register(self.address, proxy)\n        self.cr3 = self.Cr3Register(self.address,\
    \ proxy)\n        self.gtpr = self.GtprRegister(self.address, proxy)\n"
  name: USART6
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Usart1(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0000, 32,\
    \ \"\", 0xC00000, proxy)\n            self.cts = Field(\"cts\", \"CTS flag\",\
    \ self._address, 9, 0x0001, 1, proxy)\n            self.lbd = Field(\"lbd\", \"\
    LIN break detection flag\", self._address, 8, 0x0001, 1, proxy)\n            self.txe\
    \ = Field(\"txe\", \"Transmit data register\n                          empty\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.tc = Field(\"tc\", \"\
    Transmission complete\", self._address, 6, 0x0001, 1, proxy)\n            self.rxne\
    \ = Field(\"rxne\", \"Read data register not\n                          empty\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.idle = Field(\"idle\"\
    , \"IDLE line detected\", self._address, 4, 0x0001, 1, proxy)\n            self.ore\
    \ = Field(\"ore\", \"Overrun error\", self._address, 3, 0x0001, 1, proxy)\n  \
    \          self.nf = Field(\"nf\", \"Noise detected flag\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.fe = Field(\"fe\", \"Framing error\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.pe = Field(\"pe\", \"Parity error\",\
    \ self._address, 0, 0x0001, 1, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"Data register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dr = Field(\"dr\", \"Data value\", self._address, 0, 0x01FF,\
    \ 9, proxy)\n    \n    class BrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BRR\", \"Baud rate register\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.div_mantissa\
    \ = Field(\"div_mantissa\", \"mantissa of USARTDIV\", self._address, 4, 0x0FFF,\
    \ 12, proxy)\n            self.div_fraction = Field(\"div_fraction\", \"fraction\
    \ of USARTDIV\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"Control register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.over8 = Field(\"over8\", \"Oversampling mode\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.ue = Field(\"ue\", \"USART enable\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.m = Field(\"m\", \"Word\
    \ length\", self._address, 12, 0x0001, 1, proxy)\n            self.wake = Field(\"\
    wake\", \"Wakeup method\", self._address, 11, 0x0001, 1, proxy)\n            self.pce\
    \ = Field(\"pce\", \"Parity control enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ps = Field(\"ps\", \"Parity selection\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.peie = Field(\"peie\", \"PE interrupt enable\",\
    \ self._address, 8, 0x0001, 1, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"TXE interrupt enable\", self._address, 7, 0x0001, 1, proxy)\n            self.tcie\
    \ = Field(\"tcie\", \"Transmission complete interrupt\n                      \
    \    enable\", self._address, 6, 0x0001, 1, proxy)\n            self.rxneie =\
    \ Field(\"rxneie\", \"RXNE interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idleie = Field(\"idleie\", \"IDLE interrupt enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.te = Field(\"te\", \"Transmitter enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.re = Field(\"re\", \"\
    Receiver enable\", self._address, 2, 0x0001, 1, proxy)\n            self.rwu =\
    \ Field(\"rwu\", \"Receiver wakeup\", self._address, 1, 0x0001, 1, proxy)\n  \
    \          self.sbk = Field(\"sbk\", \"Send break\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.linen\
    \ = Field(\"linen\", \"LIN mode enable\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.stop = Field(\"stop\", \"STOP bits\", self._address, 12, 0x0003,\
    \ 2, proxy)\n            self.clken = Field(\"clken\", \"Clock enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\", \"Clock polarity\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cpha = Field(\"cpha\"\
    , \"Clock phase\", self._address, 9, 0x0001, 1, proxy)\n            self.lbcl\
    \ = Field(\"lbcl\", \"Last bit clock pulse\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.lbdie = Field(\"lbdie\", \"LIN break detection interrupt\n \
    \                         enable\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.lbdl = Field(\"lbdl\", \"lin break detection length\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.add = Field(\"add\", \"Address of the\
    \ USART node\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR3\", \"Control register 3\", address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.onebit = Field(\"onebit\", \"One sample bit method\n       \
    \                   enable\", self._address, 11, 0x0001, 1, proxy)\n         \
    \   self.ctsie = Field(\"ctsie\", \"CTS interrupt enable\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.ctse = Field(\"ctse\", \"CTS enable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.rtse = Field(\"rtse\", \"RTS enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.dmat = Field(\"dmat\"\
    , \"DMA enable transmitter\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.dmar = Field(\"dmar\", \"DMA enable receiver\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.scen = Field(\"scen\", \"Smartcard mode enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.nack = Field(\"nack\"\
    , \"Smartcard NACK enable\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.hdsel = Field(\"hdsel\", \"Half-duplex selection\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.irlp = Field(\"irlp\", \"IrDA low-power\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.iren = Field(\"iren\", \"IrDA mode enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.eie = Field(\"eie\", \"\
    Error interrupt enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ GtprRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"GTPR\", \"Guard time and prescaler\n              register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.gt =\
    \ Field(\"gt\", \"Guard time value\", self._address, 8, 0x00FF, 8, proxy)\n  \
    \          self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    usart1\", \"Universal synchronous asynchronous receiver\n      transmitter\",\
    \ 0x40011000)\n        self.sr = self.SrRegister(self.address, proxy)\n      \
    \  self.dr = self.DrRegister(self.address, proxy)\n        self.brr = self.BrrRegister(self.address,\
    \ proxy)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2\
    \ = self.Cr2Register(self.address, proxy)\n        self.cr3 = self.Cr3Register(self.address,\
    \ proxy)\n        self.gtpr = self.GtprRegister(self.address, proxy)\n"
  name: USART1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Usart2(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0000, 32,\
    \ \"\", 0xC00000, proxy)\n            self.cts = Field(\"cts\", \"CTS flag\",\
    \ self._address, 9, 0x0001, 1, proxy)\n            self.lbd = Field(\"lbd\", \"\
    LIN break detection flag\", self._address, 8, 0x0001, 1, proxy)\n            self.txe\
    \ = Field(\"txe\", \"Transmit data register\n                          empty\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.tc = Field(\"tc\", \"\
    Transmission complete\", self._address, 6, 0x0001, 1, proxy)\n            self.rxne\
    \ = Field(\"rxne\", \"Read data register not\n                          empty\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.idle = Field(\"idle\"\
    , \"IDLE line detected\", self._address, 4, 0x0001, 1, proxy)\n            self.ore\
    \ = Field(\"ore\", \"Overrun error\", self._address, 3, 0x0001, 1, proxy)\n  \
    \          self.nf = Field(\"nf\", \"Noise detected flag\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.fe = Field(\"fe\", \"Framing error\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.pe = Field(\"pe\", \"Parity error\",\
    \ self._address, 0, 0x0001, 1, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"Data register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dr = Field(\"dr\", \"Data value\", self._address, 0, 0x01FF,\
    \ 9, proxy)\n    \n    class BrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BRR\", \"Baud rate register\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.div_mantissa\
    \ = Field(\"div_mantissa\", \"mantissa of USARTDIV\", self._address, 4, 0x0FFF,\
    \ 12, proxy)\n            self.div_fraction = Field(\"div_fraction\", \"fraction\
    \ of USARTDIV\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"Control register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.over8 = Field(\"over8\", \"Oversampling mode\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.ue = Field(\"ue\", \"USART enable\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.m = Field(\"m\", \"Word\
    \ length\", self._address, 12, 0x0001, 1, proxy)\n            self.wake = Field(\"\
    wake\", \"Wakeup method\", self._address, 11, 0x0001, 1, proxy)\n            self.pce\
    \ = Field(\"pce\", \"Parity control enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ps = Field(\"ps\", \"Parity selection\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.peie = Field(\"peie\", \"PE interrupt enable\",\
    \ self._address, 8, 0x0001, 1, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"TXE interrupt enable\", self._address, 7, 0x0001, 1, proxy)\n            self.tcie\
    \ = Field(\"tcie\", \"Transmission complete interrupt\n                      \
    \    enable\", self._address, 6, 0x0001, 1, proxy)\n            self.rxneie =\
    \ Field(\"rxneie\", \"RXNE interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idleie = Field(\"idleie\", \"IDLE interrupt enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.te = Field(\"te\", \"Transmitter enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.re = Field(\"re\", \"\
    Receiver enable\", self._address, 2, 0x0001, 1, proxy)\n            self.rwu =\
    \ Field(\"rwu\", \"Receiver wakeup\", self._address, 1, 0x0001, 1, proxy)\n  \
    \          self.sbk = Field(\"sbk\", \"Send break\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.linen\
    \ = Field(\"linen\", \"LIN mode enable\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.stop = Field(\"stop\", \"STOP bits\", self._address, 12, 0x0003,\
    \ 2, proxy)\n            self.clken = Field(\"clken\", \"Clock enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\", \"Clock polarity\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cpha = Field(\"cpha\"\
    , \"Clock phase\", self._address, 9, 0x0001, 1, proxy)\n            self.lbcl\
    \ = Field(\"lbcl\", \"Last bit clock pulse\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.lbdie = Field(\"lbdie\", \"LIN break detection interrupt\n \
    \                         enable\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.lbdl = Field(\"lbdl\", \"lin break detection length\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.add = Field(\"add\", \"Address of the\
    \ USART node\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR3\", \"Control register 3\", address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.onebit = Field(\"onebit\", \"One sample bit method\n       \
    \                   enable\", self._address, 11, 0x0001, 1, proxy)\n         \
    \   self.ctsie = Field(\"ctsie\", \"CTS interrupt enable\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.ctse = Field(\"ctse\", \"CTS enable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.rtse = Field(\"rtse\", \"RTS enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.dmat = Field(\"dmat\"\
    , \"DMA enable transmitter\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.dmar = Field(\"dmar\", \"DMA enable receiver\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.scen = Field(\"scen\", \"Smartcard mode enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.nack = Field(\"nack\"\
    , \"Smartcard NACK enable\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.hdsel = Field(\"hdsel\", \"Half-duplex selection\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.irlp = Field(\"irlp\", \"IrDA low-power\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.iren = Field(\"iren\", \"IrDA mode enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.eie = Field(\"eie\", \"\
    Error interrupt enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ GtprRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"GTPR\", \"Guard time and prescaler\n              register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.gt =\
    \ Field(\"gt\", \"Guard time value\", self._address, 8, 0x00FF, 8, proxy)\n  \
    \          self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    usart2\", \"Universal synchronous asynchronous receiver\n      transmitter\",\
    \ 0x40004400)\n        self.sr = self.SrRegister(self.address, proxy)\n      \
    \  self.dr = self.DrRegister(self.address, proxy)\n        self.brr = self.BrrRegister(self.address,\
    \ proxy)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2\
    \ = self.Cr2Register(self.address, proxy)\n        self.cr3 = self.Cr3Register(self.address,\
    \ proxy)\n        self.gtpr = self.GtprRegister(self.address, proxy)\n"
  name: USART2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Usart3(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0000, 32,\
    \ \"\", 0xC00000, proxy)\n            self.cts = Field(\"cts\", \"CTS flag\",\
    \ self._address, 9, 0x0001, 1, proxy)\n            self.lbd = Field(\"lbd\", \"\
    LIN break detection flag\", self._address, 8, 0x0001, 1, proxy)\n            self.txe\
    \ = Field(\"txe\", \"Transmit data register\n                          empty\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.tc = Field(\"tc\", \"\
    Transmission complete\", self._address, 6, 0x0001, 1, proxy)\n            self.rxne\
    \ = Field(\"rxne\", \"Read data register not\n                          empty\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.idle = Field(\"idle\"\
    , \"IDLE line detected\", self._address, 4, 0x0001, 1, proxy)\n            self.ore\
    \ = Field(\"ore\", \"Overrun error\", self._address, 3, 0x0001, 1, proxy)\n  \
    \          self.nf = Field(\"nf\", \"Noise detected flag\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.fe = Field(\"fe\", \"Framing error\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.pe = Field(\"pe\", \"Parity error\",\
    \ self._address, 0, 0x0001, 1, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"Data register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dr = Field(\"dr\", \"Data value\", self._address, 0, 0x01FF,\
    \ 9, proxy)\n    \n    class BrrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BRR\", \"Baud rate register\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.div_mantissa\
    \ = Field(\"div_mantissa\", \"mantissa of USARTDIV\", self._address, 4, 0x0FFF,\
    \ 12, proxy)\n            self.div_fraction = Field(\"div_fraction\", \"fraction\
    \ of USARTDIV\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR1\", \"Control register 1\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.over8 = Field(\"over8\", \"Oversampling mode\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.ue = Field(\"ue\", \"USART enable\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.m = Field(\"m\", \"Word\
    \ length\", self._address, 12, 0x0001, 1, proxy)\n            self.wake = Field(\"\
    wake\", \"Wakeup method\", self._address, 11, 0x0001, 1, proxy)\n            self.pce\
    \ = Field(\"pce\", \"Parity control enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ps = Field(\"ps\", \"Parity selection\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.peie = Field(\"peie\", \"PE interrupt enable\",\
    \ self._address, 8, 0x0001, 1, proxy)\n            self.txeie = Field(\"txeie\"\
    , \"TXE interrupt enable\", self._address, 7, 0x0001, 1, proxy)\n            self.tcie\
    \ = Field(\"tcie\", \"Transmission complete interrupt\n                      \
    \    enable\", self._address, 6, 0x0001, 1, proxy)\n            self.rxneie =\
    \ Field(\"rxneie\", \"RXNE interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.idleie = Field(\"idleie\", \"IDLE interrupt enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.te = Field(\"te\", \"Transmitter enable\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.re = Field(\"re\", \"\
    Receiver enable\", self._address, 2, 0x0001, 1, proxy)\n            self.rwu =\
    \ Field(\"rwu\", \"Receiver wakeup\", self._address, 1, 0x0001, 1, proxy)\n  \
    \          self.sbk = Field(\"sbk\", \"Send break\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.linen\
    \ = Field(\"linen\", \"LIN mode enable\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.stop = Field(\"stop\", \"STOP bits\", self._address, 12, 0x0003,\
    \ 2, proxy)\n            self.clken = Field(\"clken\", \"Clock enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cpol = Field(\"cpol\", \"Clock polarity\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cpha = Field(\"cpha\"\
    , \"Clock phase\", self._address, 9, 0x0001, 1, proxy)\n            self.lbcl\
    \ = Field(\"lbcl\", \"Last bit clock pulse\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.lbdie = Field(\"lbdie\", \"LIN break detection interrupt\n \
    \                         enable\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.lbdl = Field(\"lbdl\", \"lin break detection length\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.add = Field(\"add\", \"Address of the\
    \ USART node\", self._address, 0, 0x000F, 4, proxy)\n    \n    class Cr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR3\", \"Control register 3\", address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.onebit = Field(\"onebit\", \"One sample bit method\n       \
    \                   enable\", self._address, 11, 0x0001, 1, proxy)\n         \
    \   self.ctsie = Field(\"ctsie\", \"CTS interrupt enable\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.ctse = Field(\"ctse\", \"CTS enable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.rtse = Field(\"rtse\", \"RTS enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.dmat = Field(\"dmat\"\
    , \"DMA enable transmitter\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.dmar = Field(\"dmar\", \"DMA enable receiver\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.scen = Field(\"scen\", \"Smartcard mode enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.nack = Field(\"nack\"\
    , \"Smartcard NACK enable\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.hdsel = Field(\"hdsel\", \"Half-duplex selection\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.irlp = Field(\"irlp\", \"IrDA low-power\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.iren = Field(\"iren\", \"IrDA mode enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.eie = Field(\"eie\", \"\
    Error interrupt enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ GtprRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"GTPR\", \"Guard time and prescaler\n              register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.gt =\
    \ Field(\"gt\", \"Guard time value\", self._address, 8, 0x00FF, 8, proxy)\n  \
    \          self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    usart3\", \"Universal synchronous asynchronous receiver\n      transmitter\",\
    \ 0x40004800)\n        self.sr = self.SrRegister(self.address, proxy)\n      \
    \  self.dr = self.DrRegister(self.address, proxy)\n        self.brr = self.BrrRegister(self.address,\
    \ proxy)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2\
    \ = self.Cr2Register(self.address, proxy)\n        self.cr3 = self.Cr3Register(self.address,\
    \ proxy)\n        self.gtpr = self.GtprRegister(self.address, proxy)\n"
  name: USART3
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Dac(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"control register\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.dmaudrie2 = Field(\"dmaudrie2\"\
    , \"DAC channel2 DMA underrun interrupt\n                          enable\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.dmaen2 = Field(\"dmaen2\", \"DAC channel2\
    \ DMA enable\", self._address, 28, 0x0001, 1, proxy)\n            self.mamp2 =\
    \ Field(\"mamp2\", \"DAC channel2 mask/amplitude\n                          selector\"\
    , self._address, 24, 0x000F, 4, proxy)\n            self.wave2 = Field(\"wave2\"\
    , \"DAC channel2 noise/triangle wave\n                          generation enable\"\
    , self._address, 22, 0x0003, 2, proxy)\n            self.tsel2 = Field(\"tsel2\"\
    , \"DAC channel2 trigger\n                          selection\", self._address,\
    \ 19, 0x0007, 3, proxy)\n            self.ten2 = Field(\"ten2\", \"DAC channel2\
    \ trigger\n                          enable\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.boff2 = Field(\"boff2\", \"DAC channel2 output buffer\n    \
    \                      disable\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.en2 = Field(\"en2\", \"DAC channel2 enable\", self._address, 16,\
    \ 0x0001, 1, proxy)\n            self.dmaudrie1 = Field(\"dmaudrie1\", \"DAC channel1\
    \ DMA Underrun Interrupt\n                          enable\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.dmaen1 = Field(\"dmaen1\", \"DAC channel1\
    \ DMA enable\", self._address, 12, 0x0001, 1, proxy)\n            self.mamp1 =\
    \ Field(\"mamp1\", \"DAC channel1 mask/amplitude\n                          selector\"\
    , self._address, 8, 0x000F, 4, proxy)\n            self.wave1 = Field(\"wave1\"\
    , \"DAC channel1 noise/triangle wave\n                          generation enable\"\
    , self._address, 6, 0x0003, 2, proxy)\n            self.tsel1 = Field(\"tsel1\"\
    , \"DAC channel1 trigger\n                          selection\", self._address,\
    \ 3, 0x0007, 3, proxy)\n            self.ten1 = Field(\"ten1\", \"DAC channel1\
    \ trigger\n                          enable\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.boff1 = Field(\"boff1\", \"DAC channel1 output buffer\n    \
    \                      disable\", self._address, 1, 0x0001, 1, proxy)\n      \
    \      self.en1 = Field(\"en1\", \"DAC channel1 enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class SwtrigrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SWTRIGR\", \"software trigger\
    \ register\", address + 0x0004, 32, \"write-only\", 0x0000, proxy)\n         \
    \   self.swtrig2 = Field(\"swtrig2\", \"DAC channel2 software\n              \
    \            trigger\", self._address, 1, 0x0001, 1, proxy)\n            self.swtrig1\
    \ = Field(\"swtrig1\", \"DAC channel1 software\n                          trigger\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class Dhr12r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR12R1\", \"channel1 12-bit right-aligned data holding\n              register\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.dacc1dhr\
    \ = Field(\"dacc1dhr\", \"DAC channel1 12-bit right-aligned\n                \
    \          data\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Dhr12l1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR12L1\", \"channel1 12-bit left aligned data holding\n              register\"\
    , address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.dacc1dhr\
    \ = Field(\"dacc1dhr\", \"DAC channel1 12-bit left-aligned\n                 \
    \         data\", self._address, 4, 0x0FFF, 12, proxy)\n    \n    class Dhr8r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR8R1\", \"channel1 8-bit right aligned data holding\n              register\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.dacc1dhr\
    \ = Field(\"dacc1dhr\", \"DAC channel1 8-bit right-aligned\n                 \
    \         data\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Dhr12r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR12R2\", \"channel2 12-bit right aligned data holding\n              register\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.dacc2dhr\
    \ = Field(\"dacc2dhr\", \"DAC channel2 12-bit right-aligned\n                \
    \          data\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Dhr12l2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR12L2\", \"channel2 12-bit left aligned data holding\n              register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.dacc2dhr\
    \ = Field(\"dacc2dhr\", \"DAC channel2 12-bit left-aligned\n                 \
    \         data\", self._address, 4, 0x0FFF, 12, proxy)\n    \n    class Dhr8r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR8R2\", \"channel2 8-bit right-aligned data holding\n              register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.dacc2dhr\
    \ = Field(\"dacc2dhr\", \"DAC channel2 8-bit right-aligned\n                 \
    \         data\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Dhr12rdRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR12RD\", \"Dual DAC 12-bit right-aligned data holding\n              register\"\
    , address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n            self.dacc2dhr\
    \ = Field(\"dacc2dhr\", \"DAC channel2 12-bit right-aligned\n                \
    \          data\", self._address, 16, 0x0FFF, 12, proxy)\n            self.dacc1dhr\
    \ = Field(\"dacc1dhr\", \"DAC channel1 12-bit right-aligned\n                \
    \          data\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Dhr12ldRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR12LD\", \"DUAL DAC 12-bit left aligned data holding\n              register\"\
    , address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n            self.dacc2dhr\
    \ = Field(\"dacc2dhr\", \"DAC channel2 12-bit left-aligned\n                 \
    \         data\", self._address, 20, 0x0FFF, 12, proxy)\n            self.dacc1dhr\
    \ = Field(\"dacc1dhr\", \"DAC channel1 12-bit left-aligned\n                 \
    \         data\", self._address, 4, 0x0FFF, 12, proxy)\n    \n    class Dhr8rdRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DHR8RD\", \"DUAL DAC 8-bit right aligned data holding\n              register\"\
    , address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.dacc2dhr\
    \ = Field(\"dacc2dhr\", \"DAC channel2 8-bit right-aligned\n                 \
    \         data\", self._address, 8, 0x00FF, 8, proxy)\n            self.dacc1dhr\
    \ = Field(\"dacc1dhr\", \"DAC channel1 8-bit right-aligned\n                 \
    \         data\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Dor1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOR1\", \"channel1 data output register\", address + 0x002C, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.dacc1dor = Field(\"dacc1dor\", \"DAC channel1\
    \ data output\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class Dor2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOR2\", \"channel2 data output register\", address + 0x0030, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.dacc2dor = Field(\"dacc2dor\", \"DAC channel2\
    \ data output\", self._address, 0, 0x0FFF, 12, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"status register\", address + 0x0034, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.dmaudr2 = Field(\"dmaudr2\", \"DAC channel2 DMA underrun\n \
    \                         flag\", self._address, 29, 0x0001, 1, proxy)\n     \
    \       self.dmaudr1 = Field(\"dmaudr1\", \"DAC channel1 DMA underrun\n      \
    \                    flag\", self._address, 13, 0x0001, 1, proxy)\n    \n    def\
    \ __init__(self, proxy):\n        super().__init__(\"dac\", \"Digital-to-analog\
    \ converter\", 0x40007400)\n        self.cr = self.CrRegister(self.address, proxy)\n\
    \        self.swtrigr = self.SwtrigrRegister(self.address, proxy)\n        self.dhr12r1\
    \ = self.Dhr12r1Register(self.address, proxy)\n        self.dhr12l1 = self.Dhr12l1Register(self.address,\
    \ proxy)\n        self.dhr8r1 = self.Dhr8r1Register(self.address, proxy)\n   \
    \     self.dhr12r2 = self.Dhr12r2Register(self.address, proxy)\n        self.dhr12l2\
    \ = self.Dhr12l2Register(self.address, proxy)\n        self.dhr8r2 = self.Dhr8r2Register(self.address,\
    \ proxy)\n        self.dhr12rd = self.Dhr12rdRegister(self.address, proxy)\n \
    \       self.dhr12ld = self.Dhr12ldRegister(self.address, proxy)\n        self.dhr8rd\
    \ = self.Dhr8rdRegister(self.address, proxy)\n        self.dor1 = self.Dor1Register(self.address,\
    \ proxy)\n        self.dor2 = self.Dor2Register(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n"
  name: DAC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Fmpi2c(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"Control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.pecen = Field(\"pecen\"\
    , \"PEC enable\", self._address, 23, 0x0001, 1, proxy)\n            self.alerten\
    \ = Field(\"alerten\", \"SMBus alert enable\", self._address, 22, 0x0001, 1, proxy)\n\
    \            self.smbden = Field(\"smbden\", \"SMBus Device Default address\n\
    \                          enable\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.smbhen = Field(\"smbhen\", \"SMBus Host address enable\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.gcen = Field(\"gcen\", \"General call\
    \ enable\", self._address, 19, 0x0001, 1, proxy)\n            self.nostretch =\
    \ Field(\"nostretch\", \"Clock stretching disable\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.sbc = Field(\"sbc\", \"Slave byte control\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.rxdmaen = Field(\"rxdmaen\", \"DMA reception\
    \ requests\n                          enable\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.txdmaen = Field(\"txdmaen\", \"DMA transmission requests\n\
    \                          enable\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.anfoff = Field(\"anfoff\", \"Analog noise filter OFF\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.dnf = Field(\"dnf\", \"Digital noise\
    \ filter\", self._address, 8, 0x000F, 4, proxy)\n            self.errie = Field(\"\
    errie\", \"Error interrupts enable\", self._address, 7, 0x0001, 1, proxy)\n  \
    \          self.tcie = Field(\"tcie\", \"Transfer Complete interrupt\n       \
    \                   enable\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.stopie = Field(\"stopie\", \"STOP detection Interrupt\n              \
    \            enable\", self._address, 5, 0x0001, 1, proxy)\n            self.nackie\
    \ = Field(\"nackie\", \"Not acknowledge received Interrupt\n                 \
    \         enable\", self._address, 4, 0x0001, 1, proxy)\n            self.addrie\
    \ = Field(\"addrie\", \"Address match Interrupt enable (slave\n              \
    \            only)\", self._address, 3, 0x0001, 1, proxy)\n            self.rxie\
    \ = Field(\"rxie\", \"RX Interrupt enable\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.txie = Field(\"txie\", \"TX Interrupt enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.pe = Field(\"pe\", \"Peripheral enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class Cr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR2\", \"Control register 1\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.sadd0 = Field(\"sadd0\", \"Slave address bit 0 (master\n   \
    \                       mode)\", self._address, 0, 0x0001, 1, proxy)\n       \
    \     self.sadd7_1 = Field(\"sadd7_1\", \"Slave address bit 7:1 (master\n    \
    \                      mode)\", self._address, 1, 0x007F, 7, proxy)\n        \
    \    self.sadd9_8 = Field(\"sadd9_8\", \"Slave address bit 9:8 (master\n     \
    \                     mode)\", self._address, 8, 0x0003, 2, proxy)\n         \
    \   self.rd_wrn = Field(\"rd_wrn\", \"Transfer direction (master\n           \
    \               mode)\", self._address, 10, 0x0001, 1, proxy)\n            self.add10\
    \ = Field(\"add10\", \"10-bit addressing mode (master\n                      \
    \    mode)\", self._address, 11, 0x0001, 1, proxy)\n            self.head10r =\
    \ Field(\"head10r\", \"10-bit address header only read\n                     \
    \     direction (master receiver mode)\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.start = Field(\"start\", \"Start generation\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.stop = Field(\"stop\", \"Stop generation\
    \ (master\n                          mode)\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.nack = Field(\"nack\", \"NACK generation (slave\n          \
    \                mode)\", self._address, 15, 0x0001, 1, proxy)\n            self.nbytes\
    \ = Field(\"nbytes\", \"Number of bytes\", self._address, 16, 0x00FF, 8, proxy)\n\
    \            self.reload = Field(\"reload\", \"NBYTES reload mode\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.autoend = Field(\"autoend\", \"Automatic\
    \ end mode (master\n                          mode)\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.pecbyte = Field(\"pecbyte\", \"Packet error checking\
    \ byte\", self._address, 26, 0x0001, 1, proxy)\n    \n    class Oar1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OAR1\", \"Own address 1 register\", address + 0x0008, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.oa1_0 = Field(\"oa1_0\", \"Interface address\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.oa1_7_1 = Field(\"oa1_7_1\", \"Interface\
    \ address\", self._address, 1, 0x007F, 7, proxy)\n            self.oa1_9_8 = Field(\"\
    oa1_9_8\", \"Interface address\", self._address, 8, 0x0003, 2, proxy)\n      \
    \      self.oa1mode = Field(\"oa1mode\", \"Own Address 1 10-bit mode\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.oa1en = Field(\"oa1en\", \"Own Address\
    \ 1 enable\", self._address, 15, 0x0001, 1, proxy)\n    \n    class Oar2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OAR2\", \"Own address 2 register\", address + 0x000C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.oa2 = Field(\"oa2\", \"Interface address\", self._address,\
    \ 1, 0x007F, 7, proxy)\n            self.oa2msk = Field(\"oa2msk\", \"Own Address\
    \ 2 masks\", self._address, 8, 0x0007, 3, proxy)\n            self.oa2en = Field(\"\
    oa2en\", \"Own Address 2 enable\", self._address, 15, 0x0001, 1, proxy)\n    \n\
    \    class TimingrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"TIMINGR\", \"Timing register\", address + 0x0010,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.scll = Field(\"scll\",\
    \ \"SCL low period (master\n                          mode)\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.sclh = Field(\"sclh\", \"SCL high period\
    \ (master\n                          mode)\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.sdadel = Field(\"sdadel\", \"Data hold time\", self._address,\
    \ 16, 0x000F, 4, proxy)\n            self.scldel = Field(\"scldel\", \"Data setup\
    \ time\", self._address, 20, 0x000F, 4, proxy)\n            self.presc = Field(\"\
    presc\", \"Timing prescaler\", self._address, 28, 0x000F, 4, proxy)\n    \n  \
    \  class TimeoutrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"TIMEOUTR\", \"Timeout register\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.timeouta = Field(\"timeouta\"\
    , \"Bus Timeout A\", self._address, 0, 0x0FFF, 12, proxy)\n            self.tidle\
    \ = Field(\"tidle\", \"Idle clock timeout\n                          detection\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.timouten = Field(\"timouten\"\
    , \"Clock timeout enable\", self._address, 15, 0x0001, 1, proxy)\n           \
    \ self.timeoutb = Field(\"timeoutb\", \"Bus timeout B\", self._address, 16, 0x0FFF,\
    \ 12, proxy)\n            self.texten = Field(\"texten\", \"Extended clock timeout\n\
    \                          enable\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class IsrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ISR\", \"Interrupt and status register\", address\
    \ + 0x0018, 32, \"read-only\", 0x0001, proxy)\n            self.txe = Field(\"\
    txe\", \"Transmit data register empty\n                          (transmitters)\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.txis = Field(\"txis\"\
    , \"Transmit interrupt status\n                          (transmitters)\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rxne = Field(\"rxne\", \"Receive data\
    \ register not empty\n                          (receivers)\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.addr = Field(\"addr\", \"Address matched\
    \ (slave\n                          mode)\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.nackf = Field(\"nackf\", \"Not Acknowledge received\n      \
    \                    flag\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.stopf = Field(\"stopf\", \"Stop detection flag\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.tc = Field(\"tc\", \"Transfer Complete (master\n\
    \                          mode)\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.tcr = Field(\"tcr\", \"Transfer Complete Reload\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.berr = Field(\"berr\", \"Bus error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.arlo = Field(\"arlo\"\
    , \"Arbitration lost\", self._address, 9, 0x0001, 1, proxy)\n            self.ovr\
    \ = Field(\"ovr\", \"Overrun/Underrun (slave\n                          mode)\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.pecerr = Field(\"pecerr\"\
    , \"PEC Error in reception\", self._address, 11, 0x0001, 1, proxy)\n         \
    \   self.timeout = Field(\"timeout\", \"Timeout or tLOW detection\n          \
    \                flag\", self._address, 12, 0x0001, 1, proxy)\n            self.alert\
    \ = Field(\"alert\", \"SMBus alert\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.busy = Field(\"busy\", \"Bus busy\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.dir = Field(\"dir\", \"Transfer direction (Slave\n\
    \                          mode)\", self._address, 16, 0x0001, 1, proxy)\n   \
    \         self.addcode = Field(\"addcode\", \"Address match code (Slave\n    \
    \                      mode)\", self._address, 17, 0x007F, 7, proxy)\n    \n \
    \   class IcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ICR\", \"Interrupt clear register\", address +\
    \ 0x001C, 32, \"write-only\", 0x0000, proxy)\n            self.addrcf = Field(\"\
    addrcf\", \"Address matched flag clear\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.nackcf = Field(\"nackcf\", \"Not Acknowledge flag clear\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.stopcf = Field(\"stopcf\", \"Stop detection\
    \ flag clear\", self._address, 5, 0x0001, 1, proxy)\n            self.berrcf =\
    \ Field(\"berrcf\", \"Bus error flag clear\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.arlocf = Field(\"arlocf\", \"Arbitration Lost flag\n       \
    \                   clear\", self._address, 9, 0x0001, 1, proxy)\n           \
    \ self.ovrcf = Field(\"ovrcf\", \"Overrun/Underrun flag\n                    \
    \      clear\", self._address, 10, 0x0001, 1, proxy)\n            self.peccf =\
    \ Field(\"peccf\", \"PEC Error flag clear\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.timoutcf = Field(\"timoutcf\", \"Timeout detection flag\n  \
    \                        clear\", self._address, 12, 0x0001, 1, proxy)\n     \
    \       self.alertcf = Field(\"alertcf\", \"Alert flag clear\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class PecrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"PECR\", \"PEC\
    \ register\", address + 0x0020, 32, \"read-only\", 0x0000, proxy)\n          \
    \  self.pec = Field(\"pec\", \"Packet error checking\n                       \
    \   register\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class RxdrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RXDR\", \"Receive data register\", address + 0x0024, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.rxdata = Field(\"rxdata\", \"8-bit receive data\",\
    \ self._address, 0, 0x00FF, 8, proxy)\n    \n    class TxdrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    TXDR\", \"Transmit data register\", address + 0x0028, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.txdata = Field(\"txdata\", \"8-bit transmit data\"\
    , self._address, 0, 0x00FF, 8, proxy)\n    \n    def __init__(self, proxy):\n\
    \        super().__init__(\"fmpi2c\", \"Fast-mode Plus Inter-integrated circuit\n\
    \      interface\", 0x40006000)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.oar1\
    \ = self.Oar1Register(self.address, proxy)\n        self.oar2 = self.Oar2Register(self.address,\
    \ proxy)\n        self.timingr = self.TimingrRegister(self.address, proxy)\n \
    \       self.timeoutr = self.TimeoutrRegister(self.address, proxy)\n        self.isr\
    \ = self.IsrRegister(self.address, proxy)\n        self.icr = self.IcrRegister(self.address,\
    \ proxy)\n        self.pecr = self.PecrRegister(self.address, proxy)\n       \
    \ self.rxdr = self.RxdrRegister(self.address, proxy)\n        self.txdr = self.TxdrRegister(self.address,\
    \ proxy)\n"
  name: FMPI2C
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass I2c3(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"Control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.swrst = Field(\"swrst\"\
    , \"Software reset\", self._address, 15, 0x0001, 1, proxy)\n            self.alert\
    \ = Field(\"alert\", \"SMBus alert\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.pec = Field(\"pec\", \"Packet error checking\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.pos = Field(\"pos\", \"Acknowledge/PEC\
    \ Position (for data\n                          reception)\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"Acknowledge enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.stop = Field(\"stop\"\
    , \"Stop generation\", self._address, 9, 0x0001, 1, proxy)\n            self.start\
    \ = Field(\"start\", \"Start generation\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.nostretch = Field(\"nostretch\", \"Clock stretching disable\
    \ (Slave\n                          mode)\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.engc = Field(\"engc\", \"General call enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.enpec = Field(\"enpec\", \"PEC enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.enarp = Field(\"enarp\"\
    , \"ARP enable\", self._address, 4, 0x0001, 1, proxy)\n            self.smbtype\
    \ = Field(\"smbtype\", \"SMBus type\", self._address, 3, 0x0001, 1, proxy)\n \
    \           self.smbus = Field(\"smbus\", \"SMBus mode\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.pe = Field(\"pe\", \"Peripheral enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.last\
    \ = Field(\"last\", \"DMA last transfer\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.dmaen = Field(\"dmaen\", \"DMA requests enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.itbufen = Field(\"itbufen\", \"Buffer\
    \ interrupt enable\", self._address, 10, 0x0001, 1, proxy)\n            self.itevten\
    \ = Field(\"itevten\", \"Event interrupt enable\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.iterren = Field(\"iterren\", \"Error interrupt enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\"\
    , \"Peripheral clock frequency\", self._address, 0, 0x003F, 6, proxy)\n    \n\
    \    class Oar1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OAR1\", \"Own address register 1\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.addmode = Field(\"\
    addmode\", \"Addressing mode (slave\n                          mode)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.add10 = Field(\"add10\", \"Interface\
    \ address\", self._address, 8, 0x0003, 2, proxy)\n            self.add7 = Field(\"\
    add7\", \"Interface address\", self._address, 1, 0x007F, 7, proxy)\n         \
    \   self.add0 = Field(\"add0\", \"Interface address\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Oar2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OAR2\", \"Own address register\
    \ 2\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.add2\
    \ = Field(\"add2\", \"Interface address\", self._address, 1, 0x007F, 7, proxy)\n\
    \            self.endual = Field(\"endual\", \"Dual addressing mode\n        \
    \                  enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ DrRegister(Register):\n        def __init__(self, address, proxy):\n       \
    \     super().__init__(\"DR\", \"Data register\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dr = Field(\"dr\", \"8-bit data register\"\
    , self._address, 0, 0x00FF, 8, proxy)\n    \n    class Sr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR1\", \"Status register 1\", address + 0x0014, 32, \"\", 0x0000, proxy)\n   \
    \         self.smbalert = Field(\"smbalert\", \"SMBus alert\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.timeout = Field(\"timeout\", \"Timeout\
    \ or Tlow error\", self._address, 14, 0x0001, 1, proxy)\n            self.pecerr\
    \ = Field(\"pecerr\", \"PEC Error in reception\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ovr = Field(\"ovr\", \"Overrun/Underrun\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.af = Field(\"af\", \"Acknowledge failure\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.arlo = Field(\"arlo\"\
    , \"Arbitration lost (master\n                          mode)\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.berr = Field(\"berr\", \"Bus error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"\
    Data register empty\n                          (transmitters)\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxne = Field(\"rxne\", \"Data register\
    \ not empty\n                          (receivers)\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.stopf = Field(\"stopf\", \"Stop detection (slave\n\
    \                          mode)\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.add10 = Field(\"add10\", \"10-bit header sent (Master\n        \
    \                  mode)\", self._address, 3, 0x0001, 1, proxy)\n            self.btf\
    \ = Field(\"btf\", \"Byte transfer finished\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.addr = Field(\"addr\", \"Address sent (master mode)/matched\n\
    \                          (slave mode)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.sb = Field(\"sb\", \"Start bit (Master mode)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Sr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR2\", \"Status register 2\"\
    , address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n            self.pec =\
    \ Field(\"pec\", \"acket error checking\n                          register\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.dualf = Field(\"dualf\"\
    , \"Dual flag (Slave mode)\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.smbhost = Field(\"smbhost\", \"SMBus host header (Slave\n            \
    \              mode)\", self._address, 6, 0x0001, 1, proxy)\n            self.smbdefault\
    \ = Field(\"smbdefault\", \"SMBus device default address (Slave\n            \
    \              mode)\", self._address, 5, 0x0001, 1, proxy)\n            self.gencall\
    \ = Field(\"gencall\", \"General call address (Slave\n                       \
    \   mode)\", self._address, 4, 0x0001, 1, proxy)\n            self.tra = Field(\"\
    tra\", \"Transmitter/receiver\", self._address, 2, 0x0001, 1, proxy)\n       \
    \     self.busy = Field(\"busy\", \"Bus busy\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.msl = Field(\"msl\", \"Master/slave\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class CcrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCR\", \"Clock control register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.f_s =\
    \ Field(\"f_s\", \"I2C master mode selection\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.duty = Field(\"duty\", \"Fast mode duty cycle\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.ccr = Field(\"ccr\", \"Clock control\
    \ register in Fast/Standard\n                          mode (Master mode)\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class TriseRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TRISE\", \"\
    TRISE register\", address + 0x0020, 32, \"read-write\", 0x0002, proxy)\n     \
    \       self.trise = Field(\"trise\", \"Maximum rise time in Fast/Standard mode\n\
    \                          (Master mode)\", self._address, 0, 0x003F, 6, proxy)\n\
    \    \n    class FltrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FLTR\", \"I2C FLTR register\", address\
    \ + 0x0024, 32, \"read-write\", 0x0000, proxy)\n            self.dnf = Field(\"\
    dnf\", \"Digital noise filter\", self._address, 0, 0x000F, 4, proxy)\n       \
    \     self.anoff = Field(\"anoff\", \"Analog noise filter OFF\", self._address,\
    \ 4, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    i2c3\", \"Inter-integrated circuit\", 0x40005C00)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.oar1\
    \ = self.Oar1Register(self.address, proxy)\n        self.oar2 = self.Oar2Register(self.address,\
    \ proxy)\n        self.dr = self.DrRegister(self.address, proxy)\n        self.sr1\
    \ = self.Sr1Register(self.address, proxy)\n        self.sr2 = self.Sr2Register(self.address,\
    \ proxy)\n        self.ccr = self.CcrRegister(self.address, proxy)\n        self.trise\
    \ = self.TriseRegister(self.address, proxy)\n        self.fltr = self.FltrRegister(self.address,\
    \ proxy)\n"
  name: I2C3
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass I2c2(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"Control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.swrst = Field(\"swrst\"\
    , \"Software reset\", self._address, 15, 0x0001, 1, proxy)\n            self.alert\
    \ = Field(\"alert\", \"SMBus alert\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.pec = Field(\"pec\", \"Packet error checking\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.pos = Field(\"pos\", \"Acknowledge/PEC\
    \ Position (for data\n                          reception)\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"Acknowledge enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.stop = Field(\"stop\"\
    , \"Stop generation\", self._address, 9, 0x0001, 1, proxy)\n            self.start\
    \ = Field(\"start\", \"Start generation\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.nostretch = Field(\"nostretch\", \"Clock stretching disable\
    \ (Slave\n                          mode)\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.engc = Field(\"engc\", \"General call enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.enpec = Field(\"enpec\", \"PEC enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.enarp = Field(\"enarp\"\
    , \"ARP enable\", self._address, 4, 0x0001, 1, proxy)\n            self.smbtype\
    \ = Field(\"smbtype\", \"SMBus type\", self._address, 3, 0x0001, 1, proxy)\n \
    \           self.smbus = Field(\"smbus\", \"SMBus mode\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.pe = Field(\"pe\", \"Peripheral enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.last\
    \ = Field(\"last\", \"DMA last transfer\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.dmaen = Field(\"dmaen\", \"DMA requests enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.itbufen = Field(\"itbufen\", \"Buffer\
    \ interrupt enable\", self._address, 10, 0x0001, 1, proxy)\n            self.itevten\
    \ = Field(\"itevten\", \"Event interrupt enable\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.iterren = Field(\"iterren\", \"Error interrupt enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\"\
    , \"Peripheral clock frequency\", self._address, 0, 0x003F, 6, proxy)\n    \n\
    \    class Oar1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OAR1\", \"Own address register 1\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.addmode = Field(\"\
    addmode\", \"Addressing mode (slave\n                          mode)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.add10 = Field(\"add10\", \"Interface\
    \ address\", self._address, 8, 0x0003, 2, proxy)\n            self.add7 = Field(\"\
    add7\", \"Interface address\", self._address, 1, 0x007F, 7, proxy)\n         \
    \   self.add0 = Field(\"add0\", \"Interface address\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Oar2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OAR2\", \"Own address register\
    \ 2\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.add2\
    \ = Field(\"add2\", \"Interface address\", self._address, 1, 0x007F, 7, proxy)\n\
    \            self.endual = Field(\"endual\", \"Dual addressing mode\n        \
    \                  enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ DrRegister(Register):\n        def __init__(self, address, proxy):\n       \
    \     super().__init__(\"DR\", \"Data register\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dr = Field(\"dr\", \"8-bit data register\"\
    , self._address, 0, 0x00FF, 8, proxy)\n    \n    class Sr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR1\", \"Status register 1\", address + 0x0014, 32, \"\", 0x0000, proxy)\n   \
    \         self.smbalert = Field(\"smbalert\", \"SMBus alert\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.timeout = Field(\"timeout\", \"Timeout\
    \ or Tlow error\", self._address, 14, 0x0001, 1, proxy)\n            self.pecerr\
    \ = Field(\"pecerr\", \"PEC Error in reception\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ovr = Field(\"ovr\", \"Overrun/Underrun\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.af = Field(\"af\", \"Acknowledge failure\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.arlo = Field(\"arlo\"\
    , \"Arbitration lost (master\n                          mode)\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.berr = Field(\"berr\", \"Bus error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"\
    Data register empty\n                          (transmitters)\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxne = Field(\"rxne\", \"Data register\
    \ not empty\n                          (receivers)\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.stopf = Field(\"stopf\", \"Stop detection (slave\n\
    \                          mode)\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.add10 = Field(\"add10\", \"10-bit header sent (Master\n        \
    \                  mode)\", self._address, 3, 0x0001, 1, proxy)\n            self.btf\
    \ = Field(\"btf\", \"Byte transfer finished\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.addr = Field(\"addr\", \"Address sent (master mode)/matched\n\
    \                          (slave mode)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.sb = Field(\"sb\", \"Start bit (Master mode)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Sr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR2\", \"Status register 2\"\
    , address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n            self.pec =\
    \ Field(\"pec\", \"acket error checking\n                          register\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.dualf = Field(\"dualf\"\
    , \"Dual flag (Slave mode)\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.smbhost = Field(\"smbhost\", \"SMBus host header (Slave\n            \
    \              mode)\", self._address, 6, 0x0001, 1, proxy)\n            self.smbdefault\
    \ = Field(\"smbdefault\", \"SMBus device default address (Slave\n            \
    \              mode)\", self._address, 5, 0x0001, 1, proxy)\n            self.gencall\
    \ = Field(\"gencall\", \"General call address (Slave\n                       \
    \   mode)\", self._address, 4, 0x0001, 1, proxy)\n            self.tra = Field(\"\
    tra\", \"Transmitter/receiver\", self._address, 2, 0x0001, 1, proxy)\n       \
    \     self.busy = Field(\"busy\", \"Bus busy\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.msl = Field(\"msl\", \"Master/slave\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class CcrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCR\", \"Clock control register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.f_s =\
    \ Field(\"f_s\", \"I2C master mode selection\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.duty = Field(\"duty\", \"Fast mode duty cycle\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.ccr = Field(\"ccr\", \"Clock control\
    \ register in Fast/Standard\n                          mode (Master mode)\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class TriseRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TRISE\", \"\
    TRISE register\", address + 0x0020, 32, \"read-write\", 0x0002, proxy)\n     \
    \       self.trise = Field(\"trise\", \"Maximum rise time in Fast/Standard mode\n\
    \                          (Master mode)\", self._address, 0, 0x003F, 6, proxy)\n\
    \    \n    class FltrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FLTR\", \"I2C FLTR register\", address\
    \ + 0x0024, 32, \"read-write\", 0x0000, proxy)\n            self.dnf = Field(\"\
    dnf\", \"Digital noise filter\", self._address, 0, 0x000F, 4, proxy)\n       \
    \     self.anoff = Field(\"anoff\", \"Analog noise filter OFF\", self._address,\
    \ 4, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    i2c2\", \"Inter-integrated circuit\", 0x40005800)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.oar1\
    \ = self.Oar1Register(self.address, proxy)\n        self.oar2 = self.Oar2Register(self.address,\
    \ proxy)\n        self.dr = self.DrRegister(self.address, proxy)\n        self.sr1\
    \ = self.Sr1Register(self.address, proxy)\n        self.sr2 = self.Sr2Register(self.address,\
    \ proxy)\n        self.ccr = self.CcrRegister(self.address, proxy)\n        self.trise\
    \ = self.TriseRegister(self.address, proxy)\n        self.fltr = self.FltrRegister(self.address,\
    \ proxy)\n"
  name: I2C2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass I2c1(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"Control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.swrst = Field(\"swrst\"\
    , \"Software reset\", self._address, 15, 0x0001, 1, proxy)\n            self.alert\
    \ = Field(\"alert\", \"SMBus alert\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.pec = Field(\"pec\", \"Packet error checking\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.pos = Field(\"pos\", \"Acknowledge/PEC\
    \ Position (for data\n                          reception)\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"Acknowledge enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.stop = Field(\"stop\"\
    , \"Stop generation\", self._address, 9, 0x0001, 1, proxy)\n            self.start\
    \ = Field(\"start\", \"Start generation\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.nostretch = Field(\"nostretch\", \"Clock stretching disable\
    \ (Slave\n                          mode)\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.engc = Field(\"engc\", \"General call enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.enpec = Field(\"enpec\", \"PEC enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.enarp = Field(\"enarp\"\
    , \"ARP enable\", self._address, 4, 0x0001, 1, proxy)\n            self.smbtype\
    \ = Field(\"smbtype\", \"SMBus type\", self._address, 3, 0x0001, 1, proxy)\n \
    \           self.smbus = Field(\"smbus\", \"SMBus mode\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.pe = Field(\"pe\", \"Peripheral enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Cr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CR2\", \"Control register 2\"\
    , address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.last\
    \ = Field(\"last\", \"DMA last transfer\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.dmaen = Field(\"dmaen\", \"DMA requests enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.itbufen = Field(\"itbufen\", \"Buffer\
    \ interrupt enable\", self._address, 10, 0x0001, 1, proxy)\n            self.itevten\
    \ = Field(\"itevten\", \"Event interrupt enable\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.iterren = Field(\"iterren\", \"Error interrupt enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\"\
    , \"Peripheral clock frequency\", self._address, 0, 0x003F, 6, proxy)\n    \n\
    \    class Oar1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OAR1\", \"Own address register 1\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.addmode = Field(\"\
    addmode\", \"Addressing mode (slave\n                          mode)\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.add10 = Field(\"add10\", \"Interface\
    \ address\", self._address, 8, 0x0003, 2, proxy)\n            self.add7 = Field(\"\
    add7\", \"Interface address\", self._address, 1, 0x007F, 7, proxy)\n         \
    \   self.add0 = Field(\"add0\", \"Interface address\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Oar2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OAR2\", \"Own address register\
    \ 2\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.add2\
    \ = Field(\"add2\", \"Interface address\", self._address, 1, 0x007F, 7, proxy)\n\
    \            self.endual = Field(\"endual\", \"Dual addressing mode\n        \
    \                  enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ DrRegister(Register):\n        def __init__(self, address, proxy):\n       \
    \     super().__init__(\"DR\", \"Data register\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dr = Field(\"dr\", \"8-bit data register\"\
    , self._address, 0, 0x00FF, 8, proxy)\n    \n    class Sr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR1\", \"Status register 1\", address + 0x0014, 32, \"\", 0x0000, proxy)\n   \
    \         self.smbalert = Field(\"smbalert\", \"SMBus alert\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.timeout = Field(\"timeout\", \"Timeout\
    \ or Tlow error\", self._address, 14, 0x0001, 1, proxy)\n            self.pecerr\
    \ = Field(\"pecerr\", \"PEC Error in reception\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.ovr = Field(\"ovr\", \"Overrun/Underrun\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.af = Field(\"af\", \"Acknowledge failure\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.arlo = Field(\"arlo\"\
    , \"Arbitration lost (master\n                          mode)\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.berr = Field(\"berr\", \"Bus error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.txe = Field(\"txe\", \"\
    Data register empty\n                          (transmitters)\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxne = Field(\"rxne\", \"Data register\
    \ not empty\n                          (receivers)\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.stopf = Field(\"stopf\", \"Stop detection (slave\n\
    \                          mode)\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.add10 = Field(\"add10\", \"10-bit header sent (Master\n        \
    \                  mode)\", self._address, 3, 0x0001, 1, proxy)\n            self.btf\
    \ = Field(\"btf\", \"Byte transfer finished\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.addr = Field(\"addr\", \"Address sent (master mode)/matched\n\
    \                          (slave mode)\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.sb = Field(\"sb\", \"Start bit (Master mode)\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Sr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR2\", \"Status register 2\"\
    , address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n            self.pec =\
    \ Field(\"pec\", \"acket error checking\n                          register\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.dualf = Field(\"dualf\"\
    , \"Dual flag (Slave mode)\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.smbhost = Field(\"smbhost\", \"SMBus host header (Slave\n            \
    \              mode)\", self._address, 6, 0x0001, 1, proxy)\n            self.smbdefault\
    \ = Field(\"smbdefault\", \"SMBus device default address (Slave\n            \
    \              mode)\", self._address, 5, 0x0001, 1, proxy)\n            self.gencall\
    \ = Field(\"gencall\", \"General call address (Slave\n                       \
    \   mode)\", self._address, 4, 0x0001, 1, proxy)\n            self.tra = Field(\"\
    tra\", \"Transmitter/receiver\", self._address, 2, 0x0001, 1, proxy)\n       \
    \     self.busy = Field(\"busy\", \"Bus busy\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.msl = Field(\"msl\", \"Master/slave\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class CcrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCR\", \"Clock control register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.f_s =\
    \ Field(\"f_s\", \"I2C master mode selection\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.duty = Field(\"duty\", \"Fast mode duty cycle\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.ccr = Field(\"ccr\", \"Clock control\
    \ register in Fast/Standard\n                          mode (Master mode)\", self._address,\
    \ 0, 0x0FFF, 12, proxy)\n    \n    class TriseRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TRISE\", \"\
    TRISE register\", address + 0x0020, 32, \"read-write\", 0x0002, proxy)\n     \
    \       self.trise = Field(\"trise\", \"Maximum rise time in Fast/Standard mode\n\
    \                          (Master mode)\", self._address, 0, 0x003F, 6, proxy)\n\
    \    \n    class FltrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FLTR\", \"I2C FLTR register\", address\
    \ + 0x0024, 32, \"read-write\", 0x0000, proxy)\n            self.dnf = Field(\"\
    dnf\", \"Digital noise filter\", self._address, 0, 0x000F, 4, proxy)\n       \
    \     self.anoff = Field(\"anoff\", \"Analog noise filter OFF\", self._address,\
    \ 4, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    i2c1\", \"Inter-integrated circuit\", 0x40005400)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.oar1\
    \ = self.Oar1Register(self.address, proxy)\n        self.oar2 = self.Oar2Register(self.address,\
    \ proxy)\n        self.dr = self.DrRegister(self.address, proxy)\n        self.sr1\
    \ = self.Sr1Register(self.address, proxy)\n        self.sr2 = self.Sr2Register(self.address,\
    \ proxy)\n        self.ccr = self.CcrRegister(self.address, proxy)\n        self.trise\
    \ = self.TriseRegister(self.address, proxy)\n        self.fltr = self.FltrRegister(self.address,\
    \ proxy)\n"
  name: I2C1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Iwdg(Peripheral):\n\
    \    class KrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"KR\", \"Key register\", address + 0x0000, 32,\
    \ \"write-only\", 0x0000, proxy)\n            self.key = Field(\"key\", \"Key\
    \ value (write only, read\n                          0000h)\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class PrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PR\", \"Prescaler register\"\
    , address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.pr =\
    \ Field(\"pr\", \"Prescaler divider\", self._address, 0, 0x0007, 3, proxy)\n \
    \   \n    class RlrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RLR\", \"Reload register\", address + 0x0008,\
    \ 32, \"read-write\", 0x0FFF, proxy)\n            self.rl = Field(\"rl\", \"Watchdog\
    \ counter reload\n                          value\", self._address, 0, 0x0FFF,\
    \ 12, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"Status register\",\
    \ address + 0x000C, 32, \"read-only\", 0x0000, proxy)\n            self.rvu =\
    \ Field(\"rvu\", \"Watchdog counter reload value\n                          update\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.pvu = Field(\"pvu\", \"\
    Watchdog prescaler value\n                          update\", self._address, 0,\
    \ 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    iwdg\", \"Independent watchdog\", 0x40003000)\n        self.kr = self.KrRegister(self.address,\
    \ proxy)\n        self.pr = self.PrRegister(self.address, proxy)\n        self.rlr\
    \ = self.RlrRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n"
  name: IWDG
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Wwdg(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"Control register\", address + 0x0000,\
    \ 32, \"read-write\", 0x007F, proxy)\n            self.wdga = Field(\"wdga\",\
    \ \"Activation bit\", self._address, 7, 0x0001, 1, proxy)\n            self.t\
    \ = Field(\"t\", \"7-bit counter (MSB to LSB)\", self._address, 0, 0x007F, 7,\
    \ proxy)\n    \n    class CfrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CFR\", \"Configuration register\", address\
    \ + 0x0004, 32, \"read-write\", 0x007F, proxy)\n            self.ewi = Field(\"\
    ewi\", \"Early wakeup interrupt\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.wdgtb1 = Field(\"wdgtb1\", \"Timer base\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.wdgtb0 = Field(\"wdgtb0\", \"Timer base\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.w = Field(\"w\", \"7-bit window value\"\
    , self._address, 0, 0x007F, 7, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"Status register\", address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ewif = Field(\"ewif\", \"Early wakeup interrupt\n          \
    \                flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"wwdg\", \"Window watchdog\", 0x40002C00)\n\
    \        self.cr = self.CrRegister(self.address, proxy)\n        self.cfr = self.CfrRegister(self.address,\
    \ proxy)\n        self.sr = self.SrRegister(self.address, proxy)\n"
  name: WWDG
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Rtc(Peripheral):\n\
    \    class TrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"TR\", \"time register\", address + 0x0000, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.pm = Field(\"pm\", \"AM/PM\
    \ notation\", self._address, 22, 0x0001, 1, proxy)\n            self.ht = Field(\"\
    ht\", \"Hour tens in BCD format\", self._address, 20, 0x0003, 2, proxy)\n    \
    \        self.hu = Field(\"hu\", \"Hour units in BCD format\", self._address,\
    \ 16, 0x000F, 4, proxy)\n            self.mnt = Field(\"mnt\", \"Minute tens in\
    \ BCD format\", self._address, 12, 0x0007, 3, proxy)\n            self.mnu = Field(\"\
    mnu\", \"Minute units in BCD format\", self._address, 8, 0x000F, 4, proxy)\n \
    \           self.st = Field(\"st\", \"Second tens in BCD format\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.su = Field(\"su\", \"Second units in\
    \ BCD format\", self._address, 0, 0x000F, 4, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"date register\", address + 0x0004, 32, \"read-write\", 0x2101, proxy)\n\
    \            self.yt = Field(\"yt\", \"Year tens in BCD format\", self._address,\
    \ 20, 0x000F, 4, proxy)\n            self.yu = Field(\"yu\", \"Year units in BCD\
    \ format\", self._address, 16, 0x000F, 4, proxy)\n            self.wdu = Field(\"\
    wdu\", \"Week day units\", self._address, 13, 0x0007, 3, proxy)\n            self.mt\
    \ = Field(\"mt\", \"Month tens in BCD format\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.mu = Field(\"mu\", \"Month units in BCD format\", self._address,\
    \ 8, 0x000F, 4, proxy)\n            self.dt = Field(\"dt\", \"Date tens in BCD\
    \ format\", self._address, 4, 0x0003, 2, proxy)\n            self.du = Field(\"\
    du\", \"Date units in BCD format\", self._address, 0, 0x000F, 4, proxy)\n    \n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"control register\", address + 0x0008,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.coe = Field(\"coe\", \"\
    Calibration output enable\", self._address, 23, 0x0001, 1, proxy)\n          \
    \  self.osel = Field(\"osel\", \"Output selection\", self._address, 21, 0x0003,\
    \ 2, proxy)\n            self.pol = Field(\"pol\", \"Output polarity\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.bkp = Field(\"bkp\", \"Backup\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.sub1h = Field(\"sub1h\", \"Subtract\
    \ 1 hour (winter time\n                          change)\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.add1h = Field(\"add1h\", \"Add 1 hour (summer\
    \ time\n                          change)\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.tsie = Field(\"tsie\", \"Time-stamp interrupt\n            \
    \              enable\", self._address, 15, 0x0001, 1, proxy)\n            self.wutie\
    \ = Field(\"wutie\", \"Wakeup timer interrupt\n                          enable\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.alrbie = Field(\"alrbie\"\
    , \"Alarm B interrupt enable\", self._address, 13, 0x0001, 1, proxy)\n       \
    \     self.alraie = Field(\"alraie\", \"Alarm A interrupt enable\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.tse = Field(\"tse\", \"Time stamp enable\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.wute = Field(\"wute\"\
    , \"Wakeup timer enable\", self._address, 10, 0x0001, 1, proxy)\n            self.alrbe\
    \ = Field(\"alrbe\", \"Alarm B enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.alrae = Field(\"alrae\", \"Alarm A enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.dce = Field(\"dce\", \"Coarse digital\
    \ calibration\n                          enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.fmt = Field(\"fmt\", \"Hour format\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.refckon = Field(\"refckon\", \"Reference\
    \ clock detection enable (50 or\n                          60 Hz)\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.tsedge = Field(\"tsedge\", \"Time-stamp\
    \ event active\n                          edge\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.wcksel = Field(\"wcksel\", \"Wakeup clock selection\"\
    , self._address, 0, 0x0007, 3, proxy)\n    \n    class IsrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    ISR\", \"initialization and status\n              register\", address + 0x000C,\
    \ 32, \"\", 0x0007, proxy)\n            self.alrawf = Field(\"alrawf\", \"Alarm\
    \ A write flag\", self._address, 0, 0x0001, 1, proxy)\n            self.alrbwf\
    \ = Field(\"alrbwf\", \"Alarm B write flag\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.wutwf = Field(\"wutwf\", \"Wakeup timer write flag\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.shpf = Field(\"shpf\", \"Shift operation\
    \ pending\", self._address, 3, 0x0001, 1, proxy)\n            self.inits = Field(\"\
    inits\", \"Initialization status flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.rsf = Field(\"rsf\", \"Registers synchronization\n         \
    \                 flag\", self._address, 5, 0x0001, 1, proxy)\n            self.initf\
    \ = Field(\"initf\", \"Initialization flag\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.init = Field(\"init\", \"Initialization mode\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.alraf = Field(\"alraf\", \"Alarm A flag\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.alrbf = Field(\"alrbf\"\
    , \"Alarm B flag\", self._address, 9, 0x0001, 1, proxy)\n            self.wutf\
    \ = Field(\"wutf\", \"Wakeup timer flag\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.tsf = Field(\"tsf\", \"Time-stamp flag\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.tsovf = Field(\"tsovf\", \"Time-stamp overflow\
    \ flag\", self._address, 12, 0x0001, 1, proxy)\n            self.tamp1f = Field(\"\
    tamp1f\", \"Tamper detection flag\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.tamp2f = Field(\"tamp2f\", \"TAMPER2 detection flag\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.recalpf = Field(\"recalpf\", \"Recalibration\
    \ pending Flag\", self._address, 16, 0x0001, 1, proxy)\n    \n    class PrerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PRER\", \"prescaler register\", address + 0x0010, 32, \"read-write\", 0x7F00FF,\
    \ proxy)\n            self.prediv_a = Field(\"prediv_a\", \"Asynchronous prescaler\n\
    \                          factor\", self._address, 16, 0x007F, 7, proxy)\n  \
    \          self.prediv_s = Field(\"prediv_s\", \"Synchronous prescaler\n     \
    \                     factor\", self._address, 0, 0x7FFF, 15, proxy)\n    \n \
    \   class WutrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"WUTR\", \"wakeup timer register\", address + 0x0014,\
    \ 32, \"read-write\", 0xFFFF, proxy)\n            self.wut = Field(\"wut\", \"\
    Wakeup auto-reload value\n                          bits\", self._address, 0,\
    \ 0xFFFF, 16, proxy)\n    \n    class CalibrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CALIBR\", \"calibration register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.dcs =\
    \ Field(\"dcs\", \"Digital calibration sign\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.dc = Field(\"dc\", \"Digital calibration\", self._address, 0,\
    \ 0x001F, 5, proxy)\n    \n    class AlrmarRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ALRMAR\", \"alarm A register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.msk4\
    \ = Field(\"msk4\", \"Alarm A date mask\", self._address, 31, 0x0001, 1, proxy)\n\
    \            self.wdsel = Field(\"wdsel\", \"Week day selection\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.dt = Field(\"dt\", \"Date tens in BCD\
    \ format\", self._address, 28, 0x0003, 2, proxy)\n            self.du = Field(\"\
    du\", \"Date units or day in BCD\n                          format\", self._address,\
    \ 24, 0x000F, 4, proxy)\n            self.msk3 = Field(\"msk3\", \"Alarm A hours\
    \ mask\", self._address, 23, 0x0001, 1, proxy)\n            self.pm = Field(\"\
    pm\", \"AM/PM notation\", self._address, 22, 0x0001, 1, proxy)\n            self.ht\
    \ = Field(\"ht\", \"Hour tens in BCD format\", self._address, 20, 0x0003, 2, proxy)\n\
    \            self.hu = Field(\"hu\", \"Hour units in BCD format\", self._address,\
    \ 16, 0x000F, 4, proxy)\n            self.msk2 = Field(\"msk2\", \"Alarm A minutes\
    \ mask\", self._address, 15, 0x0001, 1, proxy)\n            self.mnt = Field(\"\
    mnt\", \"Minute tens in BCD format\", self._address, 12, 0x0007, 3, proxy)\n \
    \           self.mnu = Field(\"mnu\", \"Minute units in BCD format\", self._address,\
    \ 8, 0x000F, 4, proxy)\n            self.msk1 = Field(\"msk1\", \"Alarm A seconds\
    \ mask\", self._address, 7, 0x0001, 1, proxy)\n            self.st = Field(\"\
    st\", \"Second tens in BCD format\", self._address, 4, 0x0007, 3, proxy)\n   \
    \         self.su = Field(\"su\", \"Second units in BCD format\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    class AlrmbrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"ALRMBR\", \"\
    alarm B register\", address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.msk4 = Field(\"msk4\", \"Alarm B date mask\", self._address, 31,\
    \ 0x0001, 1, proxy)\n            self.wdsel = Field(\"wdsel\", \"Week day selection\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.dt = Field(\"dt\", \"\
    Date tens in BCD format\", self._address, 28, 0x0003, 2, proxy)\n            self.du\
    \ = Field(\"du\", \"Date units or day in BCD\n                          format\"\
    , self._address, 24, 0x000F, 4, proxy)\n            self.msk3 = Field(\"msk3\"\
    , \"Alarm B hours mask\", self._address, 23, 0x0001, 1, proxy)\n            self.pm\
    \ = Field(\"pm\", \"AM/PM notation\", self._address, 22, 0x0001, 1, proxy)\n \
    \           self.ht = Field(\"ht\", \"Hour tens in BCD format\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.hu = Field(\"hu\", \"Hour units in BCD\
    \ format\", self._address, 16, 0x000F, 4, proxy)\n            self.msk2 = Field(\"\
    msk2\", \"Alarm B minutes mask\", self._address, 15, 0x0001, 1, proxy)\n     \
    \       self.mnt = Field(\"mnt\", \"Minute tens in BCD format\", self._address,\
    \ 12, 0x0007, 3, proxy)\n            self.mnu = Field(\"mnu\", \"Minute units\
    \ in BCD format\", self._address, 8, 0x000F, 4, proxy)\n            self.msk1\
    \ = Field(\"msk1\", \"Alarm B seconds mask\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.st = Field(\"st\", \"Second tens in BCD format\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.su = Field(\"su\", \"Second units in\
    \ BCD format\", self._address, 0, 0x000F, 4, proxy)\n    \n    class WprRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    WPR\", \"write protection register\", address + 0x0024, 32, \"write-only\", 0x0000,\
    \ proxy)\n            self.key = Field(\"key\", \"Write protection key\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class SsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SSR\", \"sub second register\"\
    , address + 0x0028, 32, \"read-only\", 0x0000, proxy)\n            self.ss = Field(\"\
    ss\", \"Sub second value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ShiftrRegister(Register):\n        def __init__(self, address, proxy):\n   \
    \         super().__init__(\"SHIFTR\", \"shift control register\", address + 0x002C,\
    \ 32, \"write-only\", 0x0000, proxy)\n            self.add1s = Field(\"add1s\"\
    , \"Add one second\", self._address, 31, 0x0001, 1, proxy)\n            self.subfs\
    \ = Field(\"subfs\", \"Subtract a fraction of a\n                          second\"\
    , self._address, 0, 0x7FFF, 15, proxy)\n    \n    class TstrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    TSTR\", \"time stamp time register\", address + 0x0030, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.alarmouttype = Field(\"alarmouttype\", \"AFO_ALARM\
    \ output type\", self._address, 18, 0x0001, 1, proxy)\n            self.tsinsel\
    \ = Field(\"tsinsel\", \"TIMESTAMP mapping\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.tamp1insel = Field(\"tamp1insel\", \"TAMPER1 mapping\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.tampie = Field(\"tampie\", \"Tamper\
    \ interrupt enable\", self._address, 2, 0x0001, 1, proxy)\n            self.tamp1trg\
    \ = Field(\"tamp1trg\", \"Active level for tamper 1\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.tamp1e = Field(\"tamp1e\", \"Tamper 1 detection\
    \ enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class TsdrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    TSDR\", \"time stamp date register\", address + 0x0034, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.wdu = Field(\"wdu\", \"Week day units\", self._address,\
    \ 13, 0x0007, 3, proxy)\n            self.mt = Field(\"mt\", \"Month tens in BCD\
    \ format\", self._address, 12, 0x0001, 1, proxy)\n            self.mu = Field(\"\
    mu\", \"Month units in BCD format\", self._address, 8, 0x000F, 4, proxy)\n   \
    \         self.dt = Field(\"dt\", \"Date tens in BCD format\", self._address,\
    \ 4, 0x0003, 2, proxy)\n            self.du = Field(\"du\", \"Date units in BCD\
    \ format\", self._address, 0, 0x000F, 4, proxy)\n    \n    class TsssrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    TSSSR\", \"timestamp sub second register\", address + 0x0038, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.ss = Field(\"ss\", \"Sub second value\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class CalrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CALR\", \"calibration\
    \ register\", address + 0x003C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.calp = Field(\"calp\", \"Increase frequency of RTC by 488.5\n       \
    \                   ppm\", self._address, 15, 0x0001, 1, proxy)\n            self.calw8\
    \ = Field(\"calw8\", \"Use an 8-second calibration cycle\n                   \
    \       period\", self._address, 14, 0x0001, 1, proxy)\n            self.calw16\
    \ = Field(\"calw16\", \"Use a 16-second calibration cycle\n                  \
    \        period\", self._address, 13, 0x0001, 1, proxy)\n            self.calm\
    \ = Field(\"calm\", \"Calibration minus\", self._address, 0, 0x01FF, 9, proxy)\n\
    \    \n    class TafcrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"TAFCR\", \"tamper and alternate function\
    \ configuration\n              register\", address + 0x0040, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.alarmouttype = Field(\"alarmouttype\", \"AFO_ALARM\
    \ output type\", self._address, 18, 0x0001, 1, proxy)\n            self.tsinsel\
    \ = Field(\"tsinsel\", \"TIMESTAMP mapping\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.tamp1insel = Field(\"tamp1insel\", \"TAMPER1 mapping\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.tamppudis = Field(\"tamppudis\", \"\
    TAMPER pull-up disable\", self._address, 15, 0x0001, 1, proxy)\n            self.tampprch\
    \ = Field(\"tampprch\", \"Tamper precharge duration\", self._address, 13, 0x0003,\
    \ 2, proxy)\n            self.tampflt = Field(\"tampflt\", \"Tamper filter count\"\
    , self._address, 11, 0x0003, 2, proxy)\n            self.tampfreq = Field(\"tampfreq\"\
    , \"Tamper sampling frequency\", self._address, 8, 0x0007, 3, proxy)\n       \
    \     self.tampts = Field(\"tampts\", \"Activate timestamp on tamper detection\n\
    \                          event\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.tamp2trg = Field(\"tamp2trg\", \"Active level for tamper 2\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.tamp2e = Field(\"tamp2e\", \"Tamper 2\
    \ detection enable\", self._address, 3, 0x0001, 1, proxy)\n            self.tampie\
    \ = Field(\"tampie\", \"Tamper interrupt enable\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.tamp1trg = Field(\"tamp1trg\", \"Active level for tamper\
    \ 1\", self._address, 1, 0x0001, 1, proxy)\n            self.tamp1e = Field(\"\
    tamp1e\", \"Tamper 1 detection enable\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class AlrmassrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"ALRMASSR\", \"alarm A sub second register\"\
    , address + 0x0044, 32, \"read-write\", 0x0000, proxy)\n            self.maskss\
    \ = Field(\"maskss\", \"Mask the most-significant bits starting\n            \
    \              at this bit\", self._address, 24, 0x000F, 4, proxy)\n         \
    \   self.ss = Field(\"ss\", \"Sub seconds value\", self._address, 0, 0x7FFF, 15,\
    \ proxy)\n    \n    class AlrmbssrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ALRMBSSR\", \"alarm B sub second\
    \ register\", address + 0x0048, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.maskss = Field(\"maskss\", \"Mask the most-significant bits starting\n\
    \                          at this bit\", self._address, 24, 0x000F, 4, proxy)\n\
    \            self.ss = Field(\"ss\", \"Sub seconds value\", self._address, 0,\
    \ 0x7FFF, 15, proxy)\n    \n    class Bkp0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP0R\", \"backup register\"\
    , address + 0x0050, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp1rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP1R\", \"backup register\", address + 0x0054,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Bkp2rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BKP2R\", \"backup register\", address + 0x0058, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bkp = Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Bkp3rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP3R\", \"backup register\"\
    , address + 0x005C, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp4rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP4R\", \"backup register\", address + 0x0060,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Bkp5rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BKP5R\", \"backup register\", address + 0x0064, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bkp = Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Bkp6rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP6R\", \"backup register\"\
    , address + 0x0068, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp7rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP7R\", \"backup register\", address + 0x006C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Bkp8rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BKP8R\", \"backup register\", address + 0x0070, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bkp = Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Bkp9rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP9R\", \"backup register\"\
    , address + 0x0074, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp10rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP10R\", \"backup register\", address + 0x0078,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Bkp11rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BKP11R\", \"backup register\", address + 0x007C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bkp = Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Bkp12rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP12R\", \"backup register\"\
    , address + 0x0080, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp13rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP13R\", \"backup register\", address + 0x0084,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Bkp14rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BKP14R\", \"backup register\", address + 0x0088, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bkp = Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Bkp15rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP15R\", \"backup register\"\
    , address + 0x008C, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp16rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP16R\", \"backup register\", address + 0x0090,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Bkp17rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BKP17R\", \"backup register\", address + 0x0094, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bkp = Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Bkp18rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BKP18R\", \"backup register\"\
    , address + 0x0098, 32, \"read-write\", 0x0000, proxy)\n            self.bkp =\
    \ Field(\"bkp\", \"BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n   \
    \ class Bkp19rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BKP19R\", \"backup register\", address + 0x009C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.bkp = Field(\"bkp\", \"\
    BKP\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"rtc\", \"Real-time clock\", 0x40002800)\n\
    \        self.tr = self.TrRegister(self.address, proxy)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n        self.cr = self.CrRegister(self.address, proxy)\n        self.isr\
    \ = self.IsrRegister(self.address, proxy)\n        self.prer = self.PrerRegister(self.address,\
    \ proxy)\n        self.wutr = self.WutrRegister(self.address, proxy)\n       \
    \ self.calibr = self.CalibrRegister(self.address, proxy)\n        self.alrmar\
    \ = self.AlrmarRegister(self.address, proxy)\n        self.alrmbr = self.AlrmbrRegister(self.address,\
    \ proxy)\n        self.wpr = self.WprRegister(self.address, proxy)\n        self.ssr\
    \ = self.SsrRegister(self.address, proxy)\n        self.shiftr = self.ShiftrRegister(self.address,\
    \ proxy)\n        self.tstr = self.TstrRegister(self.address, proxy)\n       \
    \ self.tsdr = self.TsdrRegister(self.address, proxy)\n        self.tsssr = self.TsssrRegister(self.address,\
    \ proxy)\n        self.calr = self.CalrRegister(self.address, proxy)\n       \
    \ self.tafcr = self.TafcrRegister(self.address, proxy)\n        self.alrmassr\
    \ = self.AlrmassrRegister(self.address, proxy)\n        self.alrmbssr = self.AlrmbssrRegister(self.address,\
    \ proxy)\n        self.bkp0r = self.Bkp0rRegister(self.address, proxy)\n     \
    \   self.bkp1r = self.Bkp1rRegister(self.address, proxy)\n        self.bkp2r =\
    \ self.Bkp2rRegister(self.address, proxy)\n        self.bkp3r = self.Bkp3rRegister(self.address,\
    \ proxy)\n        self.bkp4r = self.Bkp4rRegister(self.address, proxy)\n     \
    \   self.bkp5r = self.Bkp5rRegister(self.address, proxy)\n        self.bkp6r =\
    \ self.Bkp6rRegister(self.address, proxy)\n        self.bkp7r = self.Bkp7rRegister(self.address,\
    \ proxy)\n        self.bkp8r = self.Bkp8rRegister(self.address, proxy)\n     \
    \   self.bkp9r = self.Bkp9rRegister(self.address, proxy)\n        self.bkp10r\
    \ = self.Bkp10rRegister(self.address, proxy)\n        self.bkp11r = self.Bkp11rRegister(self.address,\
    \ proxy)\n        self.bkp12r = self.Bkp12rRegister(self.address, proxy)\n   \
    \     self.bkp13r = self.Bkp13rRegister(self.address, proxy)\n        self.bkp14r\
    \ = self.Bkp14rRegister(self.address, proxy)\n        self.bkp15r = self.Bkp15rRegister(self.address,\
    \ proxy)\n        self.bkp16r = self.Bkp16rRegister(self.address, proxy)\n   \
    \     self.bkp17r = self.Bkp17rRegister(self.address, proxy)\n        self.bkp18r\
    \ = self.Bkp18rRegister(self.address, proxy)\n        self.bkp19r = self.Bkp19rRegister(self.address,\
    \ proxy)\n"
  name: RTC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Uart4(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0000, 32,\
    \ \"\", 0xC00000, proxy)\n            self.lbd = Field(\"lbd\", \"LIN break detection\
    \ flag\", self._address, 8, 0x0001, 1, proxy)\n            self.txe = Field(\"\
    txe\", \"Transmit data register\n                          empty\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.tc = Field(\"tc\", \"Transmission complete\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.rxne = Field(\"rxne\"\
    , \"Read data register not\n                          empty\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.idle = Field(\"idle\", \"IDLE line detected\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.ore = Field(\"ore\", \"\
    Overrun error\", self._address, 3, 0x0001, 1, proxy)\n            self.nf = Field(\"\
    nf\", \"Noise detected flag\", self._address, 2, 0x0001, 1, proxy)\n         \
    \   self.fe = Field(\"fe\", \"Framing error\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.pe = Field(\"pe\", \"Parity error\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class DrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DR\", \"Data register\", address\
    \ + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.dr = Field(\"\
    dr\", \"Data value\", self._address, 0, 0x01FF, 9, proxy)\n    \n    class BrrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BRR\", \"Baud rate register\", address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.div_mantissa = Field(\"div_mantissa\", \"mantissa of USARTDIV\"\
    , self._address, 4, 0x0FFF, 12, proxy)\n            self.div_fraction = Field(\"\
    div_fraction\", \"fraction of USARTDIV\", self._address, 0, 0x000F, 4, proxy)\n\
    \    \n    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"Control register 1\", address + 0x000C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.over8 = Field(\"over8\"\
    , \"Oversampling mode\", self._address, 15, 0x0001, 1, proxy)\n            self.ue\
    \ = Field(\"ue\", \"USART enable\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.m = Field(\"m\", \"Word length\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.wake = Field(\"wake\", \"Wakeup method\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.pce = Field(\"pce\", \"Parity control\
    \ enable\", self._address, 10, 0x0001, 1, proxy)\n            self.ps = Field(\"\
    ps\", \"Parity selection\", self._address, 9, 0x0001, 1, proxy)\n            self.peie\
    \ = Field(\"peie\", \"PE interrupt enable\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.txeie = Field(\"txeie\", \"TXE interrupt enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.tcie = Field(\"tcie\", \"Transmission\
    \ complete interrupt\n                          enable\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.rxneie = Field(\"rxneie\", \"RXNE interrupt enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.idleie = Field(\"idleie\"\
    , \"IDLE interrupt enable\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.te = Field(\"te\", \"Transmitter enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.re = Field(\"re\", \"Receiver enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rwu = Field(\"rwu\", \"Receiver wakeup\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.sbk = Field(\"sbk\", \"\
    Send break\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Cr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR2\", \"Control register 2\", address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.linen = Field(\"linen\", \"LIN mode enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.stop = Field(\"stop\", \"STOP bits\"\
    , self._address, 12, 0x0003, 2, proxy)\n            self.lbdie = Field(\"lbdie\"\
    , \"LIN break detection interrupt\n                          enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lbdl = Field(\"lbdl\", \"lin break detection\
    \ length\", self._address, 5, 0x0001, 1, proxy)\n            self.add = Field(\"\
    add\", \"Address of the USART node\", self._address, 0, 0x000F, 4, proxy)\n  \
    \  \n    class Cr3Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR3\", \"Control register 3\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.onebit = Field(\"onebit\"\
    , \"One sample bit method\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.ctsie = Field(\"ctsie\", \"CTS interrupt\
    \ enable\", self._address, 10, 0x0001, 1, proxy)\n            self.ctse = Field(\"\
    ctse\", \"CTS enable\", self._address, 9, 0x0001, 1, proxy)\n            self.rtse\
    \ = Field(\"rtse\", \"RTS enable\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.dmat = Field(\"dmat\", \"DMA enable transmitter\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.dmar = Field(\"dmar\", \"DMA enable receiver\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.hdsel = Field(\"hdsel\"\
    , \"Half-duplex selection\", self._address, 3, 0x0001, 1, proxy)\n           \
    \ self.irlp = Field(\"irlp\", \"IrDA low-power\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.iren = Field(\"iren\", \"IrDA mode enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.eie = Field(\"eie\", \"Error interrupt\
    \ enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"uart4\", \"Universal synchronous asynchronous\
    \ receiver\n      transmitter\", 0x40004C00)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.dr = self.DrRegister(self.address, proxy)\n        self.brr\
    \ = self.BrrRegister(self.address, proxy)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.cr3\
    \ = self.Cr3Register(self.address, proxy)\n"
  name: UART4
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Uart5(Peripheral):\n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0000, 32,\
    \ \"\", 0xC00000, proxy)\n            self.lbd = Field(\"lbd\", \"LIN break detection\
    \ flag\", self._address, 8, 0x0001, 1, proxy)\n            self.txe = Field(\"\
    txe\", \"Transmit data register\n                          empty\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.tc = Field(\"tc\", \"Transmission complete\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.rxne = Field(\"rxne\"\
    , \"Read data register not\n                          empty\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.idle = Field(\"idle\", \"IDLE line detected\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.ore = Field(\"ore\", \"\
    Overrun error\", self._address, 3, 0x0001, 1, proxy)\n            self.nf = Field(\"\
    nf\", \"Noise detected flag\", self._address, 2, 0x0001, 1, proxy)\n         \
    \   self.fe = Field(\"fe\", \"Framing error\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.pe = Field(\"pe\", \"Parity error\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class DrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DR\", \"Data register\", address\
    \ + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.dr = Field(\"\
    dr\", \"Data value\", self._address, 0, 0x01FF, 9, proxy)\n    \n    class BrrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BRR\", \"Baud rate register\", address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.div_mantissa = Field(\"div_mantissa\", \"mantissa of USARTDIV\"\
    , self._address, 4, 0x0FFF, 12, proxy)\n            self.div_fraction = Field(\"\
    div_fraction\", \"fraction of USARTDIV\", self._address, 0, 0x000F, 4, proxy)\n\
    \    \n    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"Control register 1\", address + 0x000C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.over8 = Field(\"over8\"\
    , \"Oversampling mode\", self._address, 15, 0x0001, 1, proxy)\n            self.ue\
    \ = Field(\"ue\", \"USART enable\", self._address, 13, 0x0001, 1, proxy)\n   \
    \         self.m = Field(\"m\", \"Word length\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.wake = Field(\"wake\", \"Wakeup method\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.pce = Field(\"pce\", \"Parity control\
    \ enable\", self._address, 10, 0x0001, 1, proxy)\n            self.ps = Field(\"\
    ps\", \"Parity selection\", self._address, 9, 0x0001, 1, proxy)\n            self.peie\
    \ = Field(\"peie\", \"PE interrupt enable\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.txeie = Field(\"txeie\", \"TXE interrupt enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.tcie = Field(\"tcie\", \"Transmission\
    \ complete interrupt\n                          enable\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.rxneie = Field(\"rxneie\", \"RXNE interrupt enable\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.idleie = Field(\"idleie\"\
    , \"IDLE interrupt enable\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.te = Field(\"te\", \"Transmitter enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.re = Field(\"re\", \"Receiver enable\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rwu = Field(\"rwu\", \"Receiver wakeup\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.sbk = Field(\"sbk\", \"\
    Send break\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Cr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR2\", \"Control register 2\", address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.linen = Field(\"linen\", \"LIN mode enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.stop = Field(\"stop\", \"STOP bits\"\
    , self._address, 12, 0x0003, 2, proxy)\n            self.lbdie = Field(\"lbdie\"\
    , \"LIN break detection interrupt\n                          enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.lbdl = Field(\"lbdl\", \"lin break detection\
    \ length\", self._address, 5, 0x0001, 1, proxy)\n            self.add = Field(\"\
    add\", \"Address of the USART node\", self._address, 0, 0x000F, 4, proxy)\n  \
    \  \n    class Cr3Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR3\", \"Control register 3\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.onebit = Field(\"onebit\"\
    , \"One sample bit method\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.ctsie = Field(\"ctsie\", \"CTS interrupt\
    \ enable\", self._address, 10, 0x0001, 1, proxy)\n            self.ctse = Field(\"\
    ctse\", \"CTS enable\", self._address, 9, 0x0001, 1, proxy)\n            self.rtse\
    \ = Field(\"rtse\", \"RTS enable\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.dmat = Field(\"dmat\", \"DMA enable transmitter\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.dmar = Field(\"dmar\", \"DMA enable receiver\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.hdsel = Field(\"hdsel\"\
    , \"Half-duplex selection\", self._address, 3, 0x0001, 1, proxy)\n           \
    \ self.irlp = Field(\"irlp\", \"IrDA low-power\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.iren = Field(\"iren\", \"IrDA mode enable\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.eie = Field(\"eie\", \"Error interrupt\
    \ enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"uart5\", \"Universal synchronous asynchronous\
    \ receiver\n      transmitter\", 0x40005000)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.dr = self.DrRegister(self.address, proxy)\n        self.brr\
    \ = self.BrrRegister(self.address, proxy)\n        self.cr1 = self.Cr1Register(self.address,\
    \ proxy)\n        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.cr3\
    \ = self.Cr3Register(self.address, proxy)\n"
  name: UART5
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass C_adc(Peripheral):\n\
    \    class CsrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CSR\", \"ADC Common status register\", address\
    \ + 0x0000, 32, \"read-only\", 0x0000, proxy)\n            self.ovr3 = Field(\"\
    ovr3\", \"Overrun flag of ADC3\", self._address, 21, 0x0001, 1, proxy)\n     \
    \       self.strt3 = Field(\"strt3\", \"Regular channel Start flag of ADC\n  \
    \                        3\", self._address, 20, 0x0001, 1, proxy)\n         \
    \   self.jstrt3 = Field(\"jstrt3\", \"Injected channel Start flag of ADC\n   \
    \                       3\", self._address, 19, 0x0001, 1, proxy)\n          \
    \  self.jeoc3 = Field(\"jeoc3\", \"Injected channel end of conversion of\n   \
    \                       ADC 3\", self._address, 18, 0x0001, 1, proxy)\n      \
    \      self.eoc3 = Field(\"eoc3\", \"End of conversion of ADC 3\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.awd3 = Field(\"awd3\", \"Analog watchdog\
    \ flag of ADC\n                          3\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.ovr2 = Field(\"ovr2\", \"Overrun flag of ADC 2\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.strt2 = Field(\"strt2\", \"Regular channel\
    \ Start flag of ADC\n                          2\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.jstrt2 = Field(\"jstrt2\", \"Injected channel Start\
    \ flag of ADC\n                          2\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.jeoc2 = Field(\"jeoc2\", \"Injected channel end of conversion\
    \ of\n                          ADC 2\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.eoc2 = Field(\"eoc2\", \"End of conversion of ADC 2\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.awd2 = Field(\"awd2\", \"Analog watchdog\
    \ flag of ADC\n                          2\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.ovr1 = Field(\"ovr1\", \"Overrun flag of ADC 1\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.strt1 = Field(\"strt1\", \"Regular channel\
    \ Start flag of ADC\n                          1\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.jstrt1 = Field(\"jstrt1\", \"Injected channel Start\
    \ flag of ADC\n                          1\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.jeoc1 = Field(\"jeoc1\", \"Injected channel end of conversion\
    \ of\n                          ADC 1\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.eoc1 = Field(\"eoc1\", \"End of conversion of ADC 1\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.awd1 = Field(\"awd1\", \"Analog watchdog\
    \ flag of ADC\n                          1\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class CcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CCR\", \"ADC common control register\", address\
    \ + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.tsvrefe = Field(\"\
    tsvrefe\", \"Temperature sensor and VREFINT\n                          enable\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.vbate = Field(\"vbate\"\
    , \"VBAT enable\", self._address, 22, 0x0001, 1, proxy)\n            self.adcpre\
    \ = Field(\"adcpre\", \"ADC prescaler\", self._address, 16, 0x0003, 2, proxy)\n\
    \            self.dma = Field(\"dma\", \"Direct memory access mode for multi ADC\n\
    \                          mode\", self._address, 14, 0x0003, 2, proxy)\n    \
    \        self.dds = Field(\"dds\", \"DMA disable selection for multi-ADC\n   \
    \                       mode\", self._address, 13, 0x0001, 1, proxy)\n       \
    \     self.delay = Field(\"delay\", \"Delay between 2 sampling\n             \
    \             phases\", self._address, 8, 0x000F, 4, proxy)\n            self.mult\
    \ = Field(\"mult\", \"Multi ADC mode selection\", self._address, 0, 0x001F, 5,\
    \ proxy)\n    \n    class CdrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CDR\", \"ADC common regular data register\
    \ for dual\n              and triple modes\", address + 0x0008, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.data2 = Field(\"data2\", \"2nd data item of\
    \ a pair of regular\n                          conversions\", self._address, 16,\
    \ 0xFFFF, 16, proxy)\n            self.data1 = Field(\"data1\", \"1st data item\
    \ of a pair of regular\n                          conversions\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    c_adc\", \"Common ADC registers\", 0x40012300)\n        self.csr = self.CsrRegister(self.address,\
    \ proxy)\n        self.ccr = self.CcrRegister(self.address, proxy)\n        self.cdr\
    \ = self.CdrRegister(self.address, proxy)\n"
  name: C_ADC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim1(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.cms = Field(\"cms\", \"Center-aligned mode\n      \
    \                    selection\", self._address, 5, 0x0003, 2, proxy)\n      \
    \      self.dir = Field(\"dir\", \"Direction\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ois4 = Field(\"ois4\",\
    \ \"Output Idle state 4\", self._address, 14, 0x0001, 1, proxy)\n            self.ois3n\
    \ = Field(\"ois3n\", \"Output Idle state 3\", self._address, 13, 0x0001, 1, proxy)\n\
    \            self.ois3 = Field(\"ois3\", \"Output Idle state 3\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.ois2n = Field(\"ois2n\", \"Output Idle\
    \ state 2\", self._address, 11, 0x0001, 1, proxy)\n            self.ois2 = Field(\"\
    ois2\", \"Output Idle state 2\", self._address, 10, 0x0001, 1, proxy)\n      \
    \      self.ois1n = Field(\"ois1n\", \"Output Idle state 1\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.ois1 = Field(\"ois1\", \"Output Idle state\
    \ 1\", self._address, 8, 0x0001, 1, proxy)\n            self.ti1s = Field(\"ti1s\"\
    , \"TI1 selection\", self._address, 7, 0x0001, 1, proxy)\n            self.mms\
    \ = Field(\"mms\", \"Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.ccds = Field(\"ccds\", \"Capture/compare DMA\n             \
    \             selection\", self._address, 3, 0x0001, 1, proxy)\n            self.ccus\
    \ = Field(\"ccus\", \"Capture/compare control update\n                       \
    \   selection\", self._address, 2, 0x0001, 1, proxy)\n            self.ccpc =\
    \ Field(\"ccpc\", \"Capture/compare preloaded\n                          control\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class SmcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SMCR\", \"slave mode control register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.etp = Field(\"etp\", \"External trigger polarity\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.ece = Field(\"ece\",\
    \ \"External clock enable\", self._address, 14, 0x0001, 1, proxy)\n          \
    \  self.etps = Field(\"etps\", \"External trigger prescaler\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.etf = Field(\"etf\", \"External trigger\
    \ filter\", self._address, 8, 0x000F, 4, proxy)\n            self.msm = Field(\"\
    msm\", \"Master/Slave mode\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.ts = Field(\"ts\", \"Trigger selection\", self._address, 4, 0x0007, 3,\
    \ proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DIER\", \"DMA/Interrupt enable\
    \ register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.tde = Field(\"tde\", \"Trigger DMA request enable\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.comde = Field(\"comde\", \"COM DMA request\
    \ enable\", self._address, 13, 0x0001, 1, proxy)\n            self.cc4de = Field(\"\
    cc4de\", \"Capture/Compare 4 DMA request\n                          enable\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.cc3de = Field(\"cc3de\"\
    , \"Capture/Compare 3 DMA request\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2de = Field(\"cc2de\", \"Capture/Compare\
    \ 2 DMA request\n                          enable\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1de = Field(\"cc1de\", \"Capture/Compare 1 DMA\
    \ request\n                          enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ude = Field(\"ude\", \"Update DMA request enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.tie = Field(\"tie\", \"Trigger interrupt\
    \ enable\", self._address, 6, 0x0001, 1, proxy)\n            self.cc4ie = Field(\"\
    cc4ie\", \"Capture/Compare 4 interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3ie = Field(\"cc3ie\", \"Capture/Compare\
    \ 3 interrupt\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare 2 interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n      \
    \                    enable\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.uie = Field(\"uie\", \"Update interrupt enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.bie = Field(\"bie\", \"Break interrupt enable\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.comie = Field(\"comie\"\
    , \"COM interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n    \n    class\
    \ SrRegister(Register):\n        def __init__(self, address, proxy):\n       \
    \     super().__init__(\"SR\", \"status register\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cc4of = Field(\"cc4of\", \"Capture/Compare\
    \ 4 overcapture\n                          flag\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.cc3of = Field(\"cc3of\", \"Capture/Compare 3 overcapture\n\
    \                          flag\", self._address, 11, 0x0001, 1, proxy)\n    \
    \        self.cc2of = Field(\"cc2of\", \"Capture/compare 2 overcapture\n     \
    \                     flag\", self._address, 10, 0x0001, 1, proxy)\n         \
    \   self.cc1of = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n          \
    \                flag\", self._address, 9, 0x0001, 1, proxy)\n            self.bif\
    \ = Field(\"bif\", \"Break interrupt flag\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.tif = Field(\"tif\", \"Trigger interrupt flag\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.comif = Field(\"comif\", \"COM interrupt\
    \ flag\", self._address, 5, 0x0001, 1, proxy)\n            self.cc4if = Field(\"\
    cc4if\", \"Capture/Compare 4 interrupt\n                          flag\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3if = Field(\"cc3if\", \"Capture/Compare\
    \ 3 interrupt\n                          flag\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2if = Field(\"cc2if\", \"Capture/Compare 2 interrupt\n\
    \                          flag\", self._address, 2, 0x0001, 1, proxy)\n     \
    \       self.cc1if = Field(\"cc1if\", \"Capture/compare 1 interrupt\n        \
    \                  flag\", self._address, 1, 0x0001, 1, proxy)\n            self.uif\
    \ = Field(\"uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.bg = Field(\"\
    bg\", \"Break generation\", self._address, 7, 0x0001, 1, proxy)\n            self.tg\
    \ = Field(\"tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.comg = Field(\"comg\", \"Capture/Compare control update\n  \
    \                        generation\", self._address, 5, 0x0001, 1, proxy)\n \
    \           self.cc4g = Field(\"cc4g\", \"Capture/compare 4\n                \
    \          generation\", self._address, 4, 0x0001, 1, proxy)\n            self.cc3g\
    \ = Field(\"cc3g\", \"Capture/compare 3\n                          generation\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.cc2g = Field(\"cc2g\"\
    , \"Capture/compare 2\n                          generation\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1g = Field(\"cc1g\", \"Capture/compare\
    \ 1\n                          generation\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.ug = Field(\"ug\", \"Update generation\", self._address, 0,\
    \ 0x0001, 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Output\"\
    , \"capture/compare mode register 1 (output\n              mode)\", address +\
    \ 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.oc2ce = Field(\"\
    oc2ce\", \"Output Compare 2 clear\n                          enable\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.oc2m = Field(\"oc2m\", \"Output Compare\
    \ 2 mode\", self._address, 12, 0x0007, 3, proxy)\n            self.oc2pe = Field(\"\
    oc2pe\", \"Output Compare 2 preload\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.oc2fe = Field(\"oc2fe\", \"Output Compare\
    \ 2 fast\n                          enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.cc2s = Field(\"cc2s\", \"Capture/Compare 2\n               \
    \           selection\", self._address, 8, 0x0003, 2, proxy)\n            self.oc1ce\
    \ = Field(\"oc1ce\", \"Output Compare 1 clear\n                          enable\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.oc1m = Field(\"oc1m\"\
    , \"Output Compare 1 mode\", self._address, 4, 0x0007, 3, proxy)\n           \
    \ self.oc1pe = Field(\"oc1pe\", \"Output Compare 1 preload\n                 \
    \         enable\", self._address, 3, 0x0001, 1, proxy)\n            self.oc1fe\
    \ = Field(\"oc1fe\", \"Output Compare 1 fast\n                          enable\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\"\
    , \"Capture/Compare 1\n                          selection\", self._address, 0,\
    \ 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Output\", \"capture/compare mode register 2 (output\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.oc4ce\
    \ = Field(\"oc4ce\", \"Output compare 4 clear\n                          enable\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.oc4m = Field(\"oc4m\"\
    , \"Output compare 4 mode\", self._address, 12, 0x0007, 3, proxy)\n          \
    \  self.oc4pe = Field(\"oc4pe\", \"Output compare 4 preload\n                \
    \          enable\", self._address, 11, 0x0001, 1, proxy)\n            self.oc4fe\
    \ = Field(\"oc4fe\", \"Output compare 4 fast\n                          enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cc4s = Field(\"cc4s\"\
    , \"Capture/Compare 4\n                          selection\", self._address, 8,\
    \ 0x0003, 2, proxy)\n            self.oc3ce = Field(\"oc3ce\", \"Output compare\
    \ 3 clear\n                          enable\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.oc3m = Field(\"oc3m\", \"Output compare 3 mode\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.oc3pe = Field(\"oc3pe\", \"Output compare\
    \ 3 preload\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.oc3fe = Field(\"oc3fe\", \"Output compare 3 fast\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc3s = Field(\"cc3s\", \"Capture/Compare 3\n                  \
    \        selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_inputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Input\", \"capture/compare mode register 2 (input\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.ic4f\
    \ = Field(\"ic4f\", \"Input capture 4 filter\", self._address, 12, 0x000F, 4,\
    \ proxy)\n            self.ic4psc = Field(\"ic4psc\", \"Input capture 4 prescaler\"\
    , self._address, 10, 0x0003, 2, proxy)\n            self.cc4s = Field(\"cc4s\"\
    , \"Capture/Compare 4\n                          selection\", self._address, 8,\
    \ 0x0003, 2, proxy)\n            self.ic3f = Field(\"ic3f\", \"Input capture 3\
    \ filter\", self._address, 4, 0x000F, 4, proxy)\n            self.ic3psc = Field(\"\
    ic3psc\", \"Input capture 3 prescaler\", self._address, 2, 0x0003, 2, proxy)\n\
    \            self.cc3s = Field(\"cc3s\", \"Capture/compare 3\n               \
    \           selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class\
    \ CcerRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"CCER\", \"capture/compare enable\n              register\"\
    , address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n            self.cc4p\
    \ = Field(\"cc4p\", \"Capture/Compare 3 output\n                          Polarity\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.cc4e = Field(\"cc4e\"\
    , \"Capture/Compare 4 output\n                          enable\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.cc3np = Field(\"cc3np\", \"Capture/Compare\
    \ 3 output\n                          Polarity\", self._address, 11, 0x0001, 1,\
    \ proxy)\n            self.cc3ne = Field(\"cc3ne\", \"Capture/Compare 3 complementary\
    \ output\n                          enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.cc3p = Field(\"cc3p\", \"Capture/Compare 3 output\n        \
    \                  Polarity\", self._address, 9, 0x0001, 1, proxy)\n         \
    \   self.cc3e = Field(\"cc3e\", \"Capture/Compare 3 output\n                 \
    \         enable\", self._address, 8, 0x0001, 1, proxy)\n            self.cc2np\
    \ = Field(\"cc2np\", \"Capture/Compare 2 output\n                          Polarity\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.cc2ne = Field(\"cc2ne\"\
    , \"Capture/Compare 2 complementary output\n                          enable\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare\
    \ 2 output\n                          enable\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n      \
    \                    Polarity\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.cc1ne = Field(\"cc1ne\", \"Capture/Compare 1 complementary output\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n           \
    \               Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt = Field(\"cnt\", \"counter value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR2\", \"capture/compare register 2\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr2 = Field(\"ccr2\", \"Capture/Compare 2\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR3\", \"capture/compare register 3\", address + 0x003C, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr3 = Field(\"ccr3\", \"Capture/Compare value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR4\", \"capture/compare register 4\", address + 0x0040, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr4 = Field(\"ccr4\", \"Capture/Compare value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class DcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DCR\", \"DMA control register\", address + 0x0048, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.dbl = Field(\"dbl\", \"DMA burst length\", self._address,\
    \ 8, 0x001F, 5, proxy)\n            self.dba = Field(\"dba\", \"DMA base address\"\
    , self._address, 0, 0x001F, 5, proxy)\n    \n    class DmarRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DMAR\", \"DMA address for full transfer\", address + 0x004C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmab = Field(\"dmab\", \"DMA register for burst\n\
    \                          accesses\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class RcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RCR\", \"repetition counter register\", address\
    \ + 0x0030, 32, \"read-write\", 0x0000, proxy)\n            self.rep = Field(\"\
    rep\", \"Repetition counter value\", self._address, 0, 0x00FF, 8, proxy)\n   \
    \ \n    class BdtrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BDTR\", \"break and dead-time register\", address\
    \ + 0x0044, 32, \"read-write\", 0x0000, proxy)\n            self.moe = Field(\"\
    moe\", \"Main output enable\", self._address, 15, 0x0001, 1, proxy)\n        \
    \    self.aoe = Field(\"aoe\", \"Automatic output enable\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.bkp = Field(\"bkp\", \"Break polarity\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.bke = Field(\"bke\",\
    \ \"Break enable\", self._address, 12, 0x0001, 1, proxy)\n            self.ossr\
    \ = Field(\"ossr\", \"Off-state selection for Run\n                          mode\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.ossi = Field(\"ossi\"\
    , \"Off-state selection for Idle\n                          mode\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.lock = Field(\"lock\", \"Lock configuration\"\
    , self._address, 8, 0x0003, 2, proxy)\n            self.dtg = Field(\"dtg\", \"\
    Dead-time generator setup\", self._address, 0, 0x00FF, 8, proxy)\n    \n    def\
    \ __init__(self, proxy):\n        super().__init__(\"tim1\", \"Advanced-timers\"\
    , 0x40010000)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n    \
    \    self.cr2 = self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccmr2_output = self.Ccmr2_outputRegister(self.address, proxy)\n\
    \        self.ccmr2_input = self.Ccmr2_inputRegister(self.address, proxy)\n  \
    \      self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt =\
    \ self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n        self.ccr3 = self.Ccr3Register(self.address, proxy)\n       \
    \ self.ccr4 = self.Ccr4Register(self.address, proxy)\n        self.dcr = self.DcrRegister(self.address,\
    \ proxy)\n        self.dmar = self.DmarRegister(self.address, proxy)\n       \
    \ self.rcr = self.RcrRegister(self.address, proxy)\n        self.bdtr = self.BdtrRegister(self.address,\
    \ proxy)\n"
  name: TIM1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim8(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.cms = Field(\"cms\", \"Center-aligned mode\n      \
    \                    selection\", self._address, 5, 0x0003, 2, proxy)\n      \
    \      self.dir = Field(\"dir\", \"Direction\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ois4 = Field(\"ois4\",\
    \ \"Output Idle state 4\", self._address, 14, 0x0001, 1, proxy)\n            self.ois3n\
    \ = Field(\"ois3n\", \"Output Idle state 3\", self._address, 13, 0x0001, 1, proxy)\n\
    \            self.ois3 = Field(\"ois3\", \"Output Idle state 3\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.ois2n = Field(\"ois2n\", \"Output Idle\
    \ state 2\", self._address, 11, 0x0001, 1, proxy)\n            self.ois2 = Field(\"\
    ois2\", \"Output Idle state 2\", self._address, 10, 0x0001, 1, proxy)\n      \
    \      self.ois1n = Field(\"ois1n\", \"Output Idle state 1\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.ois1 = Field(\"ois1\", \"Output Idle state\
    \ 1\", self._address, 8, 0x0001, 1, proxy)\n            self.ti1s = Field(\"ti1s\"\
    , \"TI1 selection\", self._address, 7, 0x0001, 1, proxy)\n            self.mms\
    \ = Field(\"mms\", \"Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.ccds = Field(\"ccds\", \"Capture/compare DMA\n             \
    \             selection\", self._address, 3, 0x0001, 1, proxy)\n            self.ccus\
    \ = Field(\"ccus\", \"Capture/compare control update\n                       \
    \   selection\", self._address, 2, 0x0001, 1, proxy)\n            self.ccpc =\
    \ Field(\"ccpc\", \"Capture/compare preloaded\n                          control\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class SmcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SMCR\", \"slave mode control register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.etp = Field(\"etp\", \"External trigger polarity\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.ece = Field(\"ece\",\
    \ \"External clock enable\", self._address, 14, 0x0001, 1, proxy)\n          \
    \  self.etps = Field(\"etps\", \"External trigger prescaler\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.etf = Field(\"etf\", \"External trigger\
    \ filter\", self._address, 8, 0x000F, 4, proxy)\n            self.msm = Field(\"\
    msm\", \"Master/Slave mode\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.ts = Field(\"ts\", \"Trigger selection\", self._address, 4, 0x0007, 3,\
    \ proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DIER\", \"DMA/Interrupt enable\
    \ register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.tde = Field(\"tde\", \"Trigger DMA request enable\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.comde = Field(\"comde\", \"COM DMA request\
    \ enable\", self._address, 13, 0x0001, 1, proxy)\n            self.cc4de = Field(\"\
    cc4de\", \"Capture/Compare 4 DMA request\n                          enable\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.cc3de = Field(\"cc3de\"\
    , \"Capture/Compare 3 DMA request\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2de = Field(\"cc2de\", \"Capture/Compare\
    \ 2 DMA request\n                          enable\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1de = Field(\"cc1de\", \"Capture/Compare 1 DMA\
    \ request\n                          enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ude = Field(\"ude\", \"Update DMA request enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.tie = Field(\"tie\", \"Trigger interrupt\
    \ enable\", self._address, 6, 0x0001, 1, proxy)\n            self.cc4ie = Field(\"\
    cc4ie\", \"Capture/Compare 4 interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3ie = Field(\"cc3ie\", \"Capture/Compare\
    \ 3 interrupt\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare 2 interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n      \
    \                    enable\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.uie = Field(\"uie\", \"Update interrupt enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.bie = Field(\"bie\", \"Break interrupt enable\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.comie = Field(\"comie\"\
    , \"COM interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n    \n    class\
    \ SrRegister(Register):\n        def __init__(self, address, proxy):\n       \
    \     super().__init__(\"SR\", \"status register\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cc4of = Field(\"cc4of\", \"Capture/Compare\
    \ 4 overcapture\n                          flag\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.cc3of = Field(\"cc3of\", \"Capture/Compare 3 overcapture\n\
    \                          flag\", self._address, 11, 0x0001, 1, proxy)\n    \
    \        self.cc2of = Field(\"cc2of\", \"Capture/compare 2 overcapture\n     \
    \                     flag\", self._address, 10, 0x0001, 1, proxy)\n         \
    \   self.cc1of = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n          \
    \                flag\", self._address, 9, 0x0001, 1, proxy)\n            self.bif\
    \ = Field(\"bif\", \"Break interrupt flag\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.tif = Field(\"tif\", \"Trigger interrupt flag\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.comif = Field(\"comif\", \"COM interrupt\
    \ flag\", self._address, 5, 0x0001, 1, proxy)\n            self.cc4if = Field(\"\
    cc4if\", \"Capture/Compare 4 interrupt\n                          flag\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3if = Field(\"cc3if\", \"Capture/Compare\
    \ 3 interrupt\n                          flag\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2if = Field(\"cc2if\", \"Capture/Compare 2 interrupt\n\
    \                          flag\", self._address, 2, 0x0001, 1, proxy)\n     \
    \       self.cc1if = Field(\"cc1if\", \"Capture/compare 1 interrupt\n        \
    \                  flag\", self._address, 1, 0x0001, 1, proxy)\n            self.uif\
    \ = Field(\"uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.bg = Field(\"\
    bg\", \"Break generation\", self._address, 7, 0x0001, 1, proxy)\n            self.tg\
    \ = Field(\"tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.comg = Field(\"comg\", \"Capture/Compare control update\n  \
    \                        generation\", self._address, 5, 0x0001, 1, proxy)\n \
    \           self.cc4g = Field(\"cc4g\", \"Capture/compare 4\n                \
    \          generation\", self._address, 4, 0x0001, 1, proxy)\n            self.cc3g\
    \ = Field(\"cc3g\", \"Capture/compare 3\n                          generation\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.cc2g = Field(\"cc2g\"\
    , \"Capture/compare 2\n                          generation\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1g = Field(\"cc1g\", \"Capture/compare\
    \ 1\n                          generation\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.ug = Field(\"ug\", \"Update generation\", self._address, 0,\
    \ 0x0001, 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Output\"\
    , \"capture/compare mode register 1 (output\n              mode)\", address +\
    \ 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.oc2ce = Field(\"\
    oc2ce\", \"Output Compare 2 clear\n                          enable\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.oc2m = Field(\"oc2m\", \"Output Compare\
    \ 2 mode\", self._address, 12, 0x0007, 3, proxy)\n            self.oc2pe = Field(\"\
    oc2pe\", \"Output Compare 2 preload\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.oc2fe = Field(\"oc2fe\", \"Output Compare\
    \ 2 fast\n                          enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.cc2s = Field(\"cc2s\", \"Capture/Compare 2\n               \
    \           selection\", self._address, 8, 0x0003, 2, proxy)\n            self.oc1ce\
    \ = Field(\"oc1ce\", \"Output Compare 1 clear\n                          enable\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.oc1m = Field(\"oc1m\"\
    , \"Output Compare 1 mode\", self._address, 4, 0x0007, 3, proxy)\n           \
    \ self.oc1pe = Field(\"oc1pe\", \"Output Compare 1 preload\n                 \
    \         enable\", self._address, 3, 0x0001, 1, proxy)\n            self.oc1fe\
    \ = Field(\"oc1fe\", \"Output Compare 1 fast\n                          enable\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\"\
    , \"Capture/Compare 1\n                          selection\", self._address, 0,\
    \ 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Output\", \"capture/compare mode register 2 (output\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.oc4ce\
    \ = Field(\"oc4ce\", \"Output compare 4 clear\n                          enable\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.oc4m = Field(\"oc4m\"\
    , \"Output compare 4 mode\", self._address, 12, 0x0007, 3, proxy)\n          \
    \  self.oc4pe = Field(\"oc4pe\", \"Output compare 4 preload\n                \
    \          enable\", self._address, 11, 0x0001, 1, proxy)\n            self.oc4fe\
    \ = Field(\"oc4fe\", \"Output compare 4 fast\n                          enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.cc4s = Field(\"cc4s\"\
    , \"Capture/Compare 4\n                          selection\", self._address, 8,\
    \ 0x0003, 2, proxy)\n            self.oc3ce = Field(\"oc3ce\", \"Output compare\
    \ 3 clear\n                          enable\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.oc3m = Field(\"oc3m\", \"Output compare 3 mode\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.oc3pe = Field(\"oc3pe\", \"Output compare\
    \ 3 preload\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.oc3fe = Field(\"oc3fe\", \"Output compare 3 fast\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc3s = Field(\"cc3s\", \"Capture/Compare 3\n                  \
    \        selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_inputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Input\", \"capture/compare mode register 2 (input\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.ic4f\
    \ = Field(\"ic4f\", \"Input capture 4 filter\", self._address, 12, 0x000F, 4,\
    \ proxy)\n            self.ic4psc = Field(\"ic4psc\", \"Input capture 4 prescaler\"\
    , self._address, 10, 0x0003, 2, proxy)\n            self.cc4s = Field(\"cc4s\"\
    , \"Capture/Compare 4\n                          selection\", self._address, 8,\
    \ 0x0003, 2, proxy)\n            self.ic3f = Field(\"ic3f\", \"Input capture 3\
    \ filter\", self._address, 4, 0x000F, 4, proxy)\n            self.ic3psc = Field(\"\
    ic3psc\", \"Input capture 3 prescaler\", self._address, 2, 0x0003, 2, proxy)\n\
    \            self.cc3s = Field(\"cc3s\", \"Capture/compare 3\n               \
    \           selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class\
    \ CcerRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"CCER\", \"capture/compare enable\n              register\"\
    , address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n            self.cc4p\
    \ = Field(\"cc4p\", \"Capture/Compare 3 output\n                          Polarity\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.cc4e = Field(\"cc4e\"\
    , \"Capture/Compare 4 output\n                          enable\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.cc3np = Field(\"cc3np\", \"Capture/Compare\
    \ 3 output\n                          Polarity\", self._address, 11, 0x0001, 1,\
    \ proxy)\n            self.cc3ne = Field(\"cc3ne\", \"Capture/Compare 3 complementary\
    \ output\n                          enable\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.cc3p = Field(\"cc3p\", \"Capture/Compare 3 output\n        \
    \                  Polarity\", self._address, 9, 0x0001, 1, proxy)\n         \
    \   self.cc3e = Field(\"cc3e\", \"Capture/Compare 3 output\n                 \
    \         enable\", self._address, 8, 0x0001, 1, proxy)\n            self.cc2np\
    \ = Field(\"cc2np\", \"Capture/Compare 2 output\n                          Polarity\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.cc2ne = Field(\"cc2ne\"\
    , \"Capture/Compare 2 complementary output\n                          enable\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare\
    \ 2 output\n                          enable\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n      \
    \                    Polarity\", self._address, 3, 0x0001, 1, proxy)\n       \
    \     self.cc1ne = Field(\"cc1ne\", \"Capture/Compare 1 complementary output\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n           \
    \               Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt = Field(\"cnt\", \"counter value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR2\", \"capture/compare register 2\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr2 = Field(\"ccr2\", \"Capture/Compare 2\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR3\", \"capture/compare register 3\", address + 0x003C, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr3 = Field(\"ccr3\", \"Capture/Compare value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR4\", \"capture/compare register 4\", address + 0x0040, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr4 = Field(\"ccr4\", \"Capture/Compare value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class DcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DCR\", \"DMA control register\", address + 0x0048, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.dbl = Field(\"dbl\", \"DMA burst length\", self._address,\
    \ 8, 0x001F, 5, proxy)\n            self.dba = Field(\"dba\", \"DMA base address\"\
    , self._address, 0, 0x001F, 5, proxy)\n    \n    class DmarRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DMAR\", \"DMA address for full transfer\", address + 0x004C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmab = Field(\"dmab\", \"DMA register for burst\n\
    \                          accesses\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class RcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RCR\", \"repetition counter register\", address\
    \ + 0x0030, 32, \"read-write\", 0x0000, proxy)\n            self.rep = Field(\"\
    rep\", \"Repetition counter value\", self._address, 0, 0x00FF, 8, proxy)\n   \
    \ \n    class BdtrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BDTR\", \"break and dead-time register\", address\
    \ + 0x0044, 32, \"read-write\", 0x0000, proxy)\n            self.moe = Field(\"\
    moe\", \"Main output enable\", self._address, 15, 0x0001, 1, proxy)\n        \
    \    self.aoe = Field(\"aoe\", \"Automatic output enable\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.bkp = Field(\"bkp\", \"Break polarity\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.bke = Field(\"bke\",\
    \ \"Break enable\", self._address, 12, 0x0001, 1, proxy)\n            self.ossr\
    \ = Field(\"ossr\", \"Off-state selection for Run\n                          mode\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.ossi = Field(\"ossi\"\
    , \"Off-state selection for Idle\n                          mode\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.lock = Field(\"lock\", \"Lock configuration\"\
    , self._address, 8, 0x0003, 2, proxy)\n            self.dtg = Field(\"dtg\", \"\
    Dead-time generator setup\", self._address, 0, 0x00FF, 8, proxy)\n    \n    def\
    \ __init__(self, proxy):\n        super().__init__(\"tim8\", \"Advanced-timers\"\
    , 0x40010400)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n    \
    \    self.cr2 = self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccmr2_output = self.Ccmr2_outputRegister(self.address, proxy)\n\
    \        self.ccmr2_input = self.Ccmr2_inputRegister(self.address, proxy)\n  \
    \      self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt =\
    \ self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n        self.ccr3 = self.Ccr3Register(self.address, proxy)\n       \
    \ self.ccr4 = self.Ccr4Register(self.address, proxy)\n        self.dcr = self.DcrRegister(self.address,\
    \ proxy)\n        self.dmar = self.DmarRegister(self.address, proxy)\n       \
    \ self.rcr = self.RcrRegister(self.address, proxy)\n        self.bdtr = self.BdtrRegister(self.address,\
    \ proxy)\n"
  name: TIM8
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim2(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.cms = Field(\"cms\", \"Center-aligned mode\n      \
    \                    selection\", self._address, 5, 0x0003, 2, proxy)\n      \
    \      self.dir = Field(\"dir\", \"Direction\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ti1s = Field(\"ti1s\",\
    \ \"TI1 selection\", self._address, 7, 0x0001, 1, proxy)\n            self.mms\
    \ = Field(\"mms\", \"Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.ccds = Field(\"ccds\", \"Capture/compare DMA\n             \
    \             selection\", self._address, 3, 0x0001, 1, proxy)\n    \n    class\
    \ SmcrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SMCR\", \"slave mode control register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.etp = Field(\"\
    etp\", \"External trigger polarity\", self._address, 15, 0x0001, 1, proxy)\n \
    \           self.ece = Field(\"ece\", \"External clock enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.etps = Field(\"etps\", \"External trigger\
    \ prescaler\", self._address, 12, 0x0003, 2, proxy)\n            self.etf = Field(\"\
    etf\", \"External trigger filter\", self._address, 8, 0x000F, 4, proxy)\n    \
    \        self.msm = Field(\"msm\", \"Master/Slave mode\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.ts = Field(\"ts\", \"Trigger selection\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\"\
    , self._address, 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.tde = Field(\"tde\", \"Trigger DMA request\
    \ enable\", self._address, 14, 0x0001, 1, proxy)\n            self.cc4de = Field(\"\
    cc4de\", \"Capture/Compare 4 DMA request\n                          enable\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.cc3de = Field(\"cc3de\"\
    , \"Capture/Compare 3 DMA request\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2de = Field(\"cc2de\", \"Capture/Compare\
    \ 2 DMA request\n                          enable\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1de = Field(\"cc1de\", \"Capture/Compare 1 DMA\
    \ request\n                          enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ude = Field(\"ude\", \"Update DMA request enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.tie = Field(\"tie\", \"Trigger interrupt\
    \ enable\", self._address, 6, 0x0001, 1, proxy)\n            self.cc4ie = Field(\"\
    cc4ie\", \"Capture/Compare 4 interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3ie = Field(\"cc3ie\", \"Capture/Compare\
    \ 3 interrupt\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare 2 interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n      \
    \                    enable\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.uie = Field(\"uie\", \"Update interrupt enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc4of\
    \ = Field(\"cc4of\", \"Capture/Compare 4 overcapture\n                       \
    \   flag\", self._address, 12, 0x0001, 1, proxy)\n            self.cc3of = Field(\"\
    cc3of\", \"Capture/Compare 3 overcapture\n                          flag\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2of = Field(\"cc2of\", \"Capture/compare\
    \ 2 overcapture\n                          flag\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1of = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n\
    \                          flag\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.tif = Field(\"tif\", \"Trigger interrupt flag\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.cc4if = Field(\"cc4if\", \"Capture/Compare\
    \ 4 interrupt\n                          flag\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.cc3if = Field(\"cc3if\", \"Capture/Compare 3 interrupt\n\
    \                          flag\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.cc2if = Field(\"cc2if\", \"Capture/Compare 2 interrupt\n        \
    \                  flag\", self._address, 2, 0x0001, 1, proxy)\n            self.cc1if\
    \ = Field(\"cc1if\", \"Capture/compare 1 interrupt\n                         \
    \ flag\", self._address, 1, 0x0001, 1, proxy)\n            self.uif = Field(\"\
    uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n    \n\
    \    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.tg = Field(\"\
    tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.cc4g = Field(\"cc4g\", \"Capture/compare 4\n                         \
    \ generation\", self._address, 4, 0x0001, 1, proxy)\n            self.cc3g = Field(\"\
    cc3g\", \"Capture/compare 3\n                          generation\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc2g = Field(\"cc2g\", \"Capture/compare\
    \ 2\n                          generation\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n               \
    \           generation\", self._address, 1, 0x0001, 1, proxy)\n            self.ug\
    \ = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare mode\
    \ register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc2ce = Field(\"oc2ce\", \"OC2CE\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.oc2m = Field(\"oc2m\", \"OC2M\", self._address,\
    \ 12, 0x0007, 3, proxy)\n            self.oc2pe = Field(\"oc2pe\", \"OC2PE\",\
    \ self._address, 11, 0x0001, 1, proxy)\n            self.oc2fe = Field(\"oc2fe\"\
    , \"OC2FE\", self._address, 10, 0x0001, 1, proxy)\n            self.cc2s = Field(\"\
    cc2s\", \"CC2S\", self._address, 8, 0x0003, 2, proxy)\n            self.oc1ce\
    \ = Field(\"oc1ce\", \"OC1CE\", self._address, 7, 0x0001, 1, proxy)\n        \
    \    self.oc1m = Field(\"oc1m\", \"OC1M\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.oc1pe = Field(\"oc1pe\", \"OC1PE\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"OC1FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\", \"CC1S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Output\", \"capture/compare mode register 2 (output\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.oc4ce\
    \ = Field(\"oc4ce\", \"OC4CE\", self._address, 15, 0x0001, 1, proxy)\n       \
    \     self.oc4m = Field(\"oc4m\", \"OC4M\", self._address, 12, 0x0007, 3, proxy)\n\
    \            self.oc4pe = Field(\"oc4pe\", \"OC4PE\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.oc4fe = Field(\"oc4fe\", \"OC4FE\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.cc4s = Field(\"cc4s\", \"CC4S\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.oc3ce = Field(\"oc3ce\", \"OC3CE\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.oc3m = Field(\"oc3m\", \"OC3M\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.oc3pe = Field(\"oc3pe\", \"OC3PE\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc3fe = Field(\"oc3fe\", \"OC3FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc3s = Field(\"cc3s\", \"CC3S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR2_Input\"\
    , \"capture/compare mode register 2 (input\n              mode)\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic4f = Field(\"ic4f\",\
    \ \"Input capture 4 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic4psc = Field(\"ic4psc\", \"Input capture 4 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc4s = Field(\"cc4s\", \"Capture/Compare\
    \ 4\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic3f = Field(\"ic3f\", \"Input capture 3 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.ic3psc = Field(\"ic3psc\", \"Input capture\
    \ 3 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc3s =\
    \ Field(\"cc3s\", \"Capture/compare 3\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc4np = Field(\"cc4np\"\
    , \"Capture/Compare 4 output\n                          Polarity\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.cc4p = Field(\"cc4p\", \"Capture/Compare\
    \ 3 output\n                          Polarity\", self._address, 13, 0x0001, 1,\
    \ proxy)\n            self.cc4e = Field(\"cc4e\", \"Capture/Compare 4 output\n\
    \                          enable\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.cc3np = Field(\"cc3np\", \"Capture/Compare 3 output\n        \
    \                  Polarity\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.cc3p = Field(\"cc3p\", \"Capture/Compare 3 output\n                \
    \          Polarity\", self._address, 9, 0x0001, 1, proxy)\n            self.cc3e\
    \ = Field(\"cc3e\", \"Capture/Compare 3 output\n                          enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.cc2np = Field(\"cc2np\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\", \"Capture/Compare\
    \ 2 output\n                          Polarity\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare 2 output\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n         \
    \                 Polarity\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n                  \
    \        Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt_h = Field(\"cnt_h\", \"High counter value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.cnt_l = Field(\"cnt_l\", \"Low counter\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PSC\", \"prescaler\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class ArrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ARR\", \"auto-reload register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.arr_h\
    \ = Field(\"arr_h\", \"High Auto-reload value\", self._address, 16, 0xFFFF, 16,\
    \ proxy)\n            self.arr_l = Field(\"arr_l\", \"Low Auto-reload value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1_h = Field(\"ccr1_h\", \"High Capture/Compare\
    \ 1\n                          value\", self._address, 16, 0xFFFF, 16, proxy)\n\
    \            self.ccr1_l = Field(\"ccr1_l\", \"Low Capture/Compare 1\n       \
    \                   value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Ccr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"CCR2\", \"capture/compare register 2\", address + 0x0038,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ccr2_h = Field(\"ccr2_h\"\
    , \"High Capture/Compare 2\n                          value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.ccr2_l = Field(\"ccr2_l\", \"Low Capture/Compare\
    \ 2\n                          value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class Ccr3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCR3\", \"capture/compare register 3\"\
    , address + 0x003C, 32, \"read-write\", 0x0000, proxy)\n            self.ccr3_h\
    \ = Field(\"ccr3_h\", \"High Capture/Compare value\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.ccr3_l = Field(\"ccr3_l\", \"Low Capture/Compare\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR4\", \"capture/compare register 4\", address + 0x0040, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr4_h = Field(\"ccr4_h\", \"High Capture/Compare\
    \ value\", self._address, 16, 0xFFFF, 16, proxy)\n            self.ccr4_l = Field(\"\
    ccr4_l\", \"Low Capture/Compare value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class DcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DCR\", \"DMA control register\", address + 0x0048,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.dbl = Field(\"dbl\", \"\
    DMA burst length\", self._address, 8, 0x001F, 5, proxy)\n            self.dba\
    \ = Field(\"dba\", \"DMA base address\", self._address, 0, 0x001F, 5, proxy)\n\
    \    \n    class DmarRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DMAR\", \"DMA address for full transfer\"\
    , address + 0x004C, 32, \"read-write\", 0x0000, proxy)\n            self.dmab\
    \ = Field(\"dmab\", \"DMA register for burst\n                          accesses\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class _orRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    _OR\", \"TIM5 option register\", address + 0x0050, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.itr1_rmp = Field(\"itr1_rmp\", \"Timer Input 4 remap\"\
    , self._address, 10, 0x0003, 2, proxy)\n    \n    def __init__(self, proxy):\n\
    \        super().__init__(\"tim2\", \"General purpose timers\", 0x40000000)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccmr2_output = self.Ccmr2_outputRegister(self.address, proxy)\n\
    \        self.ccmr2_input = self.Ccmr2_inputRegister(self.address, proxy)\n  \
    \      self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt =\
    \ self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n        self.ccr3 = self.Ccr3Register(self.address, proxy)\n       \
    \ self.ccr4 = self.Ccr4Register(self.address, proxy)\n        self.dcr = self.DcrRegister(self.address,\
    \ proxy)\n        self.dmar = self.DmarRegister(self.address, proxy)\n       \
    \ self._or = self._orRegister(self.address, proxy)\n"
  name: TIM2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim3(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.cms = Field(\"cms\", \"Center-aligned mode\n      \
    \                    selection\", self._address, 5, 0x0003, 2, proxy)\n      \
    \      self.dir = Field(\"dir\", \"Direction\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ti1s = Field(\"ti1s\",\
    \ \"TI1 selection\", self._address, 7, 0x0001, 1, proxy)\n            self.mms\
    \ = Field(\"mms\", \"Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.ccds = Field(\"ccds\", \"Capture/compare DMA\n             \
    \             selection\", self._address, 3, 0x0001, 1, proxy)\n    \n    class\
    \ SmcrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SMCR\", \"slave mode control register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.etp = Field(\"\
    etp\", \"External trigger polarity\", self._address, 15, 0x0001, 1, proxy)\n \
    \           self.ece = Field(\"ece\", \"External clock enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.etps = Field(\"etps\", \"External trigger\
    \ prescaler\", self._address, 12, 0x0003, 2, proxy)\n            self.etf = Field(\"\
    etf\", \"External trigger filter\", self._address, 8, 0x000F, 4, proxy)\n    \
    \        self.msm = Field(\"msm\", \"Master/Slave mode\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.ts = Field(\"ts\", \"Trigger selection\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\"\
    , self._address, 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.tde = Field(\"tde\", \"Trigger DMA request\
    \ enable\", self._address, 14, 0x0001, 1, proxy)\n            self.cc4de = Field(\"\
    cc4de\", \"Capture/Compare 4 DMA request\n                          enable\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.cc3de = Field(\"cc3de\"\
    , \"Capture/Compare 3 DMA request\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2de = Field(\"cc2de\", \"Capture/Compare\
    \ 2 DMA request\n                          enable\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1de = Field(\"cc1de\", \"Capture/Compare 1 DMA\
    \ request\n                          enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ude = Field(\"ude\", \"Update DMA request enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.tie = Field(\"tie\", \"Trigger interrupt\
    \ enable\", self._address, 6, 0x0001, 1, proxy)\n            self.cc4ie = Field(\"\
    cc4ie\", \"Capture/Compare 4 interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3ie = Field(\"cc3ie\", \"Capture/Compare\
    \ 3 interrupt\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare 2 interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n      \
    \                    enable\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.uie = Field(\"uie\", \"Update interrupt enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc4of\
    \ = Field(\"cc4of\", \"Capture/Compare 4 overcapture\n                       \
    \   flag\", self._address, 12, 0x0001, 1, proxy)\n            self.cc3of = Field(\"\
    cc3of\", \"Capture/Compare 3 overcapture\n                          flag\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2of = Field(\"cc2of\", \"Capture/compare\
    \ 2 overcapture\n                          flag\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1of = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n\
    \                          flag\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.tif = Field(\"tif\", \"Trigger interrupt flag\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.cc4if = Field(\"cc4if\", \"Capture/Compare\
    \ 4 interrupt\n                          flag\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.cc3if = Field(\"cc3if\", \"Capture/Compare 3 interrupt\n\
    \                          flag\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.cc2if = Field(\"cc2if\", \"Capture/Compare 2 interrupt\n        \
    \                  flag\", self._address, 2, 0x0001, 1, proxy)\n            self.cc1if\
    \ = Field(\"cc1if\", \"Capture/compare 1 interrupt\n                         \
    \ flag\", self._address, 1, 0x0001, 1, proxy)\n            self.uif = Field(\"\
    uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n    \n\
    \    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.tg = Field(\"\
    tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.cc4g = Field(\"cc4g\", \"Capture/compare 4\n                         \
    \ generation\", self._address, 4, 0x0001, 1, proxy)\n            self.cc3g = Field(\"\
    cc3g\", \"Capture/compare 3\n                          generation\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc2g = Field(\"cc2g\", \"Capture/compare\
    \ 2\n                          generation\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n               \
    \           generation\", self._address, 1, 0x0001, 1, proxy)\n            self.ug\
    \ = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare mode\
    \ register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc2ce = Field(\"oc2ce\", \"OC2CE\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.oc2m = Field(\"oc2m\", \"OC2M\", self._address,\
    \ 12, 0x0007, 3, proxy)\n            self.oc2pe = Field(\"oc2pe\", \"OC2PE\",\
    \ self._address, 11, 0x0001, 1, proxy)\n            self.oc2fe = Field(\"oc2fe\"\
    , \"OC2FE\", self._address, 10, 0x0001, 1, proxy)\n            self.cc2s = Field(\"\
    cc2s\", \"CC2S\", self._address, 8, 0x0003, 2, proxy)\n            self.oc1ce\
    \ = Field(\"oc1ce\", \"OC1CE\", self._address, 7, 0x0001, 1, proxy)\n        \
    \    self.oc1m = Field(\"oc1m\", \"OC1M\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.oc1pe = Field(\"oc1pe\", \"OC1PE\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"OC1FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\", \"CC1S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Output\", \"capture/compare mode register 2 (output\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.oc4ce\
    \ = Field(\"oc4ce\", \"OC4CE\", self._address, 15, 0x0001, 1, proxy)\n       \
    \     self.oc4m = Field(\"oc4m\", \"OC4M\", self._address, 12, 0x0007, 3, proxy)\n\
    \            self.oc4pe = Field(\"oc4pe\", \"OC4PE\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.oc4fe = Field(\"oc4fe\", \"OC4FE\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.cc4s = Field(\"cc4s\", \"CC4S\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.oc3ce = Field(\"oc3ce\", \"OC3CE\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.oc3m = Field(\"oc3m\", \"OC3M\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.oc3pe = Field(\"oc3pe\", \"OC3PE\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc3fe = Field(\"oc3fe\", \"OC3FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc3s = Field(\"cc3s\", \"CC3S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR2_Input\"\
    , \"capture/compare mode register 2 (input\n              mode)\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic4f = Field(\"ic4f\",\
    \ \"Input capture 4 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic4psc = Field(\"ic4psc\", \"Input capture 4 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc4s = Field(\"cc4s\", \"Capture/Compare\
    \ 4\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic3f = Field(\"ic3f\", \"Input capture 3 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.ic3psc = Field(\"ic3psc\", \"Input capture\
    \ 3 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc3s =\
    \ Field(\"cc3s\", \"Capture/compare 3\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc4np = Field(\"cc4np\"\
    , \"Capture/Compare 4 output\n                          Polarity\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.cc4p = Field(\"cc4p\", \"Capture/Compare\
    \ 3 output\n                          Polarity\", self._address, 13, 0x0001, 1,\
    \ proxy)\n            self.cc4e = Field(\"cc4e\", \"Capture/Compare 4 output\n\
    \                          enable\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.cc3np = Field(\"cc3np\", \"Capture/Compare 3 output\n        \
    \                  Polarity\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.cc3p = Field(\"cc3p\", \"Capture/Compare 3 output\n                \
    \          Polarity\", self._address, 9, 0x0001, 1, proxy)\n            self.cc3e\
    \ = Field(\"cc3e\", \"Capture/Compare 3 output\n                          enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.cc2np = Field(\"cc2np\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\", \"Capture/Compare\
    \ 2 output\n                          Polarity\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare 2 output\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n         \
    \                 Polarity\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n                  \
    \        Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt_h = Field(\"cnt_h\", \"High counter value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.cnt_l = Field(\"cnt_l\", \"Low counter\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PSC\", \"prescaler\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class ArrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ARR\", \"auto-reload register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.arr_h\
    \ = Field(\"arr_h\", \"High Auto-reload value\", self._address, 16, 0xFFFF, 16,\
    \ proxy)\n            self.arr_l = Field(\"arr_l\", \"Low Auto-reload value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1_h = Field(\"ccr1_h\", \"High Capture/Compare\
    \ 1\n                          value\", self._address, 16, 0xFFFF, 16, proxy)\n\
    \            self.ccr1_l = Field(\"ccr1_l\", \"Low Capture/Compare 1\n       \
    \                   value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Ccr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"CCR2\", \"capture/compare register 2\", address + 0x0038,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ccr2_h = Field(\"ccr2_h\"\
    , \"High Capture/Compare 2\n                          value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.ccr2_l = Field(\"ccr2_l\", \"Low Capture/Compare\
    \ 2\n                          value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class Ccr3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCR3\", \"capture/compare register 3\"\
    , address + 0x003C, 32, \"read-write\", 0x0000, proxy)\n            self.ccr3_h\
    \ = Field(\"ccr3_h\", \"High Capture/Compare value\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.ccr3_l = Field(\"ccr3_l\", \"Low Capture/Compare\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR4\", \"capture/compare register 4\", address + 0x0040, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr4_h = Field(\"ccr4_h\", \"High Capture/Compare\
    \ value\", self._address, 16, 0xFFFF, 16, proxy)\n            self.ccr4_l = Field(\"\
    ccr4_l\", \"Low Capture/Compare value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class DcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DCR\", \"DMA control register\", address + 0x0048,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.dbl = Field(\"dbl\", \"\
    DMA burst length\", self._address, 8, 0x001F, 5, proxy)\n            self.dba\
    \ = Field(\"dba\", \"DMA base address\", self._address, 0, 0x001F, 5, proxy)\n\
    \    \n    class DmarRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DMAR\", \"DMA address for full transfer\"\
    , address + 0x004C, 32, \"read-write\", 0x0000, proxy)\n            self.dmab\
    \ = Field(\"dmab\", \"DMA register for burst\n                          accesses\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self, proxy):\n\
    \        super().__init__(\"tim3\", \"General purpose timers\", 0x40000400)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccmr2_output = self.Ccmr2_outputRegister(self.address, proxy)\n\
    \        self.ccmr2_input = self.Ccmr2_inputRegister(self.address, proxy)\n  \
    \      self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt =\
    \ self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n        self.ccr3 = self.Ccr3Register(self.address, proxy)\n       \
    \ self.ccr4 = self.Ccr4Register(self.address, proxy)\n        self.dcr = self.DcrRegister(self.address,\
    \ proxy)\n        self.dmar = self.DmarRegister(self.address, proxy)\n"
  name: TIM3
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim4(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.cms = Field(\"cms\", \"Center-aligned mode\n      \
    \                    selection\", self._address, 5, 0x0003, 2, proxy)\n      \
    \      self.dir = Field(\"dir\", \"Direction\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ti1s = Field(\"ti1s\",\
    \ \"TI1 selection\", self._address, 7, 0x0001, 1, proxy)\n            self.mms\
    \ = Field(\"mms\", \"Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.ccds = Field(\"ccds\", \"Capture/compare DMA\n             \
    \             selection\", self._address, 3, 0x0001, 1, proxy)\n    \n    class\
    \ SmcrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SMCR\", \"slave mode control register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.etp = Field(\"\
    etp\", \"External trigger polarity\", self._address, 15, 0x0001, 1, proxy)\n \
    \           self.ece = Field(\"ece\", \"External clock enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.etps = Field(\"etps\", \"External trigger\
    \ prescaler\", self._address, 12, 0x0003, 2, proxy)\n            self.etf = Field(\"\
    etf\", \"External trigger filter\", self._address, 8, 0x000F, 4, proxy)\n    \
    \        self.msm = Field(\"msm\", \"Master/Slave mode\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.ts = Field(\"ts\", \"Trigger selection\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\"\
    , self._address, 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.tde = Field(\"tde\", \"Trigger DMA request\
    \ enable\", self._address, 14, 0x0001, 1, proxy)\n            self.cc4de = Field(\"\
    cc4de\", \"Capture/Compare 4 DMA request\n                          enable\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.cc3de = Field(\"cc3de\"\
    , \"Capture/Compare 3 DMA request\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2de = Field(\"cc2de\", \"Capture/Compare\
    \ 2 DMA request\n                          enable\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1de = Field(\"cc1de\", \"Capture/Compare 1 DMA\
    \ request\n                          enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ude = Field(\"ude\", \"Update DMA request enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.tie = Field(\"tie\", \"Trigger interrupt\
    \ enable\", self._address, 6, 0x0001, 1, proxy)\n            self.cc4ie = Field(\"\
    cc4ie\", \"Capture/Compare 4 interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3ie = Field(\"cc3ie\", \"Capture/Compare\
    \ 3 interrupt\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare 2 interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n      \
    \                    enable\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.uie = Field(\"uie\", \"Update interrupt enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc4of\
    \ = Field(\"cc4of\", \"Capture/Compare 4 overcapture\n                       \
    \   flag\", self._address, 12, 0x0001, 1, proxy)\n            self.cc3of = Field(\"\
    cc3of\", \"Capture/Compare 3 overcapture\n                          flag\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2of = Field(\"cc2of\", \"Capture/compare\
    \ 2 overcapture\n                          flag\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1of = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n\
    \                          flag\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.tif = Field(\"tif\", \"Trigger interrupt flag\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.cc4if = Field(\"cc4if\", \"Capture/Compare\
    \ 4 interrupt\n                          flag\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.cc3if = Field(\"cc3if\", \"Capture/Compare 3 interrupt\n\
    \                          flag\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.cc2if = Field(\"cc2if\", \"Capture/Compare 2 interrupt\n        \
    \                  flag\", self._address, 2, 0x0001, 1, proxy)\n            self.cc1if\
    \ = Field(\"cc1if\", \"Capture/compare 1 interrupt\n                         \
    \ flag\", self._address, 1, 0x0001, 1, proxy)\n            self.uif = Field(\"\
    uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n    \n\
    \    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.tg = Field(\"\
    tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.cc4g = Field(\"cc4g\", \"Capture/compare 4\n                         \
    \ generation\", self._address, 4, 0x0001, 1, proxy)\n            self.cc3g = Field(\"\
    cc3g\", \"Capture/compare 3\n                          generation\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc2g = Field(\"cc2g\", \"Capture/compare\
    \ 2\n                          generation\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n               \
    \           generation\", self._address, 1, 0x0001, 1, proxy)\n            self.ug\
    \ = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare mode\
    \ register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc2ce = Field(\"oc2ce\", \"OC2CE\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.oc2m = Field(\"oc2m\", \"OC2M\", self._address,\
    \ 12, 0x0007, 3, proxy)\n            self.oc2pe = Field(\"oc2pe\", \"OC2PE\",\
    \ self._address, 11, 0x0001, 1, proxy)\n            self.oc2fe = Field(\"oc2fe\"\
    , \"OC2FE\", self._address, 10, 0x0001, 1, proxy)\n            self.cc2s = Field(\"\
    cc2s\", \"CC2S\", self._address, 8, 0x0003, 2, proxy)\n            self.oc1ce\
    \ = Field(\"oc1ce\", \"OC1CE\", self._address, 7, 0x0001, 1, proxy)\n        \
    \    self.oc1m = Field(\"oc1m\", \"OC1M\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.oc1pe = Field(\"oc1pe\", \"OC1PE\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"OC1FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\", \"CC1S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Output\", \"capture/compare mode register 2 (output\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.oc4ce\
    \ = Field(\"oc4ce\", \"OC4CE\", self._address, 15, 0x0001, 1, proxy)\n       \
    \     self.oc4m = Field(\"oc4m\", \"OC4M\", self._address, 12, 0x0007, 3, proxy)\n\
    \            self.oc4pe = Field(\"oc4pe\", \"OC4PE\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.oc4fe = Field(\"oc4fe\", \"OC4FE\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.cc4s = Field(\"cc4s\", \"CC4S\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.oc3ce = Field(\"oc3ce\", \"OC3CE\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.oc3m = Field(\"oc3m\", \"OC3M\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.oc3pe = Field(\"oc3pe\", \"OC3PE\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc3fe = Field(\"oc3fe\", \"OC3FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc3s = Field(\"cc3s\", \"CC3S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR2_Input\"\
    , \"capture/compare mode register 2 (input\n              mode)\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic4f = Field(\"ic4f\",\
    \ \"Input capture 4 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic4psc = Field(\"ic4psc\", \"Input capture 4 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc4s = Field(\"cc4s\", \"Capture/Compare\
    \ 4\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic3f = Field(\"ic3f\", \"Input capture 3 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.ic3psc = Field(\"ic3psc\", \"Input capture\
    \ 3 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc3s =\
    \ Field(\"cc3s\", \"Capture/compare 3\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc4np = Field(\"cc4np\"\
    , \"Capture/Compare 4 output\n                          Polarity\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.cc4p = Field(\"cc4p\", \"Capture/Compare\
    \ 3 output\n                          Polarity\", self._address, 13, 0x0001, 1,\
    \ proxy)\n            self.cc4e = Field(\"cc4e\", \"Capture/Compare 4 output\n\
    \                          enable\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.cc3np = Field(\"cc3np\", \"Capture/Compare 3 output\n        \
    \                  Polarity\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.cc3p = Field(\"cc3p\", \"Capture/Compare 3 output\n                \
    \          Polarity\", self._address, 9, 0x0001, 1, proxy)\n            self.cc3e\
    \ = Field(\"cc3e\", \"Capture/Compare 3 output\n                          enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.cc2np = Field(\"cc2np\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\", \"Capture/Compare\
    \ 2 output\n                          Polarity\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare 2 output\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n         \
    \                 Polarity\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n                  \
    \        Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt_h = Field(\"cnt_h\", \"High counter value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.cnt_l = Field(\"cnt_l\", \"Low counter\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PSC\", \"prescaler\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class ArrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ARR\", \"auto-reload register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.arr_h\
    \ = Field(\"arr_h\", \"High Auto-reload value\", self._address, 16, 0xFFFF, 16,\
    \ proxy)\n            self.arr_l = Field(\"arr_l\", \"Low Auto-reload value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1_h = Field(\"ccr1_h\", \"High Capture/Compare\
    \ 1\n                          value\", self._address, 16, 0xFFFF, 16, proxy)\n\
    \            self.ccr1_l = Field(\"ccr1_l\", \"Low Capture/Compare 1\n       \
    \                   value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Ccr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"CCR2\", \"capture/compare register 2\", address + 0x0038,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ccr2_h = Field(\"ccr2_h\"\
    , \"High Capture/Compare 2\n                          value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.ccr2_l = Field(\"ccr2_l\", \"Low Capture/Compare\
    \ 2\n                          value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class Ccr3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCR3\", \"capture/compare register 3\"\
    , address + 0x003C, 32, \"read-write\", 0x0000, proxy)\n            self.ccr3_h\
    \ = Field(\"ccr3_h\", \"High Capture/Compare value\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.ccr3_l = Field(\"ccr3_l\", \"Low Capture/Compare\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR4\", \"capture/compare register 4\", address + 0x0040, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr4_h = Field(\"ccr4_h\", \"High Capture/Compare\
    \ value\", self._address, 16, 0xFFFF, 16, proxy)\n            self.ccr4_l = Field(\"\
    ccr4_l\", \"Low Capture/Compare value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class DcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DCR\", \"DMA control register\", address + 0x0048,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.dbl = Field(\"dbl\", \"\
    DMA burst length\", self._address, 8, 0x001F, 5, proxy)\n            self.dba\
    \ = Field(\"dba\", \"DMA base address\", self._address, 0, 0x001F, 5, proxy)\n\
    \    \n    class DmarRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DMAR\", \"DMA address for full transfer\"\
    , address + 0x004C, 32, \"read-write\", 0x0000, proxy)\n            self.dmab\
    \ = Field(\"dmab\", \"DMA register for burst\n                          accesses\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self, proxy):\n\
    \        super().__init__(\"tim4\", \"General purpose timers\", 0x40000800)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccmr2_output = self.Ccmr2_outputRegister(self.address, proxy)\n\
    \        self.ccmr2_input = self.Ccmr2_inputRegister(self.address, proxy)\n  \
    \      self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt =\
    \ self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n        self.ccr3 = self.Ccr3Register(self.address, proxy)\n       \
    \ self.ccr4 = self.Ccr4Register(self.address, proxy)\n        self.dcr = self.DcrRegister(self.address,\
    \ proxy)\n        self.dmar = self.DmarRegister(self.address, proxy)\n"
  name: TIM4
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim5(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.cms = Field(\"cms\", \"Center-aligned mode\n      \
    \                    selection\", self._address, 5, 0x0003, 2, proxy)\n      \
    \      self.dir = Field(\"dir\", \"Direction\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ti1s = Field(\"ti1s\",\
    \ \"TI1 selection\", self._address, 7, 0x0001, 1, proxy)\n            self.mms\
    \ = Field(\"mms\", \"Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.ccds = Field(\"ccds\", \"Capture/compare DMA\n             \
    \             selection\", self._address, 3, 0x0001, 1, proxy)\n    \n    class\
    \ SmcrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SMCR\", \"slave mode control register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.etp = Field(\"\
    etp\", \"External trigger polarity\", self._address, 15, 0x0001, 1, proxy)\n \
    \           self.ece = Field(\"ece\", \"External clock enable\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.etps = Field(\"etps\", \"External trigger\
    \ prescaler\", self._address, 12, 0x0003, 2, proxy)\n            self.etf = Field(\"\
    etf\", \"External trigger filter\", self._address, 8, 0x000F, 4, proxy)\n    \
    \        self.msm = Field(\"msm\", \"Master/Slave mode\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.ts = Field(\"ts\", \"Trigger selection\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\"\
    , self._address, 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.tde = Field(\"tde\", \"Trigger DMA request\
    \ enable\", self._address, 14, 0x0001, 1, proxy)\n            self.cc4de = Field(\"\
    cc4de\", \"Capture/Compare 4 DMA request\n                          enable\",\
    \ self._address, 12, 0x0001, 1, proxy)\n            self.cc3de = Field(\"cc3de\"\
    , \"Capture/Compare 3 DMA request\n                          enable\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2de = Field(\"cc2de\", \"Capture/Compare\
    \ 2 DMA request\n                          enable\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1de = Field(\"cc1de\", \"Capture/Compare 1 DMA\
    \ request\n                          enable\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.ude = Field(\"ude\", \"Update DMA request enable\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.tie = Field(\"tie\", \"Trigger interrupt\
    \ enable\", self._address, 6, 0x0001, 1, proxy)\n            self.cc4ie = Field(\"\
    cc4ie\", \"Capture/Compare 4 interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.cc3ie = Field(\"cc3ie\", \"Capture/Compare\
    \ 3 interrupt\n                          enable\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare 2 interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n      \
    \                    enable\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.uie = Field(\"uie\", \"Update interrupt enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc4of\
    \ = Field(\"cc4of\", \"Capture/Compare 4 overcapture\n                       \
    \   flag\", self._address, 12, 0x0001, 1, proxy)\n            self.cc3of = Field(\"\
    cc3of\", \"Capture/Compare 3 overcapture\n                          flag\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.cc2of = Field(\"cc2of\", \"Capture/compare\
    \ 2 overcapture\n                          flag\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.cc1of = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n\
    \                          flag\", self._address, 9, 0x0001, 1, proxy)\n     \
    \       self.tif = Field(\"tif\", \"Trigger interrupt flag\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.cc4if = Field(\"cc4if\", \"Capture/Compare\
    \ 4 interrupt\n                          flag\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.cc3if = Field(\"cc3if\", \"Capture/Compare 3 interrupt\n\
    \                          flag\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.cc2if = Field(\"cc2if\", \"Capture/Compare 2 interrupt\n        \
    \                  flag\", self._address, 2, 0x0001, 1, proxy)\n            self.cc1if\
    \ = Field(\"cc1if\", \"Capture/compare 1 interrupt\n                         \
    \ flag\", self._address, 1, 0x0001, 1, proxy)\n            self.uif = Field(\"\
    uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n    \n\
    \    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.tg = Field(\"\
    tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.cc4g = Field(\"cc4g\", \"Capture/compare 4\n                         \
    \ generation\", self._address, 4, 0x0001, 1, proxy)\n            self.cc3g = Field(\"\
    cc3g\", \"Capture/compare 3\n                          generation\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc2g = Field(\"cc2g\", \"Capture/compare\
    \ 2\n                          generation\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n               \
    \           generation\", self._address, 1, 0x0001, 1, proxy)\n            self.ug\
    \ = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare mode\
    \ register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc2ce = Field(\"oc2ce\", \"OC2CE\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.oc2m = Field(\"oc2m\", \"OC2M\", self._address,\
    \ 12, 0x0007, 3, proxy)\n            self.oc2pe = Field(\"oc2pe\", \"OC2PE\",\
    \ self._address, 11, 0x0001, 1, proxy)\n            self.oc2fe = Field(\"oc2fe\"\
    , \"OC2FE\", self._address, 10, 0x0001, 1, proxy)\n            self.cc2s = Field(\"\
    cc2s\", \"CC2S\", self._address, 8, 0x0003, 2, proxy)\n            self.oc1ce\
    \ = Field(\"oc1ce\", \"OC1CE\", self._address, 7, 0x0001, 1, proxy)\n        \
    \    self.oc1m = Field(\"oc1m\", \"OC1M\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.oc1pe = Field(\"oc1pe\", \"OC1PE\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"OC1FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\", \"CC1S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR2_Output\", \"capture/compare mode register 2 (output\n              mode)\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.oc4ce\
    \ = Field(\"oc4ce\", \"OC4CE\", self._address, 15, 0x0001, 1, proxy)\n       \
    \     self.oc4m = Field(\"oc4m\", \"OC4M\", self._address, 12, 0x0007, 3, proxy)\n\
    \            self.oc4pe = Field(\"oc4pe\", \"OC4PE\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.oc4fe = Field(\"oc4fe\", \"OC4FE\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.cc4s = Field(\"cc4s\", \"CC4S\", self._address,\
    \ 8, 0x0003, 2, proxy)\n            self.oc3ce = Field(\"oc3ce\", \"OC3CE\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.oc3m = Field(\"oc3m\", \"OC3M\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.oc3pe = Field(\"oc3pe\", \"OC3PE\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc3fe = Field(\"oc3fe\", \"OC3FE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc3s = Field(\"cc3s\", \"CC3S\", self._address,\
    \ 0, 0x0003, 2, proxy)\n    \n    class Ccmr2_inputRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"CCMR2_Input\"\
    , \"capture/compare mode register 2 (input\n              mode)\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic4f = Field(\"ic4f\",\
    \ \"Input capture 4 filter\", self._address, 12, 0x000F, 4, proxy)\n         \
    \   self.ic4psc = Field(\"ic4psc\", \"Input capture 4 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc4s = Field(\"cc4s\", \"Capture/Compare\
    \ 4\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic3f = Field(\"ic3f\", \"Input capture 3 filter\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.ic3psc = Field(\"ic3psc\", \"Input capture\
    \ 3 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc3s =\
    \ Field(\"cc3s\", \"Capture/compare 3\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc4np = Field(\"cc4np\"\
    , \"Capture/Compare 4 output\n                          Polarity\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.cc4p = Field(\"cc4p\", \"Capture/Compare\
    \ 3 output\n                          Polarity\", self._address, 13, 0x0001, 1,\
    \ proxy)\n            self.cc4e = Field(\"cc4e\", \"Capture/Compare 4 output\n\
    \                          enable\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.cc3np = Field(\"cc3np\", \"Capture/Compare 3 output\n        \
    \                  Polarity\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.cc3p = Field(\"cc3p\", \"Capture/Compare 3 output\n                \
    \          Polarity\", self._address, 9, 0x0001, 1, proxy)\n            self.cc3e\
    \ = Field(\"cc3e\", \"Capture/Compare 3 output\n                          enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.cc2np = Field(\"cc2np\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\", \"Capture/Compare\
    \ 2 output\n                          Polarity\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare 2 output\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n         \
    \                 Polarity\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n                  \
    \        Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt_h = Field(\"cnt_h\", \"High counter value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.cnt_l = Field(\"cnt_l\", \"Low counter\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PSC\", \"prescaler\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class ArrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ARR\", \"auto-reload register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.arr_h\
    \ = Field(\"arr_h\", \"High Auto-reload value\", self._address, 16, 0xFFFF, 16,\
    \ proxy)\n            self.arr_l = Field(\"arr_l\", \"Low Auto-reload value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1_h = Field(\"ccr1_h\", \"High Capture/Compare\
    \ 1\n                          value\", self._address, 16, 0xFFFF, 16, proxy)\n\
    \            self.ccr1_l = Field(\"ccr1_l\", \"Low Capture/Compare 1\n       \
    \                   value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Ccr2Register(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"CCR2\", \"capture/compare register 2\", address + 0x0038,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ccr2_h = Field(\"ccr2_h\"\
    , \"High Capture/Compare 2\n                          value\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n            self.ccr2_l = Field(\"ccr2_l\", \"Low Capture/Compare\
    \ 2\n                          value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class Ccr3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"CCR3\", \"capture/compare register 3\"\
    , address + 0x003C, 32, \"read-write\", 0x0000, proxy)\n            self.ccr3_h\
    \ = Field(\"ccr3_h\", \"High Capture/Compare value\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.ccr3_l = Field(\"ccr3_l\", \"Low Capture/Compare\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR4\", \"capture/compare register 4\", address + 0x0040, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr4_h = Field(\"ccr4_h\", \"High Capture/Compare\
    \ value\", self._address, 16, 0xFFFF, 16, proxy)\n            self.ccr4_l = Field(\"\
    ccr4_l\", \"Low Capture/Compare value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class DcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DCR\", \"DMA control register\", address + 0x0048,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.dbl = Field(\"dbl\", \"\
    DMA burst length\", self._address, 8, 0x001F, 5, proxy)\n            self.dba\
    \ = Field(\"dba\", \"DMA base address\", self._address, 0, 0x001F, 5, proxy)\n\
    \    \n    class DmarRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DMAR\", \"DMA address for full transfer\"\
    , address + 0x004C, 32, \"read-write\", 0x0000, proxy)\n            self.dmab\
    \ = Field(\"dmab\", \"DMA register for burst\n                          accesses\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class _orRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    _OR\", \"TIM5 option register\", address + 0x0050, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.it4_rmp = Field(\"it4_rmp\", \"Timer Input 4 remap\"\
    , self._address, 6, 0x0003, 2, proxy)\n    \n    def __init__(self, proxy):\n\
    \        super().__init__(\"tim5\", \"General-purpose-timers\", 0x40000C00)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccmr2_output = self.Ccmr2_outputRegister(self.address, proxy)\n\
    \        self.ccmr2_input = self.Ccmr2_inputRegister(self.address, proxy)\n  \
    \      self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt =\
    \ self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n        self.ccr3 = self.Ccr3Register(self.address, proxy)\n       \
    \ self.ccr4 = self.Ccr4Register(self.address, proxy)\n        self.dcr = self.DcrRegister(self.address,\
    \ proxy)\n        self.dmar = self.DmarRegister(self.address, proxy)\n       \
    \ self._or = self._orRegister(self.address, proxy)\n"
  name: TIM5
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim9(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.opm = Field(\"opm\", \"One-pulse mode\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.urs = Field(\"urs\", \"Update request\
    \ source\", self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"\
    udis\", \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mms = Field(\"mms\", \"\
    Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n    \n    class\
    \ SmcrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SMCR\", \"slave mode control register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.msm = Field(\"\
    msm\", \"Master/Slave mode\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.ts = Field(\"ts\", \"Trigger selection\", self._address, 4, 0x0007, 3,\
    \ proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DIER\", \"DMA/Interrupt enable\
    \ register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.tie = Field(\"tie\", \"Trigger interrupt enable\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare\
    \ 2 interrupt\n                          enable\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n\
    \                          enable\", self._address, 1, 0x0001, 1, proxy)\n   \
    \         self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc2of\
    \ = Field(\"cc2of\", \"Capture/compare 2 overcapture\n                       \
    \   flag\", self._address, 10, 0x0001, 1, proxy)\n            self.cc1of = Field(\"\
    cc1of\", \"Capture/Compare 1 overcapture\n                          flag\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.tif = Field(\"tif\", \"Trigger interrupt\
    \ flag\", self._address, 6, 0x0001, 1, proxy)\n            self.cc2if = Field(\"\
    cc2if\", \"Capture/Compare 2 interrupt\n                          flag\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1if = Field(\"cc1if\", \"Capture/compare\
    \ 1 interrupt\n                          flag\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.uif = Field(\"uif\", \"Update interrupt flag\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class EgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"EGR\", \"event generation register\"\
    , address + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.tg =\
    \ Field(\"tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.cc2g = Field(\"cc2g\", \"Capture/compare 2\n               \
    \           generation\", self._address, 2, 0x0001, 1, proxy)\n            self.cc1g\
    \ = Field(\"cc1g\", \"Capture/compare 1\n                          generation\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ug = Field(\"ug\", \"\
    Update generation\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR1_Output\", \"capture/compare mode register 1 (output\n              mode)\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.oc2m\
    \ = Field(\"oc2m\", \"Output Compare 2 mode\", self._address, 12, 0x0007, 3, proxy)\n\
    \            self.oc2pe = Field(\"oc2pe\", \"Output Compare 2 preload\n      \
    \                    enable\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.oc2fe = Field(\"oc2fe\", \"Output Compare 2 fast\n                 \
    \         enable\", self._address, 10, 0x0001, 1, proxy)\n            self.cc2s\
    \ = Field(\"cc2s\", \"Capture/Compare 2\n                          selection\"\
    , self._address, 8, 0x0003, 2, proxy)\n            self.oc1m = Field(\"oc1m\"\
    , \"Output Compare 1 mode\", self._address, 4, 0x0007, 3, proxy)\n           \
    \ self.oc1pe = Field(\"oc1pe\", \"Output Compare 1 preload\n                 \
    \         enable\", self._address, 3, 0x0001, 1, proxy)\n            self.oc1fe\
    \ = Field(\"oc1fe\", \"Output Compare 1 fast\n                          enable\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\"\
    , \"Capture/Compare 1\n                          selection\", self._address, 0,\
    \ 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x0007, 3, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc2np = Field(\"cc2np\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\", \"Capture/Compare\
    \ 2 output\n                          Polarity\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare 2 output\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n         \
    \                 Polarity\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n                  \
    \        Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt = Field(\"cnt\", \"counter value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR2\", \"capture/compare register 2\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr2 = Field(\"ccr2\", \"Capture/Compare 2\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"tim9\", \"General purpose timers\", 0x40014000)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt\
    \ = self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n"
  name: TIM9
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim12(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.opm = Field(\"opm\", \"One-pulse mode\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.urs = Field(\"urs\", \"Update request\
    \ source\", self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"\
    udis\", \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mms = Field(\"mms\", \"\
    Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n    \n    class\
    \ SmcrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"SMCR\", \"slave mode control register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.msm = Field(\"\
    msm\", \"Master/Slave mode\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.ts = Field(\"ts\", \"Trigger selection\", self._address, 4, 0x0007, 3,\
    \ proxy)\n            self.sms = Field(\"sms\", \"Slave mode selection\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class DierRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DIER\", \"DMA/Interrupt enable\
    \ register\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.tie = Field(\"tie\", \"Trigger interrupt enable\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.cc2ie = Field(\"cc2ie\", \"Capture/Compare\
    \ 2 interrupt\n                          enable\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.cc1ie = Field(\"cc1ie\", \"Capture/Compare 1 interrupt\n\
    \                          enable\", self._address, 1, 0x0001, 1, proxy)\n   \
    \         self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc2of\
    \ = Field(\"cc2of\", \"Capture/compare 2 overcapture\n                       \
    \   flag\", self._address, 10, 0x0001, 1, proxy)\n            self.cc1of = Field(\"\
    cc1of\", \"Capture/Compare 1 overcapture\n                          flag\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.tif = Field(\"tif\", \"Trigger interrupt\
    \ flag\", self._address, 6, 0x0001, 1, proxy)\n            self.cc2if = Field(\"\
    cc2if\", \"Capture/Compare 2 interrupt\n                          flag\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.cc1if = Field(\"cc1if\", \"Capture/compare\
    \ 1 interrupt\n                          flag\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.uif = Field(\"uif\", \"Update interrupt flag\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class EgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"EGR\", \"event generation register\"\
    , address + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.tg =\
    \ Field(\"tg\", \"Trigger generation\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.cc2g = Field(\"cc2g\", \"Capture/compare 2\n               \
    \           generation\", self._address, 2, 0x0001, 1, proxy)\n            self.cc1g\
    \ = Field(\"cc1g\", \"Capture/compare 1\n                          generation\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ug = Field(\"ug\", \"\
    Update generation\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCMR1_Output\", \"capture/compare mode register 1 (output\n              mode)\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.oc2m\
    \ = Field(\"oc2m\", \"Output Compare 2 mode\", self._address, 12, 0x0007, 3, proxy)\n\
    \            self.oc2pe = Field(\"oc2pe\", \"Output Compare 2 preload\n      \
    \                    enable\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.oc2fe = Field(\"oc2fe\", \"Output Compare 2 fast\n                 \
    \         enable\", self._address, 10, 0x0001, 1, proxy)\n            self.cc2s\
    \ = Field(\"cc2s\", \"Capture/Compare 2\n                          selection\"\
    , self._address, 8, 0x0003, 2, proxy)\n            self.oc1m = Field(\"oc1m\"\
    , \"Output Compare 1 mode\", self._address, 4, 0x0007, 3, proxy)\n           \
    \ self.oc1pe = Field(\"oc1pe\", \"Output Compare 1 preload\n                 \
    \         enable\", self._address, 3, 0x0001, 1, proxy)\n            self.oc1fe\
    \ = Field(\"oc1fe\", \"Output Compare 1 fast\n                          enable\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.cc1s = Field(\"cc1s\"\
    , \"Capture/Compare 1\n                          selection\", self._address, 0,\
    \ 0x0003, 2, proxy)\n    \n    class Ccmr1_inputRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CCMR1_Input\"\
    , \"capture/compare mode register 1 (input\n              mode)\", address + 0x0018,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ic2f = Field(\"ic2f\",\
    \ \"Input capture 2 filter\", self._address, 12, 0x0007, 3, proxy)\n         \
    \   self.ic2pcs = Field(\"ic2pcs\", \"Input capture 2 prescaler\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.cc2s = Field(\"cc2s\", \"Capture/Compare\
    \ 2\n                          selection\", self._address, 8, 0x0003, 2, proxy)\n\
    \            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.icpcs = Field(\"icpcs\", \"Input capture\
    \ 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n            self.cc1s =\
    \ Field(\"cc1s\", \"Capture/Compare 1\n                          selection\",\
    \ self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc2np = Field(\"cc2np\"\
    , \"Capture/Compare 2 output\n                          Polarity\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cc2p = Field(\"cc2p\", \"Capture/Compare\
    \ 2 output\n                          Polarity\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.cc2e = Field(\"cc2e\", \"Capture/Compare 2 output\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.cc1np = Field(\"cc1np\", \"Capture/Compare 1 output\n         \
    \                 Polarity\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.cc1p = Field(\"cc1p\", \"Capture/Compare 1 output\n                  \
    \        Polarity\", self._address, 1, 0x0001, 1, proxy)\n            self.cc1e\
    \ = Field(\"cc1e\", \"Capture/Compare 1 output\n                          enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n    \n    class CntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CNT\", \"counter\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.cnt = Field(\"cnt\", \"counter value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR2\", \"capture/compare register 2\", address + 0x0038, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr2 = Field(\"ccr2\", \"Capture/Compare 2\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"tim12\", \"General purpose timers\", 0x40001800)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.cr2 =\
    \ self.Cr2Register(self.address, proxy)\n        self.smcr = self.SmcrRegister(self.address,\
    \ proxy)\n        self.dier = self.DierRegister(self.address, proxy)\n       \
    \ self.sr = self.SrRegister(self.address, proxy)\n        self.egr = self.EgrRegister(self.address,\
    \ proxy)\n        self.ccmr1_output = self.Ccmr1_outputRegister(self.address,\
    \ proxy)\n        self.ccmr1_input = self.Ccmr1_inputRegister(self.address, proxy)\n\
    \        self.ccer = self.CcerRegister(self.address, proxy)\n        self.cnt\
    \ = self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n        self.ccr1\
    \ = self.Ccr1Register(self.address, proxy)\n        self.ccr2 = self.Ccr2Register(self.address,\
    \ proxy)\n"
  name: TIM12
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim10(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.urs = Field(\"urs\", \"Update request source\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\", \"Update disable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.cen = Field(\"cen\", \"\
    Counter enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cc1ie = Field(\"cc1ie\", \"Capture/Compare\
    \ 1 interrupt\n                          enable\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc1of\
    \ = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n                       \
    \   flag\", self._address, 9, 0x0001, 1, proxy)\n            self.cc1if = Field(\"\
    cc1if\", \"Capture/compare 1 interrupt\n                          flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.uif = Field(\"uif\", \"Update interrupt\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class EgrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    EGR\", \"event generation register\", address + 0x0014, 32, \"write-only\", 0x0000,\
    \ proxy)\n            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n      \
    \                    generation\", self._address, 1, 0x0001, 1, proxy)\n     \
    \       self.ug = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare\
    \ mode register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc1m = Field(\"oc1m\", \"Output Compare 1 mode\"\
    , self._address, 4, 0x0007, 3, proxy)\n            self.oc1pe = Field(\"oc1pe\"\
    , \"Output Compare 1 preload\n                          enable\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"Output Compare\
    \ 1 fast\n                          enable\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n               \
    \           selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class\
    \ Ccmr1_inputRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CCMR1_Input\", \"capture/compare mode register\
    \ 1 (input\n              mode)\", address + 0x0018, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\",\
    \ self._address, 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\"\
    , \"Input capture 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n       \
    \     self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n                      \
    \    selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc1np = Field(\"cc1np\"\
    , \"Capture/Compare 1 output\n                          Polarity\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc1p = Field(\"cc1p\", \"Capture/Compare\
    \ 1 output\n                          Polarity\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.cc1e = Field(\"cc1e\", \"Capture/Compare 1 output\n\
    \                          enable\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class CntRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CNT\", \"counter\", address + 0x0024, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cnt = Field(\"cnt\", \"counter value\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"tim10\", \"General-purpose-timers\", 0x40014400)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.dier =\
    \ self.DierRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.egr = self.EgrRegister(self.address, proxy)\n        self.ccmr1_output\
    \ = self.Ccmr1_outputRegister(self.address, proxy)\n        self.ccmr1_input =\
    \ self.Ccmr1_inputRegister(self.address, proxy)\n        self.ccer = self.CcerRegister(self.address,\
    \ proxy)\n        self.cnt = self.CntRegister(self.address, proxy)\n        self.psc\
    \ = self.PscRegister(self.address, proxy)\n        self.arr = self.ArrRegister(self.address,\
    \ proxy)\n        self.ccr1 = self.Ccr1Register(self.address, proxy)\n"
  name: TIM10
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim13(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.urs = Field(\"urs\", \"Update request source\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\", \"Update disable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.cen = Field(\"cen\", \"\
    Counter enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cc1ie = Field(\"cc1ie\", \"Capture/Compare\
    \ 1 interrupt\n                          enable\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc1of\
    \ = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n                       \
    \   flag\", self._address, 9, 0x0001, 1, proxy)\n            self.cc1if = Field(\"\
    cc1if\", \"Capture/compare 1 interrupt\n                          flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.uif = Field(\"uif\", \"Update interrupt\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class EgrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    EGR\", \"event generation register\", address + 0x0014, 32, \"write-only\", 0x0000,\
    \ proxy)\n            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n      \
    \                    generation\", self._address, 1, 0x0001, 1, proxy)\n     \
    \       self.ug = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare\
    \ mode register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc1m = Field(\"oc1m\", \"Output Compare 1 mode\"\
    , self._address, 4, 0x0007, 3, proxy)\n            self.oc1pe = Field(\"oc1pe\"\
    , \"Output Compare 1 preload\n                          enable\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"Output Compare\
    \ 1 fast\n                          enable\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n               \
    \           selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class\
    \ Ccmr1_inputRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CCMR1_Input\", \"capture/compare mode register\
    \ 1 (input\n              mode)\", address + 0x0018, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\",\
    \ self._address, 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\"\
    , \"Input capture 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n       \
    \     self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n                      \
    \    selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc1np = Field(\"cc1np\"\
    , \"Capture/Compare 1 output\n                          Polarity\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc1p = Field(\"cc1p\", \"Capture/Compare\
    \ 1 output\n                          Polarity\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.cc1e = Field(\"cc1e\", \"Capture/Compare 1 output\n\
    \                          enable\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class CntRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CNT\", \"counter\", address + 0x0024, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cnt = Field(\"cnt\", \"counter value\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"tim13\", \"General-purpose-timers\", 0x40001C00)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.dier =\
    \ self.DierRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.egr = self.EgrRegister(self.address, proxy)\n        self.ccmr1_output\
    \ = self.Ccmr1_outputRegister(self.address, proxy)\n        self.ccmr1_input =\
    \ self.Ccmr1_inputRegister(self.address, proxy)\n        self.ccer = self.CcerRegister(self.address,\
    \ proxy)\n        self.cnt = self.CntRegister(self.address, proxy)\n        self.psc\
    \ = self.PscRegister(self.address, proxy)\n        self.arr = self.ArrRegister(self.address,\
    \ proxy)\n        self.ccr1 = self.Ccr1Register(self.address, proxy)\n"
  name: TIM13
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim14(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.urs = Field(\"urs\", \"Update request source\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\", \"Update disable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.cen = Field(\"cen\", \"\
    Counter enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cc1ie = Field(\"cc1ie\", \"Capture/Compare\
    \ 1 interrupt\n                          enable\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc1of\
    \ = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n                       \
    \   flag\", self._address, 9, 0x0001, 1, proxy)\n            self.cc1if = Field(\"\
    cc1if\", \"Capture/compare 1 interrupt\n                          flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.uif = Field(\"uif\", \"Update interrupt\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class EgrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    EGR\", \"event generation register\", address + 0x0014, 32, \"write-only\", 0x0000,\
    \ proxy)\n            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n      \
    \                    generation\", self._address, 1, 0x0001, 1, proxy)\n     \
    \       self.ug = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare\
    \ mode register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc1m = Field(\"oc1m\", \"Output Compare 1 mode\"\
    , self._address, 4, 0x0007, 3, proxy)\n            self.oc1pe = Field(\"oc1pe\"\
    , \"Output Compare 1 preload\n                          enable\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"Output Compare\
    \ 1 fast\n                          enable\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n               \
    \           selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class\
    \ Ccmr1_inputRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CCMR1_Input\", \"capture/compare mode register\
    \ 1 (input\n              mode)\", address + 0x0018, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\",\
    \ self._address, 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\"\
    , \"Input capture 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n       \
    \     self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n                      \
    \    selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc1np = Field(\"cc1np\"\
    , \"Capture/Compare 1 output\n                          Polarity\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc1p = Field(\"cc1p\", \"Capture/Compare\
    \ 1 output\n                          Polarity\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.cc1e = Field(\"cc1e\", \"Capture/Compare 1 output\n\
    \                          enable\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class CntRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CNT\", \"counter\", address + 0x0024, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cnt = Field(\"cnt\", \"counter value\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"tim14\", \"General-purpose-timers\", 0x40002000)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.dier =\
    \ self.DierRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.egr = self.EgrRegister(self.address, proxy)\n        self.ccmr1_output\
    \ = self.Ccmr1_outputRegister(self.address, proxy)\n        self.ccmr1_input =\
    \ self.Ccmr1_inputRegister(self.address, proxy)\n        self.ccer = self.CcerRegister(self.address,\
    \ proxy)\n        self.cnt = self.CntRegister(self.address, proxy)\n        self.psc\
    \ = self.PscRegister(self.address, proxy)\n        self.arr = self.ArrRegister(self.address,\
    \ proxy)\n        self.ccr1 = self.Ccr1Register(self.address, proxy)\n"
  name: TIM14
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim11(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ckd = Field(\"ckd\", \"\
    Clock division\", self._address, 8, 0x0003, 2, proxy)\n            self.arpe =\
    \ Field(\"arpe\", \"Auto-reload preload enable\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.urs = Field(\"urs\", \"Update request source\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\", \"Update disable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.cen = Field(\"cen\", \"\
    Counter enable\", self._address, 0, 0x0001, 1, proxy)\n    \n    class DierRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIER\", \"DMA/Interrupt enable register\", address + 0x000C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cc1ie = Field(\"cc1ie\", \"Capture/Compare\
    \ 1 interrupt\n                          enable\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.cc1of\
    \ = Field(\"cc1of\", \"Capture/Compare 1 overcapture\n                       \
    \   flag\", self._address, 9, 0x0001, 1, proxy)\n            self.cc1if = Field(\"\
    cc1if\", \"Capture/compare 1 interrupt\n                          flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.uif = Field(\"uif\", \"Update interrupt\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class EgrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    EGR\", \"event generation register\", address + 0x0014, 32, \"write-only\", 0x0000,\
    \ proxy)\n            self.cc1g = Field(\"cc1g\", \"Capture/compare 1\n      \
    \                    generation\", self._address, 1, 0x0001, 1, proxy)\n     \
    \       self.ug = Field(\"ug\", \"Update generation\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Ccmr1_outputRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CCMR1_Output\", \"capture/compare\
    \ mode register 1 (output\n              mode)\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.oc1m = Field(\"oc1m\", \"Output Compare 1 mode\"\
    , self._address, 4, 0x0007, 3, proxy)\n            self.oc1pe = Field(\"oc1pe\"\
    , \"Output Compare 1 preload\n                          enable\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.oc1fe = Field(\"oc1fe\", \"Output Compare\
    \ 1 fast\n                          enable\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n               \
    \           selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class\
    \ Ccmr1_inputRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CCMR1_Input\", \"capture/compare mode register\
    \ 1 (input\n              mode)\", address + 0x0018, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ic1f = Field(\"ic1f\", \"Input capture 1 filter\",\
    \ self._address, 4, 0x000F, 4, proxy)\n            self.icpcs = Field(\"icpcs\"\
    , \"Input capture 1 prescaler\", self._address, 2, 0x0003, 2, proxy)\n       \
    \     self.cc1s = Field(\"cc1s\", \"Capture/Compare 1\n                      \
    \    selection\", self._address, 0, 0x0003, 2, proxy)\n    \n    class CcerRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCER\", \"capture/compare enable\n              register\", address + 0x0020,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cc1np = Field(\"cc1np\"\
    , \"Capture/Compare 1 output\n                          Polarity\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.cc1p = Field(\"cc1p\", \"Capture/Compare\
    \ 1 output\n                          Polarity\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.cc1e = Field(\"cc1e\", \"Capture/Compare 1 output\n\
    \                          enable\", self._address, 0, 0x0001, 1, proxy)\n   \
    \ \n    class CntRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CNT\", \"counter\", address + 0x0024, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cnt = Field(\"cnt\", \"counter value\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSC\", \"prescaler\", address\
    \ + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.psc = Field(\"\
    psc\", \"Prescaler value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ ArrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"ARR\", \"auto-reload register\", address + 0x002C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.arr = Field(\"arr\", \"Auto-reload\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Ccr1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR1\", \"capture/compare register 1\", address + 0x0034, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.ccr1 = Field(\"ccr1\", \"Capture/Compare 1\
    \ value\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class OrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OR\", \"option register\", address + 0x0050, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.rmp = Field(\"rmp\", \"Input 1 remapping\n                 \
    \         capability\", self._address, 0, 0x0003, 2, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"tim11\", \"General-purpose-timers\", 0x40014800)\n\
    \        self.cr1 = self.Cr1Register(self.address, proxy)\n        self.dier =\
    \ self.DierRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.egr = self.EgrRegister(self.address, proxy)\n        self.ccmr1_output\
    \ = self.Ccmr1_outputRegister(self.address, proxy)\n        self.ccmr1_input =\
    \ self.Ccmr1_inputRegister(self.address, proxy)\n        self.ccer = self.CcerRegister(self.address,\
    \ proxy)\n        self.cnt = self.CntRegister(self.address, proxy)\n        self.psc\
    \ = self.PscRegister(self.address, proxy)\n        self.arr = self.ArrRegister(self.address,\
    \ proxy)\n        self.ccr1 = self.Ccr1Register(self.address, proxy)\n       \
    \ self.or = self.OrRegister(self.address, proxy)\n"
  name: TIM11
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim6(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.arpe = Field(\"arpe\",\
    \ \"Auto-reload preload enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mms = Field(\"mms\", \"\
    Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n    \n    class\
    \ DierRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"DIER\", \"DMA/Interrupt enable register\", address\
    \ + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.ude = Field(\"\
    ude\", \"Update DMA request enable\", self._address, 8, 0x0001, 1, proxy)\n  \
    \          self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.uif =\
    \ Field(\"uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.ug = Field(\"\
    ug\", \"Update generation\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ CntRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"CNT\", \"counter\", address + 0x0024, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cnt = Field(\"cnt\", \"Low counter value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PSC\", \"prescaler\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class ArrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ARR\", \"auto-reload register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.arr =\
    \ Field(\"arr\", \"Low Auto-reload value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"tim6\", \"Basic\
    \ timers\", 0x40001000)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n\
    \        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.dier =\
    \ self.DierRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.egr = self.EgrRegister(self.address, proxy)\n        self.cnt\
    \ = self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n"
  name: TIM6
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Tim7(Peripheral):\n\
    \    class Cr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR1\", \"control register 1\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.arpe = Field(\"arpe\",\
    \ \"Auto-reload preload enable\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.opm = Field(\"opm\", \"One-pulse mode\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.urs = Field(\"urs\", \"Update request source\",\
    \ self._address, 2, 0x0001, 1, proxy)\n            self.udis = Field(\"udis\"\
    , \"Update disable\", self._address, 1, 0x0001, 1, proxy)\n            self.cen\
    \ = Field(\"cen\", \"Counter enable\", self._address, 0, 0x0001, 1, proxy)\n \
    \   \n    class Cr2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR2\", \"control register 2\", address + 0x0004,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mms = Field(\"mms\", \"\
    Master mode selection\", self._address, 4, 0x0007, 3, proxy)\n    \n    class\
    \ DierRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"DIER\", \"DMA/Interrupt enable register\", address\
    \ + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.ude = Field(\"\
    ude\", \"Update DMA request enable\", self._address, 8, 0x0001, 1, proxy)\n  \
    \          self.uie = Field(\"uie\", \"Update interrupt enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"SR\", \"status register\",\
    \ address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.uif =\
    \ Field(\"uif\", \"Update interrupt flag\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class EgrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"EGR\", \"event generation register\", address\
    \ + 0x0014, 32, \"write-only\", 0x0000, proxy)\n            self.ug = Field(\"\
    ug\", \"Update generation\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ CntRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"CNT\", \"counter\", address + 0x0024, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.cnt = Field(\"cnt\", \"Low counter value\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class PscRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    PSC\", \"prescaler\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.psc = Field(\"psc\", \"Prescaler value\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class ArrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ARR\", \"auto-reload register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.arr =\
    \ Field(\"arr\", \"Low Auto-reload value\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"tim7\", \"Basic\
    \ timers\", 0x40001400)\n        self.cr1 = self.Cr1Register(self.address, proxy)\n\
    \        self.cr2 = self.Cr2Register(self.address, proxy)\n        self.dier =\
    \ self.DierRegister(self.address, proxy)\n        self.sr = self.SrRegister(self.address,\
    \ proxy)\n        self.egr = self.EgrRegister(self.address, proxy)\n        self.cnt\
    \ = self.CntRegister(self.address, proxy)\n        self.psc = self.PscRegister(self.address,\
    \ proxy)\n        self.arr = self.ArrRegister(self.address, proxy)\n"
  name: TIM7
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Crc(Peripheral):\n\
    \    class DrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DR\", \"Data register\", address + 0x0000, 32,\
    \ \"read-write\", 0xFFFFFFFF, proxy)\n            self.dr = Field(\"dr\", \"Data\
    \ Register\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class IdrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IDR\", \"Independent Data register\", address + 0x0004, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.idr = Field(\"idr\", \"Independent Data register\"\
    , self._address, 0, 0x00FF, 8, proxy)\n    \n    class CrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR\", \"Control register\", address + 0x0008, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.cr = Field(\"cr\", \"Control regidter\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    crc\", \"Cryptographic processor\", 0x40023000)\n        self.dr = self.DrRegister(self.address,\
    \ proxy)\n        self.idr = self.IdrRegister(self.address, proxy)\n        self.cr\
    \ = self.CrRegister(self.address, proxy)\n"
  name: CRC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_fs_global(Peripheral):\n\
    \    class Fs_gotgctlRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_GOTGCTL\", \"OTG_FS control and status\
    \ register\n              (OTG_FS_GOTGCTL)\", address + 0x0000, 32, \"\", 0x0800,\
    \ proxy)\n            self.srqscs = Field(\"srqscs\", \"Session request success\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.srq = Field(\"srq\", \"\
    Session request\", self._address, 1, 0x0001, 1, proxy)\n            self.avaloen\
    \ = Field(\"avaloen\", \"AVALOEN\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.bvaloen = Field(\"bvaloen\", \"BVALOEN\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.bvaloval = Field(\"bvaloval\", \"BVALOVAL\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.hngscs = Field(\"hngscs\", \"Host negotiation\
    \ success\", self._address, 8, 0x0001, 1, proxy)\n            self.hnprq = Field(\"\
    hnprq\", \"HNP request\", self._address, 9, 0x0001, 1, proxy)\n            self.hshnpen\
    \ = Field(\"hshnpen\", \"Host set HNP enable\", self._address, 10, 0x0001, 1,\
    \ proxy)\n            self.dhnpen = Field(\"dhnpen\", \"Device HNP enabled\",\
    \ self._address, 11, 0x0001, 1, proxy)\n            self.cidsts = Field(\"cidsts\"\
    , \"Connector ID status\", self._address, 16, 0x0001, 1, proxy)\n            self.dbct\
    \ = Field(\"dbct\", \"Long/short debounce time\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.asvld = Field(\"asvld\", \"A-session valid\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.bsvld = Field(\"bsvld\", \"B-session\
    \ valid\", self._address, 19, 0x0001, 1, proxy)\n    \n    class Fs_gotgintRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GOTGINT\", \"OTG_FS interrupt register\n              (OTG_FS_GOTGINT)\", address\
    \ + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.sedet = Field(\"\
    sedet\", \"Session end detected\", self._address, 2, 0x0001, 1, proxy)\n     \
    \       self.srsschg = Field(\"srsschg\", \"Session request success status\n \
    \                         change\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.hnsschg = Field(\"hnsschg\", \"Host negotiation success status\n\
    \                          change\", self._address, 9, 0x0001, 1, proxy)\n   \
    \         self.hngdet = Field(\"hngdet\", \"Host negotiation detected\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.adtochg = Field(\"adtochg\", \"A-device\
    \ timeout change\", self._address, 18, 0x0001, 1, proxy)\n            self.dbcdne\
    \ = Field(\"dbcdne\", \"Debounce done\", self._address, 19, 0x0001, 1, proxy)\n\
    \    \n    class Fs_gahbcfgRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_GAHBCFG\", \"OTG_FS AHB configuration\
    \ register\n              (OTG_FS_GAHBCFG)\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.gint = Field(\"gint\", \"Global interrupt mask\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.txfelvl = Field(\"txfelvl\"\
    , \"TxFIFO empty level\", self._address, 7, 0x0001, 1, proxy)\n            self.ptxfelvl\
    \ = Field(\"ptxfelvl\", \"Periodic TxFIFO empty\n                          level\"\
    , self._address, 8, 0x0001, 1, proxy)\n    \n    class Fs_gusbcfgRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GUSBCFG\", \"OTG_FS USB configuration register\n              (OTG_FS_GUSBCFG)\"\
    , address + 0x000C, 32, \"\", 0x0A00, proxy)\n            self.tocal = Field(\"\
    tocal\", \"FS timeout calibration\", self._address, 0, 0x0007, 3, proxy)\n   \
    \         self.physel = Field(\"physel\", \"Full Speed serial transceiver\n  \
    \                        select\", self._address, 6, 0x0001, 1, proxy)\n     \
    \       self.srpcap = Field(\"srpcap\", \"SRP-capable\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.hnpcap = Field(\"hnpcap\", \"HNP-capable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.trdt = Field(\"trdt\", \"USB turnaround\
    \ time\", self._address, 10, 0x000F, 4, proxy)\n            self.fhmod = Field(\"\
    fhmod\", \"Force host mode\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.fdmod = Field(\"fdmod\", \"Force device mode\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.ctxpkt = Field(\"ctxpkt\", \"Corrupt Tx packet\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_grstctlRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GRSTCTL\", \"OTG_FS reset register\n              (OTG_FS_GRSTCTL)\", address\
    \ + 0x0010, 32, \"\", 0x20000000, proxy)\n            self.csrst = Field(\"csrst\"\
    , \"Core soft reset\", self._address, 0, 0x0001, 1, proxy)\n            self.hsrst\
    \ = Field(\"hsrst\", \"HCLK soft reset\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.fcrst = Field(\"fcrst\", \"Host frame counter reset\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rxfflsh = Field(\"rxfflsh\", \"RxFIFO\
    \ flush\", self._address, 4, 0x0001, 1, proxy)\n            self.txfflsh = Field(\"\
    txfflsh\", \"TxFIFO flush\", self._address, 5, 0x0001, 1, proxy)\n           \
    \ self.txfnum = Field(\"txfnum\", \"TxFIFO number\", self._address, 6, 0x001F,\
    \ 5, proxy)\n            self.ahbidl = Field(\"ahbidl\", \"AHB master idle\",\
    \ self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_gintstsRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GINTSTS\", \"OTG_FS core interrupt register\n              (OTG_FS_GINTSTS)\"\
    , address + 0x0014, 32, \"\", 0x4000020, proxy)\n            self.cmod = Field(\"\
    cmod\", \"Current mode of operation\", self._address, 0, 0x0001, 1, proxy)\n \
    \           self.mmis = Field(\"mmis\", \"Mode mismatch interrupt\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.otgint = Field(\"otgint\", \"OTG interrupt\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.sof = Field(\"sof\", \"\
    Start of frame\", self._address, 3, 0x0001, 1, proxy)\n            self.rxflvl\
    \ = Field(\"rxflvl\", \"RxFIFO non-empty\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.nptxfe = Field(\"nptxfe\", \"Non-periodic TxFIFO empty\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.ginakeff = Field(\"ginakeff\", \"Global\
    \ IN non-periodic NAK\n                          effective\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.goutnakeff = Field(\"goutnakeff\", \"Global\
    \ OUT NAK effective\", self._address, 7, 0x0001, 1, proxy)\n            self.esusp\
    \ = Field(\"esusp\", \"Early suspend\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.usbsusp = Field(\"usbsusp\", \"USB suspend\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.usbrst = Field(\"usbrst\", \"USB reset\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.enumdne = Field(\"enumdne\"\
    , \"Enumeration done\", self._address, 13, 0x0001, 1, proxy)\n            self.isoodrp\
    \ = Field(\"isoodrp\", \"Isochronous OUT packet dropped\n                    \
    \      interrupt\", self._address, 14, 0x0001, 1, proxy)\n            self.eopf\
    \ = Field(\"eopf\", \"End of periodic frame\n                          interrupt\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.iepint = Field(\"iepint\"\
    , \"IN endpoint interrupt\", self._address, 18, 0x0001, 1, proxy)\n          \
    \  self.oepint = Field(\"oepint\", \"OUT endpoint interrupt\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.iisoixfr = Field(\"iisoixfr\", \"Incomplete\
    \ isochronous IN\n                          transfer\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.ipxfr_incompisoout = Field(\"ipxfr_incompisoout\"\
    , \"Incomplete periodic transfer(Host\n                          mode)/Incomplete\
    \ isochronous OUT transfer(Device\n                          mode)\", self._address,\
    \ 21, 0x0001, 1, proxy)\n            self.hprtint = Field(\"hprtint\", \"Host\
    \ port interrupt\", self._address, 24, 0x0001, 1, proxy)\n            self.hcint\
    \ = Field(\"hcint\", \"Host channels interrupt\", self._address, 25, 0x0001, 1,\
    \ proxy)\n            self.ptxfe = Field(\"ptxfe\", \"Periodic TxFIFO empty\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.cidschg = Field(\"cidschg\"\
    , \"Connector ID status change\", self._address, 28, 0x0001, 1, proxy)\n     \
    \       self.discint = Field(\"discint\", \"Disconnect detected\n            \
    \              interrupt\", self._address, 29, 0x0001, 1, proxy)\n           \
    \ self.srqint = Field(\"srqint\", \"Session request/new session detected\n   \
    \                       interrupt\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.wkupint = Field(\"wkupint\", \"Resume/remote wakeup detected\n\
    \                          interrupt\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Fs_gintmskRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_GINTMSK\", \"OTG_FS interrupt mask\
    \ register\n              (OTG_FS_GINTMSK)\", address + 0x0018, 32, \"\", 0x0000,\
    \ proxy)\n            self.mmism = Field(\"mmism\", \"Mode mismatch interrupt\n\
    \                          mask\", self._address, 1, 0x0001, 1, proxy)\n     \
    \       self.otgint = Field(\"otgint\", \"OTG interrupt mask\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.sofm = Field(\"sofm\", \"Start of frame\
    \ mask\", self._address, 3, 0x0001, 1, proxy)\n            self.rxflvlm = Field(\"\
    rxflvlm\", \"Receive FIFO non-empty\n                          mask\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.nptxfem = Field(\"nptxfem\", \"Non-periodic\
    \ TxFIFO empty\n                          mask\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ginakeffm = Field(\"ginakeffm\", \"Global non-periodic\
    \ IN NAK effective\n                          mask\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.gonakeffm = Field(\"gonakeffm\", \"Global OUT NAK\
    \ effective\n                          mask\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.esuspm = Field(\"esuspm\", \"Early suspend mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.usbsuspm = Field(\"usbsuspm\", \"USB\
    \ suspend mask\", self._address, 11, 0x0001, 1, proxy)\n            self.usbrst\
    \ = Field(\"usbrst\", \"USB reset mask\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.enumdnem = Field(\"enumdnem\", \"Enumeration done mask\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.isoodrpm = Field(\"isoodrpm\", \"Isochronous\
    \ OUT packet dropped interrupt\n                          mask\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.eopfm = Field(\"eopfm\", \"End of periodic\
    \ frame interrupt\n                          mask\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.epmism = Field(\"epmism\", \"Endpoint mismatch interrupt\n\
    \                          mask\", self._address, 17, 0x0001, 1, proxy)\n    \
    \        self.iepint = Field(\"iepint\", \"IN endpoints interrupt\n          \
    \                mask\", self._address, 18, 0x0001, 1, proxy)\n            self.oepint\
    \ = Field(\"oepint\", \"OUT endpoints interrupt\n                          mask\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.iisoixfrm = Field(\"\
    iisoixfrm\", \"Incomplete isochronous IN transfer\n                          mask\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.ipxfrm_iisooxfrm = Field(\"\
    ipxfrm_iisooxfrm\", \"Incomplete periodic transfer mask(Host\n               \
    \           mode)/Incomplete isochronous OUT transfer mask(Device\n          \
    \                mode)\", self._address, 21, 0x0001, 1, proxy)\n            self.prtim\
    \ = Field(\"prtim\", \"Host port interrupt mask\", self._address, 24, 0x0001,\
    \ 1, proxy)\n            self.hcim = Field(\"hcim\", \"Host channels interrupt\n\
    \                          mask\", self._address, 25, 0x0001, 1, proxy)\n    \
    \        self.ptxfem = Field(\"ptxfem\", \"Periodic TxFIFO empty mask\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.cidschgm = Field(\"cidschgm\", \"Connector\
    \ ID status change\n                          mask\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.discint = Field(\"discint\", \"Disconnect detected\
    \ interrupt\n                          mask\", self._address, 29, 0x0001, 1, proxy)\n\
    \            self.srqim = Field(\"srqim\", \"Session request/new session detected\n\
    \                          interrupt mask\", self._address, 30, 0x0001, 1, proxy)\n\
    \            self.wuim = Field(\"wuim\", \"Resume/remote wakeup detected interrupt\n\
    \                          mask\", self._address, 31, 0x0001, 1, proxy)\n    \n\
    \    class Fs_grxstsr_deviceRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_GRXSTSR_Device\", \"OTG_FS Receive\
    \ status debug read(Device\n              mode)\", address + 0x001C, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint number\"\
    , self._address, 0, 0x000F, 4, proxy)\n            self.bcnt = Field(\"bcnt\"\
    , \"Byte count\", self._address, 4, 0x07FF, 11, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 15, 0x0003, 2, proxy)\n     \
    \       self.pktsts = Field(\"pktsts\", \"Packet status\", self._address, 17,\
    \ 0x000F, 4, proxy)\n            self.frmnum = Field(\"frmnum\", \"Frame number\"\
    , self._address, 21, 0x000F, 4, proxy)\n    \n    class Fs_grxstsp_deviceRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GRXSTSP_Device\", \"OTG_FS Receive status debug read(Device\n             \
    \ mode)\", address + 0x0020, 32, \"read-only\", 0x0000, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 0, 0x000F, 4, proxy)\n\
    \            self.bcnt = Field(\"bcnt\", \"Byte count\", self._address, 4, 0x07FF,\
    \ 11, proxy)\n            self.dpid = Field(\"dpid\", \"Data PID\", self._address,\
    \ 15, 0x0003, 2, proxy)\n            self.pktsts = Field(\"pktsts\", \"Packet\
    \ status\", self._address, 17, 0x000F, 4, proxy)\n            self.frmnum = Field(\"\
    frmnum\", \"Frame number\", self._address, 21, 0x000F, 4, proxy)\n    \n    class\
    \ Fs_grxstsr_hostRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FS_GRXSTSR_Host\", \"OTG_FS Receive status debug\
    \ read(Host\n              mode)\", address + 0x001C, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint number\", self._address,\
    \ 0, 0x000F, 4, proxy)\n            self.bcnt = Field(\"bcnt\", \"Byte count\"\
    , self._address, 4, 0x07FF, 11, proxy)\n            self.dpid = Field(\"dpid\"\
    , \"Data PID\", self._address, 15, 0x0003, 2, proxy)\n            self.pktsts\
    \ = Field(\"pktsts\", \"Packet status\", self._address, 17, 0x000F, 4, proxy)\n\
    \            self.frmnum = Field(\"frmnum\", \"Frame number\", self._address,\
    \ 21, 0x000F, 4, proxy)\n    \n    class Fs_grxstsp_hostRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GRXSTSP_Host\", \"OTG_FS Receive status debug read(Host\n              mode)\"\
    , address + 0x0020, 32, \"read-only\", 0x0000, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 0, 0x000F, 4, proxy)\n\
    \            self.bcnt = Field(\"bcnt\", \"Byte count\", self._address, 4, 0x07FF,\
    \ 11, proxy)\n            self.dpid = Field(\"dpid\", \"Data PID\", self._address,\
    \ 15, 0x0003, 2, proxy)\n            self.pktsts = Field(\"pktsts\", \"Packet\
    \ status\", self._address, 17, 0x000F, 4, proxy)\n            self.frmnum = Field(\"\
    frmnum\", \"Frame number\", self._address, 21, 0x000F, 4, proxy)\n    \n    class\
    \ Fs_grxfsizRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FS_GRXFSIZ\", \"OTG_FS Receive FIFO size register\n\
    \              (OTG_FS_GRXFSIZ)\", address + 0x0024, 32, \"read-write\", 0x0200,\
    \ proxy)\n            self.rxfd = Field(\"rxfd\", \"RxFIFO depth\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Fs_gnptxfsiz_deviceRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GNPTXFSIZ_Device\", \"OTG_FS non-periodic transmit FIFO size\n            \
    \  register (Device mode)\", address + 0x0028, 32, \"read-write\", 0x0200, proxy)\n\
    \            self.tx0fsa = Field(\"tx0fsa\", \"Endpoint 0 transmit RAM start\n\
    \                          address\", self._address, 0, 0xFFFF, 16, proxy)\n \
    \           self.tx0fd = Field(\"tx0fd\", \"Endpoint 0 TxFIFO depth\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n    \n    class Fs_gnptxfsiz_hostRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_GNPTXFSIZ_Host\", \"OTG_FS non-periodic transmit FIFO size\n              register\
    \ (Host mode)\", address + 0x0028, 32, \"read-write\", 0x0200, proxy)\n      \
    \      self.nptxfsa = Field(\"nptxfsa\", \"Non-periodic transmit RAM start\n \
    \                         address\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \          self.nptxfd = Field(\"nptxfd\", \"Non-periodic TxFIFO depth\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n    \n    class Fs_gnptxstsRegister(Register):\n   \
    \     def __init__(self, address, proxy):\n            super().__init__(\"FS_GNPTXSTS\"\
    , \"OTG_FS non-periodic transmit FIFO/queue\n              status register (OTG_FS_GNPTXSTS)\"\
    , address + 0x002C, 32, \"read-only\", 0x80200, proxy)\n            self.nptxfsav\
    \ = Field(\"nptxfsav\", \"Non-periodic TxFIFO space\n                        \
    \  available\", self._address, 0, 0xFFFF, 16, proxy)\n            self.nptqxsav\
    \ = Field(\"nptqxsav\", \"Non-periodic transmit request queue\n              \
    \            space available\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.nptxqtop = Field(\"nptxqtop\", \"Top of the non-periodic transmit request\n\
    \                          queue\", self._address, 24, 0x007F, 7, proxy)\n   \
    \ \n    class Fs_gccfgRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_GCCFG\", \"OTG_FS general core configuration\
    \ register\n              (OTG_FS_GCCFG)\", address + 0x0038, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.pwrdwn = Field(\"pwrdwn\", \"Power down\",\
    \ self._address, 16, 0x0001, 1, proxy)\n            self.vbusasen = Field(\"vbusasen\"\
    , \"Enable the VBUS sensing\n                          device\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.vbusbsen = Field(\"vbusbsen\", \"Enable\
    \ the VBUS sensing\n                          device\", self._address, 19, 0x0001,\
    \ 1, proxy)\n            self.sofouten = Field(\"sofouten\", \"SOF output enable\"\
    , self._address, 20, 0x0001, 1, proxy)\n    \n    class Fs_cidRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_CID\", \"core ID register\", address + 0x003C, 32, \"read-write\", 0x1000,\
    \ proxy)\n            self.product_id = Field(\"product_id\", \"Product ID field\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Fs_hptxfsizRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HPTXFSIZ\", \"OTG_FS Host periodic transmit FIFO size\n              register\
    \ (OTG_FS_HPTXFSIZ)\", address + 0x0100, 32, \"read-write\", 0x2000600, proxy)\n\
    \            self.ptxsa = Field(\"ptxsa\", \"Host periodic TxFIFO start\n    \
    \                      address\", self._address, 0, 0xFFFF, 16, proxy)\n     \
    \       self.ptxfsiz = Field(\"ptxfsiz\", \"Host periodic TxFIFO depth\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n    \n    class Fs_dieptxf1Register(Register):\n   \
    \     def __init__(self, address, proxy):\n            super().__init__(\"FS_DIEPTXF1\"\
    , \"OTG_FS device IN endpoint transmit FIFO size\n              register (OTG_FS_DIEPTXF2)\"\
    , address + 0x0104, 32, \"read-write\", 0x2000400, proxy)\n            self.ineptxsa\
    \ = Field(\"ineptxsa\", \"IN endpoint FIFO2 transmit RAM start\n             \
    \             address\", self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd\
    \ = Field(\"ineptxfd\", \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n    \n    class Fs_dieptxf2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FS_DIEPTXF2\", \"OTG_FS device\
    \ IN endpoint transmit FIFO size\n              register (OTG_FS_DIEPTXF3)\",\
    \ address + 0x0108, 32, \"read-write\", 0x2000400, proxy)\n            self.ineptxsa\
    \ = Field(\"ineptxsa\", \"IN endpoint FIFO3 transmit RAM start\n             \
    \             address\", self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd\
    \ = Field(\"ineptxfd\", \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n    \n    class Fs_dieptxf3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FS_DIEPTXF3\", \"OTG_FS device\
    \ IN endpoint transmit FIFO size\n              register (OTG_FS_DIEPTXF4)\",\
    \ address + 0x010C, 32, \"read-write\", 0x2000400, proxy)\n            self.ineptxsa\
    \ = Field(\"ineptxsa\", \"IN endpoint FIFO4 transmit RAM start\n             \
    \             address\", self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd\
    \ = Field(\"ineptxfd\", \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    otg_fs_global\", \"USB on the go full speed\", 0x50000000)\n        self.fs_gotgctl\
    \ = self.Fs_gotgctlRegister(self.address, proxy)\n        self.fs_gotgint = self.Fs_gotgintRegister(self.address,\
    \ proxy)\n        self.fs_gahbcfg = self.Fs_gahbcfgRegister(self.address, proxy)\n\
    \        self.fs_gusbcfg = self.Fs_gusbcfgRegister(self.address, proxy)\n    \
    \    self.fs_grstctl = self.Fs_grstctlRegister(self.address, proxy)\n        self.fs_gintsts\
    \ = self.Fs_gintstsRegister(self.address, proxy)\n        self.fs_gintmsk = self.Fs_gintmskRegister(self.address,\
    \ proxy)\n        self.fs_grxstsr_device = self.Fs_grxstsr_deviceRegister(self.address,\
    \ proxy)\n        self.fs_grxstsp_device = self.Fs_grxstsp_deviceRegister(self.address,\
    \ proxy)\n        self.fs_grxstsr_host = self.Fs_grxstsr_hostRegister(self.address,\
    \ proxy)\n        self.fs_grxstsp_host = self.Fs_grxstsp_hostRegister(self.address,\
    \ proxy)\n        self.fs_grxfsiz = self.Fs_grxfsizRegister(self.address, proxy)\n\
    \        self.fs_gnptxfsiz_device = self.Fs_gnptxfsiz_deviceRegister(self.address,\
    \ proxy)\n        self.fs_gnptxfsiz_host = self.Fs_gnptxfsiz_hostRegister(self.address,\
    \ proxy)\n        self.fs_gnptxsts = self.Fs_gnptxstsRegister(self.address, proxy)\n\
    \        self.fs_gccfg = self.Fs_gccfgRegister(self.address, proxy)\n        self.fs_cid\
    \ = self.Fs_cidRegister(self.address, proxy)\n        self.fs_hptxfsiz = self.Fs_hptxfsizRegister(self.address,\
    \ proxy)\n        self.fs_dieptxf1 = self.Fs_dieptxf1Register(self.address, proxy)\n\
    \        self.fs_dieptxf2 = self.Fs_dieptxf2Register(self.address, proxy)\n  \
    \      self.fs_dieptxf3 = self.Fs_dieptxf3Register(self.address, proxy)\n"
  name: OTG_FS_GLOBAL
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_fs_host(Peripheral):\n\
    \    class Fs_hcfgRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FS_HCFG\", \"OTG_FS host configuration register\n\
    \              (OTG_FS_HCFG)\", address + 0x0000, 32, \"\", 0x0000, proxy)\n \
    \           self.fslspcs = Field(\"fslspcs\", \"FS/LS PHY clock select\", self._address,\
    \ 0, 0x0003, 2, proxy)\n            self.fslss = Field(\"fslss\", \"FS- and LS-only\
    \ support\", self._address, 2, 0x0001, 1, proxy)\n    \n    class HfirRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    HFIR\", \"OTG_FS Host frame interval\n              register\", address + 0x0004,\
    \ 32, \"read-write\", 0xEA60, proxy)\n            self.frivl = Field(\"frivl\"\
    , \"Frame interval\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Fs_hfnumRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HFNUM\", \"OTG_FS host frame number/frame time\n              remaining register\
    \ (OTG_FS_HFNUM)\", address + 0x0008, 32, \"read-only\", 0x3FFF, proxy)\n    \
    \        self.frnum = Field(\"frnum\", \"Frame number\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n            self.ftrem = Field(\"ftrem\", \"Frame time remaining\"\
    , self._address, 16, 0xFFFF, 16, proxy)\n    \n    class Fs_hptxstsRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HPTXSTS\", \"OTG_FS_Host periodic transmit FIFO/queue\n              status\
    \ register (OTG_FS_HPTXSTS)\", address + 0x0010, 32, \"\", 0x80100, proxy)\n \
    \           self.ptxfsavl = Field(\"ptxfsavl\", \"Periodic transmit data FIFO\
    \ space\n                          available\", self._address, 0, 0xFFFF, 16,\
    \ proxy)\n            self.ptxqsav = Field(\"ptxqsav\", \"Periodic transmit request\
    \ queue space\n                          available\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ptxqtop = Field(\"ptxqtop\", \"Top of the periodic\
    \ transmit request\n                          queue\", self._address, 24, 0x00FF,\
    \ 8, proxy)\n    \n    class HaintRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"HAINT\", \"OTG_FS Host all\
    \ channels interrupt\n              register\", address + 0x0014, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.haint = Field(\"haint\", \"Channel interrupts\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n    \n    class HaintmskRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    HAINTMSK\", \"OTG_FS host all channels interrupt mask\n              register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.haintm\
    \ = Field(\"haintm\", \"Channel interrupt mask\", self._address, 0, 0xFFFF, 16,\
    \ proxy)\n    \n    class Fs_hprtRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FS_HPRT\", \"OTG_FS host port\
    \ control and status register\n              (OTG_FS_HPRT)\", address + 0x0040,\
    \ 32, \"\", 0x0000, proxy)\n            self.pcsts = Field(\"pcsts\", \"Port connect\
    \ status\", self._address, 0, 0x0001, 1, proxy)\n            self.pcdet = Field(\"\
    pcdet\", \"Port connect detected\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.pena = Field(\"pena\", \"Port enable\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.penchng = Field(\"penchng\", \"Port enable/disable\
    \ change\", self._address, 3, 0x0001, 1, proxy)\n            self.poca = Field(\"\
    poca\", \"Port overcurrent active\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.pocchng = Field(\"pocchng\", \"Port overcurrent change\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.pres = Field(\"pres\", \"Port resume\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.psusp = Field(\"psusp\"\
    , \"Port suspend\", self._address, 7, 0x0001, 1, proxy)\n            self.prst\
    \ = Field(\"prst\", \"Port reset\", self._address, 8, 0x0001, 1, proxy)\n    \
    \        self.plsts = Field(\"plsts\", \"Port line status\", self._address, 10,\
    \ 0x0003, 2, proxy)\n            self.ppwr = Field(\"ppwr\", \"Port power\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.ptctl = Field(\"ptctl\", \"Port test\
    \ control\", self._address, 13, 0x000F, 4, proxy)\n            self.pspd = Field(\"\
    pspd\", \"Port speed\", self._address, 17, 0x0003, 2, proxy)\n    \n    class\
    \ Fs_hcchar0Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FS_HCCHAR0\", \"OTG_FS host channel-0 characteristics\n\
    \              register (OTG_FS_HCCHAR0)\", address + 0x0100, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\"\
    , self._address, 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\"\
    , \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir\
    \ = Field(\"epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint\
    \ type\", self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"\
    mcnt\", \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad\
    \ = Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n\
    \            self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29,\
    \ 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\"\
    , \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR1\", \"OTG_FS host channel-1 characteristics\n              register\
    \ (OTG_FS_HCCHAR1)\", address + 0x0120, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR2\", \"OTG_FS host channel-2 characteristics\n              register\
    \ (OTG_FS_HCCHAR2)\", address + 0x0140, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR3\", \"OTG_FS host channel-3 characteristics\n              register\
    \ (OTG_FS_HCCHAR3)\", address + 0x0160, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR4\", \"OTG_FS host channel-4 characteristics\n              register\
    \ (OTG_FS_HCCHAR4)\", address + 0x0180, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR5\", \"OTG_FS host channel-5 characteristics\n              register\
    \ (OTG_FS_HCCHAR5)\", address + 0x01A0, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR6\", \"OTG_FS host channel-6 characteristics\n              register\
    \ (OTG_FS_HCCHAR6)\", address + 0x01C0, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcchar7Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCCHAR7\", \"OTG_FS host channel-7 characteristics\n              register\
    \ (OTG_FS_HCCHAR7)\", address + 0x01E0, 32, \"read-write\", 0x0000, proxy)\n \
    \           self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\", \"Endpoint\
    \ number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"\
    epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n      \
    \      self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.mcnt = Field(\"mcnt\"\
    , \"Multicount\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Fs_hcint0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_HCINT0\", \"OTG_FS host channel-0 interrupt register\n              (OTG_FS_HCINT0)\"\
    , address + 0x0108, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.chh = Field(\"chh\", \"Channel halted\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.stall = Field(\"stall\", \"STALL response received\n\
    \                          interrupt\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.nak = Field(\"nak\", \"NAK response received\n             \
    \             interrupt\", self._address, 4, 0x0001, 1, proxy)\n            self.ack\
    \ = Field(\"ack\", \"ACK response received/transmitted\n                     \
    \     interrupt\", self._address, 5, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Fs_hcint1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FS_HCINT1\", \"OTG_FS host channel-1 interrupt\
    \ register\n              (OTG_FS_HCINT1)\", address + 0x0128, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer completed\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"\
    Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcint2Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINT2\", \"OTG_FS host channel-2\
    \ interrupt register\n              (OTG_FS_HCINT2)\", address + 0x0148, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer\
    \ completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"\
    chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcint3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINT3\", \"OTG_FS host channel-3\
    \ interrupt register\n              (OTG_FS_HCINT3)\", address + 0x0168, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer\
    \ completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"\
    chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcint4Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINT4\", \"OTG_FS host channel-4\
    \ interrupt register\n              (OTG_FS_HCINT4)\", address + 0x0188, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer\
    \ completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"\
    chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcint5Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINT5\", \"OTG_FS host channel-5\
    \ interrupt register\n              (OTG_FS_HCINT5)\", address + 0x01A8, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer\
    \ completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"\
    chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcint6Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINT6\", \"OTG_FS host channel-6\
    \ interrupt register\n              (OTG_FS_HCINT6)\", address + 0x01C8, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer\
    \ completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"\
    chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcint7Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINT7\", \"OTG_FS host channel-7\
    \ interrupt register\n              (OTG_FS_HCINT7)\", address + 0x01E8, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer\
    \ completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh = Field(\"\
    chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n            self.stall\
    \ = Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.txerr = Field(\"txerr\", \"Transaction error\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberr = Field(\"bberr\", \"Babble error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\"\
    , \"Frame overrun\", self._address, 9, 0x0001, 1, proxy)\n            self.dterr\
    \ = Field(\"dterr\", \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n\
    \    \n    class Fs_hcintmsk0Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK0\", \"OTG_FS host channel-0\
    \ mask register\n              (OTG_FS_HCINTMSK0)\", address + 0x010C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk1Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK1\", \"OTG_FS host channel-1\
    \ mask register\n              (OTG_FS_HCINTMSK1)\", address + 0x012C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk2Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK2\", \"OTG_FS host channel-2\
    \ mask register\n              (OTG_FS_HCINTMSK2)\", address + 0x014C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK3\", \"OTG_FS host channel-3\
    \ mask register\n              (OTG_FS_HCINTMSK3)\", address + 0x016C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk4Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK4\", \"OTG_FS host channel-4\
    \ mask register\n              (OTG_FS_HCINTMSK4)\", address + 0x018C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk5Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK5\", \"OTG_FS host channel-5\
    \ mask register\n              (OTG_FS_HCINTMSK5)\", address + 0x01AC, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk6Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK6\", \"OTG_FS host channel-6\
    \ mask register\n              (OTG_FS_HCINTMSK6)\", address + 0x01CC, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hcintmsk7Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCINTMSK7\", \"OTG_FS host channel-7\
    \ mask register\n              (OTG_FS_HCINTMSK7)\", address + 0x01EC, 32, \"\
    read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer\
    \ completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Fs_hctsiz0Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ0\", \"OTG_FS host channel-0\
    \ transfer size\n              register\", address + 0x0110, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz1Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ1\", \"OTG_FS host channel-1\
    \ transfer size\n              register\", address + 0x0130, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz2Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ2\", \"OTG_FS host channel-2\
    \ transfer size\n              register\", address + 0x0150, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ3\", \"OTG_FS host channel-3\
    \ transfer size\n              register\", address + 0x0170, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz4Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ4\", \"OTG_FS host channel-x\
    \ transfer size\n              register\", address + 0x0190, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz5Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ5\", \"OTG_FS host channel-5\
    \ transfer size\n              register\", address + 0x01B0, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz6Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ6\", \"OTG_FS host channel-6\
    \ transfer size\n              register\", address + 0x01D0, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    class Fs_hctsiz7Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_HCTSIZ7\", \"OTG_FS host channel-7\
    \ transfer size\n              register\", address + 0x01F0, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\"\
    , self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n            self.dpid\
    \ = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003, 2, proxy)\n    \n\
    \    def __init__(self, proxy):\n        super().__init__(\"otg_fs_host\", \"\
    USB on the go full speed\", 0x50000400)\n        self.fs_hcfg = self.Fs_hcfgRegister(self.address,\
    \ proxy)\n        self.hfir = self.HfirRegister(self.address, proxy)\n       \
    \ self.fs_hfnum = self.Fs_hfnumRegister(self.address, proxy)\n        self.fs_hptxsts\
    \ = self.Fs_hptxstsRegister(self.address, proxy)\n        self.haint = self.HaintRegister(self.address,\
    \ proxy)\n        self.haintmsk = self.HaintmskRegister(self.address, proxy)\n\
    \        self.fs_hprt = self.Fs_hprtRegister(self.address, proxy)\n        self.fs_hcchar0\
    \ = self.Fs_hcchar0Register(self.address, proxy)\n        self.fs_hcchar1 = self.Fs_hcchar1Register(self.address,\
    \ proxy)\n        self.fs_hcchar2 = self.Fs_hcchar2Register(self.address, proxy)\n\
    \        self.fs_hcchar3 = self.Fs_hcchar3Register(self.address, proxy)\n    \
    \    self.fs_hcchar4 = self.Fs_hcchar4Register(self.address, proxy)\n        self.fs_hcchar5\
    \ = self.Fs_hcchar5Register(self.address, proxy)\n        self.fs_hcchar6 = self.Fs_hcchar6Register(self.address,\
    \ proxy)\n        self.fs_hcchar7 = self.Fs_hcchar7Register(self.address, proxy)\n\
    \        self.fs_hcint0 = self.Fs_hcint0Register(self.address, proxy)\n      \
    \  self.fs_hcint1 = self.Fs_hcint1Register(self.address, proxy)\n        self.fs_hcint2\
    \ = self.Fs_hcint2Register(self.address, proxy)\n        self.fs_hcint3 = self.Fs_hcint3Register(self.address,\
    \ proxy)\n        self.fs_hcint4 = self.Fs_hcint4Register(self.address, proxy)\n\
    \        self.fs_hcint5 = self.Fs_hcint5Register(self.address, proxy)\n      \
    \  self.fs_hcint6 = self.Fs_hcint6Register(self.address, proxy)\n        self.fs_hcint7\
    \ = self.Fs_hcint7Register(self.address, proxy)\n        self.fs_hcintmsk0 = self.Fs_hcintmsk0Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk1 = self.Fs_hcintmsk1Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk2 = self.Fs_hcintmsk2Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk3 = self.Fs_hcintmsk3Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk4 = self.Fs_hcintmsk4Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk5 = self.Fs_hcintmsk5Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk6 = self.Fs_hcintmsk6Register(self.address,\
    \ proxy)\n        self.fs_hcintmsk7 = self.Fs_hcintmsk7Register(self.address,\
    \ proxy)\n        self.fs_hctsiz0 = self.Fs_hctsiz0Register(self.address, proxy)\n\
    \        self.fs_hctsiz1 = self.Fs_hctsiz1Register(self.address, proxy)\n    \
    \    self.fs_hctsiz2 = self.Fs_hctsiz2Register(self.address, proxy)\n        self.fs_hctsiz3\
    \ = self.Fs_hctsiz3Register(self.address, proxy)\n        self.fs_hctsiz4 = self.Fs_hctsiz4Register(self.address,\
    \ proxy)\n        self.fs_hctsiz5 = self.Fs_hctsiz5Register(self.address, proxy)\n\
    \        self.fs_hctsiz6 = self.Fs_hctsiz6Register(self.address, proxy)\n    \
    \    self.fs_hctsiz7 = self.Fs_hctsiz7Register(self.address, proxy)\n"
  name: OTG_FS_HOST
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_fs_device(Peripheral):\n\
    \    class Fs_dcfgRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FS_DCFG\", \"OTG_FS device configuration register\n\
    \              (OTG_FS_DCFG)\", address + 0x0000, 32, \"read-write\", 0x2200000,\
    \ proxy)\n            self.dspd = Field(\"dspd\", \"Device speed\", self._address,\
    \ 0, 0x0003, 2, proxy)\n            self.nzlsohsk = Field(\"nzlsohsk\", \"Non-zero-length\
    \ status OUT\n                          handshake\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 4, 0x007F, 7, proxy)\n            self.pfivl = Field(\"pfivl\", \"Periodic frame\
    \ interval\", self._address, 11, 0x0003, 2, proxy)\n            self.erratim =\
    \ Field(\"erratim\", \"Erratic error interrupt\n                          mask\"\
    , self._address, 15, 0x0001, 1, proxy)\n    \n    class Fs_dctlRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_DCTL\", \"OTG_FS device control register\n              (OTG_FS_DCTL)\", address\
    \ + 0x0004, 32, \"\", 0x0000, proxy)\n            self.rwusig = Field(\"rwusig\"\
    , \"Remote wakeup signaling\", self._address, 0, 0x0001, 1, proxy)\n         \
    \   self.sdis = Field(\"sdis\", \"Soft disconnect\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.ginsts = Field(\"ginsts\", \"Global IN NAK status\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.gonsts = Field(\"gonsts\"\
    , \"Global OUT NAK status\", self._address, 3, 0x0001, 1, proxy)\n           \
    \ self.tctl = Field(\"tctl\", \"Test control\", self._address, 4, 0x0007, 3, proxy)\n\
    \            self.sginak = Field(\"sginak\", \"Set global IN NAK\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cginak = Field(\"cginak\", \"Clear global\
    \ IN NAK\", self._address, 8, 0x0001, 1, proxy)\n            self.sgonak = Field(\"\
    sgonak\", \"Set global OUT NAK\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.cgonak = Field(\"cgonak\", \"Clear global OUT NAK\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.poprgdne = Field(\"poprgdne\", \"Power-on\
    \ programming done\", self._address, 11, 0x0001, 1, proxy)\n    \n    class Fs_dstsRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_DSTS\", \"OTG_FS device status register\n              (OTG_FS_DSTS)\", address\
    \ + 0x0008, 32, \"read-only\", 0x0010, proxy)\n            self.suspsts = Field(\"\
    suspsts\", \"Suspend status\", self._address, 0, 0x0001, 1, proxy)\n         \
    \   self.enumspd = Field(\"enumspd\", \"Enumerated speed\", self._address, 1,\
    \ 0x0003, 2, proxy)\n            self.eerr = Field(\"eerr\", \"Erratic error\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fnsof = Field(\"fnsof\"\
    , \"Frame number of the received\n                          SOF\", self._address,\
    \ 8, 0x3FFF, 14, proxy)\n    \n    class Fs_diepmskRegister(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"FS_DIEPMSK\"\
    , \"OTG_FS device IN endpoint common interrupt\n              mask register (OTG_FS_DIEPMSK)\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed interrupt\n                        \
    \  mask\", self._address, 0, 0x0001, 1, proxy)\n            self.epdm = Field(\"\
    epdm\", \"Endpoint disabled interrupt\n                          mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.tom = Field(\"tom\", \"Timeout condition\
    \ mask (Non-isochronous\n                          endpoints)\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfemsk = Field(\"ittxfemsk\", \"IN\
    \ token received when TxFIFO empty\n                          mask\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.inepnmm = Field(\"inepnmm\", \"IN token\
    \ received with EP mismatch\n                          mask\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.inepnem = Field(\"inepnem\", \"IN endpoint\
    \ NAK effective\n                          mask\", self._address, 6, 0x0001, 1,\
    \ proxy)\n    \n    class Fs_doepmskRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FS_DOEPMSK\", \"OTG_FS device\
    \ OUT endpoint common interrupt\n              mask register (OTG_FS_DOEPMSK)\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed interrupt\n                        \
    \  mask\", self._address, 0, 0x0001, 1, proxy)\n            self.epdm = Field(\"\
    epdm\", \"Endpoint disabled interrupt\n                          mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.stupm = Field(\"stupm\", \"SETUP phase\
    \ done mask\", self._address, 3, 0x0001, 1, proxy)\n            self.otepdm =\
    \ Field(\"otepdm\", \"OUT token received when endpoint\n                     \
    \     disabled mask\", self._address, 4, 0x0001, 1, proxy)\n    \n    class Fs_daintRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FS_DAINT\", \"OTG_FS device all endpoints interrupt\n              register (OTG_FS_DAINT)\"\
    , address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n            self.iepint\
    \ = Field(\"iepint\", \"IN endpoint interrupt bits\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n            self.oepint = Field(\"oepint\", \"OUT endpoint interrupt\n\
    \                          bits\", self._address, 16, 0xFFFF, 16, proxy)\n   \
    \ \n    class Fs_daintmskRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_DAINTMSK\", \"OTG_FS all endpoints\
    \ interrupt mask register\n              (OTG_FS_DAINTMSK)\", address + 0x001C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.iepm = Field(\"iepm\",\
    \ \"IN EP interrupt mask bits\", self._address, 0, 0xFFFF, 16, proxy)\n      \
    \      self.oepm = Field(\"oepm\", \"OUT endpoint interrupt\n                \
    \          bits\", self._address, 16, 0xFFFF, 16, proxy)\n    \n    class DvbusdisRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DVBUSDIS\", \"OTG_FS device VBUS discharge time\n              register\", address\
    \ + 0x0028, 32, \"read-write\", 0x17D7, proxy)\n            self.vbusdt = Field(\"\
    vbusdt\", \"Device VBUS discharge time\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class DvbuspulseRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DVBUSPULSE\", \"OTG_FS device VBUS pulsing\
    \ time\n              register\", address + 0x002C, 32, \"read-write\", 0x05B8,\
    \ proxy)\n            self.dvbusp = Field(\"dvbusp\", \"Device VBUS pulsing time\"\
    , self._address, 0, 0x0FFF, 12, proxy)\n    \n    class DiepempmskRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIEPEMPMSK\", \"OTG_FS device IN endpoint FIFO empty\n              interrupt\
    \ mask register\", address + 0x0034, 32, \"read-write\", 0x0000, proxy)\n    \
    \        self.ineptxfem = Field(\"ineptxfem\", \"IN EP Tx FIFO empty interrupt\
    \ mask\n                          bits\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class Fs_diepctl0Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_DIEPCTL0\", \"OTG_FS device control\
    \ IN endpoint 0 control\n              register (OTG_FS_DIEPCTL0)\", address +\
    \ 0x0100, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\",\
    \ \"Maximum packet size\", self._address, 0, 0x0003, 2, proxy)\n            self.usbaep\
    \ = Field(\"usbaep\", \"USB active endpoint\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.naksts = Field(\"naksts\", \"NAK status\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.stall = Field(\"stall\"\
    , \"STALL handshake\", self._address, 21, 0x0001, 1, proxy)\n            self.txfnum\
    \ = Field(\"txfnum\", \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n\
    \            self.cnak = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.snak = Field(\"snak\", \"Set NAK\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\", \"Endpoint\
    \ disable\", self._address, 30, 0x0001, 1, proxy)\n            self.epena = Field(\"\
    epena\", \"Endpoint enable\", self._address, 31, 0x0001, 1, proxy)\n    \n   \
    \ class Diepctl1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DIEPCTL1\", \"OTG device endpoint-1 control\n\
    \              register\", address + 0x0120, 32, \"\", 0x0000, proxy)\n      \
    \      self.epena = Field(\"epena\", \"EPENA\", self._address, 31, 0x0001, 1,\
    \ proxy)\n            self.epdis = Field(\"epdis\", \"EPDIS\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.soddfrm_sd1pid = Field(\"soddfrm_sd1pid\"\
    , \"SODDFRM/SD1PID\", self._address, 29, 0x0001, 1, proxy)\n            self.sd0pid_sevnfrm\
    \ = Field(\"sd0pid_sevnfrm\", \"SD0PID/SEVNFRM\", self._address, 28, 0x0001, 1,\
    \ proxy)\n            self.snak = Field(\"snak\", \"SNAK\", self._address, 27,\
    \ 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\", \"CNAK\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\", \"TXFNUM\"\
    , self._address, 22, 0x000F, 4, proxy)\n            self.stall = Field(\"stall\"\
    , \"Stall\", self._address, 21, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"EPTYP\", self._address, 18, 0x0003, 2, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAKSTS\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.eonum_dpid = Field(\"eonum_dpid\", \"EONUM/DPID\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.usbaep = Field(\"usbaep\", \"USBAEP\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"MPSIZ\", self._address, 0, 0x07FF, 11, proxy)\n    \n    class Diepctl2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIEPCTL2\", \"OTG device endpoint-2 control\n              register\", address\
    \ + 0x0140, 32, \"\", 0x0000, proxy)\n            self.epena = Field(\"epena\"\
    , \"EPENA\", self._address, 31, 0x0001, 1, proxy)\n            self.epdis = Field(\"\
    epdis\", \"EPDIS\", self._address, 30, 0x0001, 1, proxy)\n            self.soddfrm\
    \ = Field(\"soddfrm\", \"SODDFRM\", self._address, 29, 0x0001, 1, proxy)\n   \
    \         self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"SD0PID/SEVNFRM\",\
    \ self._address, 28, 0x0001, 1, proxy)\n            self.snak = Field(\"snak\"\
    , \"SNAK\", self._address, 27, 0x0001, 1, proxy)\n            self.cnak = Field(\"\
    cnak\", \"CNAK\", self._address, 26, 0x0001, 1, proxy)\n            self.txfnum\
    \ = Field(\"txfnum\", \"TXFNUM\", self._address, 22, 0x000F, 4, proxy)\n     \
    \       self.stall = Field(\"stall\", \"Stall\", self._address, 21, 0x0001, 1,\
    \ proxy)\n            self.eptyp = Field(\"eptyp\", \"EPTYP\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.naksts = Field(\"naksts\", \"NAKSTS\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"\
    eonum_dpid\", \"EONUM/DPID\", self._address, 16, 0x0001, 1, proxy)\n         \
    \   self.usbaep = Field(\"usbaep\", \"USBAEP\", self._address, 15, 0x0001, 1,\
    \ proxy)\n            self.mpsiz = Field(\"mpsiz\", \"MPSIZ\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n    \n    class Diepctl3Register(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"DIEPCTL3\"\
    , \"OTG device endpoint-3 control\n              register\", address + 0x0160,\
    \ 32, \"\", 0x0000, proxy)\n            self.epena = Field(\"epena\", \"EPENA\"\
    , self._address, 31, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\"\
    , \"EPDIS\", self._address, 30, 0x0001, 1, proxy)\n            self.soddfrm =\
    \ Field(\"soddfrm\", \"SODDFRM\", self._address, 29, 0x0001, 1, proxy)\n     \
    \       self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"SD0PID/SEVNFRM\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.snak = Field(\"snak\", \"SNAK\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\", \"CNAK\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\", \"TXFNUM\"\
    , self._address, 22, 0x000F, 4, proxy)\n            self.stall = Field(\"stall\"\
    , \"Stall\", self._address, 21, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"EPTYP\", self._address, 18, 0x0003, 2, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAKSTS\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.eonum_dpid = Field(\"eonum_dpid\", \"EONUM/DPID\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.usbaep = Field(\"usbaep\", \"USBAEP\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"MPSIZ\", self._address, 0, 0x07FF, 11, proxy)\n    \n    class Doepctl0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOEPCTL0\", \"device endpoint-0 control\n              register\", address + 0x0300,\
    \ 32, \"\", 0x8000, proxy)\n            self.epena = Field(\"epena\", \"EPENA\"\
    , self._address, 31, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\"\
    , \"EPDIS\", self._address, 30, 0x0001, 1, proxy)\n            self.snak = Field(\"\
    snak\", \"SNAK\", self._address, 27, 0x0001, 1, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"CNAK\", self._address, 26, 0x0001, 1, proxy)\n         \
    \   self.stall = Field(\"stall\", \"Stall\", self._address, 21, 0x0001, 1, proxy)\n\
    \            self.snpm = Field(\"snpm\", \"SNPM\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"EPTYP\", self._address,\
    \ 18, 0x0003, 2, proxy)\n            self.naksts = Field(\"naksts\", \"NAKSTS\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.usbaep = Field(\"usbaep\"\
    , \"USBAEP\", self._address, 15, 0x0001, 1, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"MPSIZ\", self._address, 0, 0x0003, 2, proxy)\n    \n    class Doepctl1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOEPCTL1\", \"device endpoint-1 control\n              register\", address + 0x0320,\
    \ 32, \"\", 0x0000, proxy)\n            self.epena = Field(\"epena\", \"EPENA\"\
    , self._address, 31, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\"\
    , \"EPDIS\", self._address, 30, 0x0001, 1, proxy)\n            self.soddfrm =\
    \ Field(\"soddfrm\", \"SODDFRM\", self._address, 29, 0x0001, 1, proxy)\n     \
    \       self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"SD0PID/SEVNFRM\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.snak = Field(\"snak\", \"SNAK\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\", \"CNAK\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"Stall\",\
    \ self._address, 21, 0x0001, 1, proxy)\n            self.snpm = Field(\"snpm\"\
    , \"SNPM\", self._address, 20, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"EPTYP\", self._address, 18, 0x0003, 2, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAKSTS\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.eonum_dpid = Field(\"eonum_dpid\", \"EONUM/DPID\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.usbaep = Field(\"usbaep\", \"USBAEP\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"MPSIZ\", self._address, 0, 0x07FF, 11, proxy)\n    \n    class Doepctl2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOEPCTL2\", \"device endpoint-2 control\n              register\", address + 0x0340,\
    \ 32, \"\", 0x0000, proxy)\n            self.epena = Field(\"epena\", \"EPENA\"\
    , self._address, 31, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\"\
    , \"EPDIS\", self._address, 30, 0x0001, 1, proxy)\n            self.soddfrm =\
    \ Field(\"soddfrm\", \"SODDFRM\", self._address, 29, 0x0001, 1, proxy)\n     \
    \       self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"SD0PID/SEVNFRM\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.snak = Field(\"snak\", \"SNAK\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\", \"CNAK\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"Stall\",\
    \ self._address, 21, 0x0001, 1, proxy)\n            self.snpm = Field(\"snpm\"\
    , \"SNPM\", self._address, 20, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"EPTYP\", self._address, 18, 0x0003, 2, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAKSTS\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.eonum_dpid = Field(\"eonum_dpid\", \"EONUM/DPID\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.usbaep = Field(\"usbaep\", \"USBAEP\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"MPSIZ\", self._address, 0, 0x07FF, 11, proxy)\n    \n    class Doepctl3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOEPCTL3\", \"device endpoint-3 control\n              register\", address + 0x0360,\
    \ 32, \"\", 0x0000, proxy)\n            self.epena = Field(\"epena\", \"EPENA\"\
    , self._address, 31, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\"\
    , \"EPDIS\", self._address, 30, 0x0001, 1, proxy)\n            self.soddfrm =\
    \ Field(\"soddfrm\", \"SODDFRM\", self._address, 29, 0x0001, 1, proxy)\n     \
    \       self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"SD0PID/SEVNFRM\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.snak = Field(\"snak\", \"SNAK\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\", \"CNAK\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"Stall\",\
    \ self._address, 21, 0x0001, 1, proxy)\n            self.snpm = Field(\"snpm\"\
    , \"SNPM\", self._address, 20, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"EPTYP\", self._address, 18, 0x0003, 2, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAKSTS\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.eonum_dpid = Field(\"eonum_dpid\", \"EONUM/DPID\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.usbaep = Field(\"usbaep\", \"USBAEP\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"MPSIZ\", self._address, 0, 0x07FF, 11, proxy)\n    \n    class Diepint0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIEPINT0\", \"device endpoint-x interrupt\n              register\", address +\
    \ 0x0108, 32, \"\", 0x0080, proxy)\n            self.txfe = Field(\"txfe\", \"\
    TXFE\", self._address, 7, 0x0001, 1, proxy)\n            self.inepne = Field(\"\
    inepne\", \"INEPNE\", self._address, 6, 0x0001, 1, proxy)\n            self.ittxfe\
    \ = Field(\"ittxfe\", \"ITTXFE\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.toc = Field(\"toc\", \"TOC\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.epdisd = Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.xfrc = Field(\"xfrc\", \"XFRC\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Diepint1Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"DIEPINT1\",\
    \ \"device endpoint-1 interrupt\n              register\", address + 0x0128, 32,\
    \ \"\", 0x0080, proxy)\n            self.txfe = Field(\"txfe\", \"TXFE\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"INEPNE\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\"\
    , \"ITTXFE\", self._address, 4, 0x0001, 1, proxy)\n            self.toc = Field(\"\
    toc\", \"TOC\", self._address, 3, 0x0001, 1, proxy)\n            self.epdisd =\
    \ Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001, 1, proxy)\n        \
    \    self.xfrc = Field(\"xfrc\", \"XFRC\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class Diepint2Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DIEPINT2\", \"device endpoint-2 interrupt\n\
    \              register\", address + 0x0148, 32, \"\", 0x0080, proxy)\n      \
    \      self.txfe = Field(\"txfe\", \"TXFE\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.inepne = Field(\"inepne\", \"INEPNE\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"ITTXFE\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.toc = Field(\"toc\", \"TOC\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"EPDISD\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.xfrc = Field(\"xfrc\"\
    , \"XFRC\", self._address, 0, 0x0001, 1, proxy)\n    \n    class Diepint3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIEPINT3\", \"device endpoint-3 interrupt\n              register\", address +\
    \ 0x0168, 32, \"\", 0x0080, proxy)\n            self.txfe = Field(\"txfe\", \"\
    TXFE\", self._address, 7, 0x0001, 1, proxy)\n            self.inepne = Field(\"\
    inepne\", \"INEPNE\", self._address, 6, 0x0001, 1, proxy)\n            self.ittxfe\
    \ = Field(\"ittxfe\", \"ITTXFE\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.toc = Field(\"toc\", \"TOC\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.epdisd = Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.xfrc = Field(\"xfrc\", \"XFRC\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Doepint0Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"DOEPINT0\",\
    \ \"device endpoint-0 interrupt\n              register\", address + 0x0308, 32,\
    \ \"read-write\", 0x0080, proxy)\n            self.b2bstup = Field(\"b2bstup\"\
    , \"B2BSTUP\", self._address, 6, 0x0001, 1, proxy)\n            self.otepdis =\
    \ Field(\"otepdis\", \"OTEPDIS\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.stup = Field(\"stup\", \"STUP\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.epdisd = Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.xfrc = Field(\"xfrc\", \"XFRC\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Doepint1Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"DOEPINT1\",\
    \ \"device endpoint-1 interrupt\n              register\", address + 0x0328, 32,\
    \ \"read-write\", 0x0080, proxy)\n            self.b2bstup = Field(\"b2bstup\"\
    , \"B2BSTUP\", self._address, 6, 0x0001, 1, proxy)\n            self.otepdis =\
    \ Field(\"otepdis\", \"OTEPDIS\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.stup = Field(\"stup\", \"STUP\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.epdisd = Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.xfrc = Field(\"xfrc\", \"XFRC\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Doepint2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"DOEPINT2\",\
    \ \"device endpoint-2 interrupt\n              register\", address + 0x0348, 32,\
    \ \"read-write\", 0x0080, proxy)\n            self.b2bstup = Field(\"b2bstup\"\
    , \"B2BSTUP\", self._address, 6, 0x0001, 1, proxy)\n            self.otepdis =\
    \ Field(\"otepdis\", \"OTEPDIS\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.stup = Field(\"stup\", \"STUP\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.epdisd = Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.xfrc = Field(\"xfrc\", \"XFRC\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Doepint3Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"DOEPINT3\",\
    \ \"device endpoint-3 interrupt\n              register\", address + 0x0368, 32,\
    \ \"read-write\", 0x0080, proxy)\n            self.b2bstup = Field(\"b2bstup\"\
    , \"B2BSTUP\", self._address, 6, 0x0001, 1, proxy)\n            self.otepdis =\
    \ Field(\"otepdis\", \"OTEPDIS\", self._address, 4, 0x0001, 1, proxy)\n      \
    \      self.stup = Field(\"stup\", \"STUP\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.epdisd = Field(\"epdisd\", \"EPDISD\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.xfrc = Field(\"xfrc\", \"XFRC\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Dieptsiz0Register(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"DIEPTSIZ0\"\
    , \"device endpoint-0 transfer size\n              register\", address + 0x0110,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.pktcnt = Field(\"pktcnt\"\
    , \"Packet count\", self._address, 19, 0x0003, 2, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x007F, 7, proxy)\n\
    \    \n    class Doeptsiz0Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DOEPTSIZ0\", \"device OUT endpoint-0\
    \ transfer size\n              register\", address + 0x0310, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.stupcnt = Field(\"stupcnt\", \"SETUP packet\
    \ count\", self._address, 29, 0x0003, 2, proxy)\n            self.pktcnt = Field(\"\
    pktcnt\", \"Packet count\", self._address, 19, 0x0001, 1, proxy)\n           \
    \ self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x007F,\
    \ 7, proxy)\n    \n    class Dieptsiz1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DIEPTSIZ1\", \"device endpoint-1\
    \ transfer size\n              register\", address + 0x0130, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.mcnt = Field(\"mcnt\", \"Multi count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n            self.pktcnt = Field(\"pktcnt\", \"Packet\
    \ count\", self._address, 19, 0x03FF, 10, proxy)\n            self.xfrsiz = Field(\"\
    xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n    \n   \
    \ class Dieptsiz2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"DIEPTSIZ2\", \"device endpoint-2 transfer size\n\
    \              register\", address + 0x0150, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.mcnt = Field(\"mcnt\", \"Multi count\", self._address, 29, 0x0003,\
    \ 2, proxy)\n            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.xfrsiz = Field(\"xfrsiz\", \"Transfer\
    \ size\", self._address, 0, 0x7FFFF, 19, proxy)\n    \n    class Dieptsiz3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DIEPTSIZ3\", \"device endpoint-3 transfer size\n              register\", address\
    \ + 0x0170, 32, \"read-write\", 0x0000, proxy)\n            self.mcnt = Field(\"\
    mcnt\", \"Multi count\", self._address, 29, 0x0003, 2, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\", self._address,\
    \ 0, 0x7FFFF, 19, proxy)\n    \n    class Dtxfsts0Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"DTXFSTS0\"\
    , \"OTG_FS device IN endpoint transmit FIFO\n              status register\",\
    \ address + 0x0118, 32, \"read-only\", 0x0000, proxy)\n            self.ineptfsav\
    \ = Field(\"ineptfsav\", \"IN endpoint TxFIFO space\n                        \
    \  available\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Dtxfsts1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DTXFSTS1\", \"OTG_FS device IN endpoint transmit FIFO\n              status register\"\
    , address + 0x0138, 32, \"read-only\", 0x0000, proxy)\n            self.ineptfsav\
    \ = Field(\"ineptfsav\", \"IN endpoint TxFIFO space\n                        \
    \  available\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Dtxfsts2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DTXFSTS2\", \"OTG_FS device IN endpoint transmit FIFO\n              status register\"\
    , address + 0x0158, 32, \"read-only\", 0x0000, proxy)\n            self.ineptfsav\
    \ = Field(\"ineptfsav\", \"IN endpoint TxFIFO space\n                        \
    \  available\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Dtxfsts3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DTXFSTS3\", \"OTG_FS device IN endpoint transmit FIFO\n              status register\"\
    , address + 0x0178, 32, \"read-only\", 0x0000, proxy)\n            self.ineptfsav\
    \ = Field(\"ineptfsav\", \"IN endpoint TxFIFO space\n                        \
    \  available\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Doeptsiz1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DOEPTSIZ1\", \"device OUT endpoint-1 transfer size\n              register\",\
    \ address + 0x0330, 32, \"read-write\", 0x0000, proxy)\n            self.rxdpid_stupcnt\
    \ = Field(\"rxdpid_stupcnt\", \"Received data PID/SETUP packet\n             \
    \             count\", self._address, 29, 0x0003, 2, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\", self._address,\
    \ 0, 0x7FFFF, 19, proxy)\n    \n    class Doeptsiz2Register(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"DOEPTSIZ2\"\
    , \"device OUT endpoint-2 transfer size\n              register\", address + 0x0350,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.rxdpid_stupcnt = Field(\"\
    rxdpid_stupcnt\", \"Received data PID/SETUP packet\n                         \
    \ count\", self._address, 29, 0x0003, 2, proxy)\n            self.pktcnt = Field(\"\
    pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n          \
    \  self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF,\
    \ 19, proxy)\n    \n    class Doeptsiz3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DOEPTSIZ3\", \"device OUT endpoint-3\
    \ transfer size\n              register\", address + 0x0370, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.rxdpid_stupcnt = Field(\"rxdpid_stupcnt\",\
    \ \"Received data PID/SETUP packet\n                          count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n            self.pktcnt = Field(\"pktcnt\", \"Packet\
    \ count\", self._address, 19, 0x03FF, 10, proxy)\n            self.xfrsiz = Field(\"\
    xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n    \n   \
    \ def __init__(self, proxy):\n        super().__init__(\"otg_fs_device\", \"USB\
    \ on the go full speed\", 0x50000800)\n        self.fs_dcfg = self.Fs_dcfgRegister(self.address,\
    \ proxy)\n        self.fs_dctl = self.Fs_dctlRegister(self.address, proxy)\n \
    \       self.fs_dsts = self.Fs_dstsRegister(self.address, proxy)\n        self.fs_diepmsk\
    \ = self.Fs_diepmskRegister(self.address, proxy)\n        self.fs_doepmsk = self.Fs_doepmskRegister(self.address,\
    \ proxy)\n        self.fs_daint = self.Fs_daintRegister(self.address, proxy)\n\
    \        self.fs_daintmsk = self.Fs_daintmskRegister(self.address, proxy)\n  \
    \      self.dvbusdis = self.DvbusdisRegister(self.address, proxy)\n        self.dvbuspulse\
    \ = self.DvbuspulseRegister(self.address, proxy)\n        self.diepempmsk = self.DiepempmskRegister(self.address,\
    \ proxy)\n        self.fs_diepctl0 = self.Fs_diepctl0Register(self.address, proxy)\n\
    \        self.diepctl1 = self.Diepctl1Register(self.address, proxy)\n        self.diepctl2\
    \ = self.Diepctl2Register(self.address, proxy)\n        self.diepctl3 = self.Diepctl3Register(self.address,\
    \ proxy)\n        self.doepctl0 = self.Doepctl0Register(self.address, proxy)\n\
    \        self.doepctl1 = self.Doepctl1Register(self.address, proxy)\n        self.doepctl2\
    \ = self.Doepctl2Register(self.address, proxy)\n        self.doepctl3 = self.Doepctl3Register(self.address,\
    \ proxy)\n        self.diepint0 = self.Diepint0Register(self.address, proxy)\n\
    \        self.diepint1 = self.Diepint1Register(self.address, proxy)\n        self.diepint2\
    \ = self.Diepint2Register(self.address, proxy)\n        self.diepint3 = self.Diepint3Register(self.address,\
    \ proxy)\n        self.doepint0 = self.Doepint0Register(self.address, proxy)\n\
    \        self.doepint1 = self.Doepint1Register(self.address, proxy)\n        self.doepint2\
    \ = self.Doepint2Register(self.address, proxy)\n        self.doepint3 = self.Doepint3Register(self.address,\
    \ proxy)\n        self.dieptsiz0 = self.Dieptsiz0Register(self.address, proxy)\n\
    \        self.doeptsiz0 = self.Doeptsiz0Register(self.address, proxy)\n      \
    \  self.dieptsiz1 = self.Dieptsiz1Register(self.address, proxy)\n        self.dieptsiz2\
    \ = self.Dieptsiz2Register(self.address, proxy)\n        self.dieptsiz3 = self.Dieptsiz3Register(self.address,\
    \ proxy)\n        self.dtxfsts0 = self.Dtxfsts0Register(self.address, proxy)\n\
    \        self.dtxfsts1 = self.Dtxfsts1Register(self.address, proxy)\n        self.dtxfsts2\
    \ = self.Dtxfsts2Register(self.address, proxy)\n        self.dtxfsts3 = self.Dtxfsts3Register(self.address,\
    \ proxy)\n        self.doeptsiz1 = self.Doeptsiz1Register(self.address, proxy)\n\
    \        self.doeptsiz2 = self.Doeptsiz2Register(self.address, proxy)\n      \
    \  self.doeptsiz3 = self.Doeptsiz3Register(self.address, proxy)\n"
  name: OTG_FS_DEVICE
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_fs_pwrclk(Peripheral):\n\
    \    class Fs_pcgcctlRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"FS_PCGCCTL\", \"OTG_FS power and clock\
    \ gating control\n              register (OTG_FS_PCGCCTL)\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.stppclk = Field(\"stppclk\"\
    , \"Stop PHY clock\", self._address, 0, 0x0001, 1, proxy)\n            self.gatehclk\
    \ = Field(\"gatehclk\", \"Gate HCLK\", self._address, 1, 0x0001, 1, proxy)\n \
    \           self.physusp = Field(\"physusp\", \"PHY Suspended\", self._address,\
    \ 4, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    otg_fs_pwrclk\", \"USB on the go full speed\", 0x50000E00)\n        self.fs_pcgcctl\
    \ = self.Fs_pcgcctlRegister(self.address, proxy)\n"
  name: OTG_FS_PWRCLK
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Can1(Peripheral):\n\
    \    class McrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MCR\", \"master control register\", address +\
    \ 0x0000, 32, \"read-write\", 0x10002, proxy)\n            self.dbf = Field(\"\
    dbf\", \"DBF\", self._address, 16, 0x0001, 1, proxy)\n            self.reset =\
    \ Field(\"reset\", \"RESET\", self._address, 15, 0x0001, 1, proxy)\n         \
    \   self.ttcm = Field(\"ttcm\", \"TTCM\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.abom = Field(\"abom\", \"ABOM\", self._address, 6, 0x0001, 1,\
    \ proxy)\n            self.awum = Field(\"awum\", \"AWUM\", self._address, 5,\
    \ 0x0001, 1, proxy)\n            self.nart = Field(\"nart\", \"NART\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.rflm = Field(\"rflm\", \"RFLM\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.txfp = Field(\"txfp\", \"TXFP\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.sleep = Field(\"sleep\", \"SLEEP\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.inrq = Field(\"inrq\", \"INRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class MsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"MSR\", \"master status register\"\
    , address + 0x0004, 32, \"\", 0x0C02, proxy)\n            self.rx = Field(\"rx\"\
    , \"RX\", self._address, 11, 0x0001, 1, proxy)\n            self.samp = Field(\"\
    samp\", \"SAMP\", self._address, 10, 0x0001, 1, proxy)\n            self.rxm =\
    \ Field(\"rxm\", \"RXM\", self._address, 9, 0x0001, 1, proxy)\n            self.txm\
    \ = Field(\"txm\", \"TXM\", self._address, 8, 0x0001, 1, proxy)\n            self.slaki\
    \ = Field(\"slaki\", \"SLAKI\", self._address, 4, 0x0001, 1, proxy)\n        \
    \    self.wkui = Field(\"wkui\", \"WKUI\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.erri = Field(\"erri\", \"ERRI\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.slak = Field(\"slak\", \"SLAK\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.inak = Field(\"inak\", \"INAK\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class TsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TSR\", \"transmit status register\"\
    , address + 0x0008, 32, \"\", 0x1C000000, proxy)\n            self.low2 = Field(\"\
    low2\", \"Lowest priority flag for mailbox\n                          2\", self._address,\
    \ 31, 0x0001, 1, proxy)\n            self.low1 = Field(\"low1\", \"Lowest priority\
    \ flag for mailbox\n                          1\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.low0 = Field(\"low0\", \"Lowest priority flag for\
    \ mailbox\n                          0\", self._address, 29, 0x0001, 1, proxy)\n\
    \            self.tme2 = Field(\"tme2\", \"Lowest priority flag for mailbox\n\
    \                          2\", self._address, 28, 0x0001, 1, proxy)\n       \
    \     self.tme1 = Field(\"tme1\", \"Lowest priority flag for mailbox\n       \
    \                   1\", self._address, 27, 0x0001, 1, proxy)\n            self.tme0\
    \ = Field(\"tme0\", \"Lowest priority flag for mailbox\n                     \
    \     0\", self._address, 26, 0x0001, 1, proxy)\n            self.code = Field(\"\
    code\", \"CODE\", self._address, 24, 0x0003, 2, proxy)\n            self.abrq2\
    \ = Field(\"abrq2\", \"ABRQ2\", self._address, 23, 0x0001, 1, proxy)\n       \
    \     self.terr2 = Field(\"terr2\", \"TERR2\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.alst2 = Field(\"alst2\", \"ALST2\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.txok2 = Field(\"txok2\", \"TXOK2\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.rqcp2 = Field(\"rqcp2\", \"RQCP2\",\
    \ self._address, 16, 0x0001, 1, proxy)\n            self.abrq1 = Field(\"abrq1\"\
    , \"ABRQ1\", self._address, 15, 0x0001, 1, proxy)\n            self.terr1 = Field(\"\
    terr1\", \"TERR1\", self._address, 11, 0x0001, 1, proxy)\n            self.alst1\
    \ = Field(\"alst1\", \"ALST1\", self._address, 10, 0x0001, 1, proxy)\n       \
    \     self.txok1 = Field(\"txok1\", \"TXOK1\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.rqcp1 = Field(\"rqcp1\", \"RQCP1\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.abrq0 = Field(\"abrq0\", \"ABRQ0\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.terr0 = Field(\"terr0\", \"TERR0\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.alst0 = Field(\"alst0\", \"ALST0\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.txok0 = Field(\"txok0\", \"TXOK0\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rqcp0 = Field(\"rqcp0\", \"RQCP0\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Rf0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RF0R\", \"receive FIFO 0 register\"\
    , address + 0x000C, 32, \"\", 0x0000, proxy)\n            self.rfom0 = Field(\"\
    rfom0\", \"RFOM0\", self._address, 5, 0x0001, 1, proxy)\n            self.fovr0\
    \ = Field(\"fovr0\", \"FOVR0\", self._address, 4, 0x0001, 1, proxy)\n        \
    \    self.full0 = Field(\"full0\", \"FULL0\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.fmp0 = Field(\"fmp0\", \"FMP0\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class Rf1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RF1R\", \"receive FIFO 1 register\"\
    , address + 0x0010, 32, \"\", 0x0000, proxy)\n            self.rfom1 = Field(\"\
    rfom1\", \"RFOM1\", self._address, 5, 0x0001, 1, proxy)\n            self.fovr1\
    \ = Field(\"fovr1\", \"FOVR1\", self._address, 4, 0x0001, 1, proxy)\n        \
    \    self.full1 = Field(\"full1\", \"FULL1\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.fmp1 = Field(\"fmp1\", \"FMP1\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class IerRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"IER\", \"interrupt enable register\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.slkie\
    \ = Field(\"slkie\", \"SLKIE\", self._address, 17, 0x0001, 1, proxy)\n       \
    \     self.wkuie = Field(\"wkuie\", \"WKUIE\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.errie = Field(\"errie\", \"ERRIE\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.lecie = Field(\"lecie\", \"LECIE\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.bofie = Field(\"bofie\", \"BOFIE\",\
    \ self._address, 10, 0x0001, 1, proxy)\n            self.epvie = Field(\"epvie\"\
    , \"EPVIE\", self._address, 9, 0x0001, 1, proxy)\n            self.ewgie = Field(\"\
    ewgie\", \"EWGIE\", self._address, 8, 0x0001, 1, proxy)\n            self.fovie1\
    \ = Field(\"fovie1\", \"FOVIE1\", self._address, 6, 0x0001, 1, proxy)\n      \
    \      self.ffie1 = Field(\"ffie1\", \"FFIE1\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.fmpie1 = Field(\"fmpie1\", \"FMPIE1\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.fovie0 = Field(\"fovie0\", \"FOVIE0\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ffie0 = Field(\"ffie0\", \"FFIE0\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fmpie0 = Field(\"fmpie0\", \"FMPIE0\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.tmeie = Field(\"tmeie\"\
    , \"TMEIE\", self._address, 0, 0x0001, 1, proxy)\n    \n    class EsrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    ESR\", \"interrupt enable register\", address + 0x0018, 32, \"\", 0x0000, proxy)\n\
    \            self.rec = Field(\"rec\", \"REC\", self._address, 24, 0x00FF, 8,\
    \ proxy)\n            self.tec = Field(\"tec\", \"TEC\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.lec = Field(\"lec\", \"LEC\", self._address, 4,\
    \ 0x0007, 3, proxy)\n            self.boff = Field(\"boff\", \"BOFF\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.epvf = Field(\"epvf\", \"EPVF\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ewgf = Field(\"ewgf\", \"EWGF\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BTR\", \"bit timing register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.silm\
    \ = Field(\"silm\", \"SILM\", self._address, 31, 0x0001, 1, proxy)\n         \
    \   self.lbkm = Field(\"lbkm\", \"LBKM\", self._address, 30, 0x0001, 1, proxy)\n\
    \            self.sjw = Field(\"sjw\", \"SJW\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ts2 = Field(\"ts2\", \"TS2\", self._address, 20, 0x0007,\
    \ 3, proxy)\n            self.ts1 = Field(\"ts1\", \"TS1\", self._address, 16,\
    \ 0x000F, 4, proxy)\n            self.brp = Field(\"brp\", \"BRP\", self._address,\
    \ 0, 0x03FF, 10, proxy)\n    \n    class Ti0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TI0R\", \"TX\
    \ mailbox identifier register\", address + 0x0180, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.stid = Field(\"stid\", \"STID\", self._address, 21,\
    \ 0x07FF, 11, proxy)\n            self.exid = Field(\"exid\", \"EXID\", self._address,\
    \ 3, 0x3FFFF, 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.txrq = Field(\"txrq\", \"TXRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Tdt0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TDT0R\", \"\
    mailbox data length control and time stamp\n              register\", address\
    \ + 0x0184, 32, \"read-write\", 0x0000, proxy)\n            self.time = Field(\"\
    time\", \"TIME\", self._address, 16, 0xFFFF, 16, proxy)\n            self.tgt\
    \ = Field(\"tgt\", \"TGT\", self._address, 8, 0x0001, 1, proxy)\n            self.dlc\
    \ = Field(\"dlc\", \"DLC\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Tdl0rRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"TDL0R\", \"mailbox data low register\", address +\
    \ 0x0188, 32, \"read-write\", 0x0000, proxy)\n            self.data3 = Field(\"\
    data3\", \"DATA3\", self._address, 24, 0x00FF, 8, proxy)\n            self.data2\
    \ = Field(\"data2\", \"DATA2\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data1 = Field(\"data1\", \"DATA1\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data0 = Field(\"data0\", \"DATA0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Tdh0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TDH0R\", \"mailbox data high\
    \ register\", address + 0x018C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.data7 = Field(\"data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n\
    \            self.data6 = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.data5 = Field(\"data5\", \"DATA5\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"data4\", \"DATA4\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class Ti1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TI1R\", \"mailbox identifier\
    \ register\", address + 0x0190, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.stid = Field(\"stid\", \"STID\", self._address, 21, 0x07FF, 11, proxy)\n\
    \            self.exid = Field(\"exid\", \"EXID\", self._address, 3, 0x3FFFF,\
    \ 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.txrq = Field(\"txrq\", \"TXRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Tdt1rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TDT1R\", \"\
    mailbox data length control and time stamp\n              register\", address\
    \ + 0x0194, 32, \"read-write\", 0x0000, proxy)\n            self.time = Field(\"\
    time\", \"TIME\", self._address, 16, 0xFFFF, 16, proxy)\n            self.tgt\
    \ = Field(\"tgt\", \"TGT\", self._address, 8, 0x0001, 1, proxy)\n            self.dlc\
    \ = Field(\"dlc\", \"DLC\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Tdl1rRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"TDL1R\", \"mailbox data low register\", address +\
    \ 0x0198, 32, \"read-write\", 0x0000, proxy)\n            self.data3 = Field(\"\
    data3\", \"DATA3\", self._address, 24, 0x00FF, 8, proxy)\n            self.data2\
    \ = Field(\"data2\", \"DATA2\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data1 = Field(\"data1\", \"DATA1\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data0 = Field(\"data0\", \"DATA0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Tdh1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TDH1R\", \"mailbox data high\
    \ register\", address + 0x019C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.data7 = Field(\"data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n\
    \            self.data6 = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.data5 = Field(\"data5\", \"DATA5\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"data4\", \"DATA4\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class Ti2rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TI2R\", \"mailbox identifier\
    \ register\", address + 0x01A0, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.stid = Field(\"stid\", \"STID\", self._address, 21, 0x07FF, 11, proxy)\n\
    \            self.exid = Field(\"exid\", \"EXID\", self._address, 3, 0x3FFFF,\
    \ 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.txrq = Field(\"txrq\", \"TXRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Tdt2rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TDT2R\", \"\
    mailbox data length control and time stamp\n              register\", address\
    \ + 0x01A4, 32, \"read-write\", 0x0000, proxy)\n            self.time = Field(\"\
    time\", \"TIME\", self._address, 16, 0xFFFF, 16, proxy)\n            self.tgt\
    \ = Field(\"tgt\", \"TGT\", self._address, 8, 0x0001, 1, proxy)\n            self.dlc\
    \ = Field(\"dlc\", \"DLC\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Tdl2rRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"TDL2R\", \"mailbox data low register\", address +\
    \ 0x01A8, 32, \"read-write\", 0x0000, proxy)\n            self.data3 = Field(\"\
    data3\", \"DATA3\", self._address, 24, 0x00FF, 8, proxy)\n            self.data2\
    \ = Field(\"data2\", \"DATA2\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data1 = Field(\"data1\", \"DATA1\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data0 = Field(\"data0\", \"DATA0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Tdh2rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TDH2R\", \"mailbox data high\
    \ register\", address + 0x01AC, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.data7 = Field(\"data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n\
    \            self.data6 = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.data5 = Field(\"data5\", \"DATA5\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"data4\", \"DATA4\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class Ri0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RI0R\", \"receive FIFO mailbox\
    \ identifier\n              register\", address + 0x01B0, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.stid = Field(\"stid\", \"STID\", self._address, 21,\
    \ 0x07FF, 11, proxy)\n            self.exid = Field(\"exid\", \"EXID\", self._address,\
    \ 3, 0x3FFFF, 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n    \n    class Rdt0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDT0R\", \"\
    mailbox data high register\", address + 0x01B4, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.time = Field(\"time\", \"TIME\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.fmi = Field(\"fmi\", \"FMI\", self._address, 8,\
    \ 0x00FF, 8, proxy)\n            self.dlc = Field(\"dlc\", \"DLC\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    class Rdl0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDL0R\", \"\
    mailbox data high register\", address + 0x01B8, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.data3 = Field(\"data3\", \"DATA3\", self._address, 24, 0x00FF,\
    \ 8, proxy)\n            self.data2 = Field(\"data2\", \"DATA2\", self._address,\
    \ 16, 0x00FF, 8, proxy)\n            self.data1 = Field(\"data1\", \"DATA1\",\
    \ self._address, 8, 0x00FF, 8, proxy)\n            self.data0 = Field(\"data0\"\
    , \"DATA0\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Rdh0rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RDH0R\", \"receive FIFO mailbox data high\n              register\", address +\
    \ 0x01BC, 32, \"read-only\", 0x0000, proxy)\n            self.data7 = Field(\"\
    data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n            self.data6\
    \ = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data5 = Field(\"data5\", \"DATA5\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data4 = Field(\"data4\", \"DATA4\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Ri1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RI1R\", \"mailbox data high\
    \ register\", address + 0x01C0, 32, \"read-only\", 0x0000, proxy)\n          \
    \  self.stid = Field(\"stid\", \"STID\", self._address, 21, 0x07FF, 11, proxy)\n\
    \            self.exid = Field(\"exid\", \"EXID\", self._address, 3, 0x3FFFF,\
    \ 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n    \n    class Rdt1rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDT1R\", \"\
    mailbox data high register\", address + 0x01C4, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.time = Field(\"time\", \"TIME\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.fmi = Field(\"fmi\", \"FMI\", self._address, 8,\
    \ 0x00FF, 8, proxy)\n            self.dlc = Field(\"dlc\", \"DLC\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    class Rdl1rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDL1R\", \"\
    mailbox data high register\", address + 0x01C8, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.data3 = Field(\"data3\", \"DATA3\", self._address, 24, 0x00FF,\
    \ 8, proxy)\n            self.data2 = Field(\"data2\", \"DATA2\", self._address,\
    \ 16, 0x00FF, 8, proxy)\n            self.data1 = Field(\"data1\", \"DATA1\",\
    \ self._address, 8, 0x00FF, 8, proxy)\n            self.data0 = Field(\"data0\"\
    , \"DATA0\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Rdh1rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RDH1R\", \"mailbox data high register\", address + 0x01CC, 32, \"read-only\",\
    \ 0x0000, proxy)\n            self.data7 = Field(\"data7\", \"DATA7\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n            self.data6 = Field(\"data6\", \"DATA6\",\
    \ self._address, 16, 0x00FF, 8, proxy)\n            self.data5 = Field(\"data5\"\
    , \"DATA5\", self._address, 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"\
    data4\", \"DATA4\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class FmrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FMR\", \"filter master register\", address + 0x0200, 32, \"read-write\", 0x2A1C0E01,\
    \ proxy)\n            self.can2sb = Field(\"can2sb\", \"CAN2SB\", self._address,\
    \ 8, 0x003F, 6, proxy)\n            self.finit = Field(\"finit\", \"FINIT\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Fm1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FM1R\", \"filter mode register\"\
    , address + 0x0204, 32, \"read-write\", 0x0000, proxy)\n            self.fbm0\
    \ = Field(\"fbm0\", \"Filter mode\", self._address, 0, 0x0001, 1, proxy)\n   \
    \         self.fbm1 = Field(\"fbm1\", \"Filter mode\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fbm2 = Field(\"fbm2\", \"Filter mode\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fbm3 = Field(\"fbm3\", \"Filter mode\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fbm4 = Field(\"fbm4\"\
    , \"Filter mode\", self._address, 4, 0x0001, 1, proxy)\n            self.fbm5\
    \ = Field(\"fbm5\", \"Filter mode\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.fbm6 = Field(\"fbm6\", \"Filter mode\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.fbm7 = Field(\"fbm7\", \"Filter mode\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.fbm8 = Field(\"fbm8\", \"Filter mode\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.fbm9 = Field(\"fbm9\"\
    , \"Filter mode\", self._address, 9, 0x0001, 1, proxy)\n            self.fbm10\
    \ = Field(\"fbm10\", \"Filter mode\", self._address, 10, 0x0001, 1, proxy)\n \
    \           self.fbm11 = Field(\"fbm11\", \"Filter mode\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.fbm12 = Field(\"fbm12\", \"Filter mode\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.fbm13 = Field(\"fbm13\"\
    , \"Filter mode\", self._address, 13, 0x0001, 1, proxy)\n            self.fbm14\
    \ = Field(\"fbm14\", \"Filter mode\", self._address, 14, 0x0001, 1, proxy)\n \
    \           self.fbm15 = Field(\"fbm15\", \"Filter mode\", self._address, 15,\
    \ 0x0001, 1, proxy)\n            self.fbm16 = Field(\"fbm16\", \"Filter mode\"\
    , self._address, 16, 0x0001, 1, proxy)\n            self.fbm17 = Field(\"fbm17\"\
    , \"Filter mode\", self._address, 17, 0x0001, 1, proxy)\n            self.fbm18\
    \ = Field(\"fbm18\", \"Filter mode\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.fbm19 = Field(\"fbm19\", \"Filter mode\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.fbm20 = Field(\"fbm20\", \"Filter mode\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fbm21 = Field(\"fbm21\"\
    , \"Filter mode\", self._address, 21, 0x0001, 1, proxy)\n            self.fbm22\
    \ = Field(\"fbm22\", \"Filter mode\", self._address, 22, 0x0001, 1, proxy)\n \
    \           self.fbm23 = Field(\"fbm23\", \"Filter mode\", self._address, 23,\
    \ 0x0001, 1, proxy)\n            self.fbm24 = Field(\"fbm24\", \"Filter mode\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fbm25 = Field(\"fbm25\"\
    , \"Filter mode\", self._address, 25, 0x0001, 1, proxy)\n            self.fbm26\
    \ = Field(\"fbm26\", \"Filter mode\", self._address, 26, 0x0001, 1, proxy)\n \
    \           self.fbm27 = Field(\"fbm27\", \"Filter mode\", self._address, 27,\
    \ 0x0001, 1, proxy)\n    \n    class Fs1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FS1R\", \"filter scale register\"\
    , address + 0x020C, 32, \"read-write\", 0x0000, proxy)\n            self.fsc0\
    \ = Field(\"fsc0\", \"Filter scale configuration\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.fsc1 = Field(\"fsc1\", \"Filter scale configuration\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fsc2 = Field(\"fsc2\"\
    , \"Filter scale configuration\", self._address, 2, 0x0001, 1, proxy)\n      \
    \      self.fsc3 = Field(\"fsc3\", \"Filter scale configuration\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fsc4 = Field(\"fsc4\", \"Filter scale\
    \ configuration\", self._address, 4, 0x0001, 1, proxy)\n            self.fsc5\
    \ = Field(\"fsc5\", \"Filter scale configuration\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fsc6 = Field(\"fsc6\", \"Filter scale configuration\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.fsc7 = Field(\"fsc7\"\
    , \"Filter scale configuration\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fsc8 = Field(\"fsc8\", \"Filter scale configuration\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fsc9 = Field(\"fsc9\", \"Filter scale\
    \ configuration\", self._address, 9, 0x0001, 1, proxy)\n            self.fsc10\
    \ = Field(\"fsc10\", \"Filter scale configuration\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.fsc11 = Field(\"fsc11\", \"Filter scale configuration\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.fsc12 = Field(\"fsc12\"\
    , \"Filter scale configuration\", self._address, 12, 0x0001, 1, proxy)\n     \
    \       self.fsc13 = Field(\"fsc13\", \"Filter scale configuration\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fsc14 = Field(\"fsc14\", \"Filter scale\
    \ configuration\", self._address, 14, 0x0001, 1, proxy)\n            self.fsc15\
    \ = Field(\"fsc15\", \"Filter scale configuration\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.fsc16 = Field(\"fsc16\", \"Filter scale configuration\"\
    , self._address, 16, 0x0001, 1, proxy)\n            self.fsc17 = Field(\"fsc17\"\
    , \"Filter scale configuration\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.fsc18 = Field(\"fsc18\", \"Filter scale configuration\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fsc19 = Field(\"fsc19\", \"Filter scale\
    \ configuration\", self._address, 19, 0x0001, 1, proxy)\n            self.fsc20\
    \ = Field(\"fsc20\", \"Filter scale configuration\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.fsc21 = Field(\"fsc21\", \"Filter scale configuration\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.fsc22 = Field(\"fsc22\"\
    , \"Filter scale configuration\", self._address, 22, 0x0001, 1, proxy)\n     \
    \       self.fsc23 = Field(\"fsc23\", \"Filter scale configuration\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fsc24 = Field(\"fsc24\", \"Filter scale\
    \ configuration\", self._address, 24, 0x0001, 1, proxy)\n            self.fsc25\
    \ = Field(\"fsc25\", \"Filter scale configuration\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.fsc26 = Field(\"fsc26\", \"Filter scale configuration\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.fsc27 = Field(\"fsc27\"\
    , \"Filter scale configuration\", self._address, 27, 0x0001, 1, proxy)\n    \n\
    \    class Ffa1rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FFA1R\", \"filter FIFO assignment\n          \
    \    register\", address + 0x0214, 32, \"read-write\", 0x0000, proxy)\n      \
    \      self.ffa0 = Field(\"ffa0\", \"Filter FIFO assignment for filter\n     \
    \                     0\", self._address, 0, 0x0001, 1, proxy)\n            self.ffa1\
    \ = Field(\"ffa1\", \"Filter FIFO assignment for filter\n                    \
    \      1\", self._address, 1, 0x0001, 1, proxy)\n            self.ffa2 = Field(\"\
    ffa2\", \"Filter FIFO assignment for filter\n                          2\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.ffa3 = Field(\"ffa3\", \"Filter FIFO\
    \ assignment for filter\n                          3\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.ffa4 = Field(\"ffa4\", \"Filter FIFO assignment\
    \ for filter\n                          4\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ffa5 = Field(\"ffa5\", \"Filter FIFO assignment for filter\n\
    \                          5\", self._address, 5, 0x0001, 1, proxy)\n        \
    \    self.ffa6 = Field(\"ffa6\", \"Filter FIFO assignment for filter\n       \
    \                   6\", self._address, 6, 0x0001, 1, proxy)\n            self.ffa7\
    \ = Field(\"ffa7\", \"Filter FIFO assignment for filter\n                    \
    \      7\", self._address, 7, 0x0001, 1, proxy)\n            self.ffa8 = Field(\"\
    ffa8\", \"Filter FIFO assignment for filter\n                          8\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.ffa9 = Field(\"ffa9\", \"Filter FIFO\
    \ assignment for filter\n                          9\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.ffa10 = Field(\"ffa10\", \"Filter FIFO assignment\
    \ for filter\n                          10\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ffa11 = Field(\"ffa11\", \"Filter FIFO assignment for filter\n\
    \                          11\", self._address, 11, 0x0001, 1, proxy)\n      \
    \      self.ffa12 = Field(\"ffa12\", \"Filter FIFO assignment for filter\n   \
    \                       12\", self._address, 12, 0x0001, 1, proxy)\n         \
    \   self.ffa13 = Field(\"ffa13\", \"Filter FIFO assignment for filter\n      \
    \                    13\", self._address, 13, 0x0001, 1, proxy)\n            self.ffa14\
    \ = Field(\"ffa14\", \"Filter FIFO assignment for filter\n                   \
    \       14\", self._address, 14, 0x0001, 1, proxy)\n            self.ffa15 = Field(\"\
    ffa15\", \"Filter FIFO assignment for filter\n                          15\",\
    \ self._address, 15, 0x0001, 1, proxy)\n            self.ffa16 = Field(\"ffa16\"\
    , \"Filter FIFO assignment for filter\n                          16\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.ffa17 = Field(\"ffa17\", \"Filter FIFO\
    \ assignment for filter\n                          17\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.ffa18 = Field(\"ffa18\", \"Filter FIFO assignment\
    \ for filter\n                          18\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.ffa19 = Field(\"ffa19\", \"Filter FIFO assignment for filter\n\
    \                          19\", self._address, 19, 0x0001, 1, proxy)\n      \
    \      self.ffa20 = Field(\"ffa20\", \"Filter FIFO assignment for filter\n   \
    \                       20\", self._address, 20, 0x0001, 1, proxy)\n         \
    \   self.ffa21 = Field(\"ffa21\", \"Filter FIFO assignment for filter\n      \
    \                    21\", self._address, 21, 0x0001, 1, proxy)\n            self.ffa22\
    \ = Field(\"ffa22\", \"Filter FIFO assignment for filter\n                   \
    \       22\", self._address, 22, 0x0001, 1, proxy)\n            self.ffa23 = Field(\"\
    ffa23\", \"Filter FIFO assignment for filter\n                          23\",\
    \ self._address, 23, 0x0001, 1, proxy)\n            self.ffa24 = Field(\"ffa24\"\
    , \"Filter FIFO assignment for filter\n                          24\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.ffa25 = Field(\"ffa25\", \"Filter FIFO\
    \ assignment for filter\n                          25\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.ffa26 = Field(\"ffa26\", \"Filter FIFO assignment\
    \ for filter\n                          26\", self._address, 26, 0x0001, 1, proxy)\n\
    \            self.ffa27 = Field(\"ffa27\", \"Filter FIFO assignment for filter\n\
    \                          27\", self._address, 27, 0x0001, 1, proxy)\n    \n\
    \    class Fa1rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FA1R\", \"filter activation register\", address\
    \ + 0x021C, 32, \"read-write\", 0x0000, proxy)\n            self.fact0 = Field(\"\
    fact0\", \"Filter active\", self._address, 0, 0x0001, 1, proxy)\n            self.fact1\
    \ = Field(\"fact1\", \"Filter active\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.fact2 = Field(\"fact2\", \"Filter active\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.fact3 = Field(\"fact3\", \"Filter active\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fact4 = Field(\"fact4\"\
    , \"Filter active\", self._address, 4, 0x0001, 1, proxy)\n            self.fact5\
    \ = Field(\"fact5\", \"Filter active\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.fact6 = Field(\"fact6\", \"Filter active\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.fact7 = Field(\"fact7\", \"Filter active\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fact8 = Field(\"fact8\"\
    , \"Filter active\", self._address, 8, 0x0001, 1, proxy)\n            self.fact9\
    \ = Field(\"fact9\", \"Filter active\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.fact10 = Field(\"fact10\", \"Filter active\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.fact11 = Field(\"fact11\", \"Filter\
    \ active\", self._address, 11, 0x0001, 1, proxy)\n            self.fact12 = Field(\"\
    fact12\", \"Filter active\", self._address, 12, 0x0001, 1, proxy)\n          \
    \  self.fact13 = Field(\"fact13\", \"Filter active\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fact14 = Field(\"fact14\", \"Filter active\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fact15 = Field(\"fact15\", \"Filter\
    \ active\", self._address, 15, 0x0001, 1, proxy)\n            self.fact16 = Field(\"\
    fact16\", \"Filter active\", self._address, 16, 0x0001, 1, proxy)\n          \
    \  self.fact17 = Field(\"fact17\", \"Filter active\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fact18 = Field(\"fact18\", \"Filter active\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fact19 = Field(\"fact19\", \"Filter\
    \ active\", self._address, 19, 0x0001, 1, proxy)\n            self.fact20 = Field(\"\
    fact20\", \"Filter active\", self._address, 20, 0x0001, 1, proxy)\n          \
    \  self.fact21 = Field(\"fact21\", \"Filter active\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fact22 = Field(\"fact22\", \"Filter active\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fact23 = Field(\"fact23\", \"Filter\
    \ active\", self._address, 23, 0x0001, 1, proxy)\n            self.fact24 = Field(\"\
    fact24\", \"Filter active\", self._address, 24, 0x0001, 1, proxy)\n          \
    \  self.fact25 = Field(\"fact25\", \"Filter active\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.fact26 = Field(\"fact26\", \"Filter active\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.fact27 = Field(\"fact27\", \"Filter\
    \ active\", self._address, 27, 0x0001, 1, proxy)\n    \n    class F0r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F0R1\", \"Filter bank 0 register 1\", address + 0x0240, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F0r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F0R2\", \"Filter bank 0 register\
    \ 2\", address + 0x0244, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F1r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F1R1\", \"Filter bank 1 register 1\", address\
    \ + 0x0248, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F1r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F1R2\", \"Filter bank 1 register 2\", address + 0x024C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F2r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F2R1\", \"Filter bank 2 register\
    \ 1\", address + 0x0250, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F2r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F2R2\", \"Filter bank 2 register 2\", address\
    \ + 0x0254, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F3r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F3R1\", \"Filter bank 3 register 1\", address + 0x0258, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F3r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F3R2\", \"Filter bank 3 register\
    \ 2\", address + 0x025C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F4r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F4R1\", \"Filter bank 4 register 1\", address\
    \ + 0x0260, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F4r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F4R2\", \"Filter bank 4 register 2\", address + 0x0264, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F5r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F5R1\", \"Filter bank 5 register\
    \ 1\", address + 0x0268, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F5r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F5R2\", \"Filter bank 5 register 2\", address\
    \ + 0x026C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F6r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F6R1\", \"Filter bank 6 register 1\", address + 0x0270, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F6r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F6R2\", \"Filter bank 6 register\
    \ 2\", address + 0x0274, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F7r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F7R1\", \"Filter bank 7 register 1\", address\
    \ + 0x0278, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F7r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F7R2\", \"Filter bank 7 register 2\", address + 0x027C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F8r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F8R1\", \"Filter bank 8 register\
    \ 1\", address + 0x0280, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F8r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F8R2\", \"Filter bank 8 register 2\", address\
    \ + 0x0284, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F9r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F9R1\", \"Filter bank 9 register 1\", address + 0x0288, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F9r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F9R2\", \"Filter bank 9 register\
    \ 2\", address + 0x028C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F10r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F10R1\", \"Filter bank 10 register 1\", address\
    \ + 0x0290, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F10r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F10R2\", \"Filter bank 10 register 2\", address + 0x0294, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F11r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F11R1\", \"Filter bank 11 register\
    \ 1\", address + 0x0298, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F11r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F11R2\", \"Filter bank 11 register 2\", address\
    \ + 0x029C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F12r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F12R1\", \"Filter bank 4 register 1\", address + 0x02A0, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F12r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F12R2\", \"Filter bank 12 register\
    \ 2\", address + 0x02A4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F13r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F13R1\", \"Filter bank 13 register 1\", address\
    \ + 0x02A8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F13r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F13R2\", \"Filter bank 13 register 2\", address + 0x02AC, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F14r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F14R1\", \"Filter bank 14 register\
    \ 1\", address + 0x02B0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F14r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F14R2\", \"Filter bank 14 register 2\", address\
    \ + 0x02B4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F15r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F15R1\", \"Filter bank 15 register 1\", address + 0x02B8, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F15r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F15R2\", \"Filter bank 15 register\
    \ 2\", address + 0x02BC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F16r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F16R1\", \"Filter bank 16 register 1\", address\
    \ + 0x02C0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F16r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F16R2\", \"Filter bank 16 register 2\", address + 0x02C4, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F17r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F17R1\", \"Filter bank 17 register\
    \ 1\", address + 0x02C8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F17r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F17R2\", \"Filter bank 17 register 2\", address\
    \ + 0x02CC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F18r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F18R1\", \"Filter bank 18 register 1\", address + 0x02D0, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F18r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F18R2\", \"Filter bank 18 register\
    \ 2\", address + 0x02D4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F19r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F19R1\", \"Filter bank 19 register 1\", address\
    \ + 0x02D8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F19r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F19R2\", \"Filter bank 19 register 2\", address + 0x02DC, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F20r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F20R1\", \"Filter bank 20 register\
    \ 1\", address + 0x02E0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F20r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F20R2\", \"Filter bank 20 register 2\", address\
    \ + 0x02E4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F21r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F21R1\", \"Filter bank 21 register 1\", address + 0x02E8, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F21r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F21R2\", \"Filter bank 21 register\
    \ 2\", address + 0x02EC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F22r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F22R1\", \"Filter bank 22 register 1\", address\
    \ + 0x02F0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F22r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F22R2\", \"Filter bank 22 register 2\", address + 0x02F4, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F23r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F23R1\", \"Filter bank 23 register\
    \ 1\", address + 0x02F8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F23r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F23R2\", \"Filter bank 23 register 2\", address\
    \ + 0x02FC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F24r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F24R1\", \"Filter bank 24 register 1\", address + 0x0300, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F24r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F24R2\", \"Filter bank 24 register\
    \ 2\", address + 0x0304, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F25r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F25R1\", \"Filter bank 25 register 1\", address\
    \ + 0x0308, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F25r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F25R2\", \"Filter bank 25 register 2\", address + 0x030C, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F26r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F26R1\", \"Filter bank 26 register\
    \ 1\", address + 0x0310, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F26r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F26R2\", \"Filter bank 26 register 2\", address\
    \ + 0x0314, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F27r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F27R1\", \"Filter bank 27 register 1\", address + 0x0318, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F27r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F27R2\", \"Filter bank 27 register\
    \ 2\", address + 0x031C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    def __init__(self, proxy):\n        super().__init__(\"can1\", \"Controller\
    \ area network\", 0x40006400)\n        self.mcr = self.McrRegister(self.address,\
    \ proxy)\n        self.msr = self.MsrRegister(self.address, proxy)\n        self.tsr\
    \ = self.TsrRegister(self.address, proxy)\n        self.rf0r = self.Rf0rRegister(self.address,\
    \ proxy)\n        self.rf1r = self.Rf1rRegister(self.address, proxy)\n       \
    \ self.ier = self.IerRegister(self.address, proxy)\n        self.esr = self.EsrRegister(self.address,\
    \ proxy)\n        self.btr = self.BtrRegister(self.address, proxy)\n        self.ti0r\
    \ = self.Ti0rRegister(self.address, proxy)\n        self.tdt0r = self.Tdt0rRegister(self.address,\
    \ proxy)\n        self.tdl0r = self.Tdl0rRegister(self.address, proxy)\n     \
    \   self.tdh0r = self.Tdh0rRegister(self.address, proxy)\n        self.ti1r =\
    \ self.Ti1rRegister(self.address, proxy)\n        self.tdt1r = self.Tdt1rRegister(self.address,\
    \ proxy)\n        self.tdl1r = self.Tdl1rRegister(self.address, proxy)\n     \
    \   self.tdh1r = self.Tdh1rRegister(self.address, proxy)\n        self.ti2r =\
    \ self.Ti2rRegister(self.address, proxy)\n        self.tdt2r = self.Tdt2rRegister(self.address,\
    \ proxy)\n        self.tdl2r = self.Tdl2rRegister(self.address, proxy)\n     \
    \   self.tdh2r = self.Tdh2rRegister(self.address, proxy)\n        self.ri0r =\
    \ self.Ri0rRegister(self.address, proxy)\n        self.rdt0r = self.Rdt0rRegister(self.address,\
    \ proxy)\n        self.rdl0r = self.Rdl0rRegister(self.address, proxy)\n     \
    \   self.rdh0r = self.Rdh0rRegister(self.address, proxy)\n        self.ri1r =\
    \ self.Ri1rRegister(self.address, proxy)\n        self.rdt1r = self.Rdt1rRegister(self.address,\
    \ proxy)\n        self.rdl1r = self.Rdl1rRegister(self.address, proxy)\n     \
    \   self.rdh1r = self.Rdh1rRegister(self.address, proxy)\n        self.fmr = self.FmrRegister(self.address,\
    \ proxy)\n        self.fm1r = self.Fm1rRegister(self.address, proxy)\n       \
    \ self.fs1r = self.Fs1rRegister(self.address, proxy)\n        self.ffa1r = self.Ffa1rRegister(self.address,\
    \ proxy)\n        self.fa1r = self.Fa1rRegister(self.address, proxy)\n       \
    \ self.f0r1 = self.F0r1Register(self.address, proxy)\n        self.f0r2 = self.F0r2Register(self.address,\
    \ proxy)\n        self.f1r1 = self.F1r1Register(self.address, proxy)\n       \
    \ self.f1r2 = self.F1r2Register(self.address, proxy)\n        self.f2r1 = self.F2r1Register(self.address,\
    \ proxy)\n        self.f2r2 = self.F2r2Register(self.address, proxy)\n       \
    \ self.f3r1 = self.F3r1Register(self.address, proxy)\n        self.f3r2 = self.F3r2Register(self.address,\
    \ proxy)\n        self.f4r1 = self.F4r1Register(self.address, proxy)\n       \
    \ self.f4r2 = self.F4r2Register(self.address, proxy)\n        self.f5r1 = self.F5r1Register(self.address,\
    \ proxy)\n        self.f5r2 = self.F5r2Register(self.address, proxy)\n       \
    \ self.f6r1 = self.F6r1Register(self.address, proxy)\n        self.f6r2 = self.F6r2Register(self.address,\
    \ proxy)\n        self.f7r1 = self.F7r1Register(self.address, proxy)\n       \
    \ self.f7r2 = self.F7r2Register(self.address, proxy)\n        self.f8r1 = self.F8r1Register(self.address,\
    \ proxy)\n        self.f8r2 = self.F8r2Register(self.address, proxy)\n       \
    \ self.f9r1 = self.F9r1Register(self.address, proxy)\n        self.f9r2 = self.F9r2Register(self.address,\
    \ proxy)\n        self.f10r1 = self.F10r1Register(self.address, proxy)\n     \
    \   self.f10r2 = self.F10r2Register(self.address, proxy)\n        self.f11r1 =\
    \ self.F11r1Register(self.address, proxy)\n        self.f11r2 = self.F11r2Register(self.address,\
    \ proxy)\n        self.f12r1 = self.F12r1Register(self.address, proxy)\n     \
    \   self.f12r2 = self.F12r2Register(self.address, proxy)\n        self.f13r1 =\
    \ self.F13r1Register(self.address, proxy)\n        self.f13r2 = self.F13r2Register(self.address,\
    \ proxy)\n        self.f14r1 = self.F14r1Register(self.address, proxy)\n     \
    \   self.f14r2 = self.F14r2Register(self.address, proxy)\n        self.f15r1 =\
    \ self.F15r1Register(self.address, proxy)\n        self.f15r2 = self.F15r2Register(self.address,\
    \ proxy)\n        self.f16r1 = self.F16r1Register(self.address, proxy)\n     \
    \   self.f16r2 = self.F16r2Register(self.address, proxy)\n        self.f17r1 =\
    \ self.F17r1Register(self.address, proxy)\n        self.f17r2 = self.F17r2Register(self.address,\
    \ proxy)\n        self.f18r1 = self.F18r1Register(self.address, proxy)\n     \
    \   self.f18r2 = self.F18r2Register(self.address, proxy)\n        self.f19r1 =\
    \ self.F19r1Register(self.address, proxy)\n        self.f19r2 = self.F19r2Register(self.address,\
    \ proxy)\n        self.f20r1 = self.F20r1Register(self.address, proxy)\n     \
    \   self.f20r2 = self.F20r2Register(self.address, proxy)\n        self.f21r1 =\
    \ self.F21r1Register(self.address, proxy)\n        self.f21r2 = self.F21r2Register(self.address,\
    \ proxy)\n        self.f22r1 = self.F22r1Register(self.address, proxy)\n     \
    \   self.f22r2 = self.F22r2Register(self.address, proxy)\n        self.f23r1 =\
    \ self.F23r1Register(self.address, proxy)\n        self.f23r2 = self.F23r2Register(self.address,\
    \ proxy)\n        self.f24r1 = self.F24r1Register(self.address, proxy)\n     \
    \   self.f24r2 = self.F24r2Register(self.address, proxy)\n        self.f25r1 =\
    \ self.F25r1Register(self.address, proxy)\n        self.f25r2 = self.F25r2Register(self.address,\
    \ proxy)\n        self.f26r1 = self.F26r1Register(self.address, proxy)\n     \
    \   self.f26r2 = self.F26r2Register(self.address, proxy)\n        self.f27r1 =\
    \ self.F27r1Register(self.address, proxy)\n        self.f27r2 = self.F27r2Register(self.address,\
    \ proxy)\n"
  name: CAN1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Can2(Peripheral):\n\
    \    class McrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MCR\", \"master control register\", address +\
    \ 0x0000, 32, \"read-write\", 0x10002, proxy)\n            self.dbf = Field(\"\
    dbf\", \"DBF\", self._address, 16, 0x0001, 1, proxy)\n            self.reset =\
    \ Field(\"reset\", \"RESET\", self._address, 15, 0x0001, 1, proxy)\n         \
    \   self.ttcm = Field(\"ttcm\", \"TTCM\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.abom = Field(\"abom\", \"ABOM\", self._address, 6, 0x0001, 1,\
    \ proxy)\n            self.awum = Field(\"awum\", \"AWUM\", self._address, 5,\
    \ 0x0001, 1, proxy)\n            self.nart = Field(\"nart\", \"NART\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.rflm = Field(\"rflm\", \"RFLM\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.txfp = Field(\"txfp\", \"TXFP\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.sleep = Field(\"sleep\", \"SLEEP\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.inrq = Field(\"inrq\", \"INRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class MsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"MSR\", \"master status register\"\
    , address + 0x0004, 32, \"\", 0x0C02, proxy)\n            self.rx = Field(\"rx\"\
    , \"RX\", self._address, 11, 0x0001, 1, proxy)\n            self.samp = Field(\"\
    samp\", \"SAMP\", self._address, 10, 0x0001, 1, proxy)\n            self.rxm =\
    \ Field(\"rxm\", \"RXM\", self._address, 9, 0x0001, 1, proxy)\n            self.txm\
    \ = Field(\"txm\", \"TXM\", self._address, 8, 0x0001, 1, proxy)\n            self.slaki\
    \ = Field(\"slaki\", \"SLAKI\", self._address, 4, 0x0001, 1, proxy)\n        \
    \    self.wkui = Field(\"wkui\", \"WKUI\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.erri = Field(\"erri\", \"ERRI\", self._address, 2, 0x0001, 1,\
    \ proxy)\n            self.slak = Field(\"slak\", \"SLAK\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.inak = Field(\"inak\", \"INAK\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class TsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TSR\", \"transmit status register\"\
    , address + 0x0008, 32, \"\", 0x1C000000, proxy)\n            self.low2 = Field(\"\
    low2\", \"Lowest priority flag for mailbox\n                          2\", self._address,\
    \ 31, 0x0001, 1, proxy)\n            self.low1 = Field(\"low1\", \"Lowest priority\
    \ flag for mailbox\n                          1\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.low0 = Field(\"low0\", \"Lowest priority flag for\
    \ mailbox\n                          0\", self._address, 29, 0x0001, 1, proxy)\n\
    \            self.tme2 = Field(\"tme2\", \"Lowest priority flag for mailbox\n\
    \                          2\", self._address, 28, 0x0001, 1, proxy)\n       \
    \     self.tme1 = Field(\"tme1\", \"Lowest priority flag for mailbox\n       \
    \                   1\", self._address, 27, 0x0001, 1, proxy)\n            self.tme0\
    \ = Field(\"tme0\", \"Lowest priority flag for mailbox\n                     \
    \     0\", self._address, 26, 0x0001, 1, proxy)\n            self.code = Field(\"\
    code\", \"CODE\", self._address, 24, 0x0003, 2, proxy)\n            self.abrq2\
    \ = Field(\"abrq2\", \"ABRQ2\", self._address, 23, 0x0001, 1, proxy)\n       \
    \     self.terr2 = Field(\"terr2\", \"TERR2\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.alst2 = Field(\"alst2\", \"ALST2\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.txok2 = Field(\"txok2\", \"TXOK2\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.rqcp2 = Field(\"rqcp2\", \"RQCP2\",\
    \ self._address, 16, 0x0001, 1, proxy)\n            self.abrq1 = Field(\"abrq1\"\
    , \"ABRQ1\", self._address, 15, 0x0001, 1, proxy)\n            self.terr1 = Field(\"\
    terr1\", \"TERR1\", self._address, 11, 0x0001, 1, proxy)\n            self.alst1\
    \ = Field(\"alst1\", \"ALST1\", self._address, 10, 0x0001, 1, proxy)\n       \
    \     self.txok1 = Field(\"txok1\", \"TXOK1\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.rqcp1 = Field(\"rqcp1\", \"RQCP1\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.abrq0 = Field(\"abrq0\", \"ABRQ0\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.terr0 = Field(\"terr0\", \"TERR0\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.alst0 = Field(\"alst0\", \"ALST0\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.txok0 = Field(\"txok0\", \"TXOK0\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.rqcp0 = Field(\"rqcp0\", \"RQCP0\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Rf0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RF0R\", \"receive FIFO 0 register\"\
    , address + 0x000C, 32, \"\", 0x0000, proxy)\n            self.rfom0 = Field(\"\
    rfom0\", \"RFOM0\", self._address, 5, 0x0001, 1, proxy)\n            self.fovr0\
    \ = Field(\"fovr0\", \"FOVR0\", self._address, 4, 0x0001, 1, proxy)\n        \
    \    self.full0 = Field(\"full0\", \"FULL0\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.fmp0 = Field(\"fmp0\", \"FMP0\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class Rf1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RF1R\", \"receive FIFO 1 register\"\
    , address + 0x0010, 32, \"\", 0x0000, proxy)\n            self.rfom1 = Field(\"\
    rfom1\", \"RFOM1\", self._address, 5, 0x0001, 1, proxy)\n            self.fovr1\
    \ = Field(\"fovr1\", \"FOVR1\", self._address, 4, 0x0001, 1, proxy)\n        \
    \    self.full1 = Field(\"full1\", \"FULL1\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.fmp1 = Field(\"fmp1\", \"FMP1\", self._address, 0, 0x0003, 2,\
    \ proxy)\n    \n    class IerRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"IER\", \"interrupt enable register\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.slkie\
    \ = Field(\"slkie\", \"SLKIE\", self._address, 17, 0x0001, 1, proxy)\n       \
    \     self.wkuie = Field(\"wkuie\", \"WKUIE\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.errie = Field(\"errie\", \"ERRIE\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.lecie = Field(\"lecie\", \"LECIE\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.bofie = Field(\"bofie\", \"BOFIE\",\
    \ self._address, 10, 0x0001, 1, proxy)\n            self.epvie = Field(\"epvie\"\
    , \"EPVIE\", self._address, 9, 0x0001, 1, proxy)\n            self.ewgie = Field(\"\
    ewgie\", \"EWGIE\", self._address, 8, 0x0001, 1, proxy)\n            self.fovie1\
    \ = Field(\"fovie1\", \"FOVIE1\", self._address, 6, 0x0001, 1, proxy)\n      \
    \      self.ffie1 = Field(\"ffie1\", \"FFIE1\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.fmpie1 = Field(\"fmpie1\", \"FMPIE1\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.fovie0 = Field(\"fovie0\", \"FOVIE0\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ffie0 = Field(\"ffie0\", \"FFIE0\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fmpie0 = Field(\"fmpie0\", \"FMPIE0\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.tmeie = Field(\"tmeie\"\
    , \"TMEIE\", self._address, 0, 0x0001, 1, proxy)\n    \n    class EsrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    ESR\", \"interrupt enable register\", address + 0x0018, 32, \"\", 0x0000, proxy)\n\
    \            self.rec = Field(\"rec\", \"REC\", self._address, 24, 0x00FF, 8,\
    \ proxy)\n            self.tec = Field(\"tec\", \"TEC\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.lec = Field(\"lec\", \"LEC\", self._address, 4,\
    \ 0x0007, 3, proxy)\n            self.boff = Field(\"boff\", \"BOFF\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.epvf = Field(\"epvf\", \"EPVF\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ewgf = Field(\"ewgf\", \"EWGF\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BtrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BTR\", \"bit timing register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.silm\
    \ = Field(\"silm\", \"SILM\", self._address, 31, 0x0001, 1, proxy)\n         \
    \   self.lbkm = Field(\"lbkm\", \"LBKM\", self._address, 30, 0x0001, 1, proxy)\n\
    \            self.sjw = Field(\"sjw\", \"SJW\", self._address, 24, 0x0003, 2,\
    \ proxy)\n            self.ts2 = Field(\"ts2\", \"TS2\", self._address, 20, 0x0007,\
    \ 3, proxy)\n            self.ts1 = Field(\"ts1\", \"TS1\", self._address, 16,\
    \ 0x000F, 4, proxy)\n            self.brp = Field(\"brp\", \"BRP\", self._address,\
    \ 0, 0x03FF, 10, proxy)\n    \n    class Ti0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TI0R\", \"TX\
    \ mailbox identifier register\", address + 0x0180, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.stid = Field(\"stid\", \"STID\", self._address, 21,\
    \ 0x07FF, 11, proxy)\n            self.exid = Field(\"exid\", \"EXID\", self._address,\
    \ 3, 0x3FFFF, 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.txrq = Field(\"txrq\", \"TXRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Tdt0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TDT0R\", \"\
    mailbox data length control and time stamp\n              register\", address\
    \ + 0x0184, 32, \"read-write\", 0x0000, proxy)\n            self.time = Field(\"\
    time\", \"TIME\", self._address, 16, 0xFFFF, 16, proxy)\n            self.tgt\
    \ = Field(\"tgt\", \"TGT\", self._address, 8, 0x0001, 1, proxy)\n            self.dlc\
    \ = Field(\"dlc\", \"DLC\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Tdl0rRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"TDL0R\", \"mailbox data low register\", address +\
    \ 0x0188, 32, \"read-write\", 0x0000, proxy)\n            self.data3 = Field(\"\
    data3\", \"DATA3\", self._address, 24, 0x00FF, 8, proxy)\n            self.data2\
    \ = Field(\"data2\", \"DATA2\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data1 = Field(\"data1\", \"DATA1\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data0 = Field(\"data0\", \"DATA0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Tdh0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TDH0R\", \"mailbox data high\
    \ register\", address + 0x018C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.data7 = Field(\"data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n\
    \            self.data6 = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.data5 = Field(\"data5\", \"DATA5\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"data4\", \"DATA4\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class Ti1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TI1R\", \"mailbox identifier\
    \ register\", address + 0x0190, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.stid = Field(\"stid\", \"STID\", self._address, 21, 0x07FF, 11, proxy)\n\
    \            self.exid = Field(\"exid\", \"EXID\", self._address, 3, 0x3FFFF,\
    \ 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.txrq = Field(\"txrq\", \"TXRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Tdt1rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TDT1R\", \"\
    mailbox data length control and time stamp\n              register\", address\
    \ + 0x0194, 32, \"read-write\", 0x0000, proxy)\n            self.time = Field(\"\
    time\", \"TIME\", self._address, 16, 0xFFFF, 16, proxy)\n            self.tgt\
    \ = Field(\"tgt\", \"TGT\", self._address, 8, 0x0001, 1, proxy)\n            self.dlc\
    \ = Field(\"dlc\", \"DLC\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Tdl1rRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"TDL1R\", \"mailbox data low register\", address +\
    \ 0x0198, 32, \"read-write\", 0x0000, proxy)\n            self.data3 = Field(\"\
    data3\", \"DATA3\", self._address, 24, 0x00FF, 8, proxy)\n            self.data2\
    \ = Field(\"data2\", \"DATA2\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data1 = Field(\"data1\", \"DATA1\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data0 = Field(\"data0\", \"DATA0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Tdh1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TDH1R\", \"mailbox data high\
    \ register\", address + 0x019C, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.data7 = Field(\"data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n\
    \            self.data6 = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.data5 = Field(\"data5\", \"DATA5\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"data4\", \"DATA4\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class Ti2rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TI2R\", \"mailbox identifier\
    \ register\", address + 0x01A0, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.stid = Field(\"stid\", \"STID\", self._address, 21, 0x07FF, 11, proxy)\n\
    \            self.exid = Field(\"exid\", \"EXID\", self._address, 3, 0x3FFFF,\
    \ 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.txrq = Field(\"txrq\", \"TXRQ\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Tdt2rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"TDT2R\", \"\
    mailbox data length control and time stamp\n              register\", address\
    \ + 0x01A4, 32, \"read-write\", 0x0000, proxy)\n            self.time = Field(\"\
    time\", \"TIME\", self._address, 16, 0xFFFF, 16, proxy)\n            self.tgt\
    \ = Field(\"tgt\", \"TGT\", self._address, 8, 0x0001, 1, proxy)\n            self.dlc\
    \ = Field(\"dlc\", \"DLC\", self._address, 0, 0x000F, 4, proxy)\n    \n    class\
    \ Tdl2rRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"TDL2R\", \"mailbox data low register\", address +\
    \ 0x01A8, 32, \"read-write\", 0x0000, proxy)\n            self.data3 = Field(\"\
    data3\", \"DATA3\", self._address, 24, 0x00FF, 8, proxy)\n            self.data2\
    \ = Field(\"data2\", \"DATA2\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data1 = Field(\"data1\", \"DATA1\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data0 = Field(\"data0\", \"DATA0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Tdh2rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"TDH2R\", \"mailbox data high\
    \ register\", address + 0x01AC, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.data7 = Field(\"data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n\
    \            self.data6 = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.data5 = Field(\"data5\", \"DATA5\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"data4\", \"DATA4\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class Ri0rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RI0R\", \"receive FIFO mailbox\
    \ identifier\n              register\", address + 0x01B0, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.stid = Field(\"stid\", \"STID\", self._address, 21,\
    \ 0x07FF, 11, proxy)\n            self.exid = Field(\"exid\", \"EXID\", self._address,\
    \ 3, 0x3FFFF, 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n    \n    class Rdt0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDT0R\", \"\
    mailbox data high register\", address + 0x01B4, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.time = Field(\"time\", \"TIME\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.fmi = Field(\"fmi\", \"FMI\", self._address, 8,\
    \ 0x00FF, 8, proxy)\n            self.dlc = Field(\"dlc\", \"DLC\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    class Rdl0rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDL0R\", \"\
    mailbox data high register\", address + 0x01B8, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.data3 = Field(\"data3\", \"DATA3\", self._address, 24, 0x00FF,\
    \ 8, proxy)\n            self.data2 = Field(\"data2\", \"DATA2\", self._address,\
    \ 16, 0x00FF, 8, proxy)\n            self.data1 = Field(\"data1\", \"DATA1\",\
    \ self._address, 8, 0x00FF, 8, proxy)\n            self.data0 = Field(\"data0\"\
    , \"DATA0\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Rdh0rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RDH0R\", \"receive FIFO mailbox data high\n              register\", address +\
    \ 0x01BC, 32, \"read-only\", 0x0000, proxy)\n            self.data7 = Field(\"\
    data7\", \"DATA7\", self._address, 24, 0x00FF, 8, proxy)\n            self.data6\
    \ = Field(\"data6\", \"DATA6\", self._address, 16, 0x00FF, 8, proxy)\n       \
    \     self.data5 = Field(\"data5\", \"DATA5\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.data4 = Field(\"data4\", \"DATA4\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class Ri1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RI1R\", \"mailbox data high\
    \ register\", address + 0x01C0, 32, \"read-only\", 0x0000, proxy)\n          \
    \  self.stid = Field(\"stid\", \"STID\", self._address, 21, 0x07FF, 11, proxy)\n\
    \            self.exid = Field(\"exid\", \"EXID\", self._address, 3, 0x3FFFF,\
    \ 18, proxy)\n            self.ide = Field(\"ide\", \"IDE\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.rtr = Field(\"rtr\", \"RTR\", self._address,\
    \ 1, 0x0001, 1, proxy)\n    \n    class Rdt1rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDT1R\", \"\
    mailbox data high register\", address + 0x01C4, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.time = Field(\"time\", \"TIME\", self._address, 16, 0xFFFF,\
    \ 16, proxy)\n            self.fmi = Field(\"fmi\", \"FMI\", self._address, 8,\
    \ 0x00FF, 8, proxy)\n            self.dlc = Field(\"dlc\", \"DLC\", self._address,\
    \ 0, 0x000F, 4, proxy)\n    \n    class Rdl1rRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RDL1R\", \"\
    mailbox data high register\", address + 0x01C8, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.data3 = Field(\"data3\", \"DATA3\", self._address, 24, 0x00FF,\
    \ 8, proxy)\n            self.data2 = Field(\"data2\", \"DATA2\", self._address,\
    \ 16, 0x00FF, 8, proxy)\n            self.data1 = Field(\"data1\", \"DATA1\",\
    \ self._address, 8, 0x00FF, 8, proxy)\n            self.data0 = Field(\"data0\"\
    , \"DATA0\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class Rdh1rRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    RDH1R\", \"mailbox data high register\", address + 0x01CC, 32, \"read-only\",\
    \ 0x0000, proxy)\n            self.data7 = Field(\"data7\", \"DATA7\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n            self.data6 = Field(\"data6\", \"DATA6\",\
    \ self._address, 16, 0x00FF, 8, proxy)\n            self.data5 = Field(\"data5\"\
    , \"DATA5\", self._address, 8, 0x00FF, 8, proxy)\n            self.data4 = Field(\"\
    data4\", \"DATA4\", self._address, 0, 0x00FF, 8, proxy)\n    \n    class FmrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FMR\", \"filter master register\", address + 0x0200, 32, \"read-write\", 0x2A1C0E01,\
    \ proxy)\n            self.can2sb = Field(\"can2sb\", \"CAN2SB\", self._address,\
    \ 8, 0x003F, 6, proxy)\n            self.finit = Field(\"finit\", \"FINIT\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Fm1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FM1R\", \"filter mode register\"\
    , address + 0x0204, 32, \"read-write\", 0x0000, proxy)\n            self.fbm0\
    \ = Field(\"fbm0\", \"Filter mode\", self._address, 0, 0x0001, 1, proxy)\n   \
    \         self.fbm1 = Field(\"fbm1\", \"Filter mode\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fbm2 = Field(\"fbm2\", \"Filter mode\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fbm3 = Field(\"fbm3\", \"Filter mode\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fbm4 = Field(\"fbm4\"\
    , \"Filter mode\", self._address, 4, 0x0001, 1, proxy)\n            self.fbm5\
    \ = Field(\"fbm5\", \"Filter mode\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.fbm6 = Field(\"fbm6\", \"Filter mode\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.fbm7 = Field(\"fbm7\", \"Filter mode\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.fbm8 = Field(\"fbm8\", \"Filter mode\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.fbm9 = Field(\"fbm9\"\
    , \"Filter mode\", self._address, 9, 0x0001, 1, proxy)\n            self.fbm10\
    \ = Field(\"fbm10\", \"Filter mode\", self._address, 10, 0x0001, 1, proxy)\n \
    \           self.fbm11 = Field(\"fbm11\", \"Filter mode\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.fbm12 = Field(\"fbm12\", \"Filter mode\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.fbm13 = Field(\"fbm13\"\
    , \"Filter mode\", self._address, 13, 0x0001, 1, proxy)\n            self.fbm14\
    \ = Field(\"fbm14\", \"Filter mode\", self._address, 14, 0x0001, 1, proxy)\n \
    \           self.fbm15 = Field(\"fbm15\", \"Filter mode\", self._address, 15,\
    \ 0x0001, 1, proxy)\n            self.fbm16 = Field(\"fbm16\", \"Filter mode\"\
    , self._address, 16, 0x0001, 1, proxy)\n            self.fbm17 = Field(\"fbm17\"\
    , \"Filter mode\", self._address, 17, 0x0001, 1, proxy)\n            self.fbm18\
    \ = Field(\"fbm18\", \"Filter mode\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.fbm19 = Field(\"fbm19\", \"Filter mode\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.fbm20 = Field(\"fbm20\", \"Filter mode\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fbm21 = Field(\"fbm21\"\
    , \"Filter mode\", self._address, 21, 0x0001, 1, proxy)\n            self.fbm22\
    \ = Field(\"fbm22\", \"Filter mode\", self._address, 22, 0x0001, 1, proxy)\n \
    \           self.fbm23 = Field(\"fbm23\", \"Filter mode\", self._address, 23,\
    \ 0x0001, 1, proxy)\n            self.fbm24 = Field(\"fbm24\", \"Filter mode\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fbm25 = Field(\"fbm25\"\
    , \"Filter mode\", self._address, 25, 0x0001, 1, proxy)\n            self.fbm26\
    \ = Field(\"fbm26\", \"Filter mode\", self._address, 26, 0x0001, 1, proxy)\n \
    \           self.fbm27 = Field(\"fbm27\", \"Filter mode\", self._address, 27,\
    \ 0x0001, 1, proxy)\n    \n    class Fs1rRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FS1R\", \"filter scale register\"\
    , address + 0x020C, 32, \"read-write\", 0x0000, proxy)\n            self.fsc0\
    \ = Field(\"fsc0\", \"Filter scale configuration\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.fsc1 = Field(\"fsc1\", \"Filter scale configuration\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fsc2 = Field(\"fsc2\"\
    , \"Filter scale configuration\", self._address, 2, 0x0001, 1, proxy)\n      \
    \      self.fsc3 = Field(\"fsc3\", \"Filter scale configuration\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fsc4 = Field(\"fsc4\", \"Filter scale\
    \ configuration\", self._address, 4, 0x0001, 1, proxy)\n            self.fsc5\
    \ = Field(\"fsc5\", \"Filter scale configuration\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fsc6 = Field(\"fsc6\", \"Filter scale configuration\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.fsc7 = Field(\"fsc7\"\
    , \"Filter scale configuration\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.fsc8 = Field(\"fsc8\", \"Filter scale configuration\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fsc9 = Field(\"fsc9\", \"Filter scale\
    \ configuration\", self._address, 9, 0x0001, 1, proxy)\n            self.fsc10\
    \ = Field(\"fsc10\", \"Filter scale configuration\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.fsc11 = Field(\"fsc11\", \"Filter scale configuration\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.fsc12 = Field(\"fsc12\"\
    , \"Filter scale configuration\", self._address, 12, 0x0001, 1, proxy)\n     \
    \       self.fsc13 = Field(\"fsc13\", \"Filter scale configuration\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fsc14 = Field(\"fsc14\", \"Filter scale\
    \ configuration\", self._address, 14, 0x0001, 1, proxy)\n            self.fsc15\
    \ = Field(\"fsc15\", \"Filter scale configuration\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.fsc16 = Field(\"fsc16\", \"Filter scale configuration\"\
    , self._address, 16, 0x0001, 1, proxy)\n            self.fsc17 = Field(\"fsc17\"\
    , \"Filter scale configuration\", self._address, 17, 0x0001, 1, proxy)\n     \
    \       self.fsc18 = Field(\"fsc18\", \"Filter scale configuration\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fsc19 = Field(\"fsc19\", \"Filter scale\
    \ configuration\", self._address, 19, 0x0001, 1, proxy)\n            self.fsc20\
    \ = Field(\"fsc20\", \"Filter scale configuration\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.fsc21 = Field(\"fsc21\", \"Filter scale configuration\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.fsc22 = Field(\"fsc22\"\
    , \"Filter scale configuration\", self._address, 22, 0x0001, 1, proxy)\n     \
    \       self.fsc23 = Field(\"fsc23\", \"Filter scale configuration\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fsc24 = Field(\"fsc24\", \"Filter scale\
    \ configuration\", self._address, 24, 0x0001, 1, proxy)\n            self.fsc25\
    \ = Field(\"fsc25\", \"Filter scale configuration\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.fsc26 = Field(\"fsc26\", \"Filter scale configuration\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.fsc27 = Field(\"fsc27\"\
    , \"Filter scale configuration\", self._address, 27, 0x0001, 1, proxy)\n    \n\
    \    class Ffa1rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FFA1R\", \"filter FIFO assignment\n          \
    \    register\", address + 0x0214, 32, \"read-write\", 0x0000, proxy)\n      \
    \      self.ffa0 = Field(\"ffa0\", \"Filter FIFO assignment for filter\n     \
    \                     0\", self._address, 0, 0x0001, 1, proxy)\n            self.ffa1\
    \ = Field(\"ffa1\", \"Filter FIFO assignment for filter\n                    \
    \      1\", self._address, 1, 0x0001, 1, proxy)\n            self.ffa2 = Field(\"\
    ffa2\", \"Filter FIFO assignment for filter\n                          2\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.ffa3 = Field(\"ffa3\", \"Filter FIFO\
    \ assignment for filter\n                          3\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.ffa4 = Field(\"ffa4\", \"Filter FIFO assignment\
    \ for filter\n                          4\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.ffa5 = Field(\"ffa5\", \"Filter FIFO assignment for filter\n\
    \                          5\", self._address, 5, 0x0001, 1, proxy)\n        \
    \    self.ffa6 = Field(\"ffa6\", \"Filter FIFO assignment for filter\n       \
    \                   6\", self._address, 6, 0x0001, 1, proxy)\n            self.ffa7\
    \ = Field(\"ffa7\", \"Filter FIFO assignment for filter\n                    \
    \      7\", self._address, 7, 0x0001, 1, proxy)\n            self.ffa8 = Field(\"\
    ffa8\", \"Filter FIFO assignment for filter\n                          8\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.ffa9 = Field(\"ffa9\", \"Filter FIFO\
    \ assignment for filter\n                          9\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.ffa10 = Field(\"ffa10\", \"Filter FIFO assignment\
    \ for filter\n                          10\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.ffa11 = Field(\"ffa11\", \"Filter FIFO assignment for filter\n\
    \                          11\", self._address, 11, 0x0001, 1, proxy)\n      \
    \      self.ffa12 = Field(\"ffa12\", \"Filter FIFO assignment for filter\n   \
    \                       12\", self._address, 12, 0x0001, 1, proxy)\n         \
    \   self.ffa13 = Field(\"ffa13\", \"Filter FIFO assignment for filter\n      \
    \                    13\", self._address, 13, 0x0001, 1, proxy)\n            self.ffa14\
    \ = Field(\"ffa14\", \"Filter FIFO assignment for filter\n                   \
    \       14\", self._address, 14, 0x0001, 1, proxy)\n            self.ffa15 = Field(\"\
    ffa15\", \"Filter FIFO assignment for filter\n                          15\",\
    \ self._address, 15, 0x0001, 1, proxy)\n            self.ffa16 = Field(\"ffa16\"\
    , \"Filter FIFO assignment for filter\n                          16\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.ffa17 = Field(\"ffa17\", \"Filter FIFO\
    \ assignment for filter\n                          17\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.ffa18 = Field(\"ffa18\", \"Filter FIFO assignment\
    \ for filter\n                          18\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.ffa19 = Field(\"ffa19\", \"Filter FIFO assignment for filter\n\
    \                          19\", self._address, 19, 0x0001, 1, proxy)\n      \
    \      self.ffa20 = Field(\"ffa20\", \"Filter FIFO assignment for filter\n   \
    \                       20\", self._address, 20, 0x0001, 1, proxy)\n         \
    \   self.ffa21 = Field(\"ffa21\", \"Filter FIFO assignment for filter\n      \
    \                    21\", self._address, 21, 0x0001, 1, proxy)\n            self.ffa22\
    \ = Field(\"ffa22\", \"Filter FIFO assignment for filter\n                   \
    \       22\", self._address, 22, 0x0001, 1, proxy)\n            self.ffa23 = Field(\"\
    ffa23\", \"Filter FIFO assignment for filter\n                          23\",\
    \ self._address, 23, 0x0001, 1, proxy)\n            self.ffa24 = Field(\"ffa24\"\
    , \"Filter FIFO assignment for filter\n                          24\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.ffa25 = Field(\"ffa25\", \"Filter FIFO\
    \ assignment for filter\n                          25\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.ffa26 = Field(\"ffa26\", \"Filter FIFO assignment\
    \ for filter\n                          26\", self._address, 26, 0x0001, 1, proxy)\n\
    \            self.ffa27 = Field(\"ffa27\", \"Filter FIFO assignment for filter\n\
    \                          27\", self._address, 27, 0x0001, 1, proxy)\n    \n\
    \    class Fa1rRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FA1R\", \"filter activation register\", address\
    \ + 0x021C, 32, \"read-write\", 0x0000, proxy)\n            self.fact0 = Field(\"\
    fact0\", \"Filter active\", self._address, 0, 0x0001, 1, proxy)\n            self.fact1\
    \ = Field(\"fact1\", \"Filter active\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.fact2 = Field(\"fact2\", \"Filter active\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.fact3 = Field(\"fact3\", \"Filter active\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fact4 = Field(\"fact4\"\
    , \"Filter active\", self._address, 4, 0x0001, 1, proxy)\n            self.fact5\
    \ = Field(\"fact5\", \"Filter active\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.fact6 = Field(\"fact6\", \"Filter active\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.fact7 = Field(\"fact7\", \"Filter active\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fact8 = Field(\"fact8\"\
    , \"Filter active\", self._address, 8, 0x0001, 1, proxy)\n            self.fact9\
    \ = Field(\"fact9\", \"Filter active\", self._address, 9, 0x0001, 1, proxy)\n\
    \            self.fact10 = Field(\"fact10\", \"Filter active\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.fact11 = Field(\"fact11\", \"Filter\
    \ active\", self._address, 11, 0x0001, 1, proxy)\n            self.fact12 = Field(\"\
    fact12\", \"Filter active\", self._address, 12, 0x0001, 1, proxy)\n          \
    \  self.fact13 = Field(\"fact13\", \"Filter active\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fact14 = Field(\"fact14\", \"Filter active\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fact15 = Field(\"fact15\", \"Filter\
    \ active\", self._address, 15, 0x0001, 1, proxy)\n            self.fact16 = Field(\"\
    fact16\", \"Filter active\", self._address, 16, 0x0001, 1, proxy)\n          \
    \  self.fact17 = Field(\"fact17\", \"Filter active\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fact18 = Field(\"fact18\", \"Filter active\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fact19 = Field(\"fact19\", \"Filter\
    \ active\", self._address, 19, 0x0001, 1, proxy)\n            self.fact20 = Field(\"\
    fact20\", \"Filter active\", self._address, 20, 0x0001, 1, proxy)\n          \
    \  self.fact21 = Field(\"fact21\", \"Filter active\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fact22 = Field(\"fact22\", \"Filter active\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fact23 = Field(\"fact23\", \"Filter\
    \ active\", self._address, 23, 0x0001, 1, proxy)\n            self.fact24 = Field(\"\
    fact24\", \"Filter active\", self._address, 24, 0x0001, 1, proxy)\n          \
    \  self.fact25 = Field(\"fact25\", \"Filter active\", self._address, 25, 0x0001,\
    \ 1, proxy)\n            self.fact26 = Field(\"fact26\", \"Filter active\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.fact27 = Field(\"fact27\", \"Filter\
    \ active\", self._address, 27, 0x0001, 1, proxy)\n    \n    class F0r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F0R1\", \"Filter bank 0 register 1\", address + 0x0240, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F0r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F0R2\", \"Filter bank 0 register\
    \ 2\", address + 0x0244, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F1r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F1R1\", \"Filter bank 1 register 1\", address\
    \ + 0x0248, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F1r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F1R2\", \"Filter bank 1 register 2\", address + 0x024C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F2r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F2R1\", \"Filter bank 2 register\
    \ 1\", address + 0x0250, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F2r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F2R2\", \"Filter bank 2 register 2\", address\
    \ + 0x0254, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F3r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F3R1\", \"Filter bank 3 register 1\", address + 0x0258, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F3r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F3R2\", \"Filter bank 3 register\
    \ 2\", address + 0x025C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F4r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F4R1\", \"Filter bank 4 register 1\", address\
    \ + 0x0260, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F4r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F4R2\", \"Filter bank 4 register 2\", address + 0x0264, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F5r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F5R1\", \"Filter bank 5 register\
    \ 1\", address + 0x0268, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F5r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F5R2\", \"Filter bank 5 register 2\", address\
    \ + 0x026C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F6r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F6R1\", \"Filter bank 6 register 1\", address + 0x0270, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F6r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F6R2\", \"Filter bank 6 register\
    \ 2\", address + 0x0274, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F7r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F7R1\", \"Filter bank 7 register 1\", address\
    \ + 0x0278, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F7r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F7R2\", \"Filter bank 7 register 2\", address + 0x027C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F8r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F8R1\", \"Filter bank 8 register\
    \ 1\", address + 0x0280, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F8r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F8R2\", \"Filter bank 8 register 2\", address\
    \ + 0x0284, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F9r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F9R1\", \"Filter bank 9 register 1\", address + 0x0288, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F9r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F9R2\", \"Filter bank 9 register\
    \ 2\", address + 0x028C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F10r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F10R1\", \"Filter bank 10 register 1\", address\
    \ + 0x0290, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F10r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F10R2\", \"Filter bank 10 register 2\", address + 0x0294, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F11r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F11R1\", \"Filter bank 11 register\
    \ 1\", address + 0x0298, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F11r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F11R2\", \"Filter bank 11 register 2\", address\
    \ + 0x029C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F12r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F12R1\", \"Filter bank 4 register 1\", address + 0x02A0, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F12r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F12R2\", \"Filter bank 12 register\
    \ 2\", address + 0x02A4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F13r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F13R1\", \"Filter bank 13 register 1\", address\
    \ + 0x02A8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F13r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F13R2\", \"Filter bank 13 register 2\", address + 0x02AC, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F14r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F14R1\", \"Filter bank 14 register\
    \ 1\", address + 0x02B0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F14r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F14R2\", \"Filter bank 14 register 2\", address\
    \ + 0x02B4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F15r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F15R1\", \"Filter bank 15 register 1\", address + 0x02B8, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F15r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F15R2\", \"Filter bank 15 register\
    \ 2\", address + 0x02BC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F16r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F16R1\", \"Filter bank 16 register 1\", address\
    \ + 0x02C0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F16r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F16R2\", \"Filter bank 16 register 2\", address + 0x02C4, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F17r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F17R1\", \"Filter bank 17 register\
    \ 1\", address + 0x02C8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F17r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F17R2\", \"Filter bank 17 register 2\", address\
    \ + 0x02CC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F18r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F18R1\", \"Filter bank 18 register 1\", address + 0x02D0, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F18r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F18R2\", \"Filter bank 18 register\
    \ 2\", address + 0x02D4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F19r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F19R1\", \"Filter bank 19 register 1\", address\
    \ + 0x02D8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F19r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F19R2\", \"Filter bank 19 register 2\", address + 0x02DC, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F20r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F20R1\", \"Filter bank 20 register\
    \ 1\", address + 0x02E0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F20r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F20R2\", \"Filter bank 20 register 2\", address\
    \ + 0x02E4, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F21r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F21R1\", \"Filter bank 21 register 1\", address + 0x02E8, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F21r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F21R2\", \"Filter bank 21 register\
    \ 2\", address + 0x02EC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F22r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F22R1\", \"Filter bank 22 register 1\", address\
    \ + 0x02F0, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F22r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F22R2\", \"Filter bank 22 register 2\", address + 0x02F4, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F23r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F23R1\", \"Filter bank 23 register\
    \ 1\", address + 0x02F8, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F23r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F23R2\", \"Filter bank 23 register 2\", address\
    \ + 0x02FC, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F24r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F24R1\", \"Filter bank 24 register 1\", address + 0x0300, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F24r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F24R2\", \"Filter bank 24 register\
    \ 2\", address + 0x0304, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F25r1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F25R1\", \"Filter bank 25 register 1\", address\
    \ + 0x0308, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F25r2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F25R2\", \"Filter bank 25 register 2\", address + 0x030C, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F26r1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F26R1\", \"Filter bank 26 register\
    \ 1\", address + 0x0310, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    class F26r2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"F26R2\", \"Filter bank 26 register 2\", address\
    \ + 0x0314, 32, \"read-write\", 0x0000, proxy)\n            self.fb0 = Field(\"\
    fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n            self.fb1\
    \ = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001, 1, proxy)\n    \
    \        self.fb2 = Field(\"fb2\", \"Filter bits\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"Filter bits\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"fb5\", \"\
    Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6 = Field(\"\
    fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n            self.fb7\
    \ = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001, 1, proxy)\n    \
    \        self.fb8 = Field(\"fb8\", \"Filter bits\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\", \"Filter bits\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.fb11 = Field(\"fb11\"\
    , \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n            self.fb12\
    \ = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.fb13 = Field(\"fb13\", \"Filter bits\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\", \"Filter bits\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.fb16 = Field(\"fb16\"\
    , \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n            self.fb17\
    \ = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.fb18 = Field(\"fb18\", \"Filter bits\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\", \"Filter bits\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.fb21 = Field(\"fb21\"\
    , \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n            self.fb22\
    \ = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001, 1, proxy)\n  \
    \          self.fb23 = Field(\"fb23\", \"Filter bits\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\", \"Filter bits\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fb26 = Field(\"fb26\"\
    , \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n            self.fb27\
    \ = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001, 1, proxy)\n  \
    \          self.fb28 = Field(\"fb28\", \"Filter bits\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\", \"Filter bits\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.fb31 = Field(\"fb31\"\
    , \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n    \n    class F27r1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    F27R1\", \"Filter bank 27 register 1\", address + 0x0318, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.fb0 = Field(\"fb0\", \"Filter bits\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.fb1 = Field(\"fb1\", \"Filter bits\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.fb2 = Field(\"fb2\", \"\
    Filter bits\", self._address, 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"\
    fb3\", \"Filter bits\", self._address, 3, 0x0001, 1, proxy)\n            self.fb4\
    \ = Field(\"fb4\", \"Filter bits\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.fb5 = Field(\"fb5\", \"Filter bits\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.fb6 = Field(\"fb6\", \"Filter bits\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.fb7 = Field(\"fb7\", \"Filter bits\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.fb8 = Field(\"fb8\", \"\
    Filter bits\", self._address, 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"\
    fb9\", \"Filter bits\", self._address, 9, 0x0001, 1, proxy)\n            self.fb10\
    \ = Field(\"fb10\", \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n  \
    \          self.fb11 = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.fb12 = Field(\"fb12\", \"Filter bits\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\"\
    , \"Filter bits\", self._address, 14, 0x0001, 1, proxy)\n            self.fb15\
    \ = Field(\"fb15\", \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.fb16 = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.fb17 = Field(\"fb17\", \"Filter bits\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\"\
    , \"Filter bits\", self._address, 19, 0x0001, 1, proxy)\n            self.fb20\
    \ = Field(\"fb20\", \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n  \
    \          self.fb21 = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001,\
    \ 1, proxy)\n            self.fb22 = Field(\"fb22\", \"Filter bits\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\"\
    , self._address, 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\"\
    , \"Filter bits\", self._address, 24, 0x0001, 1, proxy)\n            self.fb25\
    \ = Field(\"fb25\", \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n  \
    \          self.fb26 = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.fb27 = Field(\"fb27\", \"Filter bits\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\"\
    , \"Filter bits\", self._address, 29, 0x0001, 1, proxy)\n            self.fb30\
    \ = Field(\"fb30\", \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.fb31 = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001,\
    \ 1, proxy)\n    \n    class F27r2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"F27R2\", \"Filter bank 27 register\
    \ 2\", address + 0x031C, 32, \"read-write\", 0x0000, proxy)\n            self.fb0\
    \ = Field(\"fb0\", \"Filter bits\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.fb1 = Field(\"fb1\", \"Filter bits\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.fb2 = Field(\"fb2\", \"Filter bits\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.fb3 = Field(\"fb3\", \"Filter bits\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.fb4 = Field(\"fb4\", \"\
    Filter bits\", self._address, 4, 0x0001, 1, proxy)\n            self.fb5 = Field(\"\
    fb5\", \"Filter bits\", self._address, 5, 0x0001, 1, proxy)\n            self.fb6\
    \ = Field(\"fb6\", \"Filter bits\", self._address, 6, 0x0001, 1, proxy)\n    \
    \        self.fb7 = Field(\"fb7\", \"Filter bits\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.fb8 = Field(\"fb8\", \"Filter bits\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fb9 = Field(\"fb9\", \"Filter bits\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.fb10 = Field(\"fb10\"\
    , \"Filter bits\", self._address, 10, 0x0001, 1, proxy)\n            self.fb11\
    \ = Field(\"fb11\", \"Filter bits\", self._address, 11, 0x0001, 1, proxy)\n  \
    \          self.fb12 = Field(\"fb12\", \"Filter bits\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.fb13 = Field(\"fb13\", \"Filter bits\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.fb14 = Field(\"fb14\", \"Filter bits\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.fb15 = Field(\"fb15\"\
    , \"Filter bits\", self._address, 15, 0x0001, 1, proxy)\n            self.fb16\
    \ = Field(\"fb16\", \"Filter bits\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.fb17 = Field(\"fb17\", \"Filter bits\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.fb18 = Field(\"fb18\", \"Filter bits\", self._address,\
    \ 18, 0x0001, 1, proxy)\n            self.fb19 = Field(\"fb19\", \"Filter bits\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.fb20 = Field(\"fb20\"\
    , \"Filter bits\", self._address, 20, 0x0001, 1, proxy)\n            self.fb21\
    \ = Field(\"fb21\", \"Filter bits\", self._address, 21, 0x0001, 1, proxy)\n  \
    \          self.fb22 = Field(\"fb22\", \"Filter bits\", self._address, 22, 0x0001,\
    \ 1, proxy)\n            self.fb23 = Field(\"fb23\", \"Filter bits\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.fb24 = Field(\"fb24\", \"Filter bits\"\
    , self._address, 24, 0x0001, 1, proxy)\n            self.fb25 = Field(\"fb25\"\
    , \"Filter bits\", self._address, 25, 0x0001, 1, proxy)\n            self.fb26\
    \ = Field(\"fb26\", \"Filter bits\", self._address, 26, 0x0001, 1, proxy)\n  \
    \          self.fb27 = Field(\"fb27\", \"Filter bits\", self._address, 27, 0x0001,\
    \ 1, proxy)\n            self.fb28 = Field(\"fb28\", \"Filter bits\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.fb29 = Field(\"fb29\", \"Filter bits\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.fb30 = Field(\"fb30\"\
    , \"Filter bits\", self._address, 30, 0x0001, 1, proxy)\n            self.fb31\
    \ = Field(\"fb31\", \"Filter bits\", self._address, 31, 0x0001, 1, proxy)\n  \
    \  \n    def __init__(self, proxy):\n        super().__init__(\"can2\", \"Controller\
    \ area network\", 0x40006800)\n        self.mcr = self.McrRegister(self.address,\
    \ proxy)\n        self.msr = self.MsrRegister(self.address, proxy)\n        self.tsr\
    \ = self.TsrRegister(self.address, proxy)\n        self.rf0r = self.Rf0rRegister(self.address,\
    \ proxy)\n        self.rf1r = self.Rf1rRegister(self.address, proxy)\n       \
    \ self.ier = self.IerRegister(self.address, proxy)\n        self.esr = self.EsrRegister(self.address,\
    \ proxy)\n        self.btr = self.BtrRegister(self.address, proxy)\n        self.ti0r\
    \ = self.Ti0rRegister(self.address, proxy)\n        self.tdt0r = self.Tdt0rRegister(self.address,\
    \ proxy)\n        self.tdl0r = self.Tdl0rRegister(self.address, proxy)\n     \
    \   self.tdh0r = self.Tdh0rRegister(self.address, proxy)\n        self.ti1r =\
    \ self.Ti1rRegister(self.address, proxy)\n        self.tdt1r = self.Tdt1rRegister(self.address,\
    \ proxy)\n        self.tdl1r = self.Tdl1rRegister(self.address, proxy)\n     \
    \   self.tdh1r = self.Tdh1rRegister(self.address, proxy)\n        self.ti2r =\
    \ self.Ti2rRegister(self.address, proxy)\n        self.tdt2r = self.Tdt2rRegister(self.address,\
    \ proxy)\n        self.tdl2r = self.Tdl2rRegister(self.address, proxy)\n     \
    \   self.tdh2r = self.Tdh2rRegister(self.address, proxy)\n        self.ri0r =\
    \ self.Ri0rRegister(self.address, proxy)\n        self.rdt0r = self.Rdt0rRegister(self.address,\
    \ proxy)\n        self.rdl0r = self.Rdl0rRegister(self.address, proxy)\n     \
    \   self.rdh0r = self.Rdh0rRegister(self.address, proxy)\n        self.ri1r =\
    \ self.Ri1rRegister(self.address, proxy)\n        self.rdt1r = self.Rdt1rRegister(self.address,\
    \ proxy)\n        self.rdl1r = self.Rdl1rRegister(self.address, proxy)\n     \
    \   self.rdh1r = self.Rdh1rRegister(self.address, proxy)\n        self.fmr = self.FmrRegister(self.address,\
    \ proxy)\n        self.fm1r = self.Fm1rRegister(self.address, proxy)\n       \
    \ self.fs1r = self.Fs1rRegister(self.address, proxy)\n        self.ffa1r = self.Ffa1rRegister(self.address,\
    \ proxy)\n        self.fa1r = self.Fa1rRegister(self.address, proxy)\n       \
    \ self.f0r1 = self.F0r1Register(self.address, proxy)\n        self.f0r2 = self.F0r2Register(self.address,\
    \ proxy)\n        self.f1r1 = self.F1r1Register(self.address, proxy)\n       \
    \ self.f1r2 = self.F1r2Register(self.address, proxy)\n        self.f2r1 = self.F2r1Register(self.address,\
    \ proxy)\n        self.f2r2 = self.F2r2Register(self.address, proxy)\n       \
    \ self.f3r1 = self.F3r1Register(self.address, proxy)\n        self.f3r2 = self.F3r2Register(self.address,\
    \ proxy)\n        self.f4r1 = self.F4r1Register(self.address, proxy)\n       \
    \ self.f4r2 = self.F4r2Register(self.address, proxy)\n        self.f5r1 = self.F5r1Register(self.address,\
    \ proxy)\n        self.f5r2 = self.F5r2Register(self.address, proxy)\n       \
    \ self.f6r1 = self.F6r1Register(self.address, proxy)\n        self.f6r2 = self.F6r2Register(self.address,\
    \ proxy)\n        self.f7r1 = self.F7r1Register(self.address, proxy)\n       \
    \ self.f7r2 = self.F7r2Register(self.address, proxy)\n        self.f8r1 = self.F8r1Register(self.address,\
    \ proxy)\n        self.f8r2 = self.F8r2Register(self.address, proxy)\n       \
    \ self.f9r1 = self.F9r1Register(self.address, proxy)\n        self.f9r2 = self.F9r2Register(self.address,\
    \ proxy)\n        self.f10r1 = self.F10r1Register(self.address, proxy)\n     \
    \   self.f10r2 = self.F10r2Register(self.address, proxy)\n        self.f11r1 =\
    \ self.F11r1Register(self.address, proxy)\n        self.f11r2 = self.F11r2Register(self.address,\
    \ proxy)\n        self.f12r1 = self.F12r1Register(self.address, proxy)\n     \
    \   self.f12r2 = self.F12r2Register(self.address, proxy)\n        self.f13r1 =\
    \ self.F13r1Register(self.address, proxy)\n        self.f13r2 = self.F13r2Register(self.address,\
    \ proxy)\n        self.f14r1 = self.F14r1Register(self.address, proxy)\n     \
    \   self.f14r2 = self.F14r2Register(self.address, proxy)\n        self.f15r1 =\
    \ self.F15r1Register(self.address, proxy)\n        self.f15r2 = self.F15r2Register(self.address,\
    \ proxy)\n        self.f16r1 = self.F16r1Register(self.address, proxy)\n     \
    \   self.f16r2 = self.F16r2Register(self.address, proxy)\n        self.f17r1 =\
    \ self.F17r1Register(self.address, proxy)\n        self.f17r2 = self.F17r2Register(self.address,\
    \ proxy)\n        self.f18r1 = self.F18r1Register(self.address, proxy)\n     \
    \   self.f18r2 = self.F18r2Register(self.address, proxy)\n        self.f19r1 =\
    \ self.F19r1Register(self.address, proxy)\n        self.f19r2 = self.F19r2Register(self.address,\
    \ proxy)\n        self.f20r1 = self.F20r1Register(self.address, proxy)\n     \
    \   self.f20r2 = self.F20r2Register(self.address, proxy)\n        self.f21r1 =\
    \ self.F21r1Register(self.address, proxy)\n        self.f21r2 = self.F21r2Register(self.address,\
    \ proxy)\n        self.f22r1 = self.F22r1Register(self.address, proxy)\n     \
    \   self.f22r2 = self.F22r2Register(self.address, proxy)\n        self.f23r1 =\
    \ self.F23r1Register(self.address, proxy)\n        self.f23r2 = self.F23r2Register(self.address,\
    \ proxy)\n        self.f24r1 = self.F24r1Register(self.address, proxy)\n     \
    \   self.f24r2 = self.F24r2Register(self.address, proxy)\n        self.f25r1 =\
    \ self.F25r1Register(self.address, proxy)\n        self.f25r2 = self.F25r2Register(self.address,\
    \ proxy)\n        self.f26r1 = self.F26r1Register(self.address, proxy)\n     \
    \   self.f26r2 = self.F26r2Register(self.address, proxy)\n        self.f27r1 =\
    \ self.F27r1Register(self.address, proxy)\n        self.f27r2 = self.F27r2Register(self.address,\
    \ proxy)\n"
  name: CAN2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Nvic(Peripheral):\n\
    \    class Iser0Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ISER0\", \"Interrupt Set-Enable Register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.setena = Field(\"\
    setena\", \"SETENA\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class\
    \ Iser1Register(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"ISER1\", \"Interrupt Set-Enable Register\", address\
    \ + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.setena = Field(\"\
    setena\", \"SETENA\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class\
    \ Iser2Register(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"ISER2\", \"Interrupt Set-Enable Register\", address\
    \ + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.setena = Field(\"\
    setena\", \"SETENA\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class\
    \ Icer0Register(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"ICER0\", \"Interrupt Clear-Enable\n              Register\"\
    , address + 0x0080, 32, \"read-write\", 0x0000, proxy)\n            self.clrena\
    \ = Field(\"clrena\", \"CLRENA\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n \
    \   \n    class Icer1Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"ICER1\", \"Interrupt Clear-Enable\n\
    \              Register\", address + 0x0084, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.clrena = Field(\"clrena\", \"CLRENA\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Icer2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ICER2\", \"Interrupt Clear-Enable\n\
    \              Register\", address + 0x0088, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.clrena = Field(\"clrena\", \"CLRENA\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Ispr0Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ISPR0\", \"Interrupt Set-Pending\
    \ Register\", address + 0x0100, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.setpend = Field(\"setpend\", \"SETPEND\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Ispr1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ISPR1\", \"Interrupt Set-Pending\
    \ Register\", address + 0x0104, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.setpend = Field(\"setpend\", \"SETPEND\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Ispr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ISPR2\", \"Interrupt Set-Pending\
    \ Register\", address + 0x0108, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.setpend = Field(\"setpend\", \"SETPEND\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Icpr0Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ICPR0\", \"Interrupt Clear-Pending\n\
    \              Register\", address + 0x0180, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.clrpend = Field(\"clrpend\", \"CLRPEND\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class Icpr1Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"ICPR1\", \"\
    Interrupt Clear-Pending\n              Register\", address + 0x0184, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.clrpend = Field(\"clrpend\", \"CLRPEND\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Icpr2Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"ICPR2\"\
    , \"Interrupt Clear-Pending\n              Register\", address + 0x0188, 32, \"\
    read-write\", 0x0000, proxy)\n            self.clrpend = Field(\"clrpend\", \"\
    CLRPEND\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Iabr0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IABR0\", \"Interrupt Active Bit Register\", address + 0x0200, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.active = Field(\"active\", \"ACTIVE\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Iabr1Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"IABR1\"\
    , \"Interrupt Active Bit Register\", address + 0x0204, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.active = Field(\"active\", \"ACTIVE\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Iabr2Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"IABR2\"\
    , \"Interrupt Active Bit Register\", address + 0x0208, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.active = Field(\"active\", \"ACTIVE\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Ipr0Register(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"IPR0\",\
    \ \"Interrupt Priority Register\", address + 0x0300, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR1\", \"Interrupt Priority Register\", address\
    \ + 0x0304, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR2\", \"Interrupt\
    \ Priority Register\", address + 0x0308, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR3\", \"Interrupt Priority Register\", address + 0x030C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr4Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR4\", \"Interrupt Priority Register\", address\
    \ + 0x0310, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr5Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR5\", \"Interrupt\
    \ Priority Register\", address + 0x0314, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR6\", \"Interrupt Priority Register\", address + 0x0318, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr7Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR7\", \"Interrupt Priority Register\", address\
    \ + 0x031C, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr8Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR8\", \"Interrupt\
    \ Priority Register\", address + 0x0320, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr9Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR9\", \"Interrupt Priority Register\", address + 0x0324, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr10Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR10\", \"Interrupt Priority Register\", address\
    \ + 0x0328, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr11Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR11\", \"\
    Interrupt Priority Register\", address + 0x032C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr12Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR12\", \"Interrupt Priority Register\", address + 0x0330, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr13Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR13\", \"Interrupt Priority Register\", address\
    \ + 0x0334, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr14Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR14\", \"\
    Interrupt Priority Register\", address + 0x0338, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr15Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR15\", \"Interrupt Priority Register\", address + 0x033C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr16Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR16\", \"Interrupt Priority Register\", address\
    \ + 0x0340, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr17Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR17\", \"\
    Interrupt Priority Register\", address + 0x0344, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr18Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR18\", \"Interrupt Priority Register\", address + 0x0348, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\"\
    , \"IPR_N2\", self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 =\
    \ Field(\"ipr_n3\", \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n \
    \   class Ipr19Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IPR19\", \"Interrupt Priority Register\", address\
    \ + 0x034C, 32, \"read-write\", 0x0000, proxy)\n            self.ipr_n0 = Field(\"\
    ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF, 8, proxy)\n            self.ipr_n1\
    \ = Field(\"ipr_n1\", \"IPR_N1\", self._address, 8, 0x00FF, 8, proxy)\n      \
    \      self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\", self._address, 16, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\", \"IPR_N3\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Ipr20Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR20\", \"\
    Interrupt Priority Register\", address + 0x0350, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ipr_n0 = Field(\"ipr_n0\", \"IPR_N0\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n            self.ipr_n1 = Field(\"ipr_n1\", \"IPR_N1\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.ipr_n2 = Field(\"ipr_n2\", \"IPR_N2\"\
    , self._address, 16, 0x00FF, 8, proxy)\n            self.ipr_n3 = Field(\"ipr_n3\"\
    , \"IPR_N3\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class Ipr21Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    IPR21\", \"Interrupt Priority Register\", address + 0x0354, 32, \"read-write\"\
    , 0x0000, proxy)\n            \n    \n    class Ipr22Register(Register):\n   \
    \     def __init__(self, address, proxy):\n            super().__init__(\"IPR22\"\
    , \"Interrupt Priority Register\", address + 0x0358, 32, \"read-write\", 0x0000,\
    \ proxy)\n            \n    \n    class Ipr23Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"IPR23\", \"\
    Interrupt Priority Register\", address + 0x035C, 32, \"read-write\", 0x0000, proxy)\n\
    \            \n    \n    class Ipr24Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"IPR24\", \"Interrupt Priority\
    \ Register\", address + 0x0360, 32, \"read-write\", 0x0000, proxy)\n         \
    \   \n    \n    class Ipr25Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"IPR25\", \"Interrupt Priority Register\"\
    , address + 0x0364, 32, \"read-write\", 0x0000, proxy)\n            \n    \n \
    \   def __init__(self, proxy):\n        super().__init__(\"nvic\", \"Nested Vectored\
    \ Interrupt\n      Controller\", 0xE000E100)\n        self.iser0 = self.Iser0Register(self.address,\
    \ proxy)\n        self.iser1 = self.Iser1Register(self.address, proxy)\n     \
    \   self.iser2 = self.Iser2Register(self.address, proxy)\n        self.icer0 =\
    \ self.Icer0Register(self.address, proxy)\n        self.icer1 = self.Icer1Register(self.address,\
    \ proxy)\n        self.icer2 = self.Icer2Register(self.address, proxy)\n     \
    \   self.ispr0 = self.Ispr0Register(self.address, proxy)\n        self.ispr1 =\
    \ self.Ispr1Register(self.address, proxy)\n        self.ispr2 = self.Ispr2Register(self.address,\
    \ proxy)\n        self.icpr0 = self.Icpr0Register(self.address, proxy)\n     \
    \   self.icpr1 = self.Icpr1Register(self.address, proxy)\n        self.icpr2 =\
    \ self.Icpr2Register(self.address, proxy)\n        self.iabr0 = self.Iabr0Register(self.address,\
    \ proxy)\n        self.iabr1 = self.Iabr1Register(self.address, proxy)\n     \
    \   self.iabr2 = self.Iabr2Register(self.address, proxy)\n        self.ipr0 =\
    \ self.Ipr0Register(self.address, proxy)\n        self.ipr1 = self.Ipr1Register(self.address,\
    \ proxy)\n        self.ipr2 = self.Ipr2Register(self.address, proxy)\n       \
    \ self.ipr3 = self.Ipr3Register(self.address, proxy)\n        self.ipr4 = self.Ipr4Register(self.address,\
    \ proxy)\n        self.ipr5 = self.Ipr5Register(self.address, proxy)\n       \
    \ self.ipr6 = self.Ipr6Register(self.address, proxy)\n        self.ipr7 = self.Ipr7Register(self.address,\
    \ proxy)\n        self.ipr8 = self.Ipr8Register(self.address, proxy)\n       \
    \ self.ipr9 = self.Ipr9Register(self.address, proxy)\n        self.ipr10 = self.Ipr10Register(self.address,\
    \ proxy)\n        self.ipr11 = self.Ipr11Register(self.address, proxy)\n     \
    \   self.ipr12 = self.Ipr12Register(self.address, proxy)\n        self.ipr13 =\
    \ self.Ipr13Register(self.address, proxy)\n        self.ipr14 = self.Ipr14Register(self.address,\
    \ proxy)\n        self.ipr15 = self.Ipr15Register(self.address, proxy)\n     \
    \   self.ipr16 = self.Ipr16Register(self.address, proxy)\n        self.ipr17 =\
    \ self.Ipr17Register(self.address, proxy)\n        self.ipr18 = self.Ipr18Register(self.address,\
    \ proxy)\n        self.ipr19 = self.Ipr19Register(self.address, proxy)\n     \
    \   self.ipr20 = self.Ipr20Register(self.address, proxy)\n        self.ipr21 =\
    \ self.Ipr21Register(self.address, proxy)\n        self.ipr22 = self.Ipr22Register(self.address,\
    \ proxy)\n        self.ipr23 = self.Ipr23Register(self.address, proxy)\n     \
    \   self.ipr24 = self.Ipr24Register(self.address, proxy)\n        self.ipr25 =\
    \ self.Ipr25Register(self.address, proxy)\n"
  name: NVIC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Flash(Peripheral):\n\
    \    class AcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ACR\", \"Flash access control register\", address\
    \ + 0x0000, 32, \"\", 0x0000, proxy)\n            self.latency = Field(\"latency\"\
    , \"Latency\", self._address, 0, 0x0007, 3, proxy)\n            self.prften =\
    \ Field(\"prften\", \"Prefetch enable\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.icen = Field(\"icen\", \"Instruction cache enable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.dcen = Field(\"dcen\", \"Data cache enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.icrst = Field(\"icrst\"\
    , \"Instruction cache reset\", self._address, 11, 0x0001, 1, proxy)\n        \
    \    self.dcrst = Field(\"dcrst\", \"Data cache reset\", self._address, 12, 0x0001,\
    \ 1, proxy)\n    \n    class KeyrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"KEYR\", \"Flash key register\"\
    , address + 0x0004, 32, \"write-only\", 0x0000, proxy)\n            self.key =\
    \ Field(\"key\", \"FPEC key\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n\
    \    class OptkeyrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OPTKEYR\", \"Flash option key register\", address\
    \ + 0x0008, 32, \"write-only\", 0x0000, proxy)\n            self.optkey = Field(\"\
    optkey\", \"Option byte key\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x000C, 32,\
    \ \"\", 0x0000, proxy)\n            self.eop = Field(\"eop\", \"End of operation\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.operr = Field(\"operr\"\
    , \"Operation error\", self._address, 1, 0x0001, 1, proxy)\n            self.wrperr\
    \ = Field(\"wrperr\", \"Write protection error\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.pgaerr = Field(\"pgaerr\", \"Programming alignment\n\
    \                          error\", self._address, 5, 0x0001, 1, proxy)\n    \
    \        self.pgperr = Field(\"pgperr\", \"Programming parallelism\n         \
    \                 error\", self._address, 6, 0x0001, 1, proxy)\n            self.pgserr\
    \ = Field(\"pgserr\", \"Programming sequence error\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.rderr = Field(\"rderr\", \"Read Protection Error\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bsy = Field(\"bsy\", \"\
    Busy\", self._address, 16, 0x0001, 1, proxy)\n    \n    class CrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CR\", \"Control register\", address + 0x0010, 32, \"read-write\", 0x80000000,\
    \ proxy)\n            self.pg = Field(\"pg\", \"Programming\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.ser = Field(\"ser\", \"Sector Erase\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.mer = Field(\"mer\", \"\
    Mass Erase of sectors 0 to\n                          11\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.snb = Field(\"snb\", \"Sector number\",\
    \ self._address, 3, 0x000F, 4, proxy)\n            self.psize = Field(\"psize\"\
    , \"Program size\", self._address, 8, 0x0003, 2, proxy)\n            self.strt\
    \ = Field(\"strt\", \"Start\", self._address, 16, 0x0001, 1, proxy)\n        \
    \    self.eopie = Field(\"eopie\", \"End of operation interrupt\n            \
    \              enable\", self._address, 24, 0x0001, 1, proxy)\n            self.errie\
    \ = Field(\"errie\", \"Error interrupt enable\", self._address, 25, 0x0001, 1,\
    \ proxy)\n            self.lock = Field(\"lock\", \"Lock\", self._address, 31,\
    \ 0x0001, 1, proxy)\n    \n    class OptcrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OPTCR\", \"Flash option control\
    \ register\", address + 0x0014, 32, \"read-write\", 0xFFFAAED, proxy)\n      \
    \      self.optlock = Field(\"optlock\", \"Option lock\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.optstrt = Field(\"optstrt\", \"Option start\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.bor_lev = Field(\"bor_lev\", \"BOR reset\
    \ Level\", self._address, 2, 0x0003, 2, proxy)\n            self.wdg_sw = Field(\"\
    wdg_sw\", \"WDG_SW User option bytes\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nrst_stop = Field(\"nrst_stop\", \"nRST_STOP User option\n \
    \                         bytes\", self._address, 6, 0x0001, 1, proxy)\n     \
    \       self.nrst_stdby = Field(\"nrst_stdby\", \"nRST_STDBY User option\n   \
    \                       bytes\", self._address, 7, 0x0001, 1, proxy)\n       \
    \     self.rdp = Field(\"rdp\", \"Read protect\", self._address, 8, 0x00FF, 8,\
    \ proxy)\n            self.nwrp = Field(\"nwrp\", \"Not write protect\", self._address,\
    \ 16, 0x00FF, 8, proxy)\n            self.sprmod = Field(\"sprmod\", \"Selection\
    \ of Protection Mode of nWPRi\n                          bits\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    flash\", \"FLASH\", 0x40023C00)\n        self.acr = self.AcrRegister(self.address,\
    \ proxy)\n        self.keyr = self.KeyrRegister(self.address, proxy)\n       \
    \ self.optkeyr = self.OptkeyrRegister(self.address, proxy)\n        self.sr =\
    \ self.SrRegister(self.address, proxy)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.optcr = self.OptcrRegister(self.address, proxy)\n"
  name: FLASH
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Exti(Peripheral):\n\
    \    class ImrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"IMR\", \"Interrupt mask register\n           \
    \   (EXTI_IMR)\", address + 0x0000, 32, \"read-write\", 0x0000, proxy)\n     \
    \       self.mr0 = Field(\"mr0\", \"Interrupt Mask on line 0\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.mr1 = Field(\"mr1\", \"Interrupt Mask\
    \ on line 1\", self._address, 1, 0x0001, 1, proxy)\n            self.mr2 = Field(\"\
    mr2\", \"Interrupt Mask on line 2\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.mr3 = Field(\"mr3\", \"Interrupt Mask on line 3\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.mr4 = Field(\"mr4\", \"Interrupt Mask\
    \ on line 4\", self._address, 4, 0x0001, 1, proxy)\n            self.mr5 = Field(\"\
    mr5\", \"Interrupt Mask on line 5\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.mr6 = Field(\"mr6\", \"Interrupt Mask on line 6\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.mr7 = Field(\"mr7\", \"Interrupt Mask\
    \ on line 7\", self._address, 7, 0x0001, 1, proxy)\n            self.mr8 = Field(\"\
    mr8\", \"Interrupt Mask on line 8\", self._address, 8, 0x0001, 1, proxy)\n   \
    \         self.mr9 = Field(\"mr9\", \"Interrupt Mask on line 9\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.mr10 = Field(\"mr10\", \"Interrupt Mask\
    \ on line 10\", self._address, 10, 0x0001, 1, proxy)\n            self.mr11 =\
    \ Field(\"mr11\", \"Interrupt Mask on line 11\", self._address, 11, 0x0001, 1,\
    \ proxy)\n            self.mr12 = Field(\"mr12\", \"Interrupt Mask on line 12\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.mr13 = Field(\"mr13\"\
    , \"Interrupt Mask on line 13\", self._address, 13, 0x0001, 1, proxy)\n      \
    \      self.mr14 = Field(\"mr14\", \"Interrupt Mask on line 14\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.mr15 = Field(\"mr15\", \"Interrupt Mask\
    \ on line 15\", self._address, 15, 0x0001, 1, proxy)\n            self.mr16 =\
    \ Field(\"mr16\", \"Interrupt Mask on line 16\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.mr17 = Field(\"mr17\", \"Interrupt Mask on line 17\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.mr18 = Field(\"mr18\"\
    , \"Interrupt Mask on line 18\", self._address, 18, 0x0001, 1, proxy)\n      \
    \      self.mr19 = Field(\"mr19\", \"Interrupt Mask on line 19\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.mr20 = Field(\"mr20\", \"Interrupt Mask\
    \ on line 20\", self._address, 20, 0x0001, 1, proxy)\n            self.mr21 =\
    \ Field(\"mr21\", \"Interrupt Mask on line 21\", self._address, 21, 0x0001, 1,\
    \ proxy)\n            self.mr22 = Field(\"mr22\", \"Interrupt Mask on line 22\"\
    , self._address, 22, 0x0001, 1, proxy)\n    \n    class EmrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    EMR\", \"Event mask register (EXTI_EMR)\", address + 0x0004, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.mr0 = Field(\"mr0\", \"Event Mask on line 0\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.mr1 = Field(\"mr1\", \"\
    Event Mask on line 1\", self._address, 1, 0x0001, 1, proxy)\n            self.mr2\
    \ = Field(\"mr2\", \"Event Mask on line 2\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.mr3 = Field(\"mr3\", \"Event Mask on line 3\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.mr4 = Field(\"mr4\", \"Event Mask on\
    \ line 4\", self._address, 4, 0x0001, 1, proxy)\n            self.mr5 = Field(\"\
    mr5\", \"Event Mask on line 5\", self._address, 5, 0x0001, 1, proxy)\n       \
    \     self.mr6 = Field(\"mr6\", \"Event Mask on line 6\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.mr7 = Field(\"mr7\", \"Event Mask on line 7\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.mr8 = Field(\"mr8\", \"Event Mask on\
    \ line 8\", self._address, 8, 0x0001, 1, proxy)\n            self.mr9 = Field(\"\
    mr9\", \"Event Mask on line 9\", self._address, 9, 0x0001, 1, proxy)\n       \
    \     self.mr10 = Field(\"mr10\", \"Event Mask on line 10\", self._address, 10,\
    \ 0x0001, 1, proxy)\n            self.mr11 = Field(\"mr11\", \"Event Mask on line\
    \ 11\", self._address, 11, 0x0001, 1, proxy)\n            self.mr12 = Field(\"\
    mr12\", \"Event Mask on line 12\", self._address, 12, 0x0001, 1, proxy)\n    \
    \        self.mr13 = Field(\"mr13\", \"Event Mask on line 13\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.mr14 = Field(\"mr14\", \"Event Mask\
    \ on line 14\", self._address, 14, 0x0001, 1, proxy)\n            self.mr15 =\
    \ Field(\"mr15\", \"Event Mask on line 15\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.mr16 = Field(\"mr16\", \"Event Mask on line 16\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.mr17 = Field(\"mr17\", \"Event Mask\
    \ on line 17\", self._address, 17, 0x0001, 1, proxy)\n            self.mr18 =\
    \ Field(\"mr18\", \"Event Mask on line 18\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.mr19 = Field(\"mr19\", \"Event Mask on line 19\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.mr20 = Field(\"mr20\", \"Event Mask\
    \ on line 20\", self._address, 20, 0x0001, 1, proxy)\n            self.mr21 =\
    \ Field(\"mr21\", \"Event Mask on line 21\", self._address, 21, 0x0001, 1, proxy)\n\
    \            self.mr22 = Field(\"mr22\", \"Event Mask on line 22\", self._address,\
    \ 22, 0x0001, 1, proxy)\n    \n    class RtsrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"RTSR\", \"Rising\
    \ Trigger selection register\n              (EXTI_RTSR)\", address + 0x0008, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.tr0 = Field(\"tr0\", \"Rising\
    \ trigger event configuration of\n                          line 0\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.tr1 = Field(\"tr1\", \"Rising trigger\
    \ event configuration of\n                          line 1\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.tr2 = Field(\"tr2\", \"Rising trigger event\
    \ configuration of\n                          line 2\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.tr3 = Field(\"tr3\", \"Rising trigger event configuration\
    \ of\n                          line 3\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.tr4 = Field(\"tr4\", \"Rising trigger event configuration of\n\
    \                          line 4\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.tr5 = Field(\"tr5\", \"Rising trigger event configuration of\n\
    \                          line 5\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.tr6 = Field(\"tr6\", \"Rising trigger event configuration of\n\
    \                          line 6\", self._address, 6, 0x0001, 1, proxy)\n   \
    \         self.tr7 = Field(\"tr7\", \"Rising trigger event configuration of\n\
    \                          line 7\", self._address, 7, 0x0001, 1, proxy)\n   \
    \         self.tr8 = Field(\"tr8\", \"Rising trigger event configuration of\n\
    \                          line 8\", self._address, 8, 0x0001, 1, proxy)\n   \
    \         self.tr9 = Field(\"tr9\", \"Rising trigger event configuration of\n\
    \                          line 9\", self._address, 9, 0x0001, 1, proxy)\n   \
    \         self.tr10 = Field(\"tr10\", \"Rising trigger event configuration of\n\
    \                          line 10\", self._address, 10, 0x0001, 1, proxy)\n \
    \           self.tr11 = Field(\"tr11\", \"Rising trigger event configuration of\n\
    \                          line 11\", self._address, 11, 0x0001, 1, proxy)\n \
    \           self.tr12 = Field(\"tr12\", \"Rising trigger event configuration of\n\
    \                          line 12\", self._address, 12, 0x0001, 1, proxy)\n \
    \           self.tr13 = Field(\"tr13\", \"Rising trigger event configuration of\n\
    \                          line 13\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.tr14 = Field(\"tr14\", \"Rising trigger event configuration of\n\
    \                          line 14\", self._address, 14, 0x0001, 1, proxy)\n \
    \           self.tr15 = Field(\"tr15\", \"Rising trigger event configuration of\n\
    \                          line 15\", self._address, 15, 0x0001, 1, proxy)\n \
    \           self.tr16 = Field(\"tr16\", \"Rising trigger event configuration of\n\
    \                          line 16\", self._address, 16, 0x0001, 1, proxy)\n \
    \           self.tr17 = Field(\"tr17\", \"Rising trigger event configuration of\n\
    \                          line 17\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.tr18 = Field(\"tr18\", \"Rising trigger event configuration of\n\
    \                          line 18\", self._address, 18, 0x0001, 1, proxy)\n \
    \           self.tr19 = Field(\"tr19\", \"Rising trigger event configuration of\n\
    \                          line 19\", self._address, 19, 0x0001, 1, proxy)\n \
    \           self.tr20 = Field(\"tr20\", \"Rising trigger event configuration of\n\
    \                          line 20\", self._address, 20, 0x0001, 1, proxy)\n \
    \           self.tr21 = Field(\"tr21\", \"Rising trigger event configuration of\n\
    \                          line 21\", self._address, 21, 0x0001, 1, proxy)\n \
    \           self.tr22 = Field(\"tr22\", \"Rising trigger event configuration of\n\
    \                          line 22\", self._address, 22, 0x0001, 1, proxy)\n \
    \   \n    class FtsrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FTSR\", \"Falling Trigger selection register\n\
    \              (EXTI_FTSR)\", address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.tr0 = Field(\"tr0\", \"Falling trigger event configuration of\n\
    \                          line 0\", self._address, 0, 0x0001, 1, proxy)\n   \
    \         self.tr1 = Field(\"tr1\", \"Falling trigger event configuration of\n\
    \                          line 1\", self._address, 1, 0x0001, 1, proxy)\n   \
    \         self.tr2 = Field(\"tr2\", \"Falling trigger event configuration of\n\
    \                          line 2\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.tr3 = Field(\"tr3\", \"Falling trigger event configuration of\n\
    \                          line 3\", self._address, 3, 0x0001, 1, proxy)\n   \
    \         self.tr4 = Field(\"tr4\", \"Falling trigger event configuration of\n\
    \                          line 4\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.tr5 = Field(\"tr5\", \"Falling trigger event configuration of\n\
    \                          line 5\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.tr6 = Field(\"tr6\", \"Falling trigger event configuration of\n\
    \                          line 6\", self._address, 6, 0x0001, 1, proxy)\n   \
    \         self.tr7 = Field(\"tr7\", \"Falling trigger event configuration of\n\
    \                          line 7\", self._address, 7, 0x0001, 1, proxy)\n   \
    \         self.tr8 = Field(\"tr8\", \"Falling trigger event configuration of\n\
    \                          line 8\", self._address, 8, 0x0001, 1, proxy)\n   \
    \         self.tr9 = Field(\"tr9\", \"Falling trigger event configuration of\n\
    \                          line 9\", self._address, 9, 0x0001, 1, proxy)\n   \
    \         self.tr10 = Field(\"tr10\", \"Falling trigger event configuration of\n\
    \                          line 10\", self._address, 10, 0x0001, 1, proxy)\n \
    \           self.tr11 = Field(\"tr11\", \"Falling trigger event configuration\
    \ of\n                          line 11\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.tr12 = Field(\"tr12\", \"Falling trigger event configuration\
    \ of\n                          line 12\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.tr13 = Field(\"tr13\", \"Falling trigger event configuration\
    \ of\n                          line 13\", self._address, 13, 0x0001, 1, proxy)\n\
    \            self.tr14 = Field(\"tr14\", \"Falling trigger event configuration\
    \ of\n                          line 14\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.tr15 = Field(\"tr15\", \"Falling trigger event configuration\
    \ of\n                          line 15\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.tr16 = Field(\"tr16\", \"Falling trigger event configuration\
    \ of\n                          line 16\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.tr17 = Field(\"tr17\", \"Falling trigger event configuration\
    \ of\n                          line 17\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.tr18 = Field(\"tr18\", \"Falling trigger event configuration\
    \ of\n                          line 18\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.tr19 = Field(\"tr19\", \"Falling trigger event configuration\
    \ of\n                          line 19\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.tr20 = Field(\"tr20\", \"Falling trigger event configuration\
    \ of\n                          line 20\", self._address, 20, 0x0001, 1, proxy)\n\
    \            self.tr21 = Field(\"tr21\", \"Falling trigger event configuration\
    \ of\n                          line 21\", self._address, 21, 0x0001, 1, proxy)\n\
    \            self.tr22 = Field(\"tr22\", \"Falling trigger event configuration\
    \ of\n                          line 22\", self._address, 22, 0x0001, 1, proxy)\n\
    \    \n    class SwierRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"SWIER\", \"Software interrupt event\
    \ register\n              (EXTI_SWIER)\", address + 0x0010, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.swier0 = Field(\"swier0\", \"Software Interrupt\
    \ on line\n                          0\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.swier1 = Field(\"swier1\", \"Software Interrupt on line\n  \
    \                        1\", self._address, 1, 0x0001, 1, proxy)\n          \
    \  self.swier2 = Field(\"swier2\", \"Software Interrupt on line\n            \
    \              2\", self._address, 2, 0x0001, 1, proxy)\n            self.swier3\
    \ = Field(\"swier3\", \"Software Interrupt on line\n                         \
    \ 3\", self._address, 3, 0x0001, 1, proxy)\n            self.swier4 = Field(\"\
    swier4\", \"Software Interrupt on line\n                          4\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.swier5 = Field(\"swier5\", \"Software\
    \ Interrupt on line\n                          5\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.swier6 = Field(\"swier6\", \"Software Interrupt\
    \ on line\n                          6\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.swier7 = Field(\"swier7\", \"Software Interrupt on line\n  \
    \                        7\", self._address, 7, 0x0001, 1, proxy)\n          \
    \  self.swier8 = Field(\"swier8\", \"Software Interrupt on line\n            \
    \              8\", self._address, 8, 0x0001, 1, proxy)\n            self.swier9\
    \ = Field(\"swier9\", \"Software Interrupt on line\n                         \
    \ 9\", self._address, 9, 0x0001, 1, proxy)\n            self.swier10 = Field(\"\
    swier10\", \"Software Interrupt on line\n                          10\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.swier11 = Field(\"swier11\", \"Software\
    \ Interrupt on line\n                          11\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.swier12 = Field(\"swier12\", \"Software Interrupt\
    \ on line\n                          12\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.swier13 = Field(\"swier13\", \"Software Interrupt on line\n\
    \                          13\", self._address, 13, 0x0001, 1, proxy)\n      \
    \      self.swier14 = Field(\"swier14\", \"Software Interrupt on line\n      \
    \                    14\", self._address, 14, 0x0001, 1, proxy)\n            self.swier15\
    \ = Field(\"swier15\", \"Software Interrupt on line\n                        \
    \  15\", self._address, 15, 0x0001, 1, proxy)\n            self.swier16 = Field(\"\
    swier16\", \"Software Interrupt on line\n                          16\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.swier17 = Field(\"swier17\", \"Software\
    \ Interrupt on line\n                          17\", self._address, 17, 0x0001,\
    \ 1, proxy)\n            self.swier18 = Field(\"swier18\", \"Software Interrupt\
    \ on line\n                          18\", self._address, 18, 0x0001, 1, proxy)\n\
    \            self.swier19 = Field(\"swier19\", \"Software Interrupt on line\n\
    \                          19\", self._address, 19, 0x0001, 1, proxy)\n      \
    \      self.swier20 = Field(\"swier20\", \"Software Interrupt on line\n      \
    \                    20\", self._address, 20, 0x0001, 1, proxy)\n            self.swier21\
    \ = Field(\"swier21\", \"Software Interrupt on line\n                        \
    \  21\", self._address, 21, 0x0001, 1, proxy)\n            self.swier22 = Field(\"\
    swier22\", \"Software Interrupt on line\n                          22\", self._address,\
    \ 22, 0x0001, 1, proxy)\n    \n    class PrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PR\", \"Pending register (EXTI_PR)\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.pr0 =\
    \ Field(\"pr0\", \"Pending bit 0\", self._address, 0, 0x0001, 1, proxy)\n    \
    \        self.pr1 = Field(\"pr1\", \"Pending bit 1\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.pr2 = Field(\"pr2\", \"Pending bit 2\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.pr3 = Field(\"pr3\", \"Pending bit 3\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.pr4 = Field(\"pr4\", \"\
    Pending bit 4\", self._address, 4, 0x0001, 1, proxy)\n            self.pr5 = Field(\"\
    pr5\", \"Pending bit 5\", self._address, 5, 0x0001, 1, proxy)\n            self.pr6\
    \ = Field(\"pr6\", \"Pending bit 6\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.pr7 = Field(\"pr7\", \"Pending bit 7\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.pr8 = Field(\"pr8\", \"Pending bit 8\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.pr9 = Field(\"pr9\", \"Pending bit 9\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.pr10 = Field(\"pr10\"\
    , \"Pending bit 10\", self._address, 10, 0x0001, 1, proxy)\n            self.pr11\
    \ = Field(\"pr11\", \"Pending bit 11\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.pr12 = Field(\"pr12\", \"Pending bit 12\", self._address, 12,\
    \ 0x0001, 1, proxy)\n            self.pr13 = Field(\"pr13\", \"Pending bit 13\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.pr14 = Field(\"pr14\"\
    , \"Pending bit 14\", self._address, 14, 0x0001, 1, proxy)\n            self.pr15\
    \ = Field(\"pr15\", \"Pending bit 15\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.pr16 = Field(\"pr16\", \"Pending bit 16\", self._address, 16,\
    \ 0x0001, 1, proxy)\n            self.pr17 = Field(\"pr17\", \"Pending bit 17\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.pr18 = Field(\"pr18\"\
    , \"Pending bit 18\", self._address, 18, 0x0001, 1, proxy)\n            self.pr19\
    \ = Field(\"pr19\", \"Pending bit 19\", self._address, 19, 0x0001, 1, proxy)\n\
    \            self.pr20 = Field(\"pr20\", \"Pending bit 20\", self._address, 20,\
    \ 0x0001, 1, proxy)\n            self.pr21 = Field(\"pr21\", \"Pending bit 21\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.pr22 = Field(\"pr22\"\
    , \"Pending bit 22\", self._address, 22, 0x0001, 1, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"exti\", \"External interrupt/event\n   \
    \   controller\", 0x40013C00)\n        self.imr = self.ImrRegister(self.address,\
    \ proxy)\n        self.emr = self.EmrRegister(self.address, proxy)\n        self.rtsr\
    \ = self.RtsrRegister(self.address, proxy)\n        self.ftsr = self.FtsrRegister(self.address,\
    \ proxy)\n        self.swier = self.SwierRegister(self.address, proxy)\n     \
    \   self.pr = self.PrRegister(self.address, proxy)\n"
  name: EXTI
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_hs_global(Peripheral):\n\
    \    class Otg_hs_gotgctlRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_GOTGCTL\", \"OTG_HS control and\
    \ status\n              register\", address + 0x0000, 32, \"\", 0x0800, proxy)\n\
    \            self.srqscs = Field(\"srqscs\", \"Session request success\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.srq = Field(\"srq\", \"Session request\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.hngscs = Field(\"hngscs\"\
    , \"Host negotiation success\", self._address, 8, 0x0001, 1, proxy)\n        \
    \    self.hnprq = Field(\"hnprq\", \"HNP request\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.hshnpen = Field(\"hshnpen\", \"Host set HNP enable\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.dhnpen = Field(\"dhnpen\"\
    , \"Device HNP enabled\", self._address, 11, 0x0001, 1, proxy)\n            self.cidsts\
    \ = Field(\"cidsts\", \"Connector ID status\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.dbct = Field(\"dbct\", \"Long/short debounce time\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.asvld = Field(\"asvld\", \"A-session\
    \ valid\", self._address, 18, 0x0001, 1, proxy)\n            self.bsvld = Field(\"\
    bsvld\", \"B-session valid\", self._address, 19, 0x0001, 1, proxy)\n    \n   \
    \ class Otg_hs_gotgintRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_GOTGINT\", \"OTG_HS interrupt\
    \ register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.sedet = Field(\"sedet\", \"Session end detected\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.srsschg = Field(\"srsschg\", \"Session request\
    \ success status\n                          change\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.hnsschg = Field(\"hnsschg\", \"Host negotiation\
    \ success status\n                          change\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.hngdet = Field(\"hngdet\", \"Host negotiation detected\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.adtochg = Field(\"adtochg\"\
    , \"A-device timeout change\", self._address, 18, 0x0001, 1, proxy)\n        \
    \    self.dbcdne = Field(\"dbcdne\", \"Debounce done\", self._address, 19, 0x0001,\
    \ 1, proxy)\n    \n    class Otg_hs_gahbcfgRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_GAHBCFG\", \"OTG_HS\
    \ AHB configuration\n              register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.gint = Field(\"gint\", \"Global interrupt mask\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.hbstlen = Field(\"hbstlen\"\
    , \"Burst length/type\", self._address, 1, 0x000F, 4, proxy)\n            self.dmaen\
    \ = Field(\"dmaen\", \"DMA enable\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.txfelvl = Field(\"txfelvl\", \"TxFIFO empty level\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.ptxfelvl = Field(\"ptxfelvl\", \"Periodic\
    \ TxFIFO empty\n                          level\", self._address, 8, 0x0001, 1,\
    \ proxy)\n    \n    class Otg_hs_gusbcfgRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_GUSBCFG\", \"OTG_HS\
    \ USB configuration\n              register\", address + 0x000C, 32, \"\", 0x0A00,\
    \ proxy)\n            self.tocal = Field(\"tocal\", \"FS timeout calibration\"\
    , self._address, 0, 0x0007, 3, proxy)\n            self.physel = Field(\"physel\"\
    , \"USB 2.0 high-speed ULPI PHY or USB 1.1\n                          full-speed\
    \ serial transceiver select\", self._address, 6, 0x0001, 1, proxy)\n         \
    \   self.srpcap = Field(\"srpcap\", \"SRP-capable\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.hnpcap = Field(\"hnpcap\", \"HNP-capable\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.trdt = Field(\"trdt\", \"USB turnaround\
    \ time\", self._address, 10, 0x000F, 4, proxy)\n            self.phylpcs = Field(\"\
    phylpcs\", \"PHY Low-power clock select\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.ulpifsls = Field(\"ulpifsls\", \"ULPI FS/LS select\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.ulpiar = Field(\"ulpiar\", \"ULPI Auto-resume\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.ulpicsm = Field(\"ulpicsm\"\
    , \"ULPI Clock SuspendM\", self._address, 19, 0x0001, 1, proxy)\n            self.ulpievbusd\
    \ = Field(\"ulpievbusd\", \"ULPI External VBUS Drive\", self._address, 20, 0x0001,\
    \ 1, proxy)\n            self.ulpievbusi = Field(\"ulpievbusi\", \"ULPI external\
    \ VBUS\n                          indicator\", self._address, 21, 0x0001, 1, proxy)\n\
    \            self.tsdps = Field(\"tsdps\", \"TermSel DLine pulsing\n         \
    \                 selection\", self._address, 22, 0x0001, 1, proxy)\n        \
    \    self.pcci = Field(\"pcci\", \"Indicator complement\", self._address, 23,\
    \ 0x0001, 1, proxy)\n            self.ptci = Field(\"ptci\", \"Indicator pass\
    \ through\", self._address, 24, 0x0001, 1, proxy)\n            self.ulpiipd =\
    \ Field(\"ulpiipd\", \"ULPI interface protect\n                          disable\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.fhmod = Field(\"fhmod\"\
    , \"Forced host mode\", self._address, 29, 0x0001, 1, proxy)\n            self.fdmod\
    \ = Field(\"fdmod\", \"Forced peripheral mode\", self._address, 30, 0x0001, 1,\
    \ proxy)\n            self.ctxpkt = Field(\"ctxpkt\", \"Corrupt Tx packet\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_grstctlRegister(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_GRSTCTL\"\
    , \"OTG_HS reset register\", address + 0x0010, 32, \"\", 0x20000000, proxy)\n\
    \            self.csrst = Field(\"csrst\", \"Core soft reset\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.hsrst = Field(\"hsrst\", \"HCLK soft\
    \ reset\", self._address, 1, 0x0001, 1, proxy)\n            self.fcrst = Field(\"\
    fcrst\", \"Host frame counter reset\", self._address, 2, 0x0001, 1, proxy)\n \
    \           self.rxfflsh = Field(\"rxfflsh\", \"RxFIFO flush\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.txfflsh = Field(\"txfflsh\", \"TxFIFO\
    \ flush\", self._address, 5, 0x0001, 1, proxy)\n            self.txfnum = Field(\"\
    txfnum\", \"TxFIFO number\", self._address, 6, 0x001F, 5, proxy)\n           \
    \ self.dmareq = Field(\"dmareq\", \"DMA request signal\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.ahbidl = Field(\"ahbidl\", \"AHB master idle\",\
    \ self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_gintstsRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_GINTSTS\", \"OTG_HS core interrupt register\", address + 0x0014, 32, \"\
    \", 0x4000020, proxy)\n            self.cmod = Field(\"cmod\", \"Current mode\
    \ of operation\", self._address, 0, 0x0001, 1, proxy)\n            self.mmis =\
    \ Field(\"mmis\", \"Mode mismatch interrupt\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.otgint = Field(\"otgint\", \"OTG interrupt\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.sof = Field(\"sof\", \"Start of frame\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.rxflvl = Field(\"rxflvl\"\
    , \"RxFIFO nonempty\", self._address, 4, 0x0001, 1, proxy)\n            self.nptxfe\
    \ = Field(\"nptxfe\", \"Nonperiodic TxFIFO empty\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.ginakeff = Field(\"ginakeff\", \"Global IN nonperiodic\
    \ NAK\n                          effective\", self._address, 6, 0x0001, 1, proxy)\n\
    \            self.boutnakeff = Field(\"boutnakeff\", \"Global OUT NAK effective\"\
    , self._address, 7, 0x0001, 1, proxy)\n            self.esusp = Field(\"esusp\"\
    , \"Early suspend\", self._address, 10, 0x0001, 1, proxy)\n            self.usbsusp\
    \ = Field(\"usbsusp\", \"USB suspend\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.usbrst = Field(\"usbrst\", \"USB reset\", self._address, 12,\
    \ 0x0001, 1, proxy)\n            self.enumdne = Field(\"enumdne\", \"Enumeration\
    \ done\", self._address, 13, 0x0001, 1, proxy)\n            self.isoodrp = Field(\"\
    isoodrp\", \"Isochronous OUT packet dropped\n                          interrupt\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.eopf = Field(\"eopf\"\
    , \"End of periodic frame\n                          interrupt\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.iepint = Field(\"iepint\", \"IN endpoint\
    \ interrupt\", self._address, 18, 0x0001, 1, proxy)\n            self.oepint =\
    \ Field(\"oepint\", \"OUT endpoint interrupt\", self._address, 19, 0x0001, 1,\
    \ proxy)\n            self.iisoixfr = Field(\"iisoixfr\", \"Incomplete isochronous\
    \ IN\n                          transfer\", self._address, 20, 0x0001, 1, proxy)\n\
    \            self.pxfr_incompisoout = Field(\"pxfr_incompisoout\", \"Incomplete\
    \ periodic\n                          transfer\", self._address, 21, 0x0001, 1,\
    \ proxy)\n            self.datafsusp = Field(\"datafsusp\", \"Data fetch suspended\"\
    , self._address, 22, 0x0001, 1, proxy)\n            self.hprtint = Field(\"hprtint\"\
    , \"Host port interrupt\", self._address, 24, 0x0001, 1, proxy)\n            self.hcint\
    \ = Field(\"hcint\", \"Host channels interrupt\", self._address, 25, 0x0001, 1,\
    \ proxy)\n            self.ptxfe = Field(\"ptxfe\", \"Periodic TxFIFO empty\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.cidschg = Field(\"cidschg\"\
    , \"Connector ID status change\", self._address, 28, 0x0001, 1, proxy)\n     \
    \       self.discint = Field(\"discint\", \"Disconnect detected\n            \
    \              interrupt\", self._address, 29, 0x0001, 1, proxy)\n           \
    \ self.srqint = Field(\"srqint\", \"Session request/new session detected\n   \
    \                       interrupt\", self._address, 30, 0x0001, 1, proxy)\n  \
    \          self.wkuint = Field(\"wkuint\", \"Resume/remote wakeup detected\n \
    \                         interrupt\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_gintmskRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_GINTMSK\", \"OTG_HS\
    \ interrupt mask register\", address + 0x0018, 32, \"\", 0x0000, proxy)\n    \
    \        self.mmism = Field(\"mmism\", \"Mode mismatch interrupt\n           \
    \               mask\", self._address, 1, 0x0001, 1, proxy)\n            self.otgint\
    \ = Field(\"otgint\", \"OTG interrupt mask\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.sofm = Field(\"sofm\", \"Start of frame mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.rxflvlm = Field(\"rxflvlm\", \"Receive\
    \ FIFO nonempty mask\", self._address, 4, 0x0001, 1, proxy)\n            self.nptxfem\
    \ = Field(\"nptxfem\", \"Nonperiodic TxFIFO empty\n                          mask\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.ginakeffm = Field(\"ginakeffm\"\
    , \"Global nonperiodic IN NAK effective\n                          mask\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.gonakeffm = Field(\"gonakeffm\", \"Global\
    \ OUT NAK effective\n                          mask\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.esuspm = Field(\"esuspm\", \"Early suspend mask\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.usbsuspm = Field(\"usbsuspm\"\
    , \"USB suspend mask\", self._address, 11, 0x0001, 1, proxy)\n            self.usbrst\
    \ = Field(\"usbrst\", \"USB reset mask\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.enumdnem = Field(\"enumdnem\", \"Enumeration done mask\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.isoodrpm = Field(\"isoodrpm\", \"Isochronous\
    \ OUT packet dropped interrupt\n                          mask\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.eopfm = Field(\"eopfm\", \"End of periodic\
    \ frame interrupt\n                          mask\", self._address, 15, 0x0001,\
    \ 1, proxy)\n            self.epmism = Field(\"epmism\", \"Endpoint mismatch interrupt\n\
    \                          mask\", self._address, 17, 0x0001, 1, proxy)\n    \
    \        self.iepint = Field(\"iepint\", \"IN endpoints interrupt\n          \
    \                mask\", self._address, 18, 0x0001, 1, proxy)\n            self.oepint\
    \ = Field(\"oepint\", \"OUT endpoints interrupt\n                          mask\"\
    , self._address, 19, 0x0001, 1, proxy)\n            self.iisoixfrm = Field(\"\
    iisoixfrm\", \"Incomplete isochronous IN transfer\n                          mask\"\
    , self._address, 20, 0x0001, 1, proxy)\n            self.pxfrm_iisooxfrm = Field(\"\
    pxfrm_iisooxfrm\", \"Incomplete periodic transfer\n                          mask\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.fsuspm = Field(\"fsuspm\"\
    , \"Data fetch suspended mask\", self._address, 22, 0x0001, 1, proxy)\n      \
    \      self.prtim = Field(\"prtim\", \"Host port interrupt mask\", self._address,\
    \ 24, 0x0001, 1, proxy)\n            self.hcim = Field(\"hcim\", \"Host channels\
    \ interrupt\n                          mask\", self._address, 25, 0x0001, 1, proxy)\n\
    \            self.ptxfem = Field(\"ptxfem\", \"Periodic TxFIFO empty mask\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.cidschgm = Field(\"cidschgm\", \"Connector\
    \ ID status change\n                          mask\", self._address, 28, 0x0001,\
    \ 1, proxy)\n            self.discint = Field(\"discint\", \"Disconnect detected\
    \ interrupt\n                          mask\", self._address, 29, 0x0001, 1, proxy)\n\
    \            self.srqim = Field(\"srqim\", \"Session request/new session detected\n\
    \                          interrupt mask\", self._address, 30, 0x0001, 1, proxy)\n\
    \            self.wuim = Field(\"wuim\", \"Resume/remote wakeup detected interrupt\n\
    \                          mask\", self._address, 31, 0x0001, 1, proxy)\n    \n\
    \    class Otg_hs_grxstsr_hostRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_GRXSTSR_Host\", \"OTG_HS\
    \ Receive status debug read register\n              (host mode)\", address + 0x001C,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.chnum = Field(\"chnum\"\
    , \"Channel number\", self._address, 0, 0x000F, 4, proxy)\n            self.bcnt\
    \ = Field(\"bcnt\", \"Byte count\", self._address, 4, 0x07FF, 11, proxy)\n   \
    \         self.dpid = Field(\"dpid\", \"Data PID\", self._address, 15, 0x0003,\
    \ 2, proxy)\n            self.pktsts = Field(\"pktsts\", \"Packet status\", self._address,\
    \ 17, 0x000F, 4, proxy)\n    \n    class Otg_hs_grxstsp_hostRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_GRXSTSP_Host\", \"OTG_HS status read and pop register (host\n         \
    \     mode)\", address + 0x0020, 32, \"read-only\", 0x0000, proxy)\n         \
    \   self.chnum = Field(\"chnum\", \"Channel number\", self._address, 0, 0x000F,\
    \ 4, proxy)\n            self.bcnt = Field(\"bcnt\", \"Byte count\", self._address,\
    \ 4, 0x07FF, 11, proxy)\n            self.dpid = Field(\"dpid\", \"Data PID\"\
    , self._address, 15, 0x0003, 2, proxy)\n            self.pktsts = Field(\"pktsts\"\
    , \"Packet status\", self._address, 17, 0x000F, 4, proxy)\n    \n    class Otg_hs_grxfsizRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_GRXFSIZ\", \"OTG_HS Receive FIFO size\n              register\", address\
    \ + 0x0024, 32, \"read-write\", 0x0200, proxy)\n            self.rxfd = Field(\"\
    rxfd\", \"RxFIFO depth\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Otg_hs_gnptxfsiz_hostRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_GNPTXFSIZ_Host\", \"OTG_HS nonperiodic\
    \ transmit FIFO size\n              register (host mode)\", address + 0x0028,\
    \ 32, \"read-write\", 0x0200, proxy)\n            self.nptxfsa = Field(\"nptxfsa\"\
    , \"Nonperiodic transmit RAM start\n                          address\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n            self.nptxfd = Field(\"nptxfd\", \"Nonperiodic\
    \ TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_tx0fsiz_peripheralRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_TX0FSIZ_Peripheral\", \"Endpoint 0 transmit FIFO size (peripheral\n   \
    \           mode)\", address + 0x0028, 32, \"read-write\", 0x0200, proxy)\n  \
    \          self.tx0fsa = Field(\"tx0fsa\", \"Endpoint 0 transmit RAM start\n \
    \                         address\", self._address, 0, 0xFFFF, 16, proxy)\n  \
    \          self.tx0fd = Field(\"tx0fd\", \"Endpoint 0 TxFIFO depth\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_gnptxstsRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_GNPTXSTS\", \"OTG_HS nonperiodic transmit FIFO/queue\n              status\
    \ register\", address + 0x002C, 32, \"read-only\", 0x80200, proxy)\n         \
    \   self.nptxfsav = Field(\"nptxfsav\", \"Nonperiodic TxFIFO space\n         \
    \                 available\", self._address, 0, 0xFFFF, 16, proxy)\n        \
    \    self.nptqxsav = Field(\"nptqxsav\", \"Nonperiodic transmit request queue\
    \ space\n                          available\", self._address, 16, 0x00FF, 8,\
    \ proxy)\n            self.nptxqtop = Field(\"nptxqtop\", \"Top of the nonperiodic\
    \ transmit request\n                          queue\", self._address, 24, 0x007F,\
    \ 7, proxy)\n    \n    class Otg_hs_gccfgRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_GCCFG\", \"OTG_HS general\
    \ core configuration\n              register\", address + 0x0038, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.pwrdwn = Field(\"pwrdwn\", \"Power down\",\
    \ self._address, 16, 0x0001, 1, proxy)\n            self.i2cpaden = Field(\"i2cpaden\"\
    , \"Enable I2C bus connection for the\n                          external I2C\
    \ PHY interface\", self._address, 17, 0x0001, 1, proxy)\n            self.vbusasen\
    \ = Field(\"vbusasen\", \"Enable the VBUS sensing\n                          device\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.vbusbsen = Field(\"vbusbsen\"\
    , \"Enable the VBUS sensing\n                          device\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.sofouten = Field(\"sofouten\", \"SOF\
    \ output enable\", self._address, 20, 0x0001, 1, proxy)\n            self.novbussens\
    \ = Field(\"novbussens\", \"VBUS sensing disable\n                          option\"\
    , self._address, 21, 0x0001, 1, proxy)\n    \n    class Otg_hs_cidRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_CID\", \"OTG_HS core ID register\", address + 0x003C, 32, \"read-write\"\
    , 0x1200, proxy)\n            self.product_id = Field(\"product_id\", \"Product\
    \ ID field\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hptxfsizRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HPTXFSIZ\", \"OTG_HS Host periodic transmit FIFO size\n              register\"\
    , address + 0x0100, 32, \"read-write\", 0x2000600, proxy)\n            self.ptxsa\
    \ = Field(\"ptxsa\", \"Host periodic TxFIFO start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ptxfd = Field(\"ptxfd\"\
    , \"Host periodic TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf1Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF1\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x0104, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf2Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF2\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x0108, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF3\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x010C, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf4Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF4\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x0110, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf5Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF5\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x0114, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf6Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF6\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x0118, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_dieptxf7Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPTXF7\", \"OTG_HS device IN\
    \ endpoint transmit FIFO size\n              register\", address + 0x011C, 32,\
    \ \"read-write\", 0x2000400, proxy)\n            self.ineptxsa = Field(\"ineptxsa\"\
    , \"IN endpoint FIFOx transmit RAM start\n                          address\"\
    , self._address, 0, 0xFFFF, 16, proxy)\n            self.ineptxfd = Field(\"ineptxfd\"\
    , \"IN endpoint TxFIFO depth\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class Otg_hs_grxstsr_peripheralRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_GRXSTSR_Peripheral\"\
    , \"OTG_HS Receive status debug read register\n              (peripheral mode\
    \ mode)\", address + 0x001C, 32, \"read-only\", 0x0000, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 0, 0x000F, 4, proxy)\n\
    \            self.bcnt = Field(\"bcnt\", \"Byte count\", self._address, 4, 0x07FF,\
    \ 11, proxy)\n            self.dpid = Field(\"dpid\", \"Data PID\", self._address,\
    \ 15, 0x0003, 2, proxy)\n            self.pktsts = Field(\"pktsts\", \"Packet\
    \ status\", self._address, 17, 0x000F, 4, proxy)\n            self.frmnum = Field(\"\
    frmnum\", \"Frame number\", self._address, 21, 0x000F, 4, proxy)\n    \n    class\
    \ Otg_hs_grxstsp_peripheralRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_GRXSTSP_Peripheral\", \"OTG_HS\
    \ status read and pop register\n              (peripheral mode)\", address + 0x0020,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.epnum = Field(\"epnum\"\
    , \"Endpoint number\", self._address, 0, 0x000F, 4, proxy)\n            self.bcnt\
    \ = Field(\"bcnt\", \"Byte count\", self._address, 4, 0x07FF, 11, proxy)\n   \
    \         self.dpid = Field(\"dpid\", \"Data PID\", self._address, 15, 0x0003,\
    \ 2, proxy)\n            self.pktsts = Field(\"pktsts\", \"Packet status\", self._address,\
    \ 17, 0x000F, 4, proxy)\n            self.frmnum = Field(\"frmnum\", \"Frame number\"\
    , self._address, 21, 0x000F, 4, proxy)\n    \n    def __init__(self, proxy):\n\
    \        super().__init__(\"otg_hs_global\", \"USB on the go high speed\", 0x40040000)\n\
    \        self.otg_hs_gotgctl = self.Otg_hs_gotgctlRegister(self.address, proxy)\n\
    \        self.otg_hs_gotgint = self.Otg_hs_gotgintRegister(self.address, proxy)\n\
    \        self.otg_hs_gahbcfg = self.Otg_hs_gahbcfgRegister(self.address, proxy)\n\
    \        self.otg_hs_gusbcfg = self.Otg_hs_gusbcfgRegister(self.address, proxy)\n\
    \        self.otg_hs_grstctl = self.Otg_hs_grstctlRegister(self.address, proxy)\n\
    \        self.otg_hs_gintsts = self.Otg_hs_gintstsRegister(self.address, proxy)\n\
    \        self.otg_hs_gintmsk = self.Otg_hs_gintmskRegister(self.address, proxy)\n\
    \        self.otg_hs_grxstsr_host = self.Otg_hs_grxstsr_hostRegister(self.address,\
    \ proxy)\n        self.otg_hs_grxstsp_host = self.Otg_hs_grxstsp_hostRegister(self.address,\
    \ proxy)\n        self.otg_hs_grxfsiz = self.Otg_hs_grxfsizRegister(self.address,\
    \ proxy)\n        self.otg_hs_gnptxfsiz_host = self.Otg_hs_gnptxfsiz_hostRegister(self.address,\
    \ proxy)\n        self.otg_hs_tx0fsiz_peripheral = self.Otg_hs_tx0fsiz_peripheralRegister(self.address,\
    \ proxy)\n        self.otg_hs_gnptxsts = self.Otg_hs_gnptxstsRegister(self.address,\
    \ proxy)\n        self.otg_hs_gccfg = self.Otg_hs_gccfgRegister(self.address,\
    \ proxy)\n        self.otg_hs_cid = self.Otg_hs_cidRegister(self.address, proxy)\n\
    \        self.otg_hs_hptxfsiz = self.Otg_hs_hptxfsizRegister(self.address, proxy)\n\
    \        self.otg_hs_dieptxf1 = self.Otg_hs_dieptxf1Register(self.address, proxy)\n\
    \        self.otg_hs_dieptxf2 = self.Otg_hs_dieptxf2Register(self.address, proxy)\n\
    \        self.otg_hs_dieptxf3 = self.Otg_hs_dieptxf3Register(self.address, proxy)\n\
    \        self.otg_hs_dieptxf4 = self.Otg_hs_dieptxf4Register(self.address, proxy)\n\
    \        self.otg_hs_dieptxf5 = self.Otg_hs_dieptxf5Register(self.address, proxy)\n\
    \        self.otg_hs_dieptxf6 = self.Otg_hs_dieptxf6Register(self.address, proxy)\n\
    \        self.otg_hs_dieptxf7 = self.Otg_hs_dieptxf7Register(self.address, proxy)\n\
    \        self.otg_hs_grxstsr_peripheral = self.Otg_hs_grxstsr_peripheralRegister(self.address,\
    \ proxy)\n        self.otg_hs_grxstsp_peripheral = self.Otg_hs_grxstsp_peripheralRegister(self.address,\
    \ proxy)\n"
  name: OTG_HS_GLOBAL
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_hs_host(Peripheral):\n\
    \    class Otg_hs_hcfgRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_HCFG\", \"OTG_HS host configuration\n\
    \              register\", address + 0x0000, 32, \"\", 0x0000, proxy)\n      \
    \      self.fslspcs = Field(\"fslspcs\", \"FS/LS PHY clock select\", self._address,\
    \ 0, 0x0003, 2, proxy)\n            self.fslss = Field(\"fslss\", \"FS- and LS-only\
    \ support\", self._address, 2, 0x0001, 1, proxy)\n    \n    class Otg_hs_hfirRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HFIR\", \"OTG_HS Host frame interval\n              register\", address\
    \ + 0x0004, 32, \"read-write\", 0xEA60, proxy)\n            self.frivl = Field(\"\
    frivl\", \"Frame interval\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Otg_hs_hfnumRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HFNUM\", \"OTG_HS host frame number/frame\
    \ time\n              remaining register\", address + 0x0008, 32, \"read-only\"\
    , 0x3FFF, proxy)\n            self.frnum = Field(\"frnum\", \"Frame number\",\
    \ self._address, 0, 0xFFFF, 16, proxy)\n            self.ftrem = Field(\"ftrem\"\
    , \"Frame time remaining\", self._address, 16, 0xFFFF, 16, proxy)\n    \n    class\
    \ Otg_hs_hptxstsRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HPTXSTS\", \"OTG_HS_Host periodic transmit\
    \ FIFO/queue\n              status register\", address + 0x0010, 32, \"\", 0x80100,\
    \ proxy)\n            self.ptxfsavl = Field(\"ptxfsavl\", \"Periodic transmit\
    \ data FIFO space\n                          available\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n            self.ptxqsav = Field(\"ptxqsav\", \"Periodic transmit\
    \ request queue space\n                          available\", self._address, 16,\
    \ 0x00FF, 8, proxy)\n            self.ptxqtop = Field(\"ptxqtop\", \"Top of the\
    \ periodic transmit request\n                          queue\", self._address,\
    \ 24, 0x00FF, 8, proxy)\n    \n    class Otg_hs_haintRegister(Register):\n   \
    \     def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HAINT\"\
    , \"OTG_HS Host all channels interrupt\n              register\", address + 0x0014,\
    \ 32, \"read-only\", 0x0000, proxy)\n            self.haint = Field(\"haint\"\
    , \"Channel interrupts\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Otg_hs_haintmskRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HAINTMSK\", \"OTG_HS host all channels\
    \ interrupt mask\n              register\", address + 0x0018, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.haintm = Field(\"haintm\", \"Channel interrupt\
    \ mask\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_hprtRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HPRT\", \"OTG_HS host port control and status\n              register\"\
    , address + 0x0040, 32, \"\", 0x0000, proxy)\n            self.pcsts = Field(\"\
    pcsts\", \"Port connect status\", self._address, 0, 0x0001, 1, proxy)\n      \
    \      self.pcdet = Field(\"pcdet\", \"Port connect detected\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.pena = Field(\"pena\", \"Port enable\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.penchng = Field(\"penchng\"\
    , \"Port enable/disable change\", self._address, 3, 0x0001, 1, proxy)\n      \
    \      self.poca = Field(\"poca\", \"Port overcurrent active\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.pocchng = Field(\"pocchng\", \"Port overcurrent\
    \ change\", self._address, 5, 0x0001, 1, proxy)\n            self.pres = Field(\"\
    pres\", \"Port resume\", self._address, 6, 0x0001, 1, proxy)\n            self.psusp\
    \ = Field(\"psusp\", \"Port suspend\", self._address, 7, 0x0001, 1, proxy)\n \
    \           self.prst = Field(\"prst\", \"Port reset\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.plsts = Field(\"plsts\", \"Port line status\", self._address,\
    \ 10, 0x0003, 2, proxy)\n            self.ppwr = Field(\"ppwr\", \"Port power\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.ptctl = Field(\"ptctl\"\
    , \"Port test control\", self._address, 13, 0x000F, 4, proxy)\n            self.pspd\
    \ = Field(\"pspd\", \"Port speed\", self._address, 17, 0x0003, 2, proxy)\n   \
    \ \n    class Otg_hs_hcchar0Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_HCCHAR0\", \"OTG_HS host channel-0\
    \ characteristics\n              register\", address + 0x0100, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\"\
    , self._address, 0, 0x07FF, 11, proxy)\n            self.epnum = Field(\"epnum\"\
    , \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n            self.epdir\
    \ = Field(\"epdir\", \"Endpoint direction\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.lsdev = Field(\"lsdev\", \"Low-speed device\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint\
    \ type\", self._address, 18, 0x0003, 2, proxy)\n            self.mc = Field(\"\
    mc\", \"Multi Count (MC) / Error Count\n                          (EC)\", self._address,\
    \ 20, 0x0003, 2, proxy)\n            self.dad = Field(\"dad\", \"Device address\"\
    , self._address, 22, 0x007F, 7, proxy)\n            self.oddfrm = Field(\"oddfrm\"\
    , \"Odd frame\", self._address, 29, 0x0001, 1, proxy)\n            self.chdis\
    \ = Field(\"chdis\", \"Channel disable\", self._address, 30, 0x0001, 1, proxy)\n\
    \            self.chena = Field(\"chena\", \"Channel enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcchar1Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCCHAR1\"\
    , \"OTG_HS host channel-1 characteristics\n              register\", address +\
    \ 0x0120, 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.epnum = Field(\"epnum\", \"Endpoint number\", self._address, 11,\
    \ 0x000F, 4, proxy)\n            self.epdir = Field(\"epdir\", \"Endpoint direction\"\
    , self._address, 15, 0x0001, 1, proxy)\n            self.lsdev = Field(\"lsdev\"\
    , \"Low-speed device\", self._address, 17, 0x0001, 1, proxy)\n            self.eptyp\
    \ = Field(\"eptyp\", \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n\
    \            self.mc = Field(\"mc\", \"Multi Count (MC) / Error Count\n      \
    \                    (EC)\", self._address, 20, 0x0003, 2, proxy)\n          \
    \  self.dad = Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7,\
    \ proxy)\n            self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\"\
    , self._address, 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\"\
    , \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcchar2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCCHAR2\", \"OTG_HS host channel-2 characteristics\n              register\"\
    , address + 0x0140, 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz\
    \ = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n\
    \            self.epnum = Field(\"epnum\", \"Endpoint number\", self._address,\
    \ 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"epdir\", \"Endpoint\
    \ direction\", self._address, 15, 0x0001, 1, proxy)\n            self.lsdev =\
    \ Field(\"lsdev\", \"Low-speed device\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.mc = Field(\"mc\", \"Multi Count (MC) /\
    \ Error Count\n                          (EC)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 22, 0x007F, 7, proxy)\n            self.oddfrm = Field(\"oddfrm\", \"Odd frame\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\"\
    , \"Channel disable\", self._address, 30, 0x0001, 1, proxy)\n            self.chena\
    \ = Field(\"chena\", \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_hcchar3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCCHAR3\", \"OTG_HS\
    \ host channel-3 characteristics\n              register\", address + 0x0160,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n\
    \            self.epdir = Field(\"epdir\", \"Endpoint direction\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.lsdev = Field(\"lsdev\", \"Low-speed\
    \ device\", self._address, 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n           \
    \ self.mc = Field(\"mc\", \"Multi Count (MC) / Error Count\n                 \
    \         (EC)\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcchar4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCCHAR4\", \"OTG_HS host channel-4 characteristics\n              register\"\
    , address + 0x0180, 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz\
    \ = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n\
    \            self.epnum = Field(\"epnum\", \"Endpoint number\", self._address,\
    \ 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"epdir\", \"Endpoint\
    \ direction\", self._address, 15, 0x0001, 1, proxy)\n            self.lsdev =\
    \ Field(\"lsdev\", \"Low-speed device\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.mc = Field(\"mc\", \"Multi Count (MC) /\
    \ Error Count\n                          (EC)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 22, 0x007F, 7, proxy)\n            self.oddfrm = Field(\"oddfrm\", \"Odd frame\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\"\
    , \"Channel disable\", self._address, 30, 0x0001, 1, proxy)\n            self.chena\
    \ = Field(\"chena\", \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_hcchar5Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCCHAR5\", \"OTG_HS\
    \ host channel-5 characteristics\n              register\", address + 0x01A0,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n\
    \            self.epdir = Field(\"epdir\", \"Endpoint direction\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.lsdev = Field(\"lsdev\", \"Low-speed\
    \ device\", self._address, 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n           \
    \ self.mc = Field(\"mc\", \"Multi Count (MC) / Error Count\n                 \
    \         (EC)\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcchar6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCCHAR6\", \"OTG_HS host channel-6 characteristics\n              register\"\
    , address + 0x01C0, 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz\
    \ = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n\
    \            self.epnum = Field(\"epnum\", \"Endpoint number\", self._address,\
    \ 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"epdir\", \"Endpoint\
    \ direction\", self._address, 15, 0x0001, 1, proxy)\n            self.lsdev =\
    \ Field(\"lsdev\", \"Low-speed device\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.mc = Field(\"mc\", \"Multi Count (MC) /\
    \ Error Count\n                          (EC)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 22, 0x007F, 7, proxy)\n            self.oddfrm = Field(\"oddfrm\", \"Odd frame\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\"\
    , \"Channel disable\", self._address, 30, 0x0001, 1, proxy)\n            self.chena\
    \ = Field(\"chena\", \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_hcchar7Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCCHAR7\", \"OTG_HS\
    \ host channel-7 characteristics\n              register\", address + 0x01E0,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n\
    \            self.epdir = Field(\"epdir\", \"Endpoint direction\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.lsdev = Field(\"lsdev\", \"Low-speed\
    \ device\", self._address, 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n           \
    \ self.mc = Field(\"mc\", \"Multi Count (MC) / Error Count\n                 \
    \         (EC)\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcchar8Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCCHAR8\", \"OTG_HS host channel-8 characteristics\n              register\"\
    , address + 0x0200, 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz\
    \ = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n\
    \            self.epnum = Field(\"epnum\", \"Endpoint number\", self._address,\
    \ 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"epdir\", \"Endpoint\
    \ direction\", self._address, 15, 0x0001, 1, proxy)\n            self.lsdev =\
    \ Field(\"lsdev\", \"Low-speed device\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.mc = Field(\"mc\", \"Multi Count (MC) /\
    \ Error Count\n                          (EC)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 22, 0x007F, 7, proxy)\n            self.oddfrm = Field(\"oddfrm\", \"Odd frame\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\"\
    , \"Channel disable\", self._address, 30, 0x0001, 1, proxy)\n            self.chena\
    \ = Field(\"chena\", \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_hcchar9Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCCHAR9\", \"OTG_HS\
    \ host channel-9 characteristics\n              register\", address + 0x0220,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n\
    \            self.epdir = Field(\"epdir\", \"Endpoint direction\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.lsdev = Field(\"lsdev\", \"Low-speed\
    \ device\", self._address, 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n           \
    \ self.mc = Field(\"mc\", \"Multi Count (MC) / Error Count\n                 \
    \         (EC)\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcchar10Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCCHAR10\", \"OTG_HS host channel-10 characteristics\n              register\"\
    , address + 0x0240, 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz\
    \ = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n\
    \            self.epnum = Field(\"epnum\", \"Endpoint number\", self._address,\
    \ 11, 0x000F, 4, proxy)\n            self.epdir = Field(\"epdir\", \"Endpoint\
    \ direction\", self._address, 15, 0x0001, 1, proxy)\n            self.lsdev =\
    \ Field(\"lsdev\", \"Low-speed device\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.mc = Field(\"mc\", \"Multi Count (MC) /\
    \ Error Count\n                          (EC)\", self._address, 20, 0x0003, 2,\
    \ proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 22, 0x007F, 7, proxy)\n            self.oddfrm = Field(\"oddfrm\", \"Odd frame\"\
    , self._address, 29, 0x0001, 1, proxy)\n            self.chdis = Field(\"chdis\"\
    , \"Channel disable\", self._address, 30, 0x0001, 1, proxy)\n            self.chena\
    \ = Field(\"chena\", \"Channel enable\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_hcchar11Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCCHAR11\", \"OTG_HS\
    \ host channel-11 characteristics\n              register\", address + 0x0260,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.mpsiz = Field(\"mpsiz\"\
    , \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n            self.epnum\
    \ = Field(\"epnum\", \"Endpoint number\", self._address, 11, 0x000F, 4, proxy)\n\
    \            self.epdir = Field(\"epdir\", \"Endpoint direction\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.lsdev = Field(\"lsdev\", \"Low-speed\
    \ device\", self._address, 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"\
    eptyp\", \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n           \
    \ self.mc = Field(\"mc\", \"Multi Count (MC) / Error Count\n                 \
    \         (EC)\", self._address, 20, 0x0003, 2, proxy)\n            self.dad =\
    \ Field(\"dad\", \"Device address\", self._address, 22, 0x007F, 7, proxy)\n  \
    \          self.oddfrm = Field(\"oddfrm\", \"Odd frame\", self._address, 29, 0x0001,\
    \ 1, proxy)\n            self.chdis = Field(\"chdis\", \"Channel disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.chena = Field(\"chena\", \"Channel enable\"\
    , self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCSPLT0\", \"OTG_HS host channel-0 split control\n              register\"\
    , address + 0x0104, 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr\
    \ = Field(\"prtaddr\", \"Port address\", self._address, 0, 0x007F, 7, proxy)\n\
    \            self.hubaddr = Field(\"hubaddr\", \"Hub address\", self._address,\
    \ 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\", \"XACTPOS\"\
    , self._address, 14, 0x0003, 2, proxy)\n            self.complsplt = Field(\"\
    complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1, proxy)\n   \
    \         self.spliten = Field(\"spliten\", \"Split enable\", self._address, 31,\
    \ 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt1Register(Register):\n     \
    \   def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCSPLT1\"\
    , \"OTG_HS host channel-1 split control\n              register\", address + 0x0124,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr = Field(\"prtaddr\"\
    , \"Port address\", self._address, 0, 0x007F, 7, proxy)\n            self.hubaddr\
    \ = Field(\"hubaddr\", \"Hub address\", self._address, 7, 0x007F, 7, proxy)\n\
    \            self.xactpos = Field(\"xactpos\", \"XACTPOS\", self._address, 14,\
    \ 0x0003, 2, proxy)\n            self.complsplt = Field(\"complsplt\", \"Do complete\
    \ split\", self._address, 16, 0x0001, 1, proxy)\n            self.spliten = Field(\"\
    spliten\", \"Split enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcsplt2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCSPLT2\", \"OTG_HS host channel-2 split\
    \ control\n              register\", address + 0x0144, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.prtaddr = Field(\"prtaddr\", \"Port address\", self._address,\
    \ 0, 0x007F, 7, proxy)\n            self.hubaddr = Field(\"hubaddr\", \"Hub address\"\
    , self._address, 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\"\
    , \"XACTPOS\", self._address, 14, 0x0003, 2, proxy)\n            self.complsplt\
    \ = Field(\"complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.spliten = Field(\"spliten\", \"Split enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt3Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCSPLT3\"\
    , \"OTG_HS host channel-3 split control\n              register\", address + 0x0164,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr = Field(\"prtaddr\"\
    , \"Port address\", self._address, 0, 0x007F, 7, proxy)\n            self.hubaddr\
    \ = Field(\"hubaddr\", \"Hub address\", self._address, 7, 0x007F, 7, proxy)\n\
    \            self.xactpos = Field(\"xactpos\", \"XACTPOS\", self._address, 14,\
    \ 0x0003, 2, proxy)\n            self.complsplt = Field(\"complsplt\", \"Do complete\
    \ split\", self._address, 16, 0x0001, 1, proxy)\n            self.spliten = Field(\"\
    spliten\", \"Split enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcsplt4Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCSPLT4\", \"OTG_HS host channel-4 split\
    \ control\n              register\", address + 0x0184, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.prtaddr = Field(\"prtaddr\", \"Port address\", self._address,\
    \ 0, 0x007F, 7, proxy)\n            self.hubaddr = Field(\"hubaddr\", \"Hub address\"\
    , self._address, 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\"\
    , \"XACTPOS\", self._address, 14, 0x0003, 2, proxy)\n            self.complsplt\
    \ = Field(\"complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.spliten = Field(\"spliten\", \"Split enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt5Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCSPLT5\"\
    , \"OTG_HS host channel-5 split control\n              register\", address + 0x01A4,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr = Field(\"prtaddr\"\
    , \"Port address\", self._address, 0, 0x007F, 7, proxy)\n            self.hubaddr\
    \ = Field(\"hubaddr\", \"Hub address\", self._address, 7, 0x007F, 7, proxy)\n\
    \            self.xactpos = Field(\"xactpos\", \"XACTPOS\", self._address, 14,\
    \ 0x0003, 2, proxy)\n            self.complsplt = Field(\"complsplt\", \"Do complete\
    \ split\", self._address, 16, 0x0001, 1, proxy)\n            self.spliten = Field(\"\
    spliten\", \"Split enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcsplt6Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCSPLT6\", \"OTG_HS host channel-6 split\
    \ control\n              register\", address + 0x01C4, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.prtaddr = Field(\"prtaddr\", \"Port address\", self._address,\
    \ 0, 0x007F, 7, proxy)\n            self.hubaddr = Field(\"hubaddr\", \"Hub address\"\
    , self._address, 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\"\
    , \"XACTPOS\", self._address, 14, 0x0003, 2, proxy)\n            self.complsplt\
    \ = Field(\"complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.spliten = Field(\"spliten\", \"Split enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt7Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCSPLT7\"\
    , \"OTG_HS host channel-7 split control\n              register\", address + 0x01E4,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr = Field(\"prtaddr\"\
    , \"Port address\", self._address, 0, 0x007F, 7, proxy)\n            self.hubaddr\
    \ = Field(\"hubaddr\", \"Hub address\", self._address, 7, 0x007F, 7, proxy)\n\
    \            self.xactpos = Field(\"xactpos\", \"XACTPOS\", self._address, 14,\
    \ 0x0003, 2, proxy)\n            self.complsplt = Field(\"complsplt\", \"Do complete\
    \ split\", self._address, 16, 0x0001, 1, proxy)\n            self.spliten = Field(\"\
    spliten\", \"Split enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcsplt8Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCSPLT8\", \"OTG_HS host channel-8 split\
    \ control\n              register\", address + 0x0204, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.prtaddr = Field(\"prtaddr\", \"Port address\", self._address,\
    \ 0, 0x007F, 7, proxy)\n            self.hubaddr = Field(\"hubaddr\", \"Hub address\"\
    , self._address, 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\"\
    , \"XACTPOS\", self._address, 14, 0x0003, 2, proxy)\n            self.complsplt\
    \ = Field(\"complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.spliten = Field(\"spliten\", \"Split enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt9Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCSPLT9\"\
    , \"OTG_HS host channel-9 split control\n              register\", address + 0x0224,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr = Field(\"prtaddr\"\
    , \"Port address\", self._address, 0, 0x007F, 7, proxy)\n            self.hubaddr\
    \ = Field(\"hubaddr\", \"Hub address\", self._address, 7, 0x007F, 7, proxy)\n\
    \            self.xactpos = Field(\"xactpos\", \"XACTPOS\", self._address, 14,\
    \ 0x0003, 2, proxy)\n            self.complsplt = Field(\"complsplt\", \"Do complete\
    \ split\", self._address, 16, 0x0001, 1, proxy)\n            self.spliten = Field(\"\
    spliten\", \"Split enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcsplt10Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCSPLT10\", \"OTG_HS host channel-10 split\
    \ control\n              register\", address + 0x0244, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.prtaddr = Field(\"prtaddr\", \"Port address\", self._address,\
    \ 0, 0x007F, 7, proxy)\n            self.hubaddr = Field(\"hubaddr\", \"Hub address\"\
    , self._address, 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\"\
    , \"XACTPOS\", self._address, 14, 0x0003, 2, proxy)\n            self.complsplt\
    \ = Field(\"complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1,\
    \ proxy)\n            self.spliten = Field(\"spliten\", \"Split enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcsplt11Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCSPLT11\", \"OTG_HS host channel-11 split control\n              register\"\
    , address + 0x0264, 32, \"read-write\", 0x0000, proxy)\n            self.prtaddr\
    \ = Field(\"prtaddr\", \"Port address\", self._address, 0, 0x007F, 7, proxy)\n\
    \            self.hubaddr = Field(\"hubaddr\", \"Hub address\", self._address,\
    \ 7, 0x007F, 7, proxy)\n            self.xactpos = Field(\"xactpos\", \"XACTPOS\"\
    , self._address, 14, 0x0003, 2, proxy)\n            self.complsplt = Field(\"\
    complsplt\", \"Do complete split\", self._address, 16, 0x0001, 1, proxy)\n   \
    \         self.spliten = Field(\"spliten\", \"Split enable\", self._address, 31,\
    \ 0x0001, 1, proxy)\n    \n    class Otg_hs_hcint0Register(Register):\n      \
    \  def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCINT0\"\
    , \"OTG_HS host channel-11 interrupt\n              register\", address + 0x0108,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\",\
    \ \"Transfer completed\", self._address, 0, 0x0001, 1, proxy)\n            self.chh\
    \ = Field(\"chh\", \"Channel halted\", self._address, 1, 0x0001, 1, proxy)\n \
    \           self.ahberr = Field(\"ahberr\", \"AHB error\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.stall = Field(\"stall\", \"STALL response received\n\
    \                          interrupt\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.nak = Field(\"nak\", \"NAK response received\n             \
    \             interrupt\", self._address, 4, 0x0001, 1, proxy)\n            self.ack\
    \ = Field(\"ack\", \"ACK response received/transmitted\n                     \
    \     interrupt\", self._address, 5, 0x0001, 1, proxy)\n            self.nyet\
    \ = Field(\"nyet\", \"Response received\n                          interrupt\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.txerr = Field(\"txerr\"\
    , \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n            self.bberr\
    \ = Field(\"bberr\", \"Babble error\", self._address, 8, 0x0001, 1, proxy)\n \
    \           self.frmor = Field(\"frmor\", \"Frame overrun\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\", \"Data toggle error\"\
    , self._address, 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcint1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINT1\", \"OTG_HS host channel-1 interrupt\n              register\",\
    \ address + 0x0128, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.chh = Field(\"chh\", \"Channel halted\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"STALL response\
    \ received\n                          interrupt\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK response received\n    \
    \                      interrupt\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.ack = Field(\"ack\", \"ACK response received/transmitted\n     \
    \                     interrupt\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"Response received\n                    \
    \      interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT2\", \"OTG_HS host channel-2 interrupt\n\
    \              register\", address + 0x0148, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint3Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT3\", \"OTG_HS host channel-3 interrupt\n\
    \              register\", address + 0x0168, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint4Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT4\", \"OTG_HS host channel-4 interrupt\n\
    \              register\", address + 0x0188, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint5Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT5\", \"OTG_HS host channel-5 interrupt\n\
    \              register\", address + 0x01A8, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint6Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT6\", \"OTG_HS host channel-6 interrupt\n\
    \              register\", address + 0x01C8, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint7Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT7\", \"OTG_HS host channel-7 interrupt\n\
    \              register\", address + 0x01E8, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint8Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT8\", \"OTG_HS host channel-8 interrupt\n\
    \              register\", address + 0x0208, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint9Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT9\", \"OTG_HS host channel-9 interrupt\n\
    \              register\", address + 0x0228, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint10Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT10\", \"OTG_HS host channel-10 interrupt\n\
    \              register\", address + 0x0248, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcint11Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINT11\", \"OTG_HS host channel-11 interrupt\n\
    \              register\", address + 0x0268, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.xfrc = Field(\"xfrc\", \"Transfer completed\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.chh = Field(\"chh\", \"Channel halted\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\"\
    , \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n            self.stall =\
    \ Field(\"stall\", \"STALL response received\n                          interrupt\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.nak = Field(\"nak\", \"\
    NAK response received\n                          interrupt\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.ack = Field(\"ack\", \"ACK response received/transmitted\n\
    \                          interrupt\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"Response received\n               \
    \           interrupt\", self._address, 6, 0x0001, 1, proxy)\n            self.txerr\
    \ = Field(\"txerr\", \"Transaction error\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.bberr = Field(\"bberr\", \"Babble error\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.frmor = Field(\"frmor\", \"Frame overrun\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dterr = Field(\"dterr\"\
    , \"Data toggle error\", self._address, 10, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_hcintmsk0Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_HCINTMSK0\", \"OTG_HS host channel-11 interrupt\
    \ mask\n              register\", address + 0x010C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.xfrcm = Field(\"xfrcm\", \"Transfer completed mask\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.chhm = Field(\"chhm\"\
    , \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n            self.ahberr\
    \ = Field(\"ahberr\", \"AHB error\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.stallm = Field(\"stallm\", \"STALL response received interrupt\n\
    \                          mask\", self._address, 3, 0x0001, 1, proxy)\n     \
    \       self.nakm = Field(\"nakm\", \"NAK response received interrupt\n      \
    \                    mask\", self._address, 4, 0x0001, 1, proxy)\n           \
    \ self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n          \
    \                interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.nyet = Field(\"nyet\", \"response received interrupt\n          \
    \                mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txerrm\
    \ = Field(\"txerrm\", \"Transaction error mask\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error mask\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"frmorm\", \"Frame overrun\
    \ mask\", self._address, 9, 0x0001, 1, proxy)\n            self.dterrm = Field(\"\
    dterrm\", \"Data toggle error mask\", self._address, 10, 0x0001, 1, proxy)\n \
    \   \n    class Otg_hs_hcintmsk1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCINTMSK1\", \"OTG_HS\
    \ host channel-1 interrupt mask\n              register\", address + 0x012C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"xfrcm\", \"\
    Transfer completed mask\", self._address, 0, 0x0001, 1, proxy)\n            self.chhm\
    \ = Field(\"chhm\", \"Channel halted mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.ahberr = Field(\"ahberr\", \"AHB error\", self._address, 2,\
    \ 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\", \"STALL response\
    \ received interrupt\n                          mask\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response received interrupt\n\
    \                          mask\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n    \
    \                      interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK2\", \"OTG_HS host channel-2 interrupt mask\n              register\"\
    , address + 0x014C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK3\", \"OTG_HS host channel-3 interrupt mask\n              register\"\
    , address + 0x016C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK4\", \"OTG_HS host channel-4 interrupt mask\n              register\"\
    , address + 0x018C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK5\", \"OTG_HS host channel-5 interrupt mask\n              register\"\
    , address + 0x01AC, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK6\", \"OTG_HS host channel-6 interrupt mask\n              register\"\
    , address + 0x01CC, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk7Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK7\", \"OTG_HS host channel-7 interrupt mask\n              register\"\
    , address + 0x01EC, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk8Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK8\", \"OTG_HS host channel-8 interrupt mask\n              register\"\
    , address + 0x020C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk9Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK9\", \"OTG_HS host channel-9 interrupt mask\n              register\"\
    , address + 0x022C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk10Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK10\", \"OTG_HS host channel-10 interrupt mask\n              register\"\
    , address + 0x024C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hcintmsk11Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCINTMSK11\", \"OTG_HS host channel-11 interrupt mask\n              register\"\
    , address + 0x026C, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm\
    \ = Field(\"xfrcm\", \"Transfer completed mask\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.chhm = Field(\"chhm\", \"Channel halted mask\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ahberr = Field(\"ahberr\", \"AHB error\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.stallm = Field(\"stallm\"\
    , \"STALL response received interrupt\n                          mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK response\
    \ received interrupt\n                          mask\", self._address, 4, 0x0001,\
    \ 1, proxy)\n            self.ackm = Field(\"ackm\", \"ACK response received/transmitted\n\
    \                          interrupt mask\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.nyet = Field(\"nyet\", \"response received interrupt\n     \
    \                     mask\", self._address, 6, 0x0001, 1, proxy)\n          \
    \  self.txerrm = Field(\"txerrm\", \"Transaction error mask\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.bberrm = Field(\"bberrm\", \"Babble error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.frmorm = Field(\"\
    frmorm\", \"Frame overrun mask\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.dterrm = Field(\"dterrm\", \"Data toggle error mask\", self._address,\
    \ 10, 0x0001, 1, proxy)\n    \n    class Otg_hs_hctsiz0Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ0\"\
    , \"OTG_HS host channel-11 transfer size\n              register\", address +\
    \ 0x0110, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"\
    xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n         \
    \   self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF,\
    \ 10, proxy)\n            self.dpid = Field(\"dpid\", \"Data PID\", self._address,\
    \ 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_hctsiz1Register(Register):\n \
    \       def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ1\"\
    , \"OTG_HS host channel-1 transfer size\n              register\", address + 0x0130,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\"\
    , \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ2\", \"OTG_HS\
    \ host channel-2 transfer size\n              register\", address + 0x0150, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ3\", \"OTG_HS\
    \ host channel-3 transfer size\n              register\", address + 0x0170, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz4Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ4\", \"OTG_HS\
    \ host channel-4 transfer size\n              register\", address + 0x0190, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz5Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ5\", \"OTG_HS\
    \ host channel-5 transfer size\n              register\", address + 0x01B0, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz6Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ6\", \"OTG_HS\
    \ host channel-6 transfer size\n              register\", address + 0x01D0, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz7Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ7\", \"OTG_HS\
    \ host channel-7 transfer size\n              register\", address + 0x01F0, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz8Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ8\", \"OTG_HS\
    \ host channel-8 transfer size\n              register\", address + 0x0210, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz9Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ9\", \"OTG_HS\
    \ host channel-9 transfer size\n              register\", address + 0x0230, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz10Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ10\", \"OTG_HS\
    \ host channel-10 transfer size\n              register\", address + 0x0250, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hctsiz11Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCTSIZ11\", \"OTG_HS\
    \ host channel-11 transfer size\n              register\", address + 0x0270, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.dpid = Field(\"dpid\", \"Data PID\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_hcdma0Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCDMA0\", \"OTG_HS host\
    \ channel-0 DMA address\n              register\", address + 0x0114, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\", \"DMA address\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hcdma1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCDMA1\", \"OTG_HS host channel-1 DMA address\n              register\"\
    , address + 0x0134, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_hcdma2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCDMA2\", \"OTG_HS host\
    \ channel-2 DMA address\n              register\", address + 0x0154, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\", \"DMA address\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hcdma3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCDMA3\", \"OTG_HS host channel-3 DMA address\n              register\"\
    , address + 0x0174, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_hcdma4Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCDMA4\", \"OTG_HS host\
    \ channel-4 DMA address\n              register\", address + 0x0194, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\", \"DMA address\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hcdma5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCDMA5\", \"OTG_HS host channel-5 DMA address\n              register\"\
    , address + 0x01B4, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_hcdma6Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCDMA6\", \"OTG_HS host\
    \ channel-6 DMA address\n              register\", address + 0x01D4, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\", \"DMA address\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hcdma7Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCDMA7\", \"OTG_HS host channel-7 DMA address\n              register\"\
    , address + 0x01F4, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_hcdma8Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCDMA8\", \"OTG_HS host\
    \ channel-8 DMA address\n              register\", address + 0x0214, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\", \"DMA address\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hcdma9Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCDMA9\", \"OTG_HS host channel-9 DMA address\n              register\"\
    , address + 0x0234, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_hcdma10Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_HCDMA10\", \"OTG_HS\
    \ host channel-10 DMA address\n              register\", address + 0x0254, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\"\
    , \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_hcdma11Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_HCDMA11\", \"OTG_HS host channel-11 DMA address\n              register\"\
    , address + 0x0274, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"otg_hs_host\"\
    , \"USB on the go high speed\", 0x40040400)\n        self.otg_hs_hcfg = self.Otg_hs_hcfgRegister(self.address,\
    \ proxy)\n        self.otg_hs_hfir = self.Otg_hs_hfirRegister(self.address, proxy)\n\
    \        self.otg_hs_hfnum = self.Otg_hs_hfnumRegister(self.address, proxy)\n\
    \        self.otg_hs_hptxsts = self.Otg_hs_hptxstsRegister(self.address, proxy)\n\
    \        self.otg_hs_haint = self.Otg_hs_haintRegister(self.address, proxy)\n\
    \        self.otg_hs_haintmsk = self.Otg_hs_haintmskRegister(self.address, proxy)\n\
    \        self.otg_hs_hprt = self.Otg_hs_hprtRegister(self.address, proxy)\n  \
    \      self.otg_hs_hcchar0 = self.Otg_hs_hcchar0Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar1 = self.Otg_hs_hcchar1Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar2 = self.Otg_hs_hcchar2Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar3 = self.Otg_hs_hcchar3Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar4 = self.Otg_hs_hcchar4Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar5 = self.Otg_hs_hcchar5Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar6 = self.Otg_hs_hcchar6Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar7 = self.Otg_hs_hcchar7Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar8 = self.Otg_hs_hcchar8Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar9 = self.Otg_hs_hcchar9Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar10 = self.Otg_hs_hcchar10Register(self.address, proxy)\n\
    \        self.otg_hs_hcchar11 = self.Otg_hs_hcchar11Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt0 = self.Otg_hs_hcsplt0Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt1 = self.Otg_hs_hcsplt1Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt2 = self.Otg_hs_hcsplt2Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt3 = self.Otg_hs_hcsplt3Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt4 = self.Otg_hs_hcsplt4Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt5 = self.Otg_hs_hcsplt5Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt6 = self.Otg_hs_hcsplt6Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt7 = self.Otg_hs_hcsplt7Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt8 = self.Otg_hs_hcsplt8Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt9 = self.Otg_hs_hcsplt9Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt10 = self.Otg_hs_hcsplt10Register(self.address, proxy)\n\
    \        self.otg_hs_hcsplt11 = self.Otg_hs_hcsplt11Register(self.address, proxy)\n\
    \        self.otg_hs_hcint0 = self.Otg_hs_hcint0Register(self.address, proxy)\n\
    \        self.otg_hs_hcint1 = self.Otg_hs_hcint1Register(self.address, proxy)\n\
    \        self.otg_hs_hcint2 = self.Otg_hs_hcint2Register(self.address, proxy)\n\
    \        self.otg_hs_hcint3 = self.Otg_hs_hcint3Register(self.address, proxy)\n\
    \        self.otg_hs_hcint4 = self.Otg_hs_hcint4Register(self.address, proxy)\n\
    \        self.otg_hs_hcint5 = self.Otg_hs_hcint5Register(self.address, proxy)\n\
    \        self.otg_hs_hcint6 = self.Otg_hs_hcint6Register(self.address, proxy)\n\
    \        self.otg_hs_hcint7 = self.Otg_hs_hcint7Register(self.address, proxy)\n\
    \        self.otg_hs_hcint8 = self.Otg_hs_hcint8Register(self.address, proxy)\n\
    \        self.otg_hs_hcint9 = self.Otg_hs_hcint9Register(self.address, proxy)\n\
    \        self.otg_hs_hcint10 = self.Otg_hs_hcint10Register(self.address, proxy)\n\
    \        self.otg_hs_hcint11 = self.Otg_hs_hcint11Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk0 = self.Otg_hs_hcintmsk0Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk1 = self.Otg_hs_hcintmsk1Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk2 = self.Otg_hs_hcintmsk2Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk3 = self.Otg_hs_hcintmsk3Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk4 = self.Otg_hs_hcintmsk4Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk5 = self.Otg_hs_hcintmsk5Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk6 = self.Otg_hs_hcintmsk6Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk7 = self.Otg_hs_hcintmsk7Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk8 = self.Otg_hs_hcintmsk8Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk9 = self.Otg_hs_hcintmsk9Register(self.address, proxy)\n\
    \        self.otg_hs_hcintmsk10 = self.Otg_hs_hcintmsk10Register(self.address,\
    \ proxy)\n        self.otg_hs_hcintmsk11 = self.Otg_hs_hcintmsk11Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz0 = self.Otg_hs_hctsiz0Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz1 = self.Otg_hs_hctsiz1Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz2 = self.Otg_hs_hctsiz2Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz3 = self.Otg_hs_hctsiz3Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz4 = self.Otg_hs_hctsiz4Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz5 = self.Otg_hs_hctsiz5Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz6 = self.Otg_hs_hctsiz6Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz7 = self.Otg_hs_hctsiz7Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz8 = self.Otg_hs_hctsiz8Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz9 = self.Otg_hs_hctsiz9Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz10 = self.Otg_hs_hctsiz10Register(self.address,\
    \ proxy)\n        self.otg_hs_hctsiz11 = self.Otg_hs_hctsiz11Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma0 = self.Otg_hs_hcdma0Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma1 = self.Otg_hs_hcdma1Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma2 = self.Otg_hs_hcdma2Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma3 = self.Otg_hs_hcdma3Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma4 = self.Otg_hs_hcdma4Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma5 = self.Otg_hs_hcdma5Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma6 = self.Otg_hs_hcdma6Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma7 = self.Otg_hs_hcdma7Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma8 = self.Otg_hs_hcdma8Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma9 = self.Otg_hs_hcdma9Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma10 = self.Otg_hs_hcdma10Register(self.address,\
    \ proxy)\n        self.otg_hs_hcdma11 = self.Otg_hs_hcdma11Register(self.address,\
    \ proxy)\n"
  name: OTG_HS_HOST
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_hs_device(Peripheral):\n\
    \    class Otg_hs_dcfgRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DCFG\", \"OTG_HS device configuration\n\
    \              register\", address + 0x0000, 32, \"read-write\", 0x2200000, proxy)\n\
    \            self.dspd = Field(\"dspd\", \"Device speed\", self._address, 0, 0x0003,\
    \ 2, proxy)\n            self.nzlsohsk = Field(\"nzlsohsk\", \"Nonzero-length\
    \ status OUT\n                          handshake\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.dad = Field(\"dad\", \"Device address\", self._address,\
    \ 4, 0x007F, 7, proxy)\n            self.pfivl = Field(\"pfivl\", \"Periodic (micro)frame\n\
    \                          interval\", self._address, 11, 0x0003, 2, proxy)\n\
    \            self.perschivl = Field(\"perschivl\", \"Periodic scheduling\n   \
    \                       interval\", self._address, 24, 0x0003, 2, proxy)\n   \
    \         self.xcvrdly = Field(\"xcvrdly\", \"Transceiver delay\", self._address,\
    \ 14, 0x0001, 1, proxy)\n            self.erratim = Field(\"erratim\", \"Erratic\
    \ error interrupt\n                          mask\", self._address, 15, 0x0001,\
    \ 1, proxy)\n    \n    class Otg_hs_dctlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DCTL\", \"OTG_HS device\
    \ control register\", address + 0x0004, 32, \"\", 0x0000, proxy)\n           \
    \ self.rwusig = Field(\"rwusig\", \"Remote wakeup signaling\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.sdis = Field(\"sdis\", \"Soft disconnect\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ginsts = Field(\"ginsts\"\
    , \"Global IN NAK status\", self._address, 2, 0x0001, 1, proxy)\n            self.gonsts\
    \ = Field(\"gonsts\", \"Global OUT NAK status\", self._address, 3, 0x0001, 1,\
    \ proxy)\n            self.tctl = Field(\"tctl\", \"Test control\", self._address,\
    \ 4, 0x0007, 3, proxy)\n            self.sginak = Field(\"sginak\", \"Set global\
    \ IN NAK\", self._address, 7, 0x0001, 1, proxy)\n            self.cginak = Field(\"\
    cginak\", \"Clear global IN NAK\", self._address, 8, 0x0001, 1, proxy)\n     \
    \       self.sgonak = Field(\"sgonak\", \"Set global OUT NAK\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.cgonak = Field(\"cgonak\", \"Clear global\
    \ OUT NAK\", self._address, 10, 0x0001, 1, proxy)\n            self.poprgdne =\
    \ Field(\"poprgdne\", \"Power-on programming done\", self._address, 11, 0x0001,\
    \ 1, proxy)\n    \n    class Otg_hs_dstsRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DSTS\", \"OTG_HS device\
    \ status register\", address + 0x0008, 32, \"read-only\", 0x0010, proxy)\n   \
    \         self.suspsts = Field(\"suspsts\", \"Suspend status\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.enumspd = Field(\"enumspd\", \"Enumerated\
    \ speed\", self._address, 1, 0x0003, 2, proxy)\n            self.eerr = Field(\"\
    eerr\", \"Erratic error\", self._address, 3, 0x0001, 1, proxy)\n            self.fnsof\
    \ = Field(\"fnsof\", \"Frame number of the received\n                        \
    \  SOF\", self._address, 8, 0x3FFF, 14, proxy)\n    \n    class Otg_hs_diepmskRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPMSK\", \"OTG_HS device IN endpoint common interrupt\n             \
    \ mask register\", address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n    \
    \        self.xfrcm = Field(\"xfrcm\", \"Transfer completed interrupt\n      \
    \                    mask\", self._address, 0, 0x0001, 1, proxy)\n           \
    \ self.epdm = Field(\"epdm\", \"Endpoint disabled interrupt\n                \
    \          mask\", self._address, 1, 0x0001, 1, proxy)\n            self.tom =\
    \ Field(\"tom\", \"Timeout condition mask (nonisochronous\n                  \
    \        endpoints)\", self._address, 3, 0x0001, 1, proxy)\n            self.ittxfemsk\
    \ = Field(\"ittxfemsk\", \"IN token received when TxFIFO empty\n             \
    \             mask\", self._address, 4, 0x0001, 1, proxy)\n            self.inepnmm\
    \ = Field(\"inepnmm\", \"IN token received with EP mismatch\n                \
    \          mask\", self._address, 5, 0x0001, 1, proxy)\n            self.inepnem\
    \ = Field(\"inepnem\", \"IN endpoint NAK effective\n                         \
    \ mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txfurm = Field(\"\
    txfurm\", \"FIFO underrun mask\", self._address, 8, 0x0001, 1, proxy)\n      \
    \      self.bim = Field(\"bim\", \"BNA interrupt mask\", self._address, 9, 0x0001,\
    \ 1, proxy)\n    \n    class Otg_hs_doepmskRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DOEPMSK\", \"OTG_HS\
    \ device OUT endpoint common interrupt\n              mask register\", address\
    \ + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.xfrcm = Field(\"\
    xfrcm\", \"Transfer completed interrupt\n                          mask\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdm = Field(\"epdm\", \"Endpoint disabled\
    \ interrupt\n                          mask\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.stupm = Field(\"stupm\", \"SETUP phase done mask\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.otepdm = Field(\"otepdm\", \"OUT token\
    \ received when endpoint\n                          disabled mask\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets received\n                          mask\", self._address, 6,\
    \ 0x0001, 1, proxy)\n            self.opem = Field(\"opem\", \"OUT packet error\
    \ mask\", self._address, 8, 0x0001, 1, proxy)\n            self.boim = Field(\"\
    boim\", \"BNA interrupt mask\", self._address, 9, 0x0001, 1, proxy)\n    \n  \
    \  class Otg_hs_daintRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DAINT\", \"OTG_HS device all\
    \ endpoints interrupt\n              register\", address + 0x0018, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.iepint = Field(\"iepint\", \"IN endpoint interrupt\
    \ bits\", self._address, 0, 0xFFFF, 16, proxy)\n            self.oepint = Field(\"\
    oepint\", \"OUT endpoint interrupt\n                          bits\", self._address,\
    \ 16, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_daintmskRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DAINTMSK\", \"OTG_HS all endpoints interrupt mask\n              register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.iepm\
    \ = Field(\"iepm\", \"IN EP interrupt mask bits\", self._address, 0, 0xFFFF, 16,\
    \ proxy)\n            self.oepm = Field(\"oepm\", \"OUT EP interrupt mask bits\"\
    , self._address, 16, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_dvbusdisRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DVBUSDIS\", \"OTG_HS device VBUS discharge time\n              register\"\
    , address + 0x0028, 32, \"read-write\", 0x17D7, proxy)\n            self.vbusdt\
    \ = Field(\"vbusdt\", \"Device VBUS discharge time\", self._address, 0, 0xFFFF,\
    \ 16, proxy)\n    \n    class Otg_hs_dvbuspulseRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_DVBUSPULSE\"\
    , \"OTG_HS device VBUS pulsing time\n              register\", address + 0x002C,\
    \ 32, \"read-write\", 0x05B8, proxy)\n            self.dvbusp = Field(\"dvbusp\"\
    , \"Device VBUS pulsing time\", self._address, 0, 0x0FFF, 12, proxy)\n    \n \
    \   class Otg_hs_dthrctlRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DTHRCTL\", \"OTG_HS Device threshold\
    \ control\n              register\", address + 0x0030, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.nonisothren = Field(\"nonisothren\", \"Nonisochronous\
    \ IN endpoints threshold\n                          enable\", self._address, 0,\
    \ 0x0001, 1, proxy)\n            self.isothren = Field(\"isothren\", \"ISO IN\
    \ endpoint threshold\n                          enable\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.txthrlen = Field(\"txthrlen\", \"Transmit threshold\
    \ length\", self._address, 2, 0x01FF, 9, proxy)\n            self.rxthren = Field(\"\
    rxthren\", \"Receive threshold enable\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.rxthrlen = Field(\"rxthrlen\", \"Receive threshold length\"\
    , self._address, 17, 0x01FF, 9, proxy)\n            self.arpen = Field(\"arpen\"\
    , \"Arbiter parking enable\", self._address, 27, 0x0001, 1, proxy)\n    \n   \
    \ class Otg_hs_diepempmskRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DIEPEMPMSK\", \"OTG_HS device\
    \ IN endpoint FIFO empty\n              interrupt mask register\", address + 0x0034,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.ineptxfem = Field(\"ineptxfem\"\
    , \"IN EP Tx FIFO empty interrupt mask\n                          bits\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_deachintRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DEACHINT\", \"OTG_HS device each endpoint interrupt\n              register\"\
    , address + 0x0038, 32, \"read-write\", 0x0000, proxy)\n            self.iep1int\
    \ = Field(\"iep1int\", \"IN endpoint 1interrupt bit\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.oep1int = Field(\"oep1int\", \"OUT endpoint 1 interrupt\n\
    \                          bit\", self._address, 17, 0x0001, 1, proxy)\n    \n\
    \    class Otg_hs_deachintmskRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DEACHINTMSK\", \"OTG_HS device\
    \ each endpoint interrupt\n              register mask\", address + 0x003C, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.iep1intm = Field(\"iep1intm\"\
    , \"IN Endpoint 1 interrupt mask\n                          bit\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.oep1intm = Field(\"oep1intm\", \"OUT\
    \ Endpoint 1 interrupt mask\n                          bit\", self._address, 17,\
    \ 0x0001, 1, proxy)\n    \n    class Otg_hs_diepeachmsk1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPEACHMSK1\", \"OTG_HS device each in endpoint-1 interrupt\n        \
    \      register\", address + 0x0044, 32, \"read-write\", 0x0000, proxy)\n    \
    \        self.xfrcm = Field(\"xfrcm\", \"Transfer completed interrupt\n      \
    \                    mask\", self._address, 0, 0x0001, 1, proxy)\n           \
    \ self.epdm = Field(\"epdm\", \"Endpoint disabled interrupt\n                \
    \          mask\", self._address, 1, 0x0001, 1, proxy)\n            self.tom =\
    \ Field(\"tom\", \"Timeout condition mask (nonisochronous\n                  \
    \        endpoints)\", self._address, 3, 0x0001, 1, proxy)\n            self.ittxfemsk\
    \ = Field(\"ittxfemsk\", \"IN token received when TxFIFO empty\n             \
    \             mask\", self._address, 4, 0x0001, 1, proxy)\n            self.inepnmm\
    \ = Field(\"inepnmm\", \"IN token received with EP mismatch\n                \
    \          mask\", self._address, 5, 0x0001, 1, proxy)\n            self.inepnem\
    \ = Field(\"inepnem\", \"IN endpoint NAK effective\n                         \
    \ mask\", self._address, 6, 0x0001, 1, proxy)\n            self.txfurm = Field(\"\
    txfurm\", \"FIFO underrun mask\", self._address, 8, 0x0001, 1, proxy)\n      \
    \      self.bim = Field(\"bim\", \"BNA interrupt mask\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK interrupt mask\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepeachmsk1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPEACHMSK1\", \"OTG_HS device each OUT endpoint-1 interrupt\n       \
    \       register\", address + 0x0084, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.xfrcm = Field(\"xfrcm\", \"Transfer completed interrupt\n     \
    \                     mask\", self._address, 0, 0x0001, 1, proxy)\n          \
    \  self.epdm = Field(\"epdm\", \"Endpoint disabled interrupt\n               \
    \           mask\", self._address, 1, 0x0001, 1, proxy)\n            self.tom\
    \ = Field(\"tom\", \"Timeout condition mask\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.ittxfemsk = Field(\"ittxfemsk\", \"IN token received when TxFIFO\
    \ empty\n                          mask\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.inepnmm = Field(\"inepnmm\", \"IN token received with EP mismatch\n\
    \                          mask\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.inepnem = Field(\"inepnem\", \"IN endpoint NAK effective\n      \
    \                    mask\", self._address, 6, 0x0001, 1, proxy)\n           \
    \ self.txfurm = Field(\"txfurm\", \"OUT packet error mask\", self._address, 8,\
    \ 0x0001, 1, proxy)\n            self.bim = Field(\"bim\", \"BNA interrupt mask\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.berrm = Field(\"berrm\"\
    , \"Bubble error interrupt\n                          mask\", self._address, 12,\
    \ 0x0001, 1, proxy)\n            self.nakm = Field(\"nakm\", \"NAK interrupt mask\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.nyetm = Field(\"nyetm\"\
    , \"NYET interrupt mask\", self._address, 14, 0x0001, 1, proxy)\n    \n    class\
    \ Otg_hs_diepctl0Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_DIEPCTL0\", \"OTG device endpoint-0 control\n\
    \              register\", address + 0x0100, 32, \"\", 0x0000, proxy)\n      \
    \      self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0,\
    \ 0x07FF, 11, proxy)\n            self.usbaep = Field(\"usbaep\", \"USB active\
    \ endpoint\", self._address, 15, 0x0001, 1, proxy)\n            self.eonum_dpid\
    \ = Field(\"eonum_dpid\", \"Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.naksts = Field(\"naksts\", \"NAK status\", self._address, 17,\
    \ 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\", \"Endpoint type\"\
    , self._address, 18, 0x0003, 2, proxy)\n            self.stall = Field(\"stall\"\
    , \"STALL handshake\", self._address, 21, 0x0001, 1, proxy)\n            self.txfnum\
    \ = Field(\"txfnum\", \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n\
    \            self.cnak = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001,\
    \ 1, proxy)\n            self.snak = Field(\"snak\", \"Set NAK\", self._address,\
    \ 27, 0x0001, 1, proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\"\
    , \"Set DATA0 PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm\
    \ = Field(\"soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n\
    \            self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint\
    \ enable\", self._address, 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL1\", \"OTG device endpoint-1 control\n              register\",\
    \ address + 0x0120, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL2\", \"OTG device endpoint-2 control\n              register\",\
    \ address + 0x0140, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL3\", \"OTG device endpoint-3 control\n              register\",\
    \ address + 0x0160, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL4\", \"OTG device endpoint-4 control\n              register\",\
    \ address + 0x0180, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL5\", \"OTG device endpoint-5 control\n              register\",\
    \ address + 0x01A0, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL6\", \"OTG device endpoint-6 control\n              register\",\
    \ address + 0x01C0, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepctl7Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPCTL7\", \"OTG device endpoint-7 control\n              register\",\
    \ address + 0x01E0, 32, \"\", 0x0000, proxy)\n            self.mpsiz = Field(\"\
    mpsiz\", \"Maximum packet size\", self._address, 0, 0x07FF, 11, proxy)\n     \
    \       self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.eonum_dpid = Field(\"eonum_dpid\", \"\
    Even/odd frame\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts\
    \ = Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n \
    \           self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.txfnum = Field(\"txfnum\"\
    , \"TxFIFO number\", self._address, 22, 0x000F, 4, proxy)\n            self.cnak\
    \ = Field(\"cnak\", \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n    \
    \        self.snak = Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1,\
    \ proxy)\n            self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0\
    \ PID\", self._address, 28, 0x0001, 1, proxy)\n            self.soddfrm = Field(\"\
    soddfrm\", \"Set odd frame\", self._address, 29, 0x0001, 1, proxy)\n         \
    \   self.epdis = Field(\"epdis\", \"Endpoint disable\", self._address, 30, 0x0001,\
    \ 1, proxy)\n            self.epena = Field(\"epena\", \"Endpoint enable\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT0\", \"OTG device endpoint-0 interrupt\n              register\"\
    , address + 0x0108, 32, \"\", 0x0080, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT1\", \"OTG device endpoint-1 interrupt\n              register\"\
    , address + 0x0128, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT2\", \"OTG device endpoint-2 interrupt\n              register\"\
    , address + 0x0148, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT3\", \"OTG device endpoint-3 interrupt\n              register\"\
    , address + 0x0168, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT4\", \"OTG device endpoint-4 interrupt\n              register\"\
    , address + 0x0188, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT5\", \"OTG device endpoint-5 interrupt\n              register\"\
    , address + 0x01A8, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT6\", \"OTG device endpoint-6 interrupt\n              register\"\
    , address + 0x01C8, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_diepint7Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPINT7\", \"OTG device endpoint-7 interrupt\n              register\"\
    , address + 0x01E8, 32, \"\", 0x0000, proxy)\n            self.xfrc = Field(\"\
    xfrc\", \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.toc = Field(\"toc\", \"Timeout condition\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ittxfe = Field(\"ittxfe\", \"IN token\
    \ received when TxFIFO is\n                          empty\", self._address, 4,\
    \ 0x0001, 1, proxy)\n            self.inepne = Field(\"inepne\", \"IN endpoint\
    \ NAK effective\", self._address, 6, 0x0001, 1, proxy)\n            self.txfe\
    \ = Field(\"txfe\", \"Transmit FIFO empty\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.txfifoudrn = Field(\"txfifoudrn\", \"Transmit Fifo Underrun\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.bna = Field(\"bna\", \"\
    Buffer not available\n                          interrupt\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.pktdrpsts = Field(\"pktdrpsts\", \"Packet\
    \ dropped status\", self._address, 11, 0x0001, 1, proxy)\n            self.berr\
    \ = Field(\"berr\", \"Babble error interrupt\", self._address, 12, 0x0001, 1,\
    \ proxy)\n            self.nak = Field(\"nak\", \"NAK interrupt\", self._address,\
    \ 13, 0x0001, 1, proxy)\n    \n    class Otg_hs_dieptsiz0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPTSIZ0\", \"OTG_HS device IN endpoint 0 transfer size\n            \
    \  register\", address + 0x0110, 32, \"read-write\", 0x0000, proxy)\n        \
    \    self.xfrsiz = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x007F,\
    \ 7, proxy)\n            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x0003, 2, proxy)\n    \n    class Otg_hs_diepdma1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPDMA1\", \"OTG_HS device endpoint-1 DMA address\n              register\"\
    , address + 0x0114, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_diepdma2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DIEPDMA2\", \"OTG_HS\
    \ device endpoint-2 DMA address\n              register\", address + 0x0134, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\"\
    , \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_diepdma3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPDMA3\", \"OTG_HS device endpoint-3 DMA address\n              register\"\
    , address + 0x0154, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_diepdma4Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DIEPDMA4\", \"OTG_HS\
    \ device endpoint-4 DMA address\n              register\", address + 0x0174, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.dmaaddr = Field(\"dmaaddr\"\
    , \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class Otg_hs_diepdma5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPDMA5\", \"OTG_HS device endpoint-5 DMA address\n              register\"\
    , address + 0x0194, 32, \"read-write\", 0x0000, proxy)\n            self.dmaaddr\
    \ = Field(\"dmaaddr\", \"DMA address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class Otg_hs_dtxfsts0Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DTXFSTS0\", \"OTG_HS\
    \ device IN endpoint transmit FIFO\n              status register\", address +\
    \ 0x0118, 32, \"read-only\", 0x0000, proxy)\n            self.ineptfsav = Field(\"\
    ineptfsav\", \"IN endpoint TxFIFO space\n                          avail\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_dtxfsts1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DTXFSTS1\", \"OTG_HS device IN endpoint transmit FIFO\n              status\
    \ register\", address + 0x0138, 32, \"read-only\", 0x0000, proxy)\n          \
    \  self.ineptfsav = Field(\"ineptfsav\", \"IN endpoint TxFIFO space\n        \
    \                  avail\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Otg_hs_dtxfsts2Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_DTXFSTS2\", \"OTG_HS device IN endpoint\
    \ transmit FIFO\n              status register\", address + 0x0158, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.ineptfsav = Field(\"ineptfsav\", \"IN endpoint\
    \ TxFIFO space\n                          avail\", self._address, 0, 0xFFFF, 16,\
    \ proxy)\n    \n    class Otg_hs_dtxfsts3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DTXFSTS3\", \"OTG_HS\
    \ device IN endpoint transmit FIFO\n              status register\", address +\
    \ 0x0178, 32, \"read-only\", 0x0000, proxy)\n            self.ineptfsav = Field(\"\
    ineptfsav\", \"IN endpoint TxFIFO space\n                          avail\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n    \n    class Otg_hs_dtxfsts4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DTXFSTS4\", \"OTG_HS device IN endpoint transmit FIFO\n              status\
    \ register\", address + 0x0198, 32, \"read-only\", 0x0000, proxy)\n          \
    \  self.ineptfsav = Field(\"ineptfsav\", \"IN endpoint TxFIFO space\n        \
    \                  avail\", self._address, 0, 0xFFFF, 16, proxy)\n    \n    class\
    \ Otg_hs_dtxfsts5Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"OTG_HS_DTXFSTS5\", \"OTG_HS device IN endpoint\
    \ transmit FIFO\n              status register\", address + 0x01B8, 32, \"read-only\"\
    , 0x0000, proxy)\n            self.ineptfsav = Field(\"ineptfsav\", \"IN endpoint\
    \ TxFIFO space\n                          avail\", self._address, 0, 0xFFFF, 16,\
    \ proxy)\n    \n    class Otg_hs_dieptsiz1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DIEPTSIZ1\", \"OTG_HS\
    \ device endpoint transfer size\n              register\", address + 0x0130, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"xfrsiz\",\
    \ \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n            self.pktcnt\
    \ = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF, 10, proxy)\n\
    \            self.mcnt = Field(\"mcnt\", \"Multi count\", self._address, 29, 0x0003,\
    \ 2, proxy)\n    \n    class Otg_hs_dieptsiz2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_DIEPTSIZ2\"\
    , \"OTG_HS device endpoint transfer size\n              register\", address +\
    \ 0x0150, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz = Field(\"\
    xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n         \
    \   self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address, 19, 0x03FF,\
    \ 10, proxy)\n            self.mcnt = Field(\"mcnt\", \"Multi count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_dieptsiz3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPTSIZ3\", \"OTG_HS device endpoint transfer size\n              register\"\
    , address + 0x0170, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.mcnt = Field(\"mcnt\", \"Multi count\"\
    , self._address, 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_dieptsiz4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPTSIZ4\", \"OTG_HS device endpoint transfer size\n              register\"\
    , address + 0x0190, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.mcnt = Field(\"mcnt\", \"Multi count\"\
    , self._address, 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_dieptsiz5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DIEPTSIZ5\", \"OTG_HS device endpoint transfer size\n              register\"\
    , address + 0x01B0, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.mcnt = Field(\"mcnt\", \"Multi count\"\
    , self._address, 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_doepctl0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPCTL0\", \"OTG_HS device control OUT endpoint 0 control\n          \
    \    register\", address + 0x0300, 32, \"\", 0x8000, proxy)\n            self.mpsiz\
    \ = Field(\"mpsiz\", \"Maximum packet size\", self._address, 0, 0x0003, 2, proxy)\n\
    \            self.usbaep = Field(\"usbaep\", \"USB active endpoint\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.naksts = Field(\"naksts\", \"NAK status\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.eptyp = Field(\"eptyp\"\
    , \"Endpoint type\", self._address, 18, 0x0003, 2, proxy)\n            self.snpm\
    \ = Field(\"snpm\", \"Snoop mode\", self._address, 20, 0x0001, 1, proxy)\n   \
    \         self.stall = Field(\"stall\", \"STALL handshake\", self._address, 21,\
    \ 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\", \"Clear NAK\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.snak = Field(\"snak\", \"Set NAK\",\
    \ self._address, 27, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\"\
    , \"Endpoint disable\", self._address, 30, 0x0001, 1, proxy)\n            self.epena\
    \ = Field(\"epena\", \"Endpoint enable\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class Otg_hs_doepctl1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"OTG_HS_DOEPCTL1\", \"OTG device\
    \ endpoint-1 control\n              register\", address + 0x0320, 32, \"\", 0x0000,\
    \ proxy)\n            self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.usbaep = Field(\"usbaep\", \"USB active\
    \ endpoint\", self._address, 15, 0x0001, 1, proxy)\n            self.eonum_dpid\
    \ = Field(\"eonum_dpid\", \"Even odd frame/Endpoint data\n                   \
    \       PID\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts =\
    \ Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n   \
    \         self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.snpm = Field(\"snpm\", \"Snoop mode\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\"\
    , \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n            self.snak =\
    \ Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1, proxy)\n        \
    \    self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0 PID/Set even\n\
    \                          frame\", self._address, 28, 0x0001, 1, proxy)\n   \
    \         self.soddfrm = Field(\"soddfrm\", \"Set odd frame\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\", \"Endpoint\
    \ disable\", self._address, 30, 0x0001, 1, proxy)\n            self.epena = Field(\"\
    epena\", \"Endpoint enable\", self._address, 31, 0x0001, 1, proxy)\n    \n   \
    \ class Otg_hs_doepctl2Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DOEPCTL2\", \"OTG device endpoint-2\
    \ control\n              register\", address + 0x0340, 32, \"\", 0x0000, proxy)\n\
    \            self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.usbaep = Field(\"usbaep\", \"USB active\
    \ endpoint\", self._address, 15, 0x0001, 1, proxy)\n            self.eonum_dpid\
    \ = Field(\"eonum_dpid\", \"Even odd frame/Endpoint data\n                   \
    \       PID\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts =\
    \ Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n   \
    \         self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.snpm = Field(\"snpm\", \"Snoop mode\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\"\
    , \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n            self.snak =\
    \ Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1, proxy)\n        \
    \    self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0 PID/Set even\n\
    \                          frame\", self._address, 28, 0x0001, 1, proxy)\n   \
    \         self.soddfrm = Field(\"soddfrm\", \"Set odd frame\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\", \"Endpoint\
    \ disable\", self._address, 30, 0x0001, 1, proxy)\n            self.epena = Field(\"\
    epena\", \"Endpoint enable\", self._address, 31, 0x0001, 1, proxy)\n    \n   \
    \ class Otg_hs_doepctl3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DOEPCTL3\", \"OTG device endpoint-3\
    \ control\n              register\", address + 0x0360, 32, \"\", 0x0000, proxy)\n\
    \            self.mpsiz = Field(\"mpsiz\", \"Maximum packet size\", self._address,\
    \ 0, 0x07FF, 11, proxy)\n            self.usbaep = Field(\"usbaep\", \"USB active\
    \ endpoint\", self._address, 15, 0x0001, 1, proxy)\n            self.eonum_dpid\
    \ = Field(\"eonum_dpid\", \"Even odd frame/Endpoint data\n                   \
    \       PID\", self._address, 16, 0x0001, 1, proxy)\n            self.naksts =\
    \ Field(\"naksts\", \"NAK status\", self._address, 17, 0x0001, 1, proxy)\n   \
    \         self.eptyp = Field(\"eptyp\", \"Endpoint type\", self._address, 18,\
    \ 0x0003, 2, proxy)\n            self.snpm = Field(\"snpm\", \"Snoop mode\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.stall = Field(\"stall\", \"STALL handshake\"\
    , self._address, 21, 0x0001, 1, proxy)\n            self.cnak = Field(\"cnak\"\
    , \"Clear NAK\", self._address, 26, 0x0001, 1, proxy)\n            self.snak =\
    \ Field(\"snak\", \"Set NAK\", self._address, 27, 0x0001, 1, proxy)\n        \
    \    self.sd0pid_sevnfrm = Field(\"sd0pid_sevnfrm\", \"Set DATA0 PID/Set even\n\
    \                          frame\", self._address, 28, 0x0001, 1, proxy)\n   \
    \         self.soddfrm = Field(\"soddfrm\", \"Set odd frame\", self._address,\
    \ 29, 0x0001, 1, proxy)\n            self.epdis = Field(\"epdis\", \"Endpoint\
    \ disable\", self._address, 30, 0x0001, 1, proxy)\n            self.epena = Field(\"\
    epena\", \"Endpoint enable\", self._address, 31, 0x0001, 1, proxy)\n    \n   \
    \ class Otg_hs_doepint0Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_DOEPINT0\", \"OTG_HS device endpoint-0\
    \ interrupt\n              register\", address + 0x0308, 32, \"read-write\", 0x0080,\
    \ proxy)\n            self.xfrc = Field(\"xfrc\", \"Transfer completed\n     \
    \                     interrupt\", self._address, 0, 0x0001, 1, proxy)\n     \
    \       self.epdisd = Field(\"epdisd\", \"Endpoint disabled\n                \
    \          interrupt\", self._address, 1, 0x0001, 1, proxy)\n            self.stup\
    \ = Field(\"stup\", \"SETUP phase done\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.otepdis = Field(\"otepdis\", \"OUT token received when endpoint\n\
    \                          disabled\", self._address, 4, 0x0001, 1, proxy)\n \
    \           self.b2bstup = Field(\"b2bstup\", \"Back-to-back SETUP packets\n \
    \                         received\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address, 14,\
    \ 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint1Register(Register):\n    \
    \    def __init__(self, address, proxy):\n            super().__init__(\"OTG_HS_DOEPINT1\"\
    , \"OTG_HS device endpoint-1 interrupt\n              register\", address + 0x0328,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.xfrc = Field(\"xfrc\",\
    \ \"Transfer completed\n                          interrupt\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\", \"Endpoint\
    \ disabled\n                          interrupt\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\", \"OUT token\
    \ received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPINT2\", \"OTG_HS device endpoint-2 interrupt\n              register\"\
    , address + 0x0348, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\n                          interrupt\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\"\
    , \"Endpoint disabled\n                          interrupt\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\"\
    , \"OUT token received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPINT3\", \"OTG_HS device endpoint-3 interrupt\n              register\"\
    , address + 0x0368, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\n                          interrupt\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\"\
    , \"Endpoint disabled\n                          interrupt\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\"\
    , \"OUT token received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPINT4\", \"OTG_HS device endpoint-4 interrupt\n              register\"\
    , address + 0x0388, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\n                          interrupt\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\"\
    , \"Endpoint disabled\n                          interrupt\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\"\
    , \"OUT token received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint5Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPINT5\", \"OTG_HS device endpoint-5 interrupt\n              register\"\
    , address + 0x03A8, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\n                          interrupt\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\"\
    , \"Endpoint disabled\n                          interrupt\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\"\
    , \"OUT token received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint6Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPINT6\", \"OTG_HS device endpoint-6 interrupt\n              register\"\
    , address + 0x03C8, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\n                          interrupt\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\"\
    , \"Endpoint disabled\n                          interrupt\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\"\
    , \"OUT token received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doepint7Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPINT7\", \"OTG_HS device endpoint-7 interrupt\n              register\"\
    , address + 0x03E8, 32, \"read-write\", 0x0000, proxy)\n            self.xfrc\
    \ = Field(\"xfrc\", \"Transfer completed\n                          interrupt\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.epdisd = Field(\"epdisd\"\
    , \"Endpoint disabled\n                          interrupt\", self._address, 1,\
    \ 0x0001, 1, proxy)\n            self.stup = Field(\"stup\", \"SETUP phase done\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.otepdis = Field(\"otepdis\"\
    , \"OUT token received when endpoint\n                          disabled\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.b2bstup = Field(\"b2bstup\", \"Back-to-back\
    \ SETUP packets\n                          received\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.nyet = Field(\"nyet\", \"NYET interrupt\", self._address,\
    \ 14, 0x0001, 1, proxy)\n    \n    class Otg_hs_doeptsiz0Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPTSIZ0\", \"OTG_HS device endpoint-1 transfer size\n              register\"\
    , address + 0x0310, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x007F, 7, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.stupcnt = Field(\"stupcnt\", \"SETUP\
    \ packet count\", self._address, 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_doeptsiz1Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPTSIZ1\", \"OTG_HS device endpoint-2 transfer size\n              register\"\
    , address + 0x0330, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.rxdpid_stupcnt = Field(\"rxdpid_stupcnt\"\
    , \"Received data PID/SETUP packet\n                          count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_doeptsiz2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPTSIZ2\", \"OTG_HS device endpoint-3 transfer size\n              register\"\
    , address + 0x0350, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.rxdpid_stupcnt = Field(\"rxdpid_stupcnt\"\
    , \"Received data PID/SETUP packet\n                          count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_doeptsiz3Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPTSIZ3\", \"OTG_HS device endpoint-4 transfer size\n              register\"\
    , address + 0x0370, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.rxdpid_stupcnt = Field(\"rxdpid_stupcnt\"\
    , \"Received data PID/SETUP packet\n                          count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n    \n    class Otg_hs_doeptsiz4Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    OTG_HS_DOEPTSIZ4\", \"OTG_HS device endpoint-5 transfer size\n              register\"\
    , address + 0x0390, 32, \"read-write\", 0x0000, proxy)\n            self.xfrsiz\
    \ = Field(\"xfrsiz\", \"Transfer size\", self._address, 0, 0x7FFFF, 19, proxy)\n\
    \            self.pktcnt = Field(\"pktcnt\", \"Packet count\", self._address,\
    \ 19, 0x03FF, 10, proxy)\n            self.rxdpid_stupcnt = Field(\"rxdpid_stupcnt\"\
    , \"Received data PID/SETUP packet\n                          count\", self._address,\
    \ 29, 0x0003, 2, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    otg_hs_device\", \"USB on the go high speed\", 0x40040800)\n        self.otg_hs_dcfg\
    \ = self.Otg_hs_dcfgRegister(self.address, proxy)\n        self.otg_hs_dctl =\
    \ self.Otg_hs_dctlRegister(self.address, proxy)\n        self.otg_hs_dsts = self.Otg_hs_dstsRegister(self.address,\
    \ proxy)\n        self.otg_hs_diepmsk = self.Otg_hs_diepmskRegister(self.address,\
    \ proxy)\n        self.otg_hs_doepmsk = self.Otg_hs_doepmskRegister(self.address,\
    \ proxy)\n        self.otg_hs_daint = self.Otg_hs_daintRegister(self.address,\
    \ proxy)\n        self.otg_hs_daintmsk = self.Otg_hs_daintmskRegister(self.address,\
    \ proxy)\n        self.otg_hs_dvbusdis = self.Otg_hs_dvbusdisRegister(self.address,\
    \ proxy)\n        self.otg_hs_dvbuspulse = self.Otg_hs_dvbuspulseRegister(self.address,\
    \ proxy)\n        self.otg_hs_dthrctl = self.Otg_hs_dthrctlRegister(self.address,\
    \ proxy)\n        self.otg_hs_diepempmsk = self.Otg_hs_diepempmskRegister(self.address,\
    \ proxy)\n        self.otg_hs_deachint = self.Otg_hs_deachintRegister(self.address,\
    \ proxy)\n        self.otg_hs_deachintmsk = self.Otg_hs_deachintmskRegister(self.address,\
    \ proxy)\n        self.otg_hs_diepeachmsk1 = self.Otg_hs_diepeachmsk1Register(self.address,\
    \ proxy)\n        self.otg_hs_doepeachmsk1 = self.Otg_hs_doepeachmsk1Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl0 = self.Otg_hs_diepctl0Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl1 = self.Otg_hs_diepctl1Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl2 = self.Otg_hs_diepctl2Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl3 = self.Otg_hs_diepctl3Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl4 = self.Otg_hs_diepctl4Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl5 = self.Otg_hs_diepctl5Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl6 = self.Otg_hs_diepctl6Register(self.address,\
    \ proxy)\n        self.otg_hs_diepctl7 = self.Otg_hs_diepctl7Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint0 = self.Otg_hs_diepint0Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint1 = self.Otg_hs_diepint1Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint2 = self.Otg_hs_diepint2Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint3 = self.Otg_hs_diepint3Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint4 = self.Otg_hs_diepint4Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint5 = self.Otg_hs_diepint5Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint6 = self.Otg_hs_diepint6Register(self.address,\
    \ proxy)\n        self.otg_hs_diepint7 = self.Otg_hs_diepint7Register(self.address,\
    \ proxy)\n        self.otg_hs_dieptsiz0 = self.Otg_hs_dieptsiz0Register(self.address,\
    \ proxy)\n        self.otg_hs_diepdma1 = self.Otg_hs_diepdma1Register(self.address,\
    \ proxy)\n        self.otg_hs_diepdma2 = self.Otg_hs_diepdma2Register(self.address,\
    \ proxy)\n        self.otg_hs_diepdma3 = self.Otg_hs_diepdma3Register(self.address,\
    \ proxy)\n        self.otg_hs_diepdma4 = self.Otg_hs_diepdma4Register(self.address,\
    \ proxy)\n        self.otg_hs_diepdma5 = self.Otg_hs_diepdma5Register(self.address,\
    \ proxy)\n        self.otg_hs_dtxfsts0 = self.Otg_hs_dtxfsts0Register(self.address,\
    \ proxy)\n        self.otg_hs_dtxfsts1 = self.Otg_hs_dtxfsts1Register(self.address,\
    \ proxy)\n        self.otg_hs_dtxfsts2 = self.Otg_hs_dtxfsts2Register(self.address,\
    \ proxy)\n        self.otg_hs_dtxfsts3 = self.Otg_hs_dtxfsts3Register(self.address,\
    \ proxy)\n        self.otg_hs_dtxfsts4 = self.Otg_hs_dtxfsts4Register(self.address,\
    \ proxy)\n        self.otg_hs_dtxfsts5 = self.Otg_hs_dtxfsts5Register(self.address,\
    \ proxy)\n        self.otg_hs_dieptsiz1 = self.Otg_hs_dieptsiz1Register(self.address,\
    \ proxy)\n        self.otg_hs_dieptsiz2 = self.Otg_hs_dieptsiz2Register(self.address,\
    \ proxy)\n        self.otg_hs_dieptsiz3 = self.Otg_hs_dieptsiz3Register(self.address,\
    \ proxy)\n        self.otg_hs_dieptsiz4 = self.Otg_hs_dieptsiz4Register(self.address,\
    \ proxy)\n        self.otg_hs_dieptsiz5 = self.Otg_hs_dieptsiz5Register(self.address,\
    \ proxy)\n        self.otg_hs_doepctl0 = self.Otg_hs_doepctl0Register(self.address,\
    \ proxy)\n        self.otg_hs_doepctl1 = self.Otg_hs_doepctl1Register(self.address,\
    \ proxy)\n        self.otg_hs_doepctl2 = self.Otg_hs_doepctl2Register(self.address,\
    \ proxy)\n        self.otg_hs_doepctl3 = self.Otg_hs_doepctl3Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint0 = self.Otg_hs_doepint0Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint1 = self.Otg_hs_doepint1Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint2 = self.Otg_hs_doepint2Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint3 = self.Otg_hs_doepint3Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint4 = self.Otg_hs_doepint4Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint5 = self.Otg_hs_doepint5Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint6 = self.Otg_hs_doepint6Register(self.address,\
    \ proxy)\n        self.otg_hs_doepint7 = self.Otg_hs_doepint7Register(self.address,\
    \ proxy)\n        self.otg_hs_doeptsiz0 = self.Otg_hs_doeptsiz0Register(self.address,\
    \ proxy)\n        self.otg_hs_doeptsiz1 = self.Otg_hs_doeptsiz1Register(self.address,\
    \ proxy)\n        self.otg_hs_doeptsiz2 = self.Otg_hs_doeptsiz2Register(self.address,\
    \ proxy)\n        self.otg_hs_doeptsiz3 = self.Otg_hs_doeptsiz3Register(self.address,\
    \ proxy)\n        self.otg_hs_doeptsiz4 = self.Otg_hs_doeptsiz4Register(self.address,\
    \ proxy)\n"
  name: OTG_HS_DEVICE
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Otg_hs_pwrclk(Peripheral):\n\
    \    class Otg_hs_pcgcrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"OTG_HS_PCGCR\", \"Power and clock gating\
    \ control\n              register\", address + 0x0000, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.stppclk = Field(\"stppclk\", \"Stop PHY clock\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.gatehclk = Field(\"gatehclk\", \"Gate\
    \ HCLK\", self._address, 1, 0x0001, 1, proxy)\n            self.physusp = Field(\"\
    physusp\", \"PHY suspended\", self._address, 4, 0x0001, 1, proxy)\n    \n    def\
    \ __init__(self, proxy):\n        super().__init__(\"otg_hs_pwrclk\", \"USB on\
    \ the go high speed\", 0x40040E00)\n        self.otg_hs_pcgcr = self.Otg_hs_pcgcrRegister(self.address,\
    \ proxy)\n"
  name: OTG_HS_PWRCLK
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Sai1(Peripheral):\n\
    \    class Bcr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BCR1\", \"BConfiguration register 1\", address\
    \ + 0x0024, 32, \"read-write\", 0x0040, proxy)\n            self.mcjdiv = Field(\"\
    mcjdiv\", \"Master clock divider\", self._address, 20, 0x000F, 4, proxy)\n   \
    \         self.nodiv = Field(\"nodiv\", \"No divider\", self._address, 19, 0x0001,\
    \ 1, proxy)\n            self.dmaen = Field(\"dmaen\", \"DMA enable\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.saiben = Field(\"saiben\", \"Audio block\
    \ B enable\", self._address, 16, 0x0001, 1, proxy)\n            self.outdri =\
    \ Field(\"outdri\", \"Output drive\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.mono = Field(\"mono\", \"Mono mode\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.syncen = Field(\"syncen\", \"Synchronization enable\"\
    , self._address, 10, 0x0003, 2, proxy)\n            self.ckstr = Field(\"ckstr\"\
    , \"Clock strobing edge\", self._address, 9, 0x0001, 1, proxy)\n            self.lsbfirst\
    \ = Field(\"lsbfirst\", \"Least significant bit\n                          first\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.ds = Field(\"ds\", \"\
    Data size\", self._address, 5, 0x0007, 3, proxy)\n            self.prtcfg = Field(\"\
    prtcfg\", \"Protocol configuration\", self._address, 2, 0x0003, 2, proxy)\n  \
    \          self.mode = Field(\"mode\", \"Audio block mode\", self._address, 0,\
    \ 0x0003, 2, proxy)\n    \n    class Bcr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BCR2\", \"BConfiguration register\
    \ 2\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.comp\
    \ = Field(\"comp\", \"Companding mode\", self._address, 14, 0x0003, 2, proxy)\n\
    \            self.cpl = Field(\"cpl\", \"Complement bit\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.mutecn = Field(\"mutecn\", \"Mute counter\"\
    , self._address, 7, 0x003F, 6, proxy)\n            self.muteval = Field(\"muteval\"\
    , \"Mute value\", self._address, 6, 0x0001, 1, proxy)\n            self.mute =\
    \ Field(\"mute\", \"Mute\", self._address, 5, 0x0001, 1, proxy)\n            self.tris\
    \ = Field(\"tris\", \"Tristate management on data\n                          line\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fflus = Field(\"fflus\"\
    , \"FIFO flush\", self._address, 3, 0x0001, 1, proxy)\n            self.fth =\
    \ Field(\"fth\", \"FIFO threshold\", self._address, 0, 0x0007, 3, proxy)\n   \
    \ \n    class BfrcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BFRCR\", \"BFRCR\", address + 0x002C, 32, \"read-write\"\
    , 0x0007, proxy)\n            self.fsoff = Field(\"fsoff\", \"Frame synchronization\n\
    \                          offset\", self._address, 18, 0x0001, 1, proxy)\n  \
    \          self.fspol = Field(\"fspol\", \"Frame synchronization\n           \
    \               polarity\", self._address, 17, 0x0001, 1, proxy)\n           \
    \ self.fsdef = Field(\"fsdef\", \"Frame synchronization\n                    \
    \      definition\", self._address, 16, 0x0001, 1, proxy)\n            self.fsall\
    \ = Field(\"fsall\", \"Frame synchronization active level\n                  \
    \        length\", self._address, 8, 0x007F, 7, proxy)\n            self.frl =\
    \ Field(\"frl\", \"Frame length\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class BslotrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BSLOTR\", \"BSlot register\", address + 0x0030,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.sloten = Field(\"sloten\"\
    , \"Slot enable\", self._address, 16, 0xFFFF, 16, proxy)\n            self.nbslot\
    \ = Field(\"nbslot\", \"Number of slots in an audio\n                        \
    \  frame\", self._address, 8, 0x000F, 4, proxy)\n            self.slotsz = Field(\"\
    slotsz\", \"Slot size\", self._address, 6, 0x0003, 2, proxy)\n            self.fboff\
    \ = Field(\"fboff\", \"First bit offset\", self._address, 0, 0x001F, 5, proxy)\n\
    \    \n    class BimRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BIM\", \"BInterrupt mask register2\", address\
    \ + 0x0034, 32, \"read-write\", 0x0000, proxy)\n            self.lfsdetie = Field(\"\
    lfsdetie\", \"Late frame synchronization detection\n                         \
    \ interrupt enable\", self._address, 6, 0x0001, 1, proxy)\n            self.afsdetie\
    \ = Field(\"afsdetie\", \"Anticipated frame synchronization\n                \
    \          detection interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.cnrdyie = Field(\"cnrdyie\", \"Codec not ready interrupt\n \
    \                         enable\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.freqie = Field(\"freqie\", \"FIFO request interrupt\n          \
    \                enable\", self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg\
    \ = Field(\"wckcfg\", \"Wrong clock configuration interrupt\n                \
    \          enable\", self._address, 2, 0x0001, 1, proxy)\n            self.mutedet\
    \ = Field(\"mutedet\", \"Mute detection interrupt\n                          enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudrie = Field(\"ovrudrie\"\
    , \"Overrun/underrun interrupt\n                          enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSR\", \"BStatus register\"\
    , address + 0x0038, 32, \"read-only\", 0x0000, proxy)\n            self.flvl =\
    \ Field(\"flvl\", \"FIFO level threshold\", self._address, 16, 0x0007, 3, proxy)\n\
    \            self.lfsdet = Field(\"lfsdet\", \"Late frame synchronization\n  \
    \                        detection\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.afsdet = Field(\"afsdet\", \"Anticipated frame synchronization\n\
    \                          detection\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.cnrdy = Field(\"cnrdy\", \"Codec not ready\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\", \"FIFO request\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg = Field(\"wckcfg\"\
    , \"Wrong clock configuration\n                          flag\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.mutedet = Field(\"mutedet\", \"Mute detection\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudr = Field(\"ovrudr\"\
    , \"Overrun / underrun\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ BclrfrRegister(Register):\n        def __init__(self, address, proxy):\n   \
    \         super().__init__(\"BCLRFR\", \"BClear flag register\", address + 0x003C,\
    \ 32, \"write-only\", 0x0000, proxy)\n            self.lfsdet = Field(\"lfsdet\"\
    , \"Clear late frame synchronization\n                          detection flag\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.cafsdet = Field(\"cafsdet\"\
    , \"Clear anticipated frame synchronization\n                          detection\
    \ flag\", self._address, 5, 0x0001, 1, proxy)\n            self.cnrdy = Field(\"\
    cnrdy\", \"Clear codec not ready flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.wckcfg = Field(\"wckcfg\", \"Clear wrong clock configuration\n\
    \                          flag\", self._address, 2, 0x0001, 1, proxy)\n     \
    \       self.mutedet = Field(\"mutedet\", \"Mute detection flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ovrudr = Field(\"ovrudr\", \"Clear overrun\
    \ / underrun\", self._address, 0, 0x0001, 1, proxy)\n    \n    class BdrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BDR\", \"BData register\", address + 0x0040, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.data = Field(\"data\", \"Data\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Acr1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ACR1\", \"AConfiguration register\
    \ 1\", address + 0x0004, 32, \"read-write\", 0x0040, proxy)\n            self.mcjdiv\
    \ = Field(\"mcjdiv\", \"Master clock divider\", self._address, 20, 0x000F, 4,\
    \ proxy)\n            self.nodiv = Field(\"nodiv\", \"No divider\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.dmaen = Field(\"dmaen\", \"DMA enable\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.saiaen = Field(\"saiaen\"\
    , \"Audio block A enable\", self._address, 16, 0x0001, 1, proxy)\n           \
    \ self.outdri = Field(\"outdri\", \"Output drive\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.mono = Field(\"mono\", \"Mono mode\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.syncen = Field(\"syncen\", \"Synchronization\
    \ enable\", self._address, 10, 0x0003, 2, proxy)\n            self.ckstr = Field(\"\
    ckstr\", \"Clock strobing edge\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.lsbfirst = Field(\"lsbfirst\", \"Least significant bit\n         \
    \                 first\", self._address, 8, 0x0001, 1, proxy)\n            self.ds\
    \ = Field(\"ds\", \"Data size\", self._address, 5, 0x0007, 3, proxy)\n       \
    \     self.prtcfg = Field(\"prtcfg\", \"Protocol configuration\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.mode = Field(\"mode\", \"Audio block\
    \ mode\", self._address, 0, 0x0003, 2, proxy)\n    \n    class Acr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    ACR2\", \"AConfiguration register 2\", address + 0x0008, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.comp = Field(\"comp\", \"Companding mode\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.cpl = Field(\"cpl\", \"Complement bit\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.mutecn = Field(\"mutecn\"\
    , \"Mute counter\", self._address, 7, 0x003F, 6, proxy)\n            self.muteval\
    \ = Field(\"muteval\", \"Mute value\", self._address, 6, 0x0001, 1, proxy)\n \
    \           self.mute = Field(\"mute\", \"Mute\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.tris = Field(\"tris\", \"Tristate management on data\n\
    \                          line\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.fflus = Field(\"fflus\", \"FIFO flush\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class AfrcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"AFRCR\", \"\
    AFRCR\", address + 0x000C, 32, \"read-write\", 0x0007, proxy)\n            self.fsoff\
    \ = Field(\"fsoff\", \"Frame synchronization\n                          offset\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fspol = Field(\"fspol\"\
    , \"Frame synchronization\n                          polarity\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fsdef = Field(\"fsdef\", \"Frame synchronization\n\
    \                          definition\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.fsall = Field(\"fsall\", \"Frame synchronization active level\n\
    \                          length\", self._address, 8, 0x007F, 7, proxy)\n   \
    \         self.frl = Field(\"frl\", \"Frame length\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class AslotrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ASLOTR\", \"ASlot register\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.sloten\
    \ = Field(\"sloten\", \"Slot enable\", self._address, 16, 0xFFFF, 16, proxy)\n\
    \            self.nbslot = Field(\"nbslot\", \"Number of slots in an audio\n \
    \                         frame\", self._address, 8, 0x000F, 4, proxy)\n     \
    \       self.slotsz = Field(\"slotsz\", \"Slot size\", self._address, 6, 0x0003,\
    \ 2, proxy)\n            self.fboff = Field(\"fboff\", \"First bit offset\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class AimRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AIM\", \"AInterrupt mask register2\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.lfsdet\
    \ = Field(\"lfsdet\", \"Late frame synchronization detection\n               \
    \           interrupt enable\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.afsdetie = Field(\"afsdetie\", \"Anticipated frame synchronization\n\
    \                          detection interrupt enable\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.cnrdyie = Field(\"cnrdyie\", \"Codec not ready interrupt\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.freqie = Field(\"freqie\", \"FIFO request interrupt\n         \
    \                 enable\", self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg\
    \ = Field(\"wckcfg\", \"Wrong clock configuration interrupt\n                \
    \          enable\", self._address, 2, 0x0001, 1, proxy)\n            self.mutedet\
    \ = Field(\"mutedet\", \"Mute detection interrupt\n                          enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudrie = Field(\"ovrudrie\"\
    , \"Overrun/underrun interrupt\n                          enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class AsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ASR\", \"AStatus register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.flvl\
    \ = Field(\"flvl\", \"FIFO level threshold\", self._address, 16, 0x0007, 3, proxy)\n\
    \            self.lfsdet = Field(\"lfsdet\", \"Late frame synchronization\n  \
    \                        detection\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.afsdet = Field(\"afsdet\", \"Anticipated frame synchronization\n\
    \                          detection\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.cnrdy = Field(\"cnrdy\", \"Codec not ready\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\", \"FIFO request\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg = Field(\"wckcfg\"\
    , \"Wrong clock configuration flag. This bit\n                          is read\
    \ only.\", self._address, 2, 0x0001, 1, proxy)\n            self.mutedet = Field(\"\
    mutedet\", \"Mute detection\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.ovrudr = Field(\"ovrudr\", \"Overrun / underrun\", self._address, 0,\
    \ 0x0001, 1, proxy)\n    \n    class AclrfrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ACLRFR\", \"AClear flag register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.lfsdet\
    \ = Field(\"lfsdet\", \"Clear late frame synchronization\n                   \
    \       detection flag\", self._address, 6, 0x0001, 1, proxy)\n            self.cafsdet\
    \ = Field(\"cafsdet\", \"Clear anticipated frame synchronization\n           \
    \               detection flag.\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.cnrdy = Field(\"cnrdy\", \"Clear codec not ready flag\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.wckcfg = Field(\"wckcfg\", \"Clear wrong\
    \ clock configuration\n                          flag\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.mutedet = Field(\"mutedet\", \"Mute detection flag\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudr = Field(\"ovrudr\"\
    , \"Clear overrun / underrun\", self._address, 0, 0x0001, 1, proxy)\n    \n  \
    \  class AdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ADR\", \"AData register\", address + 0x0020, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.data = Field(\"data\", \"Data\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class GcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    GCR\", \"Global configuration register\", address + 0x0000, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.syncin = Field(\"syncin\", \"Synchronization\
    \ inputs\", self._address, 0, 0x0003, 2, proxy)\n            self.syncout = Field(\"\
    syncout\", \"Synchronization outputs\", self._address, 4, 0x0003, 2, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"sai1\", \"Serial\
    \ audio interface\", 0x40015800)\n        self.bcr1 = self.Bcr1Register(self.address,\
    \ proxy)\n        self.bcr2 = self.Bcr2Register(self.address, proxy)\n       \
    \ self.bfrcr = self.BfrcrRegister(self.address, proxy)\n        self.bslotr =\
    \ self.BslotrRegister(self.address, proxy)\n        self.bim = self.BimRegister(self.address,\
    \ proxy)\n        self.bsr = self.BsrRegister(self.address, proxy)\n        self.bclrfr\
    \ = self.BclrfrRegister(self.address, proxy)\n        self.bdr = self.BdrRegister(self.address,\
    \ proxy)\n        self.acr1 = self.Acr1Register(self.address, proxy)\n       \
    \ self.acr2 = self.Acr2Register(self.address, proxy)\n        self.afrcr = self.AfrcrRegister(self.address,\
    \ proxy)\n        self.aslotr = self.AslotrRegister(self.address, proxy)\n   \
    \     self.aim = self.AimRegister(self.address, proxy)\n        self.asr = self.AsrRegister(self.address,\
    \ proxy)\n        self.aclrfr = self.AclrfrRegister(self.address, proxy)\n   \
    \     self.adr = self.AdrRegister(self.address, proxy)\n        self.gcr = self.GcrRegister(self.address,\
    \ proxy)\n"
  name: SAI1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Sai2(Peripheral):\n\
    \    class Bcr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BCR1\", \"BConfiguration register 1\", address\
    \ + 0x0024, 32, \"read-write\", 0x0040, proxy)\n            self.mcjdiv = Field(\"\
    mcjdiv\", \"Master clock divider\", self._address, 20, 0x000F, 4, proxy)\n   \
    \         self.nodiv = Field(\"nodiv\", \"No divider\", self._address, 19, 0x0001,\
    \ 1, proxy)\n            self.dmaen = Field(\"dmaen\", \"DMA enable\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.saiben = Field(\"saiben\", \"Audio block\
    \ B enable\", self._address, 16, 0x0001, 1, proxy)\n            self.outdri =\
    \ Field(\"outdri\", \"Output drive\", self._address, 13, 0x0001, 1, proxy)\n \
    \           self.mono = Field(\"mono\", \"Mono mode\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.syncen = Field(\"syncen\", \"Synchronization enable\"\
    , self._address, 10, 0x0003, 2, proxy)\n            self.ckstr = Field(\"ckstr\"\
    , \"Clock strobing edge\", self._address, 9, 0x0001, 1, proxy)\n            self.lsbfirst\
    \ = Field(\"lsbfirst\", \"Least significant bit\n                          first\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.ds = Field(\"ds\", \"\
    Data size\", self._address, 5, 0x0007, 3, proxy)\n            self.prtcfg = Field(\"\
    prtcfg\", \"Protocol configuration\", self._address, 2, 0x0003, 2, proxy)\n  \
    \          self.mode = Field(\"mode\", \"Audio block mode\", self._address, 0,\
    \ 0x0003, 2, proxy)\n    \n    class Bcr2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BCR2\", \"BConfiguration register\
    \ 2\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.comp\
    \ = Field(\"comp\", \"Companding mode\", self._address, 14, 0x0003, 2, proxy)\n\
    \            self.cpl = Field(\"cpl\", \"Complement bit\", self._address, 13,\
    \ 0x0001, 1, proxy)\n            self.mutecn = Field(\"mutecn\", \"Mute counter\"\
    , self._address, 7, 0x003F, 6, proxy)\n            self.muteval = Field(\"muteval\"\
    , \"Mute value\", self._address, 6, 0x0001, 1, proxy)\n            self.mute =\
    \ Field(\"mute\", \"Mute\", self._address, 5, 0x0001, 1, proxy)\n            self.tris\
    \ = Field(\"tris\", \"Tristate management on data\n                          line\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.fflus = Field(\"fflus\"\
    , \"FIFO flush\", self._address, 3, 0x0001, 1, proxy)\n            self.fth =\
    \ Field(\"fth\", \"FIFO threshold\", self._address, 0, 0x0007, 3, proxy)\n   \
    \ \n    class BfrcrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BFRCR\", \"BFRCR\", address + 0x002C, 32, \"read-write\"\
    , 0x0007, proxy)\n            self.fsoff = Field(\"fsoff\", \"Frame synchronization\n\
    \                          offset\", self._address, 18, 0x0001, 1, proxy)\n  \
    \          self.fspol = Field(\"fspol\", \"Frame synchronization\n           \
    \               polarity\", self._address, 17, 0x0001, 1, proxy)\n           \
    \ self.fsdef = Field(\"fsdef\", \"Frame synchronization\n                    \
    \      definition\", self._address, 16, 0x0001, 1, proxy)\n            self.fsall\
    \ = Field(\"fsall\", \"Frame synchronization active level\n                  \
    \        length\", self._address, 8, 0x007F, 7, proxy)\n            self.frl =\
    \ Field(\"frl\", \"Frame length\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class BslotrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BSLOTR\", \"BSlot register\", address + 0x0030,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.sloten = Field(\"sloten\"\
    , \"Slot enable\", self._address, 16, 0xFFFF, 16, proxy)\n            self.nbslot\
    \ = Field(\"nbslot\", \"Number of slots in an audio\n                        \
    \  frame\", self._address, 8, 0x000F, 4, proxy)\n            self.slotsz = Field(\"\
    slotsz\", \"Slot size\", self._address, 6, 0x0003, 2, proxy)\n            self.fboff\
    \ = Field(\"fboff\", \"First bit offset\", self._address, 0, 0x001F, 5, proxy)\n\
    \    \n    class BimRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"BIM\", \"BInterrupt mask register2\", address\
    \ + 0x0034, 32, \"read-write\", 0x0000, proxy)\n            self.lfsdetie = Field(\"\
    lfsdetie\", \"Late frame synchronization detection\n                         \
    \ interrupt enable\", self._address, 6, 0x0001, 1, proxy)\n            self.afsdetie\
    \ = Field(\"afsdetie\", \"Anticipated frame synchronization\n                \
    \          detection interrupt enable\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.cnrdyie = Field(\"cnrdyie\", \"Codec not ready interrupt\n \
    \                         enable\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.freqie = Field(\"freqie\", \"FIFO request interrupt\n          \
    \                enable\", self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg\
    \ = Field(\"wckcfg\", \"Wrong clock configuration interrupt\n                \
    \          enable\", self._address, 2, 0x0001, 1, proxy)\n            self.mutedet\
    \ = Field(\"mutedet\", \"Mute detection interrupt\n                          enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudrie = Field(\"ovrudrie\"\
    , \"Overrun/underrun interrupt\n                          enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class BsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"BSR\", \"BStatus register\"\
    , address + 0x0038, 32, \"read-only\", 0x0000, proxy)\n            self.flvl =\
    \ Field(\"flvl\", \"FIFO level threshold\", self._address, 16, 0x0007, 3, proxy)\n\
    \            self.lfsdet = Field(\"lfsdet\", \"Late frame synchronization\n  \
    \                        detection\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.afsdet = Field(\"afsdet\", \"Anticipated frame synchronization\n\
    \                          detection\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.cnrdy = Field(\"cnrdy\", \"Codec not ready\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\", \"FIFO request\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg = Field(\"wckcfg\"\
    , \"Wrong clock configuration\n                          flag\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.mutedet = Field(\"mutedet\", \"Mute detection\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudr = Field(\"ovrudr\"\
    , \"Overrun / underrun\", self._address, 0, 0x0001, 1, proxy)\n    \n    class\
    \ BclrfrRegister(Register):\n        def __init__(self, address, proxy):\n   \
    \         super().__init__(\"BCLRFR\", \"BClear flag register\", address + 0x003C,\
    \ 32, \"write-only\", 0x0000, proxy)\n            self.lfsdet = Field(\"lfsdet\"\
    , \"Clear late frame synchronization\n                          detection flag\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.cafsdet = Field(\"cafsdet\"\
    , \"Clear anticipated frame synchronization\n                          detection\
    \ flag\", self._address, 5, 0x0001, 1, proxy)\n            self.cnrdy = Field(\"\
    cnrdy\", \"Clear codec not ready flag\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.wckcfg = Field(\"wckcfg\", \"Clear wrong clock configuration\n\
    \                          flag\", self._address, 2, 0x0001, 1, proxy)\n     \
    \       self.mutedet = Field(\"mutedet\", \"Mute detection flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ovrudr = Field(\"ovrudr\", \"Clear overrun\
    \ / underrun\", self._address, 0, 0x0001, 1, proxy)\n    \n    class BdrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    BDR\", \"BData register\", address + 0x0040, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.data = Field(\"data\", \"Data\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class Acr1Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ACR1\", \"AConfiguration register\
    \ 1\", address + 0x0004, 32, \"read-write\", 0x0040, proxy)\n            self.mcjdiv\
    \ = Field(\"mcjdiv\", \"Master clock divider\", self._address, 20, 0x000F, 4,\
    \ proxy)\n            self.nodiv = Field(\"nodiv\", \"No divider\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.dmaen = Field(\"dmaen\", \"DMA enable\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.saiaen = Field(\"saiaen\"\
    , \"Audio block A enable\", self._address, 16, 0x0001, 1, proxy)\n           \
    \ self.outdri = Field(\"outdri\", \"Output drive\", self._address, 13, 0x0001,\
    \ 1, proxy)\n            self.mono = Field(\"mono\", \"Mono mode\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.syncen = Field(\"syncen\", \"Synchronization\
    \ enable\", self._address, 10, 0x0003, 2, proxy)\n            self.ckstr = Field(\"\
    ckstr\", \"Clock strobing edge\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.lsbfirst = Field(\"lsbfirst\", \"Least significant bit\n         \
    \                 first\", self._address, 8, 0x0001, 1, proxy)\n            self.ds\
    \ = Field(\"ds\", \"Data size\", self._address, 5, 0x0007, 3, proxy)\n       \
    \     self.prtcfg = Field(\"prtcfg\", \"Protocol configuration\", self._address,\
    \ 2, 0x0003, 2, proxy)\n            self.mode = Field(\"mode\", \"Audio block\
    \ mode\", self._address, 0, 0x0003, 2, proxy)\n    \n    class Acr2Register(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    ACR2\", \"AConfiguration register 2\", address + 0x0008, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.comp = Field(\"comp\", \"Companding mode\", self._address,\
    \ 14, 0x0003, 2, proxy)\n            self.cpl = Field(\"cpl\", \"Complement bit\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.mutecn = Field(\"mutecn\"\
    , \"Mute counter\", self._address, 7, 0x003F, 6, proxy)\n            self.muteval\
    \ = Field(\"muteval\", \"Mute value\", self._address, 6, 0x0001, 1, proxy)\n \
    \           self.mute = Field(\"mute\", \"Mute\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.tris = Field(\"tris\", \"Tristate management on data\n\
    \                          line\", self._address, 4, 0x0001, 1, proxy)\n     \
    \       self.fflus = Field(\"fflus\", \"FIFO flush\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.fth = Field(\"fth\", \"FIFO threshold\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class AfrcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"AFRCR\", \"\
    AFRCR\", address + 0x000C, 32, \"read-write\", 0x0007, proxy)\n            self.fsoff\
    \ = Field(\"fsoff\", \"Frame synchronization\n                          offset\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.fspol = Field(\"fspol\"\
    , \"Frame synchronization\n                          polarity\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.fsdef = Field(\"fsdef\", \"Frame synchronization\n\
    \                          definition\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.fsall = Field(\"fsall\", \"Frame synchronization active level\n\
    \                          length\", self._address, 8, 0x007F, 7, proxy)\n   \
    \         self.frl = Field(\"frl\", \"Frame length\", self._address, 0, 0x00FF,\
    \ 8, proxy)\n    \n    class AslotrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ASLOTR\", \"ASlot register\"\
    , address + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.sloten\
    \ = Field(\"sloten\", \"Slot enable\", self._address, 16, 0xFFFF, 16, proxy)\n\
    \            self.nbslot = Field(\"nbslot\", \"Number of slots in an audio\n \
    \                         frame\", self._address, 8, 0x000F, 4, proxy)\n     \
    \       self.slotsz = Field(\"slotsz\", \"Slot size\", self._address, 6, 0x0003,\
    \ 2, proxy)\n            self.fboff = Field(\"fboff\", \"First bit offset\", self._address,\
    \ 0, 0x001F, 5, proxy)\n    \n    class AimRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AIM\", \"AInterrupt mask register2\"\
    , address + 0x0014, 32, \"read-write\", 0x0000, proxy)\n            self.lfsdet\
    \ = Field(\"lfsdet\", \"Late frame synchronization detection\n               \
    \           interrupt enable\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.afsdetie = Field(\"afsdetie\", \"Anticipated frame synchronization\n\
    \                          detection interrupt enable\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.cnrdyie = Field(\"cnrdyie\", \"Codec not ready interrupt\n\
    \                          enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.freqie = Field(\"freqie\", \"FIFO request interrupt\n         \
    \                 enable\", self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg\
    \ = Field(\"wckcfg\", \"Wrong clock configuration interrupt\n                \
    \          enable\", self._address, 2, 0x0001, 1, proxy)\n            self.mutedet\
    \ = Field(\"mutedet\", \"Mute detection interrupt\n                          enable\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudrie = Field(\"ovrudrie\"\
    , \"Overrun/underrun interrupt\n                          enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class AsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ASR\", \"AStatus register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.flvl\
    \ = Field(\"flvl\", \"FIFO level threshold\", self._address, 16, 0x0007, 3, proxy)\n\
    \            self.lfsdet = Field(\"lfsdet\", \"Late frame synchronization\n  \
    \                        detection\", self._address, 6, 0x0001, 1, proxy)\n  \
    \          self.afsdet = Field(\"afsdet\", \"Anticipated frame synchronization\n\
    \                          detection\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.cnrdy = Field(\"cnrdy\", \"Codec not ready\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.freq = Field(\"freq\", \"FIFO request\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.wckcfg = Field(\"wckcfg\"\
    , \"Wrong clock configuration flag. This bit\n                          is read\
    \ only.\", self._address, 2, 0x0001, 1, proxy)\n            self.mutedet = Field(\"\
    mutedet\", \"Mute detection\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.ovrudr = Field(\"ovrudr\", \"Overrun / underrun\", self._address, 0,\
    \ 0x0001, 1, proxy)\n    \n    class AclrfrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"ACLRFR\", \"AClear flag register\"\
    , address + 0x001C, 32, \"read-write\", 0x0000, proxy)\n            self.lfsdet\
    \ = Field(\"lfsdet\", \"Clear late frame synchronization\n                   \
    \       detection flag\", self._address, 6, 0x0001, 1, proxy)\n            self.cafsdet\
    \ = Field(\"cafsdet\", \"Clear anticipated frame synchronization\n           \
    \               detection flag.\", self._address, 5, 0x0001, 1, proxy)\n     \
    \       self.cnrdy = Field(\"cnrdy\", \"Clear codec not ready flag\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.wckcfg = Field(\"wckcfg\", \"Clear wrong\
    \ clock configuration\n                          flag\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.mutedet = Field(\"mutedet\", \"Mute detection flag\"\
    , self._address, 1, 0x0001, 1, proxy)\n            self.ovrudr = Field(\"ovrudr\"\
    , \"Clear overrun / underrun\", self._address, 0, 0x0001, 1, proxy)\n    \n  \
    \  class AdrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ADR\", \"AData register\", address + 0x0020, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.data = Field(\"data\", \"Data\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class GcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    GCR\", \"Global configuration register\", address + 0x0000, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.syncin = Field(\"syncin\", \"Synchronization\
    \ inputs\", self._address, 0, 0x0003, 2, proxy)\n            self.syncout = Field(\"\
    syncout\", \"Synchronization outputs\", self._address, 4, 0x0003, 2, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"sai2\", \"Serial\
    \ audio interface\", 0x40015C00)\n        self.bcr1 = self.Bcr1Register(self.address,\
    \ proxy)\n        self.bcr2 = self.Bcr2Register(self.address, proxy)\n       \
    \ self.bfrcr = self.BfrcrRegister(self.address, proxy)\n        self.bslotr =\
    \ self.BslotrRegister(self.address, proxy)\n        self.bim = self.BimRegister(self.address,\
    \ proxy)\n        self.bsr = self.BsrRegister(self.address, proxy)\n        self.bclrfr\
    \ = self.BclrfrRegister(self.address, proxy)\n        self.bdr = self.BdrRegister(self.address,\
    \ proxy)\n        self.acr1 = self.Acr1Register(self.address, proxy)\n       \
    \ self.acr2 = self.Acr2Register(self.address, proxy)\n        self.afrcr = self.AfrcrRegister(self.address,\
    \ proxy)\n        self.aslotr = self.AslotrRegister(self.address, proxy)\n   \
    \     self.aim = self.AimRegister(self.address, proxy)\n        self.asr = self.AsrRegister(self.address,\
    \ proxy)\n        self.aclrfr = self.AclrfrRegister(self.address, proxy)\n   \
    \     self.adr = self.AdrRegister(self.address, proxy)\n        self.gcr = self.GcrRegister(self.address,\
    \ proxy)\n"
  name: SAI2
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Pwr(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"power control register\", address + 0x0000,\
    \ 32, \"read-write\", 0xC000, proxy)\n            self.lpds = Field(\"lpds\",\
    \ \"Low-power deep sleep\", self._address, 0, 0x0001, 1, proxy)\n            self.pdds\
    \ = Field(\"pdds\", \"Power down deepsleep\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.cwuf = Field(\"cwuf\", \"Clear wakeup flag\", self._address,\
    \ 2, 0x0001, 1, proxy)\n            self.csbf = Field(\"csbf\", \"Clear standby\
    \ flag\", self._address, 3, 0x0001, 1, proxy)\n            self.pvde = Field(\"\
    pvde\", \"Power voltage detector\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.pls = Field(\"pls\", \"PVD level selection\"\
    , self._address, 5, 0x0007, 3, proxy)\n            self.dbp = Field(\"dbp\", \"\
    Disable backup domain write\n                          protection\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.fpds = Field(\"fpds\", \"Flash power\
    \ down in Stop\n                          mode\", self._address, 9, 0x0001, 1,\
    \ proxy)\n            self.lplvds = Field(\"lplvds\", \"Low-Power Regulator Low\
    \ Voltage in\n                          deepsleep\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.mrlvds = Field(\"mrlvds\", \"Main regulator low\
    \ voltage in deepsleep\n                          mode\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.adcdc1 = Field(\"adcdc1\", \"ADCDC1\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.vos = Field(\"vos\", \"Regulator voltage\
    \ scaling output\n                          selection\", self._address, 14, 0x0003,\
    \ 2, proxy)\n            self.oden = Field(\"oden\", \"Over-drive enable\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.odswen = Field(\"odswen\", \"Over-drive\
    \ switching\n                          enabled\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.uden = Field(\"uden\", \"Under-drive enable in stop\n\
    \                          mode\", self._address, 18, 0x0003, 2, proxy)\n    \
    \        self.fmssr = Field(\"fmssr\", \"Flash Memory Stop while System\n    \
    \                      Run\", self._address, 20, 0x0001, 1, proxy)\n         \
    \   self.fissr = Field(\"fissr\", \"Flash Interface Stop while System\n      \
    \                    Run\", self._address, 21, 0x0001, 1, proxy)\n    \n    class\
    \ CsrRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"CSR\", \"power control/status register\", address +\
    \ 0x0004, 32, \"\", 0x0000, proxy)\n            self.wuf = Field(\"wuf\", \"Wakeup\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n            self.sbf = Field(\"\
    sbf\", \"Standby flag\", self._address, 1, 0x0001, 1, proxy)\n            self.pvdo\
    \ = Field(\"pvdo\", \"PVD output\", self._address, 2, 0x0001, 1, proxy)\n    \
    \        self.brr = Field(\"brr\", \"Backup regulator ready\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.ewup2 = Field(\"ewup2\", \"Enable WKUP2\
    \ pin\", self._address, 7, 0x0001, 1, proxy)\n            self.ewup = Field(\"\
    ewup\", \"Enable WKUP pin\", self._address, 8, 0x0001, 1, proxy)\n           \
    \ self.bre = Field(\"bre\", \"Backup regulator enable\", self._address, 9, 0x0001,\
    \ 1, proxy)\n            self.vosrdy = Field(\"vosrdy\", \"Regulator voltage scaling\
    \ output\n                          selection ready bit\", self._address, 14,\
    \ 0x0001, 1, proxy)\n            self.odrdy = Field(\"odrdy\", \"Over-drive mode\
    \ ready\", self._address, 16, 0x0001, 1, proxy)\n            self.odswrdy = Field(\"\
    odswrdy\", \"Over-drive mode switching\n                          ready\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.udrdy = Field(\"udrdy\", \"Under-drive\
    \ ready flag\", self._address, 18, 0x0003, 2, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"pwr\", \"Power control\", 0x40007000)\n\
    \        self.cr = self.CrRegister(self.address, proxy)\n        self.csr = self.CsrRegister(self.address,\
    \ proxy)\n"
  name: PWR
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Quadspi(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"control register\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.prescaler = Field(\"prescaler\"\
    , \"Clock prescaler\", self._address, 24, 0x00FF, 8, proxy)\n            self.pmm\
    \ = Field(\"pmm\", \"Polling match mode\", self._address, 23, 0x0001, 1, proxy)\n\
    \            self.apms = Field(\"apms\", \"Automatic poll mode stop\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.toie = Field(\"toie\", \"TimeOut interrupt\
    \ enable\", self._address, 20, 0x0001, 1, proxy)\n            self.smie = Field(\"\
    smie\", \"Status match interrupt\n                          enable\", self._address,\
    \ 19, 0x0001, 1, proxy)\n            self.ftie = Field(\"ftie\", \"FIFO threshold\
    \ interrupt\n                          enable\", self._address, 18, 0x0001, 1,\
    \ proxy)\n            self.tcie = Field(\"tcie\", \"Transfer complete interrupt\n\
    \                          enable\", self._address, 17, 0x0001, 1, proxy)\n  \
    \          self.teie = Field(\"teie\", \"Transfer error interrupt\n          \
    \                enable\", self._address, 16, 0x0001, 1, proxy)\n            self.fthres\
    \ = Field(\"fthres\", \"IFO threshold level\", self._address, 8, 0x001F, 5, proxy)\n\
    \            self.fsel = Field(\"fsel\", \"FLASH memory selection\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.dfm = Field(\"dfm\", \"Dual-flash mode\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.sshift = Field(\"sshift\"\
    , \"Sample shift\", self._address, 4, 0x0001, 1, proxy)\n            self.tcen\
    \ = Field(\"tcen\", \"Timeout counter enable\", self._address, 3, 0x0001, 1, proxy)\n\
    \            self.dmaen = Field(\"dmaen\", \"DMA enable\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.abort = Field(\"abort\", \"Abort request\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.en = Field(\"en\", \"Enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class DcrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DCR\", \"device configuration\
    \ register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.fsize = Field(\"fsize\", \"FLASH memory size\", self._address, 16, 0x001F,\
    \ 5, proxy)\n            self.csht = Field(\"csht\", \"Chip select high time\"\
    , self._address, 8, 0x0007, 3, proxy)\n            self.ckmode = Field(\"ckmode\"\
    , \"Mode 0 / mode 3\", self._address, 0, 0x0001, 1, proxy)\n    \n    class SrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SR\", \"status register\", address + 0x0008, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.flevel = Field(\"flevel\", \"FIFO level\", self._address, 8,\
    \ 0x007F, 7, proxy)\n            self.busy = Field(\"busy\", \"Busy\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.tof = Field(\"tof\", \"Timeout flag\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.smf = Field(\"smf\", \"\
    Status match flag\", self._address, 3, 0x0001, 1, proxy)\n            self.ftf\
    \ = Field(\"ftf\", \"FIFO threshold flag\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.tcf = Field(\"tcf\", \"Transfer complete flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.tef = Field(\"tef\", \"Transfer error\
    \ flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class FcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FCR\", \"flag clear register\", address + 0x000C, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.ctof = Field(\"ctof\", \"Clear timeout flag\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.csmf = Field(\"csmf\", \"Clear status\
    \ match flag\", self._address, 3, 0x0001, 1, proxy)\n            self.ctcf = Field(\"\
    ctcf\", \"Clear transfer complete\n                          flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ctef = Field(\"ctef\", \"Clear transfer\
    \ error flag\", self._address, 0, 0x0001, 1, proxy)\n    \n    class DlrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DLR\", \"data length register\", address + 0x0010, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.dl = Field(\"dl\", \"Data length\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class CcrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CCR\", \"communication\
    \ configuration\n              register\", address + 0x0014, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.ddrm = Field(\"ddrm\", \"Double data rate mode\"\
    , self._address, 31, 0x0001, 1, proxy)\n            self.dhhc = Field(\"dhhc\"\
    , \"DDR hold half cycle\", self._address, 30, 0x0001, 1, proxy)\n            self.sioo\
    \ = Field(\"sioo\", \"Send instruction only once\n                          mode\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.fmode = Field(\"fmode\"\
    , \"Functional mode\", self._address, 26, 0x0003, 2, proxy)\n            self.dmode\
    \ = Field(\"dmode\", \"Data mode\", self._address, 24, 0x0003, 2, proxy)\n   \
    \         self.dcyc = Field(\"dcyc\", \"Number of dummy cycles\", self._address,\
    \ 18, 0x001F, 5, proxy)\n            self.absize = Field(\"absize\", \"Alternate\
    \ bytes size\", self._address, 16, 0x0003, 2, proxy)\n            self.abmode\
    \ = Field(\"abmode\", \"Alternate bytes mode\", self._address, 14, 0x0003, 2,\
    \ proxy)\n            self.adsize = Field(\"adsize\", \"Address size\", self._address,\
    \ 12, 0x0003, 2, proxy)\n            self.admode = Field(\"admode\", \"Address\
    \ mode\", self._address, 10, 0x0003, 2, proxy)\n            self.imode = Field(\"\
    imode\", \"Instruction mode\", self._address, 8, 0x0003, 2, proxy)\n         \
    \   self.instruction = Field(\"instruction\", \"Instruction\", self._address,\
    \ 0, 0x00FF, 8, proxy)\n    \n    class ArRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"AR\", \"address register\"\
    , address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n            self.address\
    \ = Field(\"address\", \"Address\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n\
    \    \n    class AbrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ABR\", \"ABR\", address + 0x001C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.alternate = Field(\"alternate\", \"ALTERNATE\"\
    , self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class DrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    DR\", \"data register\", address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.data = Field(\"data\", \"Data\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class PsmkrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSMKR\", \"polling status mask\
    \ register\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.mask = Field(\"mask\", \"Status mask\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class PsmarRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PSMAR\", \"polling status match\
    \ register\", address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.match = Field(\"match\", \"Status match\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class PirRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PIR\", \"polling interval register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.interval\
    \ = Field(\"interval\", \"Polling interval\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    class LptrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"LPTR\", \"low-power timeout register\"\
    , address + 0x0030, 32, \"read-write\", 0x0000, proxy)\n            self.timeout\
    \ = Field(\"timeout\", \"Timeout period\", self._address, 0, 0xFFFF, 16, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"quadspi\", \"\
    QuadSPI interface\", 0xA0001000)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.dcr = self.DcrRegister(self.address, proxy)\n        self.sr\
    \ = self.SrRegister(self.address, proxy)\n        self.fcr = self.FcrRegister(self.address,\
    \ proxy)\n        self.dlr = self.DlrRegister(self.address, proxy)\n        self.ccr\
    \ = self.CcrRegister(self.address, proxy)\n        self.ar = self.ArRegister(self.address,\
    \ proxy)\n        self.abr = self.AbrRegister(self.address, proxy)\n        self.dr\
    \ = self.DrRegister(self.address, proxy)\n        self.psmkr = self.PsmkrRegister(self.address,\
    \ proxy)\n        self.psmar = self.PsmarRegister(self.address, proxy)\n     \
    \   self.pir = self.PirRegister(self.address, proxy)\n        self.lptr = self.LptrRegister(self.address,\
    \ proxy)\n"
  name: QUADSPI
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Spdif_rx(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"Control register\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.spdifen = Field(\"spdifen\"\
    , \"Peripheral Block Enable\", self._address, 0, 0x0003, 2, proxy)\n         \
    \   self.rxdmaen = Field(\"rxdmaen\", \"Receiver DMA ENable for data\n       \
    \                   flow\", self._address, 2, 0x0001, 1, proxy)\n            self.rxsteo\
    \ = Field(\"rxsteo\", \"STerEO Mode\", self._address, 3, 0x0001, 1, proxy)\n \
    \           self.drfmt = Field(\"drfmt\", \"RX Data format\", self._address, 4,\
    \ 0x0003, 2, proxy)\n            self.pmsk = Field(\"pmsk\", \"Mask Parity error\
    \ bit\", self._address, 6, 0x0001, 1, proxy)\n            self.vmsk = Field(\"\
    vmsk\", \"Mask of Validity bit\", self._address, 7, 0x0001, 1, proxy)\n      \
    \      self.cumsk = Field(\"cumsk\", \"Mask of channel status and user\n     \
    \                     bits\", self._address, 8, 0x0001, 1, proxy)\n          \
    \  self.ptmsk = Field(\"ptmsk\", \"Mask of Preamble Type bits\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.cbdmaen = Field(\"cbdmaen\", \"Control\
    \ Buffer DMA ENable for control\n                          flow\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.chsel = Field(\"chsel\", \"Channel Selection\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.nbtr = Field(\"nbtr\"\
    , \"Maximum allowed re-tries during\n                          synchronization\
    \ phase\", self._address, 12, 0x0003, 2, proxy)\n            self.wfa = Field(\"\
    wfa\", \"Wait For Activity\", self._address, 14, 0x0001, 1, proxy)\n         \
    \   self.insel = Field(\"insel\", \"input selection\", self._address, 16, 0x0007,\
    \ 3, proxy)\n    \n    class ImrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"IMR\", \"Interrupt mask register\"\
    , address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.rxneie\
    \ = Field(\"rxneie\", \"RXNE interrupt enable\", self._address, 0, 0x0001, 1,\
    \ proxy)\n            self.csrneie = Field(\"csrneie\", \"Control Buffer Ready\
    \ Interrupt\n                          Enable\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.perrie = Field(\"perrie\", \"Parity error interrupt\n\
    \                          enable\", self._address, 2, 0x0001, 1, proxy)\n   \
    \         self.ovrie = Field(\"ovrie\", \"Overrun error Interrupt\n          \
    \                Enable\", self._address, 3, 0x0001, 1, proxy)\n            self.sblkie\
    \ = Field(\"sblkie\", \"Synchronization Block Detected Interrupt\n           \
    \               Enable\", self._address, 4, 0x0001, 1, proxy)\n            self.syncdie\
    \ = Field(\"syncdie\", \"Synchronization Done\", self._address, 5, 0x0001, 1,\
    \ proxy)\n            self.ifeie = Field(\"ifeie\", \"Serial Interface Error Interrupt\n\
    \                          Enable\", self._address, 6, 0x0001, 1, proxy)\n   \
    \ \n    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status register\", address + 0x0008, 32,\
    \ \"read-only\", 0x0000, proxy)\n            self.rxne = Field(\"rxne\", \"Read\
    \ data register not\n                          empty\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.csrne = Field(\"csrne\", \"Control Buffer register\
    \ is not\n                          empty\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.perr = Field(\"perr\", \"Parity error\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.ovr = Field(\"ovr\", \"Overrun error\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.sbd = Field(\"sbd\", \"Synchronization\
    \ Block\n                          Detected\", self._address, 4, 0x0001, 1, proxy)\n\
    \            self.syncd = Field(\"syncd\", \"Synchronization Done\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.ferr = Field(\"ferr\", \"Framing error\"\
    , self._address, 6, 0x0001, 1, proxy)\n            self.serr = Field(\"serr\"\
    , \"Synchronization error\", self._address, 7, 0x0001, 1, proxy)\n           \
    \ self.terr = Field(\"terr\", \"Time-out error\", self._address, 8, 0x0001, 1,\
    \ proxy)\n            self.width5 = Field(\"width5\", \"Duration of 5 symbols\
    \ counted with\n                          SPDIF_CLK\", self._address, 16, 0x7FFF,\
    \ 15, proxy)\n    \n    class IfcrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"IFCR\", \"Interrupt Flag Clear\
    \ register\", address + 0x000C, 32, \"write-only\", 0x0000, proxy)\n         \
    \   self.perrcf = Field(\"perrcf\", \"Clears the Parity error\n              \
    \            flag\", self._address, 2, 0x0001, 1, proxy)\n            self.ovrcf\
    \ = Field(\"ovrcf\", \"Clears the Overrun error\n                          flag\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.sbdcf = Field(\"sbdcf\"\
    , \"Clears the Synchronization Block\n                          Detected flag\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.syncdcf = Field(\"syncdcf\"\
    , \"Clears the Synchronization Done\n                          flag\", self._address,\
    \ 5, 0x0001, 1, proxy)\n    \n    class DrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DR\", \"Data input register\"\
    , address + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.dr = Field(\"\
    dr\", \"Parity Error bit\", self._address, 0, 0xFFFFFF, 24, proxy)\n         \
    \   self.pe = Field(\"pe\", \"Parity Error bit\", self._address, 24, 0x0001, 1,\
    \ proxy)\n            self.v = Field(\"v\", \"Validity bit\", self._address, 25,\
    \ 0x0001, 1, proxy)\n            self.u = Field(\"u\", \"User bit\", self._address,\
    \ 26, 0x0001, 1, proxy)\n            self.c = Field(\"c\", \"Channel Status bit\"\
    , self._address, 27, 0x0001, 1, proxy)\n            self.pt = Field(\"pt\", \"\
    Preamble Type\", self._address, 28, 0x0003, 2, proxy)\n    \n    class CsrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CSR\", \"Channel Status register\", address + 0x0014, 32, \"read-only\", 0x0000,\
    \ proxy)\n            self.usr = Field(\"usr\", \"User data information\", self._address,\
    \ 0, 0xFFFF, 16, proxy)\n            self.cs = Field(\"cs\", \"Channel A status\n\
    \                          information\", self._address, 16, 0x00FF, 8, proxy)\n\
    \            self.sob = Field(\"sob\", \"Start Of Block\", self._address, 24,\
    \ 0x0001, 1, proxy)\n    \n    class DirRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DIR\", \"Debug Information\
    \ register\", address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n          \
    \  self.thi = Field(\"thi\", \"Threshold HIGH\", self._address, 0, 0x1FFF, 13,\
    \ proxy)\n            self.tlo = Field(\"tlo\", \"Threshold LOW\", self._address,\
    \ 16, 0x1FFF, 13, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    spdif_rx\", \"Receiver Interface\", 0x40004000)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.imr = self.ImrRegister(self.address, proxy)\n        self.sr\
    \ = self.SrRegister(self.address, proxy)\n        self.ifcr = self.IfcrRegister(self.address,\
    \ proxy)\n        self.dr = self.DrRegister(self.address, proxy)\n        self.csr\
    \ = self.CsrRegister(self.address, proxy)\n        self.dir = self.DirRegister(self.address,\
    \ proxy)\n"
  name: SPDIF_RX
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Hdmi_cec(Peripheral):\n\
    \    class Cec_crRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CEC_CR\", \"CEC control register\", address +\
    \ 0x0000, 32, \"\", 0x0000, proxy)\n            self.txeom = Field(\"txeom\",\
    \ \"Tx End Of Message\", self._address, 2, 0x0001, 1, proxy)\n            self.txsom\
    \ = Field(\"txsom\", \"Tx Start Of Message\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.cecen = Field(\"cecen\", \"CEC Enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n    \n    class Cec_cfgrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CEC_CFGR\", \"CEC configuration\
    \ register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n         \
    \   self.lstn = Field(\"lstn\", \"Listen mode\", self._address, 31, 0x0001, 1,\
    \ proxy)\n            self.oar = Field(\"oar\", \"Own addresses\n            \
    \              configuration\", self._address, 16, 0x7FFF, 15, proxy)\n      \
    \      self.sftop = Field(\"sftop\", \"SFT Option Bit\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.brdnogen = Field(\"brdnogen\", \"Avoid Error-Bit\
    \ Generation in\n                          Broadcast\", self._address, 7, 0x0001,\
    \ 1, proxy)\n            self.lbpegen = Field(\"lbpegen\", \"Generate Error-Bit\
    \ on Long Bit Period\n                          Error\", self._address, 6, 0x0001,\
    \ 1, proxy)\n            self.bregen = Field(\"bregen\", \"Generate Error-Bit\
    \ on Bit Rising\n                          Error\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.brestp = Field(\"brestp\", \"Rx-Stop on Bit Rising\n\
    \                          Error\", self._address, 4, 0x0001, 1, proxy)\n    \
    \        self.rxtol = Field(\"rxtol\", \"Rx-Tolerance\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.sft = Field(\"sft\", \"Signal Free Time\", self._address,\
    \ 0, 0x0007, 3, proxy)\n    \n    class Cec_txdrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CEC_TXDR\",\
    \ \"CEC Tx data register\", address + 0x0008, 32, \"write-only\", 0x0000, proxy)\n\
    \            self.txd = Field(\"txd\", \"Tx Data register\", self._address, 0,\
    \ 0x00FF, 8, proxy)\n    \n    class Cec_rxdrRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CEC_RXDR\",\
    \ \"CEC Rx Data Register\", address + 0x000C, 32, \"read-only\", 0x0000, proxy)\n\
    \            self.rxd = Field(\"rxd\", \"Rx Data register\", self._address, 0,\
    \ 0x00FF, 8, proxy)\n    \n    class Cec_isrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CEC_ISR\", \"CEC Interrupt\
    \ and Status\n              Register\", address + 0x0010, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.txacke = Field(\"txacke\", \"Tx-Missing Acknowledge\n\
    \                          Error\", self._address, 12, 0x0001, 1, proxy)\n   \
    \         self.txerr = Field(\"txerr\", \"Tx-Error\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.txudr = Field(\"txudr\", \"Tx-Buffer Underrun\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.txend = Field(\"txend\"\
    , \"End of Transmission\", self._address, 9, 0x0001, 1, proxy)\n            self.txbr\
    \ = Field(\"txbr\", \"Tx-Byte Request\", self._address, 8, 0x0001, 1, proxy)\n\
    \            self.arblst = Field(\"arblst\", \"Arbitration Lost\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.rxacke = Field(\"rxacke\", \"Rx-Missing\
    \ Acknowledge\", self._address, 6, 0x0001, 1, proxy)\n            self.lbpe =\
    \ Field(\"lbpe\", \"Rx-Long Bit Period Error\", self._address, 5, 0x0001, 1, proxy)\n\
    \            self.sbpe = Field(\"sbpe\", \"Rx-Short Bit Period Error\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.bre = Field(\"bre\", \"Rx-Bit Rising\
    \ Error\", self._address, 3, 0x0001, 1, proxy)\n            self.rxovr = Field(\"\
    rxovr\", \"Rx-Overrun\", self._address, 2, 0x0001, 1, proxy)\n            self.rxend\
    \ = Field(\"rxend\", \"End Of Reception\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.rxbr = Field(\"rxbr\", \"Rx-Byte Received\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    class Cec_ierRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"CEC_IER\", \"\
    CEC interrupt enable register\", address + 0x0014, 32, \"read-write\", 0x0000,\
    \ proxy)\n            self.txackie = Field(\"txackie\", \"Tx-Missing Acknowledge\
    \ Error Interrupt\n                          Enable\", self._address, 12, 0x0001,\
    \ 1, proxy)\n            self.txerrie = Field(\"txerrie\", \"Tx-Error Interrupt\
    \ Enable\", self._address, 11, 0x0001, 1, proxy)\n            self.txudrie = Field(\"\
    txudrie\", \"Tx-Underrun Interrupt\n                          Enable\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.txendie = Field(\"txendie\", \"Tx-End\
    \ Of Message Interrupt\n                          Enable\", self._address, 9,\
    \ 0x0001, 1, proxy)\n            self.txbrie = Field(\"txbrie\", \"Tx-Byte Request\
    \ Interrupt\n                          Enable\", self._address, 8, 0x0001, 1,\
    \ proxy)\n            self.arblstie = Field(\"arblstie\", \"Arbitration Lost Interrupt\n\
    \                          Enable\", self._address, 7, 0x0001, 1, proxy)\n   \
    \         self.rxackie = Field(\"rxackie\", \"Rx-Missing Acknowledge Error Interrupt\n\
    \                          Enable\", self._address, 6, 0x0001, 1, proxy)\n   \
    \         self.lbpeie = Field(\"lbpeie\", \"Long Bit Period Error Interrupt\n\
    \                          Enable\", self._address, 5, 0x0001, 1, proxy)\n   \
    \         self.sbpeie = Field(\"sbpeie\", \"Short Bit Period Error Interrupt\n\
    \                          Enable\", self._address, 4, 0x0001, 1, proxy)\n   \
    \         self.breie = Field(\"breie\", \"Bit Rising Error Interrupt\n       \
    \                   Enable\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.rxovrie = Field(\"rxovrie\", \"Rx-Buffer Overrun Interrupt\n         \
    \                 Enable\", self._address, 2, 0x0001, 1, proxy)\n            self.rxendie\
    \ = Field(\"rxendie\", \"End Of Reception Interrupt\n                        \
    \  Enable\", self._address, 1, 0x0001, 1, proxy)\n            self.rxbrie = Field(\"\
    rxbrie\", \"Rx-Byte Received Interrupt\n                          Enable\", self._address,\
    \ 0, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    hdmi_cec\", \"HDMI-CEC controller\", 0x40006C00)\n        self.cec_cr = self.Cec_crRegister(self.address,\
    \ proxy)\n        self.cec_cfgr = self.Cec_cfgrRegister(self.address, proxy)\n\
    \        self.cec_txdr = self.Cec_txdrRegister(self.address, proxy)\n        self.cec_rxdr\
    \ = self.Cec_rxdrRegister(self.address, proxy)\n        self.cec_isr = self.Cec_isrRegister(self.address,\
    \ proxy)\n        self.cec_ier = self.Cec_ierRegister(self.address, proxy)\n"
  name: HDMI_CEC
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Fpu(Peripheral):\n\
    \    class FpccrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"FPCCR\", \"Floating-point context control\n  \
    \            register\", address + 0x0000, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.lspact = Field(\"lspact\", \"LSPACT\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.user = Field(\"user\", \"USER\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.thread = Field(\"thread\", \"THREAD\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.hfrdy = Field(\"hfrdy\"\
    , \"HFRDY\", self._address, 4, 0x0001, 1, proxy)\n            self.mmrdy = Field(\"\
    mmrdy\", \"MMRDY\", self._address, 5, 0x0001, 1, proxy)\n            self.bfrdy\
    \ = Field(\"bfrdy\", \"BFRDY\", self._address, 6, 0x0001, 1, proxy)\n        \
    \    self.monrdy = Field(\"monrdy\", \"MONRDY\", self._address, 8, 0x0001, 1,\
    \ proxy)\n            self.lspen = Field(\"lspen\", \"LSPEN\", self._address,\
    \ 30, 0x0001, 1, proxy)\n            self.aspen = Field(\"aspen\", \"ASPEN\",\
    \ self._address, 31, 0x0001, 1, proxy)\n    \n    class FpcarRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FPCAR\", \"Floating-point context address\n              register\", address +\
    \ 0x0004, 32, \"read-write\", 0x0000, proxy)\n            self.address = Field(\"\
    address\", \"Location of unpopulated\n                          floating-point\"\
    , self._address, 3, 0x1FFFFFFF, 29, proxy)\n    \n    class FpscrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    FPSCR\", \"Floating-point status control\n              register\", address +\
    \ 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.ioc = Field(\"\
    ioc\", \"Invalid operation cumulative exception\n                          bit\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.dzc = Field(\"dzc\", \"\
    Division by zero cumulative exception\n                          bit.\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.ofc = Field(\"ofc\", \"Overflow cumulative\
    \ exception\n                          bit\", self._address, 2, 0x0001, 1, proxy)\n\
    \            self.ufc = Field(\"ufc\", \"Underflow cumulative exception\n    \
    \                      bit\", self._address, 3, 0x0001, 1, proxy)\n          \
    \  self.ixc = Field(\"ixc\", \"Inexact cumulative exception\n                \
    \          bit\", self._address, 4, 0x0001, 1, proxy)\n            self.idc =\
    \ Field(\"idc\", \"Input denormal cumulative exception\n                     \
    \     bit.\", self._address, 7, 0x0001, 1, proxy)\n            self.rmode = Field(\"\
    rmode\", \"Rounding Mode control\n                          field\", self._address,\
    \ 22, 0x0003, 2, proxy)\n            self.fz = Field(\"fz\", \"Flush-to-zero mode\
    \ control\n                          bit:\", self._address, 24, 0x0001, 1, proxy)\n\
    \            self.dn = Field(\"dn\", \"Default NaN mode control\n            \
    \              bit\", self._address, 25, 0x0001, 1, proxy)\n            self.ahp\
    \ = Field(\"ahp\", \"Alternative half-precision control\n                    \
    \      bit\", self._address, 26, 0x0001, 1, proxy)\n            self.v = Field(\"\
    v\", \"Overflow condition code\n                          flag\", self._address,\
    \ 28, 0x0001, 1, proxy)\n            self.c = Field(\"c\", \"Carry condition code\
    \ flag\", self._address, 29, 0x0001, 1, proxy)\n            self.z = Field(\"\
    z\", \"Zero condition code flag\", self._address, 30, 0x0001, 1, proxy)\n    \
    \        self.n = Field(\"n\", \"Negative condition code\n                   \
    \       flag\", self._address, 31, 0x0001, 1, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"fpu\", \"Floting point unit\", 0xE000EF34)\n\
    \        self.fpccr = self.FpccrRegister(self.address, proxy)\n        self.fpcar\
    \ = self.FpcarRegister(self.address, proxy)\n        self.fpscr = self.FpscrRegister(self.address,\
    \ proxy)\n"
  name: FPU
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Mpu(Peripheral):\n\
    \    class Mpu_typerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"MPU_TYPER\", \"MPU type register\", address +\
    \ 0x0000, 32, \"read-only\", 0x0800, proxy)\n            self.separate = Field(\"\
    separate\", \"Separate flag\", self._address, 0, 0x0001, 1, proxy)\n         \
    \   self.dregion = Field(\"dregion\", \"Number of MPU data regions\", self._address,\
    \ 8, 0x00FF, 8, proxy)\n            self.iregion = Field(\"iregion\", \"Number\
    \ of MPU instruction\n                          regions\", self._address, 16,\
    \ 0x00FF, 8, proxy)\n    \n    class Mpu_ctrlRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"MPU_CTRL\",\
    \ \"MPU control register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.enable = Field(\"enable\", \"Enables the MPU\", self._address,\
    \ 0, 0x0001, 1, proxy)\n            self.hfnmiena = Field(\"hfnmiena\", \"Enables\
    \ the operation of MPU during hard\n                          fault\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.privdefena = Field(\"privdefena\", \"\
    Enable priviliged software access to\n                          default memory\
    \ map\", self._address, 2, 0x0001, 1, proxy)\n    \n    class Mpu_rnrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    MPU_RNR\", \"MPU region number register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.region = Field(\"region\", \"MPU region\",\
    \ self._address, 0, 0x00FF, 8, proxy)\n    \n    class Mpu_rbarRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    MPU_RBAR\", \"MPU region base address\n              register\", address + 0x000C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.region = Field(\"region\"\
    , \"MPU region field\", self._address, 0, 0x000F, 4, proxy)\n            self.valid\
    \ = Field(\"valid\", \"MPU region number valid\", self._address, 4, 0x0001, 1,\
    \ proxy)\n            self.addr = Field(\"addr\", \"Region base address field\"\
    , self._address, 5, 0x7FFFFFF, 27, proxy)\n    \n    class Mpu_rasrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    MPU_RASR\", \"MPU region attribute and size\n              register\", address\
    \ + 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.enable = Field(\"\
    enable\", \"Region enable bit.\", self._address, 0, 0x0001, 1, proxy)\n      \
    \      self.size = Field(\"size\", \"Size of the MPU protection\n            \
    \              region\", self._address, 1, 0x001F, 5, proxy)\n            self.srd\
    \ = Field(\"srd\", \"Subregion disable bits\", self._address, 8, 0x00FF, 8, proxy)\n\
    \            self.b = Field(\"b\", \"memory attribute\", self._address, 16, 0x0001,\
    \ 1, proxy)\n            self.c = Field(\"c\", \"memory attribute\", self._address,\
    \ 17, 0x0001, 1, proxy)\n            self.s = Field(\"s\", \"Shareable memory\
    \ attribute\", self._address, 18, 0x0001, 1, proxy)\n            self.tex = Field(\"\
    tex\", \"memory attribute\", self._address, 19, 0x0007, 3, proxy)\n          \
    \  self.ap = Field(\"ap\", \"Access permission\", self._address, 24, 0x0007, 3,\
    \ proxy)\n            self.xn = Field(\"xn\", \"Instruction access disable\n \
    \                         bit\", self._address, 28, 0x0001, 1, proxy)\n    \n\
    \    def __init__(self, proxy):\n        super().__init__(\"mpu\", \"Memory protection\
    \ unit\", 0xE000ED90)\n        self.mpu_typer = self.Mpu_typerRegister(self.address,\
    \ proxy)\n        self.mpu_ctrl = self.Mpu_ctrlRegister(self.address, proxy)\n\
    \        self.mpu_rnr = self.Mpu_rnrRegister(self.address, proxy)\n        self.mpu_rbar\
    \ = self.Mpu_rbarRegister(self.address, proxy)\n        self.mpu_rasr = self.Mpu_rasrRegister(self.address,\
    \ proxy)\n"
  name: MPU
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Stk(Peripheral):\n\
    \    class CtrlRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CTRL\", \"SysTick control and status\n       \
    \       register\", address + 0x0000, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.enable = Field(\"enable\", \"Counter enable\", self._address, 0,\
    \ 0x0001, 1, proxy)\n            self.tickint = Field(\"tickint\", \"SysTick exception\
    \ request\n                          enable\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.clksource = Field(\"clksource\", \"Clock source selection\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.countflag = Field(\"countflag\"\
    , \"COUNTFLAG\", self._address, 16, 0x0001, 1, proxy)\n    \n    class LoadRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    LOAD\", \"SysTick reload value register\", address + 0x0004, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.reload = Field(\"reload\", \"RELOAD value\"\
    , self._address, 0, 0xFFFFFF, 24, proxy)\n    \n    class ValRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    VAL\", \"SysTick current value register\", address + 0x0008, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.current = Field(\"current\", \"Current counter\
    \ value\", self._address, 0, 0xFFFFFF, 24, proxy)\n    \n    class CalibRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CALIB\", \"SysTick calibration value\n              register\", address + 0x000C,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.tenms = Field(\"tenms\"\
    , \"Calibration value\", self._address, 0, 0xFFFFFF, 24, proxy)\n            self.skew\
    \ = Field(\"skew\", \"SKEW flag: Indicates whether the TENMS\n               \
    \           value is exact\", self._address, 30, 0x0001, 1, proxy)\n         \
    \   self.noref = Field(\"noref\", \"NOREF flag. Reads as zero\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    def __init__(self, proxy):\n        super().__init__(\"\
    stk\", \"SysTick timer\", 0xE000E010)\n        self.ctrl = self.CtrlRegister(self.address,\
    \ proxy)\n        self.load = self.LoadRegister(self.address, proxy)\n       \
    \ self.val = self.ValRegister(self.address, proxy)\n        self.calib = self.CalibRegister(self.address,\
    \ proxy)\n"
  name: STK
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Scb(Peripheral):\n\
    \    class CpuidRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CPUID\", \"CPUID base register\", address + 0x0000,\
    \ 32, \"read-only\", 0x410FC241, proxy)\n            self.revision = Field(\"\
    revision\", \"Revision number\", self._address, 0, 0x000F, 4, proxy)\n       \
    \     self.partno = Field(\"partno\", \"Part number of the\n                 \
    \         processor\", self._address, 4, 0x0FFF, 12, proxy)\n            self.constant\
    \ = Field(\"constant\", \"Reads as 0xF\", self._address, 16, 0x000F, 4, proxy)\n\
    \            self.variant = Field(\"variant\", \"Variant number\", self._address,\
    \ 20, 0x000F, 4, proxy)\n            self.implementer = Field(\"implementer\"\
    , \"Implementer code\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class\
    \ IcsrRegister(Register):\n        def __init__(self, address, proxy):\n     \
    \       super().__init__(\"ICSR\", \"Interrupt control and state\n           \
    \   register\", address + 0x0004, 32, \"read-write\", 0x0000, proxy)\n       \
    \     self.vectactive = Field(\"vectactive\", \"Active vector\", self._address,\
    \ 0, 0x01FF, 9, proxy)\n            self.rettobase = Field(\"rettobase\", \"Return\
    \ to base level\", self._address, 11, 0x0001, 1, proxy)\n            self.vectpending\
    \ = Field(\"vectpending\", \"Pending vector\", self._address, 12, 0x007F, 7, proxy)\n\
    \            self.isrpending = Field(\"isrpending\", \"Interrupt pending flag\"\
    , self._address, 22, 0x0001, 1, proxy)\n            self.pendstclr = Field(\"\
    pendstclr\", \"SysTick exception clear-pending\n                          bit\"\
    , self._address, 25, 0x0001, 1, proxy)\n            self.pendstset = Field(\"\
    pendstset\", \"SysTick exception set-pending\n                          bit\"\
    , self._address, 26, 0x0001, 1, proxy)\n            self.pendsvclr = Field(\"\
    pendsvclr\", \"PendSV clear-pending bit\", self._address, 27, 0x0001, 1, proxy)\n\
    \            self.pendsvset = Field(\"pendsvset\", \"PendSV set-pending bit\"\
    , self._address, 28, 0x0001, 1, proxy)\n            self.nmipendset = Field(\"\
    nmipendset\", \"NMI set-pending bit.\", self._address, 31, 0x0001, 1, proxy)\n\
    \    \n    class VtorRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"VTOR\", \"Vector table offset register\"\
    , address + 0x0008, 32, \"read-write\", 0x0000, proxy)\n            self.tbloff\
    \ = Field(\"tbloff\", \"Vector table base offset\n                          field\"\
    , self._address, 9, 0x1FFFFF, 21, proxy)\n    \n    class AircrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    AIRCR\", \"Application interrupt and reset control\n              register\",\
    \ address + 0x000C, 32, \"read-write\", 0x0000, proxy)\n            self.vectreset\
    \ = Field(\"vectreset\", \"VECTRESET\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.vectclractive = Field(\"vectclractive\", \"VECTCLRACTIVE\",\
    \ self._address, 1, 0x0001, 1, proxy)\n            self.sysresetreq = Field(\"\
    sysresetreq\", \"SYSRESETREQ\", self._address, 2, 0x0001, 1, proxy)\n        \
    \    self.prigroup = Field(\"prigroup\", \"PRIGROUP\", self._address, 8, 0x0007,\
    \ 3, proxy)\n            self.endianess = Field(\"endianess\", \"ENDIANESS\",\
    \ self._address, 15, 0x0001, 1, proxy)\n            self.vectkeystat = Field(\"\
    vectkeystat\", \"Register key\", self._address, 16, 0xFFFF, 16, proxy)\n    \n\
    \    class ScrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SCR\", \"System control register\", address +\
    \ 0x0010, 32, \"read-write\", 0x0000, proxy)\n            self.sleeponexit = Field(\"\
    sleeponexit\", \"SLEEPONEXIT\", self._address, 1, 0x0001, 1, proxy)\n        \
    \    self.sleepdeep = Field(\"sleepdeep\", \"SLEEPDEEP\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.seveonpend = Field(\"seveonpend\", \"Send Event\
    \ on Pending bit\", self._address, 4, 0x0001, 1, proxy)\n    \n    class CcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CCR\", \"Configuration and control\n              register\", address + 0x0014,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.nonbasethrdena = Field(\"\
    nonbasethrdena\", \"Configures how the processor enters\n                    \
    \      Thread mode\", self._address, 0, 0x0001, 1, proxy)\n            self.usersetmpend\
    \ = Field(\"usersetmpend\", \"USERSETMPEND\", self._address, 1, 0x0001, 1, proxy)\n\
    \            self.unalign__trp = Field(\"unalign__trp\", \"UNALIGN_ TRP\", self._address,\
    \ 3, 0x0001, 1, proxy)\n            self.div_0_trp = Field(\"div_0_trp\", \"DIV_0_TRP\"\
    , self._address, 4, 0x0001, 1, proxy)\n            self.bfhfnmign = Field(\"bfhfnmign\"\
    , \"BFHFNMIGN\", self._address, 8, 0x0001, 1, proxy)\n            self.stkalign\
    \ = Field(\"stkalign\", \"STKALIGN\", self._address, 9, 0x0001, 1, proxy)\n  \
    \  \n    class Shpr1Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SHPR1\", \"System handler priority\n         \
    \     registers\", address + 0x0018, 32, \"read-write\", 0x0000, proxy)\n    \
    \        self.pri_4 = Field(\"pri_4\", \"Priority of system handler\n        \
    \                  4\", self._address, 0, 0x00FF, 8, proxy)\n            self.pri_5\
    \ = Field(\"pri_5\", \"Priority of system handler\n                          5\"\
    , self._address, 8, 0x00FF, 8, proxy)\n            self.pri_6 = Field(\"pri_6\"\
    , \"Priority of system handler\n                          6\", self._address,\
    \ 16, 0x00FF, 8, proxy)\n    \n    class Shpr2Register(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"SHPR2\", \"\
    System handler priority\n              registers\", address + 0x001C, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.pri_11 = Field(\"pri_11\", \"Priority of system\
    \ handler\n                          11\", self._address, 24, 0x00FF, 8, proxy)\n\
    \    \n    class Shpr3Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"SHPR3\", \"System handler priority\n\
    \              registers\", address + 0x0020, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.pri_14 = Field(\"pri_14\", \"Priority of system handler\n  \
    \                        14\", self._address, 16, 0x00FF, 8, proxy)\n        \
    \    self.pri_15 = Field(\"pri_15\", \"Priority of system handler\n          \
    \                15\", self._address, 24, 0x00FF, 8, proxy)\n    \n    class ShcsrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    SHCSR\", \"System handler control and state\n              register\", address\
    \ + 0x0024, 32, \"read-write\", 0x0000, proxy)\n            self.memfaultact =\
    \ Field(\"memfaultact\", \"Memory management fault exception active\n        \
    \                  bit\", self._address, 0, 0x0001, 1, proxy)\n            self.busfaultact\
    \ = Field(\"busfaultact\", \"Bus fault exception active\n                    \
    \      bit\", self._address, 1, 0x0001, 1, proxy)\n            self.usgfaultact\
    \ = Field(\"usgfaultact\", \"Usage fault exception active\n                  \
    \        bit\", self._address, 3, 0x0001, 1, proxy)\n            self.svcallact\
    \ = Field(\"svcallact\", \"SVC call active bit\", self._address, 7, 0x0001, 1,\
    \ proxy)\n            self.monitoract = Field(\"monitoract\", \"Debug monitor\
    \ active bit\", self._address, 8, 0x0001, 1, proxy)\n            self.pendsvact\
    \ = Field(\"pendsvact\", \"PendSV exception active\n                         \
    \ bit\", self._address, 10, 0x0001, 1, proxy)\n            self.systickact = Field(\"\
    systickact\", \"SysTick exception active\n                          bit\", self._address,\
    \ 11, 0x0001, 1, proxy)\n            self.usgfaultpended = Field(\"usgfaultpended\"\
    , \"Usage fault exception pending\n                          bit\", self._address,\
    \ 12, 0x0001, 1, proxy)\n            self.memfaultpended = Field(\"memfaultpended\"\
    , \"Memory management fault exception\n                          pending bit\"\
    , self._address, 13, 0x0001, 1, proxy)\n            self.busfaultpended = Field(\"\
    busfaultpended\", \"Bus fault exception pending\n                          bit\"\
    , self._address, 14, 0x0001, 1, proxy)\n            self.svcallpended = Field(\"\
    svcallpended\", \"SVC call pending bit\", self._address, 15, 0x0001, 1, proxy)\n\
    \            self.memfaultena = Field(\"memfaultena\", \"Memory management fault\
    \ enable\n                          bit\", self._address, 16, 0x0001, 1, proxy)\n\
    \            self.busfaultena = Field(\"busfaultena\", \"Bus fault enable bit\"\
    , self._address, 17, 0x0001, 1, proxy)\n            self.usgfaultena = Field(\"\
    usgfaultena\", \"Usage fault enable bit\", self._address, 18, 0x0001, 1, proxy)\n\
    \    \n    class Cfsr_ufsr_bfsr_mmfsrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"CFSR_UFSR_BFSR_MMFSR\", \"\
    Configurable fault status\n              register\", address + 0x0028, 32, \"\
    read-write\", 0x0000, proxy)\n            self.iaccviol = Field(\"iaccviol\",\
    \ \"Instruction access violation\n                          flag\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.munstkerr = Field(\"munstkerr\", \"Memory\
    \ manager fault on unstacking for a\n                          return from exception\"\
    , self._address, 3, 0x0001, 1, proxy)\n            self.mstkerr = Field(\"mstkerr\"\
    , \"Memory manager fault on stacking for\n                          exception\
    \ entry.\", self._address, 4, 0x0001, 1, proxy)\n            self.mlsperr = Field(\"\
    mlsperr\", \"MLSPERR\", self._address, 5, 0x0001, 1, proxy)\n            self.mmarvalid\
    \ = Field(\"mmarvalid\", \"Memory Management Fault Address Register\n        \
    \                  (MMAR) valid flag\", self._address, 7, 0x0001, 1, proxy)\n\
    \            self.ibuserr = Field(\"ibuserr\", \"Instruction bus error\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.preciserr = Field(\"preciserr\", \"Precise\
    \ data bus error\", self._address, 9, 0x0001, 1, proxy)\n            self.impreciserr\
    \ = Field(\"impreciserr\", \"Imprecise data bus error\", self._address, 10, 0x0001,\
    \ 1, proxy)\n            self.unstkerr = Field(\"unstkerr\", \"Bus fault on unstacking\
    \ for a return\n                          from exception\", self._address, 11,\
    \ 0x0001, 1, proxy)\n            self.stkerr = Field(\"stkerr\", \"Bus fault on\
    \ stacking for exception\n                          entry\", self._address, 12,\
    \ 0x0001, 1, proxy)\n            self.lsperr = Field(\"lsperr\", \"Bus fault on\
    \ floating-point lazy state\n                          preservation\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.bfarvalid = Field(\"bfarvalid\", \"\
    Bus Fault Address Register (BFAR) valid\n                          flag\", self._address,\
    \ 15, 0x0001, 1, proxy)\n            self.undefinstr = Field(\"undefinstr\", \"\
    Undefined instruction usage\n                          fault\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.invstate = Field(\"invstate\", \"Invalid\
    \ state usage fault\", self._address, 17, 0x0001, 1, proxy)\n            self.invpc\
    \ = Field(\"invpc\", \"Invalid PC load usage\n                          fault\"\
    , self._address, 18, 0x0001, 1, proxy)\n            self.nocp = Field(\"nocp\"\
    , \"No coprocessor usage\n                          fault.\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.unaligned = Field(\"unaligned\", \"Unaligned\
    \ access usage\n                          fault\", self._address, 24, 0x0001,\
    \ 1, proxy)\n            self.divbyzero = Field(\"divbyzero\", \"Divide by zero\
    \ usage fault\", self._address, 25, 0x0001, 1, proxy)\n    \n    class HfsrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    HFSR\", \"Hard fault status register\", address + 0x002C, 32, \"read-write\",\
    \ 0x0000, proxy)\n            self.vecttbl = Field(\"vecttbl\", \"Vector table\
    \ hard fault\", self._address, 1, 0x0001, 1, proxy)\n            self.forced =\
    \ Field(\"forced\", \"Forced hard fault\", self._address, 30, 0x0001, 1, proxy)\n\
    \            self.debug_vt = Field(\"debug_vt\", \"Reserved for Debug use\", self._address,\
    \ 31, 0x0001, 1, proxy)\n    \n    class MmfarRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"MMFAR\", \"\
    Memory management fault address\n              register\", address + 0x0034, 32,\
    \ \"read-write\", 0x0000, proxy)\n            self.mmfar = Field(\"mmfar\", \"\
    Memory management fault\n                          address\", self._address, 0,\
    \ 0xFFFFFFFF, 32, proxy)\n    \n    class BfarRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"BFAR\", \"Bus\
    \ fault address register\", address + 0x0038, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.bfar = Field(\"bfar\", \"Bus fault address\", self._address,\
    \ 0, 0xFFFFFFFF, 32, proxy)\n    \n    class AfsrRegister(Register):\n       \
    \ def __init__(self, address, proxy):\n            super().__init__(\"AFSR\",\
    \ \"Auxiliary fault status\n              register\", address + 0x003C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.impdef = Field(\"impdef\", \"Implementation\
    \ defined\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"scb\", \"System control block\", 0xE000ED00)\n\
    \        self.cpuid = self.CpuidRegister(self.address, proxy)\n        self.icsr\
    \ = self.IcsrRegister(self.address, proxy)\n        self.vtor = self.VtorRegister(self.address,\
    \ proxy)\n        self.aircr = self.AircrRegister(self.address, proxy)\n     \
    \   self.scr = self.ScrRegister(self.address, proxy)\n        self.ccr = self.CcrRegister(self.address,\
    \ proxy)\n        self.shpr1 = self.Shpr1Register(self.address, proxy)\n     \
    \   self.shpr2 = self.Shpr2Register(self.address, proxy)\n        self.shpr3 =\
    \ self.Shpr3Register(self.address, proxy)\n        self.shcsr = self.ShcsrRegister(self.address,\
    \ proxy)\n        self.cfsr_ufsr_bfsr_mmfsr = self.Cfsr_ufsr_bfsr_mmfsrRegister(self.address,\
    \ proxy)\n        self.hfsr = self.HfsrRegister(self.address, proxy)\n       \
    \ self.mmfar = self.MmfarRegister(self.address, proxy)\n        self.bfar = self.BfarRegister(self.address,\
    \ proxy)\n        self.afsr = self.AfsrRegister(self.address, proxy)\n"
  name: SCB
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Nvic_stir(Peripheral):\n\
    \    class StirRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"STIR\", \"Software trigger interrupt\n       \
    \       register\", address + 0x0000, 32, \"read-write\", 0x0000, proxy)\n   \
    \         self.intid = Field(\"intid\", \"Software generated interrupt\n     \
    \                     ID\", self._address, 0, 0x01FF, 9, proxy)\n    \n    def\
    \ __init__(self, proxy):\n        super().__init__(\"nvic_stir\", \"Nested vectored\
    \ interrupt\n      controller\", 0xE000EF00)\n        self.stir = self.StirRegister(self.address,\
    \ proxy)\n"
  name: NVIC_STIR
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Fpu_cpacr(Peripheral):\n\
    \    class CpacrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CPACR\", \"Coprocessor access control\n      \
    \        register\", address + 0x0000, 32, \"read-write\", 0x0000, proxy)\n  \
    \          self.cp = Field(\"cp\", \"CP\", self._address, 20, 0x000F, 4, proxy)\n\
    \    \n    def __init__(self, proxy):\n        super().__init__(\"fpu_cpacr\"\
    , \"Floating point unit CPACR\", 0xE000ED88)\n        self.cpacr = self.CpacrRegister(self.address,\
    \ proxy)\n"
  name: FPU_CPACR
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Scb_actrl(Peripheral):\n\
    \    class ActrlRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ACTRL\", \"Auxiliary control register\", address\
    \ + 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.dismcycint =\
    \ Field(\"dismcycint\", \"DISMCYCINT\", self._address, 0, 0x0001, 1, proxy)\n\
    \            self.disdefwbuf = Field(\"disdefwbuf\", \"DISDEFWBUF\", self._address,\
    \ 1, 0x0001, 1, proxy)\n            self.disfold = Field(\"disfold\", \"DISFOLD\"\
    , self._address, 2, 0x0001, 1, proxy)\n            self.disfpca = Field(\"disfpca\"\
    , \"DISFPCA\", self._address, 8, 0x0001, 1, proxy)\n            self.disoofp =\
    \ Field(\"disoofp\", \"DISOOFP\", self._address, 9, 0x0001, 1, proxy)\n    \n\
    \    def __init__(self, proxy):\n        super().__init__(\"scb_actrl\", \"System\
    \ control block ACTLR\", 0xE000E008)\n        self.actrl = self.ActrlRegister(self.address,\
    \ proxy)\n"
  name: SCB_ACTRL
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Sdio(Peripheral):\n\
    \    class PowerRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"POWER\", \"power control register\", address +\
    \ 0x0000, 32, \"read-write\", 0x0000, proxy)\n            self.pwrctrl = Field(\"\
    pwrctrl\", \"PWRCTRL\", self._address, 0, 0x0003, 2, proxy)\n    \n    class ClkcrRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    CLKCR\", \"SDI clock control register\", address + 0x0004, 32, \"read-write\"\
    , 0x0000, proxy)\n            self.hwfc_en = Field(\"hwfc_en\", \"HW Flow Control\
    \ enable\", self._address, 14, 0x0001, 1, proxy)\n            self.negedge = Field(\"\
    negedge\", \"SDIO_CK dephasing selection\n                          bit\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.widbus = Field(\"widbus\", \"Wide bus\
    \ mode enable bit\", self._address, 11, 0x0003, 2, proxy)\n            self.bypass\
    \ = Field(\"bypass\", \"Clock divider bypass enable\n                        \
    \  bit\", self._address, 10, 0x0001, 1, proxy)\n            self.pwrsav = Field(\"\
    pwrsav\", \"Power saving configuration\n                          bit\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.clken = Field(\"clken\", \"Clock enable\
    \ bit\", self._address, 8, 0x0001, 1, proxy)\n            self.clkdiv = Field(\"\
    clkdiv\", \"Clock divide factor\", self._address, 0, 0x00FF, 8, proxy)\n    \n\
    \    class ArgRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"ARG\", \"argument register\", address + 0x0008,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.cmdarg = Field(\"cmdarg\"\
    , \"Command argument\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    class\
    \ CmdRegister(Register):\n        def __init__(self, address, proxy):\n      \
    \      super().__init__(\"CMD\", \"command register\", address + 0x000C, 32, \"\
    read-write\", 0x0000, proxy)\n            self.ce_atacmd = Field(\"ce_atacmd\"\
    , \"CE-ATA command\", self._address, 14, 0x0001, 1, proxy)\n            self.nien\
    \ = Field(\"nien\", \"not Interrupt Enable\", self._address, 13, 0x0001, 1, proxy)\n\
    \            self.encmdcompl = Field(\"encmdcompl\", \"Enable CMD completion\"\
    , self._address, 12, 0x0001, 1, proxy)\n            self.sdiosuspend = Field(\"\
    sdiosuspend\", \"SD I/O suspend command\", self._address, 11, 0x0001, 1, proxy)\n\
    \            self.cpsmen = Field(\"cpsmen\", \"Command path state machine (CPSM)\
    \ Enable\n                          bit\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.waitpend = Field(\"waitpend\", \"CPSM Waits for ends of data\
    \ transfer\n                          (CmdPend internal signal).\", self._address,\
    \ 9, 0x0001, 1, proxy)\n            self.waitint = Field(\"waitint\", \"CPSM waits\
    \ for interrupt\n                          request\", self._address, 8, 0x0001,\
    \ 1, proxy)\n            self.waitresp = Field(\"waitresp\", \"Wait for response\
    \ bits\", self._address, 6, 0x0003, 2, proxy)\n            self.cmdindex = Field(\"\
    cmdindex\", \"Command index\", self._address, 0, 0x003F, 6, proxy)\n    \n   \
    \ class RespcmdRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RESPCMD\", \"command response register\", address\
    \ + 0x0010, 32, \"read-only\", 0x0000, proxy)\n            self.respcmd = Field(\"\
    respcmd\", \"Response command index\", self._address, 0, 0x003F, 6, proxy)\n \
    \   \n    class Resp1Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"RESP1\", \"response 1..4 register\"\
    , address + 0x0014, 32, \"read-only\", 0x0000, proxy)\n            self.cardstatus1\
    \ = Field(\"cardstatus1\", \"Card Status\", self._address, 0, 0xFFFFFFFF, 32,\
    \ proxy)\n    \n    class Resp2Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RESP2\", \"response 1..4 register\"\
    , address + 0x0018, 32, \"read-only\", 0x0000, proxy)\n            self.cardstatus2\
    \ = Field(\"cardstatus2\", \"Card Status\", self._address, 0, 0xFFFFFFFF, 32,\
    \ proxy)\n    \n    class Resp3Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RESP3\", \"response 1..4 register\"\
    , address + 0x001C, 32, \"read-only\", 0x0000, proxy)\n            self.cardstatus3\
    \ = Field(\"cardstatus3\", \"Card Status\", self._address, 0, 0xFFFFFFFF, 32,\
    \ proxy)\n    \n    class Resp4Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RESP4\", \"response 1..4 register\"\
    , address + 0x0020, 32, \"read-only\", 0x0000, proxy)\n            self.cardstatus4\
    \ = Field(\"cardstatus4\", \"Card Status\", self._address, 0, 0xFFFFFFFF, 32,\
    \ proxy)\n    \n    class DtimerRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DTIMER\", \"data timer register\"\
    , address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n            self.datatime\
    \ = Field(\"datatime\", \"Data timeout period\", self._address, 0, 0xFFFFFFFF,\
    \ 32, proxy)\n    \n    class DlenRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DLEN\", \"data length register\"\
    , address + 0x0028, 32, \"read-write\", 0x0000, proxy)\n            self.datalength\
    \ = Field(\"datalength\", \"Data length value\", self._address, 0, 0x1FFFFFF,\
    \ 25, proxy)\n    \n    class DctrlRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"DCTRL\", \"data control register\"\
    , address + 0x002C, 32, \"read-write\", 0x0000, proxy)\n            self.sdioen\
    \ = Field(\"sdioen\", \"SD I/O enable functions\", self._address, 11, 0x0001,\
    \ 1, proxy)\n            self.rwmod = Field(\"rwmod\", \"Read wait mode\", self._address,\
    \ 10, 0x0001, 1, proxy)\n            self.rwstop = Field(\"rwstop\", \"Read wait\
    \ stop\", self._address, 9, 0x0001, 1, proxy)\n            self.rwstart = Field(\"\
    rwstart\", \"Read wait start\", self._address, 8, 0x0001, 1, proxy)\n        \
    \    self.dblocksize = Field(\"dblocksize\", \"Data block size\", self._address,\
    \ 4, 0x000F, 4, proxy)\n            self.dmaen = Field(\"dmaen\", \"DMA enable\
    \ bit\", self._address, 3, 0x0001, 1, proxy)\n            self.dtmode = Field(\"\
    dtmode\", \"Data transfer mode selection 1: Stream\n                         \
    \ or SDIO multibyte data transfer.\", self._address, 2, 0x0001, 1, proxy)\n  \
    \          self.dtdir = Field(\"dtdir\", \"Data transfer direction\n         \
    \                 selection\", self._address, 1, 0x0001, 1, proxy)\n         \
    \   self.dten = Field(\"dten\", \"DTEN\", self._address, 0, 0x0001, 1, proxy)\n\
    \    \n    class DcountRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"DCOUNT\", \"data counter register\"\
    , address + 0x0030, 32, \"read-only\", 0x0000, proxy)\n            self.datacount\
    \ = Field(\"datacount\", \"Data count value\", self._address, 0, 0x1FFFFFF, 25,\
    \ proxy)\n    \n    class StaRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"STA\", \"status register\", address\
    \ + 0x0034, 32, \"read-only\", 0x0000, proxy)\n            self.ceataend = Field(\"\
    ceataend\", \"CE-ATA command completion signal\n                          received\
    \ for CMD61\", self._address, 23, 0x0001, 1, proxy)\n            self.sdioit =\
    \ Field(\"sdioit\", \"SDIO interrupt received\", self._address, 22, 0x0001, 1,\
    \ proxy)\n            self.rxdavl = Field(\"rxdavl\", \"Data available in receive\n\
    \                          FIFO\", self._address, 21, 0x0001, 1, proxy)\n    \
    \        self.txdavl = Field(\"txdavl\", \"Data available in transmit\n      \
    \                    FIFO\", self._address, 20, 0x0001, 1, proxy)\n          \
    \  self.rxfifoe = Field(\"rxfifoe\", \"Receive FIFO empty\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.txfifoe = Field(\"txfifoe\", \"Transmit\
    \ FIFO empty\", self._address, 18, 0x0001, 1, proxy)\n            self.rxfifof\
    \ = Field(\"rxfifof\", \"Receive FIFO full\", self._address, 17, 0x0001, 1, proxy)\n\
    \            self.txfifof = Field(\"txfifof\", \"Transmit FIFO full\", self._address,\
    \ 16, 0x0001, 1, proxy)\n            self.rxfifohf = Field(\"rxfifohf\", \"Receive\
    \ FIFO half full: there are at\n                          least 8 words in the\
    \ FIFO\", self._address, 15, 0x0001, 1, proxy)\n            self.txfifohe = Field(\"\
    txfifohe\", \"Transmit FIFO half empty: at least 8\n                         \
    \ words can be written into the FIFO\", self._address, 14, 0x0001, 1, proxy)\n\
    \            self.rxact = Field(\"rxact\", \"Data receive in progress\", self._address,\
    \ 13, 0x0001, 1, proxy)\n            self.txact = Field(\"txact\", \"Data transmit\
    \ in progress\", self._address, 12, 0x0001, 1, proxy)\n            self.cmdact\
    \ = Field(\"cmdact\", \"Command transfer in\n                          progress\"\
    , self._address, 11, 0x0001, 1, proxy)\n            self.dbckend = Field(\"dbckend\"\
    , \"Data block sent/received (CRC check\n                          passed)\",\
    \ self._address, 10, 0x0001, 1, proxy)\n            self.stbiterr = Field(\"stbiterr\"\
    , \"Start bit not detected on all data\n                          signals in wide\
    \ bus mode\", self._address, 9, 0x0001, 1, proxy)\n            self.dataend =\
    \ Field(\"dataend\", \"Data end (data counter, SDIDCOUNT, is\n               \
    \           zero)\", self._address, 8, 0x0001, 1, proxy)\n            self.cmdsent\
    \ = Field(\"cmdsent\", \"Command sent (no response\n                         \
    \ required)\", self._address, 7, 0x0001, 1, proxy)\n            self.cmdrend =\
    \ Field(\"cmdrend\", \"Command response received (CRC check\n                \
    \          passed)\", self._address, 6, 0x0001, 1, proxy)\n            self.rxoverr\
    \ = Field(\"rxoverr\", \"Received FIFO overrun\n                          error\"\
    , self._address, 5, 0x0001, 1, proxy)\n            self.txunderr = Field(\"txunderr\"\
    , \"Transmit FIFO underrun\n                          error\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.dtimeout = Field(\"dtimeout\", \"Data\
    \ timeout\", self._address, 3, 0x0001, 1, proxy)\n            self.ctimeout =\
    \ Field(\"ctimeout\", \"Command response timeout\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.dcrcfail = Field(\"dcrcfail\", \"Data block sent/received\
    \ (CRC check\n                          failed)\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.ccrcfail = Field(\"ccrcfail\", \"Command response received\
    \ (CRC check\n                          failed)\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class IcrRegister(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"ICR\", \"interrupt clear register\"\
    , address + 0x0038, 32, \"read-write\", 0x0000, proxy)\n            self.ceataendc\
    \ = Field(\"ceataendc\", \"CEATAEND flag clear bit\", self._address, 23, 0x0001,\
    \ 1, proxy)\n            self.sdioitc = Field(\"sdioitc\", \"SDIOIT flag clear\
    \ bit\", self._address, 22, 0x0001, 1, proxy)\n            self.dbckendc = Field(\"\
    dbckendc\", \"DBCKEND flag clear bit\", self._address, 10, 0x0001, 1, proxy)\n\
    \            self.stbiterrc = Field(\"stbiterrc\", \"STBITERR flag clear bit\"\
    , self._address, 9, 0x0001, 1, proxy)\n            self.dataendc = Field(\"dataendc\"\
    , \"DATAEND flag clear bit\", self._address, 8, 0x0001, 1, proxy)\n          \
    \  self.cmdsentc = Field(\"cmdsentc\", \"CMDSENT flag clear bit\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cmdrendc = Field(\"cmdrendc\", \"CMDREND\
    \ flag clear bit\", self._address, 6, 0x0001, 1, proxy)\n            self.rxoverrc\
    \ = Field(\"rxoverrc\", \"RXOVERR flag clear bit\", self._address, 5, 0x0001,\
    \ 1, proxy)\n            self.txunderrc = Field(\"txunderrc\", \"TXUNDERR flag\
    \ clear bit\", self._address, 4, 0x0001, 1, proxy)\n            self.dtimeoutc\
    \ = Field(\"dtimeoutc\", \"DTIMEOUT flag clear bit\", self._address, 3, 0x0001,\
    \ 1, proxy)\n            self.ctimeoutc = Field(\"ctimeoutc\", \"CTIMEOUT flag\
    \ clear bit\", self._address, 2, 0x0001, 1, proxy)\n            self.dcrcfailc\
    \ = Field(\"dcrcfailc\", \"DCRCFAIL flag clear bit\", self._address, 1, 0x0001,\
    \ 1, proxy)\n            self.ccrcfailc = Field(\"ccrcfailc\", \"CCRCFAIL flag\
    \ clear bit\", self._address, 0, 0x0001, 1, proxy)\n    \n    class MaskRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    MASK\", \"mask register\", address + 0x003C, 32, \"read-write\", 0x0000, proxy)\n\
    \            self.ceataendie = Field(\"ceataendie\", \"CE-ATA command completion\
    \ signal\n                          received interrupt enable\", self._address,\
    \ 23, 0x0001, 1, proxy)\n            self.sdioitie = Field(\"sdioitie\", \"SDIO\
    \ mode interrupt received interrupt\n                          enable\", self._address,\
    \ 22, 0x0001, 1, proxy)\n            self.rxdavlie = Field(\"rxdavlie\", \"Data\
    \ available in Rx FIFO interrupt\n                          enable\", self._address,\
    \ 21, 0x0001, 1, proxy)\n            self.txdavlie = Field(\"txdavlie\", \"Data\
    \ available in Tx FIFO interrupt\n                          enable\", self._address,\
    \ 20, 0x0001, 1, proxy)\n            self.rxfifoeie = Field(\"rxfifoeie\", \"\
    Rx FIFO empty interrupt\n                          enable\", self._address, 19,\
    \ 0x0001, 1, proxy)\n            self.txfifoeie = Field(\"txfifoeie\", \"Tx FIFO\
    \ empty interrupt\n                          enable\", self._address, 18, 0x0001,\
    \ 1, proxy)\n            self.rxfifofie = Field(\"rxfifofie\", \"Rx FIFO full\
    \ interrupt\n                          enable\", self._address, 17, 0x0001, 1,\
    \ proxy)\n            self.txfifofie = Field(\"txfifofie\", \"Tx FIFO full interrupt\n\
    \                          enable\", self._address, 16, 0x0001, 1, proxy)\n  \
    \          self.rxfifohfie = Field(\"rxfifohfie\", \"Rx FIFO half full interrupt\n\
    \                          enable\", self._address, 15, 0x0001, 1, proxy)\n  \
    \          self.txfifoheie = Field(\"txfifoheie\", \"Tx FIFO half empty interrupt\n\
    \                          enable\", self._address, 14, 0x0001, 1, proxy)\n  \
    \          self.rxactie = Field(\"rxactie\", \"Data receive acting interrupt\n\
    \                          enable\", self._address, 13, 0x0001, 1, proxy)\n  \
    \          self.txactie = Field(\"txactie\", \"Data transmit acting interrupt\n\
    \                          enable\", self._address, 12, 0x0001, 1, proxy)\n  \
    \          self.cmdactie = Field(\"cmdactie\", \"Command acting interrupt\n  \
    \                        enable\", self._address, 11, 0x0001, 1, proxy)\n    \
    \        self.dbckendie = Field(\"dbckendie\", \"Data block end interrupt\n  \
    \                        enable\", self._address, 10, 0x0001, 1, proxy)\n    \
    \        self.stbiterrie = Field(\"stbiterrie\", \"Start bit error interrupt\n\
    \                          enable\", self._address, 9, 0x0001, 1, proxy)\n   \
    \         self.dataendie = Field(\"dataendie\", \"Data end interrupt enable\"\
    , self._address, 8, 0x0001, 1, proxy)\n            self.cmdsentie = Field(\"cmdsentie\"\
    , \"Command sent interrupt\n                          enable\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cmdrendie = Field(\"cmdrendie\", \"Command\
    \ response received interrupt\n                          enable\", self._address,\
    \ 6, 0x0001, 1, proxy)\n            self.rxoverrie = Field(\"rxoverrie\", \"Rx\
    \ FIFO overrun error interrupt\n                          enable\", self._address,\
    \ 5, 0x0001, 1, proxy)\n            self.txunderrie = Field(\"txunderrie\", \"\
    Tx FIFO underrun error interrupt\n                          enable\", self._address,\
    \ 4, 0x0001, 1, proxy)\n            self.dtimeoutie = Field(\"dtimeoutie\", \"\
    Data timeout interrupt\n                          enable\", self._address, 3,\
    \ 0x0001, 1, proxy)\n            self.ctimeoutie = Field(\"ctimeoutie\", \"Command\
    \ timeout interrupt\n                          enable\", self._address, 2, 0x0001,\
    \ 1, proxy)\n            self.dcrcfailie = Field(\"dcrcfailie\", \"Data CRC fail\
    \ interrupt\n                          enable\", self._address, 1, 0x0001, 1,\
    \ proxy)\n            self.ccrcfailie = Field(\"ccrcfailie\", \"Command CRC fail\
    \ interrupt\n                          enable\", self._address, 0, 0x0001, 1,\
    \ proxy)\n    \n    class FifocntRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FIFOCNT\", \"FIFO counter register\"\
    , address + 0x0048, 32, \"read-only\", 0x0000, proxy)\n            self.fifocount\
    \ = Field(\"fifocount\", \"Remaining number of words to be written\n         \
    \                 to or read from the FIFO.\", self._address, 0, 0xFFFFFF, 24,\
    \ proxy)\n    \n    class FifoRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"FIFO\", \"data FIFO register\"\
    , address + 0x0080, 32, \"read-write\", 0x0000, proxy)\n            self.fifodata\
    \ = Field(\"fifodata\", \"Receive and transmit FIFO\n                        \
    \  data\", self._address, 0, 0xFFFFFFFF, 32, proxy)\n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"sdio\", \"Secure digital input/output\n\
    \      interface\", 0x40012C00)\n        self.power = self.PowerRegister(self.address,\
    \ proxy)\n        self.clkcr = self.ClkcrRegister(self.address, proxy)\n     \
    \   self.arg = self.ArgRegister(self.address, proxy)\n        self.cmd = self.CmdRegister(self.address,\
    \ proxy)\n        self.respcmd = self.RespcmdRegister(self.address, proxy)\n \
    \       self.resp1 = self.Resp1Register(self.address, proxy)\n        self.resp2\
    \ = self.Resp2Register(self.address, proxy)\n        self.resp3 = self.Resp3Register(self.address,\
    \ proxy)\n        self.resp4 = self.Resp4Register(self.address, proxy)\n     \
    \   self.dtimer = self.DtimerRegister(self.address, proxy)\n        self.dlen\
    \ = self.DlenRegister(self.address, proxy)\n        self.dctrl = self.DctrlRegister(self.address,\
    \ proxy)\n        self.dcount = self.DcountRegister(self.address, proxy)\n   \
    \     self.sta = self.StaRegister(self.address, proxy)\n        self.icr = self.IcrRegister(self.address,\
    \ proxy)\n        self.mask = self.MaskRegister(self.address, proxy)\n       \
    \ self.fifocnt = self.FifocntRegister(self.address, proxy)\n        self.fifo\
    \ = self.FifoRegister(self.address, proxy)\n"
  name: SDIO
