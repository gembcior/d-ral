- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CsrRegister(Register):\n    \"\"\"\n    CSR\n\n    ADC Common\
    \ status register\n    \"\"\"\n\n    def __init__(self):\n        self._ovr3 =\
    \ Field(\"ovr3\", 21, 1)\n        self._strt3 = Field(\"strt3\", 20, 1)\n    \
    \    self._jstrt3 = Field(\"jstrt3\", 19, 1)\n        self._jeoc3 = Field(\"jeoc3\"\
    , 18, 1)\n        self._eoc3 = Field(\"eoc3\", 17, 1)\n        self._awd3 = Field(\"\
    awd3\", 16, 1)\n        self._ovr2 = Field(\"ovr2\", 13, 1)\n        self._strt2\
    \ = Field(\"strt2\", 12, 1)\n        self._jstrt2 = Field(\"jstrt2\", 11, 1)\n\
    \        self._jeoc2 = Field(\"jeoc2\", 10, 1)\n        self._eoc2 = Field(\"\
    eoc2\", 9, 1)\n        self._awd2 = Field(\"awd2\", 8, 1)\n        self._ovr1\
    \ = Field(\"ovr1\", 5, 1)\n        self._strt1 = Field(\"strt1\", 4, 1)\n    \
    \    self._jstrt1 = Field(\"jstrt1\", 3, 1)\n        self._jeoc1 = Field(\"jeoc1\"\
    , 2, 1)\n        self._eoc1 = Field(\"eoc1\", 1, 1)\n        self._awd1 = Field(\"\
    awd1\", 0, 1)\n        super().__init__(\"CSR\", 0x40012300 + 0x0)\n\n    @property\n\
    \    def ovr3(self) -> Field:\n        \"\"\"\n        OVR3\n\n        Overrun\
    \ flag of ADC3\n        \"\"\"\n        return self._ovr3\n\n    @ovr3.setter\n\
    \    def ovr3(self, value: int) -> None:\n        self._ovr3.value = value\n\n\
    \    @property\n    def strt3(self) -> Field:\n        \"\"\"\n        STRT3\n\
    \n        Regular channel Start flag of ADC\n                  3\n        \"\"\
    \"\n        return self._strt3\n\n    @strt3.setter\n    def strt3(self, value:\
    \ int) -> None:\n        self._strt3.value = value\n\n    @property\n    def jstrt3(self)\
    \ -> Field:\n        \"\"\"\n        JSTRT3\n\n        Injected channel Start\
    \ flag of ADC\n                  3\n        \"\"\"\n        return self._jstrt3\n\
    \n    @jstrt3.setter\n    def jstrt3(self, value: int) -> None:\n        self._jstrt3.value\
    \ = value\n\n    @property\n    def jeoc3(self) -> Field:\n        \"\"\"\n  \
    \      JEOC3\n\n        Injected channel end of conversion of\n              \
    \    ADC 3\n        \"\"\"\n        return self._jeoc3\n\n    @jeoc3.setter\n\
    \    def jeoc3(self, value: int) -> None:\n        self._jeoc3.value = value\n\
    \n    @property\n    def eoc3(self) -> Field:\n        \"\"\"\n        EOC3\n\n\
    \        End of conversion of ADC 3\n        \"\"\"\n        return self._eoc3\n\
    \n    @eoc3.setter\n    def eoc3(self, value: int) -> None:\n        self._eoc3.value\
    \ = value\n\n    @property\n    def awd3(self) -> Field:\n        \"\"\"\n   \
    \     AWD3\n\n        Analog watchdog flag of ADC\n                  3\n     \
    \   \"\"\"\n        return self._awd3\n\n    @awd3.setter\n    def awd3(self,\
    \ value: int) -> None:\n        self._awd3.value = value\n\n    @property\n  \
    \  def ovr2(self) -> Field:\n        \"\"\"\n        OVR2\n\n        Overrun flag\
    \ of ADC 2\n        \"\"\"\n        return self._ovr2\n\n    @ovr2.setter\n  \
    \  def ovr2(self, value: int) -> None:\n        self._ovr2.value = value\n\n \
    \   @property\n    def strt2(self) -> Field:\n        \"\"\"\n        STRT2\n\n\
    \        Regular channel Start flag of ADC\n                  2\n        \"\"\"\
    \n        return self._strt2\n\n    @strt2.setter\n    def strt2(self, value:\
    \ int) -> None:\n        self._strt2.value = value\n\n    @property\n    def jstrt2(self)\
    \ -> Field:\n        \"\"\"\n        JSTRT2\n\n        Injected channel Start\
    \ flag of ADC\n                  2\n        \"\"\"\n        return self._jstrt2\n\
    \n    @jstrt2.setter\n    def jstrt2(self, value: int) -> None:\n        self._jstrt2.value\
    \ = value\n\n    @property\n    def jeoc2(self) -> Field:\n        \"\"\"\n  \
    \      JEOC2\n\n        Injected channel end of conversion of\n              \
    \    ADC 2\n        \"\"\"\n        return self._jeoc2\n\n    @jeoc2.setter\n\
    \    def jeoc2(self, value: int) -> None:\n        self._jeoc2.value = value\n\
    \n    @property\n    def eoc2(self) -> Field:\n        \"\"\"\n        EOC2\n\n\
    \        End of conversion of ADC 2\n        \"\"\"\n        return self._eoc2\n\
    \n    @eoc2.setter\n    def eoc2(self, value: int) -> None:\n        self._eoc2.value\
    \ = value\n\n    @property\n    def awd2(self) -> Field:\n        \"\"\"\n   \
    \     AWD2\n\n        Analog watchdog flag of ADC\n                  2\n     \
    \   \"\"\"\n        return self._awd2\n\n    @awd2.setter\n    def awd2(self,\
    \ value: int) -> None:\n        self._awd2.value = value\n\n    @property\n  \
    \  def ovr1(self) -> Field:\n        \"\"\"\n        OVR1\n\n        Overrun flag\
    \ of ADC 1\n        \"\"\"\n        return self._ovr1\n\n    @ovr1.setter\n  \
    \  def ovr1(self, value: int) -> None:\n        self._ovr1.value = value\n\n \
    \   @property\n    def strt1(self) -> Field:\n        \"\"\"\n        STRT1\n\n\
    \        Regular channel Start flag of ADC\n                  1\n        \"\"\"\
    \n        return self._strt1\n\n    @strt1.setter\n    def strt1(self, value:\
    \ int) -> None:\n        self._strt1.value = value\n\n    @property\n    def jstrt1(self)\
    \ -> Field:\n        \"\"\"\n        JSTRT1\n\n        Injected channel Start\
    \ flag of ADC\n                  1\n        \"\"\"\n        return self._jstrt1\n\
    \n    @jstrt1.setter\n    def jstrt1(self, value: int) -> None:\n        self._jstrt1.value\
    \ = value\n\n    @property\n    def jeoc1(self) -> Field:\n        \"\"\"\n  \
    \      JEOC1\n\n        Injected channel end of conversion of\n              \
    \    ADC 1\n        \"\"\"\n        return self._jeoc1\n\n    @jeoc1.setter\n\
    \    def jeoc1(self, value: int) -> None:\n        self._jeoc1.value = value\n\
    \n    @property\n    def eoc1(self) -> Field:\n        \"\"\"\n        EOC1\n\n\
    \        End of conversion of ADC 1\n        \"\"\"\n        return self._eoc1\n\
    \n    @eoc1.setter\n    def eoc1(self, value: int) -> None:\n        self._eoc1.value\
    \ = value\n\n    @property\n    def awd1(self) -> Field:\n        \"\"\"\n   \
    \     AWD1\n\n        Analog watchdog flag of ADC\n                  1\n     \
    \   \"\"\"\n        return self._awd1\n\n    @awd1.setter\n    def awd1(self,\
    \ value: int) -> None:\n        self._awd1.value = value\n\n\nclass CcrRegister(Register):\n\
    \    \"\"\"\n    CCR\n\n    ADC common control register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._tsvrefe = Field(\"tsvrefe\", 23, 1)\n       \
    \ self._vbate = Field(\"vbate\", 22, 1)\n        self._adcpre = Field(\"adcpre\"\
    , 16, 2)\n        self._dma = Field(\"dma\", 14, 2)\n        self._dds = Field(\"\
    dds\", 13, 1)\n        self._delay = Field(\"delay\", 8, 4)\n        super().__init__(\"\
    CCR\", 0x40012300 + 0x4)\n\n    @property\n    def tsvrefe(self) -> Field:\n \
    \       \"\"\"\n        TSVREFE\n\n        Temperature sensor and VREFINT\n  \
    \                enable\n        \"\"\"\n        return self._tsvrefe\n\n    @tsvrefe.setter\n\
    \    def tsvrefe(self, value: int) -> None:\n        self._tsvrefe.value = value\n\
    \n    @property\n    def vbate(self) -> Field:\n        \"\"\"\n        VBATE\n\
    \n        VBAT enable\n        \"\"\"\n        return self._vbate\n\n    @vbate.setter\n\
    \    def vbate(self, value: int) -> None:\n        self._vbate.value = value\n\
    \n    @property\n    def adcpre(self) -> Field:\n        \"\"\"\n        ADCPRE\n\
    \n        ADC prescaler\n        \"\"\"\n        return self._adcpre\n\n    @adcpre.setter\n\
    \    def adcpre(self, value: int) -> None:\n        self._adcpre.value = value\n\
    \n    @property\n    def dma(self) -> Field:\n        \"\"\"\n        DMA\n\n\
    \        Direct memory access mode for multi ADC\n                  mode\n   \
    \     \"\"\"\n        return self._dma\n\n    @dma.setter\n    def dma(self, value:\
    \ int) -> None:\n        self._dma.value = value\n\n    @property\n    def dds(self)\
    \ -> Field:\n        \"\"\"\n        DDS\n\n        DMA disable selection for\
    \ multi-ADC\n                  mode\n        \"\"\"\n        return self._dds\n\
    \n    @dds.setter\n    def dds(self, value: int) -> None:\n        self._dds.value\
    \ = value\n\n    @property\n    def delay(self) -> Field:\n        \"\"\"\n  \
    \      DELAY\n\n        Delay between 2 sampling\n                  phases\n \
    \       \"\"\"\n        return self._delay\n\n    @delay.setter\n    def delay(self,\
    \ value: int) -> None:\n        self._delay.value = value\n\n\nclass Adc_common(Peripheral):\n\
    \    \"\"\"\n    ADC_COMMON\n\n    ADC common registers\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._csr = CsrRegister()\n        self._ccr = CcrRegister()\n\
    \        super().__init__(\"adc_common\", 0x40012300)\n\n    @property\n    def\
    \ csr(self) -> CsrRegister:\n        return self._csr\n\n    @csr.setter\n   \
    \ def csr(self, value: int) -> None:\n        self._csr.value = value\n\n    @property\n\
    \    def ccr(self) -> CcrRegister:\n        return self._ccr\n\n    @ccr.setter\n\
    \    def ccr(self, value: int) -> None:\n        self._ccr.value = value\n"
  name: ADC_Common
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._ovr = Field(\"\
    ovr\", 5, 1)\n        self._strt = Field(\"strt\", 4, 1)\n        self._jstrt\
    \ = Field(\"jstrt\", 3, 1)\n        self._jeoc = Field(\"jeoc\", 2, 1)\n     \
    \   self._eoc = Field(\"eoc\", 1, 1)\n        self._awd = Field(\"awd\", 0, 1)\n\
    \        super().__init__(\"SR\", 0x40012000 + 0x0)\n\n    @property\n    def\
    \ ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n        Overrun\n      \
    \  \"\"\"\n        return self._ovr\n\n    @ovr.setter\n    def ovr(self, value:\
    \ int) -> None:\n        self._ovr.value = value\n\n    @property\n    def strt(self)\
    \ -> Field:\n        \"\"\"\n        STRT\n\n        Regular channel start flag\n\
    \        \"\"\"\n        return self._strt\n\n    @strt.setter\n    def strt(self,\
    \ value: int) -> None:\n        self._strt.value = value\n\n    @property\n  \
    \  def jstrt(self) -> Field:\n        \"\"\"\n        JSTRT\n\n        Injected\
    \ channel start\n                  flag\n        \"\"\"\n        return self._jstrt\n\
    \n    @jstrt.setter\n    def jstrt(self, value: int) -> None:\n        self._jstrt.value\
    \ = value\n\n    @property\n    def jeoc(self) -> Field:\n        \"\"\"\n   \
    \     JEOC\n\n        Injected channel end of\n                  conversion\n\
    \        \"\"\"\n        return self._jeoc\n\n    @jeoc.setter\n    def jeoc(self,\
    \ value: int) -> None:\n        self._jeoc.value = value\n\n    @property\n  \
    \  def eoc(self) -> Field:\n        \"\"\"\n        EOC\n\n        Regular channel\
    \ end of\n                  conversion\n        \"\"\"\n        return self._eoc\n\
    \n    @eoc.setter\n    def eoc(self, value: int) -> None:\n        self._eoc.value\
    \ = value\n\n    @property\n    def awd(self) -> Field:\n        \"\"\"\n    \
    \    AWD\n\n        Analog watchdog flag\n        \"\"\"\n        return self._awd\n\
    \n    @awd.setter\n    def awd(self, value: int) -> None:\n        self._awd.value\
    \ = value\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ovrie = Field(\"\
    ovrie\", 26, 1)\n        self._res = Field(\"res\", 24, 2)\n        self._awden\
    \ = Field(\"awden\", 23, 1)\n        self._jawden = Field(\"jawden\", 22, 1)\n\
    \        self._discnum = Field(\"discnum\", 13, 3)\n        self._jdiscen = Field(\"\
    jdiscen\", 12, 1)\n        self._discen = Field(\"discen\", 11, 1)\n        self._jauto\
    \ = Field(\"jauto\", 10, 1)\n        self._awdsgl = Field(\"awdsgl\", 9, 1)\n\
    \        self._scan = Field(\"scan\", 8, 1)\n        self._jeocie = Field(\"jeocie\"\
    , 7, 1)\n        self._awdie = Field(\"awdie\", 6, 1)\n        self._eocie = Field(\"\
    eocie\", 5, 1)\n        self._awdch = Field(\"awdch\", 0, 5)\n        super().__init__(\"\
    CR1\", 0x40012000 + 0x4)\n\n    @property\n    def ovrie(self) -> Field:\n   \
    \     \"\"\"\n        OVRIE\n\n        Overrun interrupt enable\n        \"\"\"\
    \n        return self._ovrie\n\n    @ovrie.setter\n    def ovrie(self, value:\
    \ int) -> None:\n        self._ovrie.value = value\n\n    @property\n    def res(self)\
    \ -> Field:\n        \"\"\"\n        RES\n\n        Resolution\n        \"\"\"\
    \n        return self._res\n\n    @res.setter\n    def res(self, value: int) ->\
    \ None:\n        self._res.value = value\n\n    @property\n    def awden(self)\
    \ -> Field:\n        \"\"\"\n        AWDEN\n\n        Analog watchdog enable on\
    \ regular\n                  channels\n        \"\"\"\n        return self._awden\n\
    \n    @awden.setter\n    def awden(self, value: int) -> None:\n        self._awden.value\
    \ = value\n\n    @property\n    def jawden(self) -> Field:\n        \"\"\"\n \
    \       JAWDEN\n\n        Analog watchdog enable on injected\n               \
    \   channels\n        \"\"\"\n        return self._jawden\n\n    @jawden.setter\n\
    \    def jawden(self, value: int) -> None:\n        self._jawden.value = value\n\
    \n    @property\n    def discnum(self) -> Field:\n        \"\"\"\n        DISCNUM\n\
    \n        Discontinuous mode channel\n                  count\n        \"\"\"\n\
    \        return self._discnum\n\n    @discnum.setter\n    def discnum(self, value:\
    \ int) -> None:\n        self._discnum.value = value\n\n    @property\n    def\
    \ jdiscen(self) -> Field:\n        \"\"\"\n        JDISCEN\n\n        Discontinuous\
    \ mode on injected\n                  channels\n        \"\"\"\n        return\
    \ self._jdiscen\n\n    @jdiscen.setter\n    def jdiscen(self, value: int) -> None:\n\
    \        self._jdiscen.value = value\n\n    @property\n    def discen(self) ->\
    \ Field:\n        \"\"\"\n        DISCEN\n\n        Discontinuous mode on regular\n\
    \                  channels\n        \"\"\"\n        return self._discen\n\n \
    \   @discen.setter\n    def discen(self, value: int) -> None:\n        self._discen.value\
    \ = value\n\n    @property\n    def jauto(self) -> Field:\n        \"\"\"\n  \
    \      JAUTO\n\n        Automatic injected group\n                  conversion\n\
    \        \"\"\"\n        return self._jauto\n\n    @jauto.setter\n    def jauto(self,\
    \ value: int) -> None:\n        self._jauto.value = value\n\n    @property\n \
    \   def awdsgl(self) -> Field:\n        \"\"\"\n        AWDSGL\n\n        Enable\
    \ the watchdog on a single channel\n                  in scan mode\n        \"\
    \"\"\n        return self._awdsgl\n\n    @awdsgl.setter\n    def awdsgl(self,\
    \ value: int) -> None:\n        self._awdsgl.value = value\n\n    @property\n\
    \    def scan(self) -> Field:\n        \"\"\"\n        SCAN\n\n        Scan mode\n\
    \        \"\"\"\n        return self._scan\n\n    @scan.setter\n    def scan(self,\
    \ value: int) -> None:\n        self._scan.value = value\n\n    @property\n  \
    \  def jeocie(self) -> Field:\n        \"\"\"\n        JEOCIE\n\n        Interrupt\
    \ enable for injected\n                  channels\n        \"\"\"\n        return\
    \ self._jeocie\n\n    @jeocie.setter\n    def jeocie(self, value: int) -> None:\n\
    \        self._jeocie.value = value\n\n    @property\n    def awdie(self) -> Field:\n\
    \        \"\"\"\n        AWDIE\n\n        Analog watchdog interrupt\n        \
    \          enable\n        \"\"\"\n        return self._awdie\n\n    @awdie.setter\n\
    \    def awdie(self, value: int) -> None:\n        self._awdie.value = value\n\
    \n    @property\n    def eocie(self) -> Field:\n        \"\"\"\n        EOCIE\n\
    \n        Interrupt enable for EOC\n        \"\"\"\n        return self._eocie\n\
    \n    @eocie.setter\n    def eocie(self, value: int) -> None:\n        self._eocie.value\
    \ = value\n\n    @property\n    def awdch(self) -> Field:\n        \"\"\"\n  \
    \      AWDCH\n\n        Analog watchdog channel select\n                  bits\n\
    \        \"\"\"\n        return self._awdch\n\n    @awdch.setter\n    def awdch(self,\
    \ value: int) -> None:\n        self._awdch.value = value\n\n\nclass Cr2Register(Register):\n\
    \    \"\"\"\n    CR2\n\n    control register 2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._swstart = Field(\"swstart\", 30, 1)\n        self._exten = Field(\"\
    exten\", 28, 2)\n        self._extsel = Field(\"extsel\", 24, 4)\n        self._jswstart\
    \ = Field(\"jswstart\", 22, 1)\n        self._jexten = Field(\"jexten\", 20, 2)\n\
    \        self._jextsel = Field(\"jextsel\", 16, 4)\n        self._align = Field(\"\
    align\", 11, 1)\n        self._eocs = Field(\"eocs\", 10, 1)\n        self._dds\
    \ = Field(\"dds\", 9, 1)\n        self._dma = Field(\"dma\", 8, 1)\n        self._cont\
    \ = Field(\"cont\", 1, 1)\n        self._adon = Field(\"adon\", 0, 1)\n      \
    \  super().__init__(\"CR2\", 0x40012000 + 0x8)\n\n    @property\n    def swstart(self)\
    \ -> Field:\n        \"\"\"\n        SWSTART\n\n        Start conversion of regular\n\
    \                  channels\n        \"\"\"\n        return self._swstart\n\n\
    \    @swstart.setter\n    def swstart(self, value: int) -> None:\n        self._swstart.value\
    \ = value\n\n    @property\n    def exten(self) -> Field:\n        \"\"\"\n  \
    \      EXTEN\n\n        External trigger enable for regular\n                \
    \  channels\n        \"\"\"\n        return self._exten\n\n    @exten.setter\n\
    \    def exten(self, value: int) -> None:\n        self._exten.value = value\n\
    \n    @property\n    def extsel(self) -> Field:\n        \"\"\"\n        EXTSEL\n\
    \n        External event select for regular\n                  group\n       \
    \ \"\"\"\n        return self._extsel\n\n    @extsel.setter\n    def extsel(self,\
    \ value: int) -> None:\n        self._extsel.value = value\n\n    @property\n\
    \    def jswstart(self) -> Field:\n        \"\"\"\n        JSWSTART\n\n      \
    \  Start conversion of injected\n                  channels\n        \"\"\"\n\
    \        return self._jswstart\n\n    @jswstart.setter\n    def jswstart(self,\
    \ value: int) -> None:\n        self._jswstart.value = value\n\n    @property\n\
    \    def jexten(self) -> Field:\n        \"\"\"\n        JEXTEN\n\n        External\
    \ trigger enable for injected\n                  channels\n        \"\"\"\n  \
    \      return self._jexten\n\n    @jexten.setter\n    def jexten(self, value:\
    \ int) -> None:\n        self._jexten.value = value\n\n    @property\n    def\
    \ jextsel(self) -> Field:\n        \"\"\"\n        JEXTSEL\n\n        External\
    \ event select for injected\n                  group\n        \"\"\"\n       \
    \ return self._jextsel\n\n    @jextsel.setter\n    def jextsel(self, value: int)\
    \ -> None:\n        self._jextsel.value = value\n\n    @property\n    def align(self)\
    \ -> Field:\n        \"\"\"\n        ALIGN\n\n        Data alignment\n       \
    \ \"\"\"\n        return self._align\n\n    @align.setter\n    def align(self,\
    \ value: int) -> None:\n        self._align.value = value\n\n    @property\n \
    \   def eocs(self) -> Field:\n        \"\"\"\n        EOCS\n\n        End of conversion\n\
    \                  selection\n        \"\"\"\n        return self._eocs\n\n  \
    \  @eocs.setter\n    def eocs(self, value: int) -> None:\n        self._eocs.value\
    \ = value\n\n    @property\n    def dds(self) -> Field:\n        \"\"\"\n    \
    \    DDS\n\n        DMA disable selection (for single ADC\n                  mode)\n\
    \        \"\"\"\n        return self._dds\n\n    @dds.setter\n    def dds(self,\
    \ value: int) -> None:\n        self._dds.value = value\n\n    @property\n   \
    \ def dma(self) -> Field:\n        \"\"\"\n        DMA\n\n        Direct memory\
    \ access mode (for single\n                  ADC mode)\n        \"\"\"\n     \
    \   return self._dma\n\n    @dma.setter\n    def dma(self, value: int) -> None:\n\
    \        self._dma.value = value\n\n    @property\n    def cont(self) -> Field:\n\
    \        \"\"\"\n        CONT\n\n        Continuous conversion\n        \"\"\"\
    \n        return self._cont\n\n    @cont.setter\n    def cont(self, value: int)\
    \ -> None:\n        self._cont.value = value\n\n    @property\n    def adon(self)\
    \ -> Field:\n        \"\"\"\n        ADON\n\n        A/D Converter ON / OFF\n\
    \        \"\"\"\n        return self._adon\n\n    @adon.setter\n    def adon(self,\
    \ value: int) -> None:\n        self._adon.value = value\n\n\nclass Smpr1Register(Register):\n\
    \    \"\"\"\n    SMPR1\n\n    sample time register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._smpx_x = Field(\"smpx_x\", 0, 32)\n        super().__init__(\"\
    SMPR1\", 0x40012000 + 0xC)\n\n    @property\n    def smpx_x(self) -> Field:\n\
    \        \"\"\"\n        SMPX_X\n\n        Sample time bits\n        \"\"\"\n\
    \        return self._smpx_x\n\n    @smpx_x.setter\n    def smpx_x(self, value:\
    \ int) -> None:\n        self._smpx_x.value = value\n\n\nclass Smpr2Register(Register):\n\
    \    \"\"\"\n    SMPR2\n\n    sample time register 2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._smpx_x = Field(\"smpx_x\", 0, 32)\n        super().__init__(\"\
    SMPR2\", 0x40012000 + 0x10)\n\n    @property\n    def smpx_x(self) -> Field:\n\
    \        \"\"\"\n        SMPX_X\n\n        Sample time bits\n        \"\"\"\n\
    \        return self._smpx_x\n\n    @smpx_x.setter\n    def smpx_x(self, value:\
    \ int) -> None:\n        self._smpx_x.value = value\n\n\nclass Jofr1Register(Register):\n\
    \    \"\"\"\n    JOFR1\n\n    injected channel data offset register\n        \
    \      x\n    \"\"\"\n\n    def __init__(self):\n        self._joffset1 = Field(\"\
    joffset1\", 0, 12)\n        super().__init__(\"JOFR1\", 0x40012000 + 0x14)\n\n\
    \    @property\n    def joffset1(self) -> Field:\n        \"\"\"\n        JOFFSET1\n\
    \n        Data offset for injected channel\n                  x\n        \"\"\"\
    \n        return self._joffset1\n\n    @joffset1.setter\n    def joffset1(self,\
    \ value: int) -> None:\n        self._joffset1.value = value\n\n\nclass Jofr2Register(Register):\n\
    \    \"\"\"\n    JOFR2\n\n    injected channel data offset register\n        \
    \      x\n    \"\"\"\n\n    def __init__(self):\n        self._joffset2 = Field(\"\
    joffset2\", 0, 12)\n        super().__init__(\"JOFR2\", 0x40012000 + 0x18)\n\n\
    \    @property\n    def joffset2(self) -> Field:\n        \"\"\"\n        JOFFSET2\n\
    \n        Data offset for injected channel\n                  x\n        \"\"\"\
    \n        return self._joffset2\n\n    @joffset2.setter\n    def joffset2(self,\
    \ value: int) -> None:\n        self._joffset2.value = value\n\n\nclass Jofr3Register(Register):\n\
    \    \"\"\"\n    JOFR3\n\n    injected channel data offset register\n        \
    \      x\n    \"\"\"\n\n    def __init__(self):\n        self._joffset3 = Field(\"\
    joffset3\", 0, 12)\n        super().__init__(\"JOFR3\", 0x40012000 + 0x1C)\n\n\
    \    @property\n    def joffset3(self) -> Field:\n        \"\"\"\n        JOFFSET3\n\
    \n        Data offset for injected channel\n                  x\n        \"\"\"\
    \n        return self._joffset3\n\n    @joffset3.setter\n    def joffset3(self,\
    \ value: int) -> None:\n        self._joffset3.value = value\n\n\nclass Jofr4Register(Register):\n\
    \    \"\"\"\n    JOFR4\n\n    injected channel data offset register\n        \
    \      x\n    \"\"\"\n\n    def __init__(self):\n        self._joffset4 = Field(\"\
    joffset4\", 0, 12)\n        super().__init__(\"JOFR4\", 0x40012000 + 0x20)\n\n\
    \    @property\n    def joffset4(self) -> Field:\n        \"\"\"\n        JOFFSET4\n\
    \n        Data offset for injected channel\n                  x\n        \"\"\"\
    \n        return self._joffset4\n\n    @joffset4.setter\n    def joffset4(self,\
    \ value: int) -> None:\n        self._joffset4.value = value\n\n\nclass HtrRegister(Register):\n\
    \    \"\"\"\n    HTR\n\n    watchdog higher threshold\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ht = Field(\"ht\", 0, 12)\n\
    \        super().__init__(\"HTR\", 0x40012000 + 0x24)\n\n    @property\n    def\
    \ ht(self) -> Field:\n        \"\"\"\n        HT\n\n        Analog watchdog higher\n\
    \                  threshold\n        \"\"\"\n        return self._ht\n\n    @ht.setter\n\
    \    def ht(self, value: int) -> None:\n        self._ht.value = value\n\n\nclass\
    \ LtrRegister(Register):\n    \"\"\"\n    LTR\n\n    watchdog lower threshold\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._lt\
    \ = Field(\"lt\", 0, 12)\n        super().__init__(\"LTR\", 0x40012000 + 0x28)\n\
    \n    @property\n    def lt(self) -> Field:\n        \"\"\"\n        LT\n\n  \
    \      Analog watchdog lower\n                  threshold\n        \"\"\"\n  \
    \      return self._lt\n\n    @lt.setter\n    def lt(self, value: int) -> None:\n\
    \        self._lt.value = value\n\n\nclass Sqr1Register(Register):\n    \"\"\"\
    \n    SQR1\n\n    regular sequence register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._l = Field(\"l\", 20, 4)\n        self._sq16 = Field(\"sq16\", 15,\
    \ 5)\n        self._sq15 = Field(\"sq15\", 10, 5)\n        self._sq14 = Field(\"\
    sq14\", 5, 5)\n        self._sq13 = Field(\"sq13\", 0, 5)\n        super().__init__(\"\
    SQR1\", 0x40012000 + 0x2C)\n\n    @property\n    def l(self) -> Field:\n     \
    \   \"\"\"\n        L\n\n        Regular channel sequence\n                  length\n\
    \        \"\"\"\n        return self._l\n\n    @l.setter\n    def l(self, value:\
    \ int) -> None:\n        self._l.value = value\n\n    @property\n    def sq16(self)\
    \ -> Field:\n        \"\"\"\n        SQ16\n\n        16th conversion in regular\n\
    \                  sequence\n        \"\"\"\n        return self._sq16\n\n   \
    \ @sq16.setter\n    def sq16(self, value: int) -> None:\n        self._sq16.value\
    \ = value\n\n    @property\n    def sq15(self) -> Field:\n        \"\"\"\n   \
    \     SQ15\n\n        15th conversion in regular\n                  sequence\n\
    \        \"\"\"\n        return self._sq15\n\n    @sq15.setter\n    def sq15(self,\
    \ value: int) -> None:\n        self._sq15.value = value\n\n    @property\n  \
    \  def sq14(self) -> Field:\n        \"\"\"\n        SQ14\n\n        14th conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq14\n\
    \n    @sq14.setter\n    def sq14(self, value: int) -> None:\n        self._sq14.value\
    \ = value\n\n    @property\n    def sq13(self) -> Field:\n        \"\"\"\n   \
    \     SQ13\n\n        13th conversion in regular\n                  sequence\n\
    \        \"\"\"\n        return self._sq13\n\n    @sq13.setter\n    def sq13(self,\
    \ value: int) -> None:\n        self._sq13.value = value\n\n\nclass Sqr2Register(Register):\n\
    \    \"\"\"\n    SQR2\n\n    regular sequence register 2\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._sq12 = Field(\"sq12\", 25, 5)\n        self._sq11\
    \ = Field(\"sq11\", 20, 5)\n        self._sq10 = Field(\"sq10\", 15, 5)\n    \
    \    self._sq9 = Field(\"sq9\", 10, 5)\n        self._sq8 = Field(\"sq8\", 5,\
    \ 5)\n        self._sq7 = Field(\"sq7\", 0, 5)\n        super().__init__(\"SQR2\"\
    , 0x40012000 + 0x30)\n\n    @property\n    def sq12(self) -> Field:\n        \"\
    \"\"\n        SQ12\n\n        12th conversion in regular\n                  sequence\n\
    \        \"\"\"\n        return self._sq12\n\n    @sq12.setter\n    def sq12(self,\
    \ value: int) -> None:\n        self._sq12.value = value\n\n    @property\n  \
    \  def sq11(self) -> Field:\n        \"\"\"\n        SQ11\n\n        11th conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq11\n\
    \n    @sq11.setter\n    def sq11(self, value: int) -> None:\n        self._sq11.value\
    \ = value\n\n    @property\n    def sq10(self) -> Field:\n        \"\"\"\n   \
    \     SQ10\n\n        10th conversion in regular\n                  sequence\n\
    \        \"\"\"\n        return self._sq10\n\n    @sq10.setter\n    def sq10(self,\
    \ value: int) -> None:\n        self._sq10.value = value\n\n    @property\n  \
    \  def sq9(self) -> Field:\n        \"\"\"\n        SQ9\n\n        9th conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq9\n\
    \n    @sq9.setter\n    def sq9(self, value: int) -> None:\n        self._sq9.value\
    \ = value\n\n    @property\n    def sq8(self) -> Field:\n        \"\"\"\n    \
    \    SQ8\n\n        8th conversion in regular\n                  sequence\n  \
    \      \"\"\"\n        return self._sq8\n\n    @sq8.setter\n    def sq8(self,\
    \ value: int) -> None:\n        self._sq8.value = value\n\n    @property\n   \
    \ def sq7(self) -> Field:\n        \"\"\"\n        SQ7\n\n        7th conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq7\n\
    \n    @sq7.setter\n    def sq7(self, value: int) -> None:\n        self._sq7.value\
    \ = value\n\n\nclass Sqr3Register(Register):\n    \"\"\"\n    SQR3\n\n    regular\
    \ sequence register 3\n    \"\"\"\n\n    def __init__(self):\n        self._sq6\
    \ = Field(\"sq6\", 25, 5)\n        self._sq5 = Field(\"sq5\", 20, 5)\n       \
    \ self._sq4 = Field(\"sq4\", 15, 5)\n        self._sq3 = Field(\"sq3\", 10, 5)\n\
    \        self._sq2 = Field(\"sq2\", 5, 5)\n        self._sq1 = Field(\"sq1\",\
    \ 0, 5)\n        super().__init__(\"SQR3\", 0x40012000 + 0x34)\n\n    @property\n\
    \    def sq6(self) -> Field:\n        \"\"\"\n        SQ6\n\n        6th conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq6\n\
    \n    @sq6.setter\n    def sq6(self, value: int) -> None:\n        self._sq6.value\
    \ = value\n\n    @property\n    def sq5(self) -> Field:\n        \"\"\"\n    \
    \    SQ5\n\n        5th conversion in regular\n                  sequence\n  \
    \      \"\"\"\n        return self._sq5\n\n    @sq5.setter\n    def sq5(self,\
    \ value: int) -> None:\n        self._sq5.value = value\n\n    @property\n   \
    \ def sq4(self) -> Field:\n        \"\"\"\n        SQ4\n\n        4th conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq4\n\
    \n    @sq4.setter\n    def sq4(self, value: int) -> None:\n        self._sq4.value\
    \ = value\n\n    @property\n    def sq3(self) -> Field:\n        \"\"\"\n    \
    \    SQ3\n\n        3rd conversion in regular\n                  sequence\n  \
    \      \"\"\"\n        return self._sq3\n\n    @sq3.setter\n    def sq3(self,\
    \ value: int) -> None:\n        self._sq3.value = value\n\n    @property\n   \
    \ def sq2(self) -> Field:\n        \"\"\"\n        SQ2\n\n        2nd conversion\
    \ in regular\n                  sequence\n        \"\"\"\n        return self._sq2\n\
    \n    @sq2.setter\n    def sq2(self, value: int) -> None:\n        self._sq2.value\
    \ = value\n\n    @property\n    def sq1(self) -> Field:\n        \"\"\"\n    \
    \    SQ1\n\n        1st conversion in regular\n                  sequence\n  \
    \      \"\"\"\n        return self._sq1\n\n    @sq1.setter\n    def sq1(self,\
    \ value: int) -> None:\n        self._sq1.value = value\n\n\nclass JsqrRegister(Register):\n\
    \    \"\"\"\n    JSQR\n\n    injected sequence register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._jl = Field(\"jl\", 20, 2)\n        self._jsq4\
    \ = Field(\"jsq4\", 15, 5)\n        self._jsq3 = Field(\"jsq3\", 10, 5)\n    \
    \    self._jsq2 = Field(\"jsq2\", 5, 5)\n        self._jsq1 = Field(\"jsq1\",\
    \ 0, 5)\n        super().__init__(\"JSQR\", 0x40012000 + 0x38)\n\n    @property\n\
    \    def jl(self) -> Field:\n        \"\"\"\n        JL\n\n        Injected sequence\
    \ length\n        \"\"\"\n        return self._jl\n\n    @jl.setter\n    def jl(self,\
    \ value: int) -> None:\n        self._jl.value = value\n\n    @property\n    def\
    \ jsq4(self) -> Field:\n        \"\"\"\n        JSQ4\n\n        4th conversion\
    \ in injected\n                  sequence\n        \"\"\"\n        return self._jsq4\n\
    \n    @jsq4.setter\n    def jsq4(self, value: int) -> None:\n        self._jsq4.value\
    \ = value\n\n    @property\n    def jsq3(self) -> Field:\n        \"\"\"\n   \
    \     JSQ3\n\n        3rd conversion in injected\n                  sequence\n\
    \        \"\"\"\n        return self._jsq3\n\n    @jsq3.setter\n    def jsq3(self,\
    \ value: int) -> None:\n        self._jsq3.value = value\n\n    @property\n  \
    \  def jsq2(self) -> Field:\n        \"\"\"\n        JSQ2\n\n        2nd conversion\
    \ in injected\n                  sequence\n        \"\"\"\n        return self._jsq2\n\
    \n    @jsq2.setter\n    def jsq2(self, value: int) -> None:\n        self._jsq2.value\
    \ = value\n\n    @property\n    def jsq1(self) -> Field:\n        \"\"\"\n   \
    \     JSQ1\n\n        1st conversion in injected\n                  sequence\n\
    \        \"\"\"\n        return self._jsq1\n\n    @jsq1.setter\n    def jsq1(self,\
    \ value: int) -> None:\n        self._jsq1.value = value\n\n\nclass Jdr1Register(Register):\n\
    \    \"\"\"\n    JDR1\n\n    injected data register x\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._jdata = Field(\"jdata\", 0, 16)\n        super().__init__(\"JDR1\"\
    , 0x40012000 + 0x3C)\n\n    @property\n    def jdata(self) -> Field:\n       \
    \ \"\"\"\n        JDATA\n\n        Injected data\n        \"\"\"\n        return\
    \ self._jdata\n\n    @jdata.setter\n    def jdata(self, value: int) -> None:\n\
    \        self._jdata.value = value\n\n\nclass Jdr2Register(Register):\n    \"\"\
    \"\n    JDR2\n\n    injected data register x\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._jdata = Field(\"jdata\", 0, 16)\n        super().__init__(\"JDR2\"\
    , 0x40012000 + 0x40)\n\n    @property\n    def jdata(self) -> Field:\n       \
    \ \"\"\"\n        JDATA\n\n        Injected data\n        \"\"\"\n        return\
    \ self._jdata\n\n    @jdata.setter\n    def jdata(self, value: int) -> None:\n\
    \        self._jdata.value = value\n\n\nclass Jdr3Register(Register):\n    \"\"\
    \"\n    JDR3\n\n    injected data register x\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._jdata = Field(\"jdata\", 0, 16)\n        super().__init__(\"JDR3\"\
    , 0x40012000 + 0x44)\n\n    @property\n    def jdata(self) -> Field:\n       \
    \ \"\"\"\n        JDATA\n\n        Injected data\n        \"\"\"\n        return\
    \ self._jdata\n\n    @jdata.setter\n    def jdata(self, value: int) -> None:\n\
    \        self._jdata.value = value\n\n\nclass Jdr4Register(Register):\n    \"\"\
    \"\n    JDR4\n\n    injected data register x\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._jdata = Field(\"jdata\", 0, 16)\n        super().__init__(\"JDR4\"\
    , 0x40012000 + 0x48)\n\n    @property\n    def jdata(self) -> Field:\n       \
    \ \"\"\"\n        JDATA\n\n        Injected data\n        \"\"\"\n        return\
    \ self._jdata\n\n    @jdata.setter\n    def jdata(self, value: int) -> None:\n\
    \        self._jdata.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\
    \n    DR\n\n    regular data register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._data = Field(\"data\", 0, 16)\n        super().__init__(\"DR\"\
    , 0x40012000 + 0x4C)\n\n    @property\n    def data(self) -> Field:\n        \"\
    \"\"\n        DATA\n\n        Regular data\n        \"\"\"\n        return self._data\n\
    \n    @data.setter\n    def data(self, value: int) -> None:\n        self._data.value\
    \ = value\n\n\nclass Adc1(Peripheral):\n    \"\"\"\n    ADC1\n\n    Analog-to-digital\
    \ converter\n    \"\"\"\n\n    def __init__(self):\n        self._sr = SrRegister()\n\
    \        self._cr1 = Cr1Register()\n        self._cr2 = Cr2Register()\n      \
    \  self._smpr1 = Smpr1Register()\n        self._smpr2 = Smpr2Register()\n    \
    \    self._jofr1 = Jofr1Register()\n        self._jofr2 = Jofr2Register()\n  \
    \      self._jofr3 = Jofr3Register()\n        self._jofr4 = Jofr4Register()\n\
    \        self._htr = HtrRegister()\n        self._ltr = LtrRegister()\n      \
    \  self._sqr1 = Sqr1Register()\n        self._sqr2 = Sqr2Register()\n        self._sqr3\
    \ = Sqr3Register()\n        self._jsqr = JsqrRegister()\n        self._jdr1 =\
    \ Jdr1Register()\n        self._jdr2 = Jdr2Register()\n        self._jdr3 = Jdr3Register()\n\
    \        self._jdr4 = Jdr4Register()\n        self._dr = DrRegister()\n      \
    \  super().__init__(\"adc1\", 0x40012000)\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n\n    @property\n    def cr1(self)\
    \ -> Cr1Register:\n        return self._cr1\n\n    @cr1.setter\n    def cr1(self,\
    \ value: int) -> None:\n        self._cr1.value = value\n\n    @property\n   \
    \ def cr2(self) -> Cr2Register:\n        return self._cr2\n\n    @cr2.setter\n\
    \    def cr2(self, value: int) -> None:\n        self._cr2.value = value\n\n \
    \   @property\n    def smpr1(self) -> Smpr1Register:\n        return self._smpr1\n\
    \n    @smpr1.setter\n    def smpr1(self, value: int) -> None:\n        self._smpr1.value\
    \ = value\n\n    @property\n    def smpr2(self) -> Smpr2Register:\n        return\
    \ self._smpr2\n\n    @smpr2.setter\n    def smpr2(self, value: int) -> None:\n\
    \        self._smpr2.value = value\n\n    @property\n    def jofr1(self) -> Jofr1Register:\n\
    \        return self._jofr1\n\n    @jofr1.setter\n    def jofr1(self, value: int)\
    \ -> None:\n        self._jofr1.value = value\n\n    @property\n    def jofr2(self)\
    \ -> Jofr2Register:\n        return self._jofr2\n\n    @jofr2.setter\n    def\
    \ jofr2(self, value: int) -> None:\n        self._jofr2.value = value\n\n    @property\n\
    \    def jofr3(self) -> Jofr3Register:\n        return self._jofr3\n\n    @jofr3.setter\n\
    \    def jofr3(self, value: int) -> None:\n        self._jofr3.value = value\n\
    \n    @property\n    def jofr4(self) -> Jofr4Register:\n        return self._jofr4\n\
    \n    @jofr4.setter\n    def jofr4(self, value: int) -> None:\n        self._jofr4.value\
    \ = value\n\n    @property\n    def htr(self) -> HtrRegister:\n        return\
    \ self._htr\n\n    @htr.setter\n    def htr(self, value: int) -> None:\n     \
    \   self._htr.value = value\n\n    @property\n    def ltr(self) -> LtrRegister:\n\
    \        return self._ltr\n\n    @ltr.setter\n    def ltr(self, value: int) ->\
    \ None:\n        self._ltr.value = value\n\n    @property\n    def sqr1(self)\
    \ -> Sqr1Register:\n        return self._sqr1\n\n    @sqr1.setter\n    def sqr1(self,\
    \ value: int) -> None:\n        self._sqr1.value = value\n\n    @property\n  \
    \  def sqr2(self) -> Sqr2Register:\n        return self._sqr2\n\n    @sqr2.setter\n\
    \    def sqr2(self, value: int) -> None:\n        self._sqr2.value = value\n\n\
    \    @property\n    def sqr3(self) -> Sqr3Register:\n        return self._sqr3\n\
    \n    @sqr3.setter\n    def sqr3(self, value: int) -> None:\n        self._sqr3.value\
    \ = value\n\n    @property\n    def jsqr(self) -> JsqrRegister:\n        return\
    \ self._jsqr\n\n    @jsqr.setter\n    def jsqr(self, value: int) -> None:\n  \
    \      self._jsqr.value = value\n\n    @property\n    def jdr1(self) -> Jdr1Register:\n\
    \        return self._jdr1\n\n    @jdr1.setter\n    def jdr1(self, value: int)\
    \ -> None:\n        self._jdr1.value = value\n\n    @property\n    def jdr2(self)\
    \ -> Jdr2Register:\n        return self._jdr2\n\n    @jdr2.setter\n    def jdr2(self,\
    \ value: int) -> None:\n        self._jdr2.value = value\n\n    @property\n  \
    \  def jdr3(self) -> Jdr3Register:\n        return self._jdr3\n\n    @jdr3.setter\n\
    \    def jdr3(self, value: int) -> None:\n        self._jdr3.value = value\n\n\
    \    @property\n    def jdr4(self) -> Jdr4Register:\n        return self._jdr4\n\
    \n    @jdr4.setter\n    def jdr4(self, value: int) -> None:\n        self._jdr4.value\
    \ = value\n\n    @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\
    \n    @dr.setter\n    def dr(self, value: int) -> None:\n        self._dr.value\
    \ = value\n"
  name: ADC1
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 32)\n\
    \        super().__init__(\"DR\", 0x40023000 + 0x0)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        Data Register\n  \
    \      \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    Independent Data register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._idr = Field(\"idr\", 0, 8)\n        super().__init__(\"IDR\", 0x40023000\
    \ + 0x4)\n\n    @property\n    def idr(self) -> Field:\n        \"\"\"\n     \
    \   IDR\n\n        Independent Data register\n        \"\"\"\n        return self._idr\n\
    \n    @idr.setter\n    def idr(self, value: int) -> None:\n        self._idr.value\
    \ = value\n\n\nclass CrRegister(Register):\n    \"\"\"\n    CR\n\n    Control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._cr = Field(\"\
    cr\", 0, 1)\n        super().__init__(\"CR\", 0x40023000 + 0x8)\n\n    @property\n\
    \    def cr(self) -> Field:\n        \"\"\"\n        CR\n\n        Control regidter\n\
    \        \"\"\"\n        return self._cr\n\n    @cr.setter\n    def cr(self, value:\
    \ int) -> None:\n        self._cr.value = value\n\n\nclass Crc(Peripheral):\n\
    \    \"\"\"\n    CRC\n\n    Cryptographic processor\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dr = DrRegister()\n        self._idr = IdrRegister()\n        self._cr\
    \ = CrRegister()\n        super().__init__(\"crc\", 0x40023000)\n\n    @property\n\
    \    def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n   \
    \ @property\n    def idr(self) -> IdrRegister:\n        return self._idr\n\n \
    \   @idr.setter\n    def idr(self, value: int) -> None:\n        self._idr.value\
    \ = value\n\n    @property\n    def cr(self) -> CrRegister:\n        return self._cr\n\
    \n    @cr.setter\n    def cr(self, value: int) -> None:\n        self._cr.value\
    \ = value\n"
  name: CRC
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Dbgmcu_idcodeRegister(Register):\n    \"\"\"\n    DBGMCU_IDCODE\n\
    \n    IDCODE\n    \"\"\"\n\n    def __init__(self):\n        self._dev_id = Field(\"\
    dev_id\", 0, 12)\n        self._rev_id = Field(\"rev_id\", 16, 16)\n        super().__init__(\"\
    DBGMCU_IDCODE\", 0xE0042000 + 0x0)\n\n    @property\n    def dev_id(self) -> Field:\n\
    \        \"\"\"\n        DEV_ID\n\n        DEV_ID\n        \"\"\"\n        return\
    \ self._dev_id\n\n    @dev_id.setter\n    def dev_id(self, value: int) -> None:\n\
    \        self._dev_id.value = value\n\n    @property\n    def rev_id(self) ->\
    \ Field:\n        \"\"\"\n        REV_ID\n\n        REV_ID\n        \"\"\"\n \
    \       return self._rev_id\n\n    @rev_id.setter\n    def rev_id(self, value:\
    \ int) -> None:\n        self._rev_id.value = value\n\n\nclass Dbgmcu_crRegister(Register):\n\
    \    \"\"\"\n    DBGMCU_CR\n\n    Control Register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dbg_sleep = Field(\"dbg_sleep\", 0, 1)\n        self._dbg_stop\
    \ = Field(\"dbg_stop\", 1, 1)\n        self._dbg_standby = Field(\"dbg_standby\"\
    , 2, 1)\n        self._trace_ioen = Field(\"trace_ioen\", 5, 1)\n        self._trace_mode\
    \ = Field(\"trace_mode\", 6, 2)\n        super().__init__(\"DBGMCU_CR\", 0xE0042000\
    \ + 0x4)\n\n    @property\n    def dbg_sleep(self) -> Field:\n        \"\"\"\n\
    \        DBG_SLEEP\n\n        DBG_SLEEP\n        \"\"\"\n        return self._dbg_sleep\n\
    \n    @dbg_sleep.setter\n    def dbg_sleep(self, value: int) -> None:\n      \
    \  self._dbg_sleep.value = value\n\n    @property\n    def dbg_stop(self) -> Field:\n\
    \        \"\"\"\n        DBG_STOP\n\n        DBG_STOP\n        \"\"\"\n      \
    \  return self._dbg_stop\n\n    @dbg_stop.setter\n    def dbg_stop(self, value:\
    \ int) -> None:\n        self._dbg_stop.value = value\n\n    @property\n    def\
    \ dbg_standby(self) -> Field:\n        \"\"\"\n        DBG_STANDBY\n\n       \
    \ DBG_STANDBY\n        \"\"\"\n        return self._dbg_standby\n\n    @dbg_standby.setter\n\
    \    def dbg_standby(self, value: int) -> None:\n        self._dbg_standby.value\
    \ = value\n\n    @property\n    def trace_ioen(self) -> Field:\n        \"\"\"\
    \n        TRACE_IOEN\n\n        TRACE_IOEN\n        \"\"\"\n        return self._trace_ioen\n\
    \n    @trace_ioen.setter\n    def trace_ioen(self, value: int) -> None:\n    \
    \    self._trace_ioen.value = value\n\n    @property\n    def trace_mode(self)\
    \ -> Field:\n        \"\"\"\n        TRACE_MODE\n\n        TRACE_MODE\n      \
    \  \"\"\"\n        return self._trace_mode\n\n    @trace_mode.setter\n    def\
    \ trace_mode(self, value: int) -> None:\n        self._trace_mode.value = value\n\
    \n\nclass Dbgmcu_apb1_fzRegister(Register):\n    \"\"\"\n    DBGMCU_APB1_FZ\n\n\
    \    Debug MCU APB1 Freeze registe\n    \"\"\"\n\n    def __init__(self):\n  \
    \      self._dbg_tim2_stop = Field(\"dbg_tim2_stop\", 0, 1)\n        self._dbg_tim3_stop\
    \ = Field(\"dbg_tim3_stop\", 1, 1)\n        self._dbg_tim4_stop = Field(\"dbg_tim4_stop\"\
    , 2, 1)\n        self._dbg_tim5_stop = Field(\"dbg_tim5_stop\", 3, 1)\n      \
    \  self._dbg_rtc_stop = Field(\"dbg_rtc_stop\", 10, 1)\n        self._dbg_wwdg_stop\
    \ = Field(\"dbg_wwdg_stop\", 11, 1)\n        self._dbg_iwdeg_stop = Field(\"dbg_iwdeg_stop\"\
    , 12, 1)\n        self._dbg_i2c1_smbus_timeout = Field(\"dbg_i2c1_smbus_timeout\"\
    , 21, 1)\n        self._dbg_i2c2_smbus_timeout = Field(\"dbg_i2c2_smbus_timeout\"\
    , 22, 1)\n        self._dbg_i2c3smbus_timeout = Field(\"dbg_i2c3smbus_timeout\"\
    , 23, 1)\n        super().__init__(\"DBGMCU_APB1_FZ\", 0xE0042000 + 0x8)\n\n \
    \   @property\n    def dbg_tim2_stop(self) -> Field:\n        \"\"\"\n       \
    \ DBG_TIM2_STOP\n\n        DBG_TIM2_STOP\n        \"\"\"\n        return self._dbg_tim2_stop\n\
    \n    @dbg_tim2_stop.setter\n    def dbg_tim2_stop(self, value: int) -> None:\n\
    \        self._dbg_tim2_stop.value = value\n\n    @property\n    def dbg_tim3_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_TIM3_STOP\n\n        DBG_TIM3 _STOP\n\
    \        \"\"\"\n        return self._dbg_tim3_stop\n\n    @dbg_tim3_stop.setter\n\
    \    def dbg_tim3_stop(self, value: int) -> None:\n        self._dbg_tim3_stop.value\
    \ = value\n\n    @property\n    def dbg_tim4_stop(self) -> Field:\n        \"\"\
    \"\n        DBG_TIM4_STOP\n\n        DBG_TIM4_STOP\n        \"\"\"\n        return\
    \ self._dbg_tim4_stop\n\n    @dbg_tim4_stop.setter\n    def dbg_tim4_stop(self,\
    \ value: int) -> None:\n        self._dbg_tim4_stop.value = value\n\n    @property\n\
    \    def dbg_tim5_stop(self) -> Field:\n        \"\"\"\n        DBG_TIM5_STOP\n\
    \n        DBG_TIM5_STOP\n        \"\"\"\n        return self._dbg_tim5_stop\n\n\
    \    @dbg_tim5_stop.setter\n    def dbg_tim5_stop(self, value: int) -> None:\n\
    \        self._dbg_tim5_stop.value = value\n\n    @property\n    def dbg_rtc_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_RTC_STOP\n\n        RTC stopped when\
    \ Core is\n                  halted\n        \"\"\"\n        return self._dbg_rtc_stop\n\
    \n    @dbg_rtc_stop.setter\n    def dbg_rtc_stop(self, value: int) -> None:\n\
    \        self._dbg_rtc_stop.value = value\n\n    @property\n    def dbg_wwdg_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_WWDG_STOP\n\n        DBG_WWDG_STOP\n\
    \        \"\"\"\n        return self._dbg_wwdg_stop\n\n    @dbg_wwdg_stop.setter\n\
    \    def dbg_wwdg_stop(self, value: int) -> None:\n        self._dbg_wwdg_stop.value\
    \ = value\n\n    @property\n    def dbg_iwdeg_stop(self) -> Field:\n        \"\
    \"\"\n        DBG_IWDEG_STOP\n\n        DBG_IWDEG_STOP\n        \"\"\"\n     \
    \   return self._dbg_iwdeg_stop\n\n    @dbg_iwdeg_stop.setter\n    def dbg_iwdeg_stop(self,\
    \ value: int) -> None:\n        self._dbg_iwdeg_stop.value = value\n\n    @property\n\
    \    def dbg_i2c1_smbus_timeout(self) -> Field:\n        \"\"\"\n        DBG_I2C1_SMBUS_TIMEOUT\n\
    \n        DBG_J2C1_SMBUS_TIMEOUT\n        \"\"\"\n        return self._dbg_i2c1_smbus_timeout\n\
    \n    @dbg_i2c1_smbus_timeout.setter\n    def dbg_i2c1_smbus_timeout(self, value:\
    \ int) -> None:\n        self._dbg_i2c1_smbus_timeout.value = value\n\n    @property\n\
    \    def dbg_i2c2_smbus_timeout(self) -> Field:\n        \"\"\"\n        DBG_I2C2_SMBUS_TIMEOUT\n\
    \n        DBG_J2C2_SMBUS_TIMEOUT\n        \"\"\"\n        return self._dbg_i2c2_smbus_timeout\n\
    \n    @dbg_i2c2_smbus_timeout.setter\n    def dbg_i2c2_smbus_timeout(self, value:\
    \ int) -> None:\n        self._dbg_i2c2_smbus_timeout.value = value\n\n    @property\n\
    \    def dbg_i2c3smbus_timeout(self) -> Field:\n        \"\"\"\n        DBG_I2C3SMBUS_TIMEOUT\n\
    \n        DBG_J2C3SMBUS_TIMEOUT\n        \"\"\"\n        return self._dbg_i2c3smbus_timeout\n\
    \n    @dbg_i2c3smbus_timeout.setter\n    def dbg_i2c3smbus_timeout(self, value:\
    \ int) -> None:\n        self._dbg_i2c3smbus_timeout.value = value\n\n\nclass\
    \ Dbgmcu_apb2_fzRegister(Register):\n    \"\"\"\n    DBGMCU_APB2_FZ\n\n    Debug\
    \ MCU APB2 Freeze registe\n    \"\"\"\n\n    def __init__(self):\n        self._dbg_tim1_stop\
    \ = Field(\"dbg_tim1_stop\", 0, 1)\n        self._dbg_tim9_stop = Field(\"dbg_tim9_stop\"\
    , 16, 1)\n        self._dbg_tim10_stop = Field(\"dbg_tim10_stop\", 17, 1)\n  \
    \      self._dbg_tim11_stop = Field(\"dbg_tim11_stop\", 18, 1)\n        super().__init__(\"\
    DBGMCU_APB2_FZ\", 0xE0042000 + 0xC)\n\n    @property\n    def dbg_tim1_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_TIM1_STOP\n\n        TIM1 counter stopped\
    \ when core is\n                  halted\n        \"\"\"\n        return self._dbg_tim1_stop\n\
    \n    @dbg_tim1_stop.setter\n    def dbg_tim1_stop(self, value: int) -> None:\n\
    \        self._dbg_tim1_stop.value = value\n\n    @property\n    def dbg_tim9_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_TIM9_STOP\n\n        TIM9 counter stopped\
    \ when core is\n                  halted\n        \"\"\"\n        return self._dbg_tim9_stop\n\
    \n    @dbg_tim9_stop.setter\n    def dbg_tim9_stop(self, value: int) -> None:\n\
    \        self._dbg_tim9_stop.value = value\n\n    @property\n    def dbg_tim10_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_TIM10_STOP\n\n        TIM10 counter stopped\
    \ when core is\n                  halted\n        \"\"\"\n        return self._dbg_tim10_stop\n\
    \n    @dbg_tim10_stop.setter\n    def dbg_tim10_stop(self, value: int) -> None:\n\
    \        self._dbg_tim10_stop.value = value\n\n    @property\n    def dbg_tim11_stop(self)\
    \ -> Field:\n        \"\"\"\n        DBG_TIM11_STOP\n\n        TIM11 counter stopped\
    \ when core is\n                  halted\n        \"\"\"\n        return self._dbg_tim11_stop\n\
    \n    @dbg_tim11_stop.setter\n    def dbg_tim11_stop(self, value: int) -> None:\n\
    \        self._dbg_tim11_stop.value = value\n\n\nclass Dbg(Peripheral):\n    \"\
    \"\"\n    DBG\n\n    Debug support\n    \"\"\"\n\n    def __init__(self):\n  \
    \      self._dbgmcu_idcode = Dbgmcu_idcodeRegister()\n        self._dbgmcu_cr\
    \ = Dbgmcu_crRegister()\n        self._dbgmcu_apb1_fz = Dbgmcu_apb1_fzRegister()\n\
    \        self._dbgmcu_apb2_fz = Dbgmcu_apb2_fzRegister()\n        super().__init__(\"\
    dbg\", 0xE0042000)\n\n    @property\n    def dbgmcu_idcode(self) -> Dbgmcu_idcodeRegister:\n\
    \        return self._dbgmcu_idcode\n\n    @dbgmcu_idcode.setter\n    def dbgmcu_idcode(self,\
    \ value: int) -> None:\n        self._dbgmcu_idcode.value = value\n\n    @property\n\
    \    def dbgmcu_cr(self) -> Dbgmcu_crRegister:\n        return self._dbgmcu_cr\n\
    \n    @dbgmcu_cr.setter\n    def dbgmcu_cr(self, value: int) -> None:\n      \
    \  self._dbgmcu_cr.value = value\n\n    @property\n    def dbgmcu_apb1_fz(self)\
    \ -> Dbgmcu_apb1_fzRegister:\n        return self._dbgmcu_apb1_fz\n\n    @dbgmcu_apb1_fz.setter\n\
    \    def dbgmcu_apb1_fz(self, value: int) -> None:\n        self._dbgmcu_apb1_fz.value\
    \ = value\n\n    @property\n    def dbgmcu_apb2_fz(self) -> Dbgmcu_apb2_fzRegister:\n\
    \        return self._dbgmcu_apb2_fz\n\n    @dbgmcu_apb2_fz.setter\n    def dbgmcu_apb2_fz(self,\
    \ value: int) -> None:\n        self._dbgmcu_apb2_fz.value = value\n"
  name: DBG
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ImrRegister(Register):\n    \"\"\"\n    IMR\n\n    Interrupt\
    \ mask register\n              (EXTI_IMR)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._mr0 = Field(\"mr0\", 0, 1)\n        self._mr1 = Field(\"mr1\",\
    \ 1, 1)\n        self._mr2 = Field(\"mr2\", 2, 1)\n        self._mr3 = Field(\"\
    mr3\", 3, 1)\n        self._mr4 = Field(\"mr4\", 4, 1)\n        self._mr5 = Field(\"\
    mr5\", 5, 1)\n        self._mr6 = Field(\"mr6\", 6, 1)\n        self._mr7 = Field(\"\
    mr7\", 7, 1)\n        self._mr8 = Field(\"mr8\", 8, 1)\n        self._mr9 = Field(\"\
    mr9\", 9, 1)\n        self._mr10 = Field(\"mr10\", 10, 1)\n        self._mr11\
    \ = Field(\"mr11\", 11, 1)\n        self._mr12 = Field(\"mr12\", 12, 1)\n    \
    \    self._mr13 = Field(\"mr13\", 13, 1)\n        self._mr14 = Field(\"mr14\"\
    , 14, 1)\n        self._mr15 = Field(\"mr15\", 15, 1)\n        self._mr16 = Field(\"\
    mr16\", 16, 1)\n        self._mr17 = Field(\"mr17\", 17, 1)\n        self._mr18\
    \ = Field(\"mr18\", 18, 1)\n        self._mr19 = Field(\"mr19\", 19, 1)\n    \
    \    self._mr20 = Field(\"mr20\", 20, 1)\n        self._mr21 = Field(\"mr21\"\
    , 21, 1)\n        self._mr22 = Field(\"mr22\", 22, 1)\n        super().__init__(\"\
    IMR\", 0x40013C00 + 0x0)\n\n    @property\n    def mr0(self) -> Field:\n     \
    \   \"\"\"\n        MR0\n\n        Interrupt Mask on line 0\n        \"\"\"\n\
    \        return self._mr0\n\n    @mr0.setter\n    def mr0(self, value: int) ->\
    \ None:\n        self._mr0.value = value\n\n    @property\n    def mr1(self) ->\
    \ Field:\n        \"\"\"\n        MR1\n\n        Interrupt Mask on line 1\n  \
    \      \"\"\"\n        return self._mr1\n\n    @mr1.setter\n    def mr1(self,\
    \ value: int) -> None:\n        self._mr1.value = value\n\n    @property\n   \
    \ def mr2(self) -> Field:\n        \"\"\"\n        MR2\n\n        Interrupt Mask\
    \ on line 2\n        \"\"\"\n        return self._mr2\n\n    @mr2.setter\n   \
    \ def mr2(self, value: int) -> None:\n        self._mr2.value = value\n\n    @property\n\
    \    def mr3(self) -> Field:\n        \"\"\"\n        MR3\n\n        Interrupt\
    \ Mask on line 3\n        \"\"\"\n        return self._mr3\n\n    @mr3.setter\n\
    \    def mr3(self, value: int) -> None:\n        self._mr3.value = value\n\n \
    \   @property\n    def mr4(self) -> Field:\n        \"\"\"\n        MR4\n\n  \
    \      Interrupt Mask on line 4\n        \"\"\"\n        return self._mr4\n\n\
    \    @mr4.setter\n    def mr4(self, value: int) -> None:\n        self._mr4.value\
    \ = value\n\n    @property\n    def mr5(self) -> Field:\n        \"\"\"\n    \
    \    MR5\n\n        Interrupt Mask on line 5\n        \"\"\"\n        return self._mr5\n\
    \n    @mr5.setter\n    def mr5(self, value: int) -> None:\n        self._mr5.value\
    \ = value\n\n    @property\n    def mr6(self) -> Field:\n        \"\"\"\n    \
    \    MR6\n\n        Interrupt Mask on line 6\n        \"\"\"\n        return self._mr6\n\
    \n    @mr6.setter\n    def mr6(self, value: int) -> None:\n        self._mr6.value\
    \ = value\n\n    @property\n    def mr7(self) -> Field:\n        \"\"\"\n    \
    \    MR7\n\n        Interrupt Mask on line 7\n        \"\"\"\n        return self._mr7\n\
    \n    @mr7.setter\n    def mr7(self, value: int) -> None:\n        self._mr7.value\
    \ = value\n\n    @property\n    def mr8(self) -> Field:\n        \"\"\"\n    \
    \    MR8\n\n        Interrupt Mask on line 8\n        \"\"\"\n        return self._mr8\n\
    \n    @mr8.setter\n    def mr8(self, value: int) -> None:\n        self._mr8.value\
    \ = value\n\n    @property\n    def mr9(self) -> Field:\n        \"\"\"\n    \
    \    MR9\n\n        Interrupt Mask on line 9\n        \"\"\"\n        return self._mr9\n\
    \n    @mr9.setter\n    def mr9(self, value: int) -> None:\n        self._mr9.value\
    \ = value\n\n    @property\n    def mr10(self) -> Field:\n        \"\"\"\n   \
    \     MR10\n\n        Interrupt Mask on line 10\n        \"\"\"\n        return\
    \ self._mr10\n\n    @mr10.setter\n    def mr10(self, value: int) -> None:\n  \
    \      self._mr10.value = value\n\n    @property\n    def mr11(self) -> Field:\n\
    \        \"\"\"\n        MR11\n\n        Interrupt Mask on line 11\n        \"\
    \"\"\n        return self._mr11\n\n    @mr11.setter\n    def mr11(self, value:\
    \ int) -> None:\n        self._mr11.value = value\n\n    @property\n    def mr12(self)\
    \ -> Field:\n        \"\"\"\n        MR12\n\n        Interrupt Mask on line 12\n\
    \        \"\"\"\n        return self._mr12\n\n    @mr12.setter\n    def mr12(self,\
    \ value: int) -> None:\n        self._mr12.value = value\n\n    @property\n  \
    \  def mr13(self) -> Field:\n        \"\"\"\n        MR13\n\n        Interrupt\
    \ Mask on line 13\n        \"\"\"\n        return self._mr13\n\n    @mr13.setter\n\
    \    def mr13(self, value: int) -> None:\n        self._mr13.value = value\n\n\
    \    @property\n    def mr14(self) -> Field:\n        \"\"\"\n        MR14\n\n\
    \        Interrupt Mask on line 14\n        \"\"\"\n        return self._mr14\n\
    \n    @mr14.setter\n    def mr14(self, value: int) -> None:\n        self._mr14.value\
    \ = value\n\n    @property\n    def mr15(self) -> Field:\n        \"\"\"\n   \
    \     MR15\n\n        Interrupt Mask on line 15\n        \"\"\"\n        return\
    \ self._mr15\n\n    @mr15.setter\n    def mr15(self, value: int) -> None:\n  \
    \      self._mr15.value = value\n\n    @property\n    def mr16(self) -> Field:\n\
    \        \"\"\"\n        MR16\n\n        Interrupt Mask on line 16\n        \"\
    \"\"\n        return self._mr16\n\n    @mr16.setter\n    def mr16(self, value:\
    \ int) -> None:\n        self._mr16.value = value\n\n    @property\n    def mr17(self)\
    \ -> Field:\n        \"\"\"\n        MR17\n\n        Interrupt Mask on line 17\n\
    \        \"\"\"\n        return self._mr17\n\n    @mr17.setter\n    def mr17(self,\
    \ value: int) -> None:\n        self._mr17.value = value\n\n    @property\n  \
    \  def mr18(self) -> Field:\n        \"\"\"\n        MR18\n\n        Interrupt\
    \ Mask on line 18\n        \"\"\"\n        return self._mr18\n\n    @mr18.setter\n\
    \    def mr18(self, value: int) -> None:\n        self._mr18.value = value\n\n\
    \    @property\n    def mr19(self) -> Field:\n        \"\"\"\n        MR19\n\n\
    \        Interrupt Mask on line 19\n        \"\"\"\n        return self._mr19\n\
    \n    @mr19.setter\n    def mr19(self, value: int) -> None:\n        self._mr19.value\
    \ = value\n\n    @property\n    def mr20(self) -> Field:\n        \"\"\"\n   \
    \     MR20\n\n        Interrupt Mask on line 20\n        \"\"\"\n        return\
    \ self._mr20\n\n    @mr20.setter\n    def mr20(self, value: int) -> None:\n  \
    \      self._mr20.value = value\n\n    @property\n    def mr21(self) -> Field:\n\
    \        \"\"\"\n        MR21\n\n        Interrupt Mask on line 21\n        \"\
    \"\"\n        return self._mr21\n\n    @mr21.setter\n    def mr21(self, value:\
    \ int) -> None:\n        self._mr21.value = value\n\n    @property\n    def mr22(self)\
    \ -> Field:\n        \"\"\"\n        MR22\n\n        Interrupt Mask on line 22\n\
    \        \"\"\"\n        return self._mr22\n\n    @mr22.setter\n    def mr22(self,\
    \ value: int) -> None:\n        self._mr22.value = value\n\n\nclass EmrRegister(Register):\n\
    \    \"\"\"\n    EMR\n\n    Event mask register (EXTI_EMR)\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._mr0 = Field(\"mr0\", 0, 1)\n        self._mr1\
    \ = Field(\"mr1\", 1, 1)\n        self._mr2 = Field(\"mr2\", 2, 1)\n        self._mr3\
    \ = Field(\"mr3\", 3, 1)\n        self._mr4 = Field(\"mr4\", 4, 1)\n        self._mr5\
    \ = Field(\"mr5\", 5, 1)\n        self._mr6 = Field(\"mr6\", 6, 1)\n        self._mr7\
    \ = Field(\"mr7\", 7, 1)\n        self._mr8 = Field(\"mr8\", 8, 1)\n        self._mr9\
    \ = Field(\"mr9\", 9, 1)\n        self._mr10 = Field(\"mr10\", 10, 1)\n      \
    \  self._mr11 = Field(\"mr11\", 11, 1)\n        self._mr12 = Field(\"mr12\", 12,\
    \ 1)\n        self._mr13 = Field(\"mr13\", 13, 1)\n        self._mr14 = Field(\"\
    mr14\", 14, 1)\n        self._mr15 = Field(\"mr15\", 15, 1)\n        self._mr16\
    \ = Field(\"mr16\", 16, 1)\n        self._mr17 = Field(\"mr17\", 17, 1)\n    \
    \    self._mr18 = Field(\"mr18\", 18, 1)\n        self._mr19 = Field(\"mr19\"\
    , 19, 1)\n        self._mr20 = Field(\"mr20\", 20, 1)\n        self._mr21 = Field(\"\
    mr21\", 21, 1)\n        self._mr22 = Field(\"mr22\", 22, 1)\n        super().__init__(\"\
    EMR\", 0x40013C00 + 0x4)\n\n    @property\n    def mr0(self) -> Field:\n     \
    \   \"\"\"\n        MR0\n\n        Event Mask on line 0\n        \"\"\"\n    \
    \    return self._mr0\n\n    @mr0.setter\n    def mr0(self, value: int) -> None:\n\
    \        self._mr0.value = value\n\n    @property\n    def mr1(self) -> Field:\n\
    \        \"\"\"\n        MR1\n\n        Event Mask on line 1\n        \"\"\"\n\
    \        return self._mr1\n\n    @mr1.setter\n    def mr1(self, value: int) ->\
    \ None:\n        self._mr1.value = value\n\n    @property\n    def mr2(self) ->\
    \ Field:\n        \"\"\"\n        MR2\n\n        Event Mask on line 2\n      \
    \  \"\"\"\n        return self._mr2\n\n    @mr2.setter\n    def mr2(self, value:\
    \ int) -> None:\n        self._mr2.value = value\n\n    @property\n    def mr3(self)\
    \ -> Field:\n        \"\"\"\n        MR3\n\n        Event Mask on line 3\n   \
    \     \"\"\"\n        return self._mr3\n\n    @mr3.setter\n    def mr3(self, value:\
    \ int) -> None:\n        self._mr3.value = value\n\n    @property\n    def mr4(self)\
    \ -> Field:\n        \"\"\"\n        MR4\n\n        Event Mask on line 4\n   \
    \     \"\"\"\n        return self._mr4\n\n    @mr4.setter\n    def mr4(self, value:\
    \ int) -> None:\n        self._mr4.value = value\n\n    @property\n    def mr5(self)\
    \ -> Field:\n        \"\"\"\n        MR5\n\n        Event Mask on line 5\n   \
    \     \"\"\"\n        return self._mr5\n\n    @mr5.setter\n    def mr5(self, value:\
    \ int) -> None:\n        self._mr5.value = value\n\n    @property\n    def mr6(self)\
    \ -> Field:\n        \"\"\"\n        MR6\n\n        Event Mask on line 6\n   \
    \     \"\"\"\n        return self._mr6\n\n    @mr6.setter\n    def mr6(self, value:\
    \ int) -> None:\n        self._mr6.value = value\n\n    @property\n    def mr7(self)\
    \ -> Field:\n        \"\"\"\n        MR7\n\n        Event Mask on line 7\n   \
    \     \"\"\"\n        return self._mr7\n\n    @mr7.setter\n    def mr7(self, value:\
    \ int) -> None:\n        self._mr7.value = value\n\n    @property\n    def mr8(self)\
    \ -> Field:\n        \"\"\"\n        MR8\n\n        Event Mask on line 8\n   \
    \     \"\"\"\n        return self._mr8\n\n    @mr8.setter\n    def mr8(self, value:\
    \ int) -> None:\n        self._mr8.value = value\n\n    @property\n    def mr9(self)\
    \ -> Field:\n        \"\"\"\n        MR9\n\n        Event Mask on line 9\n   \
    \     \"\"\"\n        return self._mr9\n\n    @mr9.setter\n    def mr9(self, value:\
    \ int) -> None:\n        self._mr9.value = value\n\n    @property\n    def mr10(self)\
    \ -> Field:\n        \"\"\"\n        MR10\n\n        Event Mask on line 10\n \
    \       \"\"\"\n        return self._mr10\n\n    @mr10.setter\n    def mr10(self,\
    \ value: int) -> None:\n        self._mr10.value = value\n\n    @property\n  \
    \  def mr11(self) -> Field:\n        \"\"\"\n        MR11\n\n        Event Mask\
    \ on line 11\n        \"\"\"\n        return self._mr11\n\n    @mr11.setter\n\
    \    def mr11(self, value: int) -> None:\n        self._mr11.value = value\n\n\
    \    @property\n    def mr12(self) -> Field:\n        \"\"\"\n        MR12\n\n\
    \        Event Mask on line 12\n        \"\"\"\n        return self._mr12\n\n\
    \    @mr12.setter\n    def mr12(self, value: int) -> None:\n        self._mr12.value\
    \ = value\n\n    @property\n    def mr13(self) -> Field:\n        \"\"\"\n   \
    \     MR13\n\n        Event Mask on line 13\n        \"\"\"\n        return self._mr13\n\
    \n    @mr13.setter\n    def mr13(self, value: int) -> None:\n        self._mr13.value\
    \ = value\n\n    @property\n    def mr14(self) -> Field:\n        \"\"\"\n   \
    \     MR14\n\n        Event Mask on line 14\n        \"\"\"\n        return self._mr14\n\
    \n    @mr14.setter\n    def mr14(self, value: int) -> None:\n        self._mr14.value\
    \ = value\n\n    @property\n    def mr15(self) -> Field:\n        \"\"\"\n   \
    \     MR15\n\n        Event Mask on line 15\n        \"\"\"\n        return self._mr15\n\
    \n    @mr15.setter\n    def mr15(self, value: int) -> None:\n        self._mr15.value\
    \ = value\n\n    @property\n    def mr16(self) -> Field:\n        \"\"\"\n   \
    \     MR16\n\n        Event Mask on line 16\n        \"\"\"\n        return self._mr16\n\
    \n    @mr16.setter\n    def mr16(self, value: int) -> None:\n        self._mr16.value\
    \ = value\n\n    @property\n    def mr17(self) -> Field:\n        \"\"\"\n   \
    \     MR17\n\n        Event Mask on line 17\n        \"\"\"\n        return self._mr17\n\
    \n    @mr17.setter\n    def mr17(self, value: int) -> None:\n        self._mr17.value\
    \ = value\n\n    @property\n    def mr18(self) -> Field:\n        \"\"\"\n   \
    \     MR18\n\n        Event Mask on line 18\n        \"\"\"\n        return self._mr18\n\
    \n    @mr18.setter\n    def mr18(self, value: int) -> None:\n        self._mr18.value\
    \ = value\n\n    @property\n    def mr19(self) -> Field:\n        \"\"\"\n   \
    \     MR19\n\n        Event Mask on line 19\n        \"\"\"\n        return self._mr19\n\
    \n    @mr19.setter\n    def mr19(self, value: int) -> None:\n        self._mr19.value\
    \ = value\n\n    @property\n    def mr20(self) -> Field:\n        \"\"\"\n   \
    \     MR20\n\n        Event Mask on line 20\n        \"\"\"\n        return self._mr20\n\
    \n    @mr20.setter\n    def mr20(self, value: int) -> None:\n        self._mr20.value\
    \ = value\n\n    @property\n    def mr21(self) -> Field:\n        \"\"\"\n   \
    \     MR21\n\n        Event Mask on line 21\n        \"\"\"\n        return self._mr21\n\
    \n    @mr21.setter\n    def mr21(self, value: int) -> None:\n        self._mr21.value\
    \ = value\n\n    @property\n    def mr22(self) -> Field:\n        \"\"\"\n   \
    \     MR22\n\n        Event Mask on line 22\n        \"\"\"\n        return self._mr22\n\
    \n    @mr22.setter\n    def mr22(self, value: int) -> None:\n        self._mr22.value\
    \ = value\n\n\nclass RtsrRegister(Register):\n    \"\"\"\n    RTSR\n\n    Rising\
    \ Trigger selection register\n              (EXTI_RTSR)\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._tr0 = Field(\"tr0\", 0, 1)\n        self._tr1\
    \ = Field(\"tr1\", 1, 1)\n        self._tr2 = Field(\"tr2\", 2, 1)\n        self._tr3\
    \ = Field(\"tr3\", 3, 1)\n        self._tr4 = Field(\"tr4\", 4, 1)\n        self._tr5\
    \ = Field(\"tr5\", 5, 1)\n        self._tr6 = Field(\"tr6\", 6, 1)\n        self._tr7\
    \ = Field(\"tr7\", 7, 1)\n        self._tr8 = Field(\"tr8\", 8, 1)\n        self._tr9\
    \ = Field(\"tr9\", 9, 1)\n        self._tr10 = Field(\"tr10\", 10, 1)\n      \
    \  self._tr11 = Field(\"tr11\", 11, 1)\n        self._tr12 = Field(\"tr12\", 12,\
    \ 1)\n        self._tr13 = Field(\"tr13\", 13, 1)\n        self._tr14 = Field(\"\
    tr14\", 14, 1)\n        self._tr15 = Field(\"tr15\", 15, 1)\n        self._tr16\
    \ = Field(\"tr16\", 16, 1)\n        self._tr17 = Field(\"tr17\", 17, 1)\n    \
    \    self._tr18 = Field(\"tr18\", 18, 1)\n        self._tr19 = Field(\"tr19\"\
    , 19, 1)\n        self._tr20 = Field(\"tr20\", 20, 1)\n        self._tr21 = Field(\"\
    tr21\", 21, 1)\n        self._tr22 = Field(\"tr22\", 22, 1)\n        super().__init__(\"\
    RTSR\", 0x40013C00 + 0x8)\n\n    @property\n    def tr0(self) -> Field:\n    \
    \    \"\"\"\n        TR0\n\n        Rising trigger event configuration of\n  \
    \                line 0\n        \"\"\"\n        return self._tr0\n\n    @tr0.setter\n\
    \    def tr0(self, value: int) -> None:\n        self._tr0.value = value\n\n \
    \   @property\n    def tr1(self) -> Field:\n        \"\"\"\n        TR1\n\n  \
    \      Rising trigger event configuration of\n                  line 1\n     \
    \   \"\"\"\n        return self._tr1\n\n    @tr1.setter\n    def tr1(self, value:\
    \ int) -> None:\n        self._tr1.value = value\n\n    @property\n    def tr2(self)\
    \ -> Field:\n        \"\"\"\n        TR2\n\n        Rising trigger event configuration\
    \ of\n                  line 2\n        \"\"\"\n        return self._tr2\n\n \
    \   @tr2.setter\n    def tr2(self, value: int) -> None:\n        self._tr2.value\
    \ = value\n\n    @property\n    def tr3(self) -> Field:\n        \"\"\"\n    \
    \    TR3\n\n        Rising trigger event configuration of\n                  line\
    \ 3\n        \"\"\"\n        return self._tr3\n\n    @tr3.setter\n    def tr3(self,\
    \ value: int) -> None:\n        self._tr3.value = value\n\n    @property\n   \
    \ def tr4(self) -> Field:\n        \"\"\"\n        TR4\n\n        Rising trigger\
    \ event configuration of\n                  line 4\n        \"\"\"\n        return\
    \ self._tr4\n\n    @tr4.setter\n    def tr4(self, value: int) -> None:\n     \
    \   self._tr4.value = value\n\n    @property\n    def tr5(self) -> Field:\n  \
    \      \"\"\"\n        TR5\n\n        Rising trigger event configuration of\n\
    \                  line 5\n        \"\"\"\n        return self._tr5\n\n    @tr5.setter\n\
    \    def tr5(self, value: int) -> None:\n        self._tr5.value = value\n\n \
    \   @property\n    def tr6(self) -> Field:\n        \"\"\"\n        TR6\n\n  \
    \      Rising trigger event configuration of\n                  line 6\n     \
    \   \"\"\"\n        return self._tr6\n\n    @tr6.setter\n    def tr6(self, value:\
    \ int) -> None:\n        self._tr6.value = value\n\n    @property\n    def tr7(self)\
    \ -> Field:\n        \"\"\"\n        TR7\n\n        Rising trigger event configuration\
    \ of\n                  line 7\n        \"\"\"\n        return self._tr7\n\n \
    \   @tr7.setter\n    def tr7(self, value: int) -> None:\n        self._tr7.value\
    \ = value\n\n    @property\n    def tr8(self) -> Field:\n        \"\"\"\n    \
    \    TR8\n\n        Rising trigger event configuration of\n                  line\
    \ 8\n        \"\"\"\n        return self._tr8\n\n    @tr8.setter\n    def tr8(self,\
    \ value: int) -> None:\n        self._tr8.value = value\n\n    @property\n   \
    \ def tr9(self) -> Field:\n        \"\"\"\n        TR9\n\n        Rising trigger\
    \ event configuration of\n                  line 9\n        \"\"\"\n        return\
    \ self._tr9\n\n    @tr9.setter\n    def tr9(self, value: int) -> None:\n     \
    \   self._tr9.value = value\n\n    @property\n    def tr10(self) -> Field:\n \
    \       \"\"\"\n        TR10\n\n        Rising trigger event configuration of\n\
    \                  line 10\n        \"\"\"\n        return self._tr10\n\n    @tr10.setter\n\
    \    def tr10(self, value: int) -> None:\n        self._tr10.value = value\n\n\
    \    @property\n    def tr11(self) -> Field:\n        \"\"\"\n        TR11\n\n\
    \        Rising trigger event configuration of\n                  line 11\n  \
    \      \"\"\"\n        return self._tr11\n\n    @tr11.setter\n    def tr11(self,\
    \ value: int) -> None:\n        self._tr11.value = value\n\n    @property\n  \
    \  def tr12(self) -> Field:\n        \"\"\"\n        TR12\n\n        Rising trigger\
    \ event configuration of\n                  line 12\n        \"\"\"\n        return\
    \ self._tr12\n\n    @tr12.setter\n    def tr12(self, value: int) -> None:\n  \
    \      self._tr12.value = value\n\n    @property\n    def tr13(self) -> Field:\n\
    \        \"\"\"\n        TR13\n\n        Rising trigger event configuration of\n\
    \                  line 13\n        \"\"\"\n        return self._tr13\n\n    @tr13.setter\n\
    \    def tr13(self, value: int) -> None:\n        self._tr13.value = value\n\n\
    \    @property\n    def tr14(self) -> Field:\n        \"\"\"\n        TR14\n\n\
    \        Rising trigger event configuration of\n                  line 14\n  \
    \      \"\"\"\n        return self._tr14\n\n    @tr14.setter\n    def tr14(self,\
    \ value: int) -> None:\n        self._tr14.value = value\n\n    @property\n  \
    \  def tr15(self) -> Field:\n        \"\"\"\n        TR15\n\n        Rising trigger\
    \ event configuration of\n                  line 15\n        \"\"\"\n        return\
    \ self._tr15\n\n    @tr15.setter\n    def tr15(self, value: int) -> None:\n  \
    \      self._tr15.value = value\n\n    @property\n    def tr16(self) -> Field:\n\
    \        \"\"\"\n        TR16\n\n        Rising trigger event configuration of\n\
    \                  line 16\n        \"\"\"\n        return self._tr16\n\n    @tr16.setter\n\
    \    def tr16(self, value: int) -> None:\n        self._tr16.value = value\n\n\
    \    @property\n    def tr17(self) -> Field:\n        \"\"\"\n        TR17\n\n\
    \        Rising trigger event configuration of\n                  line 17\n  \
    \      \"\"\"\n        return self._tr17\n\n    @tr17.setter\n    def tr17(self,\
    \ value: int) -> None:\n        self._tr17.value = value\n\n    @property\n  \
    \  def tr18(self) -> Field:\n        \"\"\"\n        TR18\n\n        Rising trigger\
    \ event configuration of\n                  line 18\n        \"\"\"\n        return\
    \ self._tr18\n\n    @tr18.setter\n    def tr18(self, value: int) -> None:\n  \
    \      self._tr18.value = value\n\n    @property\n    def tr19(self) -> Field:\n\
    \        \"\"\"\n        TR19\n\n        Rising trigger event configuration of\n\
    \                  line 19\n        \"\"\"\n        return self._tr19\n\n    @tr19.setter\n\
    \    def tr19(self, value: int) -> None:\n        self._tr19.value = value\n\n\
    \    @property\n    def tr20(self) -> Field:\n        \"\"\"\n        TR20\n\n\
    \        Rising trigger event configuration of\n                  line 20\n  \
    \      \"\"\"\n        return self._tr20\n\n    @tr20.setter\n    def tr20(self,\
    \ value: int) -> None:\n        self._tr20.value = value\n\n    @property\n  \
    \  def tr21(self) -> Field:\n        \"\"\"\n        TR21\n\n        Rising trigger\
    \ event configuration of\n                  line 21\n        \"\"\"\n        return\
    \ self._tr21\n\n    @tr21.setter\n    def tr21(self, value: int) -> None:\n  \
    \      self._tr21.value = value\n\n    @property\n    def tr22(self) -> Field:\n\
    \        \"\"\"\n        TR22\n\n        Rising trigger event configuration of\n\
    \                  line 22\n        \"\"\"\n        return self._tr22\n\n    @tr22.setter\n\
    \    def tr22(self, value: int) -> None:\n        self._tr22.value = value\n\n\
    \nclass FtsrRegister(Register):\n    \"\"\"\n    FTSR\n\n    Falling Trigger selection\
    \ register\n              (EXTI_FTSR)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._tr0 = Field(\"tr0\", 0, 1)\n        self._tr1 = Field(\"tr1\",\
    \ 1, 1)\n        self._tr2 = Field(\"tr2\", 2, 1)\n        self._tr3 = Field(\"\
    tr3\", 3, 1)\n        self._tr4 = Field(\"tr4\", 4, 1)\n        self._tr5 = Field(\"\
    tr5\", 5, 1)\n        self._tr6 = Field(\"tr6\", 6, 1)\n        self._tr7 = Field(\"\
    tr7\", 7, 1)\n        self._tr8 = Field(\"tr8\", 8, 1)\n        self._tr9 = Field(\"\
    tr9\", 9, 1)\n        self._tr10 = Field(\"tr10\", 10, 1)\n        self._tr11\
    \ = Field(\"tr11\", 11, 1)\n        self._tr12 = Field(\"tr12\", 12, 1)\n    \
    \    self._tr13 = Field(\"tr13\", 13, 1)\n        self._tr14 = Field(\"tr14\"\
    , 14, 1)\n        self._tr15 = Field(\"tr15\", 15, 1)\n        self._tr16 = Field(\"\
    tr16\", 16, 1)\n        self._tr17 = Field(\"tr17\", 17, 1)\n        self._tr18\
    \ = Field(\"tr18\", 18, 1)\n        self._tr19 = Field(\"tr19\", 19, 1)\n    \
    \    self._tr20 = Field(\"tr20\", 20, 1)\n        self._tr21 = Field(\"tr21\"\
    , 21, 1)\n        self._tr22 = Field(\"tr22\", 22, 1)\n        super().__init__(\"\
    FTSR\", 0x40013C00 + 0xC)\n\n    @property\n    def tr0(self) -> Field:\n    \
    \    \"\"\"\n        TR0\n\n        Falling trigger event configuration of\n \
    \                 line 0\n        \"\"\"\n        return self._tr0\n\n    @tr0.setter\n\
    \    def tr0(self, value: int) -> None:\n        self._tr0.value = value\n\n \
    \   @property\n    def tr1(self) -> Field:\n        \"\"\"\n        TR1\n\n  \
    \      Falling trigger event configuration of\n                  line 1\n    \
    \    \"\"\"\n        return self._tr1\n\n    @tr1.setter\n    def tr1(self, value:\
    \ int) -> None:\n        self._tr1.value = value\n\n    @property\n    def tr2(self)\
    \ -> Field:\n        \"\"\"\n        TR2\n\n        Falling trigger event configuration\
    \ of\n                  line 2\n        \"\"\"\n        return self._tr2\n\n \
    \   @tr2.setter\n    def tr2(self, value: int) -> None:\n        self._tr2.value\
    \ = value\n\n    @property\n    def tr3(self) -> Field:\n        \"\"\"\n    \
    \    TR3\n\n        Falling trigger event configuration of\n                 \
    \ line 3\n        \"\"\"\n        return self._tr3\n\n    @tr3.setter\n    def\
    \ tr3(self, value: int) -> None:\n        self._tr3.value = value\n\n    @property\n\
    \    def tr4(self) -> Field:\n        \"\"\"\n        TR4\n\n        Falling trigger\
    \ event configuration of\n                  line 4\n        \"\"\"\n        return\
    \ self._tr4\n\n    @tr4.setter\n    def tr4(self, value: int) -> None:\n     \
    \   self._tr4.value = value\n\n    @property\n    def tr5(self) -> Field:\n  \
    \      \"\"\"\n        TR5\n\n        Falling trigger event configuration of\n\
    \                  line 5\n        \"\"\"\n        return self._tr5\n\n    @tr5.setter\n\
    \    def tr5(self, value: int) -> None:\n        self._tr5.value = value\n\n \
    \   @property\n    def tr6(self) -> Field:\n        \"\"\"\n        TR6\n\n  \
    \      Falling trigger event configuration of\n                  line 6\n    \
    \    \"\"\"\n        return self._tr6\n\n    @tr6.setter\n    def tr6(self, value:\
    \ int) -> None:\n        self._tr6.value = value\n\n    @property\n    def tr7(self)\
    \ -> Field:\n        \"\"\"\n        TR7\n\n        Falling trigger event configuration\
    \ of\n                  line 7\n        \"\"\"\n        return self._tr7\n\n \
    \   @tr7.setter\n    def tr7(self, value: int) -> None:\n        self._tr7.value\
    \ = value\n\n    @property\n    def tr8(self) -> Field:\n        \"\"\"\n    \
    \    TR8\n\n        Falling trigger event configuration of\n                 \
    \ line 8\n        \"\"\"\n        return self._tr8\n\n    @tr8.setter\n    def\
    \ tr8(self, value: int) -> None:\n        self._tr8.value = value\n\n    @property\n\
    \    def tr9(self) -> Field:\n        \"\"\"\n        TR9\n\n        Falling trigger\
    \ event configuration of\n                  line 9\n        \"\"\"\n        return\
    \ self._tr9\n\n    @tr9.setter\n    def tr9(self, value: int) -> None:\n     \
    \   self._tr9.value = value\n\n    @property\n    def tr10(self) -> Field:\n \
    \       \"\"\"\n        TR10\n\n        Falling trigger event configuration of\n\
    \                  line 10\n        \"\"\"\n        return self._tr10\n\n    @tr10.setter\n\
    \    def tr10(self, value: int) -> None:\n        self._tr10.value = value\n\n\
    \    @property\n    def tr11(self) -> Field:\n        \"\"\"\n        TR11\n\n\
    \        Falling trigger event configuration of\n                  line 11\n \
    \       \"\"\"\n        return self._tr11\n\n    @tr11.setter\n    def tr11(self,\
    \ value: int) -> None:\n        self._tr11.value = value\n\n    @property\n  \
    \  def tr12(self) -> Field:\n        \"\"\"\n        TR12\n\n        Falling trigger\
    \ event configuration of\n                  line 12\n        \"\"\"\n        return\
    \ self._tr12\n\n    @tr12.setter\n    def tr12(self, value: int) -> None:\n  \
    \      self._tr12.value = value\n\n    @property\n    def tr13(self) -> Field:\n\
    \        \"\"\"\n        TR13\n\n        Falling trigger event configuration of\n\
    \                  line 13\n        \"\"\"\n        return self._tr13\n\n    @tr13.setter\n\
    \    def tr13(self, value: int) -> None:\n        self._tr13.value = value\n\n\
    \    @property\n    def tr14(self) -> Field:\n        \"\"\"\n        TR14\n\n\
    \        Falling trigger event configuration of\n                  line 14\n \
    \       \"\"\"\n        return self._tr14\n\n    @tr14.setter\n    def tr14(self,\
    \ value: int) -> None:\n        self._tr14.value = value\n\n    @property\n  \
    \  def tr15(self) -> Field:\n        \"\"\"\n        TR15\n\n        Falling trigger\
    \ event configuration of\n                  line 15\n        \"\"\"\n        return\
    \ self._tr15\n\n    @tr15.setter\n    def tr15(self, value: int) -> None:\n  \
    \      self._tr15.value = value\n\n    @property\n    def tr16(self) -> Field:\n\
    \        \"\"\"\n        TR16\n\n        Falling trigger event configuration of\n\
    \                  line 16\n        \"\"\"\n        return self._tr16\n\n    @tr16.setter\n\
    \    def tr16(self, value: int) -> None:\n        self._tr16.value = value\n\n\
    \    @property\n    def tr17(self) -> Field:\n        \"\"\"\n        TR17\n\n\
    \        Falling trigger event configuration of\n                  line 17\n \
    \       \"\"\"\n        return self._tr17\n\n    @tr17.setter\n    def tr17(self,\
    \ value: int) -> None:\n        self._tr17.value = value\n\n    @property\n  \
    \  def tr18(self) -> Field:\n        \"\"\"\n        TR18\n\n        Falling trigger\
    \ event configuration of\n                  line 18\n        \"\"\"\n        return\
    \ self._tr18\n\n    @tr18.setter\n    def tr18(self, value: int) -> None:\n  \
    \      self._tr18.value = value\n\n    @property\n    def tr19(self) -> Field:\n\
    \        \"\"\"\n        TR19\n\n        Falling trigger event configuration of\n\
    \                  line 19\n        \"\"\"\n        return self._tr19\n\n    @tr19.setter\n\
    \    def tr19(self, value: int) -> None:\n        self._tr19.value = value\n\n\
    \    @property\n    def tr20(self) -> Field:\n        \"\"\"\n        TR20\n\n\
    \        Falling trigger event configuration of\n                  line 20\n \
    \       \"\"\"\n        return self._tr20\n\n    @tr20.setter\n    def tr20(self,\
    \ value: int) -> None:\n        self._tr20.value = value\n\n    @property\n  \
    \  def tr21(self) -> Field:\n        \"\"\"\n        TR21\n\n        Falling trigger\
    \ event configuration of\n                  line 21\n        \"\"\"\n        return\
    \ self._tr21\n\n    @tr21.setter\n    def tr21(self, value: int) -> None:\n  \
    \      self._tr21.value = value\n\n    @property\n    def tr22(self) -> Field:\n\
    \        \"\"\"\n        TR22\n\n        Falling trigger event configuration of\n\
    \                  line 22\n        \"\"\"\n        return self._tr22\n\n    @tr22.setter\n\
    \    def tr22(self, value: int) -> None:\n        self._tr22.value = value\n\n\
    \nclass SwierRegister(Register):\n    \"\"\"\n    SWIER\n\n    Software interrupt\
    \ event register\n              (EXTI_SWIER)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._swier0 = Field(\"swier0\", 0, 1)\n        self._swier1 = Field(\"\
    swier1\", 1, 1)\n        self._swier2 = Field(\"swier2\", 2, 1)\n        self._swier3\
    \ = Field(\"swier3\", 3, 1)\n        self._swier4 = Field(\"swier4\", 4, 1)\n\
    \        self._swier5 = Field(\"swier5\", 5, 1)\n        self._swier6 = Field(\"\
    swier6\", 6, 1)\n        self._swier7 = Field(\"swier7\", 7, 1)\n        self._swier8\
    \ = Field(\"swier8\", 8, 1)\n        self._swier9 = Field(\"swier9\", 9, 1)\n\
    \        self._swier10 = Field(\"swier10\", 10, 1)\n        self._swier11 = Field(\"\
    swier11\", 11, 1)\n        self._swier12 = Field(\"swier12\", 12, 1)\n       \
    \ self._swier13 = Field(\"swier13\", 13, 1)\n        self._swier14 = Field(\"\
    swier14\", 14, 1)\n        self._swier15 = Field(\"swier15\", 15, 1)\n       \
    \ self._swier16 = Field(\"swier16\", 16, 1)\n        self._swier17 = Field(\"\
    swier17\", 17, 1)\n        self._swier18 = Field(\"swier18\", 18, 1)\n       \
    \ self._swier19 = Field(\"swier19\", 19, 1)\n        self._swier20 = Field(\"\
    swier20\", 20, 1)\n        self._swier21 = Field(\"swier21\", 21, 1)\n       \
    \ self._swier22 = Field(\"swier22\", 22, 1)\n        super().__init__(\"SWIER\"\
    , 0x40013C00 + 0x10)\n\n    @property\n    def swier0(self) -> Field:\n      \
    \  \"\"\"\n        SWIER0\n\n        Software Interrupt on line\n            \
    \      0\n        \"\"\"\n        return self._swier0\n\n    @swier0.setter\n\
    \    def swier0(self, value: int) -> None:\n        self._swier0.value = value\n\
    \n    @property\n    def swier1(self) -> Field:\n        \"\"\"\n        SWIER1\n\
    \n        Software Interrupt on line\n                  1\n        \"\"\"\n  \
    \      return self._swier1\n\n    @swier1.setter\n    def swier1(self, value:\
    \ int) -> None:\n        self._swier1.value = value\n\n    @property\n    def\
    \ swier2(self) -> Field:\n        \"\"\"\n        SWIER2\n\n        Software Interrupt\
    \ on line\n                  2\n        \"\"\"\n        return self._swier2\n\n\
    \    @swier2.setter\n    def swier2(self, value: int) -> None:\n        self._swier2.value\
    \ = value\n\n    @property\n    def swier3(self) -> Field:\n        \"\"\"\n \
    \       SWIER3\n\n        Software Interrupt on line\n                  3\n  \
    \      \"\"\"\n        return self._swier3\n\n    @swier3.setter\n    def swier3(self,\
    \ value: int) -> None:\n        self._swier3.value = value\n\n    @property\n\
    \    def swier4(self) -> Field:\n        \"\"\"\n        SWIER4\n\n        Software\
    \ Interrupt on line\n                  4\n        \"\"\"\n        return self._swier4\n\
    \n    @swier4.setter\n    def swier4(self, value: int) -> None:\n        self._swier4.value\
    \ = value\n\n    @property\n    def swier5(self) -> Field:\n        \"\"\"\n \
    \       SWIER5\n\n        Software Interrupt on line\n                  5\n  \
    \      \"\"\"\n        return self._swier5\n\n    @swier5.setter\n    def swier5(self,\
    \ value: int) -> None:\n        self._swier5.value = value\n\n    @property\n\
    \    def swier6(self) -> Field:\n        \"\"\"\n        SWIER6\n\n        Software\
    \ Interrupt on line\n                  6\n        \"\"\"\n        return self._swier6\n\
    \n    @swier6.setter\n    def swier6(self, value: int) -> None:\n        self._swier6.value\
    \ = value\n\n    @property\n    def swier7(self) -> Field:\n        \"\"\"\n \
    \       SWIER7\n\n        Software Interrupt on line\n                  7\n  \
    \      \"\"\"\n        return self._swier7\n\n    @swier7.setter\n    def swier7(self,\
    \ value: int) -> None:\n        self._swier7.value = value\n\n    @property\n\
    \    def swier8(self) -> Field:\n        \"\"\"\n        SWIER8\n\n        Software\
    \ Interrupt on line\n                  8\n        \"\"\"\n        return self._swier8\n\
    \n    @swier8.setter\n    def swier8(self, value: int) -> None:\n        self._swier8.value\
    \ = value\n\n    @property\n    def swier9(self) -> Field:\n        \"\"\"\n \
    \       SWIER9\n\n        Software Interrupt on line\n                  9\n  \
    \      \"\"\"\n        return self._swier9\n\n    @swier9.setter\n    def swier9(self,\
    \ value: int) -> None:\n        self._swier9.value = value\n\n    @property\n\
    \    def swier10(self) -> Field:\n        \"\"\"\n        SWIER10\n\n        Software\
    \ Interrupt on line\n                  10\n        \"\"\"\n        return self._swier10\n\
    \n    @swier10.setter\n    def swier10(self, value: int) -> None:\n        self._swier10.value\
    \ = value\n\n    @property\n    def swier11(self) -> Field:\n        \"\"\"\n\
    \        SWIER11\n\n        Software Interrupt on line\n                  11\n\
    \        \"\"\"\n        return self._swier11\n\n    @swier11.setter\n    def\
    \ swier11(self, value: int) -> None:\n        self._swier11.value = value\n\n\
    \    @property\n    def swier12(self) -> Field:\n        \"\"\"\n        SWIER12\n\
    \n        Software Interrupt on line\n                  12\n        \"\"\"\n \
    \       return self._swier12\n\n    @swier12.setter\n    def swier12(self, value:\
    \ int) -> None:\n        self._swier12.value = value\n\n    @property\n    def\
    \ swier13(self) -> Field:\n        \"\"\"\n        SWIER13\n\n        Software\
    \ Interrupt on line\n                  13\n        \"\"\"\n        return self._swier13\n\
    \n    @swier13.setter\n    def swier13(self, value: int) -> None:\n        self._swier13.value\
    \ = value\n\n    @property\n    def swier14(self) -> Field:\n        \"\"\"\n\
    \        SWIER14\n\n        Software Interrupt on line\n                  14\n\
    \        \"\"\"\n        return self._swier14\n\n    @swier14.setter\n    def\
    \ swier14(self, value: int) -> None:\n        self._swier14.value = value\n\n\
    \    @property\n    def swier15(self) -> Field:\n        \"\"\"\n        SWIER15\n\
    \n        Software Interrupt on line\n                  15\n        \"\"\"\n \
    \       return self._swier15\n\n    @swier15.setter\n    def swier15(self, value:\
    \ int) -> None:\n        self._swier15.value = value\n\n    @property\n    def\
    \ swier16(self) -> Field:\n        \"\"\"\n        SWIER16\n\n        Software\
    \ Interrupt on line\n                  16\n        \"\"\"\n        return self._swier16\n\
    \n    @swier16.setter\n    def swier16(self, value: int) -> None:\n        self._swier16.value\
    \ = value\n\n    @property\n    def swier17(self) -> Field:\n        \"\"\"\n\
    \        SWIER17\n\n        Software Interrupt on line\n                  17\n\
    \        \"\"\"\n        return self._swier17\n\n    @swier17.setter\n    def\
    \ swier17(self, value: int) -> None:\n        self._swier17.value = value\n\n\
    \    @property\n    def swier18(self) -> Field:\n        \"\"\"\n        SWIER18\n\
    \n        Software Interrupt on line\n                  18\n        \"\"\"\n \
    \       return self._swier18\n\n    @swier18.setter\n    def swier18(self, value:\
    \ int) -> None:\n        self._swier18.value = value\n\n    @property\n    def\
    \ swier19(self) -> Field:\n        \"\"\"\n        SWIER19\n\n        Software\
    \ Interrupt on line\n                  19\n        \"\"\"\n        return self._swier19\n\
    \n    @swier19.setter\n    def swier19(self, value: int) -> None:\n        self._swier19.value\
    \ = value\n\n    @property\n    def swier20(self) -> Field:\n        \"\"\"\n\
    \        SWIER20\n\n        Software Interrupt on line\n                  20\n\
    \        \"\"\"\n        return self._swier20\n\n    @swier20.setter\n    def\
    \ swier20(self, value: int) -> None:\n        self._swier20.value = value\n\n\
    \    @property\n    def swier21(self) -> Field:\n        \"\"\"\n        SWIER21\n\
    \n        Software Interrupt on line\n                  21\n        \"\"\"\n \
    \       return self._swier21\n\n    @swier21.setter\n    def swier21(self, value:\
    \ int) -> None:\n        self._swier21.value = value\n\n    @property\n    def\
    \ swier22(self) -> Field:\n        \"\"\"\n        SWIER22\n\n        Software\
    \ Interrupt on line\n                  22\n        \"\"\"\n        return self._swier22\n\
    \n    @swier22.setter\n    def swier22(self, value: int) -> None:\n        self._swier22.value\
    \ = value\n\n\nclass PrRegister(Register):\n    \"\"\"\n    PR\n\n    Pending\
    \ register (EXTI_PR)\n    \"\"\"\n\n    def __init__(self):\n        self._pr0\
    \ = Field(\"pr0\", 0, 1)\n        self._pr1 = Field(\"pr1\", 1, 1)\n        self._pr2\
    \ = Field(\"pr2\", 2, 1)\n        self._pr3 = Field(\"pr3\", 3, 1)\n        self._pr4\
    \ = Field(\"pr4\", 4, 1)\n        self._pr5 = Field(\"pr5\", 5, 1)\n        self._pr6\
    \ = Field(\"pr6\", 6, 1)\n        self._pr7 = Field(\"pr7\", 7, 1)\n        self._pr8\
    \ = Field(\"pr8\", 8, 1)\n        self._pr9 = Field(\"pr9\", 9, 1)\n        self._pr10\
    \ = Field(\"pr10\", 10, 1)\n        self._pr11 = Field(\"pr11\", 11, 1)\n    \
    \    self._pr12 = Field(\"pr12\", 12, 1)\n        self._pr13 = Field(\"pr13\"\
    , 13, 1)\n        self._pr14 = Field(\"pr14\", 14, 1)\n        self._pr15 = Field(\"\
    pr15\", 15, 1)\n        self._pr16 = Field(\"pr16\", 16, 1)\n        self._pr17\
    \ = Field(\"pr17\", 17, 1)\n        self._pr18 = Field(\"pr18\", 18, 1)\n    \
    \    self._pr19 = Field(\"pr19\", 19, 1)\n        self._pr20 = Field(\"pr20\"\
    , 20, 1)\n        self._pr21 = Field(\"pr21\", 21, 1)\n        self._pr22 = Field(\"\
    pr22\", 22, 1)\n        super().__init__(\"PR\", 0x40013C00 + 0x14)\n\n    @property\n\
    \    def pr0(self) -> Field:\n        \"\"\"\n        PR0\n\n        Pending bit\
    \ 0\n        \"\"\"\n        return self._pr0\n\n    @pr0.setter\n    def pr0(self,\
    \ value: int) -> None:\n        self._pr0.value = value\n\n    @property\n   \
    \ def pr1(self) -> Field:\n        \"\"\"\n        PR1\n\n        Pending bit\
    \ 1\n        \"\"\"\n        return self._pr1\n\n    @pr1.setter\n    def pr1(self,\
    \ value: int) -> None:\n        self._pr1.value = value\n\n    @property\n   \
    \ def pr2(self) -> Field:\n        \"\"\"\n        PR2\n\n        Pending bit\
    \ 2\n        \"\"\"\n        return self._pr2\n\n    @pr2.setter\n    def pr2(self,\
    \ value: int) -> None:\n        self._pr2.value = value\n\n    @property\n   \
    \ def pr3(self) -> Field:\n        \"\"\"\n        PR3\n\n        Pending bit\
    \ 3\n        \"\"\"\n        return self._pr3\n\n    @pr3.setter\n    def pr3(self,\
    \ value: int) -> None:\n        self._pr3.value = value\n\n    @property\n   \
    \ def pr4(self) -> Field:\n        \"\"\"\n        PR4\n\n        Pending bit\
    \ 4\n        \"\"\"\n        return self._pr4\n\n    @pr4.setter\n    def pr4(self,\
    \ value: int) -> None:\n        self._pr4.value = value\n\n    @property\n   \
    \ def pr5(self) -> Field:\n        \"\"\"\n        PR5\n\n        Pending bit\
    \ 5\n        \"\"\"\n        return self._pr5\n\n    @pr5.setter\n    def pr5(self,\
    \ value: int) -> None:\n        self._pr5.value = value\n\n    @property\n   \
    \ def pr6(self) -> Field:\n        \"\"\"\n        PR6\n\n        Pending bit\
    \ 6\n        \"\"\"\n        return self._pr6\n\n    @pr6.setter\n    def pr6(self,\
    \ value: int) -> None:\n        self._pr6.value = value\n\n    @property\n   \
    \ def pr7(self) -> Field:\n        \"\"\"\n        PR7\n\n        Pending bit\
    \ 7\n        \"\"\"\n        return self._pr7\n\n    @pr7.setter\n    def pr7(self,\
    \ value: int) -> None:\n        self._pr7.value = value\n\n    @property\n   \
    \ def pr8(self) -> Field:\n        \"\"\"\n        PR8\n\n        Pending bit\
    \ 8\n        \"\"\"\n        return self._pr8\n\n    @pr8.setter\n    def pr8(self,\
    \ value: int) -> None:\n        self._pr8.value = value\n\n    @property\n   \
    \ def pr9(self) -> Field:\n        \"\"\"\n        PR9\n\n        Pending bit\
    \ 9\n        \"\"\"\n        return self._pr9\n\n    @pr9.setter\n    def pr9(self,\
    \ value: int) -> None:\n        self._pr9.value = value\n\n    @property\n   \
    \ def pr10(self) -> Field:\n        \"\"\"\n        PR10\n\n        Pending bit\
    \ 10\n        \"\"\"\n        return self._pr10\n\n    @pr10.setter\n    def pr10(self,\
    \ value: int) -> None:\n        self._pr10.value = value\n\n    @property\n  \
    \  def pr11(self) -> Field:\n        \"\"\"\n        PR11\n\n        Pending bit\
    \ 11\n        \"\"\"\n        return self._pr11\n\n    @pr11.setter\n    def pr11(self,\
    \ value: int) -> None:\n        self._pr11.value = value\n\n    @property\n  \
    \  def pr12(self) -> Field:\n        \"\"\"\n        PR12\n\n        Pending bit\
    \ 12\n        \"\"\"\n        return self._pr12\n\n    @pr12.setter\n    def pr12(self,\
    \ value: int) -> None:\n        self._pr12.value = value\n\n    @property\n  \
    \  def pr13(self) -> Field:\n        \"\"\"\n        PR13\n\n        Pending bit\
    \ 13\n        \"\"\"\n        return self._pr13\n\n    @pr13.setter\n    def pr13(self,\
    \ value: int) -> None:\n        self._pr13.value = value\n\n    @property\n  \
    \  def pr14(self) -> Field:\n        \"\"\"\n        PR14\n\n        Pending bit\
    \ 14\n        \"\"\"\n        return self._pr14\n\n    @pr14.setter\n    def pr14(self,\
    \ value: int) -> None:\n        self._pr14.value = value\n\n    @property\n  \
    \  def pr15(self) -> Field:\n        \"\"\"\n        PR15\n\n        Pending bit\
    \ 15\n        \"\"\"\n        return self._pr15\n\n    @pr15.setter\n    def pr15(self,\
    \ value: int) -> None:\n        self._pr15.value = value\n\n    @property\n  \
    \  def pr16(self) -> Field:\n        \"\"\"\n        PR16\n\n        Pending bit\
    \ 16\n        \"\"\"\n        return self._pr16\n\n    @pr16.setter\n    def pr16(self,\
    \ value: int) -> None:\n        self._pr16.value = value\n\n    @property\n  \
    \  def pr17(self) -> Field:\n        \"\"\"\n        PR17\n\n        Pending bit\
    \ 17\n        \"\"\"\n        return self._pr17\n\n    @pr17.setter\n    def pr17(self,\
    \ value: int) -> None:\n        self._pr17.value = value\n\n    @property\n  \
    \  def pr18(self) -> Field:\n        \"\"\"\n        PR18\n\n        Pending bit\
    \ 18\n        \"\"\"\n        return self._pr18\n\n    @pr18.setter\n    def pr18(self,\
    \ value: int) -> None:\n        self._pr18.value = value\n\n    @property\n  \
    \  def pr19(self) -> Field:\n        \"\"\"\n        PR19\n\n        Pending bit\
    \ 19\n        \"\"\"\n        return self._pr19\n\n    @pr19.setter\n    def pr19(self,\
    \ value: int) -> None:\n        self._pr19.value = value\n\n    @property\n  \
    \  def pr20(self) -> Field:\n        \"\"\"\n        PR20\n\n        Pending bit\
    \ 20\n        \"\"\"\n        return self._pr20\n\n    @pr20.setter\n    def pr20(self,\
    \ value: int) -> None:\n        self._pr20.value = value\n\n    @property\n  \
    \  def pr21(self) -> Field:\n        \"\"\"\n        PR21\n\n        Pending bit\
    \ 21\n        \"\"\"\n        return self._pr21\n\n    @pr21.setter\n    def pr21(self,\
    \ value: int) -> None:\n        self._pr21.value = value\n\n    @property\n  \
    \  def pr22(self) -> Field:\n        \"\"\"\n        PR22\n\n        Pending bit\
    \ 22\n        \"\"\"\n        return self._pr22\n\n    @pr22.setter\n    def pr22(self,\
    \ value: int) -> None:\n        self._pr22.value = value\n\n\nclass Exti(Peripheral):\n\
    \    \"\"\"\n    EXTI\n\n    External interrupt/event\n          controller\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._imr = ImrRegister()\n  \
    \      self._emr = EmrRegister()\n        self._rtsr = RtsrRegister()\n      \
    \  self._ftsr = FtsrRegister()\n        self._swier = SwierRegister()\n      \
    \  self._pr = PrRegister()\n        super().__init__(\"exti\", 0x40013C00)\n\n\
    \    @property\n    def imr(self) -> ImrRegister:\n        return self._imr\n\n\
    \    @imr.setter\n    def imr(self, value: int) -> None:\n        self._imr.value\
    \ = value\n\n    @property\n    def emr(self) -> EmrRegister:\n        return\
    \ self._emr\n\n    @emr.setter\n    def emr(self, value: int) -> None:\n     \
    \   self._emr.value = value\n\n    @property\n    def rtsr(self) -> RtsrRegister:\n\
    \        return self._rtsr\n\n    @rtsr.setter\n    def rtsr(self, value: int)\
    \ -> None:\n        self._rtsr.value = value\n\n    @property\n    def ftsr(self)\
    \ -> FtsrRegister:\n        return self._ftsr\n\n    @ftsr.setter\n    def ftsr(self,\
    \ value: int) -> None:\n        self._ftsr.value = value\n\n    @property\n  \
    \  def swier(self) -> SwierRegister:\n        return self._swier\n\n    @swier.setter\n\
    \    def swier(self, value: int) -> None:\n        self._swier.value = value\n\
    \n    @property\n    def pr(self) -> PrRegister:\n        return self._pr\n\n\
    \    @pr.setter\n    def pr(self, value: int) -> None:\n        self._pr.value\
    \ = value\n"
  name: EXTI
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass AcrRegister(Register):\n    \"\"\"\n    ACR\n\n    Flash\
    \ access control register\n    \"\"\"\n\n    def __init__(self):\n        self._latency\
    \ = Field(\"latency\", 0, 3)\n        self._prften = Field(\"prften\", 8, 1)\n\
    \        self._icen = Field(\"icen\", 9, 1)\n        self._dcen = Field(\"dcen\"\
    , 10, 1)\n        self._icrst = Field(\"icrst\", 11, 1)\n        self._dcrst =\
    \ Field(\"dcrst\", 12, 1)\n        super().__init__(\"ACR\", 0x40023C00 + 0x0)\n\
    \n    @property\n    def latency(self) -> Field:\n        \"\"\"\n        LATENCY\n\
    \n        Latency\n        \"\"\"\n        return self._latency\n\n    @latency.setter\n\
    \    def latency(self, value: int) -> None:\n        self._latency.value = value\n\
    \n    @property\n    def prften(self) -> Field:\n        \"\"\"\n        PRFTEN\n\
    \n        Prefetch enable\n        \"\"\"\n        return self._prften\n\n   \
    \ @prften.setter\n    def prften(self, value: int) -> None:\n        self._prften.value\
    \ = value\n\n    @property\n    def icen(self) -> Field:\n        \"\"\"\n   \
    \     ICEN\n\n        Instruction cache enable\n        \"\"\"\n        return\
    \ self._icen\n\n    @icen.setter\n    def icen(self, value: int) -> None:\n  \
    \      self._icen.value = value\n\n    @property\n    def dcen(self) -> Field:\n\
    \        \"\"\"\n        DCEN\n\n        Data cache enable\n        \"\"\"\n \
    \       return self._dcen\n\n    @dcen.setter\n    def dcen(self, value: int)\
    \ -> None:\n        self._dcen.value = value\n\n    @property\n    def icrst(self)\
    \ -> Field:\n        \"\"\"\n        ICRST\n\n        Instruction cache reset\n\
    \        \"\"\"\n        return self._icrst\n\n    @icrst.setter\n    def icrst(self,\
    \ value: int) -> None:\n        self._icrst.value = value\n\n    @property\n \
    \   def dcrst(self) -> Field:\n        \"\"\"\n        DCRST\n\n        Data cache\
    \ reset\n        \"\"\"\n        return self._dcrst\n\n    @dcrst.setter\n   \
    \ def dcrst(self, value: int) -> None:\n        self._dcrst.value = value\n\n\n\
    class KeyrRegister(Register):\n    \"\"\"\n    KEYR\n\n    Flash key register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._key = Field(\"key\", 0,\
    \ 32)\n        super().__init__(\"KEYR\", 0x40023C00 + 0x4)\n\n    @property\n\
    \    def key(self) -> Field:\n        \"\"\"\n        KEY\n\n        FPEC key\n\
    \        \"\"\"\n        return self._key\n\n    @key.setter\n    def key(self,\
    \ value: int) -> None:\n        self._key.value = value\n\n\nclass OptkeyrRegister(Register):\n\
    \    \"\"\"\n    OPTKEYR\n\n    Flash option key register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._optkey = Field(\"optkey\", 0, 32)\n        super().__init__(\"\
    OPTKEYR\", 0x40023C00 + 0x8)\n\n    @property\n    def optkey(self) -> Field:\n\
    \        \"\"\"\n        OPTKEY\n\n        Option byte key\n        \"\"\"\n \
    \       return self._optkey\n\n    @optkey.setter\n    def optkey(self, value:\
    \ int) -> None:\n        self._optkey.value = value\n\n\nclass SrRegister(Register):\n\
    \    \"\"\"\n    SR\n\n    Status register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._eop = Field(\"eop\", 0, 1)\n        self._operr = Field(\"operr\"\
    , 1, 1)\n        self._wrperr = Field(\"wrperr\", 4, 1)\n        self._pgaerr\
    \ = Field(\"pgaerr\", 5, 1)\n        self._pgperr = Field(\"pgperr\", 6, 1)\n\
    \        self._pgserr = Field(\"pgserr\", 7, 1)\n        self._bsy = Field(\"\
    bsy\", 16, 1)\n        super().__init__(\"SR\", 0x40023C00 + 0xC)\n\n    @property\n\
    \    def eop(self) -> Field:\n        \"\"\"\n        EOP\n\n        End of operation\n\
    \        \"\"\"\n        return self._eop\n\n    @eop.setter\n    def eop(self,\
    \ value: int) -> None:\n        self._eop.value = value\n\n    @property\n   \
    \ def operr(self) -> Field:\n        \"\"\"\n        OPERR\n\n        Operation\
    \ error\n        \"\"\"\n        return self._operr\n\n    @operr.setter\n   \
    \ def operr(self, value: int) -> None:\n        self._operr.value = value\n\n\
    \    @property\n    def wrperr(self) -> Field:\n        \"\"\"\n        WRPERR\n\
    \n        Write protection error\n        \"\"\"\n        return self._wrperr\n\
    \n    @wrperr.setter\n    def wrperr(self, value: int) -> None:\n        self._wrperr.value\
    \ = value\n\n    @property\n    def pgaerr(self) -> Field:\n        \"\"\"\n \
    \       PGAERR\n\n        Programming alignment\n                  error\n   \
    \     \"\"\"\n        return self._pgaerr\n\n    @pgaerr.setter\n    def pgaerr(self,\
    \ value: int) -> None:\n        self._pgaerr.value = value\n\n    @property\n\
    \    def pgperr(self) -> Field:\n        \"\"\"\n        PGPERR\n\n        Programming\
    \ parallelism\n                  error\n        \"\"\"\n        return self._pgperr\n\
    \n    @pgperr.setter\n    def pgperr(self, value: int) -> None:\n        self._pgperr.value\
    \ = value\n\n    @property\n    def pgserr(self) -> Field:\n        \"\"\"\n \
    \       PGSERR\n\n        Programming sequence error\n        \"\"\"\n       \
    \ return self._pgserr\n\n    @pgserr.setter\n    def pgserr(self, value: int)\
    \ -> None:\n        self._pgserr.value = value\n\n    @property\n    def bsy(self)\
    \ -> Field:\n        \"\"\"\n        BSY\n\n        Busy\n        \"\"\"\n   \
    \     return self._bsy\n\n    @bsy.setter\n    def bsy(self, value: int) -> None:\n\
    \        self._bsy.value = value\n\n\nclass CrRegister(Register):\n    \"\"\"\n\
    \    CR\n\n    Control register\n    \"\"\"\n\n    def __init__(self):\n     \
    \   self._pg = Field(\"pg\", 0, 1)\n        self._ser = Field(\"ser\", 1, 1)\n\
    \        self._mer = Field(\"mer\", 2, 1)\n        self._snb = Field(\"snb\",\
    \ 3, 4)\n        self._psize = Field(\"psize\", 8, 2)\n        self._strt = Field(\"\
    strt\", 16, 1)\n        self._eopie = Field(\"eopie\", 24, 1)\n        self._errie\
    \ = Field(\"errie\", 25, 1)\n        self._lock = Field(\"lock\", 31, 1)\n   \
    \     super().__init__(\"CR\", 0x40023C00 + 0x10)\n\n    @property\n    def pg(self)\
    \ -> Field:\n        \"\"\"\n        PG\n\n        Programming\n        \"\"\"\
    \n        return self._pg\n\n    @pg.setter\n    def pg(self, value: int) -> None:\n\
    \        self._pg.value = value\n\n    @property\n    def ser(self) -> Field:\n\
    \        \"\"\"\n        SER\n\n        Sector Erase\n        \"\"\"\n       \
    \ return self._ser\n\n    @ser.setter\n    def ser(self, value: int) -> None:\n\
    \        self._ser.value = value\n\n    @property\n    def mer(self) -> Field:\n\
    \        \"\"\"\n        MER\n\n        Mass Erase\n        \"\"\"\n        return\
    \ self._mer\n\n    @mer.setter\n    def mer(self, value: int) -> None:\n     \
    \   self._mer.value = value\n\n    @property\n    def snb(self) -> Field:\n  \
    \      \"\"\"\n        SNB\n\n        Sector number\n        \"\"\"\n        return\
    \ self._snb\n\n    @snb.setter\n    def snb(self, value: int) -> None:\n     \
    \   self._snb.value = value\n\n    @property\n    def psize(self) -> Field:\n\
    \        \"\"\"\n        PSIZE\n\n        Program size\n        \"\"\"\n     \
    \   return self._psize\n\n    @psize.setter\n    def psize(self, value: int) ->\
    \ None:\n        self._psize.value = value\n\n    @property\n    def strt(self)\
    \ -> Field:\n        \"\"\"\n        STRT\n\n        Start\n        \"\"\"\n \
    \       return self._strt\n\n    @strt.setter\n    def strt(self, value: int)\
    \ -> None:\n        self._strt.value = value\n\n    @property\n    def eopie(self)\
    \ -> Field:\n        \"\"\"\n        EOPIE\n\n        End of operation interrupt\n\
    \                  enable\n        \"\"\"\n        return self._eopie\n\n    @eopie.setter\n\
    \    def eopie(self, value: int) -> None:\n        self._eopie.value = value\n\
    \n    @property\n    def errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\
    \n        Error interrupt enable\n        \"\"\"\n        return self._errie\n\
    \n    @errie.setter\n    def errie(self, value: int) -> None:\n        self._errie.value\
    \ = value\n\n    @property\n    def lock(self) -> Field:\n        \"\"\"\n   \
    \     LOCK\n\n        Lock\n        \"\"\"\n        return self._lock\n\n    @lock.setter\n\
    \    def lock(self, value: int) -> None:\n        self._lock.value = value\n\n\
    \nclass OptcrRegister(Register):\n    \"\"\"\n    OPTCR\n\n    Flash option control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._optlock = Field(\"\
    optlock\", 0, 1)\n        self._optstrt = Field(\"optstrt\", 1, 1)\n        self._bor_lev\
    \ = Field(\"bor_lev\", 2, 2)\n        self._wdg_sw = Field(\"wdg_sw\", 5, 1)\n\
    \        self._nrst_stop = Field(\"nrst_stop\", 6, 1)\n        self._nrst_stdby\
    \ = Field(\"nrst_stdby\", 7, 1)\n        self._rdp = Field(\"rdp\", 8, 8)\n  \
    \      self._nwrp = Field(\"nwrp\", 16, 12)\n        super().__init__(\"OPTCR\"\
    , 0x40023C00 + 0x14)\n\n    @property\n    def optlock(self) -> Field:\n     \
    \   \"\"\"\n        OPTLOCK\n\n        Option lock\n        \"\"\"\n        return\
    \ self._optlock\n\n    @optlock.setter\n    def optlock(self, value: int) -> None:\n\
    \        self._optlock.value = value\n\n    @property\n    def optstrt(self) ->\
    \ Field:\n        \"\"\"\n        OPTSTRT\n\n        Option start\n        \"\"\
    \"\n        return self._optstrt\n\n    @optstrt.setter\n    def optstrt(self,\
    \ value: int) -> None:\n        self._optstrt.value = value\n\n    @property\n\
    \    def bor_lev(self) -> Field:\n        \"\"\"\n        BOR_LEV\n\n        BOR\
    \ reset Level\n        \"\"\"\n        return self._bor_lev\n\n    @bor_lev.setter\n\
    \    def bor_lev(self, value: int) -> None:\n        self._bor_lev.value = value\n\
    \n    @property\n    def wdg_sw(self) -> Field:\n        \"\"\"\n        WDG_SW\n\
    \n        WDG_SW User option bytes\n        \"\"\"\n        return self._wdg_sw\n\
    \n    @wdg_sw.setter\n    def wdg_sw(self, value: int) -> None:\n        self._wdg_sw.value\
    \ = value\n\n    @property\n    def nrst_stop(self) -> Field:\n        \"\"\"\n\
    \        NRST_STOP\n\n        nRST_STOP User option\n                  bytes\n\
    \        \"\"\"\n        return self._nrst_stop\n\n    @nrst_stop.setter\n   \
    \ def nrst_stop(self, value: int) -> None:\n        self._nrst_stop.value = value\n\
    \n    @property\n    def nrst_stdby(self) -> Field:\n        \"\"\"\n        NRST_STDBY\n\
    \n        nRST_STDBY User option\n                  bytes\n        \"\"\"\n  \
    \      return self._nrst_stdby\n\n    @nrst_stdby.setter\n    def nrst_stdby(self,\
    \ value: int) -> None:\n        self._nrst_stdby.value = value\n\n    @property\n\
    \    def rdp(self) -> Field:\n        \"\"\"\n        RDP\n\n        Read protect\n\
    \        \"\"\"\n        return self._rdp\n\n    @rdp.setter\n    def rdp(self,\
    \ value: int) -> None:\n        self._rdp.value = value\n\n    @property\n   \
    \ def nwrp(self) -> Field:\n        \"\"\"\n        NWRP\n\n        Not write\
    \ protect\n        \"\"\"\n        return self._nwrp\n\n    @nwrp.setter\n   \
    \ def nwrp(self, value: int) -> None:\n        self._nwrp.value = value\n\n\n\
    class Flash(Peripheral):\n    \"\"\"\n    FLASH\n\n    FLASH\n    \"\"\"\n\n \
    \   def __init__(self):\n        self._acr = AcrRegister()\n        self._keyr\
    \ = KeyrRegister()\n        self._optkeyr = OptkeyrRegister()\n        self._sr\
    \ = SrRegister()\n        self._cr = CrRegister()\n        self._optcr = OptcrRegister()\n\
    \        super().__init__(\"flash\", 0x40023C00)\n\n    @property\n    def acr(self)\
    \ -> AcrRegister:\n        return self._acr\n\n    @acr.setter\n    def acr(self,\
    \ value: int) -> None:\n        self._acr.value = value\n\n    @property\n   \
    \ def keyr(self) -> KeyrRegister:\n        return self._keyr\n\n    @keyr.setter\n\
    \    def keyr(self, value: int) -> None:\n        self._keyr.value = value\n\n\
    \    @property\n    def optkeyr(self) -> OptkeyrRegister:\n        return self._optkeyr\n\
    \n    @optkeyr.setter\n    def optkeyr(self, value: int) -> None:\n        self._optkeyr.value\
    \ = value\n\n    @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\
    \n    @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value\
    \ = value\n\n    @property\n    def cr(self) -> CrRegister:\n        return self._cr\n\
    \n    @cr.setter\n    def cr(self, value: int) -> None:\n        self._cr.value\
    \ = value\n\n    @property\n    def optcr(self) -> OptcrRegister:\n        return\
    \ self._optcr\n\n    @optcr.setter\n    def optcr(self, value: int) -> None:\n\
    \        self._optcr.value = value\n"
  name: FLASH
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass KrRegister(Register):\n    \"\"\"\n    KR\n\n    Key register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._key = Field(\"key\", 0,\
    \ 16)\n        super().__init__(\"KR\", 0x40003000 + 0x0)\n\n    @property\n \
    \   def key(self) -> Field:\n        \"\"\"\n        KEY\n\n        Key value\n\
    \        \"\"\"\n        return self._key\n\n    @key.setter\n    def key(self,\
    \ value: int) -> None:\n        self._key.value = value\n\n\nclass PrRegister(Register):\n\
    \    \"\"\"\n    PR\n\n    Prescaler register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pr = Field(\"pr\", 0, 3)\n        super().__init__(\"PR\", 0x40003000\
    \ + 0x4)\n\n    @property\n    def pr(self) -> Field:\n        \"\"\"\n      \
    \  PR\n\n        Prescaler divider\n        \"\"\"\n        return self._pr\n\n\
    \    @pr.setter\n    def pr(self, value: int) -> None:\n        self._pr.value\
    \ = value\n\n\nclass RlrRegister(Register):\n    \"\"\"\n    RLR\n\n    Reload\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._rl = Field(\"\
    rl\", 0, 12)\n        super().__init__(\"RLR\", 0x40003000 + 0x8)\n\n    @property\n\
    \    def rl(self) -> Field:\n        \"\"\"\n        RL\n\n        Watchdog counter\
    \ reload\n                  value\n        \"\"\"\n        return self._rl\n\n\
    \    @rl.setter\n    def rl(self, value: int) -> None:\n        self._rl.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    Status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rvu = Field(\"rvu\", 1,\
    \ 1)\n        self._pvu = Field(\"pvu\", 0, 1)\n        super().__init__(\"SR\"\
    , 0x40003000 + 0xC)\n\n    @property\n    def rvu(self) -> Field:\n        \"\"\
    \"\n        RVU\n\n        Watchdog counter reload value\n                  update\n\
    \        \"\"\"\n        return self._rvu\n\n    @rvu.setter\n    def rvu(self,\
    \ value: int) -> None:\n        self._rvu.value = value\n\n    @property\n   \
    \ def pvu(self) -> Field:\n        \"\"\"\n        PVU\n\n        Watchdog prescaler\
    \ value\n                  update\n        \"\"\"\n        return self._pvu\n\n\
    \    @pvu.setter\n    def pvu(self, value: int) -> None:\n        self._pvu.value\
    \ = value\n\n\nclass Iwdg(Peripheral):\n    \"\"\"\n    IWDG\n\n    Independent\
    \ watchdog\n    \"\"\"\n\n    def __init__(self):\n        self._kr = KrRegister()\n\
    \        self._pr = PrRegister()\n        self._rlr = RlrRegister()\n        self._sr\
    \ = SrRegister()\n        super().__init__(\"iwdg\", 0x40003000)\n\n    @property\n\
    \    def kr(self) -> KrRegister:\n        return self._kr\n\n    @kr.setter\n\
    \    def kr(self, value: int) -> None:\n        self._kr.value = value\n\n   \
    \ @property\n    def pr(self) -> PrRegister:\n        return self._pr\n\n    @pr.setter\n\
    \    def pr(self, value: int) -> None:\n        self._pr.value = value\n\n   \
    \ @property\n    def rlr(self) -> RlrRegister:\n        return self._rlr\n\n \
    \   @rlr.setter\n    def rlr(self, value: int) -> None:\n        self._rlr.value\
    \ = value\n\n    @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\
    \n    @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value\
    \ = value\n"
  name: IWDG
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Fs_dcfgRegister(Register):\n    \"\"\"\n    FS_DCFG\n\n\
    \    OTG_FS device configuration register\n              (OTG_FS_DCFG)\n    \"\
    \"\"\n\n    def __init__(self):\n        self._dspd = Field(\"dspd\", 0, 2)\n\
    \        self._nzlsohsk = Field(\"nzlsohsk\", 2, 1)\n        self._dad = Field(\"\
    dad\", 4, 7)\n        self._pfivl = Field(\"pfivl\", 11, 2)\n        super().__init__(\"\
    FS_DCFG\", 0x50000800 + 0x0)\n\n    @property\n    def dspd(self) -> Field:\n\
    \        \"\"\"\n        DSPD\n\n        Device speed\n        \"\"\"\n      \
    \  return self._dspd\n\n    @dspd.setter\n    def dspd(self, value: int) -> None:\n\
    \        self._dspd.value = value\n\n    @property\n    def nzlsohsk(self) ->\
    \ Field:\n        \"\"\"\n        NZLSOHSK\n\n        Non-zero-length status OUT\n\
    \                  handshake\n        \"\"\"\n        return self._nzlsohsk\n\n\
    \    @nzlsohsk.setter\n    def nzlsohsk(self, value: int) -> None:\n        self._nzlsohsk.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def pfivl(self) -> Field:\n        \"\"\"\n  \
    \      PFIVL\n\n        Periodic frame interval\n        \"\"\"\n        return\
    \ self._pfivl\n\n    @pfivl.setter\n    def pfivl(self, value: int) -> None:\n\
    \        self._pfivl.value = value\n\n\nclass Fs_dctlRegister(Register):\n   \
    \ \"\"\"\n    FS_DCTL\n\n    OTG_FS device control register\n              (OTG_FS_DCTL)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rwusig = Field(\"rwusig\"\
    , 0, 1)\n        self._sdis = Field(\"sdis\", 1, 1)\n        self._ginsts = Field(\"\
    ginsts\", 2, 1)\n        self._gonsts = Field(\"gonsts\", 3, 1)\n        self._tctl\
    \ = Field(\"tctl\", 4, 3)\n        self._sginak = Field(\"sginak\", 7, 1)\n  \
    \      self._cginak = Field(\"cginak\", 8, 1)\n        self._sgonak = Field(\"\
    sgonak\", 9, 1)\n        self._cgonak = Field(\"cgonak\", 10, 1)\n        self._poprgdne\
    \ = Field(\"poprgdne\", 11, 1)\n        super().__init__(\"FS_DCTL\", 0x50000800\
    \ + 0x4)\n\n    @property\n    def rwusig(self) -> Field:\n        \"\"\"\n  \
    \      RWUSIG\n\n        Remote wakeup signaling\n        \"\"\"\n        return\
    \ self._rwusig\n\n    @rwusig.setter\n    def rwusig(self, value: int) -> None:\n\
    \        self._rwusig.value = value\n\n    @property\n    def sdis(self) -> Field:\n\
    \        \"\"\"\n        SDIS\n\n        Soft disconnect\n        \"\"\"\n   \
    \     return self._sdis\n\n    @sdis.setter\n    def sdis(self, value: int) ->\
    \ None:\n        self._sdis.value = value\n\n    @property\n    def ginsts(self)\
    \ -> Field:\n        \"\"\"\n        GINSTS\n\n        Global IN NAK status\n\
    \        \"\"\"\n        return self._ginsts\n\n    @ginsts.setter\n    def ginsts(self,\
    \ value: int) -> None:\n        self._ginsts.value = value\n\n    @property\n\
    \    def gonsts(self) -> Field:\n        \"\"\"\n        GONSTS\n\n        Global\
    \ OUT NAK status\n        \"\"\"\n        return self._gonsts\n\n    @gonsts.setter\n\
    \    def gonsts(self, value: int) -> None:\n        self._gonsts.value = value\n\
    \n    @property\n    def tctl(self) -> Field:\n        \"\"\"\n        TCTL\n\n\
    \        Test control\n        \"\"\"\n        return self._tctl\n\n    @tctl.setter\n\
    \    def tctl(self, value: int) -> None:\n        self._tctl.value = value\n\n\
    \    @property\n    def sginak(self) -> Field:\n        \"\"\"\n        SGINAK\n\
    \n        Set global IN NAK\n        \"\"\"\n        return self._sginak\n\n \
    \   @sginak.setter\n    def sginak(self, value: int) -> None:\n        self._sginak.value\
    \ = value\n\n    @property\n    def cginak(self) -> Field:\n        \"\"\"\n \
    \       CGINAK\n\n        Clear global IN NAK\n        \"\"\"\n        return\
    \ self._cginak\n\n    @cginak.setter\n    def cginak(self, value: int) -> None:\n\
    \        self._cginak.value = value\n\n    @property\n    def sgonak(self) ->\
    \ Field:\n        \"\"\"\n        SGONAK\n\n        Set global OUT NAK\n     \
    \   \"\"\"\n        return self._sgonak\n\n    @sgonak.setter\n    def sgonak(self,\
    \ value: int) -> None:\n        self._sgonak.value = value\n\n    @property\n\
    \    def cgonak(self) -> Field:\n        \"\"\"\n        CGONAK\n\n        Clear\
    \ global OUT NAK\n        \"\"\"\n        return self._cgonak\n\n    @cgonak.setter\n\
    \    def cgonak(self, value: int) -> None:\n        self._cgonak.value = value\n\
    \n    @property\n    def poprgdne(self) -> Field:\n        \"\"\"\n        POPRGDNE\n\
    \n        Power-on programming done\n        \"\"\"\n        return self._poprgdne\n\
    \n    @poprgdne.setter\n    def poprgdne(self, value: int) -> None:\n        self._poprgdne.value\
    \ = value\n\n\nclass Fs_dstsRegister(Register):\n    \"\"\"\n    FS_DSTS\n\n \
    \   OTG_FS device status register\n              (OTG_FS_DSTS)\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._suspsts = Field(\"suspsts\", 0, 1)\n \
    \       self._enumspd = Field(\"enumspd\", 1, 2)\n        self._eerr = Field(\"\
    eerr\", 3, 1)\n        self._fnsof = Field(\"fnsof\", 8, 14)\n        super().__init__(\"\
    FS_DSTS\", 0x50000800 + 0x8)\n\n    @property\n    def suspsts(self) -> Field:\n\
    \        \"\"\"\n        SUSPSTS\n\n        Suspend status\n        \"\"\"\n \
    \       return self._suspsts\n\n    @suspsts.setter\n    def suspsts(self, value:\
    \ int) -> None:\n        self._suspsts.value = value\n\n    @property\n    def\
    \ enumspd(self) -> Field:\n        \"\"\"\n        ENUMSPD\n\n        Enumerated\
    \ speed\n        \"\"\"\n        return self._enumspd\n\n    @enumspd.setter\n\
    \    def enumspd(self, value: int) -> None:\n        self._enumspd.value = value\n\
    \n    @property\n    def eerr(self) -> Field:\n        \"\"\"\n        EERR\n\n\
    \        Erratic error\n        \"\"\"\n        return self._eerr\n\n    @eerr.setter\n\
    \    def eerr(self, value: int) -> None:\n        self._eerr.value = value\n\n\
    \    @property\n    def fnsof(self) -> Field:\n        \"\"\"\n        FNSOF\n\
    \n        Frame number of the received\n                  SOF\n        \"\"\"\n\
    \        return self._fnsof\n\n    @fnsof.setter\n    def fnsof(self, value: int)\
    \ -> None:\n        self._fnsof.value = value\n\n\nclass Fs_diepmskRegister(Register):\n\
    \    \"\"\"\n    FS_DIEPMSK\n\n    OTG_FS device IN endpoint common interrupt\n\
    \              mask register (OTG_FS_DIEPMSK)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._xfrcm = Field(\"xfrcm\", 0, 1)\n        self._epdm = Field(\"epdm\"\
    , 1, 1)\n        self._tom = Field(\"tom\", 3, 1)\n        self._ittxfemsk = Field(\"\
    ittxfemsk\", 4, 1)\n        self._inepnmm = Field(\"inepnmm\", 5, 1)\n       \
    \ self._inepnem = Field(\"inepnem\", 6, 1)\n        super().__init__(\"FS_DIEPMSK\"\
    , 0x50000800 + 0x10)\n\n    @property\n    def xfrcm(self) -> Field:\n       \
    \ \"\"\"\n        XFRCM\n\n        Transfer completed interrupt\n            \
    \      mask\n        \"\"\"\n        return self._xfrcm\n\n    @xfrcm.setter\n\
    \    def xfrcm(self, value: int) -> None:\n        self._xfrcm.value = value\n\
    \n    @property\n    def epdm(self) -> Field:\n        \"\"\"\n        EPDM\n\n\
    \        Endpoint disabled interrupt\n                  mask\n        \"\"\"\n\
    \        return self._epdm\n\n    @epdm.setter\n    def epdm(self, value: int)\
    \ -> None:\n        self._epdm.value = value\n\n    @property\n    def tom(self)\
    \ -> Field:\n        \"\"\"\n        TOM\n\n        Timeout condition mask (Non-isochronous\n\
    \                  endpoints)\n        \"\"\"\n        return self._tom\n\n  \
    \  @tom.setter\n    def tom(self, value: int) -> None:\n        self._tom.value\
    \ = value\n\n    @property\n    def ittxfemsk(self) -> Field:\n        \"\"\"\n\
    \        ITTXFEMSK\n\n        IN token received when TxFIFO empty\n          \
    \        mask\n        \"\"\"\n        return self._ittxfemsk\n\n    @ittxfemsk.setter\n\
    \    def ittxfemsk(self, value: int) -> None:\n        self._ittxfemsk.value =\
    \ value\n\n    @property\n    def inepnmm(self) -> Field:\n        \"\"\"\n  \
    \      INEPNMM\n\n        IN token received with EP mismatch\n               \
    \   mask\n        \"\"\"\n        return self._inepnmm\n\n    @inepnmm.setter\n\
    \    def inepnmm(self, value: int) -> None:\n        self._inepnmm.value = value\n\
    \n    @property\n    def inepnem(self) -> Field:\n        \"\"\"\n        INEPNEM\n\
    \n        IN endpoint NAK effective\n                  mask\n        \"\"\"\n\
    \        return self._inepnem\n\n    @inepnem.setter\n    def inepnem(self, value:\
    \ int) -> None:\n        self._inepnem.value = value\n\n\nclass Fs_doepmskRegister(Register):\n\
    \    \"\"\"\n    FS_DOEPMSK\n\n    OTG_FS device OUT endpoint common interrupt\n\
    \              mask register (OTG_FS_DOEPMSK)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._xfrcm = Field(\"xfrcm\", 0, 1)\n        self._epdm = Field(\"epdm\"\
    , 1, 1)\n        self._stupm = Field(\"stupm\", 3, 1)\n        self._otepdm =\
    \ Field(\"otepdm\", 4, 1)\n        super().__init__(\"FS_DOEPMSK\", 0x50000800\
    \ + 0x14)\n\n    @property\n    def xfrcm(self) -> Field:\n        \"\"\"\n  \
    \      XFRCM\n\n        Transfer completed interrupt\n                  mask\n\
    \        \"\"\"\n        return self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self,\
    \ value: int) -> None:\n        self._xfrcm.value = value\n\n    @property\n \
    \   def epdm(self) -> Field:\n        \"\"\"\n        EPDM\n\n        Endpoint\
    \ disabled interrupt\n                  mask\n        \"\"\"\n        return self._epdm\n\
    \n    @epdm.setter\n    def epdm(self, value: int) -> None:\n        self._epdm.value\
    \ = value\n\n    @property\n    def stupm(self) -> Field:\n        \"\"\"\n  \
    \      STUPM\n\n        SETUP phase done mask\n        \"\"\"\n        return\
    \ self._stupm\n\n    @stupm.setter\n    def stupm(self, value: int) -> None:\n\
    \        self._stupm.value = value\n\n    @property\n    def otepdm(self) -> Field:\n\
    \        \"\"\"\n        OTEPDM\n\n        OUT token received when endpoint\n\
    \                  disabled mask\n        \"\"\"\n        return self._otepdm\n\
    \n    @otepdm.setter\n    def otepdm(self, value: int) -> None:\n        self._otepdm.value\
    \ = value\n\n\nclass Fs_daintRegister(Register):\n    \"\"\"\n    FS_DAINT\n\n\
    \    OTG_FS device all endpoints interrupt\n              register (OTG_FS_DAINT)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._iepint = Field(\"iepint\"\
    , 0, 16)\n        self._oepint = Field(\"oepint\", 16, 16)\n        super().__init__(\"\
    FS_DAINT\", 0x50000800 + 0x18)\n\n    @property\n    def iepint(self) -> Field:\n\
    \        \"\"\"\n        IEPINT\n\n        IN endpoint interrupt bits\n      \
    \  \"\"\"\n        return self._iepint\n\n    @iepint.setter\n    def iepint(self,\
    \ value: int) -> None:\n        self._iepint.value = value\n\n    @property\n\
    \    def oepint(self) -> Field:\n        \"\"\"\n        OEPINT\n\n        OUT\
    \ endpoint interrupt\n                  bits\n        \"\"\"\n        return self._oepint\n\
    \n    @oepint.setter\n    def oepint(self, value: int) -> None:\n        self._oepint.value\
    \ = value\n\n\nclass Fs_daintmskRegister(Register):\n    \"\"\"\n    FS_DAINTMSK\n\
    \n    OTG_FS all endpoints interrupt mask register\n              (OTG_FS_DAINTMSK)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._iepm = Field(\"iepm\", 0,\
    \ 16)\n        self._oepm = Field(\"oepm\", 16, 16)\n        super().__init__(\"\
    FS_DAINTMSK\", 0x50000800 + 0x1C)\n\n    @property\n    def iepm(self) -> Field:\n\
    \        \"\"\"\n        IEPM\n\n        IN EP interrupt mask bits\n        \"\
    \"\"\n        return self._iepm\n\n    @iepm.setter\n    def iepm(self, value:\
    \ int) -> None:\n        self._iepm.value = value\n\n    @property\n    def oepm(self)\
    \ -> Field:\n        \"\"\"\n        OEPM\n\n        OUT endpoint interrupt\n\
    \                  bits\n        \"\"\"\n        return self._oepm\n\n    @oepm.setter\n\
    \    def oepm(self, value: int) -> None:\n        self._oepm.value = value\n\n\
    \nclass DvbusdisRegister(Register):\n    \"\"\"\n    DVBUSDIS\n\n    OTG_FS device\
    \ VBUS discharge time\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._vbusdt = Field(\"vbusdt\", 0, 16)\n        super().__init__(\"\
    DVBUSDIS\", 0x50000800 + 0x28)\n\n    @property\n    def vbusdt(self) -> Field:\n\
    \        \"\"\"\n        VBUSDT\n\n        Device VBUS discharge time\n      \
    \  \"\"\"\n        return self._vbusdt\n\n    @vbusdt.setter\n    def vbusdt(self,\
    \ value: int) -> None:\n        self._vbusdt.value = value\n\n\nclass DvbuspulseRegister(Register):\n\
    \    \"\"\"\n    DVBUSPULSE\n\n    OTG_FS device VBUS pulsing time\n         \
    \     register\n    \"\"\"\n\n    def __init__(self):\n        self._dvbusp =\
    \ Field(\"dvbusp\", 0, 12)\n        super().__init__(\"DVBUSPULSE\", 0x50000800\
    \ + 0x2C)\n\n    @property\n    def dvbusp(self) -> Field:\n        \"\"\"\n \
    \       DVBUSP\n\n        Device VBUS pulsing time\n        \"\"\"\n        return\
    \ self._dvbusp\n\n    @dvbusp.setter\n    def dvbusp(self, value: int) -> None:\n\
    \        self._dvbusp.value = value\n\n\nclass DiepempmskRegister(Register):\n\
    \    \"\"\"\n    DIEPEMPMSK\n\n    OTG_FS device IN endpoint FIFO empty\n    \
    \          interrupt mask register\n    \"\"\"\n\n    def __init__(self):\n  \
    \      self._ineptxfem = Field(\"ineptxfem\", 0, 16)\n        super().__init__(\"\
    DIEPEMPMSK\", 0x50000800 + 0x34)\n\n    @property\n    def ineptxfem(self) ->\
    \ Field:\n        \"\"\"\n        INEPTXFEM\n\n        IN EP Tx FIFO empty interrupt\
    \ mask\n                  bits\n        \"\"\"\n        return self._ineptxfem\n\
    \n    @ineptxfem.setter\n    def ineptxfem(self, value: int) -> None:\n      \
    \  self._ineptxfem.value = value\n\n\nclass Fs_diepctl0Register(Register):\n \
    \   \"\"\"\n    FS_DIEPCTL0\n\n    OTG_FS device control IN endpoint 0 control\n\
    \              register (OTG_FS_DIEPCTL0)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._mpsiz = Field(\"mpsiz\", 0, 2)\n        self._usbaep = Field(\"\
    usbaep\", 15, 1)\n        self._naksts = Field(\"naksts\", 17, 1)\n        self._eptyp\
    \ = Field(\"eptyp\", 18, 2)\n        self._stall = Field(\"stall\", 21, 1)\n \
    \       self._txfnum = Field(\"txfnum\", 22, 4)\n        self._cnak = Field(\"\
    cnak\", 26, 1)\n        self._snak = Field(\"snak\", 27, 1)\n        self._epdis\
    \ = Field(\"epdis\", 30, 1)\n        self._epena = Field(\"epena\", 31, 1)\n \
    \       super().__init__(\"FS_DIEPCTL0\", 0x50000800 + 0x100)\n\n    @property\n\
    \    def mpsiz(self) -> Field:\n        \"\"\"\n        MPSIZ\n\n        Maximum\
    \ packet size\n        \"\"\"\n        return self._mpsiz\n\n    @mpsiz.setter\n\
    \    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value = value\n\
    \n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n        USBAEP\n\
    \n        USB active endpoint\n        \"\"\"\n        return self._usbaep\n\n\
    \    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def naksts(self) -> Field:\n        \"\"\"\n \
    \       NAKSTS\n\n        NAK status\n        \"\"\"\n        return self._naksts\n\
    \n    @naksts.setter\n    def naksts(self, value: int) -> None:\n        self._naksts.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def stall(self) -> Field:\n        \"\"\"\n  \
    \      STALL\n\n        STALL handshake\n        \"\"\"\n        return self._stall\n\
    \n    @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def txfnum(self) -> Field:\n        \"\"\"\n \
    \       TXFNUM\n\n        TxFIFO number\n        \"\"\"\n        return self._txfnum\n\
    \n    @txfnum.setter\n    def txfnum(self, value: int) -> None:\n        self._txfnum.value\
    \ = value\n\n    @property\n    def cnak(self) -> Field:\n        \"\"\"\n   \
    \     CNAK\n\n        Clear NAK\n        \"\"\"\n        return self._cnak\n\n\
    \    @cnak.setter\n    def cnak(self, value: int) -> None:\n        self._cnak.value\
    \ = value\n\n    @property\n    def snak(self) -> Field:\n        \"\"\"\n   \
    \     SNAK\n\n        Set NAK\n        \"\"\"\n        return self._snak\n\n \
    \   @snak.setter\n    def snak(self, value: int) -> None:\n        self._snak.value\
    \ = value\n\n    @property\n    def epdis(self) -> Field:\n        \"\"\"\n  \
    \      EPDIS\n\n        Endpoint disable\n        \"\"\"\n        return self._epdis\n\
    \n    @epdis.setter\n    def epdis(self, value: int) -> None:\n        self._epdis.value\
    \ = value\n\n    @property\n    def epena(self) -> Field:\n        \"\"\"\n  \
    \      EPENA\n\n        Endpoint enable\n        \"\"\"\n        return self._epena\n\
    \n    @epena.setter\n    def epena(self, value: int) -> None:\n        self._epena.value\
    \ = value\n\n\nclass Diepctl1Register(Register):\n    \"\"\"\n    DIEPCTL1\n\n\
    \    OTG device endpoint-1 control\n              register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._epena = Field(\"epena\", 31, 1)\n       \
    \ self._epdis = Field(\"epdis\", 30, 1)\n        self._soddfrm_sd1pid = Field(\"\
    soddfrm_sd1pid\", 29, 1)\n        self._sevnfrm_sd0pid = Field(\"sevnfrm_sd0pid\"\
    , 28, 1)\n        self._snak = Field(\"snak\", 27, 1)\n        self._cnak = Field(\"\
    cnak\", 26, 1)\n        self._txfnum = Field(\"txfnum\", 22, 4)\n        self._stall\
    \ = Field(\"stall\", 21, 1)\n        self._eptyp = Field(\"eptyp\", 18, 2)\n \
    \       self._naksts = Field(\"naksts\", 17, 1)\n        self._eonum_dpid = Field(\"\
    eonum_dpid\", 16, 1)\n        self._usbaep = Field(\"usbaep\", 15, 1)\n      \
    \  self._mpsiz = Field(\"mpsiz\", 0, 11)\n        super().__init__(\"DIEPCTL1\"\
    , 0x50000800 + 0x120)\n\n    @property\n    def epena(self) -> Field:\n      \
    \  \"\"\"\n        EPENA\n\n        EPENA\n        \"\"\"\n        return self._epena\n\
    \n    @epena.setter\n    def epena(self, value: int) -> None:\n        self._epena.value\
    \ = value\n\n    @property\n    def epdis(self) -> Field:\n        \"\"\"\n  \
    \      EPDIS\n\n        EPDIS\n        \"\"\"\n        return self._epdis\n\n\
    \    @epdis.setter\n    def epdis(self, value: int) -> None:\n        self._epdis.value\
    \ = value\n\n    @property\n    def soddfrm_sd1pid(self) -> Field:\n        \"\
    \"\"\n        SODDFRM_SD1PID\n\n        SODDFRM/SD1PID\n        \"\"\"\n     \
    \   return self._soddfrm_sd1pid\n\n    @soddfrm_sd1pid.setter\n    def soddfrm_sd1pid(self,\
    \ value: int) -> None:\n        self._soddfrm_sd1pid.value = value\n\n    @property\n\
    \    def sevnfrm_sd0pid(self) -> Field:\n        \"\"\"\n        SEVNFRM_SD0PID\n\
    \n        SD0PID/SEVNFRM\n        \"\"\"\n        return self._sevnfrm_sd0pid\n\
    \n    @sevnfrm_sd0pid.setter\n    def sevnfrm_sd0pid(self, value: int) -> None:\n\
    \        self._sevnfrm_sd0pid.value = value\n\n    @property\n    def snak(self)\
    \ -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n        \"\"\"\n  \
    \      return self._snak\n\n    @snak.setter\n    def snak(self, value: int) ->\
    \ None:\n        self._snak.value = value\n\n    @property\n    def cnak(self)\
    \ -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n        \"\"\"\n  \
    \      return self._cnak\n\n    @cnak.setter\n    def cnak(self, value: int) ->\
    \ None:\n        self._cnak.value = value\n\n    @property\n    def txfnum(self)\
    \ -> Field:\n        \"\"\"\n        TXFNUM\n\n        TXFNUM\n        \"\"\"\n\
    \        return self._txfnum\n\n    @txfnum.setter\n    def txfnum(self, value:\
    \ int) -> None:\n        self._txfnum.value = value\n\n    @property\n    def\
    \ stall(self) -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n    \
    \    \"\"\"\n        return self._stall\n\n    @stall.setter\n    def stall(self,\
    \ value: int) -> None:\n        self._stall.value = value\n\n    @property\n \
    \   def eptyp(self) -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n\
    \        \"\"\"\n        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self,\
    \ value: int) -> None:\n        self._eptyp.value = value\n\n    @property\n \
    \   def naksts(self) -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n\
    \        \"\"\"\n        return self._naksts\n\n    @naksts.setter\n    def naksts(self,\
    \ value: int) -> None:\n        self._naksts.value = value\n\n    @property\n\
    \    def eonum_dpid(self) -> Field:\n        \"\"\"\n        EONUM_DPID\n\n  \
    \      EONUM/DPID\n        \"\"\"\n        return self._eonum_dpid\n\n    @eonum_dpid.setter\n\
    \    def eonum_dpid(self, value: int) -> None:\n        self._eonum_dpid.value\
    \ = value\n\n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n \
    \       USBAEP\n\n        USBAEP\n        \"\"\"\n        return self._usbaep\n\
    \n    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n  \
    \      MPSIZ\n\n        MPSIZ\n        \"\"\"\n        return self._mpsiz\n\n\
    \    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n\nclass Diepctl2Register(Register):\n    \"\"\"\n    DIEPCTL2\n\n\
    \    OTG device endpoint-2 control\n              register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._epena = Field(\"epena\", 31, 1)\n       \
    \ self._epdis = Field(\"epdis\", 30, 1)\n        self._soddfrm_sd1pid = Field(\"\
    soddfrm_sd1pid\", 29, 1)\n        self._sevnfrm_sd0pid = Field(\"sevnfrm_sd0pid\"\
    , 28, 1)\n        self._snak = Field(\"snak\", 27, 1)\n        self._cnak = Field(\"\
    cnak\", 26, 1)\n        self._txfnum = Field(\"txfnum\", 22, 4)\n        self._stall\
    \ = Field(\"stall\", 21, 1)\n        self._eptyp = Field(\"eptyp\", 18, 2)\n \
    \       self._naksts = Field(\"naksts\", 17, 1)\n        self._eonum_dpid = Field(\"\
    eonum_dpid\", 16, 1)\n        self._usbaep = Field(\"usbaep\", 15, 1)\n      \
    \  self._mpsiz = Field(\"mpsiz\", 0, 11)\n        super().__init__(\"DIEPCTL2\"\
    , 0x50000800 + 0x140)\n\n    @property\n    def epena(self) -> Field:\n      \
    \  \"\"\"\n        EPENA\n\n        EPENA\n        \"\"\"\n        return self._epena\n\
    \n    @epena.setter\n    def epena(self, value: int) -> None:\n        self._epena.value\
    \ = value\n\n    @property\n    def epdis(self) -> Field:\n        \"\"\"\n  \
    \      EPDIS\n\n        EPDIS\n        \"\"\"\n        return self._epdis\n\n\
    \    @epdis.setter\n    def epdis(self, value: int) -> None:\n        self._epdis.value\
    \ = value\n\n    @property\n    def soddfrm_sd1pid(self) -> Field:\n        \"\
    \"\"\n        SODDFRM_SD1PID\n\n        SODDFRM\n        \"\"\"\n        return\
    \ self._soddfrm_sd1pid\n\n    @soddfrm_sd1pid.setter\n    def soddfrm_sd1pid(self,\
    \ value: int) -> None:\n        self._soddfrm_sd1pid.value = value\n\n    @property\n\
    \    def sevnfrm_sd0pid(self) -> Field:\n        \"\"\"\n        SEVNFRM_SD0PID\n\
    \n        SD0PID/SEVNFRM\n        \"\"\"\n        return self._sevnfrm_sd0pid\n\
    \n    @sevnfrm_sd0pid.setter\n    def sevnfrm_sd0pid(self, value: int) -> None:\n\
    \        self._sevnfrm_sd0pid.value = value\n\n    @property\n    def snak(self)\
    \ -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n        \"\"\"\n  \
    \      return self._snak\n\n    @snak.setter\n    def snak(self, value: int) ->\
    \ None:\n        self._snak.value = value\n\n    @property\n    def cnak(self)\
    \ -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n        \"\"\"\n  \
    \      return self._cnak\n\n    @cnak.setter\n    def cnak(self, value: int) ->\
    \ None:\n        self._cnak.value = value\n\n    @property\n    def txfnum(self)\
    \ -> Field:\n        \"\"\"\n        TXFNUM\n\n        TXFNUM\n        \"\"\"\n\
    \        return self._txfnum\n\n    @txfnum.setter\n    def txfnum(self, value:\
    \ int) -> None:\n        self._txfnum.value = value\n\n    @property\n    def\
    \ stall(self) -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n    \
    \    \"\"\"\n        return self._stall\n\n    @stall.setter\n    def stall(self,\
    \ value: int) -> None:\n        self._stall.value = value\n\n    @property\n \
    \   def eptyp(self) -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n\
    \        \"\"\"\n        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self,\
    \ value: int) -> None:\n        self._eptyp.value = value\n\n    @property\n \
    \   def naksts(self) -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n\
    \        \"\"\"\n        return self._naksts\n\n    @naksts.setter\n    def naksts(self,\
    \ value: int) -> None:\n        self._naksts.value = value\n\n    @property\n\
    \    def eonum_dpid(self) -> Field:\n        \"\"\"\n        EONUM_DPID\n\n  \
    \      EONUM/DPID\n        \"\"\"\n        return self._eonum_dpid\n\n    @eonum_dpid.setter\n\
    \    def eonum_dpid(self, value: int) -> None:\n        self._eonum_dpid.value\
    \ = value\n\n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n \
    \       USBAEP\n\n        USBAEP\n        \"\"\"\n        return self._usbaep\n\
    \n    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n  \
    \      MPSIZ\n\n        MPSIZ\n        \"\"\"\n        return self._mpsiz\n\n\
    \    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n\nclass Diepctl3Register(Register):\n    \"\"\"\n    DIEPCTL3\n\n\
    \    OTG device endpoint-3 control\n              register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._epena = Field(\"epena\", 31, 1)\n       \
    \ self._epdis = Field(\"epdis\", 30, 1)\n        self._soddfrm_sd1pid = Field(\"\
    soddfrm_sd1pid\", 29, 1)\n        self._sevnfrm_sd0pid = Field(\"sevnfrm_sd0pid\"\
    , 28, 1)\n        self._snak = Field(\"snak\", 27, 1)\n        self._cnak = Field(\"\
    cnak\", 26, 1)\n        self._txfnum = Field(\"txfnum\", 22, 4)\n        self._stall\
    \ = Field(\"stall\", 21, 1)\n        self._eptyp = Field(\"eptyp\", 18, 2)\n \
    \       self._naksts = Field(\"naksts\", 17, 1)\n        self._eonum_dpid = Field(\"\
    eonum_dpid\", 16, 1)\n        self._usbaep = Field(\"usbaep\", 15, 1)\n      \
    \  self._mpsiz = Field(\"mpsiz\", 0, 11)\n        super().__init__(\"DIEPCTL3\"\
    , 0x50000800 + 0x160)\n\n    @property\n    def epena(self) -> Field:\n      \
    \  \"\"\"\n        EPENA\n\n        EPENA\n        \"\"\"\n        return self._epena\n\
    \n    @epena.setter\n    def epena(self, value: int) -> None:\n        self._epena.value\
    \ = value\n\n    @property\n    def epdis(self) -> Field:\n        \"\"\"\n  \
    \      EPDIS\n\n        EPDIS\n        \"\"\"\n        return self._epdis\n\n\
    \    @epdis.setter\n    def epdis(self, value: int) -> None:\n        self._epdis.value\
    \ = value\n\n    @property\n    def soddfrm_sd1pid(self) -> Field:\n        \"\
    \"\"\n        SODDFRM_SD1PID\n\n        SODDFRM\n        \"\"\"\n        return\
    \ self._soddfrm_sd1pid\n\n    @soddfrm_sd1pid.setter\n    def soddfrm_sd1pid(self,\
    \ value: int) -> None:\n        self._soddfrm_sd1pid.value = value\n\n    @property\n\
    \    def sevnfrm_sd0pid(self) -> Field:\n        \"\"\"\n        SEVNFRM_SD0PID\n\
    \n        SD0PID/SEVNFRM\n        \"\"\"\n        return self._sevnfrm_sd0pid\n\
    \n    @sevnfrm_sd0pid.setter\n    def sevnfrm_sd0pid(self, value: int) -> None:\n\
    \        self._sevnfrm_sd0pid.value = value\n\n    @property\n    def snak(self)\
    \ -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n        \"\"\"\n  \
    \      return self._snak\n\n    @snak.setter\n    def snak(self, value: int) ->\
    \ None:\n        self._snak.value = value\n\n    @property\n    def cnak(self)\
    \ -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n        \"\"\"\n  \
    \      return self._cnak\n\n    @cnak.setter\n    def cnak(self, value: int) ->\
    \ None:\n        self._cnak.value = value\n\n    @property\n    def txfnum(self)\
    \ -> Field:\n        \"\"\"\n        TXFNUM\n\n        TXFNUM\n        \"\"\"\n\
    \        return self._txfnum\n\n    @txfnum.setter\n    def txfnum(self, value:\
    \ int) -> None:\n        self._txfnum.value = value\n\n    @property\n    def\
    \ stall(self) -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n    \
    \    \"\"\"\n        return self._stall\n\n    @stall.setter\n    def stall(self,\
    \ value: int) -> None:\n        self._stall.value = value\n\n    @property\n \
    \   def eptyp(self) -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n\
    \        \"\"\"\n        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self,\
    \ value: int) -> None:\n        self._eptyp.value = value\n\n    @property\n \
    \   def naksts(self) -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n\
    \        \"\"\"\n        return self._naksts\n\n    @naksts.setter\n    def naksts(self,\
    \ value: int) -> None:\n        self._naksts.value = value\n\n    @property\n\
    \    def eonum_dpid(self) -> Field:\n        \"\"\"\n        EONUM_DPID\n\n  \
    \      EONUM/DPID\n        \"\"\"\n        return self._eonum_dpid\n\n    @eonum_dpid.setter\n\
    \    def eonum_dpid(self, value: int) -> None:\n        self._eonum_dpid.value\
    \ = value\n\n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n \
    \       USBAEP\n\n        USBAEP\n        \"\"\"\n        return self._usbaep\n\
    \n    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n  \
    \      MPSIZ\n\n        MPSIZ\n        \"\"\"\n        return self._mpsiz\n\n\
    \    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n\nclass Doepctl0Register(Register):\n    \"\"\"\n    DOEPCTL0\n\n\
    \    device endpoint-0 control\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._epena = Field(\"epena\", 31, 1)\n        self._epdis\
    \ = Field(\"epdis\", 30, 1)\n        self._snak = Field(\"snak\", 27, 1)\n   \
    \     self._cnak = Field(\"cnak\", 26, 1)\n        self._stall = Field(\"stall\"\
    , 21, 1)\n        self._snpm = Field(\"snpm\", 20, 1)\n        self._eptyp = Field(\"\
    eptyp\", 18, 2)\n        self._naksts = Field(\"naksts\", 17, 1)\n        self._usbaep\
    \ = Field(\"usbaep\", 15, 1)\n        self._mpsiz = Field(\"mpsiz\", 0, 2)\n \
    \       super().__init__(\"DOEPCTL0\", 0x50000800 + 0x300)\n\n    @property\n\
    \    def epena(self) -> Field:\n        \"\"\"\n        EPENA\n\n        EPENA\n\
    \        \"\"\"\n        return self._epena\n\n    @epena.setter\n    def epena(self,\
    \ value: int) -> None:\n        self._epena.value = value\n\n    @property\n \
    \   def epdis(self) -> Field:\n        \"\"\"\n        EPDIS\n\n        EPDIS\n\
    \        \"\"\"\n        return self._epdis\n\n    @epdis.setter\n    def epdis(self,\
    \ value: int) -> None:\n        self._epdis.value = value\n\n    @property\n \
    \   def snak(self) -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n \
    \       \"\"\"\n        return self._snak\n\n    @snak.setter\n    def snak(self,\
    \ value: int) -> None:\n        self._snak.value = value\n\n    @property\n  \
    \  def cnak(self) -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n  \
    \      \"\"\"\n        return self._cnak\n\n    @cnak.setter\n    def cnak(self,\
    \ value: int) -> None:\n        self._cnak.value = value\n\n    @property\n  \
    \  def stall(self) -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n\
    \        \"\"\"\n        return self._stall\n\n    @stall.setter\n    def stall(self,\
    \ value: int) -> None:\n        self._stall.value = value\n\n    @property\n \
    \   def snpm(self) -> Field:\n        \"\"\"\n        SNPM\n\n        SNPM\n \
    \       \"\"\"\n        return self._snpm\n\n    @snpm.setter\n    def snpm(self,\
    \ value: int) -> None:\n        self._snpm.value = value\n\n    @property\n  \
    \  def eptyp(self) -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n\
    \        \"\"\"\n        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self,\
    \ value: int) -> None:\n        self._eptyp.value = value\n\n    @property\n \
    \   def naksts(self) -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n\
    \        \"\"\"\n        return self._naksts\n\n    @naksts.setter\n    def naksts(self,\
    \ value: int) -> None:\n        self._naksts.value = value\n\n    @property\n\
    \    def usbaep(self) -> Field:\n        \"\"\"\n        USBAEP\n\n        USBAEP\n\
    \        \"\"\"\n        return self._usbaep\n\n    @usbaep.setter\n    def usbaep(self,\
    \ value: int) -> None:\n        self._usbaep.value = value\n\n    @property\n\
    \    def mpsiz(self) -> Field:\n        \"\"\"\n        MPSIZ\n\n        MPSIZ\n\
    \        \"\"\"\n        return self._mpsiz\n\n    @mpsiz.setter\n    def mpsiz(self,\
    \ value: int) -> None:\n        self._mpsiz.value = value\n\n\nclass Doepctl1Register(Register):\n\
    \    \"\"\"\n    DOEPCTL1\n\n    device endpoint-1 control\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._epena = Field(\"epena\"\
    , 31, 1)\n        self._epdis = Field(\"epdis\", 30, 1)\n        self._soddfrm_sd1pid\
    \ = Field(\"soddfrm_sd1pid\", 29, 1)\n        self._sevnfrm_sd0pid = Field(\"\
    sevnfrm_sd0pid\", 28, 1)\n        self._snak = Field(\"snak\", 27, 1)\n      \
    \  self._cnak = Field(\"cnak\", 26, 1)\n        self._stall = Field(\"stall\"\
    , 21, 1)\n        self._snpm = Field(\"snpm\", 20, 1)\n        self._eptyp = Field(\"\
    eptyp\", 18, 2)\n        self._naksts = Field(\"naksts\", 17, 1)\n        self._eonum_dpid\
    \ = Field(\"eonum_dpid\", 16, 1)\n        self._usbaep = Field(\"usbaep\", 15,\
    \ 1)\n        self._mpsiz = Field(\"mpsiz\", 0, 11)\n        super().__init__(\"\
    DOEPCTL1\", 0x50000800 + 0x320)\n\n    @property\n    def epena(self) -> Field:\n\
    \        \"\"\"\n        EPENA\n\n        EPENA\n        \"\"\"\n        return\
    \ self._epena\n\n    @epena.setter\n    def epena(self, value: int) -> None:\n\
    \        self._epena.value = value\n\n    @property\n    def epdis(self) -> Field:\n\
    \        \"\"\"\n        EPDIS\n\n        EPDIS\n        \"\"\"\n        return\
    \ self._epdis\n\n    @epdis.setter\n    def epdis(self, value: int) -> None:\n\
    \        self._epdis.value = value\n\n    @property\n    def soddfrm_sd1pid(self)\
    \ -> Field:\n        \"\"\"\n        SODDFRM_SD1PID\n\n        SODDFRM\n     \
    \   \"\"\"\n        return self._soddfrm_sd1pid\n\n    @soddfrm_sd1pid.setter\n\
    \    def soddfrm_sd1pid(self, value: int) -> None:\n        self._soddfrm_sd1pid.value\
    \ = value\n\n    @property\n    def sevnfrm_sd0pid(self) -> Field:\n        \"\
    \"\"\n        SEVNFRM_SD0PID\n\n        SD0PID/SEVNFRM\n        \"\"\"\n     \
    \   return self._sevnfrm_sd0pid\n\n    @sevnfrm_sd0pid.setter\n    def sevnfrm_sd0pid(self,\
    \ value: int) -> None:\n        self._sevnfrm_sd0pid.value = value\n\n    @property\n\
    \    def snak(self) -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n\
    \        \"\"\"\n        return self._snak\n\n    @snak.setter\n    def snak(self,\
    \ value: int) -> None:\n        self._snak.value = value\n\n    @property\n  \
    \  def cnak(self) -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n  \
    \      \"\"\"\n        return self._cnak\n\n    @cnak.setter\n    def cnak(self,\
    \ value: int) -> None:\n        self._cnak.value = value\n\n    @property\n  \
    \  def stall(self) -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n\
    \        \"\"\"\n        return self._stall\n\n    @stall.setter\n    def stall(self,\
    \ value: int) -> None:\n        self._stall.value = value\n\n    @property\n \
    \   def snpm(self) -> Field:\n        \"\"\"\n        SNPM\n\n        SNPM\n \
    \       \"\"\"\n        return self._snpm\n\n    @snpm.setter\n    def snpm(self,\
    \ value: int) -> None:\n        self._snpm.value = value\n\n    @property\n  \
    \  def eptyp(self) -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n\
    \        \"\"\"\n        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self,\
    \ value: int) -> None:\n        self._eptyp.value = value\n\n    @property\n \
    \   def naksts(self) -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n\
    \        \"\"\"\n        return self._naksts\n\n    @naksts.setter\n    def naksts(self,\
    \ value: int) -> None:\n        self._naksts.value = value\n\n    @property\n\
    \    def eonum_dpid(self) -> Field:\n        \"\"\"\n        EONUM_DPID\n\n  \
    \      EONUM/DPID\n        \"\"\"\n        return self._eonum_dpid\n\n    @eonum_dpid.setter\n\
    \    def eonum_dpid(self, value: int) -> None:\n        self._eonum_dpid.value\
    \ = value\n\n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n \
    \       USBAEP\n\n        USBAEP\n        \"\"\"\n        return self._usbaep\n\
    \n    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n  \
    \      MPSIZ\n\n        MPSIZ\n        \"\"\"\n        return self._mpsiz\n\n\
    \    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n\nclass Doepctl2Register(Register):\n    \"\"\"\n    DOEPCTL2\n\n\
    \    device endpoint-2 control\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._epena = Field(\"epena\", 31, 1)\n        self._epdis\
    \ = Field(\"epdis\", 30, 1)\n        self._soddfrm_sd1pid = Field(\"soddfrm_sd1pid\"\
    , 29, 1)\n        self._sevnfrm_sd0pid = Field(\"sevnfrm_sd0pid\", 28, 1)\n  \
    \      self._snak = Field(\"snak\", 27, 1)\n        self._cnak = Field(\"cnak\"\
    , 26, 1)\n        self._stall = Field(\"stall\", 21, 1)\n        self._snpm =\
    \ Field(\"snpm\", 20, 1)\n        self._eptyp = Field(\"eptyp\", 18, 2)\n    \
    \    self._naksts = Field(\"naksts\", 17, 1)\n        self._eonum_dpid = Field(\"\
    eonum_dpid\", 16, 1)\n        self._usbaep = Field(\"usbaep\", 15, 1)\n      \
    \  self._mpsiz = Field(\"mpsiz\", 0, 11)\n        super().__init__(\"DOEPCTL2\"\
    , 0x50000800 + 0x340)\n\n    @property\n    def epena(self) -> Field:\n      \
    \  \"\"\"\n        EPENA\n\n        EPENA\n        \"\"\"\n        return self._epena\n\
    \n    @epena.setter\n    def epena(self, value: int) -> None:\n        self._epena.value\
    \ = value\n\n    @property\n    def epdis(self) -> Field:\n        \"\"\"\n  \
    \      EPDIS\n\n        EPDIS\n        \"\"\"\n        return self._epdis\n\n\
    \    @epdis.setter\n    def epdis(self, value: int) -> None:\n        self._epdis.value\
    \ = value\n\n    @property\n    def soddfrm_sd1pid(self) -> Field:\n        \"\
    \"\"\n        SODDFRM_SD1PID\n\n        SODDFRM\n        \"\"\"\n        return\
    \ self._soddfrm_sd1pid\n\n    @soddfrm_sd1pid.setter\n    def soddfrm_sd1pid(self,\
    \ value: int) -> None:\n        self._soddfrm_sd1pid.value = value\n\n    @property\n\
    \    def sevnfrm_sd0pid(self) -> Field:\n        \"\"\"\n        SEVNFRM_SD0PID\n\
    \n        SD0PID/SEVNFRM\n        \"\"\"\n        return self._sevnfrm_sd0pid\n\
    \n    @sevnfrm_sd0pid.setter\n    def sevnfrm_sd0pid(self, value: int) -> None:\n\
    \        self._sevnfrm_sd0pid.value = value\n\n    @property\n    def snak(self)\
    \ -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n        \"\"\"\n  \
    \      return self._snak\n\n    @snak.setter\n    def snak(self, value: int) ->\
    \ None:\n        self._snak.value = value\n\n    @property\n    def cnak(self)\
    \ -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n        \"\"\"\n  \
    \      return self._cnak\n\n    @cnak.setter\n    def cnak(self, value: int) ->\
    \ None:\n        self._cnak.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n        \"\"\"\n\
    \        return self._stall\n\n    @stall.setter\n    def stall(self, value: int)\
    \ -> None:\n        self._stall.value = value\n\n    @property\n    def snpm(self)\
    \ -> Field:\n        \"\"\"\n        SNPM\n\n        SNPM\n        \"\"\"\n  \
    \      return self._snpm\n\n    @snpm.setter\n    def snpm(self, value: int) ->\
    \ None:\n        self._snpm.value = value\n\n    @property\n    def eptyp(self)\
    \ -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n        \"\"\"\n\
    \        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self, value: int)\
    \ -> None:\n        self._eptyp.value = value\n\n    @property\n    def naksts(self)\
    \ -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n        \"\"\"\n\
    \        return self._naksts\n\n    @naksts.setter\n    def naksts(self, value:\
    \ int) -> None:\n        self._naksts.value = value\n\n    @property\n    def\
    \ eonum_dpid(self) -> Field:\n        \"\"\"\n        EONUM_DPID\n\n        EONUM/DPID\n\
    \        \"\"\"\n        return self._eonum_dpid\n\n    @eonum_dpid.setter\n \
    \   def eonum_dpid(self, value: int) -> None:\n        self._eonum_dpid.value\
    \ = value\n\n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n \
    \       USBAEP\n\n        USBAEP\n        \"\"\"\n        return self._usbaep\n\
    \n    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n  \
    \      MPSIZ\n\n        MPSIZ\n        \"\"\"\n        return self._mpsiz\n\n\
    \    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n\nclass Doepctl3Register(Register):\n    \"\"\"\n    DOEPCTL3\n\n\
    \    device endpoint-3 control\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._epena = Field(\"epena\", 31, 1)\n        self._epdis\
    \ = Field(\"epdis\", 30, 1)\n        self._soddfrm_sd1pid = Field(\"soddfrm_sd1pid\"\
    , 29, 1)\n        self._sevnfrm_sd0pid = Field(\"sevnfrm_sd0pid\", 28, 1)\n  \
    \      self._snak = Field(\"snak\", 27, 1)\n        self._cnak = Field(\"cnak\"\
    , 26, 1)\n        self._stall = Field(\"stall\", 21, 1)\n        self._snpm =\
    \ Field(\"snpm\", 20, 1)\n        self._eptyp = Field(\"eptyp\", 18, 2)\n    \
    \    self._naksts = Field(\"naksts\", 17, 1)\n        self._eonum_dpid = Field(\"\
    eonum_dpid\", 16, 1)\n        self._usbaep = Field(\"usbaep\", 15, 1)\n      \
    \  self._mpsiz = Field(\"mpsiz\", 0, 11)\n        super().__init__(\"DOEPCTL3\"\
    , 0x50000800 + 0x360)\n\n    @property\n    def epena(self) -> Field:\n      \
    \  \"\"\"\n        EPENA\n\n        EPENA\n        \"\"\"\n        return self._epena\n\
    \n    @epena.setter\n    def epena(self, value: int) -> None:\n        self._epena.value\
    \ = value\n\n    @property\n    def epdis(self) -> Field:\n        \"\"\"\n  \
    \      EPDIS\n\n        EPDIS\n        \"\"\"\n        return self._epdis\n\n\
    \    @epdis.setter\n    def epdis(self, value: int) -> None:\n        self._epdis.value\
    \ = value\n\n    @property\n    def soddfrm_sd1pid(self) -> Field:\n        \"\
    \"\"\n        SODDFRM_SD1PID\n\n        SODDFRM\n        \"\"\"\n        return\
    \ self._soddfrm_sd1pid\n\n    @soddfrm_sd1pid.setter\n    def soddfrm_sd1pid(self,\
    \ value: int) -> None:\n        self._soddfrm_sd1pid.value = value\n\n    @property\n\
    \    def sevnfrm_sd0pid(self) -> Field:\n        \"\"\"\n        SEVNFRM_SD0PID\n\
    \n        SD0PID/SEVNFRM\n        \"\"\"\n        return self._sevnfrm_sd0pid\n\
    \n    @sevnfrm_sd0pid.setter\n    def sevnfrm_sd0pid(self, value: int) -> None:\n\
    \        self._sevnfrm_sd0pid.value = value\n\n    @property\n    def snak(self)\
    \ -> Field:\n        \"\"\"\n        SNAK\n\n        SNAK\n        \"\"\"\n  \
    \      return self._snak\n\n    @snak.setter\n    def snak(self, value: int) ->\
    \ None:\n        self._snak.value = value\n\n    @property\n    def cnak(self)\
    \ -> Field:\n        \"\"\"\n        CNAK\n\n        CNAK\n        \"\"\"\n  \
    \      return self._cnak\n\n    @cnak.setter\n    def cnak(self, value: int) ->\
    \ None:\n        self._cnak.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        Stall\n        \"\"\"\n\
    \        return self._stall\n\n    @stall.setter\n    def stall(self, value: int)\
    \ -> None:\n        self._stall.value = value\n\n    @property\n    def snpm(self)\
    \ -> Field:\n        \"\"\"\n        SNPM\n\n        SNPM\n        \"\"\"\n  \
    \      return self._snpm\n\n    @snpm.setter\n    def snpm(self, value: int) ->\
    \ None:\n        self._snpm.value = value\n\n    @property\n    def eptyp(self)\
    \ -> Field:\n        \"\"\"\n        EPTYP\n\n        EPTYP\n        \"\"\"\n\
    \        return self._eptyp\n\n    @eptyp.setter\n    def eptyp(self, value: int)\
    \ -> None:\n        self._eptyp.value = value\n\n    @property\n    def naksts(self)\
    \ -> Field:\n        \"\"\"\n        NAKSTS\n\n        NAKSTS\n        \"\"\"\n\
    \        return self._naksts\n\n    @naksts.setter\n    def naksts(self, value:\
    \ int) -> None:\n        self._naksts.value = value\n\n    @property\n    def\
    \ eonum_dpid(self) -> Field:\n        \"\"\"\n        EONUM_DPID\n\n        EONUM/DPID\n\
    \        \"\"\"\n        return self._eonum_dpid\n\n    @eonum_dpid.setter\n \
    \   def eonum_dpid(self, value: int) -> None:\n        self._eonum_dpid.value\
    \ = value\n\n    @property\n    def usbaep(self) -> Field:\n        \"\"\"\n \
    \       USBAEP\n\n        USBAEP\n        \"\"\"\n        return self._usbaep\n\
    \n    @usbaep.setter\n    def usbaep(self, value: int) -> None:\n        self._usbaep.value\
    \ = value\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n  \
    \      MPSIZ\n\n        MPSIZ\n        \"\"\"\n        return self._mpsiz\n\n\
    \    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n\nclass Diepint0Register(Register):\n    \"\"\"\n    DIEPINT0\n\n\
    \    device endpoint-x interrupt\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._txfe = Field(\"txfe\", 7, 1)\n        self._inepne\
    \ = Field(\"inepne\", 6, 1)\n        self._ittxfe = Field(\"ittxfe\", 4, 1)\n\
    \        self._toc = Field(\"toc\", 3, 1)\n        self._epdisd = Field(\"epdisd\"\
    , 1, 1)\n        self._xfrc = Field(\"xfrc\", 0, 1)\n        super().__init__(\"\
    DIEPINT0\", 0x50000800 + 0x108)\n\n    @property\n    def txfe(self) -> Field:\n\
    \        \"\"\"\n        TXFE\n\n        TXFE\n        \"\"\"\n        return\
    \ self._txfe\n\n    @txfe.setter\n    def txfe(self, value: int) -> None:\n  \
    \      self._txfe.value = value\n\n    @property\n    def inepne(self) -> Field:\n\
    \        \"\"\"\n        INEPNE\n\n        INEPNE\n        \"\"\"\n        return\
    \ self._inepne\n\n    @inepne.setter\n    def inepne(self, value: int) -> None:\n\
    \        self._inepne.value = value\n\n    @property\n    def ittxfe(self) ->\
    \ Field:\n        \"\"\"\n        ITTXFE\n\n        ITTXFE\n        \"\"\"\n \
    \       return self._ittxfe\n\n    @ittxfe.setter\n    def ittxfe(self, value:\
    \ int) -> None:\n        self._ittxfe.value = value\n\n    @property\n    def\
    \ toc(self) -> Field:\n        \"\"\"\n        TOC\n\n        TOC\n        \"\"\
    \"\n        return self._toc\n\n    @toc.setter\n    def toc(self, value: int)\
    \ -> None:\n        self._toc.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Diepint1Register(Register):\n\
    \    \"\"\"\n    DIEPINT1\n\n    device endpoint-1 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txfe = Field(\"txfe\", 7,\
    \ 1)\n        self._inepne = Field(\"inepne\", 6, 1)\n        self._ittxfe = Field(\"\
    ittxfe\", 4, 1)\n        self._toc = Field(\"toc\", 3, 1)\n        self._epdisd\
    \ = Field(\"epdisd\", 1, 1)\n        self._xfrc = Field(\"xfrc\", 0, 1)\n    \
    \    super().__init__(\"DIEPINT1\", 0x50000800 + 0x128)\n\n    @property\n   \
    \ def txfe(self) -> Field:\n        \"\"\"\n        TXFE\n\n        TXFE\n   \
    \     \"\"\"\n        return self._txfe\n\n    @txfe.setter\n    def txfe(self,\
    \ value: int) -> None:\n        self._txfe.value = value\n\n    @property\n  \
    \  def inepne(self) -> Field:\n        \"\"\"\n        INEPNE\n\n        INEPNE\n\
    \        \"\"\"\n        return self._inepne\n\n    @inepne.setter\n    def inepne(self,\
    \ value: int) -> None:\n        self._inepne.value = value\n\n    @property\n\
    \    def ittxfe(self) -> Field:\n        \"\"\"\n        ITTXFE\n\n        ITTXFE\n\
    \        \"\"\"\n        return self._ittxfe\n\n    @ittxfe.setter\n    def ittxfe(self,\
    \ value: int) -> None:\n        self._ittxfe.value = value\n\n    @property\n\
    \    def toc(self) -> Field:\n        \"\"\"\n        TOC\n\n        TOC\n   \
    \     \"\"\"\n        return self._toc\n\n    @toc.setter\n    def toc(self, value:\
    \ int) -> None:\n        self._toc.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Diepint2Register(Register):\n\
    \    \"\"\"\n    DIEPINT2\n\n    device endpoint-2 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txfe = Field(\"txfe\", 7,\
    \ 1)\n        self._inepne = Field(\"inepne\", 6, 1)\n        self._ittxfe = Field(\"\
    ittxfe\", 4, 1)\n        self._toc = Field(\"toc\", 3, 1)\n        self._epdisd\
    \ = Field(\"epdisd\", 1, 1)\n        self._xfrc = Field(\"xfrc\", 0, 1)\n    \
    \    super().__init__(\"DIEPINT2\", 0x50000800 + 0x148)\n\n    @property\n   \
    \ def txfe(self) -> Field:\n        \"\"\"\n        TXFE\n\n        TXFE\n   \
    \     \"\"\"\n        return self._txfe\n\n    @txfe.setter\n    def txfe(self,\
    \ value: int) -> None:\n        self._txfe.value = value\n\n    @property\n  \
    \  def inepne(self) -> Field:\n        \"\"\"\n        INEPNE\n\n        INEPNE\n\
    \        \"\"\"\n        return self._inepne\n\n    @inepne.setter\n    def inepne(self,\
    \ value: int) -> None:\n        self._inepne.value = value\n\n    @property\n\
    \    def ittxfe(self) -> Field:\n        \"\"\"\n        ITTXFE\n\n        ITTXFE\n\
    \        \"\"\"\n        return self._ittxfe\n\n    @ittxfe.setter\n    def ittxfe(self,\
    \ value: int) -> None:\n        self._ittxfe.value = value\n\n    @property\n\
    \    def toc(self) -> Field:\n        \"\"\"\n        TOC\n\n        TOC\n   \
    \     \"\"\"\n        return self._toc\n\n    @toc.setter\n    def toc(self, value:\
    \ int) -> None:\n        self._toc.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Diepint3Register(Register):\n\
    \    \"\"\"\n    DIEPINT3\n\n    device endpoint-3 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txfe = Field(\"txfe\", 7,\
    \ 1)\n        self._inepne = Field(\"inepne\", 6, 1)\n        self._ittxfe = Field(\"\
    ittxfe\", 4, 1)\n        self._toc = Field(\"toc\", 3, 1)\n        self._epdisd\
    \ = Field(\"epdisd\", 1, 1)\n        self._xfrc = Field(\"xfrc\", 0, 1)\n    \
    \    super().__init__(\"DIEPINT3\", 0x50000800 + 0x168)\n\n    @property\n   \
    \ def txfe(self) -> Field:\n        \"\"\"\n        TXFE\n\n        TXFE\n   \
    \     \"\"\"\n        return self._txfe\n\n    @txfe.setter\n    def txfe(self,\
    \ value: int) -> None:\n        self._txfe.value = value\n\n    @property\n  \
    \  def inepne(self) -> Field:\n        \"\"\"\n        INEPNE\n\n        INEPNE\n\
    \        \"\"\"\n        return self._inepne\n\n    @inepne.setter\n    def inepne(self,\
    \ value: int) -> None:\n        self._inepne.value = value\n\n    @property\n\
    \    def ittxfe(self) -> Field:\n        \"\"\"\n        ITTXFE\n\n        ITTXFE\n\
    \        \"\"\"\n        return self._ittxfe\n\n    @ittxfe.setter\n    def ittxfe(self,\
    \ value: int) -> None:\n        self._ittxfe.value = value\n\n    @property\n\
    \    def toc(self) -> Field:\n        \"\"\"\n        TOC\n\n        TOC\n   \
    \     \"\"\"\n        return self._toc\n\n    @toc.setter\n    def toc(self, value:\
    \ int) -> None:\n        self._toc.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Doepint0Register(Register):\n\
    \    \"\"\"\n    DOEPINT0\n\n    device endpoint-0 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._b2bstup = Field(\"b2bstup\"\
    , 6, 1)\n        self._otepdis = Field(\"otepdis\", 4, 1)\n        self._stup\
    \ = Field(\"stup\", 3, 1)\n        self._epdisd = Field(\"epdisd\", 1, 1)\n  \
    \      self._xfrc = Field(\"xfrc\", 0, 1)\n        super().__init__(\"DOEPINT0\"\
    , 0x50000800 + 0x308)\n\n    @property\n    def b2bstup(self) -> Field:\n    \
    \    \"\"\"\n        B2BSTUP\n\n        B2BSTUP\n        \"\"\"\n        return\
    \ self._b2bstup\n\n    @b2bstup.setter\n    def b2bstup(self, value: int) -> None:\n\
    \        self._b2bstup.value = value\n\n    @property\n    def otepdis(self) ->\
    \ Field:\n        \"\"\"\n        OTEPDIS\n\n        OTEPDIS\n        \"\"\"\n\
    \        return self._otepdis\n\n    @otepdis.setter\n    def otepdis(self, value:\
    \ int) -> None:\n        self._otepdis.value = value\n\n    @property\n    def\
    \ stup(self) -> Field:\n        \"\"\"\n        STUP\n\n        STUP\n       \
    \ \"\"\"\n        return self._stup\n\n    @stup.setter\n    def stup(self, value:\
    \ int) -> None:\n        self._stup.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Doepint1Register(Register):\n\
    \    \"\"\"\n    DOEPINT1\n\n    device endpoint-1 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._b2bstup = Field(\"b2bstup\"\
    , 6, 1)\n        self._otepdis = Field(\"otepdis\", 4, 1)\n        self._stup\
    \ = Field(\"stup\", 3, 1)\n        self._epdisd = Field(\"epdisd\", 1, 1)\n  \
    \      self._xfrc = Field(\"xfrc\", 0, 1)\n        super().__init__(\"DOEPINT1\"\
    , 0x50000800 + 0x328)\n\n    @property\n    def b2bstup(self) -> Field:\n    \
    \    \"\"\"\n        B2BSTUP\n\n        B2BSTUP\n        \"\"\"\n        return\
    \ self._b2bstup\n\n    @b2bstup.setter\n    def b2bstup(self, value: int) -> None:\n\
    \        self._b2bstup.value = value\n\n    @property\n    def otepdis(self) ->\
    \ Field:\n        \"\"\"\n        OTEPDIS\n\n        OTEPDIS\n        \"\"\"\n\
    \        return self._otepdis\n\n    @otepdis.setter\n    def otepdis(self, value:\
    \ int) -> None:\n        self._otepdis.value = value\n\n    @property\n    def\
    \ stup(self) -> Field:\n        \"\"\"\n        STUP\n\n        STUP\n       \
    \ \"\"\"\n        return self._stup\n\n    @stup.setter\n    def stup(self, value:\
    \ int) -> None:\n        self._stup.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Doepint2Register(Register):\n\
    \    \"\"\"\n    DOEPINT2\n\n    device endpoint-2 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._b2bstup = Field(\"b2bstup\"\
    , 6, 1)\n        self._otepdis = Field(\"otepdis\", 4, 1)\n        self._stup\
    \ = Field(\"stup\", 3, 1)\n        self._epdisd = Field(\"epdisd\", 1, 1)\n  \
    \      self._xfrc = Field(\"xfrc\", 0, 1)\n        super().__init__(\"DOEPINT2\"\
    , 0x50000800 + 0x348)\n\n    @property\n    def b2bstup(self) -> Field:\n    \
    \    \"\"\"\n        B2BSTUP\n\n        B2BSTUP\n        \"\"\"\n        return\
    \ self._b2bstup\n\n    @b2bstup.setter\n    def b2bstup(self, value: int) -> None:\n\
    \        self._b2bstup.value = value\n\n    @property\n    def otepdis(self) ->\
    \ Field:\n        \"\"\"\n        OTEPDIS\n\n        OTEPDIS\n        \"\"\"\n\
    \        return self._otepdis\n\n    @otepdis.setter\n    def otepdis(self, value:\
    \ int) -> None:\n        self._otepdis.value = value\n\n    @property\n    def\
    \ stup(self) -> Field:\n        \"\"\"\n        STUP\n\n        STUP\n       \
    \ \"\"\"\n        return self._stup\n\n    @stup.setter\n    def stup(self, value:\
    \ int) -> None:\n        self._stup.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Doepint3Register(Register):\n\
    \    \"\"\"\n    DOEPINT3\n\n    device endpoint-3 interrupt\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._b2bstup = Field(\"b2bstup\"\
    , 6, 1)\n        self._otepdis = Field(\"otepdis\", 4, 1)\n        self._stup\
    \ = Field(\"stup\", 3, 1)\n        self._epdisd = Field(\"epdisd\", 1, 1)\n  \
    \      self._xfrc = Field(\"xfrc\", 0, 1)\n        super().__init__(\"DOEPINT3\"\
    , 0x50000800 + 0x368)\n\n    @property\n    def b2bstup(self) -> Field:\n    \
    \    \"\"\"\n        B2BSTUP\n\n        B2BSTUP\n        \"\"\"\n        return\
    \ self._b2bstup\n\n    @b2bstup.setter\n    def b2bstup(self, value: int) -> None:\n\
    \        self._b2bstup.value = value\n\n    @property\n    def otepdis(self) ->\
    \ Field:\n        \"\"\"\n        OTEPDIS\n\n        OTEPDIS\n        \"\"\"\n\
    \        return self._otepdis\n\n    @otepdis.setter\n    def otepdis(self, value:\
    \ int) -> None:\n        self._otepdis.value = value\n\n    @property\n    def\
    \ stup(self) -> Field:\n        \"\"\"\n        STUP\n\n        STUP\n       \
    \ \"\"\"\n        return self._stup\n\n    @stup.setter\n    def stup(self, value:\
    \ int) -> None:\n        self._stup.value = value\n\n    @property\n    def epdisd(self)\
    \ -> Field:\n        \"\"\"\n        EPDISD\n\n        EPDISD\n        \"\"\"\n\
    \        return self._epdisd\n\n    @epdisd.setter\n    def epdisd(self, value:\
    \ int) -> None:\n        self._epdisd.value = value\n\n    @property\n    def\
    \ xfrc(self) -> Field:\n        \"\"\"\n        XFRC\n\n        XFRC\n       \
    \ \"\"\"\n        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value:\
    \ int) -> None:\n        self._xfrc.value = value\n\n\nclass Dieptsiz0Register(Register):\n\
    \    \"\"\"\n    DIEPTSIZ0\n\n    device endpoint-0 transfer size\n          \
    \    register\n    \"\"\"\n\n    def __init__(self):\n        self._pktcnt = Field(\"\
    pktcnt\", 19, 2)\n        self._xfrsiz = Field(\"xfrsiz\", 0, 7)\n        super().__init__(\"\
    DIEPTSIZ0\", 0x50000800 + 0x110)\n\n    @property\n    def pktcnt(self) -> Field:\n\
    \        \"\"\"\n        PKTCNT\n\n        Packet count\n        \"\"\"\n    \
    \    return self._pktcnt\n\n    @pktcnt.setter\n    def pktcnt(self, value: int)\
    \ -> None:\n        self._pktcnt.value = value\n\n    @property\n    def xfrsiz(self)\
    \ -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer size\n       \
    \ \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n    def xfrsiz(self,\
    \ value: int) -> None:\n        self._xfrsiz.value = value\n\n\nclass Doeptsiz0Register(Register):\n\
    \    \"\"\"\n    DOEPTSIZ0\n\n    device OUT endpoint-0 transfer size\n      \
    \        register\n    \"\"\"\n\n    def __init__(self):\n        self._stupcnt\
    \ = Field(\"stupcnt\", 29, 2)\n        self._pktcnt = Field(\"pktcnt\", 19, 1)\n\
    \        self._xfrsiz = Field(\"xfrsiz\", 0, 7)\n        super().__init__(\"DOEPTSIZ0\"\
    , 0x50000800 + 0x310)\n\n    @property\n    def stupcnt(self) -> Field:\n    \
    \    \"\"\"\n        STUPCNT\n\n        SETUP packet count\n        \"\"\"\n \
    \       return self._stupcnt\n\n    @stupcnt.setter\n    def stupcnt(self, value:\
    \ int) -> None:\n        self._stupcnt.value = value\n\n    @property\n    def\
    \ pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\n        Packet count\n\
    \        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n    def pktcnt(self,\
    \ value: int) -> None:\n        self._pktcnt.value = value\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n\nclass Dieptsiz1Register(Register):\n    \"\"\"\n    DIEPTSIZ1\n\n    device\
    \ endpoint-1 transfer size\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._mcnt = Field(\"mcnt\", 29, 2)\n        self._pktcnt = Field(\"\
    pktcnt\", 19, 10)\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        super().__init__(\"\
    DIEPTSIZ1\", 0x50000800 + 0x130)\n\n    @property\n    def mcnt(self) -> Field:\n\
    \        \"\"\"\n        MCNT\n\n        Multi count\n        \"\"\"\n       \
    \ return self._mcnt\n\n    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n\
    \        self._mcnt.value = value\n\n    @property\n    def pktcnt(self) -> Field:\n\
    \        \"\"\"\n        PKTCNT\n\n        Packet count\n        \"\"\"\n    \
    \    return self._pktcnt\n\n    @pktcnt.setter\n    def pktcnt(self, value: int)\
    \ -> None:\n        self._pktcnt.value = value\n\n    @property\n    def xfrsiz(self)\
    \ -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer size\n       \
    \ \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n    def xfrsiz(self,\
    \ value: int) -> None:\n        self._xfrsiz.value = value\n\n\nclass Dieptsiz2Register(Register):\n\
    \    \"\"\"\n    DIEPTSIZ2\n\n    device endpoint-2 transfer size\n          \
    \    register\n    \"\"\"\n\n    def __init__(self):\n        self._mcnt = Field(\"\
    mcnt\", 29, 2)\n        self._pktcnt = Field(\"pktcnt\", 19, 10)\n        self._xfrsiz\
    \ = Field(\"xfrsiz\", 0, 19)\n        super().__init__(\"DIEPTSIZ2\", 0x50000800\
    \ + 0x150)\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n  \
    \      MCNT\n\n        Multi count\n        \"\"\"\n        return self._mcnt\n\
    \n    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n \
    \       PKTCNT\n\n        Packet count\n        \"\"\"\n        return self._pktcnt\n\
    \n    @pktcnt.setter\n    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value\
    \ = value\n\n    @property\n    def xfrsiz(self) -> Field:\n        \"\"\"\n \
    \       XFRSIZ\n\n        Transfer size\n        \"\"\"\n        return self._xfrsiz\n\
    \n    @xfrsiz.setter\n    def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value\
    \ = value\n\n\nclass Dieptsiz3Register(Register):\n    \"\"\"\n    DIEPTSIZ3\n\
    \n    device endpoint-3 transfer size\n              register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._mcnt = Field(\"mcnt\", 29, 2)\n      \
    \  self._pktcnt = Field(\"pktcnt\", 19, 10)\n        self._xfrsiz = Field(\"xfrsiz\"\
    , 0, 19)\n        super().__init__(\"DIEPTSIZ3\", 0x50000800 + 0x170)\n\n    @property\n\
    \    def mcnt(self) -> Field:\n        \"\"\"\n        MCNT\n\n        Multi count\n\
    \        \"\"\"\n        return self._mcnt\n\n    @mcnt.setter\n    def mcnt(self,\
    \ value: int) -> None:\n        self._mcnt.value = value\n\n    @property\n  \
    \  def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\n        Packet\
    \ count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n \
    \   def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\
    \n        Transfer size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n\
    \    def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n\nclass Dtxfsts0Register(Register):\n    \"\"\"\n    DTXFSTS0\n\n    OTG_FS\
    \ device IN endpoint transmit FIFO\n              status register\n    \"\"\"\n\
    \n    def __init__(self):\n        self._ineptfsav = Field(\"ineptfsav\", 0, 16)\n\
    \        super().__init__(\"DTXFSTS0\", 0x50000800 + 0x118)\n\n    @property\n\
    \    def ineptfsav(self) -> Field:\n        \"\"\"\n        INEPTFSAV\n\n    \
    \    IN endpoint TxFIFO space\n                  available\n        \"\"\"\n \
    \       return self._ineptfsav\n\n    @ineptfsav.setter\n    def ineptfsav(self,\
    \ value: int) -> None:\n        self._ineptfsav.value = value\n\n\nclass Dtxfsts1Register(Register):\n\
    \    \"\"\"\n    DTXFSTS1\n\n    OTG_FS device IN endpoint transmit FIFO\n   \
    \           status register\n    \"\"\"\n\n    def __init__(self):\n        self._ineptfsav\
    \ = Field(\"ineptfsav\", 0, 16)\n        super().__init__(\"DTXFSTS1\", 0x50000800\
    \ + 0x138)\n\n    @property\n    def ineptfsav(self) -> Field:\n        \"\"\"\
    \n        INEPTFSAV\n\n        IN endpoint TxFIFO space\n                  available\n\
    \        \"\"\"\n        return self._ineptfsav\n\n    @ineptfsav.setter\n   \
    \ def ineptfsav(self, value: int) -> None:\n        self._ineptfsav.value = value\n\
    \n\nclass Dtxfsts2Register(Register):\n    \"\"\"\n    DTXFSTS2\n\n    OTG_FS\
    \ device IN endpoint transmit FIFO\n              status register\n    \"\"\"\n\
    \n    def __init__(self):\n        self._ineptfsav = Field(\"ineptfsav\", 0, 16)\n\
    \        super().__init__(\"DTXFSTS2\", 0x50000800 + 0x158)\n\n    @property\n\
    \    def ineptfsav(self) -> Field:\n        \"\"\"\n        INEPTFSAV\n\n    \
    \    IN endpoint TxFIFO space\n                  available\n        \"\"\"\n \
    \       return self._ineptfsav\n\n    @ineptfsav.setter\n    def ineptfsav(self,\
    \ value: int) -> None:\n        self._ineptfsav.value = value\n\n\nclass Dtxfsts3Register(Register):\n\
    \    \"\"\"\n    DTXFSTS3\n\n    OTG_FS device IN endpoint transmit FIFO\n   \
    \           status register\n    \"\"\"\n\n    def __init__(self):\n        self._ineptfsav\
    \ = Field(\"ineptfsav\", 0, 16)\n        super().__init__(\"DTXFSTS3\", 0x50000800\
    \ + 0x178)\n\n    @property\n    def ineptfsav(self) -> Field:\n        \"\"\"\
    \n        INEPTFSAV\n\n        IN endpoint TxFIFO space\n                  available\n\
    \        \"\"\"\n        return self._ineptfsav\n\n    @ineptfsav.setter\n   \
    \ def ineptfsav(self, value: int) -> None:\n        self._ineptfsav.value = value\n\
    \n\nclass Doeptsiz1Register(Register):\n    \"\"\"\n    DOEPTSIZ1\n\n    device\
    \ OUT endpoint-1 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._rxdpid_stupcnt = Field(\"rxdpid_stupcnt\", 29,\
    \ 2)\n        self._pktcnt = Field(\"pktcnt\", 19, 10)\n        self._xfrsiz =\
    \ Field(\"xfrsiz\", 0, 19)\n        super().__init__(\"DOEPTSIZ1\", 0x50000800\
    \ + 0x330)\n\n    @property\n    def rxdpid_stupcnt(self) -> Field:\n        \"\
    \"\"\n        RXDPID_STUPCNT\n\n        Received data PID/SETUP packet\n     \
    \             count\n        \"\"\"\n        return self._rxdpid_stupcnt\n\n \
    \   @rxdpid_stupcnt.setter\n    def rxdpid_stupcnt(self, value: int) -> None:\n\
    \        self._rxdpid_stupcnt.value = value\n\n    @property\n    def pktcnt(self)\
    \ -> Field:\n        \"\"\"\n        PKTCNT\n\n        Packet count\n        \"\
    \"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n    def pktcnt(self,\
    \ value: int) -> None:\n        self._pktcnt.value = value\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n\nclass Doeptsiz2Register(Register):\n    \"\"\"\n    DOEPTSIZ2\n\n    device\
    \ OUT endpoint-2 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._rxdpid_stupcnt = Field(\"rxdpid_stupcnt\", 29,\
    \ 2)\n        self._pktcnt = Field(\"pktcnt\", 19, 10)\n        self._xfrsiz =\
    \ Field(\"xfrsiz\", 0, 19)\n        super().__init__(\"DOEPTSIZ2\", 0x50000800\
    \ + 0x350)\n\n    @property\n    def rxdpid_stupcnt(self) -> Field:\n        \"\
    \"\"\n        RXDPID_STUPCNT\n\n        Received data PID/SETUP packet\n     \
    \             count\n        \"\"\"\n        return self._rxdpid_stupcnt\n\n \
    \   @rxdpid_stupcnt.setter\n    def rxdpid_stupcnt(self, value: int) -> None:\n\
    \        self._rxdpid_stupcnt.value = value\n\n    @property\n    def pktcnt(self)\
    \ -> Field:\n        \"\"\"\n        PKTCNT\n\n        Packet count\n        \"\
    \"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n    def pktcnt(self,\
    \ value: int) -> None:\n        self._pktcnt.value = value\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n\nclass Doeptsiz3Register(Register):\n    \"\"\"\n    DOEPTSIZ3\n\n    device\
    \ OUT endpoint-3 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._rxdpid_stupcnt = Field(\"rxdpid_stupcnt\", 29,\
    \ 2)\n        self._pktcnt = Field(\"pktcnt\", 19, 10)\n        self._xfrsiz =\
    \ Field(\"xfrsiz\", 0, 19)\n        super().__init__(\"DOEPTSIZ3\", 0x50000800\
    \ + 0x370)\n\n    @property\n    def rxdpid_stupcnt(self) -> Field:\n        \"\
    \"\"\n        RXDPID_STUPCNT\n\n        Received data PID/SETUP packet\n     \
    \             count\n        \"\"\"\n        return self._rxdpid_stupcnt\n\n \
    \   @rxdpid_stupcnt.setter\n    def rxdpid_stupcnt(self, value: int) -> None:\n\
    \        self._rxdpid_stupcnt.value = value\n\n    @property\n    def pktcnt(self)\
    \ -> Field:\n        \"\"\"\n        PKTCNT\n\n        Packet count\n        \"\
    \"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n    def pktcnt(self,\
    \ value: int) -> None:\n        self._pktcnt.value = value\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n\nclass Otg_fs_device(Peripheral):\n    \"\"\"\n    OTG_FS_DEVICE\n\n    USB\
    \ on the go full speed\n    \"\"\"\n\n    def __init__(self):\n        self._fs_dcfg\
    \ = Fs_dcfgRegister()\n        self._fs_dctl = Fs_dctlRegister()\n        self._fs_dsts\
    \ = Fs_dstsRegister()\n        self._fs_diepmsk = Fs_diepmskRegister()\n     \
    \   self._fs_doepmsk = Fs_doepmskRegister()\n        self._fs_daint = Fs_daintRegister()\n\
    \        self._fs_daintmsk = Fs_daintmskRegister()\n        self._dvbusdis = DvbusdisRegister()\n\
    \        self._dvbuspulse = DvbuspulseRegister()\n        self._diepempmsk = DiepempmskRegister()\n\
    \        self._fs_diepctl0 = Fs_diepctl0Register()\n        self._diepctl1 = Diepctl1Register()\n\
    \        self._diepctl2 = Diepctl2Register()\n        self._diepctl3 = Diepctl3Register()\n\
    \        self._doepctl0 = Doepctl0Register()\n        self._doepctl1 = Doepctl1Register()\n\
    \        self._doepctl2 = Doepctl2Register()\n        self._doepctl3 = Doepctl3Register()\n\
    \        self._diepint0 = Diepint0Register()\n        self._diepint1 = Diepint1Register()\n\
    \        self._diepint2 = Diepint2Register()\n        self._diepint3 = Diepint3Register()\n\
    \        self._doepint0 = Doepint0Register()\n        self._doepint1 = Doepint1Register()\n\
    \        self._doepint2 = Doepint2Register()\n        self._doepint3 = Doepint3Register()\n\
    \        self._dieptsiz0 = Dieptsiz0Register()\n        self._doeptsiz0 = Doeptsiz0Register()\n\
    \        self._dieptsiz1 = Dieptsiz1Register()\n        self._dieptsiz2 = Dieptsiz2Register()\n\
    \        self._dieptsiz3 = Dieptsiz3Register()\n        self._dtxfsts0 = Dtxfsts0Register()\n\
    \        self._dtxfsts1 = Dtxfsts1Register()\n        self._dtxfsts2 = Dtxfsts2Register()\n\
    \        self._dtxfsts3 = Dtxfsts3Register()\n        self._doeptsiz1 = Doeptsiz1Register()\n\
    \        self._doeptsiz2 = Doeptsiz2Register()\n        self._doeptsiz3 = Doeptsiz3Register()\n\
    \        super().__init__(\"otg_fs_device\", 0x50000800)\n\n    @property\n  \
    \  def fs_dcfg(self) -> Fs_dcfgRegister:\n        return self._fs_dcfg\n\n   \
    \ @fs_dcfg.setter\n    def fs_dcfg(self, value: int) -> None:\n        self._fs_dcfg.value\
    \ = value\n\n    @property\n    def fs_dctl(self) -> Fs_dctlRegister:\n      \
    \  return self._fs_dctl\n\n    @fs_dctl.setter\n    def fs_dctl(self, value: int)\
    \ -> None:\n        self._fs_dctl.value = value\n\n    @property\n    def fs_dsts(self)\
    \ -> Fs_dstsRegister:\n        return self._fs_dsts\n\n    @fs_dsts.setter\n \
    \   def fs_dsts(self, value: int) -> None:\n        self._fs_dsts.value = value\n\
    \n    @property\n    def fs_diepmsk(self) -> Fs_diepmskRegister:\n        return\
    \ self._fs_diepmsk\n\n    @fs_diepmsk.setter\n    def fs_diepmsk(self, value:\
    \ int) -> None:\n        self._fs_diepmsk.value = value\n\n    @property\n   \
    \ def fs_doepmsk(self) -> Fs_doepmskRegister:\n        return self._fs_doepmsk\n\
    \n    @fs_doepmsk.setter\n    def fs_doepmsk(self, value: int) -> None:\n    \
    \    self._fs_doepmsk.value = value\n\n    @property\n    def fs_daint(self) ->\
    \ Fs_daintRegister:\n        return self._fs_daint\n\n    @fs_daint.setter\n \
    \   def fs_daint(self, value: int) -> None:\n        self._fs_daint.value = value\n\
    \n    @property\n    def fs_daintmsk(self) -> Fs_daintmskRegister:\n        return\
    \ self._fs_daintmsk\n\n    @fs_daintmsk.setter\n    def fs_daintmsk(self, value:\
    \ int) -> None:\n        self._fs_daintmsk.value = value\n\n    @property\n  \
    \  def dvbusdis(self) -> DvbusdisRegister:\n        return self._dvbusdis\n\n\
    \    @dvbusdis.setter\n    def dvbusdis(self, value: int) -> None:\n        self._dvbusdis.value\
    \ = value\n\n    @property\n    def dvbuspulse(self) -> DvbuspulseRegister:\n\
    \        return self._dvbuspulse\n\n    @dvbuspulse.setter\n    def dvbuspulse(self,\
    \ value: int) -> None:\n        self._dvbuspulse.value = value\n\n    @property\n\
    \    def diepempmsk(self) -> DiepempmskRegister:\n        return self._diepempmsk\n\
    \n    @diepempmsk.setter\n    def diepempmsk(self, value: int) -> None:\n    \
    \    self._diepempmsk.value = value\n\n    @property\n    def fs_diepctl0(self)\
    \ -> Fs_diepctl0Register:\n        return self._fs_diepctl0\n\n    @fs_diepctl0.setter\n\
    \    def fs_diepctl0(self, value: int) -> None:\n        self._fs_diepctl0.value\
    \ = value\n\n    @property\n    def diepctl1(self) -> Diepctl1Register:\n    \
    \    return self._diepctl1\n\n    @diepctl1.setter\n    def diepctl1(self, value:\
    \ int) -> None:\n        self._diepctl1.value = value\n\n    @property\n    def\
    \ diepctl2(self) -> Diepctl2Register:\n        return self._diepctl2\n\n    @diepctl2.setter\n\
    \    def diepctl2(self, value: int) -> None:\n        self._diepctl2.value = value\n\
    \n    @property\n    def diepctl3(self) -> Diepctl3Register:\n        return self._diepctl3\n\
    \n    @diepctl3.setter\n    def diepctl3(self, value: int) -> None:\n        self._diepctl3.value\
    \ = value\n\n    @property\n    def doepctl0(self) -> Doepctl0Register:\n    \
    \    return self._doepctl0\n\n    @doepctl0.setter\n    def doepctl0(self, value:\
    \ int) -> None:\n        self._doepctl0.value = value\n\n    @property\n    def\
    \ doepctl1(self) -> Doepctl1Register:\n        return self._doepctl1\n\n    @doepctl1.setter\n\
    \    def doepctl1(self, value: int) -> None:\n        self._doepctl1.value = value\n\
    \n    @property\n    def doepctl2(self) -> Doepctl2Register:\n        return self._doepctl2\n\
    \n    @doepctl2.setter\n    def doepctl2(self, value: int) -> None:\n        self._doepctl2.value\
    \ = value\n\n    @property\n    def doepctl3(self) -> Doepctl3Register:\n    \
    \    return self._doepctl3\n\n    @doepctl3.setter\n    def doepctl3(self, value:\
    \ int) -> None:\n        self._doepctl3.value = value\n\n    @property\n    def\
    \ diepint0(self) -> Diepint0Register:\n        return self._diepint0\n\n    @diepint0.setter\n\
    \    def diepint0(self, value: int) -> None:\n        self._diepint0.value = value\n\
    \n    @property\n    def diepint1(self) -> Diepint1Register:\n        return self._diepint1\n\
    \n    @diepint1.setter\n    def diepint1(self, value: int) -> None:\n        self._diepint1.value\
    \ = value\n\n    @property\n    def diepint2(self) -> Diepint2Register:\n    \
    \    return self._diepint2\n\n    @diepint2.setter\n    def diepint2(self, value:\
    \ int) -> None:\n        self._diepint2.value = value\n\n    @property\n    def\
    \ diepint3(self) -> Diepint3Register:\n        return self._diepint3\n\n    @diepint3.setter\n\
    \    def diepint3(self, value: int) -> None:\n        self._diepint3.value = value\n\
    \n    @property\n    def doepint0(self) -> Doepint0Register:\n        return self._doepint0\n\
    \n    @doepint0.setter\n    def doepint0(self, value: int) -> None:\n        self._doepint0.value\
    \ = value\n\n    @property\n    def doepint1(self) -> Doepint1Register:\n    \
    \    return self._doepint1\n\n    @doepint1.setter\n    def doepint1(self, value:\
    \ int) -> None:\n        self._doepint1.value = value\n\n    @property\n    def\
    \ doepint2(self) -> Doepint2Register:\n        return self._doepint2\n\n    @doepint2.setter\n\
    \    def doepint2(self, value: int) -> None:\n        self._doepint2.value = value\n\
    \n    @property\n    def doepint3(self) -> Doepint3Register:\n        return self._doepint3\n\
    \n    @doepint3.setter\n    def doepint3(self, value: int) -> None:\n        self._doepint3.value\
    \ = value\n\n    @property\n    def dieptsiz0(self) -> Dieptsiz0Register:\n  \
    \      return self._dieptsiz0\n\n    @dieptsiz0.setter\n    def dieptsiz0(self,\
    \ value: int) -> None:\n        self._dieptsiz0.value = value\n\n    @property\n\
    \    def doeptsiz0(self) -> Doeptsiz0Register:\n        return self._doeptsiz0\n\
    \n    @doeptsiz0.setter\n    def doeptsiz0(self, value: int) -> None:\n      \
    \  self._doeptsiz0.value = value\n\n    @property\n    def dieptsiz1(self) ->\
    \ Dieptsiz1Register:\n        return self._dieptsiz1\n\n    @dieptsiz1.setter\n\
    \    def dieptsiz1(self, value: int) -> None:\n        self._dieptsiz1.value =\
    \ value\n\n    @property\n    def dieptsiz2(self) -> Dieptsiz2Register:\n    \
    \    return self._dieptsiz2\n\n    @dieptsiz2.setter\n    def dieptsiz2(self,\
    \ value: int) -> None:\n        self._dieptsiz2.value = value\n\n    @property\n\
    \    def dieptsiz3(self) -> Dieptsiz3Register:\n        return self._dieptsiz3\n\
    \n    @dieptsiz3.setter\n    def dieptsiz3(self, value: int) -> None:\n      \
    \  self._dieptsiz3.value = value\n\n    @property\n    def dtxfsts0(self) -> Dtxfsts0Register:\n\
    \        return self._dtxfsts0\n\n    @dtxfsts0.setter\n    def dtxfsts0(self,\
    \ value: int) -> None:\n        self._dtxfsts0.value = value\n\n    @property\n\
    \    def dtxfsts1(self) -> Dtxfsts1Register:\n        return self._dtxfsts1\n\n\
    \    @dtxfsts1.setter\n    def dtxfsts1(self, value: int) -> None:\n        self._dtxfsts1.value\
    \ = value\n\n    @property\n    def dtxfsts2(self) -> Dtxfsts2Register:\n    \
    \    return self._dtxfsts2\n\n    @dtxfsts2.setter\n    def dtxfsts2(self, value:\
    \ int) -> None:\n        self._dtxfsts2.value = value\n\n    @property\n    def\
    \ dtxfsts3(self) -> Dtxfsts3Register:\n        return self._dtxfsts3\n\n    @dtxfsts3.setter\n\
    \    def dtxfsts3(self, value: int) -> None:\n        self._dtxfsts3.value = value\n\
    \n    @property\n    def doeptsiz1(self) -> Doeptsiz1Register:\n        return\
    \ self._doeptsiz1\n\n    @doeptsiz1.setter\n    def doeptsiz1(self, value: int)\
    \ -> None:\n        self._doeptsiz1.value = value\n\n    @property\n    def doeptsiz2(self)\
    \ -> Doeptsiz2Register:\n        return self._doeptsiz2\n\n    @doeptsiz2.setter\n\
    \    def doeptsiz2(self, value: int) -> None:\n        self._doeptsiz2.value =\
    \ value\n\n    @property\n    def doeptsiz3(self) -> Doeptsiz3Register:\n    \
    \    return self._doeptsiz3\n\n    @doeptsiz3.setter\n    def doeptsiz3(self,\
    \ value: int) -> None:\n        self._doeptsiz3.value = value\n"
  name: OTG_FS_DEVICE
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Fs_gotgctlRegister(Register):\n    \"\"\"\n    FS_GOTGCTL\n\
    \n    OTG_FS control and status register\n              (OTG_FS_GOTGCTL)\n   \
    \ \"\"\"\n\n    def __init__(self):\n        self._srqscs = Field(\"srqscs\",\
    \ 0, 1)\n        self._srq = Field(\"srq\", 1, 1)\n        self._avaloen = Field(\"\
    avaloen\", 4, 1)\n        self._bvaloen = Field(\"bvaloen\", 6, 1)\n        self._bvaloval\
    \ = Field(\"bvaloval\", 7, 1)\n        self._hngscs = Field(\"hngscs\", 8, 1)\n\
    \        self._hnprq = Field(\"hnprq\", 9, 1)\n        self._hshnpen = Field(\"\
    hshnpen\", 10, 1)\n        self._dhnpen = Field(\"dhnpen\", 11, 1)\n        self._cidsts\
    \ = Field(\"cidsts\", 16, 1)\n        self._dbct = Field(\"dbct\", 17, 1)\n  \
    \      self._asvld = Field(\"asvld\", 18, 1)\n        self._bsvld = Field(\"bsvld\"\
    , 19, 1)\n        super().__init__(\"FS_GOTGCTL\", 0x50000000 + 0x0)\n\n    @property\n\
    \    def srqscs(self) -> Field:\n        \"\"\"\n        SRQSCS\n\n        Session\
    \ request success\n        \"\"\"\n        return self._srqscs\n\n    @srqscs.setter\n\
    \    def srqscs(self, value: int) -> None:\n        self._srqscs.value = value\n\
    \n    @property\n    def srq(self) -> Field:\n        \"\"\"\n        SRQ\n\n\
    \        Session request\n        \"\"\"\n        return self._srq\n\n    @srq.setter\n\
    \    def srq(self, value: int) -> None:\n        self._srq.value = value\n\n \
    \   @property\n    def avaloen(self) -> Field:\n        \"\"\"\n        AVALOEN\n\
    \n        AVALOEN\n        \"\"\"\n        return self._avaloen\n\n    @avaloen.setter\n\
    \    def avaloen(self, value: int) -> None:\n        self._avaloen.value = value\n\
    \n    @property\n    def bvaloen(self) -> Field:\n        \"\"\"\n        BVALOEN\n\
    \n        BVALOEN\n        \"\"\"\n        return self._bvaloen\n\n    @bvaloen.setter\n\
    \    def bvaloen(self, value: int) -> None:\n        self._bvaloen.value = value\n\
    \n    @property\n    def bvaloval(self) -> Field:\n        \"\"\"\n        BVALOVAL\n\
    \n        BVALOVAL\n        \"\"\"\n        return self._bvaloval\n\n    @bvaloval.setter\n\
    \    def bvaloval(self, value: int) -> None:\n        self._bvaloval.value = value\n\
    \n    @property\n    def hngscs(self) -> Field:\n        \"\"\"\n        HNGSCS\n\
    \n        Host negotiation success\n        \"\"\"\n        return self._hngscs\n\
    \n    @hngscs.setter\n    def hngscs(self, value: int) -> None:\n        self._hngscs.value\
    \ = value\n\n    @property\n    def hnprq(self) -> Field:\n        \"\"\"\n  \
    \      HNPRQ\n\n        HNP request\n        \"\"\"\n        return self._hnprq\n\
    \n    @hnprq.setter\n    def hnprq(self, value: int) -> None:\n        self._hnprq.value\
    \ = value\n\n    @property\n    def hshnpen(self) -> Field:\n        \"\"\"\n\
    \        HSHNPEN\n\n        Host set HNP enable\n        \"\"\"\n        return\
    \ self._hshnpen\n\n    @hshnpen.setter\n    def hshnpen(self, value: int) -> None:\n\
    \        self._hshnpen.value = value\n\n    @property\n    def dhnpen(self) ->\
    \ Field:\n        \"\"\"\n        DHNPEN\n\n        Device HNP enabled\n     \
    \   \"\"\"\n        return self._dhnpen\n\n    @dhnpen.setter\n    def dhnpen(self,\
    \ value: int) -> None:\n        self._dhnpen.value = value\n\n    @property\n\
    \    def cidsts(self) -> Field:\n        \"\"\"\n        CIDSTS\n\n        Connector\
    \ ID status\n        \"\"\"\n        return self._cidsts\n\n    @cidsts.setter\n\
    \    def cidsts(self, value: int) -> None:\n        self._cidsts.value = value\n\
    \n    @property\n    def dbct(self) -> Field:\n        \"\"\"\n        DBCT\n\n\
    \        Long/short debounce time\n        \"\"\"\n        return self._dbct\n\
    \n    @dbct.setter\n    def dbct(self, value: int) -> None:\n        self._dbct.value\
    \ = value\n\n    @property\n    def asvld(self) -> Field:\n        \"\"\"\n  \
    \      ASVLD\n\n        A-session valid\n        \"\"\"\n        return self._asvld\n\
    \n    @asvld.setter\n    def asvld(self, value: int) -> None:\n        self._asvld.value\
    \ = value\n\n    @property\n    def bsvld(self) -> Field:\n        \"\"\"\n  \
    \      BSVLD\n\n        B-session valid\n        \"\"\"\n        return self._bsvld\n\
    \n    @bsvld.setter\n    def bsvld(self, value: int) -> None:\n        self._bsvld.value\
    \ = value\n\n\nclass Fs_gotgintRegister(Register):\n    \"\"\"\n    FS_GOTGINT\n\
    \n    OTG_FS interrupt register\n              (OTG_FS_GOTGINT)\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._sedet = Field(\"sedet\", 2, 1)\n     \
    \   self._srsschg = Field(\"srsschg\", 8, 1)\n        self._hnsschg = Field(\"\
    hnsschg\", 9, 1)\n        self._hngdet = Field(\"hngdet\", 17, 1)\n        self._adtochg\
    \ = Field(\"adtochg\", 18, 1)\n        self._dbcdne = Field(\"dbcdne\", 19, 1)\n\
    \        super().__init__(\"FS_GOTGINT\", 0x50000000 + 0x4)\n\n    @property\n\
    \    def sedet(self) -> Field:\n        \"\"\"\n        SEDET\n\n        Session\
    \ end detected\n        \"\"\"\n        return self._sedet\n\n    @sedet.setter\n\
    \    def sedet(self, value: int) -> None:\n        self._sedet.value = value\n\
    \n    @property\n    def srsschg(self) -> Field:\n        \"\"\"\n        SRSSCHG\n\
    \n        Session request success status\n                  change\n        \"\
    \"\"\n        return self._srsschg\n\n    @srsschg.setter\n    def srsschg(self,\
    \ value: int) -> None:\n        self._srsschg.value = value\n\n    @property\n\
    \    def hnsschg(self) -> Field:\n        \"\"\"\n        HNSSCHG\n\n        Host\
    \ negotiation success status\n                  change\n        \"\"\"\n     \
    \   return self._hnsschg\n\n    @hnsschg.setter\n    def hnsschg(self, value:\
    \ int) -> None:\n        self._hnsschg.value = value\n\n    @property\n    def\
    \ hngdet(self) -> Field:\n        \"\"\"\n        HNGDET\n\n        Host negotiation\
    \ detected\n        \"\"\"\n        return self._hngdet\n\n    @hngdet.setter\n\
    \    def hngdet(self, value: int) -> None:\n        self._hngdet.value = value\n\
    \n    @property\n    def adtochg(self) -> Field:\n        \"\"\"\n        ADTOCHG\n\
    \n        A-device timeout change\n        \"\"\"\n        return self._adtochg\n\
    \n    @adtochg.setter\n    def adtochg(self, value: int) -> None:\n        self._adtochg.value\
    \ = value\n\n    @property\n    def dbcdne(self) -> Field:\n        \"\"\"\n \
    \       DBCDNE\n\n        Debounce done\n        \"\"\"\n        return self._dbcdne\n\
    \n    @dbcdne.setter\n    def dbcdne(self, value: int) -> None:\n        self._dbcdne.value\
    \ = value\n\n\nclass Fs_gahbcfgRegister(Register):\n    \"\"\"\n    FS_GAHBCFG\n\
    \n    OTG_FS AHB configuration register\n              (OTG_FS_GAHBCFG)\n    \"\
    \"\"\n\n    def __init__(self):\n        self._gint = Field(\"gint\", 0, 1)\n\
    \        self._txfelvl = Field(\"txfelvl\", 7, 1)\n        self._ptxfelvl = Field(\"\
    ptxfelvl\", 8, 1)\n        super().__init__(\"FS_GAHBCFG\", 0x50000000 + 0x8)\n\
    \n    @property\n    def gint(self) -> Field:\n        \"\"\"\n        GINT\n\n\
    \        Global interrupt mask\n        \"\"\"\n        return self._gint\n\n\
    \    @gint.setter\n    def gint(self, value: int) -> None:\n        self._gint.value\
    \ = value\n\n    @property\n    def txfelvl(self) -> Field:\n        \"\"\"\n\
    \        TXFELVL\n\n        TxFIFO empty level\n        \"\"\"\n        return\
    \ self._txfelvl\n\n    @txfelvl.setter\n    def txfelvl(self, value: int) -> None:\n\
    \        self._txfelvl.value = value\n\n    @property\n    def ptxfelvl(self)\
    \ -> Field:\n        \"\"\"\n        PTXFELVL\n\n        Periodic TxFIFO empty\n\
    \                  level\n        \"\"\"\n        return self._ptxfelvl\n\n  \
    \  @ptxfelvl.setter\n    def ptxfelvl(self, value: int) -> None:\n        self._ptxfelvl.value\
    \ = value\n\n\nclass Fs_gusbcfgRegister(Register):\n    \"\"\"\n    FS_GUSBCFG\n\
    \n    OTG_FS USB configuration register\n              (OTG_FS_GUSBCFG)\n    \"\
    \"\"\n\n    def __init__(self):\n        self._tocal = Field(\"tocal\", 0, 3)\n\
    \        self._physel = Field(\"physel\", 6, 1)\n        self._srpcap = Field(\"\
    srpcap\", 8, 1)\n        self._hnpcap = Field(\"hnpcap\", 9, 1)\n        self._trdt\
    \ = Field(\"trdt\", 10, 4)\n        self._fhmod = Field(\"fhmod\", 29, 1)\n  \
    \      self._fdmod = Field(\"fdmod\", 30, 1)\n        self._ctxpkt = Field(\"\
    ctxpkt\", 31, 1)\n        super().__init__(\"FS_GUSBCFG\", 0x50000000 + 0xC)\n\
    \n    @property\n    def tocal(self) -> Field:\n        \"\"\"\n        TOCAL\n\
    \n        FS timeout calibration\n        \"\"\"\n        return self._tocal\n\
    \n    @tocal.setter\n    def tocal(self, value: int) -> None:\n        self._tocal.value\
    \ = value\n\n    @property\n    def physel(self) -> Field:\n        \"\"\"\n \
    \       PHYSEL\n\n        Full Speed serial transceiver\n                  select\n\
    \        \"\"\"\n        return self._physel\n\n    @physel.setter\n    def physel(self,\
    \ value: int) -> None:\n        self._physel.value = value\n\n    @property\n\
    \    def srpcap(self) -> Field:\n        \"\"\"\n        SRPCAP\n\n        SRP-capable\n\
    \        \"\"\"\n        return self._srpcap\n\n    @srpcap.setter\n    def srpcap(self,\
    \ value: int) -> None:\n        self._srpcap.value = value\n\n    @property\n\
    \    def hnpcap(self) -> Field:\n        \"\"\"\n        HNPCAP\n\n        HNP-capable\n\
    \        \"\"\"\n        return self._hnpcap\n\n    @hnpcap.setter\n    def hnpcap(self,\
    \ value: int) -> None:\n        self._hnpcap.value = value\n\n    @property\n\
    \    def trdt(self) -> Field:\n        \"\"\"\n        TRDT\n\n        USB turnaround\
    \ time\n        \"\"\"\n        return self._trdt\n\n    @trdt.setter\n    def\
    \ trdt(self, value: int) -> None:\n        self._trdt.value = value\n\n    @property\n\
    \    def fhmod(self) -> Field:\n        \"\"\"\n        FHMOD\n\n        Force\
    \ host mode\n        \"\"\"\n        return self._fhmod\n\n    @fhmod.setter\n\
    \    def fhmod(self, value: int) -> None:\n        self._fhmod.value = value\n\
    \n    @property\n    def fdmod(self) -> Field:\n        \"\"\"\n        FDMOD\n\
    \n        Force device mode\n        \"\"\"\n        return self._fdmod\n\n  \
    \  @fdmod.setter\n    def fdmod(self, value: int) -> None:\n        self._fdmod.value\
    \ = value\n\n    @property\n    def ctxpkt(self) -> Field:\n        \"\"\"\n \
    \       CTXPKT\n\n        Corrupt Tx packet\n        \"\"\"\n        return self._ctxpkt\n\
    \n    @ctxpkt.setter\n    def ctxpkt(self, value: int) -> None:\n        self._ctxpkt.value\
    \ = value\n\n\nclass Fs_grstctlRegister(Register):\n    \"\"\"\n    FS_GRSTCTL\n\
    \n    OTG_FS reset register\n              (OTG_FS_GRSTCTL)\n    \"\"\"\n\n  \
    \  def __init__(self):\n        self._csrst = Field(\"csrst\", 0, 1)\n       \
    \ self._hsrst = Field(\"hsrst\", 1, 1)\n        self._fcrst = Field(\"fcrst\"\
    , 2, 1)\n        self._rxfflsh = Field(\"rxfflsh\", 4, 1)\n        self._txfflsh\
    \ = Field(\"txfflsh\", 5, 1)\n        self._txfnum = Field(\"txfnum\", 6, 5)\n\
    \        self._ahbidl = Field(\"ahbidl\", 31, 1)\n        super().__init__(\"\
    FS_GRSTCTL\", 0x50000000 + 0x10)\n\n    @property\n    def csrst(self) -> Field:\n\
    \        \"\"\"\n        CSRST\n\n        Core soft reset\n        \"\"\"\n  \
    \      return self._csrst\n\n    @csrst.setter\n    def csrst(self, value: int)\
    \ -> None:\n        self._csrst.value = value\n\n    @property\n    def hsrst(self)\
    \ -> Field:\n        \"\"\"\n        HSRST\n\n        HCLK soft reset\n      \
    \  \"\"\"\n        return self._hsrst\n\n    @hsrst.setter\n    def hsrst(self,\
    \ value: int) -> None:\n        self._hsrst.value = value\n\n    @property\n \
    \   def fcrst(self) -> Field:\n        \"\"\"\n        FCRST\n\n        Host frame\
    \ counter reset\n        \"\"\"\n        return self._fcrst\n\n    @fcrst.setter\n\
    \    def fcrst(self, value: int) -> None:\n        self._fcrst.value = value\n\
    \n    @property\n    def rxfflsh(self) -> Field:\n        \"\"\"\n        RXFFLSH\n\
    \n        RxFIFO flush\n        \"\"\"\n        return self._rxfflsh\n\n    @rxfflsh.setter\n\
    \    def rxfflsh(self, value: int) -> None:\n        self._rxfflsh.value = value\n\
    \n    @property\n    def txfflsh(self) -> Field:\n        \"\"\"\n        TXFFLSH\n\
    \n        TxFIFO flush\n        \"\"\"\n        return self._txfflsh\n\n    @txfflsh.setter\n\
    \    def txfflsh(self, value: int) -> None:\n        self._txfflsh.value = value\n\
    \n    @property\n    def txfnum(self) -> Field:\n        \"\"\"\n        TXFNUM\n\
    \n        TxFIFO number\n        \"\"\"\n        return self._txfnum\n\n    @txfnum.setter\n\
    \    def txfnum(self, value: int) -> None:\n        self._txfnum.value = value\n\
    \n    @property\n    def ahbidl(self) -> Field:\n        \"\"\"\n        AHBIDL\n\
    \n        AHB master idle\n        \"\"\"\n        return self._ahbidl\n\n   \
    \ @ahbidl.setter\n    def ahbidl(self, value: int) -> None:\n        self._ahbidl.value\
    \ = value\n\n\nclass Fs_gintstsRegister(Register):\n    \"\"\"\n    FS_GINTSTS\n\
    \n    OTG_FS core interrupt register\n              (OTG_FS_GINTSTS)\n    \"\"\
    \"\n\n    def __init__(self):\n        self._cmod = Field(\"cmod\", 0, 1)\n  \
    \      self._mmis = Field(\"mmis\", 1, 1)\n        self._otgint = Field(\"otgint\"\
    , 2, 1)\n        self._sof = Field(\"sof\", 3, 1)\n        self._rxflvl = Field(\"\
    rxflvl\", 4, 1)\n        self._nptxfe = Field(\"nptxfe\", 5, 1)\n        self._ginakeff\
    \ = Field(\"ginakeff\", 6, 1)\n        self._goutnakeff = Field(\"goutnakeff\"\
    , 7, 1)\n        self._esusp = Field(\"esusp\", 10, 1)\n        self._usbsusp\
    \ = Field(\"usbsusp\", 11, 1)\n        self._usbrst = Field(\"usbrst\", 12, 1)\n\
    \        self._enumdne = Field(\"enumdne\", 13, 1)\n        self._isoodrp = Field(\"\
    isoodrp\", 14, 1)\n        self._eopf = Field(\"eopf\", 15, 1)\n        self._iepint\
    \ = Field(\"iepint\", 18, 1)\n        self._oepint = Field(\"oepint\", 19, 1)\n\
    \        self._iisoixfr = Field(\"iisoixfr\", 20, 1)\n        self._ipxfr_incompisoout\
    \ = Field(\"ipxfr_incompisoout\", 21, 1)\n        self._hprtint = Field(\"hprtint\"\
    , 24, 1)\n        self._hcint = Field(\"hcint\", 25, 1)\n        self._ptxfe =\
    \ Field(\"ptxfe\", 26, 1)\n        self._cidschg = Field(\"cidschg\", 28, 1)\n\
    \        self._discint = Field(\"discint\", 29, 1)\n        self._srqint = Field(\"\
    srqint\", 30, 1)\n        self._wkupint = Field(\"wkupint\", 31, 1)\n        super().__init__(\"\
    FS_GINTSTS\", 0x50000000 + 0x14)\n\n    @property\n    def cmod(self) -> Field:\n\
    \        \"\"\"\n        CMOD\n\n        Current mode of operation\n        \"\
    \"\"\n        return self._cmod\n\n    @cmod.setter\n    def cmod(self, value:\
    \ int) -> None:\n        self._cmod.value = value\n\n    @property\n    def mmis(self)\
    \ -> Field:\n        \"\"\"\n        MMIS\n\n        Mode mismatch interrupt\n\
    \        \"\"\"\n        return self._mmis\n\n    @mmis.setter\n    def mmis(self,\
    \ value: int) -> None:\n        self._mmis.value = value\n\n    @property\n  \
    \  def otgint(self) -> Field:\n        \"\"\"\n        OTGINT\n\n        OTG interrupt\n\
    \        \"\"\"\n        return self._otgint\n\n    @otgint.setter\n    def otgint(self,\
    \ value: int) -> None:\n        self._otgint.value = value\n\n    @property\n\
    \    def sof(self) -> Field:\n        \"\"\"\n        SOF\n\n        Start of\
    \ frame\n        \"\"\"\n        return self._sof\n\n    @sof.setter\n    def\
    \ sof(self, value: int) -> None:\n        self._sof.value = value\n\n    @property\n\
    \    def rxflvl(self) -> Field:\n        \"\"\"\n        RXFLVL\n\n        RxFIFO\
    \ non-empty\n        \"\"\"\n        return self._rxflvl\n\n    @rxflvl.setter\n\
    \    def rxflvl(self, value: int) -> None:\n        self._rxflvl.value = value\n\
    \n    @property\n    def nptxfe(self) -> Field:\n        \"\"\"\n        NPTXFE\n\
    \n        Non-periodic TxFIFO empty\n        \"\"\"\n        return self._nptxfe\n\
    \n    @nptxfe.setter\n    def nptxfe(self, value: int) -> None:\n        self._nptxfe.value\
    \ = value\n\n    @property\n    def ginakeff(self) -> Field:\n        \"\"\"\n\
    \        GINAKEFF\n\n        Global IN non-periodic NAK\n                  effective\n\
    \        \"\"\"\n        return self._ginakeff\n\n    @ginakeff.setter\n    def\
    \ ginakeff(self, value: int) -> None:\n        self._ginakeff.value = value\n\n\
    \    @property\n    def goutnakeff(self) -> Field:\n        \"\"\"\n        GOUTNAKEFF\n\
    \n        Global OUT NAK effective\n        \"\"\"\n        return self._goutnakeff\n\
    \n    @goutnakeff.setter\n    def goutnakeff(self, value: int) -> None:\n    \
    \    self._goutnakeff.value = value\n\n    @property\n    def esusp(self) -> Field:\n\
    \        \"\"\"\n        ESUSP\n\n        Early suspend\n        \"\"\"\n    \
    \    return self._esusp\n\n    @esusp.setter\n    def esusp(self, value: int)\
    \ -> None:\n        self._esusp.value = value\n\n    @property\n    def usbsusp(self)\
    \ -> Field:\n        \"\"\"\n        USBSUSP\n\n        USB suspend\n        \"\
    \"\"\n        return self._usbsusp\n\n    @usbsusp.setter\n    def usbsusp(self,\
    \ value: int) -> None:\n        self._usbsusp.value = value\n\n    @property\n\
    \    def usbrst(self) -> Field:\n        \"\"\"\n        USBRST\n\n        USB\
    \ reset\n        \"\"\"\n        return self._usbrst\n\n    @usbrst.setter\n \
    \   def usbrst(self, value: int) -> None:\n        self._usbrst.value = value\n\
    \n    @property\n    def enumdne(self) -> Field:\n        \"\"\"\n        ENUMDNE\n\
    \n        Enumeration done\n        \"\"\"\n        return self._enumdne\n\n \
    \   @enumdne.setter\n    def enumdne(self, value: int) -> None:\n        self._enumdne.value\
    \ = value\n\n    @property\n    def isoodrp(self) -> Field:\n        \"\"\"\n\
    \        ISOODRP\n\n        Isochronous OUT packet dropped\n                 \
    \ interrupt\n        \"\"\"\n        return self._isoodrp\n\n    @isoodrp.setter\n\
    \    def isoodrp(self, value: int) -> None:\n        self._isoodrp.value = value\n\
    \n    @property\n    def eopf(self) -> Field:\n        \"\"\"\n        EOPF\n\n\
    \        End of periodic frame\n                  interrupt\n        \"\"\"\n\
    \        return self._eopf\n\n    @eopf.setter\n    def eopf(self, value: int)\
    \ -> None:\n        self._eopf.value = value\n\n    @property\n    def iepint(self)\
    \ -> Field:\n        \"\"\"\n        IEPINT\n\n        IN endpoint interrupt\n\
    \        \"\"\"\n        return self._iepint\n\n    @iepint.setter\n    def iepint(self,\
    \ value: int) -> None:\n        self._iepint.value = value\n\n    @property\n\
    \    def oepint(self) -> Field:\n        \"\"\"\n        OEPINT\n\n        OUT\
    \ endpoint interrupt\n        \"\"\"\n        return self._oepint\n\n    @oepint.setter\n\
    \    def oepint(self, value: int) -> None:\n        self._oepint.value = value\n\
    \n    @property\n    def iisoixfr(self) -> Field:\n        \"\"\"\n        IISOIXFR\n\
    \n        Incomplete isochronous IN\n                  transfer\n        \"\"\"\
    \n        return self._iisoixfr\n\n    @iisoixfr.setter\n    def iisoixfr(self,\
    \ value: int) -> None:\n        self._iisoixfr.value = value\n\n    @property\n\
    \    def ipxfr_incompisoout(self) -> Field:\n        \"\"\"\n        IPXFR_INCOMPISOOUT\n\
    \n        Incomplete periodic transfer(Host\n                  mode)/Incomplete\
    \ isochronous OUT transfer(Device\n                  mode)\n        \"\"\"\n \
    \       return self._ipxfr_incompisoout\n\n    @ipxfr_incompisoout.setter\n  \
    \  def ipxfr_incompisoout(self, value: int) -> None:\n        self._ipxfr_incompisoout.value\
    \ = value\n\n    @property\n    def hprtint(self) -> Field:\n        \"\"\"\n\
    \        HPRTINT\n\n        Host port interrupt\n        \"\"\"\n        return\
    \ self._hprtint\n\n    @hprtint.setter\n    def hprtint(self, value: int) -> None:\n\
    \        self._hprtint.value = value\n\n    @property\n    def hcint(self) ->\
    \ Field:\n        \"\"\"\n        HCINT\n\n        Host channels interrupt\n \
    \       \"\"\"\n        return self._hcint\n\n    @hcint.setter\n    def hcint(self,\
    \ value: int) -> None:\n        self._hcint.value = value\n\n    @property\n \
    \   def ptxfe(self) -> Field:\n        \"\"\"\n        PTXFE\n\n        Periodic\
    \ TxFIFO empty\n        \"\"\"\n        return self._ptxfe\n\n    @ptxfe.setter\n\
    \    def ptxfe(self, value: int) -> None:\n        self._ptxfe.value = value\n\
    \n    @property\n    def cidschg(self) -> Field:\n        \"\"\"\n        CIDSCHG\n\
    \n        Connector ID status change\n        \"\"\"\n        return self._cidschg\n\
    \n    @cidschg.setter\n    def cidschg(self, value: int) -> None:\n        self._cidschg.value\
    \ = value\n\n    @property\n    def discint(self) -> Field:\n        \"\"\"\n\
    \        DISCINT\n\n        Disconnect detected\n                  interrupt\n\
    \        \"\"\"\n        return self._discint\n\n    @discint.setter\n    def\
    \ discint(self, value: int) -> None:\n        self._discint.value = value\n\n\
    \    @property\n    def srqint(self) -> Field:\n        \"\"\"\n        SRQINT\n\
    \n        Session request/new session detected\n                  interrupt\n\
    \        \"\"\"\n        return self._srqint\n\n    @srqint.setter\n    def srqint(self,\
    \ value: int) -> None:\n        self._srqint.value = value\n\n    @property\n\
    \    def wkupint(self) -> Field:\n        \"\"\"\n        WKUPINT\n\n        Resume/remote\
    \ wakeup detected\n                  interrupt\n        \"\"\"\n        return\
    \ self._wkupint\n\n    @wkupint.setter\n    def wkupint(self, value: int) -> None:\n\
    \        self._wkupint.value = value\n\n\nclass Fs_gintmskRegister(Register):\n\
    \    \"\"\"\n    FS_GINTMSK\n\n    OTG_FS interrupt mask register\n          \
    \    (OTG_FS_GINTMSK)\n    \"\"\"\n\n    def __init__(self):\n        self._mmism\
    \ = Field(\"mmism\", 1, 1)\n        self._otgint = Field(\"otgint\", 2, 1)\n \
    \       self._sofm = Field(\"sofm\", 3, 1)\n        self._rxflvlm = Field(\"rxflvlm\"\
    , 4, 1)\n        self._nptxfem = Field(\"nptxfem\", 5, 1)\n        self._ginakeffm\
    \ = Field(\"ginakeffm\", 6, 1)\n        self._gonakeffm = Field(\"gonakeffm\"\
    , 7, 1)\n        self._esuspm = Field(\"esuspm\", 10, 1)\n        self._usbsuspm\
    \ = Field(\"usbsuspm\", 11, 1)\n        self._usbrst = Field(\"usbrst\", 12, 1)\n\
    \        self._enumdnem = Field(\"enumdnem\", 13, 1)\n        self._isoodrpm =\
    \ Field(\"isoodrpm\", 14, 1)\n        self._eopfm = Field(\"eopfm\", 15, 1)\n\
    \        self._epmism = Field(\"epmism\", 17, 1)\n        self._iepint = Field(\"\
    iepint\", 18, 1)\n        self._oepint = Field(\"oepint\", 19, 1)\n        self._iisoixfrm\
    \ = Field(\"iisoixfrm\", 20, 1)\n        self._ipxfrm_iisooxfrm = Field(\"ipxfrm_iisooxfrm\"\
    , 21, 1)\n        self._prtim = Field(\"prtim\", 24, 1)\n        self._hcim =\
    \ Field(\"hcim\", 25, 1)\n        self._ptxfem = Field(\"ptxfem\", 26, 1)\n  \
    \      self._cidschgm = Field(\"cidschgm\", 28, 1)\n        self._discint = Field(\"\
    discint\", 29, 1)\n        self._srqim = Field(\"srqim\", 30, 1)\n        self._wuim\
    \ = Field(\"wuim\", 31, 1)\n        super().__init__(\"FS_GINTMSK\", 0x50000000\
    \ + 0x18)\n\n    @property\n    def mmism(self) -> Field:\n        \"\"\"\n  \
    \      MMISM\n\n        Mode mismatch interrupt\n                  mask\n    \
    \    \"\"\"\n        return self._mmism\n\n    @mmism.setter\n    def mmism(self,\
    \ value: int) -> None:\n        self._mmism.value = value\n\n    @property\n \
    \   def otgint(self) -> Field:\n        \"\"\"\n        OTGINT\n\n        OTG\
    \ interrupt mask\n        \"\"\"\n        return self._otgint\n\n    @otgint.setter\n\
    \    def otgint(self, value: int) -> None:\n        self._otgint.value = value\n\
    \n    @property\n    def sofm(self) -> Field:\n        \"\"\"\n        SOFM\n\n\
    \        Start of frame mask\n        \"\"\"\n        return self._sofm\n\n  \
    \  @sofm.setter\n    def sofm(self, value: int) -> None:\n        self._sofm.value\
    \ = value\n\n    @property\n    def rxflvlm(self) -> Field:\n        \"\"\"\n\
    \        RXFLVLM\n\n        Receive FIFO non-empty\n                  mask\n \
    \       \"\"\"\n        return self._rxflvlm\n\n    @rxflvlm.setter\n    def rxflvlm(self,\
    \ value: int) -> None:\n        self._rxflvlm.value = value\n\n    @property\n\
    \    def nptxfem(self) -> Field:\n        \"\"\"\n        NPTXFEM\n\n        Non-periodic\
    \ TxFIFO empty\n                  mask\n        \"\"\"\n        return self._nptxfem\n\
    \n    @nptxfem.setter\n    def nptxfem(self, value: int) -> None:\n        self._nptxfem.value\
    \ = value\n\n    @property\n    def ginakeffm(self) -> Field:\n        \"\"\"\n\
    \        GINAKEFFM\n\n        Global non-periodic IN NAK effective\n         \
    \         mask\n        \"\"\"\n        return self._ginakeffm\n\n    @ginakeffm.setter\n\
    \    def ginakeffm(self, value: int) -> None:\n        self._ginakeffm.value =\
    \ value\n\n    @property\n    def gonakeffm(self) -> Field:\n        \"\"\"\n\
    \        GONAKEFFM\n\n        Global OUT NAK effective\n                  mask\n\
    \        \"\"\"\n        return self._gonakeffm\n\n    @gonakeffm.setter\n   \
    \ def gonakeffm(self, value: int) -> None:\n        self._gonakeffm.value = value\n\
    \n    @property\n    def esuspm(self) -> Field:\n        \"\"\"\n        ESUSPM\n\
    \n        Early suspend mask\n        \"\"\"\n        return self._esuspm\n\n\
    \    @esuspm.setter\n    def esuspm(self, value: int) -> None:\n        self._esuspm.value\
    \ = value\n\n    @property\n    def usbsuspm(self) -> Field:\n        \"\"\"\n\
    \        USBSUSPM\n\n        USB suspend mask\n        \"\"\"\n        return\
    \ self._usbsuspm\n\n    @usbsuspm.setter\n    def usbsuspm(self, value: int) ->\
    \ None:\n        self._usbsuspm.value = value\n\n    @property\n    def usbrst(self)\
    \ -> Field:\n        \"\"\"\n        USBRST\n\n        USB reset mask\n      \
    \  \"\"\"\n        return self._usbrst\n\n    @usbrst.setter\n    def usbrst(self,\
    \ value: int) -> None:\n        self._usbrst.value = value\n\n    @property\n\
    \    def enumdnem(self) -> Field:\n        \"\"\"\n        ENUMDNEM\n\n      \
    \  Enumeration done mask\n        \"\"\"\n        return self._enumdnem\n\n  \
    \  @enumdnem.setter\n    def enumdnem(self, value: int) -> None:\n        self._enumdnem.value\
    \ = value\n\n    @property\n    def isoodrpm(self) -> Field:\n        \"\"\"\n\
    \        ISOODRPM\n\n        Isochronous OUT packet dropped interrupt\n      \
    \            mask\n        \"\"\"\n        return self._isoodrpm\n\n    @isoodrpm.setter\n\
    \    def isoodrpm(self, value: int) -> None:\n        self._isoodrpm.value = value\n\
    \n    @property\n    def eopfm(self) -> Field:\n        \"\"\"\n        EOPFM\n\
    \n        End of periodic frame interrupt\n                  mask\n        \"\"\
    \"\n        return self._eopfm\n\n    @eopfm.setter\n    def eopfm(self, value:\
    \ int) -> None:\n        self._eopfm.value = value\n\n    @property\n    def epmism(self)\
    \ -> Field:\n        \"\"\"\n        EPMISM\n\n        Endpoint mismatch interrupt\n\
    \                  mask\n        \"\"\"\n        return self._epmism\n\n    @epmism.setter\n\
    \    def epmism(self, value: int) -> None:\n        self._epmism.value = value\n\
    \n    @property\n    def iepint(self) -> Field:\n        \"\"\"\n        IEPINT\n\
    \n        IN endpoints interrupt\n                  mask\n        \"\"\"\n   \
    \     return self._iepint\n\n    @iepint.setter\n    def iepint(self, value: int)\
    \ -> None:\n        self._iepint.value = value\n\n    @property\n    def oepint(self)\
    \ -> Field:\n        \"\"\"\n        OEPINT\n\n        OUT endpoints interrupt\n\
    \                  mask\n        \"\"\"\n        return self._oepint\n\n    @oepint.setter\n\
    \    def oepint(self, value: int) -> None:\n        self._oepint.value = value\n\
    \n    @property\n    def iisoixfrm(self) -> Field:\n        \"\"\"\n        IISOIXFRM\n\
    \n        Incomplete isochronous IN transfer\n                  mask\n       \
    \ \"\"\"\n        return self._iisoixfrm\n\n    @iisoixfrm.setter\n    def iisoixfrm(self,\
    \ value: int) -> None:\n        self._iisoixfrm.value = value\n\n    @property\n\
    \    def ipxfrm_iisooxfrm(self) -> Field:\n        \"\"\"\n        IPXFRM_IISOOXFRM\n\
    \n        Incomplete periodic transfer mask(Host\n                  mode)/Incomplete\
    \ isochronous OUT transfer mask(Device\n                  mode)\n        \"\"\"\
    \n        return self._ipxfrm_iisooxfrm\n\n    @ipxfrm_iisooxfrm.setter\n    def\
    \ ipxfrm_iisooxfrm(self, value: int) -> None:\n        self._ipxfrm_iisooxfrm.value\
    \ = value\n\n    @property\n    def prtim(self) -> Field:\n        \"\"\"\n  \
    \      PRTIM\n\n        Host port interrupt mask\n        \"\"\"\n        return\
    \ self._prtim\n\n    @prtim.setter\n    def prtim(self, value: int) -> None:\n\
    \        self._prtim.value = value\n\n    @property\n    def hcim(self) -> Field:\n\
    \        \"\"\"\n        HCIM\n\n        Host channels interrupt\n           \
    \       mask\n        \"\"\"\n        return self._hcim\n\n    @hcim.setter\n\
    \    def hcim(self, value: int) -> None:\n        self._hcim.value = value\n\n\
    \    @property\n    def ptxfem(self) -> Field:\n        \"\"\"\n        PTXFEM\n\
    \n        Periodic TxFIFO empty mask\n        \"\"\"\n        return self._ptxfem\n\
    \n    @ptxfem.setter\n    def ptxfem(self, value: int) -> None:\n        self._ptxfem.value\
    \ = value\n\n    @property\n    def cidschgm(self) -> Field:\n        \"\"\"\n\
    \        CIDSCHGM\n\n        Connector ID status change\n                  mask\n\
    \        \"\"\"\n        return self._cidschgm\n\n    @cidschgm.setter\n    def\
    \ cidschgm(self, value: int) -> None:\n        self._cidschgm.value = value\n\n\
    \    @property\n    def discint(self) -> Field:\n        \"\"\"\n        DISCINT\n\
    \n        Disconnect detected interrupt\n                  mask\n        \"\"\"\
    \n        return self._discint\n\n    @discint.setter\n    def discint(self, value:\
    \ int) -> None:\n        self._discint.value = value\n\n    @property\n    def\
    \ srqim(self) -> Field:\n        \"\"\"\n        SRQIM\n\n        Session request/new\
    \ session detected\n                  interrupt mask\n        \"\"\"\n       \
    \ return self._srqim\n\n    @srqim.setter\n    def srqim(self, value: int) ->\
    \ None:\n        self._srqim.value = value\n\n    @property\n    def wuim(self)\
    \ -> Field:\n        \"\"\"\n        WUIM\n\n        Resume/remote wakeup detected\
    \ interrupt\n                  mask\n        \"\"\"\n        return self._wuim\n\
    \n    @wuim.setter\n    def wuim(self, value: int) -> None:\n        self._wuim.value\
    \ = value\n\n\nclass Fs_grxstsr_deviceRegister(Register):\n    \"\"\"\n    FS_GRXSTSR_DEVICE\n\
    \n    OTG_FS Receive status debug read(Device\n              mode)\n    \"\"\"\
    \n\n    def __init__(self):\n        self._epnum = Field(\"epnum\", 0, 4)\n  \
    \      self._bcnt = Field(\"bcnt\", 4, 11)\n        self._dpid = Field(\"dpid\"\
    , 15, 2)\n        self._pktsts = Field(\"pktsts\", 17, 4)\n        self._frmnum\
    \ = Field(\"frmnum\", 21, 4)\n        super().__init__(\"FS_GRXSTSR_Device\",\
    \ 0x50000000 + 0x1C)\n\n    @property\n    def epnum(self) -> Field:\n       \
    \ \"\"\"\n        EPNUM\n\n        Endpoint number\n        \"\"\"\n        return\
    \ self._epnum\n\n    @epnum.setter\n    def epnum(self, value: int) -> None:\n\
    \        self._epnum.value = value\n\n    @property\n    def bcnt(self) -> Field:\n\
    \        \"\"\"\n        BCNT\n\n        Byte count\n        \"\"\"\n        return\
    \ self._bcnt\n\n    @bcnt.setter\n    def bcnt(self, value: int) -> None:\n  \
    \      self._bcnt.value = value\n\n    @property\n    def dpid(self) -> Field:\n\
    \        \"\"\"\n        DPID\n\n        Data PID\n        \"\"\"\n        return\
    \ self._dpid\n\n    @dpid.setter\n    def dpid(self, value: int) -> None:\n  \
    \      self._dpid.value = value\n\n    @property\n    def pktsts(self) -> Field:\n\
    \        \"\"\"\n        PKTSTS\n\n        Packet status\n        \"\"\"\n   \
    \     return self._pktsts\n\n    @pktsts.setter\n    def pktsts(self, value: int)\
    \ -> None:\n        self._pktsts.value = value\n\n    @property\n    def frmnum(self)\
    \ -> Field:\n        \"\"\"\n        FRMNUM\n\n        Frame number\n        \"\
    \"\"\n        return self._frmnum\n\n    @frmnum.setter\n    def frmnum(self,\
    \ value: int) -> None:\n        self._frmnum.value = value\n\n\nclass Fs_grxstsp_deviceRegister(Register):\n\
    \    \"\"\"\n    FS_GRXSTSP_DEVICE\n\n    OTG_FS Receive status debug read(Device\n\
    \              mode)\n    \"\"\"\n\n    def __init__(self):\n        self._epnum\
    \ = Field(\"epnum\", 0, 4)\n        self._bcnt = Field(\"bcnt\", 4, 11)\n    \
    \    self._dpid = Field(\"dpid\", 15, 2)\n        self._pktsts = Field(\"pktsts\"\
    , 17, 4)\n        self._frmnum = Field(\"frmnum\", 21, 4)\n        super().__init__(\"\
    FS_GRXSTSP_Device\", 0x50000000 + 0x20)\n\n    @property\n    def epnum(self)\
    \ -> Field:\n        \"\"\"\n        EPNUM\n\n        Endpoint number\n      \
    \  \"\"\"\n        return self._epnum\n\n    @epnum.setter\n    def epnum(self,\
    \ value: int) -> None:\n        self._epnum.value = value\n\n    @property\n \
    \   def bcnt(self) -> Field:\n        \"\"\"\n        BCNT\n\n        Byte count\n\
    \        \"\"\"\n        return self._bcnt\n\n    @bcnt.setter\n    def bcnt(self,\
    \ value: int) -> None:\n        self._bcnt.value = value\n\n    @property\n  \
    \  def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n        Data PID\n\
    \        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n    def dpid(self,\
    \ value: int) -> None:\n        self._dpid.value = value\n\n    @property\n  \
    \  def pktsts(self) -> Field:\n        \"\"\"\n        PKTSTS\n\n        Packet\
    \ status\n        \"\"\"\n        return self._pktsts\n\n    @pktsts.setter\n\
    \    def pktsts(self, value: int) -> None:\n        self._pktsts.value = value\n\
    \n    @property\n    def frmnum(self) -> Field:\n        \"\"\"\n        FRMNUM\n\
    \n        Frame number\n        \"\"\"\n        return self._frmnum\n\n    @frmnum.setter\n\
    \    def frmnum(self, value: int) -> None:\n        self._frmnum.value = value\n\
    \n\nclass Fs_grxstsr_hostRegister(Register):\n    \"\"\"\n    FS_GRXSTSR_HOST\n\
    \n    OTG_FS Receive status debug read(Host\n              mode)\n    \"\"\"\n\
    \n    def __init__(self):\n        self._epnum = Field(\"epnum\", 0, 4)\n    \
    \    self._bcnt = Field(\"bcnt\", 4, 11)\n        self._dpid = Field(\"dpid\"\
    , 15, 2)\n        self._pktsts = Field(\"pktsts\", 17, 4)\n        self._frmnum\
    \ = Field(\"frmnum\", 21, 4)\n        super().__init__(\"FS_GRXSTSR_Host\", 0x50000000\
    \ + 0x1C)\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def bcnt(self) -> Field:\n        \"\"\"\n   \
    \     BCNT\n\n        Byte count\n        \"\"\"\n        return self._bcnt\n\n\
    \    @bcnt.setter\n    def bcnt(self, value: int) -> None:\n        self._bcnt.value\
    \ = value\n\n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n   \
    \     DPID\n\n        Data PID\n        \"\"\"\n        return self._dpid\n\n\
    \    @dpid.setter\n    def dpid(self, value: int) -> None:\n        self._dpid.value\
    \ = value\n\n    @property\n    def pktsts(self) -> Field:\n        \"\"\"\n \
    \       PKTSTS\n\n        Packet status\n        \"\"\"\n        return self._pktsts\n\
    \n    @pktsts.setter\n    def pktsts(self, value: int) -> None:\n        self._pktsts.value\
    \ = value\n\n    @property\n    def frmnum(self) -> Field:\n        \"\"\"\n \
    \       FRMNUM\n\n        Frame number\n        \"\"\"\n        return self._frmnum\n\
    \n    @frmnum.setter\n    def frmnum(self, value: int) -> None:\n        self._frmnum.value\
    \ = value\n\n\nclass Fs_grxstsp_hostRegister(Register):\n    \"\"\"\n    FS_GRXSTSP_HOST\n\
    \n    OTG_FS Receive status debug read(Host\n              mode)\n    \"\"\"\n\
    \n    def __init__(self):\n        self._epnum = Field(\"epnum\", 0, 4)\n    \
    \    self._bcnt = Field(\"bcnt\", 4, 11)\n        self._dpid = Field(\"dpid\"\
    , 15, 2)\n        self._pktsts = Field(\"pktsts\", 17, 4)\n        self._frmnum\
    \ = Field(\"frmnum\", 21, 4)\n        super().__init__(\"FS_GRXSTSP_Host\", 0x50000000\
    \ + 0x20)\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def bcnt(self) -> Field:\n        \"\"\"\n   \
    \     BCNT\n\n        Byte count\n        \"\"\"\n        return self._bcnt\n\n\
    \    @bcnt.setter\n    def bcnt(self, value: int) -> None:\n        self._bcnt.value\
    \ = value\n\n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n   \
    \     DPID\n\n        Data PID\n        \"\"\"\n        return self._dpid\n\n\
    \    @dpid.setter\n    def dpid(self, value: int) -> None:\n        self._dpid.value\
    \ = value\n\n    @property\n    def pktsts(self) -> Field:\n        \"\"\"\n \
    \       PKTSTS\n\n        Packet status\n        \"\"\"\n        return self._pktsts\n\
    \n    @pktsts.setter\n    def pktsts(self, value: int) -> None:\n        self._pktsts.value\
    \ = value\n\n    @property\n    def frmnum(self) -> Field:\n        \"\"\"\n \
    \       FRMNUM\n\n        Frame number\n        \"\"\"\n        return self._frmnum\n\
    \n    @frmnum.setter\n    def frmnum(self, value: int) -> None:\n        self._frmnum.value\
    \ = value\n\n\nclass Fs_grxfsizRegister(Register):\n    \"\"\"\n    FS_GRXFSIZ\n\
    \n    OTG_FS Receive FIFO size register\n              (OTG_FS_GRXFSIZ)\n    \"\
    \"\"\n\n    def __init__(self):\n        self._rxfd = Field(\"rxfd\", 0, 16)\n\
    \        super().__init__(\"FS_GRXFSIZ\", 0x50000000 + 0x24)\n\n    @property\n\
    \    def rxfd(self) -> Field:\n        \"\"\"\n        RXFD\n\n        RxFIFO\
    \ depth\n        \"\"\"\n        return self._rxfd\n\n    @rxfd.setter\n    def\
    \ rxfd(self, value: int) -> None:\n        self._rxfd.value = value\n\n\nclass\
    \ Fs_gnptxfsiz_deviceRegister(Register):\n    \"\"\"\n    FS_GNPTXFSIZ_DEVICE\n\
    \n    OTG_FS non-periodic transmit FIFO size\n              register (Device mode)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._tx0fsa = Field(\"tx0fsa\"\
    , 0, 16)\n        self._tx0fd = Field(\"tx0fd\", 16, 16)\n        super().__init__(\"\
    FS_GNPTXFSIZ_Device\", 0x50000000 + 0x28)\n\n    @property\n    def tx0fsa(self)\
    \ -> Field:\n        \"\"\"\n        TX0FSA\n\n        Endpoint 0 transmit RAM\
    \ start\n                  address\n        \"\"\"\n        return self._tx0fsa\n\
    \n    @tx0fsa.setter\n    def tx0fsa(self, value: int) -> None:\n        self._tx0fsa.value\
    \ = value\n\n    @property\n    def tx0fd(self) -> Field:\n        \"\"\"\n  \
    \      TX0FD\n\n        Endpoint 0 TxFIFO depth\n        \"\"\"\n        return\
    \ self._tx0fd\n\n    @tx0fd.setter\n    def tx0fd(self, value: int) -> None:\n\
    \        self._tx0fd.value = value\n\n\nclass Fs_gnptxfsiz_hostRegister(Register):\n\
    \    \"\"\"\n    FS_GNPTXFSIZ_HOST\n\n    OTG_FS non-periodic transmit FIFO size\n\
    \              register (Host mode)\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._nptxfsa = Field(\"nptxfsa\", 0, 16)\n        self._nptxfd = Field(\"\
    nptxfd\", 16, 16)\n        super().__init__(\"FS_GNPTXFSIZ_Host\", 0x50000000\
    \ + 0x28)\n\n    @property\n    def nptxfsa(self) -> Field:\n        \"\"\"\n\
    \        NPTXFSA\n\n        Non-periodic transmit RAM start\n                \
    \  address\n        \"\"\"\n        return self._nptxfsa\n\n    @nptxfsa.setter\n\
    \    def nptxfsa(self, value: int) -> None:\n        self._nptxfsa.value = value\n\
    \n    @property\n    def nptxfd(self) -> Field:\n        \"\"\"\n        NPTXFD\n\
    \n        Non-periodic TxFIFO depth\n        \"\"\"\n        return self._nptxfd\n\
    \n    @nptxfd.setter\n    def nptxfd(self, value: int) -> None:\n        self._nptxfd.value\
    \ = value\n\n\nclass Fs_gnptxstsRegister(Register):\n    \"\"\"\n    FS_GNPTXSTS\n\
    \n    OTG_FS non-periodic transmit FIFO/queue\n              status register (OTG_FS_GNPTXSTS)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._nptxfsav = Field(\"nptxfsav\"\
    , 0, 16)\n        self._nptqxsav = Field(\"nptqxsav\", 16, 8)\n        self._nptxqtop\
    \ = Field(\"nptxqtop\", 24, 7)\n        super().__init__(\"FS_GNPTXSTS\", 0x50000000\
    \ + 0x2C)\n\n    @property\n    def nptxfsav(self) -> Field:\n        \"\"\"\n\
    \        NPTXFSAV\n\n        Non-periodic TxFIFO space\n                  available\n\
    \        \"\"\"\n        return self._nptxfsav\n\n    @nptxfsav.setter\n    def\
    \ nptxfsav(self, value: int) -> None:\n        self._nptxfsav.value = value\n\n\
    \    @property\n    def nptqxsav(self) -> Field:\n        \"\"\"\n        NPTQXSAV\n\
    \n        Non-periodic transmit request queue\n                  space available\n\
    \        \"\"\"\n        return self._nptqxsav\n\n    @nptqxsav.setter\n    def\
    \ nptqxsav(self, value: int) -> None:\n        self._nptqxsav.value = value\n\n\
    \    @property\n    def nptxqtop(self) -> Field:\n        \"\"\"\n        NPTXQTOP\n\
    \n        Top of the non-periodic transmit request\n                  queue\n\
    \        \"\"\"\n        return self._nptxqtop\n\n    @nptxqtop.setter\n    def\
    \ nptxqtop(self, value: int) -> None:\n        self._nptxqtop.value = value\n\n\
    \nclass Fs_gccfgRegister(Register):\n    \"\"\"\n    FS_GCCFG\n\n    OTG_FS general\
    \ core configuration register\n              (OTG_FS_GCCFG)\n    \"\"\"\n\n  \
    \  def __init__(self):\n        self._pwrdwn = Field(\"pwrdwn\", 16, 1)\n    \
    \    self._vbusasen = Field(\"vbusasen\", 18, 1)\n        self._vbusbsen = Field(\"\
    vbusbsen\", 19, 1)\n        self._sofouten = Field(\"sofouten\", 20, 1)\n    \
    \    self._novbussens = Field(\"novbussens\", 21, 1)\n        super().__init__(\"\
    FS_GCCFG\", 0x50000000 + 0x38)\n\n    @property\n    def pwrdwn(self) -> Field:\n\
    \        \"\"\"\n        PWRDWN\n\n        Power down\n        \"\"\"\n      \
    \  return self._pwrdwn\n\n    @pwrdwn.setter\n    def pwrdwn(self, value: int)\
    \ -> None:\n        self._pwrdwn.value = value\n\n    @property\n    def vbusasen(self)\
    \ -> Field:\n        \"\"\"\n        VBUSASEN\n\n        Enable the VBUS sensing\n\
    \                  device\n        \"\"\"\n        return self._vbusasen\n\n \
    \   @vbusasen.setter\n    def vbusasen(self, value: int) -> None:\n        self._vbusasen.value\
    \ = value\n\n    @property\n    def vbusbsen(self) -> Field:\n        \"\"\"\n\
    \        VBUSBSEN\n\n        Enable the VBUS sensing\n                  device\n\
    \        \"\"\"\n        return self._vbusbsen\n\n    @vbusbsen.setter\n    def\
    \ vbusbsen(self, value: int) -> None:\n        self._vbusbsen.value = value\n\n\
    \    @property\n    def sofouten(self) -> Field:\n        \"\"\"\n        SOFOUTEN\n\
    \n        SOF output enable\n        \"\"\"\n        return self._sofouten\n\n\
    \    @sofouten.setter\n    def sofouten(self, value: int) -> None:\n        self._sofouten.value\
    \ = value\n\n    @property\n    def novbussens(self) -> Field:\n        \"\"\"\
    \n        NOVBUSSENS\n\n        No VBUS sensing\n        \"\"\"\n        return\
    \ self._novbussens\n\n    @novbussens.setter\n    def novbussens(self, value:\
    \ int) -> None:\n        self._novbussens.value = value\n\n\nclass Fs_cidRegister(Register):\n\
    \    \"\"\"\n    FS_CID\n\n    core ID register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._product_id = Field(\"product_id\", 0, 32)\n        super().__init__(\"\
    FS_CID\", 0x50000000 + 0x3C)\n\n    @property\n    def product_id(self) -> Field:\n\
    \        \"\"\"\n        PRODUCT_ID\n\n        Product ID field\n        \"\"\"\
    \n        return self._product_id\n\n    @product_id.setter\n    def product_id(self,\
    \ value: int) -> None:\n        self._product_id.value = value\n\n\nclass Fs_hptxfsizRegister(Register):\n\
    \    \"\"\"\n    FS_HPTXFSIZ\n\n    OTG_FS Host periodic transmit FIFO size\n\
    \              register (OTG_FS_HPTXFSIZ)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ptxsa = Field(\"ptxsa\", 0, 16)\n        self._ptxfsiz = Field(\"\
    ptxfsiz\", 16, 16)\n        super().__init__(\"FS_HPTXFSIZ\", 0x50000000 + 0x100)\n\
    \n    @property\n    def ptxsa(self) -> Field:\n        \"\"\"\n        PTXSA\n\
    \n        Host periodic TxFIFO start\n                  address\n        \"\"\"\
    \n        return self._ptxsa\n\n    @ptxsa.setter\n    def ptxsa(self, value:\
    \ int) -> None:\n        self._ptxsa.value = value\n\n    @property\n    def ptxfsiz(self)\
    \ -> Field:\n        \"\"\"\n        PTXFSIZ\n\n        Host periodic TxFIFO depth\n\
    \        \"\"\"\n        return self._ptxfsiz\n\n    @ptxfsiz.setter\n    def\
    \ ptxfsiz(self, value: int) -> None:\n        self._ptxfsiz.value = value\n\n\n\
    class Fs_dieptxf1Register(Register):\n    \"\"\"\n    FS_DIEPTXF1\n\n    OTG_FS\
    \ device IN endpoint transmit FIFO size\n              register (OTG_FS_DIEPTXF2)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ineptxsa = Field(\"ineptxsa\"\
    , 0, 16)\n        self._ineptxfd = Field(\"ineptxfd\", 16, 16)\n        super().__init__(\"\
    FS_DIEPTXF1\", 0x50000000 + 0x104)\n\n    @property\n    def ineptxsa(self) ->\
    \ Field:\n        \"\"\"\n        INEPTXSA\n\n        IN endpoint FIFO2 transmit\
    \ RAM start\n                  address\n        \"\"\"\n        return self._ineptxsa\n\
    \n    @ineptxsa.setter\n    def ineptxsa(self, value: int) -> None:\n        self._ineptxsa.value\
    \ = value\n\n    @property\n    def ineptxfd(self) -> Field:\n        \"\"\"\n\
    \        INEPTXFD\n\n        IN endpoint TxFIFO depth\n        \"\"\"\n      \
    \  return self._ineptxfd\n\n    @ineptxfd.setter\n    def ineptxfd(self, value:\
    \ int) -> None:\n        self._ineptxfd.value = value\n\n\nclass Fs_dieptxf2Register(Register):\n\
    \    \"\"\"\n    FS_DIEPTXF2\n\n    OTG_FS device IN endpoint transmit FIFO size\n\
    \              register (OTG_FS_DIEPTXF3)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ineptxsa = Field(\"ineptxsa\", 0, 16)\n        self._ineptxfd =\
    \ Field(\"ineptxfd\", 16, 16)\n        super().__init__(\"FS_DIEPTXF2\", 0x50000000\
    \ + 0x108)\n\n    @property\n    def ineptxsa(self) -> Field:\n        \"\"\"\n\
    \        INEPTXSA\n\n        IN endpoint FIFO3 transmit RAM start\n          \
    \        address\n        \"\"\"\n        return self._ineptxsa\n\n    @ineptxsa.setter\n\
    \    def ineptxsa(self, value: int) -> None:\n        self._ineptxsa.value = value\n\
    \n    @property\n    def ineptxfd(self) -> Field:\n        \"\"\"\n        INEPTXFD\n\
    \n        IN endpoint TxFIFO depth\n        \"\"\"\n        return self._ineptxfd\n\
    \n    @ineptxfd.setter\n    def ineptxfd(self, value: int) -> None:\n        self._ineptxfd.value\
    \ = value\n\n\nclass Fs_dieptxf3Register(Register):\n    \"\"\"\n    FS_DIEPTXF3\n\
    \n    OTG_FS device IN endpoint transmit FIFO size\n              register (OTG_FS_DIEPTXF4)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ineptxsa = Field(\"ineptxsa\"\
    , 0, 16)\n        self._ineptxfd = Field(\"ineptxfd\", 16, 16)\n        super().__init__(\"\
    FS_DIEPTXF3\", 0x50000000 + 0x10C)\n\n    @property\n    def ineptxsa(self) ->\
    \ Field:\n        \"\"\"\n        INEPTXSA\n\n        IN endpoint FIFO4 transmit\
    \ RAM start\n                  address\n        \"\"\"\n        return self._ineptxsa\n\
    \n    @ineptxsa.setter\n    def ineptxsa(self, value: int) -> None:\n        self._ineptxsa.value\
    \ = value\n\n    @property\n    def ineptxfd(self) -> Field:\n        \"\"\"\n\
    \        INEPTXFD\n\n        IN endpoint TxFIFO depth\n        \"\"\"\n      \
    \  return self._ineptxfd\n\n    @ineptxfd.setter\n    def ineptxfd(self, value:\
    \ int) -> None:\n        self._ineptxfd.value = value\n\n\nclass Otg_fs_global(Peripheral):\n\
    \    \"\"\"\n    OTG_FS_GLOBAL\n\n    USB on the go full speed\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._fs_gotgctl = Fs_gotgctlRegister()\n  \
    \      self._fs_gotgint = Fs_gotgintRegister()\n        self._fs_gahbcfg = Fs_gahbcfgRegister()\n\
    \        self._fs_gusbcfg = Fs_gusbcfgRegister()\n        self._fs_grstctl = Fs_grstctlRegister()\n\
    \        self._fs_gintsts = Fs_gintstsRegister()\n        self._fs_gintmsk = Fs_gintmskRegister()\n\
    \        self._fs_grxstsr_device = Fs_grxstsr_deviceRegister()\n        self._fs_grxstsp_device\
    \ = Fs_grxstsp_deviceRegister()\n        self._fs_grxstsr_host = Fs_grxstsr_hostRegister()\n\
    \        self._fs_grxstsp_host = Fs_grxstsp_hostRegister()\n        self._fs_grxfsiz\
    \ = Fs_grxfsizRegister()\n        self._fs_gnptxfsiz_device = Fs_gnptxfsiz_deviceRegister()\n\
    \        self._fs_gnptxfsiz_host = Fs_gnptxfsiz_hostRegister()\n        self._fs_gnptxsts\
    \ = Fs_gnptxstsRegister()\n        self._fs_gccfg = Fs_gccfgRegister()\n     \
    \   self._fs_cid = Fs_cidRegister()\n        self._fs_hptxfsiz = Fs_hptxfsizRegister()\n\
    \        self._fs_dieptxf1 = Fs_dieptxf1Register()\n        self._fs_dieptxf2\
    \ = Fs_dieptxf2Register()\n        self._fs_dieptxf3 = Fs_dieptxf3Register()\n\
    \        super().__init__(\"otg_fs_global\", 0x50000000)\n\n    @property\n  \
    \  def fs_gotgctl(self) -> Fs_gotgctlRegister:\n        return self._fs_gotgctl\n\
    \n    @fs_gotgctl.setter\n    def fs_gotgctl(self, value: int) -> None:\n    \
    \    self._fs_gotgctl.value = value\n\n    @property\n    def fs_gotgint(self)\
    \ -> Fs_gotgintRegister:\n        return self._fs_gotgint\n\n    @fs_gotgint.setter\n\
    \    def fs_gotgint(self, value: int) -> None:\n        self._fs_gotgint.value\
    \ = value\n\n    @property\n    def fs_gahbcfg(self) -> Fs_gahbcfgRegister:\n\
    \        return self._fs_gahbcfg\n\n    @fs_gahbcfg.setter\n    def fs_gahbcfg(self,\
    \ value: int) -> None:\n        self._fs_gahbcfg.value = value\n\n    @property\n\
    \    def fs_gusbcfg(self) -> Fs_gusbcfgRegister:\n        return self._fs_gusbcfg\n\
    \n    @fs_gusbcfg.setter\n    def fs_gusbcfg(self, value: int) -> None:\n    \
    \    self._fs_gusbcfg.value = value\n\n    @property\n    def fs_grstctl(self)\
    \ -> Fs_grstctlRegister:\n        return self._fs_grstctl\n\n    @fs_grstctl.setter\n\
    \    def fs_grstctl(self, value: int) -> None:\n        self._fs_grstctl.value\
    \ = value\n\n    @property\n    def fs_gintsts(self) -> Fs_gintstsRegister:\n\
    \        return self._fs_gintsts\n\n    @fs_gintsts.setter\n    def fs_gintsts(self,\
    \ value: int) -> None:\n        self._fs_gintsts.value = value\n\n    @property\n\
    \    def fs_gintmsk(self) -> Fs_gintmskRegister:\n        return self._fs_gintmsk\n\
    \n    @fs_gintmsk.setter\n    def fs_gintmsk(self, value: int) -> None:\n    \
    \    self._fs_gintmsk.value = value\n\n    @property\n    def fs_grxstsr_device(self)\
    \ -> Fs_grxstsr_deviceRegister:\n        return self._fs_grxstsr_device\n\n  \
    \  @fs_grxstsr_device.setter\n    def fs_grxstsr_device(self, value: int) -> None:\n\
    \        self._fs_grxstsr_device.value = value\n\n    @property\n    def fs_grxstsp_device(self)\
    \ -> Fs_grxstsp_deviceRegister:\n        return self._fs_grxstsp_device\n\n  \
    \  @fs_grxstsp_device.setter\n    def fs_grxstsp_device(self, value: int) -> None:\n\
    \        self._fs_grxstsp_device.value = value\n\n    @property\n    def fs_grxstsr_host(self)\
    \ -> Fs_grxstsr_hostRegister:\n        return self._fs_grxstsr_host\n\n    @fs_grxstsr_host.setter\n\
    \    def fs_grxstsr_host(self, value: int) -> None:\n        self._fs_grxstsr_host.value\
    \ = value\n\n    @property\n    def fs_grxstsp_host(self) -> Fs_grxstsp_hostRegister:\n\
    \        return self._fs_grxstsp_host\n\n    @fs_grxstsp_host.setter\n    def\
    \ fs_grxstsp_host(self, value: int) -> None:\n        self._fs_grxstsp_host.value\
    \ = value\n\n    @property\n    def fs_grxfsiz(self) -> Fs_grxfsizRegister:\n\
    \        return self._fs_grxfsiz\n\n    @fs_grxfsiz.setter\n    def fs_grxfsiz(self,\
    \ value: int) -> None:\n        self._fs_grxfsiz.value = value\n\n    @property\n\
    \    def fs_gnptxfsiz_device(self) -> Fs_gnptxfsiz_deviceRegister:\n        return\
    \ self._fs_gnptxfsiz_device\n\n    @fs_gnptxfsiz_device.setter\n    def fs_gnptxfsiz_device(self,\
    \ value: int) -> None:\n        self._fs_gnptxfsiz_device.value = value\n\n  \
    \  @property\n    def fs_gnptxfsiz_host(self) -> Fs_gnptxfsiz_hostRegister:\n\
    \        return self._fs_gnptxfsiz_host\n\n    @fs_gnptxfsiz_host.setter\n   \
    \ def fs_gnptxfsiz_host(self, value: int) -> None:\n        self._fs_gnptxfsiz_host.value\
    \ = value\n\n    @property\n    def fs_gnptxsts(self) -> Fs_gnptxstsRegister:\n\
    \        return self._fs_gnptxsts\n\n    @fs_gnptxsts.setter\n    def fs_gnptxsts(self,\
    \ value: int) -> None:\n        self._fs_gnptxsts.value = value\n\n    @property\n\
    \    def fs_gccfg(self) -> Fs_gccfgRegister:\n        return self._fs_gccfg\n\n\
    \    @fs_gccfg.setter\n    def fs_gccfg(self, value: int) -> None:\n        self._fs_gccfg.value\
    \ = value\n\n    @property\n    def fs_cid(self) -> Fs_cidRegister:\n        return\
    \ self._fs_cid\n\n    @fs_cid.setter\n    def fs_cid(self, value: int) -> None:\n\
    \        self._fs_cid.value = value\n\n    @property\n    def fs_hptxfsiz(self)\
    \ -> Fs_hptxfsizRegister:\n        return self._fs_hptxfsiz\n\n    @fs_hptxfsiz.setter\n\
    \    def fs_hptxfsiz(self, value: int) -> None:\n        self._fs_hptxfsiz.value\
    \ = value\n\n    @property\n    def fs_dieptxf1(self) -> Fs_dieptxf1Register:\n\
    \        return self._fs_dieptxf1\n\n    @fs_dieptxf1.setter\n    def fs_dieptxf1(self,\
    \ value: int) -> None:\n        self._fs_dieptxf1.value = value\n\n    @property\n\
    \    def fs_dieptxf2(self) -> Fs_dieptxf2Register:\n        return self._fs_dieptxf2\n\
    \n    @fs_dieptxf2.setter\n    def fs_dieptxf2(self, value: int) -> None:\n  \
    \      self._fs_dieptxf2.value = value\n\n    @property\n    def fs_dieptxf3(self)\
    \ -> Fs_dieptxf3Register:\n        return self._fs_dieptxf3\n\n    @fs_dieptxf3.setter\n\
    \    def fs_dieptxf3(self, value: int) -> None:\n        self._fs_dieptxf3.value\
    \ = value\n"
  name: OTG_FS_GLOBAL
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Fs_hcfgRegister(Register):\n    \"\"\"\n    FS_HCFG\n\n\
    \    OTG_FS host configuration register\n              (OTG_FS_HCFG)\n    \"\"\
    \"\n\n    def __init__(self):\n        self._fslspcs = Field(\"fslspcs\", 0, 2)\n\
    \        self._fslss = Field(\"fslss\", 2, 1)\n        super().__init__(\"FS_HCFG\"\
    , 0x50000400 + 0x0)\n\n    @property\n    def fslspcs(self) -> Field:\n      \
    \  \"\"\"\n        FSLSPCS\n\n        FS/LS PHY clock select\n        \"\"\"\n\
    \        return self._fslspcs\n\n    @fslspcs.setter\n    def fslspcs(self, value:\
    \ int) -> None:\n        self._fslspcs.value = value\n\n    @property\n    def\
    \ fslss(self) -> Field:\n        \"\"\"\n        FSLSS\n\n        FS- and LS-only\
    \ support\n        \"\"\"\n        return self._fslss\n\n    @fslss.setter\n \
    \   def fslss(self, value: int) -> None:\n        self._fslss.value = value\n\n\
    \nclass HfirRegister(Register):\n    \"\"\"\n    HFIR\n\n    OTG_FS Host frame\
    \ interval\n              register\n    \"\"\"\n\n    def __init__(self):\n  \
    \      self._frivl = Field(\"frivl\", 0, 16)\n        super().__init__(\"HFIR\"\
    , 0x50000400 + 0x4)\n\n    @property\n    def frivl(self) -> Field:\n        \"\
    \"\"\n        FRIVL\n\n        Frame interval\n        \"\"\"\n        return\
    \ self._frivl\n\n    @frivl.setter\n    def frivl(self, value: int) -> None:\n\
    \        self._frivl.value = value\n\n\nclass Fs_hfnumRegister(Register):\n  \
    \  \"\"\"\n    FS_HFNUM\n\n    OTG_FS host frame number/frame time\n         \
    \     remaining register (OTG_FS_HFNUM)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._frnum = Field(\"frnum\", 0, 16)\n        self._ftrem = Field(\"\
    ftrem\", 16, 16)\n        super().__init__(\"FS_HFNUM\", 0x50000400 + 0x8)\n\n\
    \    @property\n    def frnum(self) -> Field:\n        \"\"\"\n        FRNUM\n\
    \n        Frame number\n        \"\"\"\n        return self._frnum\n\n    @frnum.setter\n\
    \    def frnum(self, value: int) -> None:\n        self._frnum.value = value\n\
    \n    @property\n    def ftrem(self) -> Field:\n        \"\"\"\n        FTREM\n\
    \n        Frame time remaining\n        \"\"\"\n        return self._ftrem\n\n\
    \    @ftrem.setter\n    def ftrem(self, value: int) -> None:\n        self._ftrem.value\
    \ = value\n\n\nclass Fs_hptxstsRegister(Register):\n    \"\"\"\n    FS_HPTXSTS\n\
    \n    OTG_FS_Host periodic transmit FIFO/queue\n              status register\
    \ (OTG_FS_HPTXSTS)\n    \"\"\"\n\n    def __init__(self):\n        self._ptxfsavl\
    \ = Field(\"ptxfsavl\", 0, 16)\n        self._ptxqsav = Field(\"ptxqsav\", 16,\
    \ 8)\n        self._ptxqtop = Field(\"ptxqtop\", 24, 8)\n        super().__init__(\"\
    FS_HPTXSTS\", 0x50000400 + 0x10)\n\n    @property\n    def ptxfsavl(self) -> Field:\n\
    \        \"\"\"\n        PTXFSAVL\n\n        Periodic transmit data FIFO space\n\
    \                  available\n        \"\"\"\n        return self._ptxfsavl\n\n\
    \    @ptxfsavl.setter\n    def ptxfsavl(self, value: int) -> None:\n        self._ptxfsavl.value\
    \ = value\n\n    @property\n    def ptxqsav(self) -> Field:\n        \"\"\"\n\
    \        PTXQSAV\n\n        Periodic transmit request queue space\n          \
    \        available\n        \"\"\"\n        return self._ptxqsav\n\n    @ptxqsav.setter\n\
    \    def ptxqsav(self, value: int) -> None:\n        self._ptxqsav.value = value\n\
    \n    @property\n    def ptxqtop(self) -> Field:\n        \"\"\"\n        PTXQTOP\n\
    \n        Top of the periodic transmit request\n                  queue\n    \
    \    \"\"\"\n        return self._ptxqtop\n\n    @ptxqtop.setter\n    def ptxqtop(self,\
    \ value: int) -> None:\n        self._ptxqtop.value = value\n\n\nclass HaintRegister(Register):\n\
    \    \"\"\"\n    HAINT\n\n    OTG_FS Host all channels interrupt\n           \
    \   register\n    \"\"\"\n\n    def __init__(self):\n        self._haint = Field(\"\
    haint\", 0, 16)\n        super().__init__(\"HAINT\", 0x50000400 + 0x14)\n\n  \
    \  @property\n    def haint(self) -> Field:\n        \"\"\"\n        HAINT\n\n\
    \        Channel interrupts\n        \"\"\"\n        return self._haint\n\n  \
    \  @haint.setter\n    def haint(self, value: int) -> None:\n        self._haint.value\
    \ = value\n\n\nclass HaintmskRegister(Register):\n    \"\"\"\n    HAINTMSK\n\n\
    \    OTG_FS host all channels interrupt mask\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._haintm = Field(\"haintm\", 0, 16)\n\
    \        super().__init__(\"HAINTMSK\", 0x50000400 + 0x18)\n\n    @property\n\
    \    def haintm(self) -> Field:\n        \"\"\"\n        HAINTM\n\n        Channel\
    \ interrupt mask\n        \"\"\"\n        return self._haintm\n\n    @haintm.setter\n\
    \    def haintm(self, value: int) -> None:\n        self._haintm.value = value\n\
    \n\nclass Fs_hprtRegister(Register):\n    \"\"\"\n    FS_HPRT\n\n    OTG_FS host\
    \ port control and status register\n              (OTG_FS_HPRT)\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._pcsts = Field(\"pcsts\", 0, 1)\n     \
    \   self._pcdet = Field(\"pcdet\", 1, 1)\n        self._pena = Field(\"pena\"\
    , 2, 1)\n        self._penchng = Field(\"penchng\", 3, 1)\n        self._poca\
    \ = Field(\"poca\", 4, 1)\n        self._pocchng = Field(\"pocchng\", 5, 1)\n\
    \        self._pres = Field(\"pres\", 6, 1)\n        self._psusp = Field(\"psusp\"\
    , 7, 1)\n        self._prst = Field(\"prst\", 8, 1)\n        self._plsts = Field(\"\
    plsts\", 10, 2)\n        self._ppwr = Field(\"ppwr\", 12, 1)\n        self._ptctl\
    \ = Field(\"ptctl\", 13, 4)\n        self._pspd = Field(\"pspd\", 17, 2)\n   \
    \     super().__init__(\"FS_HPRT\", 0x50000400 + 0x40)\n\n    @property\n    def\
    \ pcsts(self) -> Field:\n        \"\"\"\n        PCSTS\n\n        Port connect\
    \ status\n        \"\"\"\n        return self._pcsts\n\n    @pcsts.setter\n  \
    \  def pcsts(self, value: int) -> None:\n        self._pcsts.value = value\n\n\
    \    @property\n    def pcdet(self) -> Field:\n        \"\"\"\n        PCDET\n\
    \n        Port connect detected\n        \"\"\"\n        return self._pcdet\n\n\
    \    @pcdet.setter\n    def pcdet(self, value: int) -> None:\n        self._pcdet.value\
    \ = value\n\n    @property\n    def pena(self) -> Field:\n        \"\"\"\n   \
    \     PENA\n\n        Port enable\n        \"\"\"\n        return self._pena\n\
    \n    @pena.setter\n    def pena(self, value: int) -> None:\n        self._pena.value\
    \ = value\n\n    @property\n    def penchng(self) -> Field:\n        \"\"\"\n\
    \        PENCHNG\n\n        Port enable/disable change\n        \"\"\"\n     \
    \   return self._penchng\n\n    @penchng.setter\n    def penchng(self, value:\
    \ int) -> None:\n        self._penchng.value = value\n\n    @property\n    def\
    \ poca(self) -> Field:\n        \"\"\"\n        POCA\n\n        Port overcurrent\
    \ active\n        \"\"\"\n        return self._poca\n\n    @poca.setter\n    def\
    \ poca(self, value: int) -> None:\n        self._poca.value = value\n\n    @property\n\
    \    def pocchng(self) -> Field:\n        \"\"\"\n        POCCHNG\n\n        Port\
    \ overcurrent change\n        \"\"\"\n        return self._pocchng\n\n    @pocchng.setter\n\
    \    def pocchng(self, value: int) -> None:\n        self._pocchng.value = value\n\
    \n    @property\n    def pres(self) -> Field:\n        \"\"\"\n        PRES\n\n\
    \        Port resume\n        \"\"\"\n        return self._pres\n\n    @pres.setter\n\
    \    def pres(self, value: int) -> None:\n        self._pres.value = value\n\n\
    \    @property\n    def psusp(self) -> Field:\n        \"\"\"\n        PSUSP\n\
    \n        Port suspend\n        \"\"\"\n        return self._psusp\n\n    @psusp.setter\n\
    \    def psusp(self, value: int) -> None:\n        self._psusp.value = value\n\
    \n    @property\n    def prst(self) -> Field:\n        \"\"\"\n        PRST\n\n\
    \        Port reset\n        \"\"\"\n        return self._prst\n\n    @prst.setter\n\
    \    def prst(self, value: int) -> None:\n        self._prst.value = value\n\n\
    \    @property\n    def plsts(self) -> Field:\n        \"\"\"\n        PLSTS\n\
    \n        Port line status\n        \"\"\"\n        return self._plsts\n\n   \
    \ @plsts.setter\n    def plsts(self, value: int) -> None:\n        self._plsts.value\
    \ = value\n\n    @property\n    def ppwr(self) -> Field:\n        \"\"\"\n   \
    \     PPWR\n\n        Port power\n        \"\"\"\n        return self._ppwr\n\n\
    \    @ppwr.setter\n    def ppwr(self, value: int) -> None:\n        self._ppwr.value\
    \ = value\n\n    @property\n    def ptctl(self) -> Field:\n        \"\"\"\n  \
    \      PTCTL\n\n        Port test control\n        \"\"\"\n        return self._ptctl\n\
    \n    @ptctl.setter\n    def ptctl(self, value: int) -> None:\n        self._ptctl.value\
    \ = value\n\n    @property\n    def pspd(self) -> Field:\n        \"\"\"\n   \
    \     PSPD\n\n        Port speed\n        \"\"\"\n        return self._pspd\n\n\
    \    @pspd.setter\n    def pspd(self, value: int) -> None:\n        self._pspd.value\
    \ = value\n\n\nclass Fs_hcchar0Register(Register):\n    \"\"\"\n    FS_HCCHAR0\n\
    \n    OTG_FS host channel-0 characteristics\n              register (OTG_FS_HCCHAR0)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR0\", 0x50000400\
    \ + 0x100)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar1Register(Register):\n    \"\"\"\n    FS_HCCHAR1\n\
    \n    OTG_FS host channel-1 characteristics\n              register (OTG_FS_HCCHAR1)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR1\", 0x50000400\
    \ + 0x120)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar2Register(Register):\n    \"\"\"\n    FS_HCCHAR2\n\
    \n    OTG_FS host channel-2 characteristics\n              register (OTG_FS_HCCHAR2)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR2\", 0x50000400\
    \ + 0x140)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar3Register(Register):\n    \"\"\"\n    FS_HCCHAR3\n\
    \n    OTG_FS host channel-3 characteristics\n              register (OTG_FS_HCCHAR3)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR3\", 0x50000400\
    \ + 0x160)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar4Register(Register):\n    \"\"\"\n    FS_HCCHAR4\n\
    \n    OTG_FS host channel-4 characteristics\n              register (OTG_FS_HCCHAR4)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR4\", 0x50000400\
    \ + 0x180)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar5Register(Register):\n    \"\"\"\n    FS_HCCHAR5\n\
    \n    OTG_FS host channel-5 characteristics\n              register (OTG_FS_HCCHAR5)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR5\", 0x50000400\
    \ + 0x1A0)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar6Register(Register):\n    \"\"\"\n    FS_HCCHAR6\n\
    \n    OTG_FS host channel-6 characteristics\n              register (OTG_FS_HCCHAR6)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR6\", 0x50000400\
    \ + 0x1C0)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcchar7Register(Register):\n    \"\"\"\n    FS_HCCHAR7\n\
    \n    OTG_FS host channel-7 characteristics\n              register (OTG_FS_HCCHAR7)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mpsiz = Field(\"mpsiz\"\
    , 0, 11)\n        self._epnum = Field(\"epnum\", 11, 4)\n        self._epdir =\
    \ Field(\"epdir\", 15, 1)\n        self._lsdev = Field(\"lsdev\", 17, 1)\n   \
    \     self._eptyp = Field(\"eptyp\", 18, 2)\n        self._mcnt = Field(\"mcnt\"\
    , 20, 2)\n        self._dad = Field(\"dad\", 22, 7)\n        self._oddfrm = Field(\"\
    oddfrm\", 29, 1)\n        self._chdis = Field(\"chdis\", 30, 1)\n        self._chena\
    \ = Field(\"chena\", 31, 1)\n        super().__init__(\"FS_HCCHAR7\", 0x50000400\
    \ + 0x1E0)\n\n    @property\n    def mpsiz(self) -> Field:\n        \"\"\"\n \
    \       MPSIZ\n\n        Maximum packet size\n        \"\"\"\n        return self._mpsiz\n\
    \n    @mpsiz.setter\n    def mpsiz(self, value: int) -> None:\n        self._mpsiz.value\
    \ = value\n\n    @property\n    def epnum(self) -> Field:\n        \"\"\"\n  \
    \      EPNUM\n\n        Endpoint number\n        \"\"\"\n        return self._epnum\n\
    \n    @epnum.setter\n    def epnum(self, value: int) -> None:\n        self._epnum.value\
    \ = value\n\n    @property\n    def epdir(self) -> Field:\n        \"\"\"\n  \
    \      EPDIR\n\n        Endpoint direction\n        \"\"\"\n        return self._epdir\n\
    \n    @epdir.setter\n    def epdir(self, value: int) -> None:\n        self._epdir.value\
    \ = value\n\n    @property\n    def lsdev(self) -> Field:\n        \"\"\"\n  \
    \      LSDEV\n\n        Low-speed device\n        \"\"\"\n        return self._lsdev\n\
    \n    @lsdev.setter\n    def lsdev(self, value: int) -> None:\n        self._lsdev.value\
    \ = value\n\n    @property\n    def eptyp(self) -> Field:\n        \"\"\"\n  \
    \      EPTYP\n\n        Endpoint type\n        \"\"\"\n        return self._eptyp\n\
    \n    @eptyp.setter\n    def eptyp(self, value: int) -> None:\n        self._eptyp.value\
    \ = value\n\n    @property\n    def mcnt(self) -> Field:\n        \"\"\"\n   \
    \     MCNT\n\n        Multicount\n        \"\"\"\n        return self._mcnt\n\n\
    \    @mcnt.setter\n    def mcnt(self, value: int) -> None:\n        self._mcnt.value\
    \ = value\n\n    @property\n    def dad(self) -> Field:\n        \"\"\"\n    \
    \    DAD\n\n        Device address\n        \"\"\"\n        return self._dad\n\
    \n    @dad.setter\n    def dad(self, value: int) -> None:\n        self._dad.value\
    \ = value\n\n    @property\n    def oddfrm(self) -> Field:\n        \"\"\"\n \
    \       ODDFRM\n\n        Odd frame\n        \"\"\"\n        return self._oddfrm\n\
    \n    @oddfrm.setter\n    def oddfrm(self, value: int) -> None:\n        self._oddfrm.value\
    \ = value\n\n    @property\n    def chdis(self) -> Field:\n        \"\"\"\n  \
    \      CHDIS\n\n        Channel disable\n        \"\"\"\n        return self._chdis\n\
    \n    @chdis.setter\n    def chdis(self, value: int) -> None:\n        self._chdis.value\
    \ = value\n\n    @property\n    def chena(self) -> Field:\n        \"\"\"\n  \
    \      CHENA\n\n        Channel enable\n        \"\"\"\n        return self._chena\n\
    \n    @chena.setter\n    def chena(self, value: int) -> None:\n        self._chena.value\
    \ = value\n\n\nclass Fs_hcint0Register(Register):\n    \"\"\"\n    FS_HCINT0\n\
    \n    OTG_FS host channel-0 interrupt register\n              (OTG_FS_HCINT0)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT0\", 0x50000400 + 0x108)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint1Register(Register):\n    \"\"\"\n    FS_HCINT1\n\
    \n    OTG_FS host channel-1 interrupt register\n              (OTG_FS_HCINT1)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT1\", 0x50000400 + 0x128)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint2Register(Register):\n    \"\"\"\n    FS_HCINT2\n\
    \n    OTG_FS host channel-2 interrupt register\n              (OTG_FS_HCINT2)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT2\", 0x50000400 + 0x148)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint3Register(Register):\n    \"\"\"\n    FS_HCINT3\n\
    \n    OTG_FS host channel-3 interrupt register\n              (OTG_FS_HCINT3)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT3\", 0x50000400 + 0x168)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint4Register(Register):\n    \"\"\"\n    FS_HCINT4\n\
    \n    OTG_FS host channel-4 interrupt register\n              (OTG_FS_HCINT4)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT4\", 0x50000400 + 0x188)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint5Register(Register):\n    \"\"\"\n    FS_HCINT5\n\
    \n    OTG_FS host channel-5 interrupt register\n              (OTG_FS_HCINT5)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT5\", 0x50000400 + 0x1A8)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint6Register(Register):\n    \"\"\"\n    FS_HCINT6\n\
    \n    OTG_FS host channel-6 interrupt register\n              (OTG_FS_HCINT6)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT6\", 0x50000400 + 0x1C8)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcint7Register(Register):\n    \"\"\"\n    FS_HCINT7\n\
    \n    OTG_FS host channel-7 interrupt register\n              (OTG_FS_HCINT7)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrc = Field(\"xfrc\", 0,\
    \ 1)\n        self._chh = Field(\"chh\", 1, 1)\n        self._stall = Field(\"\
    stall\", 3, 1)\n        self._nak = Field(\"nak\", 4, 1)\n        self._ack =\
    \ Field(\"ack\", 5, 1)\n        self._txerr = Field(\"txerr\", 7, 1)\n       \
    \ self._bberr = Field(\"bberr\", 8, 1)\n        self._frmor = Field(\"frmor\"\
    , 9, 1)\n        self._dterr = Field(\"dterr\", 10, 1)\n        super().__init__(\"\
    FS_HCINT7\", 0x50000400 + 0x1E8)\n\n    @property\n    def xfrc(self) -> Field:\n\
    \        \"\"\"\n        XFRC\n\n        Transfer completed\n        \"\"\"\n\
    \        return self._xfrc\n\n    @xfrc.setter\n    def xfrc(self, value: int)\
    \ -> None:\n        self._xfrc.value = value\n\n    @property\n    def chh(self)\
    \ -> Field:\n        \"\"\"\n        CHH\n\n        Channel halted\n        \"\
    \"\"\n        return self._chh\n\n    @chh.setter\n    def chh(self, value: int)\
    \ -> None:\n        self._chh.value = value\n\n    @property\n    def stall(self)\
    \ -> Field:\n        \"\"\"\n        STALL\n\n        STALL response received\n\
    \                  interrupt\n        \"\"\"\n        return self._stall\n\n \
    \   @stall.setter\n    def stall(self, value: int) -> None:\n        self._stall.value\
    \ = value\n\n    @property\n    def nak(self) -> Field:\n        \"\"\"\n    \
    \    NAK\n\n        NAK response received\n                  interrupt\n     \
    \   \"\"\"\n        return self._nak\n\n    @nak.setter\n    def nak(self, value:\
    \ int) -> None:\n        self._nak.value = value\n\n    @property\n    def ack(self)\
    \ -> Field:\n        \"\"\"\n        ACK\n\n        ACK response received/transmitted\n\
    \                  interrupt\n        \"\"\"\n        return self._ack\n\n   \
    \ @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def txerr(self) -> Field:\n        \"\"\"\n  \
    \      TXERR\n\n        Transaction error\n        \"\"\"\n        return self._txerr\n\
    \n    @txerr.setter\n    def txerr(self, value: int) -> None:\n        self._txerr.value\
    \ = value\n\n    @property\n    def bberr(self) -> Field:\n        \"\"\"\n  \
    \      BBERR\n\n        Babble error\n        \"\"\"\n        return self._bberr\n\
    \n    @bberr.setter\n    def bberr(self, value: int) -> None:\n        self._bberr.value\
    \ = value\n\n    @property\n    def frmor(self) -> Field:\n        \"\"\"\n  \
    \      FRMOR\n\n        Frame overrun\n        \"\"\"\n        return self._frmor\n\
    \n    @frmor.setter\n    def frmor(self, value: int) -> None:\n        self._frmor.value\
    \ = value\n\n    @property\n    def dterr(self) -> Field:\n        \"\"\"\n  \
    \      DTERR\n\n        Data toggle error\n        \"\"\"\n        return self._dterr\n\
    \n    @dterr.setter\n    def dterr(self, value: int) -> None:\n        self._dterr.value\
    \ = value\n\n\nclass Fs_hcintmsk0Register(Register):\n    \"\"\"\n    FS_HCINTMSK0\n\
    \n    OTG_FS host channel-0 mask register\n              (OTG_FS_HCINTMSK0)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrcm = Field(\"xfrcm\"\
    , 0, 1)\n        self._chhm = Field(\"chhm\", 1, 1)\n        self._stallm = Field(\"\
    stallm\", 3, 1)\n        self._nakm = Field(\"nakm\", 4, 1)\n        self._ackm\
    \ = Field(\"ackm\", 5, 1)\n        self._nyet = Field(\"nyet\", 6, 1)\n      \
    \  self._txerrm = Field(\"txerrm\", 7, 1)\n        self._bberrm = Field(\"bberrm\"\
    , 8, 1)\n        self._frmorm = Field(\"frmorm\", 9, 1)\n        self._dterrm\
    \ = Field(\"dterrm\", 10, 1)\n        super().__init__(\"FS_HCINTMSK0\", 0x50000400\
    \ + 0x10C)\n\n    @property\n    def xfrcm(self) -> Field:\n        \"\"\"\n \
    \       XFRCM\n\n        Transfer completed mask\n        \"\"\"\n        return\
    \ self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value: int) -> None:\n\
    \        self._xfrcm.value = value\n\n    @property\n    def chhm(self) -> Field:\n\
    \        \"\"\"\n        CHHM\n\n        Channel halted mask\n        \"\"\"\n\
    \        return self._chhm\n\n    @chhm.setter\n    def chhm(self, value: int)\
    \ -> None:\n        self._chhm.value = value\n\n    @property\n    def stallm(self)\
    \ -> Field:\n        \"\"\"\n        STALLM\n\n        STALL response received\
    \ interrupt\n                  mask\n        \"\"\"\n        return self._stallm\n\
    \n    @stallm.setter\n    def stallm(self, value: int) -> None:\n        self._stallm.value\
    \ = value\n\n    @property\n    def nakm(self) -> Field:\n        \"\"\"\n   \
    \     NAKM\n\n        NAK response received interrupt\n                  mask\n\
    \        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n    def nakm(self,\
    \ value: int) -> None:\n        self._nakm.value = value\n\n    @property\n  \
    \  def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n        ACK response\
    \ received/transmitted\n                  interrupt mask\n        \"\"\"\n   \
    \     return self._ackm\n\n    @ackm.setter\n    def ackm(self, value: int) ->\
    \ None:\n        self._ackm.value = value\n\n    @property\n    def nyet(self)\
    \ -> Field:\n        \"\"\"\n        NYET\n\n        response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nyet\n\n    @nyet.setter\n\
    \    def nyet(self, value: int) -> None:\n        self._nyet.value = value\n\n\
    \    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n        TXERRM\n\
    \n        Transaction error mask\n        \"\"\"\n        return self._txerrm\n\
    \n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n        self._txerrm.value\
    \ = value\n\n    @property\n    def bberrm(self) -> Field:\n        \"\"\"\n \
    \       BBERRM\n\n        Babble error mask\n        \"\"\"\n        return self._bberrm\n\
    \n    @bberrm.setter\n    def bberrm(self, value: int) -> None:\n        self._bberrm.value\
    \ = value\n\n    @property\n    def frmorm(self) -> Field:\n        \"\"\"\n \
    \       FRMORM\n\n        Frame overrun mask\n        \"\"\"\n        return self._frmorm\n\
    \n    @frmorm.setter\n    def frmorm(self, value: int) -> None:\n        self._frmorm.value\
    \ = value\n\n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n \
    \       DTERRM\n\n        Data toggle error mask\n        \"\"\"\n        return\
    \ self._dterrm\n\n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n\
    \        self._dterrm.value = value\n\n\nclass Fs_hcintmsk1Register(Register):\n\
    \    \"\"\"\n    FS_HCINTMSK1\n\n    OTG_FS host channel-1 mask register\n   \
    \           (OTG_FS_HCINTMSK1)\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._xfrcm = Field(\"xfrcm\", 0, 1)\n        self._chhm = Field(\"chhm\",\
    \ 1, 1)\n        self._stallm = Field(\"stallm\", 3, 1)\n        self._nakm =\
    \ Field(\"nakm\", 4, 1)\n        self._ackm = Field(\"ackm\", 5, 1)\n        self._nyet\
    \ = Field(\"nyet\", 6, 1)\n        self._txerrm = Field(\"txerrm\", 7, 1)\n  \
    \      self._bberrm = Field(\"bberrm\", 8, 1)\n        self._frmorm = Field(\"\
    frmorm\", 9, 1)\n        self._dterrm = Field(\"dterrm\", 10, 1)\n        super().__init__(\"\
    FS_HCINTMSK1\", 0x50000400 + 0x12C)\n\n    @property\n    def xfrcm(self) -> Field:\n\
    \        \"\"\"\n        XFRCM\n\n        Transfer completed mask\n        \"\"\
    \"\n        return self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value:\
    \ int) -> None:\n        self._xfrcm.value = value\n\n    @property\n    def chhm(self)\
    \ -> Field:\n        \"\"\"\n        CHHM\n\n        Channel halted mask\n   \
    \     \"\"\"\n        return self._chhm\n\n    @chhm.setter\n    def chhm(self,\
    \ value: int) -> None:\n        self._chhm.value = value\n\n    @property\n  \
    \  def stallm(self) -> Field:\n        \"\"\"\n        STALLM\n\n        STALL\
    \ response received interrupt\n                  mask\n        \"\"\"\n      \
    \  return self._stallm\n\n    @stallm.setter\n    def stallm(self, value: int)\
    \ -> None:\n        self._stallm.value = value\n\n    @property\n    def nakm(self)\
    \ -> Field:\n        \"\"\"\n        NAKM\n\n        NAK response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n\
    \    def nakm(self, value: int) -> None:\n        self._nakm.value = value\n\n\
    \    @property\n    def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n\
    \        ACK response received/transmitted\n                  interrupt mask\n\
    \        \"\"\"\n        return self._ackm\n\n    @ackm.setter\n    def ackm(self,\
    \ value: int) -> None:\n        self._ackm.value = value\n\n    @property\n  \
    \  def nyet(self) -> Field:\n        \"\"\"\n        NYET\n\n        response\
    \ received interrupt\n                  mask\n        \"\"\"\n        return self._nyet\n\
    \n    @nyet.setter\n    def nyet(self, value: int) -> None:\n        self._nyet.value\
    \ = value\n\n    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n \
    \       TXERRM\n\n        Transaction error mask\n        \"\"\"\n        return\
    \ self._txerrm\n\n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n\
    \        self._txerrm.value = value\n\n    @property\n    def bberrm(self) ->\
    \ Field:\n        \"\"\"\n        BBERRM\n\n        Babble error mask\n      \
    \  \"\"\"\n        return self._bberrm\n\n    @bberrm.setter\n    def bberrm(self,\
    \ value: int) -> None:\n        self._bberrm.value = value\n\n    @property\n\
    \    def frmorm(self) -> Field:\n        \"\"\"\n        FRMORM\n\n        Frame\
    \ overrun mask\n        \"\"\"\n        return self._frmorm\n\n    @frmorm.setter\n\
    \    def frmorm(self, value: int) -> None:\n        self._frmorm.value = value\n\
    \n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n        DTERRM\n\
    \n        Data toggle error mask\n        \"\"\"\n        return self._dterrm\n\
    \n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n        self._dterrm.value\
    \ = value\n\n\nclass Fs_hcintmsk2Register(Register):\n    \"\"\"\n    FS_HCINTMSK2\n\
    \n    OTG_FS host channel-2 mask register\n              (OTG_FS_HCINTMSK2)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrcm = Field(\"xfrcm\"\
    , 0, 1)\n        self._chhm = Field(\"chhm\", 1, 1)\n        self._stallm = Field(\"\
    stallm\", 3, 1)\n        self._nakm = Field(\"nakm\", 4, 1)\n        self._ackm\
    \ = Field(\"ackm\", 5, 1)\n        self._nyet = Field(\"nyet\", 6, 1)\n      \
    \  self._txerrm = Field(\"txerrm\", 7, 1)\n        self._bberrm = Field(\"bberrm\"\
    , 8, 1)\n        self._frmorm = Field(\"frmorm\", 9, 1)\n        self._dterrm\
    \ = Field(\"dterrm\", 10, 1)\n        super().__init__(\"FS_HCINTMSK2\", 0x50000400\
    \ + 0x14C)\n\n    @property\n    def xfrcm(self) -> Field:\n        \"\"\"\n \
    \       XFRCM\n\n        Transfer completed mask\n        \"\"\"\n        return\
    \ self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value: int) -> None:\n\
    \        self._xfrcm.value = value\n\n    @property\n    def chhm(self) -> Field:\n\
    \        \"\"\"\n        CHHM\n\n        Channel halted mask\n        \"\"\"\n\
    \        return self._chhm\n\n    @chhm.setter\n    def chhm(self, value: int)\
    \ -> None:\n        self._chhm.value = value\n\n    @property\n    def stallm(self)\
    \ -> Field:\n        \"\"\"\n        STALLM\n\n        STALL response received\
    \ interrupt\n                  mask\n        \"\"\"\n        return self._stallm\n\
    \n    @stallm.setter\n    def stallm(self, value: int) -> None:\n        self._stallm.value\
    \ = value\n\n    @property\n    def nakm(self) -> Field:\n        \"\"\"\n   \
    \     NAKM\n\n        NAK response received interrupt\n                  mask\n\
    \        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n    def nakm(self,\
    \ value: int) -> None:\n        self._nakm.value = value\n\n    @property\n  \
    \  def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n        ACK response\
    \ received/transmitted\n                  interrupt mask\n        \"\"\"\n   \
    \     return self._ackm\n\n    @ackm.setter\n    def ackm(self, value: int) ->\
    \ None:\n        self._ackm.value = value\n\n    @property\n    def nyet(self)\
    \ -> Field:\n        \"\"\"\n        NYET\n\n        response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nyet\n\n    @nyet.setter\n\
    \    def nyet(self, value: int) -> None:\n        self._nyet.value = value\n\n\
    \    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n        TXERRM\n\
    \n        Transaction error mask\n        \"\"\"\n        return self._txerrm\n\
    \n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n        self._txerrm.value\
    \ = value\n\n    @property\n    def bberrm(self) -> Field:\n        \"\"\"\n \
    \       BBERRM\n\n        Babble error mask\n        \"\"\"\n        return self._bberrm\n\
    \n    @bberrm.setter\n    def bberrm(self, value: int) -> None:\n        self._bberrm.value\
    \ = value\n\n    @property\n    def frmorm(self) -> Field:\n        \"\"\"\n \
    \       FRMORM\n\n        Frame overrun mask\n        \"\"\"\n        return self._frmorm\n\
    \n    @frmorm.setter\n    def frmorm(self, value: int) -> None:\n        self._frmorm.value\
    \ = value\n\n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n \
    \       DTERRM\n\n        Data toggle error mask\n        \"\"\"\n        return\
    \ self._dterrm\n\n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n\
    \        self._dterrm.value = value\n\n\nclass Fs_hcintmsk3Register(Register):\n\
    \    \"\"\"\n    FS_HCINTMSK3\n\n    OTG_FS host channel-3 mask register\n   \
    \           (OTG_FS_HCINTMSK3)\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._xfrcm = Field(\"xfrcm\", 0, 1)\n        self._chhm = Field(\"chhm\",\
    \ 1, 1)\n        self._stallm = Field(\"stallm\", 3, 1)\n        self._nakm =\
    \ Field(\"nakm\", 4, 1)\n        self._ackm = Field(\"ackm\", 5, 1)\n        self._nyet\
    \ = Field(\"nyet\", 6, 1)\n        self._txerrm = Field(\"txerrm\", 7, 1)\n  \
    \      self._bberrm = Field(\"bberrm\", 8, 1)\n        self._frmorm = Field(\"\
    frmorm\", 9, 1)\n        self._dterrm = Field(\"dterrm\", 10, 1)\n        super().__init__(\"\
    FS_HCINTMSK3\", 0x50000400 + 0x16C)\n\n    @property\n    def xfrcm(self) -> Field:\n\
    \        \"\"\"\n        XFRCM\n\n        Transfer completed mask\n        \"\"\
    \"\n        return self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value:\
    \ int) -> None:\n        self._xfrcm.value = value\n\n    @property\n    def chhm(self)\
    \ -> Field:\n        \"\"\"\n        CHHM\n\n        Channel halted mask\n   \
    \     \"\"\"\n        return self._chhm\n\n    @chhm.setter\n    def chhm(self,\
    \ value: int) -> None:\n        self._chhm.value = value\n\n    @property\n  \
    \  def stallm(self) -> Field:\n        \"\"\"\n        STALLM\n\n        STALL\
    \ response received interrupt\n                  mask\n        \"\"\"\n      \
    \  return self._stallm\n\n    @stallm.setter\n    def stallm(self, value: int)\
    \ -> None:\n        self._stallm.value = value\n\n    @property\n    def nakm(self)\
    \ -> Field:\n        \"\"\"\n        NAKM\n\n        NAK response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n\
    \    def nakm(self, value: int) -> None:\n        self._nakm.value = value\n\n\
    \    @property\n    def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n\
    \        ACK response received/transmitted\n                  interrupt mask\n\
    \        \"\"\"\n        return self._ackm\n\n    @ackm.setter\n    def ackm(self,\
    \ value: int) -> None:\n        self._ackm.value = value\n\n    @property\n  \
    \  def nyet(self) -> Field:\n        \"\"\"\n        NYET\n\n        response\
    \ received interrupt\n                  mask\n        \"\"\"\n        return self._nyet\n\
    \n    @nyet.setter\n    def nyet(self, value: int) -> None:\n        self._nyet.value\
    \ = value\n\n    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n \
    \       TXERRM\n\n        Transaction error mask\n        \"\"\"\n        return\
    \ self._txerrm\n\n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n\
    \        self._txerrm.value = value\n\n    @property\n    def bberrm(self) ->\
    \ Field:\n        \"\"\"\n        BBERRM\n\n        Babble error mask\n      \
    \  \"\"\"\n        return self._bberrm\n\n    @bberrm.setter\n    def bberrm(self,\
    \ value: int) -> None:\n        self._bberrm.value = value\n\n    @property\n\
    \    def frmorm(self) -> Field:\n        \"\"\"\n        FRMORM\n\n        Frame\
    \ overrun mask\n        \"\"\"\n        return self._frmorm\n\n    @frmorm.setter\n\
    \    def frmorm(self, value: int) -> None:\n        self._frmorm.value = value\n\
    \n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n        DTERRM\n\
    \n        Data toggle error mask\n        \"\"\"\n        return self._dterrm\n\
    \n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n        self._dterrm.value\
    \ = value\n\n\nclass Fs_hcintmsk4Register(Register):\n    \"\"\"\n    FS_HCINTMSK4\n\
    \n    OTG_FS host channel-4 mask register\n              (OTG_FS_HCINTMSK4)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrcm = Field(\"xfrcm\"\
    , 0, 1)\n        self._chhm = Field(\"chhm\", 1, 1)\n        self._stallm = Field(\"\
    stallm\", 3, 1)\n        self._nakm = Field(\"nakm\", 4, 1)\n        self._ackm\
    \ = Field(\"ackm\", 5, 1)\n        self._nyet = Field(\"nyet\", 6, 1)\n      \
    \  self._txerrm = Field(\"txerrm\", 7, 1)\n        self._bberrm = Field(\"bberrm\"\
    , 8, 1)\n        self._frmorm = Field(\"frmorm\", 9, 1)\n        self._dterrm\
    \ = Field(\"dterrm\", 10, 1)\n        super().__init__(\"FS_HCINTMSK4\", 0x50000400\
    \ + 0x18C)\n\n    @property\n    def xfrcm(self) -> Field:\n        \"\"\"\n \
    \       XFRCM\n\n        Transfer completed mask\n        \"\"\"\n        return\
    \ self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value: int) -> None:\n\
    \        self._xfrcm.value = value\n\n    @property\n    def chhm(self) -> Field:\n\
    \        \"\"\"\n        CHHM\n\n        Channel halted mask\n        \"\"\"\n\
    \        return self._chhm\n\n    @chhm.setter\n    def chhm(self, value: int)\
    \ -> None:\n        self._chhm.value = value\n\n    @property\n    def stallm(self)\
    \ -> Field:\n        \"\"\"\n        STALLM\n\n        STALL response received\
    \ interrupt\n                  mask\n        \"\"\"\n        return self._stallm\n\
    \n    @stallm.setter\n    def stallm(self, value: int) -> None:\n        self._stallm.value\
    \ = value\n\n    @property\n    def nakm(self) -> Field:\n        \"\"\"\n   \
    \     NAKM\n\n        NAK response received interrupt\n                  mask\n\
    \        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n    def nakm(self,\
    \ value: int) -> None:\n        self._nakm.value = value\n\n    @property\n  \
    \  def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n        ACK response\
    \ received/transmitted\n                  interrupt mask\n        \"\"\"\n   \
    \     return self._ackm\n\n    @ackm.setter\n    def ackm(self, value: int) ->\
    \ None:\n        self._ackm.value = value\n\n    @property\n    def nyet(self)\
    \ -> Field:\n        \"\"\"\n        NYET\n\n        response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nyet\n\n    @nyet.setter\n\
    \    def nyet(self, value: int) -> None:\n        self._nyet.value = value\n\n\
    \    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n        TXERRM\n\
    \n        Transaction error mask\n        \"\"\"\n        return self._txerrm\n\
    \n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n        self._txerrm.value\
    \ = value\n\n    @property\n    def bberrm(self) -> Field:\n        \"\"\"\n \
    \       BBERRM\n\n        Babble error mask\n        \"\"\"\n        return self._bberrm\n\
    \n    @bberrm.setter\n    def bberrm(self, value: int) -> None:\n        self._bberrm.value\
    \ = value\n\n    @property\n    def frmorm(self) -> Field:\n        \"\"\"\n \
    \       FRMORM\n\n        Frame overrun mask\n        \"\"\"\n        return self._frmorm\n\
    \n    @frmorm.setter\n    def frmorm(self, value: int) -> None:\n        self._frmorm.value\
    \ = value\n\n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n \
    \       DTERRM\n\n        Data toggle error mask\n        \"\"\"\n        return\
    \ self._dterrm\n\n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n\
    \        self._dterrm.value = value\n\n\nclass Fs_hcintmsk5Register(Register):\n\
    \    \"\"\"\n    FS_HCINTMSK5\n\n    OTG_FS host channel-5 mask register\n   \
    \           (OTG_FS_HCINTMSK5)\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._xfrcm = Field(\"xfrcm\", 0, 1)\n        self._chhm = Field(\"chhm\",\
    \ 1, 1)\n        self._stallm = Field(\"stallm\", 3, 1)\n        self._nakm =\
    \ Field(\"nakm\", 4, 1)\n        self._ackm = Field(\"ackm\", 5, 1)\n        self._nyet\
    \ = Field(\"nyet\", 6, 1)\n        self._txerrm = Field(\"txerrm\", 7, 1)\n  \
    \      self._bberrm = Field(\"bberrm\", 8, 1)\n        self._frmorm = Field(\"\
    frmorm\", 9, 1)\n        self._dterrm = Field(\"dterrm\", 10, 1)\n        super().__init__(\"\
    FS_HCINTMSK5\", 0x50000400 + 0x1AC)\n\n    @property\n    def xfrcm(self) -> Field:\n\
    \        \"\"\"\n        XFRCM\n\n        Transfer completed mask\n        \"\"\
    \"\n        return self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value:\
    \ int) -> None:\n        self._xfrcm.value = value\n\n    @property\n    def chhm(self)\
    \ -> Field:\n        \"\"\"\n        CHHM\n\n        Channel halted mask\n   \
    \     \"\"\"\n        return self._chhm\n\n    @chhm.setter\n    def chhm(self,\
    \ value: int) -> None:\n        self._chhm.value = value\n\n    @property\n  \
    \  def stallm(self) -> Field:\n        \"\"\"\n        STALLM\n\n        STALL\
    \ response received interrupt\n                  mask\n        \"\"\"\n      \
    \  return self._stallm\n\n    @stallm.setter\n    def stallm(self, value: int)\
    \ -> None:\n        self._stallm.value = value\n\n    @property\n    def nakm(self)\
    \ -> Field:\n        \"\"\"\n        NAKM\n\n        NAK response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n\
    \    def nakm(self, value: int) -> None:\n        self._nakm.value = value\n\n\
    \    @property\n    def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n\
    \        ACK response received/transmitted\n                  interrupt mask\n\
    \        \"\"\"\n        return self._ackm\n\n    @ackm.setter\n    def ackm(self,\
    \ value: int) -> None:\n        self._ackm.value = value\n\n    @property\n  \
    \  def nyet(self) -> Field:\n        \"\"\"\n        NYET\n\n        response\
    \ received interrupt\n                  mask\n        \"\"\"\n        return self._nyet\n\
    \n    @nyet.setter\n    def nyet(self, value: int) -> None:\n        self._nyet.value\
    \ = value\n\n    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n \
    \       TXERRM\n\n        Transaction error mask\n        \"\"\"\n        return\
    \ self._txerrm\n\n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n\
    \        self._txerrm.value = value\n\n    @property\n    def bberrm(self) ->\
    \ Field:\n        \"\"\"\n        BBERRM\n\n        Babble error mask\n      \
    \  \"\"\"\n        return self._bberrm\n\n    @bberrm.setter\n    def bberrm(self,\
    \ value: int) -> None:\n        self._bberrm.value = value\n\n    @property\n\
    \    def frmorm(self) -> Field:\n        \"\"\"\n        FRMORM\n\n        Frame\
    \ overrun mask\n        \"\"\"\n        return self._frmorm\n\n    @frmorm.setter\n\
    \    def frmorm(self, value: int) -> None:\n        self._frmorm.value = value\n\
    \n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n        DTERRM\n\
    \n        Data toggle error mask\n        \"\"\"\n        return self._dterrm\n\
    \n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n        self._dterrm.value\
    \ = value\n\n\nclass Fs_hcintmsk6Register(Register):\n    \"\"\"\n    FS_HCINTMSK6\n\
    \n    OTG_FS host channel-6 mask register\n              (OTG_FS_HCINTMSK6)\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._xfrcm = Field(\"xfrcm\"\
    , 0, 1)\n        self._chhm = Field(\"chhm\", 1, 1)\n        self._stallm = Field(\"\
    stallm\", 3, 1)\n        self._nakm = Field(\"nakm\", 4, 1)\n        self._ackm\
    \ = Field(\"ackm\", 5, 1)\n        self._nyet = Field(\"nyet\", 6, 1)\n      \
    \  self._txerrm = Field(\"txerrm\", 7, 1)\n        self._bberrm = Field(\"bberrm\"\
    , 8, 1)\n        self._frmorm = Field(\"frmorm\", 9, 1)\n        self._dterrm\
    \ = Field(\"dterrm\", 10, 1)\n        super().__init__(\"FS_HCINTMSK6\", 0x50000400\
    \ + 0x1CC)\n\n    @property\n    def xfrcm(self) -> Field:\n        \"\"\"\n \
    \       XFRCM\n\n        Transfer completed mask\n        \"\"\"\n        return\
    \ self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value: int) -> None:\n\
    \        self._xfrcm.value = value\n\n    @property\n    def chhm(self) -> Field:\n\
    \        \"\"\"\n        CHHM\n\n        Channel halted mask\n        \"\"\"\n\
    \        return self._chhm\n\n    @chhm.setter\n    def chhm(self, value: int)\
    \ -> None:\n        self._chhm.value = value\n\n    @property\n    def stallm(self)\
    \ -> Field:\n        \"\"\"\n        STALLM\n\n        STALL response received\
    \ interrupt\n                  mask\n        \"\"\"\n        return self._stallm\n\
    \n    @stallm.setter\n    def stallm(self, value: int) -> None:\n        self._stallm.value\
    \ = value\n\n    @property\n    def nakm(self) -> Field:\n        \"\"\"\n   \
    \     NAKM\n\n        NAK response received interrupt\n                  mask\n\
    \        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n    def nakm(self,\
    \ value: int) -> None:\n        self._nakm.value = value\n\n    @property\n  \
    \  def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n        ACK response\
    \ received/transmitted\n                  interrupt mask\n        \"\"\"\n   \
    \     return self._ackm\n\n    @ackm.setter\n    def ackm(self, value: int) ->\
    \ None:\n        self._ackm.value = value\n\n    @property\n    def nyet(self)\
    \ -> Field:\n        \"\"\"\n        NYET\n\n        response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nyet\n\n    @nyet.setter\n\
    \    def nyet(self, value: int) -> None:\n        self._nyet.value = value\n\n\
    \    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n        TXERRM\n\
    \n        Transaction error mask\n        \"\"\"\n        return self._txerrm\n\
    \n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n        self._txerrm.value\
    \ = value\n\n    @property\n    def bberrm(self) -> Field:\n        \"\"\"\n \
    \       BBERRM\n\n        Babble error mask\n        \"\"\"\n        return self._bberrm\n\
    \n    @bberrm.setter\n    def bberrm(self, value: int) -> None:\n        self._bberrm.value\
    \ = value\n\n    @property\n    def frmorm(self) -> Field:\n        \"\"\"\n \
    \       FRMORM\n\n        Frame overrun mask\n        \"\"\"\n        return self._frmorm\n\
    \n    @frmorm.setter\n    def frmorm(self, value: int) -> None:\n        self._frmorm.value\
    \ = value\n\n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n \
    \       DTERRM\n\n        Data toggle error mask\n        \"\"\"\n        return\
    \ self._dterrm\n\n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n\
    \        self._dterrm.value = value\n\n\nclass Fs_hcintmsk7Register(Register):\n\
    \    \"\"\"\n    FS_HCINTMSK7\n\n    OTG_FS host channel-7 mask register\n   \
    \           (OTG_FS_HCINTMSK7)\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._xfrcm = Field(\"xfrcm\", 0, 1)\n        self._chhm = Field(\"chhm\",\
    \ 1, 1)\n        self._stallm = Field(\"stallm\", 3, 1)\n        self._nakm =\
    \ Field(\"nakm\", 4, 1)\n        self._ackm = Field(\"ackm\", 5, 1)\n        self._nyet\
    \ = Field(\"nyet\", 6, 1)\n        self._txerrm = Field(\"txerrm\", 7, 1)\n  \
    \      self._bberrm = Field(\"bberrm\", 8, 1)\n        self._frmorm = Field(\"\
    frmorm\", 9, 1)\n        self._dterrm = Field(\"dterrm\", 10, 1)\n        super().__init__(\"\
    FS_HCINTMSK7\", 0x50000400 + 0x1EC)\n\n    @property\n    def xfrcm(self) -> Field:\n\
    \        \"\"\"\n        XFRCM\n\n        Transfer completed mask\n        \"\"\
    \"\n        return self._xfrcm\n\n    @xfrcm.setter\n    def xfrcm(self, value:\
    \ int) -> None:\n        self._xfrcm.value = value\n\n    @property\n    def chhm(self)\
    \ -> Field:\n        \"\"\"\n        CHHM\n\n        Channel halted mask\n   \
    \     \"\"\"\n        return self._chhm\n\n    @chhm.setter\n    def chhm(self,\
    \ value: int) -> None:\n        self._chhm.value = value\n\n    @property\n  \
    \  def stallm(self) -> Field:\n        \"\"\"\n        STALLM\n\n        STALL\
    \ response received interrupt\n                  mask\n        \"\"\"\n      \
    \  return self._stallm\n\n    @stallm.setter\n    def stallm(self, value: int)\
    \ -> None:\n        self._stallm.value = value\n\n    @property\n    def nakm(self)\
    \ -> Field:\n        \"\"\"\n        NAKM\n\n        NAK response received interrupt\n\
    \                  mask\n        \"\"\"\n        return self._nakm\n\n    @nakm.setter\n\
    \    def nakm(self, value: int) -> None:\n        self._nakm.value = value\n\n\
    \    @property\n    def ackm(self) -> Field:\n        \"\"\"\n        ACKM\n\n\
    \        ACK response received/transmitted\n                  interrupt mask\n\
    \        \"\"\"\n        return self._ackm\n\n    @ackm.setter\n    def ackm(self,\
    \ value: int) -> None:\n        self._ackm.value = value\n\n    @property\n  \
    \  def nyet(self) -> Field:\n        \"\"\"\n        NYET\n\n        response\
    \ received interrupt\n                  mask\n        \"\"\"\n        return self._nyet\n\
    \n    @nyet.setter\n    def nyet(self, value: int) -> None:\n        self._nyet.value\
    \ = value\n\n    @property\n    def txerrm(self) -> Field:\n        \"\"\"\n \
    \       TXERRM\n\n        Transaction error mask\n        \"\"\"\n        return\
    \ self._txerrm\n\n    @txerrm.setter\n    def txerrm(self, value: int) -> None:\n\
    \        self._txerrm.value = value\n\n    @property\n    def bberrm(self) ->\
    \ Field:\n        \"\"\"\n        BBERRM\n\n        Babble error mask\n      \
    \  \"\"\"\n        return self._bberrm\n\n    @bberrm.setter\n    def bberrm(self,\
    \ value: int) -> None:\n        self._bberrm.value = value\n\n    @property\n\
    \    def frmorm(self) -> Field:\n        \"\"\"\n        FRMORM\n\n        Frame\
    \ overrun mask\n        \"\"\"\n        return self._frmorm\n\n    @frmorm.setter\n\
    \    def frmorm(self, value: int) -> None:\n        self._frmorm.value = value\n\
    \n    @property\n    def dterrm(self) -> Field:\n        \"\"\"\n        DTERRM\n\
    \n        Data toggle error mask\n        \"\"\"\n        return self._dterrm\n\
    \n    @dterrm.setter\n    def dterrm(self, value: int) -> None:\n        self._dterrm.value\
    \ = value\n\n\nclass Fs_hctsiz0Register(Register):\n    \"\"\"\n    FS_HCTSIZ0\n\
    \n    OTG_FS host channel-0 transfer size\n              register\n    \"\"\"\n\
    \n    def __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n \
    \       self._pktcnt = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"\
    dpid\", 29, 2)\n        super().__init__(\"FS_HCTSIZ0\", 0x50000400 + 0x110)\n\
    \n    @property\n    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\
    \n        Transfer size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n\
    \    def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz1Register(Register):\n    \"\"\"\n    FS_HCTSIZ1\n\n    OTG_FS\
    \ host channel-1 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ1\", 0x50000400 + 0x130)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz2Register(Register):\n    \"\"\"\n    FS_HCTSIZ2\n\n    OTG_FS\
    \ host channel-2 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ2\", 0x50000400 + 0x150)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz3Register(Register):\n    \"\"\"\n    FS_HCTSIZ3\n\n    OTG_FS\
    \ host channel-3 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ3\", 0x50000400 + 0x170)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz4Register(Register):\n    \"\"\"\n    FS_HCTSIZ4\n\n    OTG_FS\
    \ host channel-x transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ4\", 0x50000400 + 0x190)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz5Register(Register):\n    \"\"\"\n    FS_HCTSIZ5\n\n    OTG_FS\
    \ host channel-5 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ5\", 0x50000400 + 0x1B0)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz6Register(Register):\n    \"\"\"\n    FS_HCTSIZ6\n\n    OTG_FS\
    \ host channel-6 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ6\", 0x50000400 + 0x1D0)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Fs_hctsiz7Register(Register):\n    \"\"\"\n    FS_HCTSIZ7\n\n    OTG_FS\
    \ host channel-7 transfer size\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._xfrsiz = Field(\"xfrsiz\", 0, 19)\n        self._pktcnt\
    \ = Field(\"pktcnt\", 19, 10)\n        self._dpid = Field(\"dpid\", 29, 2)\n \
    \       super().__init__(\"FS_HCTSIZ7\", 0x50000400 + 0x1F0)\n\n    @property\n\
    \    def xfrsiz(self) -> Field:\n        \"\"\"\n        XFRSIZ\n\n        Transfer\
    \ size\n        \"\"\"\n        return self._xfrsiz\n\n    @xfrsiz.setter\n  \
    \  def xfrsiz(self, value: int) -> None:\n        self._xfrsiz.value = value\n\
    \n    @property\n    def pktcnt(self) -> Field:\n        \"\"\"\n        PKTCNT\n\
    \n        Packet count\n        \"\"\"\n        return self._pktcnt\n\n    @pktcnt.setter\n\
    \    def pktcnt(self, value: int) -> None:\n        self._pktcnt.value = value\n\
    \n    @property\n    def dpid(self) -> Field:\n        \"\"\"\n        DPID\n\n\
    \        Data PID\n        \"\"\"\n        return self._dpid\n\n    @dpid.setter\n\
    \    def dpid(self, value: int) -> None:\n        self._dpid.value = value\n\n\
    \nclass Otg_fs_host(Peripheral):\n    \"\"\"\n    OTG_FS_HOST\n\n    USB on the\
    \ go full speed\n    \"\"\"\n\n    def __init__(self):\n        self._fs_hcfg\
    \ = Fs_hcfgRegister()\n        self._hfir = HfirRegister()\n        self._fs_hfnum\
    \ = Fs_hfnumRegister()\n        self._fs_hptxsts = Fs_hptxstsRegister()\n    \
    \    self._haint = HaintRegister()\n        self._haintmsk = HaintmskRegister()\n\
    \        self._fs_hprt = Fs_hprtRegister()\n        self._fs_hcchar0 = Fs_hcchar0Register()\n\
    \        self._fs_hcchar1 = Fs_hcchar1Register()\n        self._fs_hcchar2 = Fs_hcchar2Register()\n\
    \        self._fs_hcchar3 = Fs_hcchar3Register()\n        self._fs_hcchar4 = Fs_hcchar4Register()\n\
    \        self._fs_hcchar5 = Fs_hcchar5Register()\n        self._fs_hcchar6 = Fs_hcchar6Register()\n\
    \        self._fs_hcchar7 = Fs_hcchar7Register()\n        self._fs_hcint0 = Fs_hcint0Register()\n\
    \        self._fs_hcint1 = Fs_hcint1Register()\n        self._fs_hcint2 = Fs_hcint2Register()\n\
    \        self._fs_hcint3 = Fs_hcint3Register()\n        self._fs_hcint4 = Fs_hcint4Register()\n\
    \        self._fs_hcint5 = Fs_hcint5Register()\n        self._fs_hcint6 = Fs_hcint6Register()\n\
    \        self._fs_hcint7 = Fs_hcint7Register()\n        self._fs_hcintmsk0 = Fs_hcintmsk0Register()\n\
    \        self._fs_hcintmsk1 = Fs_hcintmsk1Register()\n        self._fs_hcintmsk2\
    \ = Fs_hcintmsk2Register()\n        self._fs_hcintmsk3 = Fs_hcintmsk3Register()\n\
    \        self._fs_hcintmsk4 = Fs_hcintmsk4Register()\n        self._fs_hcintmsk5\
    \ = Fs_hcintmsk5Register()\n        self._fs_hcintmsk6 = Fs_hcintmsk6Register()\n\
    \        self._fs_hcintmsk7 = Fs_hcintmsk7Register()\n        self._fs_hctsiz0\
    \ = Fs_hctsiz0Register()\n        self._fs_hctsiz1 = Fs_hctsiz1Register()\n  \
    \      self._fs_hctsiz2 = Fs_hctsiz2Register()\n        self._fs_hctsiz3 = Fs_hctsiz3Register()\n\
    \        self._fs_hctsiz4 = Fs_hctsiz4Register()\n        self._fs_hctsiz5 = Fs_hctsiz5Register()\n\
    \        self._fs_hctsiz6 = Fs_hctsiz6Register()\n        self._fs_hctsiz7 = Fs_hctsiz7Register()\n\
    \        super().__init__(\"otg_fs_host\", 0x50000400)\n\n    @property\n    def\
    \ fs_hcfg(self) -> Fs_hcfgRegister:\n        return self._fs_hcfg\n\n    @fs_hcfg.setter\n\
    \    def fs_hcfg(self, value: int) -> None:\n        self._fs_hcfg.value = value\n\
    \n    @property\n    def hfir(self) -> HfirRegister:\n        return self._hfir\n\
    \n    @hfir.setter\n    def hfir(self, value: int) -> None:\n        self._hfir.value\
    \ = value\n\n    @property\n    def fs_hfnum(self) -> Fs_hfnumRegister:\n    \
    \    return self._fs_hfnum\n\n    @fs_hfnum.setter\n    def fs_hfnum(self, value:\
    \ int) -> None:\n        self._fs_hfnum.value = value\n\n    @property\n    def\
    \ fs_hptxsts(self) -> Fs_hptxstsRegister:\n        return self._fs_hptxsts\n\n\
    \    @fs_hptxsts.setter\n    def fs_hptxsts(self, value: int) -> None:\n     \
    \   self._fs_hptxsts.value = value\n\n    @property\n    def haint(self) -> HaintRegister:\n\
    \        return self._haint\n\n    @haint.setter\n    def haint(self, value: int)\
    \ -> None:\n        self._haint.value = value\n\n    @property\n    def haintmsk(self)\
    \ -> HaintmskRegister:\n        return self._haintmsk\n\n    @haintmsk.setter\n\
    \    def haintmsk(self, value: int) -> None:\n        self._haintmsk.value = value\n\
    \n    @property\n    def fs_hprt(self) -> Fs_hprtRegister:\n        return self._fs_hprt\n\
    \n    @fs_hprt.setter\n    def fs_hprt(self, value: int) -> None:\n        self._fs_hprt.value\
    \ = value\n\n    @property\n    def fs_hcchar0(self) -> Fs_hcchar0Register:\n\
    \        return self._fs_hcchar0\n\n    @fs_hcchar0.setter\n    def fs_hcchar0(self,\
    \ value: int) -> None:\n        self._fs_hcchar0.value = value\n\n    @property\n\
    \    def fs_hcchar1(self) -> Fs_hcchar1Register:\n        return self._fs_hcchar1\n\
    \n    @fs_hcchar1.setter\n    def fs_hcchar1(self, value: int) -> None:\n    \
    \    self._fs_hcchar1.value = value\n\n    @property\n    def fs_hcchar2(self)\
    \ -> Fs_hcchar2Register:\n        return self._fs_hcchar2\n\n    @fs_hcchar2.setter\n\
    \    def fs_hcchar2(self, value: int) -> None:\n        self._fs_hcchar2.value\
    \ = value\n\n    @property\n    def fs_hcchar3(self) -> Fs_hcchar3Register:\n\
    \        return self._fs_hcchar3\n\n    @fs_hcchar3.setter\n    def fs_hcchar3(self,\
    \ value: int) -> None:\n        self._fs_hcchar3.value = value\n\n    @property\n\
    \    def fs_hcchar4(self) -> Fs_hcchar4Register:\n        return self._fs_hcchar4\n\
    \n    @fs_hcchar4.setter\n    def fs_hcchar4(self, value: int) -> None:\n    \
    \    self._fs_hcchar4.value = value\n\n    @property\n    def fs_hcchar5(self)\
    \ -> Fs_hcchar5Register:\n        return self._fs_hcchar5\n\n    @fs_hcchar5.setter\n\
    \    def fs_hcchar5(self, value: int) -> None:\n        self._fs_hcchar5.value\
    \ = value\n\n    @property\n    def fs_hcchar6(self) -> Fs_hcchar6Register:\n\
    \        return self._fs_hcchar6\n\n    @fs_hcchar6.setter\n    def fs_hcchar6(self,\
    \ value: int) -> None:\n        self._fs_hcchar6.value = value\n\n    @property\n\
    \    def fs_hcchar7(self) -> Fs_hcchar7Register:\n        return self._fs_hcchar7\n\
    \n    @fs_hcchar7.setter\n    def fs_hcchar7(self, value: int) -> None:\n    \
    \    self._fs_hcchar7.value = value\n\n    @property\n    def fs_hcint0(self)\
    \ -> Fs_hcint0Register:\n        return self._fs_hcint0\n\n    @fs_hcint0.setter\n\
    \    def fs_hcint0(self, value: int) -> None:\n        self._fs_hcint0.value =\
    \ value\n\n    @property\n    def fs_hcint1(self) -> Fs_hcint1Register:\n    \
    \    return self._fs_hcint1\n\n    @fs_hcint1.setter\n    def fs_hcint1(self,\
    \ value: int) -> None:\n        self._fs_hcint1.value = value\n\n    @property\n\
    \    def fs_hcint2(self) -> Fs_hcint2Register:\n        return self._fs_hcint2\n\
    \n    @fs_hcint2.setter\n    def fs_hcint2(self, value: int) -> None:\n      \
    \  self._fs_hcint2.value = value\n\n    @property\n    def fs_hcint3(self) ->\
    \ Fs_hcint3Register:\n        return self._fs_hcint3\n\n    @fs_hcint3.setter\n\
    \    def fs_hcint3(self, value: int) -> None:\n        self._fs_hcint3.value =\
    \ value\n\n    @property\n    def fs_hcint4(self) -> Fs_hcint4Register:\n    \
    \    return self._fs_hcint4\n\n    @fs_hcint4.setter\n    def fs_hcint4(self,\
    \ value: int) -> None:\n        self._fs_hcint4.value = value\n\n    @property\n\
    \    def fs_hcint5(self) -> Fs_hcint5Register:\n        return self._fs_hcint5\n\
    \n    @fs_hcint5.setter\n    def fs_hcint5(self, value: int) -> None:\n      \
    \  self._fs_hcint5.value = value\n\n    @property\n    def fs_hcint6(self) ->\
    \ Fs_hcint6Register:\n        return self._fs_hcint6\n\n    @fs_hcint6.setter\n\
    \    def fs_hcint6(self, value: int) -> None:\n        self._fs_hcint6.value =\
    \ value\n\n    @property\n    def fs_hcint7(self) -> Fs_hcint7Register:\n    \
    \    return self._fs_hcint7\n\n    @fs_hcint7.setter\n    def fs_hcint7(self,\
    \ value: int) -> None:\n        self._fs_hcint7.value = value\n\n    @property\n\
    \    def fs_hcintmsk0(self) -> Fs_hcintmsk0Register:\n        return self._fs_hcintmsk0\n\
    \n    @fs_hcintmsk0.setter\n    def fs_hcintmsk0(self, value: int) -> None:\n\
    \        self._fs_hcintmsk0.value = value\n\n    @property\n    def fs_hcintmsk1(self)\
    \ -> Fs_hcintmsk1Register:\n        return self._fs_hcintmsk1\n\n    @fs_hcintmsk1.setter\n\
    \    def fs_hcintmsk1(self, value: int) -> None:\n        self._fs_hcintmsk1.value\
    \ = value\n\n    @property\n    def fs_hcintmsk2(self) -> Fs_hcintmsk2Register:\n\
    \        return self._fs_hcintmsk2\n\n    @fs_hcintmsk2.setter\n    def fs_hcintmsk2(self,\
    \ value: int) -> None:\n        self._fs_hcintmsk2.value = value\n\n    @property\n\
    \    def fs_hcintmsk3(self) -> Fs_hcintmsk3Register:\n        return self._fs_hcintmsk3\n\
    \n    @fs_hcintmsk3.setter\n    def fs_hcintmsk3(self, value: int) -> None:\n\
    \        self._fs_hcintmsk3.value = value\n\n    @property\n    def fs_hcintmsk4(self)\
    \ -> Fs_hcintmsk4Register:\n        return self._fs_hcintmsk4\n\n    @fs_hcintmsk4.setter\n\
    \    def fs_hcintmsk4(self, value: int) -> None:\n        self._fs_hcintmsk4.value\
    \ = value\n\n    @property\n    def fs_hcintmsk5(self) -> Fs_hcintmsk5Register:\n\
    \        return self._fs_hcintmsk5\n\n    @fs_hcintmsk5.setter\n    def fs_hcintmsk5(self,\
    \ value: int) -> None:\n        self._fs_hcintmsk5.value = value\n\n    @property\n\
    \    def fs_hcintmsk6(self) -> Fs_hcintmsk6Register:\n        return self._fs_hcintmsk6\n\
    \n    @fs_hcintmsk6.setter\n    def fs_hcintmsk6(self, value: int) -> None:\n\
    \        self._fs_hcintmsk6.value = value\n\n    @property\n    def fs_hcintmsk7(self)\
    \ -> Fs_hcintmsk7Register:\n        return self._fs_hcintmsk7\n\n    @fs_hcintmsk7.setter\n\
    \    def fs_hcintmsk7(self, value: int) -> None:\n        self._fs_hcintmsk7.value\
    \ = value\n\n    @property\n    def fs_hctsiz0(self) -> Fs_hctsiz0Register:\n\
    \        return self._fs_hctsiz0\n\n    @fs_hctsiz0.setter\n    def fs_hctsiz0(self,\
    \ value: int) -> None:\n        self._fs_hctsiz0.value = value\n\n    @property\n\
    \    def fs_hctsiz1(self) -> Fs_hctsiz1Register:\n        return self._fs_hctsiz1\n\
    \n    @fs_hctsiz1.setter\n    def fs_hctsiz1(self, value: int) -> None:\n    \
    \    self._fs_hctsiz1.value = value\n\n    @property\n    def fs_hctsiz2(self)\
    \ -> Fs_hctsiz2Register:\n        return self._fs_hctsiz2\n\n    @fs_hctsiz2.setter\n\
    \    def fs_hctsiz2(self, value: int) -> None:\n        self._fs_hctsiz2.value\
    \ = value\n\n    @property\n    def fs_hctsiz3(self) -> Fs_hctsiz3Register:\n\
    \        return self._fs_hctsiz3\n\n    @fs_hctsiz3.setter\n    def fs_hctsiz3(self,\
    \ value: int) -> None:\n        self._fs_hctsiz3.value = value\n\n    @property\n\
    \    def fs_hctsiz4(self) -> Fs_hctsiz4Register:\n        return self._fs_hctsiz4\n\
    \n    @fs_hctsiz4.setter\n    def fs_hctsiz4(self, value: int) -> None:\n    \
    \    self._fs_hctsiz4.value = value\n\n    @property\n    def fs_hctsiz5(self)\
    \ -> Fs_hctsiz5Register:\n        return self._fs_hctsiz5\n\n    @fs_hctsiz5.setter\n\
    \    def fs_hctsiz5(self, value: int) -> None:\n        self._fs_hctsiz5.value\
    \ = value\n\n    @property\n    def fs_hctsiz6(self) -> Fs_hctsiz6Register:\n\
    \        return self._fs_hctsiz6\n\n    @fs_hctsiz6.setter\n    def fs_hctsiz6(self,\
    \ value: int) -> None:\n        self._fs_hctsiz6.value = value\n\n    @property\n\
    \    def fs_hctsiz7(self) -> Fs_hctsiz7Register:\n        return self._fs_hctsiz7\n\
    \n    @fs_hctsiz7.setter\n    def fs_hctsiz7(self, value: int) -> None:\n    \
    \    self._fs_hctsiz7.value = value\n"
  name: OTG_FS_HOST
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Fs_pcgcctlRegister(Register):\n    \"\"\"\n    FS_PCGCCTL\n\
    \n    OTG_FS power and clock gating control\n              register\n    \"\"\"\
    \n\n    def __init__(self):\n        self._stppclk = Field(\"stppclk\", 0, 1)\n\
    \        self._gatehclk = Field(\"gatehclk\", 1, 1)\n        self._physusp = Field(\"\
    physusp\", 4, 1)\n        super().__init__(\"FS_PCGCCTL\", 0x50000E00 + 0x0)\n\
    \n    @property\n    def stppclk(self) -> Field:\n        \"\"\"\n        STPPCLK\n\
    \n        Stop PHY clock\n        \"\"\"\n        return self._stppclk\n\n   \
    \ @stppclk.setter\n    def stppclk(self, value: int) -> None:\n        self._stppclk.value\
    \ = value\n\n    @property\n    def gatehclk(self) -> Field:\n        \"\"\"\n\
    \        GATEHCLK\n\n        Gate HCLK\n        \"\"\"\n        return self._gatehclk\n\
    \n    @gatehclk.setter\n    def gatehclk(self, value: int) -> None:\n        self._gatehclk.value\
    \ = value\n\n    @property\n    def physusp(self) -> Field:\n        \"\"\"\n\
    \        PHYSUSP\n\n        PHY Suspended\n        \"\"\"\n        return self._physusp\n\
    \n    @physusp.setter\n    def physusp(self, value: int) -> None:\n        self._physusp.value\
    \ = value\n\n\nclass Otg_fs_pwrclk(Peripheral):\n    \"\"\"\n    OTG_FS_PWRCLK\n\
    \n    USB on the go full speed\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._fs_pcgcctl = Fs_pcgcctlRegister()\n        super().__init__(\"otg_fs_pwrclk\"\
    , 0x50000E00)\n\n    @property\n    def fs_pcgcctl(self) -> Fs_pcgcctlRegister:\n\
    \        return self._fs_pcgcctl\n\n    @fs_pcgcctl.setter\n    def fs_pcgcctl(self,\
    \ value: int) -> None:\n        self._fs_pcgcctl.value = value\n"
  name: OTG_FS_PWRCLK
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CrRegister(Register):\n    \"\"\"\n    CR\n\n    power control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._vos = Field(\"\
    vos\", 14, 2)\n        self._adcdc1 = Field(\"adcdc1\", 13, 1)\n        self._fpds\
    \ = Field(\"fpds\", 9, 1)\n        self._dbp = Field(\"dbp\", 8, 1)\n        self._pls\
    \ = Field(\"pls\", 5, 3)\n        self._pvde = Field(\"pvde\", 4, 1)\n       \
    \ self._csbf = Field(\"csbf\", 3, 1)\n        self._cwuf = Field(\"cwuf\", 2,\
    \ 1)\n        self._pdds = Field(\"pdds\", 1, 1)\n        self._lpds = Field(\"\
    lpds\", 0, 1)\n        super().__init__(\"CR\", 0x40007000 + 0x0)\n\n    @property\n\
    \    def vos(self) -> Field:\n        \"\"\"\n        VOS\n\n        Regulator\
    \ voltage scaling output\n                  selection\n        \"\"\"\n      \
    \  return self._vos\n\n    @vos.setter\n    def vos(self, value: int) -> None:\n\
    \        self._vos.value = value\n\n    @property\n    def adcdc1(self) -> Field:\n\
    \        \"\"\"\n        ADCDC1\n\n        ADCDC1\n        \"\"\"\n        return\
    \ self._adcdc1\n\n    @adcdc1.setter\n    def adcdc1(self, value: int) -> None:\n\
    \        self._adcdc1.value = value\n\n    @property\n    def fpds(self) -> Field:\n\
    \        \"\"\"\n        FPDS\n\n        Flash power down in Stop\n          \
    \        mode\n        \"\"\"\n        return self._fpds\n\n    @fpds.setter\n\
    \    def fpds(self, value: int) -> None:\n        self._fpds.value = value\n\n\
    \    @property\n    def dbp(self) -> Field:\n        \"\"\"\n        DBP\n\n \
    \       Disable backup domain write\n                  protection\n        \"\"\
    \"\n        return self._dbp\n\n    @dbp.setter\n    def dbp(self, value: int)\
    \ -> None:\n        self._dbp.value = value\n\n    @property\n    def pls(self)\
    \ -> Field:\n        \"\"\"\n        PLS\n\n        PVD level selection\n    \
    \    \"\"\"\n        return self._pls\n\n    @pls.setter\n    def pls(self, value:\
    \ int) -> None:\n        self._pls.value = value\n\n    @property\n    def pvde(self)\
    \ -> Field:\n        \"\"\"\n        PVDE\n\n        Power voltage detector\n\
    \                  enable\n        \"\"\"\n        return self._pvde\n\n    @pvde.setter\n\
    \    def pvde(self, value: int) -> None:\n        self._pvde.value = value\n\n\
    \    @property\n    def csbf(self) -> Field:\n        \"\"\"\n        CSBF\n\n\
    \        Clear standby flag\n        \"\"\"\n        return self._csbf\n\n   \
    \ @csbf.setter\n    def csbf(self, value: int) -> None:\n        self._csbf.value\
    \ = value\n\n    @property\n    def cwuf(self) -> Field:\n        \"\"\"\n   \
    \     CWUF\n\n        Clear wakeup flag\n        \"\"\"\n        return self._cwuf\n\
    \n    @cwuf.setter\n    def cwuf(self, value: int) -> None:\n        self._cwuf.value\
    \ = value\n\n    @property\n    def pdds(self) -> Field:\n        \"\"\"\n   \
    \     PDDS\n\n        Power down deepsleep\n        \"\"\"\n        return self._pdds\n\
    \n    @pdds.setter\n    def pdds(self, value: int) -> None:\n        self._pdds.value\
    \ = value\n\n    @property\n    def lpds(self) -> Field:\n        \"\"\"\n   \
    \     LPDS\n\n        Low-power deep sleep\n        \"\"\"\n        return self._lpds\n\
    \n    @lpds.setter\n    def lpds(self, value: int) -> None:\n        self._lpds.value\
    \ = value\n\n\nclass CsrRegister(Register):\n    \"\"\"\n    CSR\n\n    power\
    \ control/status register\n    \"\"\"\n\n    def __init__(self):\n        self._wuf\
    \ = Field(\"wuf\", 0, 1)\n        self._sbf = Field(\"sbf\", 1, 1)\n        self._pvdo\
    \ = Field(\"pvdo\", 2, 1)\n        self._brr = Field(\"brr\", 3, 1)\n        self._ewup\
    \ = Field(\"ewup\", 8, 1)\n        self._bre = Field(\"bre\", 9, 1)\n        self._vosrdy\
    \ = Field(\"vosrdy\", 14, 1)\n        super().__init__(\"CSR\", 0x40007000 + 0x4)\n\
    \n    @property\n    def wuf(self) -> Field:\n        \"\"\"\n        WUF\n\n\
    \        Wakeup flag\n        \"\"\"\n        return self._wuf\n\n    @wuf.setter\n\
    \    def wuf(self, value: int) -> None:\n        self._wuf.value = value\n\n \
    \   @property\n    def sbf(self) -> Field:\n        \"\"\"\n        SBF\n\n  \
    \      Standby flag\n        \"\"\"\n        return self._sbf\n\n    @sbf.setter\n\
    \    def sbf(self, value: int) -> None:\n        self._sbf.value = value\n\n \
    \   @property\n    def pvdo(self) -> Field:\n        \"\"\"\n        PVDO\n\n\
    \        PVD output\n        \"\"\"\n        return self._pvdo\n\n    @pvdo.setter\n\
    \    def pvdo(self, value: int) -> None:\n        self._pvdo.value = value\n\n\
    \    @property\n    def brr(self) -> Field:\n        \"\"\"\n        BRR\n\n \
    \       Backup regulator ready\n        \"\"\"\n        return self._brr\n\n \
    \   @brr.setter\n    def brr(self, value: int) -> None:\n        self._brr.value\
    \ = value\n\n    @property\n    def ewup(self) -> Field:\n        \"\"\"\n   \
    \     EWUP\n\n        Enable WKUP pin\n        \"\"\"\n        return self._ewup\n\
    \n    @ewup.setter\n    def ewup(self, value: int) -> None:\n        self._ewup.value\
    \ = value\n\n    @property\n    def bre(self) -> Field:\n        \"\"\"\n    \
    \    BRE\n\n        Backup regulator enable\n        \"\"\"\n        return self._bre\n\
    \n    @bre.setter\n    def bre(self, value: int) -> None:\n        self._bre.value\
    \ = value\n\n    @property\n    def vosrdy(self) -> Field:\n        \"\"\"\n \
    \       VOSRDY\n\n        Regulator voltage scaling output\n                 \
    \ selection ready bit\n        \"\"\"\n        return self._vosrdy\n\n    @vosrdy.setter\n\
    \    def vosrdy(self, value: int) -> None:\n        self._vosrdy.value = value\n\
    \n\nclass Pwr(Peripheral):\n    \"\"\"\n    PWR\n\n    Power control\n    \"\"\
    \"\n\n    def __init__(self):\n        self._cr = CrRegister()\n        self._csr\
    \ = CsrRegister()\n        super().__init__(\"pwr\", 0x40007000)\n\n    @property\n\
    \    def cr(self) -> CrRegister:\n        return self._cr\n\n    @cr.setter\n\
    \    def cr(self, value: int) -> None:\n        self._cr.value = value\n\n   \
    \ @property\n    def csr(self) -> CsrRegister:\n        return self._csr\n\n \
    \   @csr.setter\n    def csr(self, value: int) -> None:\n        self._csr.value\
    \ = value\n"
  name: PWR
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CrRegister(Register):\n    \"\"\"\n    CR\n\n    clock control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._plli2srdy = Field(\"\
    plli2srdy\", 27, 1)\n        self._plli2son = Field(\"plli2son\", 26, 1)\n   \
    \     self._pllrdy = Field(\"pllrdy\", 25, 1)\n        self._pllon = Field(\"\
    pllon\", 24, 1)\n        self._csson = Field(\"csson\", 19, 1)\n        self._hsebyp\
    \ = Field(\"hsebyp\", 18, 1)\n        self._hserdy = Field(\"hserdy\", 17, 1)\n\
    \        self._hseon = Field(\"hseon\", 16, 1)\n        self._hsical = Field(\"\
    hsical\", 8, 8)\n        self._hsitrim = Field(\"hsitrim\", 3, 5)\n        self._hsirdy\
    \ = Field(\"hsirdy\", 1, 1)\n        self._hsion = Field(\"hsion\", 0, 1)\n  \
    \      super().__init__(\"CR\", 0x40023800 + 0x0)\n\n    @property\n    def plli2srdy(self)\
    \ -> Field:\n        \"\"\"\n        PLLI2SRDY\n\n        PLLI2S clock ready flag\n\
    \        \"\"\"\n        return self._plli2srdy\n\n    @plli2srdy.setter\n   \
    \ def plli2srdy(self, value: int) -> None:\n        self._plli2srdy.value = value\n\
    \n    @property\n    def plli2son(self) -> Field:\n        \"\"\"\n        PLLI2SON\n\
    \n        PLLI2S enable\n        \"\"\"\n        return self._plli2son\n\n   \
    \ @plli2son.setter\n    def plli2son(self, value: int) -> None:\n        self._plli2son.value\
    \ = value\n\n    @property\n    def pllrdy(self) -> Field:\n        \"\"\"\n \
    \       PLLRDY\n\n        Main PLL (PLL) clock ready\n                  flag\n\
    \        \"\"\"\n        return self._pllrdy\n\n    @pllrdy.setter\n    def pllrdy(self,\
    \ value: int) -> None:\n        self._pllrdy.value = value\n\n    @property\n\
    \    def pllon(self) -> Field:\n        \"\"\"\n        PLLON\n\n        Main\
    \ PLL (PLL) enable\n        \"\"\"\n        return self._pllon\n\n    @pllon.setter\n\
    \    def pllon(self, value: int) -> None:\n        self._pllon.value = value\n\
    \n    @property\n    def csson(self) -> Field:\n        \"\"\"\n        CSSON\n\
    \n        Clock security system\n                  enable\n        \"\"\"\n  \
    \      return self._csson\n\n    @csson.setter\n    def csson(self, value: int)\
    \ -> None:\n        self._csson.value = value\n\n    @property\n    def hsebyp(self)\
    \ -> Field:\n        \"\"\"\n        HSEBYP\n\n        HSE clock bypass\n    \
    \    \"\"\"\n        return self._hsebyp\n\n    @hsebyp.setter\n    def hsebyp(self,\
    \ value: int) -> None:\n        self._hsebyp.value = value\n\n    @property\n\
    \    def hserdy(self) -> Field:\n        \"\"\"\n        HSERDY\n\n        HSE\
    \ clock ready flag\n        \"\"\"\n        return self._hserdy\n\n    @hserdy.setter\n\
    \    def hserdy(self, value: int) -> None:\n        self._hserdy.value = value\n\
    \n    @property\n    def hseon(self) -> Field:\n        \"\"\"\n        HSEON\n\
    \n        HSE clock enable\n        \"\"\"\n        return self._hseon\n\n   \
    \ @hseon.setter\n    def hseon(self, value: int) -> None:\n        self._hseon.value\
    \ = value\n\n    @property\n    def hsical(self) -> Field:\n        \"\"\"\n \
    \       HSICAL\n\n        Internal high-speed clock\n                  calibration\n\
    \        \"\"\"\n        return self._hsical\n\n    @hsical.setter\n    def hsical(self,\
    \ value: int) -> None:\n        self._hsical.value = value\n\n    @property\n\
    \    def hsitrim(self) -> Field:\n        \"\"\"\n        HSITRIM\n\n        Internal\
    \ high-speed clock\n                  trimming\n        \"\"\"\n        return\
    \ self._hsitrim\n\n    @hsitrim.setter\n    def hsitrim(self, value: int) -> None:\n\
    \        self._hsitrim.value = value\n\n    @property\n    def hsirdy(self) ->\
    \ Field:\n        \"\"\"\n        HSIRDY\n\n        Internal high-speed clock\
    \ ready\n                  flag\n        \"\"\"\n        return self._hsirdy\n\
    \n    @hsirdy.setter\n    def hsirdy(self, value: int) -> None:\n        self._hsirdy.value\
    \ = value\n\n    @property\n    def hsion(self) -> Field:\n        \"\"\"\n  \
    \      HSION\n\n        Internal high-speed clock\n                  enable\n\
    \        \"\"\"\n        return self._hsion\n\n    @hsion.setter\n    def hsion(self,\
    \ value: int) -> None:\n        self._hsion.value = value\n\n\nclass PllcfgrRegister(Register):\n\
    \    \"\"\"\n    PLLCFGR\n\n    PLL configuration register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._pllq3 = Field(\"pllq3\", 27, 1)\n       \
    \ self._pllq2 = Field(\"pllq2\", 26, 1)\n        self._pllq1 = Field(\"pllq1\"\
    , 25, 1)\n        self._pllq0 = Field(\"pllq0\", 24, 1)\n        self._pllsrc\
    \ = Field(\"pllsrc\", 22, 1)\n        self._pllp1 = Field(\"pllp1\", 17, 1)\n\
    \        self._pllp0 = Field(\"pllp0\", 16, 1)\n        self._plln8 = Field(\"\
    plln8\", 14, 1)\n        self._plln7 = Field(\"plln7\", 13, 1)\n        self._plln6\
    \ = Field(\"plln6\", 12, 1)\n        self._plln5 = Field(\"plln5\", 11, 1)\n \
    \       self._plln4 = Field(\"plln4\", 10, 1)\n        self._plln3 = Field(\"\
    plln3\", 9, 1)\n        self._plln2 = Field(\"plln2\", 8, 1)\n        self._plln1\
    \ = Field(\"plln1\", 7, 1)\n        self._plln0 = Field(\"plln0\", 6, 1)\n   \
    \     self._pllm5 = Field(\"pllm5\", 5, 1)\n        self._pllm4 = Field(\"pllm4\"\
    , 4, 1)\n        self._pllm3 = Field(\"pllm3\", 3, 1)\n        self._pllm2 = Field(\"\
    pllm2\", 2, 1)\n        self._pllm1 = Field(\"pllm1\", 1, 1)\n        self._pllm0\
    \ = Field(\"pllm0\", 0, 1)\n        super().__init__(\"PLLCFGR\", 0x40023800 +\
    \ 0x4)\n\n    @property\n    def pllq3(self) -> Field:\n        \"\"\"\n     \
    \   PLLQ3\n\n        Main PLL (PLL) division factor for USB\n                \
    \  OTG FS, SDIO and random number generator\n                  clocks\n      \
    \  \"\"\"\n        return self._pllq3\n\n    @pllq3.setter\n    def pllq3(self,\
    \ value: int) -> None:\n        self._pllq3.value = value\n\n    @property\n \
    \   def pllq2(self) -> Field:\n        \"\"\"\n        PLLQ2\n\n        Main PLL\
    \ (PLL) division factor for USB\n                  OTG FS, SDIO and random number\
    \ generator\n                  clocks\n        \"\"\"\n        return self._pllq2\n\
    \n    @pllq2.setter\n    def pllq2(self, value: int) -> None:\n        self._pllq2.value\
    \ = value\n\n    @property\n    def pllq1(self) -> Field:\n        \"\"\"\n  \
    \      PLLQ1\n\n        Main PLL (PLL) division factor for USB\n             \
    \     OTG FS, SDIO and random number generator\n                  clocks\n   \
    \     \"\"\"\n        return self._pllq1\n\n    @pllq1.setter\n    def pllq1(self,\
    \ value: int) -> None:\n        self._pllq1.value = value\n\n    @property\n \
    \   def pllq0(self) -> Field:\n        \"\"\"\n        PLLQ0\n\n        Main PLL\
    \ (PLL) division factor for USB\n                  OTG FS, SDIO and random number\
    \ generator\n                  clocks\n        \"\"\"\n        return self._pllq0\n\
    \n    @pllq0.setter\n    def pllq0(self, value: int) -> None:\n        self._pllq0.value\
    \ = value\n\n    @property\n    def pllsrc(self) -> Field:\n        \"\"\"\n \
    \       PLLSRC\n\n        Main PLL(PLL) and audio PLL (PLLI2S)\n             \
    \     entry clock source\n        \"\"\"\n        return self._pllsrc\n\n    @pllsrc.setter\n\
    \    def pllsrc(self, value: int) -> None:\n        self._pllsrc.value = value\n\
    \n    @property\n    def pllp1(self) -> Field:\n        \"\"\"\n        PLLP1\n\
    \n        Main PLL (PLL) division factor for main\n                  system clock\n\
    \        \"\"\"\n        return self._pllp1\n\n    @pllp1.setter\n    def pllp1(self,\
    \ value: int) -> None:\n        self._pllp1.value = value\n\n    @property\n \
    \   def pllp0(self) -> Field:\n        \"\"\"\n        PLLP0\n\n        Main PLL\
    \ (PLL) division factor for main\n                  system clock\n        \"\"\
    \"\n        return self._pllp0\n\n    @pllp0.setter\n    def pllp0(self, value:\
    \ int) -> None:\n        self._pllp0.value = value\n\n    @property\n    def plln8(self)\
    \ -> Field:\n        \"\"\"\n        PLLN8\n\n        Main PLL (PLL) multiplication\
    \ factor for\n                  VCO\n        \"\"\"\n        return self._plln8\n\
    \n    @plln8.setter\n    def plln8(self, value: int) -> None:\n        self._plln8.value\
    \ = value\n\n    @property\n    def plln7(self) -> Field:\n        \"\"\"\n  \
    \      PLLN7\n\n        Main PLL (PLL) multiplication factor for\n           \
    \       VCO\n        \"\"\"\n        return self._plln7\n\n    @plln7.setter\n\
    \    def plln7(self, value: int) -> None:\n        self._plln7.value = value\n\
    \n    @property\n    def plln6(self) -> Field:\n        \"\"\"\n        PLLN6\n\
    \n        Main PLL (PLL) multiplication factor for\n                  VCO\n  \
    \      \"\"\"\n        return self._plln6\n\n    @plln6.setter\n    def plln6(self,\
    \ value: int) -> None:\n        self._plln6.value = value\n\n    @property\n \
    \   def plln5(self) -> Field:\n        \"\"\"\n        PLLN5\n\n        Main PLL\
    \ (PLL) multiplication factor for\n                  VCO\n        \"\"\"\n   \
    \     return self._plln5\n\n    @plln5.setter\n    def plln5(self, value: int)\
    \ -> None:\n        self._plln5.value = value\n\n    @property\n    def plln4(self)\
    \ -> Field:\n        \"\"\"\n        PLLN4\n\n        Main PLL (PLL) multiplication\
    \ factor for\n                  VCO\n        \"\"\"\n        return self._plln4\n\
    \n    @plln4.setter\n    def plln4(self, value: int) -> None:\n        self._plln4.value\
    \ = value\n\n    @property\n    def plln3(self) -> Field:\n        \"\"\"\n  \
    \      PLLN3\n\n        Main PLL (PLL) multiplication factor for\n           \
    \       VCO\n        \"\"\"\n        return self._plln3\n\n    @plln3.setter\n\
    \    def plln3(self, value: int) -> None:\n        self._plln3.value = value\n\
    \n    @property\n    def plln2(self) -> Field:\n        \"\"\"\n        PLLN2\n\
    \n        Main PLL (PLL) multiplication factor for\n                  VCO\n  \
    \      \"\"\"\n        return self._plln2\n\n    @plln2.setter\n    def plln2(self,\
    \ value: int) -> None:\n        self._plln2.value = value\n\n    @property\n \
    \   def plln1(self) -> Field:\n        \"\"\"\n        PLLN1\n\n        Main PLL\
    \ (PLL) multiplication factor for\n                  VCO\n        \"\"\"\n   \
    \     return self._plln1\n\n    @plln1.setter\n    def plln1(self, value: int)\
    \ -> None:\n        self._plln1.value = value\n\n    @property\n    def plln0(self)\
    \ -> Field:\n        \"\"\"\n        PLLN0\n\n        Main PLL (PLL) multiplication\
    \ factor for\n                  VCO\n        \"\"\"\n        return self._plln0\n\
    \n    @plln0.setter\n    def plln0(self, value: int) -> None:\n        self._plln0.value\
    \ = value\n\n    @property\n    def pllm5(self) -> Field:\n        \"\"\"\n  \
    \      PLLM5\n\n        Division factor for the main PLL (PLL)\n             \
    \     and audio PLL (PLLI2S) input clock\n        \"\"\"\n        return self._pllm5\n\
    \n    @pllm5.setter\n    def pllm5(self, value: int) -> None:\n        self._pllm5.value\
    \ = value\n\n    @property\n    def pllm4(self) -> Field:\n        \"\"\"\n  \
    \      PLLM4\n\n        Division factor for the main PLL (PLL)\n             \
    \     and audio PLL (PLLI2S) input clock\n        \"\"\"\n        return self._pllm4\n\
    \n    @pllm4.setter\n    def pllm4(self, value: int) -> None:\n        self._pllm4.value\
    \ = value\n\n    @property\n    def pllm3(self) -> Field:\n        \"\"\"\n  \
    \      PLLM3\n\n        Division factor for the main PLL (PLL)\n             \
    \     and audio PLL (PLLI2S) input clock\n        \"\"\"\n        return self._pllm3\n\
    \n    @pllm3.setter\n    def pllm3(self, value: int) -> None:\n        self._pllm3.value\
    \ = value\n\n    @property\n    def pllm2(self) -> Field:\n        \"\"\"\n  \
    \      PLLM2\n\n        Division factor for the main PLL (PLL)\n             \
    \     and audio PLL (PLLI2S) input clock\n        \"\"\"\n        return self._pllm2\n\
    \n    @pllm2.setter\n    def pllm2(self, value: int) -> None:\n        self._pllm2.value\
    \ = value\n\n    @property\n    def pllm1(self) -> Field:\n        \"\"\"\n  \
    \      PLLM1\n\n        Division factor for the main PLL (PLL)\n             \
    \     and audio PLL (PLLI2S) input clock\n        \"\"\"\n        return self._pllm1\n\
    \n    @pllm1.setter\n    def pllm1(self, value: int) -> None:\n        self._pllm1.value\
    \ = value\n\n    @property\n    def pllm0(self) -> Field:\n        \"\"\"\n  \
    \      PLLM0\n\n        Division factor for the main PLL (PLL)\n             \
    \     and audio PLL (PLLI2S) input clock\n        \"\"\"\n        return self._pllm0\n\
    \n    @pllm0.setter\n    def pllm0(self, value: int) -> None:\n        self._pllm0.value\
    \ = value\n\n\nclass CfgrRegister(Register):\n    \"\"\"\n    CFGR\n\n    clock\
    \ configuration register\n    \"\"\"\n\n    def __init__(self):\n        self._mco2\
    \ = Field(\"mco2\", 30, 2)\n        self._mco2pre = Field(\"mco2pre\", 27, 3)\n\
    \        self._mco1pre = Field(\"mco1pre\", 24, 3)\n        self._i2ssrc = Field(\"\
    i2ssrc\", 23, 1)\n        self._mco1 = Field(\"mco1\", 21, 2)\n        self._rtcpre\
    \ = Field(\"rtcpre\", 16, 5)\n        self._ppre2 = Field(\"ppre2\", 13, 3)\n\
    \        self._ppre1 = Field(\"ppre1\", 10, 3)\n        self._hpre = Field(\"\
    hpre\", 4, 4)\n        self._sws1 = Field(\"sws1\", 3, 1)\n        self._sws0\
    \ = Field(\"sws0\", 2, 1)\n        self._sw1 = Field(\"sw1\", 1, 1)\n        self._sw0\
    \ = Field(\"sw0\", 0, 1)\n        super().__init__(\"CFGR\", 0x40023800 + 0x8)\n\
    \n    @property\n    def mco2(self) -> Field:\n        \"\"\"\n        MCO2\n\n\
    \        Microcontroller clock output\n                  2\n        \"\"\"\n \
    \       return self._mco2\n\n    @mco2.setter\n    def mco2(self, value: int)\
    \ -> None:\n        self._mco2.value = value\n\n    @property\n    def mco2pre(self)\
    \ -> Field:\n        \"\"\"\n        MCO2PRE\n\n        MCO2 prescaler\n     \
    \   \"\"\"\n        return self._mco2pre\n\n    @mco2pre.setter\n    def mco2pre(self,\
    \ value: int) -> None:\n        self._mco2pre.value = value\n\n    @property\n\
    \    def mco1pre(self) -> Field:\n        \"\"\"\n        MCO1PRE\n\n        MCO1\
    \ prescaler\n        \"\"\"\n        return self._mco1pre\n\n    @mco1pre.setter\n\
    \    def mco1pre(self, value: int) -> None:\n        self._mco1pre.value = value\n\
    \n    @property\n    def i2ssrc(self) -> Field:\n        \"\"\"\n        I2SSRC\n\
    \n        I2S clock selection\n        \"\"\"\n        return self._i2ssrc\n\n\
    \    @i2ssrc.setter\n    def i2ssrc(self, value: int) -> None:\n        self._i2ssrc.value\
    \ = value\n\n    @property\n    def mco1(self) -> Field:\n        \"\"\"\n   \
    \     MCO1\n\n        Microcontroller clock output\n                  1\n    \
    \    \"\"\"\n        return self._mco1\n\n    @mco1.setter\n    def mco1(self,\
    \ value: int) -> None:\n        self._mco1.value = value\n\n    @property\n  \
    \  def rtcpre(self) -> Field:\n        \"\"\"\n        RTCPRE\n\n        HSE division\
    \ factor for RTC\n                  clock\n        \"\"\"\n        return self._rtcpre\n\
    \n    @rtcpre.setter\n    def rtcpre(self, value: int) -> None:\n        self._rtcpre.value\
    \ = value\n\n    @property\n    def ppre2(self) -> Field:\n        \"\"\"\n  \
    \      PPRE2\n\n        APB high-speed prescaler\n                  (APB2)\n \
    \       \"\"\"\n        return self._ppre2\n\n    @ppre2.setter\n    def ppre2(self,\
    \ value: int) -> None:\n        self._ppre2.value = value\n\n    @property\n \
    \   def ppre1(self) -> Field:\n        \"\"\"\n        PPRE1\n\n        APB Low\
    \ speed prescaler\n                  (APB1)\n        \"\"\"\n        return self._ppre1\n\
    \n    @ppre1.setter\n    def ppre1(self, value: int) -> None:\n        self._ppre1.value\
    \ = value\n\n    @property\n    def hpre(self) -> Field:\n        \"\"\"\n   \
    \     HPRE\n\n        AHB prescaler\n        \"\"\"\n        return self._hpre\n\
    \n    @hpre.setter\n    def hpre(self, value: int) -> None:\n        self._hpre.value\
    \ = value\n\n    @property\n    def sws1(self) -> Field:\n        \"\"\"\n   \
    \     SWS1\n\n        System clock switch status\n        \"\"\"\n        return\
    \ self._sws1\n\n    @sws1.setter\n    def sws1(self, value: int) -> None:\n  \
    \      self._sws1.value = value\n\n    @property\n    def sws0(self) -> Field:\n\
    \        \"\"\"\n        SWS0\n\n        System clock switch status\n        \"\
    \"\"\n        return self._sws0\n\n    @sws0.setter\n    def sws0(self, value:\
    \ int) -> None:\n        self._sws0.value = value\n\n    @property\n    def sw1(self)\
    \ -> Field:\n        \"\"\"\n        SW1\n\n        System clock switch\n    \
    \    \"\"\"\n        return self._sw1\n\n    @sw1.setter\n    def sw1(self, value:\
    \ int) -> None:\n        self._sw1.value = value\n\n    @property\n    def sw0(self)\
    \ -> Field:\n        \"\"\"\n        SW0\n\n        System clock switch\n    \
    \    \"\"\"\n        return self._sw0\n\n    @sw0.setter\n    def sw0(self, value:\
    \ int) -> None:\n        self._sw0.value = value\n\n\nclass CirRegister(Register):\n\
    \    \"\"\"\n    CIR\n\n    clock interrupt register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cssc = Field(\"cssc\", 23, 1)\n        self._plli2srdyc = Field(\"\
    plli2srdyc\", 21, 1)\n        self._pllrdyc = Field(\"pllrdyc\", 20, 1)\n    \
    \    self._hserdyc = Field(\"hserdyc\", 19, 1)\n        self._hsirdyc = Field(\"\
    hsirdyc\", 18, 1)\n        self._lserdyc = Field(\"lserdyc\", 17, 1)\n       \
    \ self._lsirdyc = Field(\"lsirdyc\", 16, 1)\n        self._plli2srdyie = Field(\"\
    plli2srdyie\", 13, 1)\n        self._pllrdyie = Field(\"pllrdyie\", 12, 1)\n \
    \       self._hserdyie = Field(\"hserdyie\", 11, 1)\n        self._hsirdyie =\
    \ Field(\"hsirdyie\", 10, 1)\n        self._lserdyie = Field(\"lserdyie\", 9,\
    \ 1)\n        self._lsirdyie = Field(\"lsirdyie\", 8, 1)\n        self._cssf =\
    \ Field(\"cssf\", 7, 1)\n        self._plli2srdyf = Field(\"plli2srdyf\", 5, 1)\n\
    \        self._pllrdyf = Field(\"pllrdyf\", 4, 1)\n        self._hserdyf = Field(\"\
    hserdyf\", 3, 1)\n        self._hsirdyf = Field(\"hsirdyf\", 2, 1)\n        self._lserdyf\
    \ = Field(\"lserdyf\", 1, 1)\n        self._lsirdyf = Field(\"lsirdyf\", 0, 1)\n\
    \        super().__init__(\"CIR\", 0x40023800 + 0xC)\n\n    @property\n    def\
    \ cssc(self) -> Field:\n        \"\"\"\n        CSSC\n\n        Clock security\
    \ system interrupt\n                  clear\n        \"\"\"\n        return self._cssc\n\
    \n    @cssc.setter\n    def cssc(self, value: int) -> None:\n        self._cssc.value\
    \ = value\n\n    @property\n    def plli2srdyc(self) -> Field:\n        \"\"\"\
    \n        PLLI2SRDYC\n\n        PLLI2S ready interrupt\n                  clear\n\
    \        \"\"\"\n        return self._plli2srdyc\n\n    @plli2srdyc.setter\n \
    \   def plli2srdyc(self, value: int) -> None:\n        self._plli2srdyc.value\
    \ = value\n\n    @property\n    def pllrdyc(self) -> Field:\n        \"\"\"\n\
    \        PLLRDYC\n\n        Main PLL(PLL) ready interrupt\n                  clear\n\
    \        \"\"\"\n        return self._pllrdyc\n\n    @pllrdyc.setter\n    def\
    \ pllrdyc(self, value: int) -> None:\n        self._pllrdyc.value = value\n\n\
    \    @property\n    def hserdyc(self) -> Field:\n        \"\"\"\n        HSERDYC\n\
    \n        HSE ready interrupt clear\n        \"\"\"\n        return self._hserdyc\n\
    \n    @hserdyc.setter\n    def hserdyc(self, value: int) -> None:\n        self._hserdyc.value\
    \ = value\n\n    @property\n    def hsirdyc(self) -> Field:\n        \"\"\"\n\
    \        HSIRDYC\n\n        HSI ready interrupt clear\n        \"\"\"\n      \
    \  return self._hsirdyc\n\n    @hsirdyc.setter\n    def hsirdyc(self, value: int)\
    \ -> None:\n        self._hsirdyc.value = value\n\n    @property\n    def lserdyc(self)\
    \ -> Field:\n        \"\"\"\n        LSERDYC\n\n        LSE ready interrupt clear\n\
    \        \"\"\"\n        return self._lserdyc\n\n    @lserdyc.setter\n    def\
    \ lserdyc(self, value: int) -> None:\n        self._lserdyc.value = value\n\n\
    \    @property\n    def lsirdyc(self) -> Field:\n        \"\"\"\n        LSIRDYC\n\
    \n        LSI ready interrupt clear\n        \"\"\"\n        return self._lsirdyc\n\
    \n    @lsirdyc.setter\n    def lsirdyc(self, value: int) -> None:\n        self._lsirdyc.value\
    \ = value\n\n    @property\n    def plli2srdyie(self) -> Field:\n        \"\"\"\
    \n        PLLI2SRDYIE\n\n        PLLI2S ready interrupt\n                  enable\n\
    \        \"\"\"\n        return self._plli2srdyie\n\n    @plli2srdyie.setter\n\
    \    def plli2srdyie(self, value: int) -> None:\n        self._plli2srdyie.value\
    \ = value\n\n    @property\n    def pllrdyie(self) -> Field:\n        \"\"\"\n\
    \        PLLRDYIE\n\n        Main PLL (PLL) ready interrupt\n                \
    \  enable\n        \"\"\"\n        return self._pllrdyie\n\n    @pllrdyie.setter\n\
    \    def pllrdyie(self, value: int) -> None:\n        self._pllrdyie.value = value\n\
    \n    @property\n    def hserdyie(self) -> Field:\n        \"\"\"\n        HSERDYIE\n\
    \n        HSE ready interrupt enable\n        \"\"\"\n        return self._hserdyie\n\
    \n    @hserdyie.setter\n    def hserdyie(self, value: int) -> None:\n        self._hserdyie.value\
    \ = value\n\n    @property\n    def hsirdyie(self) -> Field:\n        \"\"\"\n\
    \        HSIRDYIE\n\n        HSI ready interrupt enable\n        \"\"\"\n    \
    \    return self._hsirdyie\n\n    @hsirdyie.setter\n    def hsirdyie(self, value:\
    \ int) -> None:\n        self._hsirdyie.value = value\n\n    @property\n    def\
    \ lserdyie(self) -> Field:\n        \"\"\"\n        LSERDYIE\n\n        LSE ready\
    \ interrupt enable\n        \"\"\"\n        return self._lserdyie\n\n    @lserdyie.setter\n\
    \    def lserdyie(self, value: int) -> None:\n        self._lserdyie.value = value\n\
    \n    @property\n    def lsirdyie(self) -> Field:\n        \"\"\"\n        LSIRDYIE\n\
    \n        LSI ready interrupt enable\n        \"\"\"\n        return self._lsirdyie\n\
    \n    @lsirdyie.setter\n    def lsirdyie(self, value: int) -> None:\n        self._lsirdyie.value\
    \ = value\n\n    @property\n    def cssf(self) -> Field:\n        \"\"\"\n   \
    \     CSSF\n\n        Clock security system interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cssf\n\n    @cssf.setter\n    def cssf(self,\
    \ value: int) -> None:\n        self._cssf.value = value\n\n    @property\n  \
    \  def plli2srdyf(self) -> Field:\n        \"\"\"\n        PLLI2SRDYF\n\n    \
    \    PLLI2S ready interrupt\n                  flag\n        \"\"\"\n        return\
    \ self._plli2srdyf\n\n    @plli2srdyf.setter\n    def plli2srdyf(self, value:\
    \ int) -> None:\n        self._plli2srdyf.value = value\n\n    @property\n   \
    \ def pllrdyf(self) -> Field:\n        \"\"\"\n        PLLRDYF\n\n        Main\
    \ PLL (PLL) ready interrupt\n                  flag\n        \"\"\"\n        return\
    \ self._pllrdyf\n\n    @pllrdyf.setter\n    def pllrdyf(self, value: int) -> None:\n\
    \        self._pllrdyf.value = value\n\n    @property\n    def hserdyf(self) ->\
    \ Field:\n        \"\"\"\n        HSERDYF\n\n        HSE ready interrupt flag\n\
    \        \"\"\"\n        return self._hserdyf\n\n    @hserdyf.setter\n    def\
    \ hserdyf(self, value: int) -> None:\n        self._hserdyf.value = value\n\n\
    \    @property\n    def hsirdyf(self) -> Field:\n        \"\"\"\n        HSIRDYF\n\
    \n        HSI ready interrupt flag\n        \"\"\"\n        return self._hsirdyf\n\
    \n    @hsirdyf.setter\n    def hsirdyf(self, value: int) -> None:\n        self._hsirdyf.value\
    \ = value\n\n    @property\n    def lserdyf(self) -> Field:\n        \"\"\"\n\
    \        LSERDYF\n\n        LSE ready interrupt flag\n        \"\"\"\n       \
    \ return self._lserdyf\n\n    @lserdyf.setter\n    def lserdyf(self, value: int)\
    \ -> None:\n        self._lserdyf.value = value\n\n    @property\n    def lsirdyf(self)\
    \ -> Field:\n        \"\"\"\n        LSIRDYF\n\n        LSI ready interrupt flag\n\
    \        \"\"\"\n        return self._lsirdyf\n\n    @lsirdyf.setter\n    def\
    \ lsirdyf(self, value: int) -> None:\n        self._lsirdyf.value = value\n\n\n\
    class Ahb1rstrRegister(Register):\n    \"\"\"\n    AHB1RSTR\n\n    AHB1 peripheral\
    \ reset register\n    \"\"\"\n\n    def __init__(self):\n        self._dma2rst\
    \ = Field(\"dma2rst\", 22, 1)\n        self._dma1rst = Field(\"dma1rst\", 21,\
    \ 1)\n        self._crcrst = Field(\"crcrst\", 12, 1)\n        self._gpiohrst\
    \ = Field(\"gpiohrst\", 7, 1)\n        self._gpioerst = Field(\"gpioerst\", 4,\
    \ 1)\n        self._gpiodrst = Field(\"gpiodrst\", 3, 1)\n        self._gpiocrst\
    \ = Field(\"gpiocrst\", 2, 1)\n        self._gpiobrst = Field(\"gpiobrst\", 1,\
    \ 1)\n        self._gpioarst = Field(\"gpioarst\", 0, 1)\n        super().__init__(\"\
    AHB1RSTR\", 0x40023800 + 0x10)\n\n    @property\n    def dma2rst(self) -> Field:\n\
    \        \"\"\"\n        DMA2RST\n\n        DMA2 reset\n        \"\"\"\n     \
    \   return self._dma2rst\n\n    @dma2rst.setter\n    def dma2rst(self, value:\
    \ int) -> None:\n        self._dma2rst.value = value\n\n    @property\n    def\
    \ dma1rst(self) -> Field:\n        \"\"\"\n        DMA1RST\n\n        DMA2 reset\n\
    \        \"\"\"\n        return self._dma1rst\n\n    @dma1rst.setter\n    def\
    \ dma1rst(self, value: int) -> None:\n        self._dma1rst.value = value\n\n\
    \    @property\n    def crcrst(self) -> Field:\n        \"\"\"\n        CRCRST\n\
    \n        CRC reset\n        \"\"\"\n        return self._crcrst\n\n    @crcrst.setter\n\
    \    def crcrst(self, value: int) -> None:\n        self._crcrst.value = value\n\
    \n    @property\n    def gpiohrst(self) -> Field:\n        \"\"\"\n        GPIOHRST\n\
    \n        IO port H reset\n        \"\"\"\n        return self._gpiohrst\n\n \
    \   @gpiohrst.setter\n    def gpiohrst(self, value: int) -> None:\n        self._gpiohrst.value\
    \ = value\n\n    @property\n    def gpioerst(self) -> Field:\n        \"\"\"\n\
    \        GPIOERST\n\n        IO port E reset\n        \"\"\"\n        return self._gpioerst\n\
    \n    @gpioerst.setter\n    def gpioerst(self, value: int) -> None:\n        self._gpioerst.value\
    \ = value\n\n    @property\n    def gpiodrst(self) -> Field:\n        \"\"\"\n\
    \        GPIODRST\n\n        IO port D reset\n        \"\"\"\n        return self._gpiodrst\n\
    \n    @gpiodrst.setter\n    def gpiodrst(self, value: int) -> None:\n        self._gpiodrst.value\
    \ = value\n\n    @property\n    def gpiocrst(self) -> Field:\n        \"\"\"\n\
    \        GPIOCRST\n\n        IO port C reset\n        \"\"\"\n        return self._gpiocrst\n\
    \n    @gpiocrst.setter\n    def gpiocrst(self, value: int) -> None:\n        self._gpiocrst.value\
    \ = value\n\n    @property\n    def gpiobrst(self) -> Field:\n        \"\"\"\n\
    \        GPIOBRST\n\n        IO port B reset\n        \"\"\"\n        return self._gpiobrst\n\
    \n    @gpiobrst.setter\n    def gpiobrst(self, value: int) -> None:\n        self._gpiobrst.value\
    \ = value\n\n    @property\n    def gpioarst(self) -> Field:\n        \"\"\"\n\
    \        GPIOARST\n\n        IO port A reset\n        \"\"\"\n        return self._gpioarst\n\
    \n    @gpioarst.setter\n    def gpioarst(self, value: int) -> None:\n        self._gpioarst.value\
    \ = value\n\n\nclass Ahb2rstrRegister(Register):\n    \"\"\"\n    AHB2RSTR\n\n\
    \    AHB2 peripheral reset register\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._otgfsrst = Field(\"otgfsrst\", 7, 1)\n        super().__init__(\"\
    AHB2RSTR\", 0x40023800 + 0x14)\n\n    @property\n    def otgfsrst(self) -> Field:\n\
    \        \"\"\"\n        OTGFSRST\n\n        USB OTG FS module reset\n       \
    \ \"\"\"\n        return self._otgfsrst\n\n    @otgfsrst.setter\n    def otgfsrst(self,\
    \ value: int) -> None:\n        self._otgfsrst.value = value\n\n\nclass Apb1rstrRegister(Register):\n\
    \    \"\"\"\n    APB1RSTR\n\n    APB1 peripheral reset register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._pwrrst = Field(\"pwrrst\", 28, 1)\n  \
    \      self._i2c3rst = Field(\"i2c3rst\", 23, 1)\n        self._i2c2rst = Field(\"\
    i2c2rst\", 22, 1)\n        self._i2c1rst = Field(\"i2c1rst\", 21, 1)\n       \
    \ self._uart2rst = Field(\"uart2rst\", 17, 1)\n        self._spi3rst = Field(\"\
    spi3rst\", 15, 1)\n        self._spi2rst = Field(\"spi2rst\", 14, 1)\n       \
    \ self._wwdgrst = Field(\"wwdgrst\", 11, 1)\n        self._tim5rst = Field(\"\
    tim5rst\", 3, 1)\n        self._tim4rst = Field(\"tim4rst\", 2, 1)\n        self._tim3rst\
    \ = Field(\"tim3rst\", 1, 1)\n        self._tim2rst = Field(\"tim2rst\", 0, 1)\n\
    \        super().__init__(\"APB1RSTR\", 0x40023800 + 0x20)\n\n    @property\n\
    \    def pwrrst(self) -> Field:\n        \"\"\"\n        PWRRST\n\n        Power\
    \ interface reset\n        \"\"\"\n        return self._pwrrst\n\n    @pwrrst.setter\n\
    \    def pwrrst(self, value: int) -> None:\n        self._pwrrst.value = value\n\
    \n    @property\n    def i2c3rst(self) -> Field:\n        \"\"\"\n        I2C3RST\n\
    \n        I2C3 reset\n        \"\"\"\n        return self._i2c3rst\n\n    @i2c3rst.setter\n\
    \    def i2c3rst(self, value: int) -> None:\n        self._i2c3rst.value = value\n\
    \n    @property\n    def i2c2rst(self) -> Field:\n        \"\"\"\n        I2C2RST\n\
    \n        I2C 2 reset\n        \"\"\"\n        return self._i2c2rst\n\n    @i2c2rst.setter\n\
    \    def i2c2rst(self, value: int) -> None:\n        self._i2c2rst.value = value\n\
    \n    @property\n    def i2c1rst(self) -> Field:\n        \"\"\"\n        I2C1RST\n\
    \n        I2C 1 reset\n        \"\"\"\n        return self._i2c1rst\n\n    @i2c1rst.setter\n\
    \    def i2c1rst(self, value: int) -> None:\n        self._i2c1rst.value = value\n\
    \n    @property\n    def uart2rst(self) -> Field:\n        \"\"\"\n        UART2RST\n\
    \n        USART 2 reset\n        \"\"\"\n        return self._uart2rst\n\n   \
    \ @uart2rst.setter\n    def uart2rst(self, value: int) -> None:\n        self._uart2rst.value\
    \ = value\n\n    @property\n    def spi3rst(self) -> Field:\n        \"\"\"\n\
    \        SPI3RST\n\n        SPI 3 reset\n        \"\"\"\n        return self._spi3rst\n\
    \n    @spi3rst.setter\n    def spi3rst(self, value: int) -> None:\n        self._spi3rst.value\
    \ = value\n\n    @property\n    def spi2rst(self) -> Field:\n        \"\"\"\n\
    \        SPI2RST\n\n        SPI 2 reset\n        \"\"\"\n        return self._spi2rst\n\
    \n    @spi2rst.setter\n    def spi2rst(self, value: int) -> None:\n        self._spi2rst.value\
    \ = value\n\n    @property\n    def wwdgrst(self) -> Field:\n        \"\"\"\n\
    \        WWDGRST\n\n        Window watchdog reset\n        \"\"\"\n        return\
    \ self._wwdgrst\n\n    @wwdgrst.setter\n    def wwdgrst(self, value: int) -> None:\n\
    \        self._wwdgrst.value = value\n\n    @property\n    def tim5rst(self) ->\
    \ Field:\n        \"\"\"\n        TIM5RST\n\n        TIM5 reset\n        \"\"\"\
    \n        return self._tim5rst\n\n    @tim5rst.setter\n    def tim5rst(self, value:\
    \ int) -> None:\n        self._tim5rst.value = value\n\n    @property\n    def\
    \ tim4rst(self) -> Field:\n        \"\"\"\n        TIM4RST\n\n        TIM4 reset\n\
    \        \"\"\"\n        return self._tim4rst\n\n    @tim4rst.setter\n    def\
    \ tim4rst(self, value: int) -> None:\n        self._tim4rst.value = value\n\n\
    \    @property\n    def tim3rst(self) -> Field:\n        \"\"\"\n        TIM3RST\n\
    \n        TIM3 reset\n        \"\"\"\n        return self._tim3rst\n\n    @tim3rst.setter\n\
    \    def tim3rst(self, value: int) -> None:\n        self._tim3rst.value = value\n\
    \n    @property\n    def tim2rst(self) -> Field:\n        \"\"\"\n        TIM2RST\n\
    \n        TIM2 reset\n        \"\"\"\n        return self._tim2rst\n\n    @tim2rst.setter\n\
    \    def tim2rst(self, value: int) -> None:\n        self._tim2rst.value = value\n\
    \n\nclass Apb2rstrRegister(Register):\n    \"\"\"\n    APB2RSTR\n\n    APB2 peripheral\
    \ reset register\n    \"\"\"\n\n    def __init__(self):\n        self._tim11rst\
    \ = Field(\"tim11rst\", 18, 1)\n        self._tim10rst = Field(\"tim10rst\", 17,\
    \ 1)\n        self._tim9rst = Field(\"tim9rst\", 16, 1)\n        self._syscfgrst\
    \ = Field(\"syscfgrst\", 14, 1)\n        self._spi1rst = Field(\"spi1rst\", 12,\
    \ 1)\n        self._sdiorst = Field(\"sdiorst\", 11, 1)\n        self._adcrst\
    \ = Field(\"adcrst\", 8, 1)\n        self._usart6rst = Field(\"usart6rst\", 5,\
    \ 1)\n        self._usart1rst = Field(\"usart1rst\", 4, 1)\n        self._tim1rst\
    \ = Field(\"tim1rst\", 0, 1)\n        super().__init__(\"APB2RSTR\", 0x40023800\
    \ + 0x24)\n\n    @property\n    def tim11rst(self) -> Field:\n        \"\"\"\n\
    \        TIM11RST\n\n        TIM11 reset\n        \"\"\"\n        return self._tim11rst\n\
    \n    @tim11rst.setter\n    def tim11rst(self, value: int) -> None:\n        self._tim11rst.value\
    \ = value\n\n    @property\n    def tim10rst(self) -> Field:\n        \"\"\"\n\
    \        TIM10RST\n\n        TIM10 reset\n        \"\"\"\n        return self._tim10rst\n\
    \n    @tim10rst.setter\n    def tim10rst(self, value: int) -> None:\n        self._tim10rst.value\
    \ = value\n\n    @property\n    def tim9rst(self) -> Field:\n        \"\"\"\n\
    \        TIM9RST\n\n        TIM9 reset\n        \"\"\"\n        return self._tim9rst\n\
    \n    @tim9rst.setter\n    def tim9rst(self, value: int) -> None:\n        self._tim9rst.value\
    \ = value\n\n    @property\n    def syscfgrst(self) -> Field:\n        \"\"\"\n\
    \        SYSCFGRST\n\n        System configuration controller\n              \
    \    reset\n        \"\"\"\n        return self._syscfgrst\n\n    @syscfgrst.setter\n\
    \    def syscfgrst(self, value: int) -> None:\n        self._syscfgrst.value =\
    \ value\n\n    @property\n    def spi1rst(self) -> Field:\n        \"\"\"\n  \
    \      SPI1RST\n\n        SPI 1 reset\n        \"\"\"\n        return self._spi1rst\n\
    \n    @spi1rst.setter\n    def spi1rst(self, value: int) -> None:\n        self._spi1rst.value\
    \ = value\n\n    @property\n    def sdiorst(self) -> Field:\n        \"\"\"\n\
    \        SDIORST\n\n        SDIO reset\n        \"\"\"\n        return self._sdiorst\n\
    \n    @sdiorst.setter\n    def sdiorst(self, value: int) -> None:\n        self._sdiorst.value\
    \ = value\n\n    @property\n    def adcrst(self) -> Field:\n        \"\"\"\n \
    \       ADCRST\n\n        ADC interface reset (common to all\n               \
    \   ADCs)\n        \"\"\"\n        return self._adcrst\n\n    @adcrst.setter\n\
    \    def adcrst(self, value: int) -> None:\n        self._adcrst.value = value\n\
    \n    @property\n    def usart6rst(self) -> Field:\n        \"\"\"\n        USART6RST\n\
    \n        USART6 reset\n        \"\"\"\n        return self._usart6rst\n\n   \
    \ @usart6rst.setter\n    def usart6rst(self, value: int) -> None:\n        self._usart6rst.value\
    \ = value\n\n    @property\n    def usart1rst(self) -> Field:\n        \"\"\"\n\
    \        USART1RST\n\n        USART1 reset\n        \"\"\"\n        return self._usart1rst\n\
    \n    @usart1rst.setter\n    def usart1rst(self, value: int) -> None:\n      \
    \  self._usart1rst.value = value\n\n    @property\n    def tim1rst(self) -> Field:\n\
    \        \"\"\"\n        TIM1RST\n\n        TIM1 reset\n        \"\"\"\n     \
    \   return self._tim1rst\n\n    @tim1rst.setter\n    def tim1rst(self, value:\
    \ int) -> None:\n        self._tim1rst.value = value\n\n\nclass Ahb1enrRegister(Register):\n\
    \    \"\"\"\n    AHB1ENR\n\n    AHB1 peripheral clock register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._dma2en = Field(\"dma2en\", 22, 1)\n  \
    \      self._dma1en = Field(\"dma1en\", 21, 1)\n        self._crcen = Field(\"\
    crcen\", 12, 1)\n        self._gpiohen = Field(\"gpiohen\", 7, 1)\n        self._gpioeen\
    \ = Field(\"gpioeen\", 4, 1)\n        self._gpioden = Field(\"gpioden\", 3, 1)\n\
    \        self._gpiocen = Field(\"gpiocen\", 2, 1)\n        self._gpioben = Field(\"\
    gpioben\", 1, 1)\n        self._gpioaen = Field(\"gpioaen\", 0, 1)\n        super().__init__(\"\
    AHB1ENR\", 0x40023800 + 0x30)\n\n    @property\n    def dma2en(self) -> Field:\n\
    \        \"\"\"\n        DMA2EN\n\n        DMA2 clock enable\n        \"\"\"\n\
    \        return self._dma2en\n\n    @dma2en.setter\n    def dma2en(self, value:\
    \ int) -> None:\n        self._dma2en.value = value\n\n    @property\n    def\
    \ dma1en(self) -> Field:\n        \"\"\"\n        DMA1EN\n\n        DMA1 clock\
    \ enable\n        \"\"\"\n        return self._dma1en\n\n    @dma1en.setter\n\
    \    def dma1en(self, value: int) -> None:\n        self._dma1en.value = value\n\
    \n    @property\n    def crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\
    \n        CRC clock enable\n        \"\"\"\n        return self._crcen\n\n   \
    \ @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def gpiohen(self) -> Field:\n        \"\"\"\n\
    \        GPIOHEN\n\n        IO port H clock enable\n        \"\"\"\n        return\
    \ self._gpiohen\n\n    @gpiohen.setter\n    def gpiohen(self, value: int) -> None:\n\
    \        self._gpiohen.value = value\n\n    @property\n    def gpioeen(self) ->\
    \ Field:\n        \"\"\"\n        GPIOEEN\n\n        IO port E clock enable\n\
    \        \"\"\"\n        return self._gpioeen\n\n    @gpioeen.setter\n    def\
    \ gpioeen(self, value: int) -> None:\n        self._gpioeen.value = value\n\n\
    \    @property\n    def gpioden(self) -> Field:\n        \"\"\"\n        GPIODEN\n\
    \n        IO port D clock enable\n        \"\"\"\n        return self._gpioden\n\
    \n    @gpioden.setter\n    def gpioden(self, value: int) -> None:\n        self._gpioden.value\
    \ = value\n\n    @property\n    def gpiocen(self) -> Field:\n        \"\"\"\n\
    \        GPIOCEN\n\n        IO port C clock enable\n        \"\"\"\n        return\
    \ self._gpiocen\n\n    @gpiocen.setter\n    def gpiocen(self, value: int) -> None:\n\
    \        self._gpiocen.value = value\n\n    @property\n    def gpioben(self) ->\
    \ Field:\n        \"\"\"\n        GPIOBEN\n\n        IO port B clock enable\n\
    \        \"\"\"\n        return self._gpioben\n\n    @gpioben.setter\n    def\
    \ gpioben(self, value: int) -> None:\n        self._gpioben.value = value\n\n\
    \    @property\n    def gpioaen(self) -> Field:\n        \"\"\"\n        GPIOAEN\n\
    \n        IO port A clock enable\n        \"\"\"\n        return self._gpioaen\n\
    \n    @gpioaen.setter\n    def gpioaen(self, value: int) -> None:\n        self._gpioaen.value\
    \ = value\n\n\nclass Ahb2enrRegister(Register):\n    \"\"\"\n    AHB2ENR\n\n \
    \   AHB2 peripheral clock enable\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._otgfsen = Field(\"otgfsen\", 7, 1)\n        super().__init__(\"\
    AHB2ENR\", 0x40023800 + 0x34)\n\n    @property\n    def otgfsen(self) -> Field:\n\
    \        \"\"\"\n        OTGFSEN\n\n        USB OTG FS clock enable\n        \"\
    \"\"\n        return self._otgfsen\n\n    @otgfsen.setter\n    def otgfsen(self,\
    \ value: int) -> None:\n        self._otgfsen.value = value\n\n\nclass Apb1enrRegister(Register):\n\
    \    \"\"\"\n    APB1ENR\n\n    APB1 peripheral clock enable\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pwren = Field(\"pwren\"\
    , 28, 1)\n        self._i2c3en = Field(\"i2c3en\", 23, 1)\n        self._i2c2en\
    \ = Field(\"i2c2en\", 22, 1)\n        self._i2c1en = Field(\"i2c1en\", 21, 1)\n\
    \        self._usart2en = Field(\"usart2en\", 17, 1)\n        self._spi3en = Field(\"\
    spi3en\", 15, 1)\n        self._spi2en = Field(\"spi2en\", 14, 1)\n        self._wwdgen\
    \ = Field(\"wwdgen\", 11, 1)\n        self._tim5en = Field(\"tim5en\", 3, 1)\n\
    \        self._tim4en = Field(\"tim4en\", 2, 1)\n        self._tim3en = Field(\"\
    tim3en\", 1, 1)\n        self._tim2en = Field(\"tim2en\", 0, 1)\n        super().__init__(\"\
    APB1ENR\", 0x40023800 + 0x40)\n\n    @property\n    def pwren(self) -> Field:\n\
    \        \"\"\"\n        PWREN\n\n        Power interface clock\n            \
    \      enable\n        \"\"\"\n        return self._pwren\n\n    @pwren.setter\n\
    \    def pwren(self, value: int) -> None:\n        self._pwren.value = value\n\
    \n    @property\n    def i2c3en(self) -> Field:\n        \"\"\"\n        I2C3EN\n\
    \n        I2C3 clock enable\n        \"\"\"\n        return self._i2c3en\n\n \
    \   @i2c3en.setter\n    def i2c3en(self, value: int) -> None:\n        self._i2c3en.value\
    \ = value\n\n    @property\n    def i2c2en(self) -> Field:\n        \"\"\"\n \
    \       I2C2EN\n\n        I2C2 clock enable\n        \"\"\"\n        return self._i2c2en\n\
    \n    @i2c2en.setter\n    def i2c2en(self, value: int) -> None:\n        self._i2c2en.value\
    \ = value\n\n    @property\n    def i2c1en(self) -> Field:\n        \"\"\"\n \
    \       I2C1EN\n\n        I2C1 clock enable\n        \"\"\"\n        return self._i2c1en\n\
    \n    @i2c1en.setter\n    def i2c1en(self, value: int) -> None:\n        self._i2c1en.value\
    \ = value\n\n    @property\n    def usart2en(self) -> Field:\n        \"\"\"\n\
    \        USART2EN\n\n        USART 2 clock enable\n        \"\"\"\n        return\
    \ self._usart2en\n\n    @usart2en.setter\n    def usart2en(self, value: int) ->\
    \ None:\n        self._usart2en.value = value\n\n    @property\n    def spi3en(self)\
    \ -> Field:\n        \"\"\"\n        SPI3EN\n\n        SPI3 clock enable\n   \
    \     \"\"\"\n        return self._spi3en\n\n    @spi3en.setter\n    def spi3en(self,\
    \ value: int) -> None:\n        self._spi3en.value = value\n\n    @property\n\
    \    def spi2en(self) -> Field:\n        \"\"\"\n        SPI2EN\n\n        SPI2\
    \ clock enable\n        \"\"\"\n        return self._spi2en\n\n    @spi2en.setter\n\
    \    def spi2en(self, value: int) -> None:\n        self._spi2en.value = value\n\
    \n    @property\n    def wwdgen(self) -> Field:\n        \"\"\"\n        WWDGEN\n\
    \n        Window watchdog clock\n                  enable\n        \"\"\"\n  \
    \      return self._wwdgen\n\n    @wwdgen.setter\n    def wwdgen(self, value:\
    \ int) -> None:\n        self._wwdgen.value = value\n\n    @property\n    def\
    \ tim5en(self) -> Field:\n        \"\"\"\n        TIM5EN\n\n        TIM5 clock\
    \ enable\n        \"\"\"\n        return self._tim5en\n\n    @tim5en.setter\n\
    \    def tim5en(self, value: int) -> None:\n        self._tim5en.value = value\n\
    \n    @property\n    def tim4en(self) -> Field:\n        \"\"\"\n        TIM4EN\n\
    \n        TIM4 clock enable\n        \"\"\"\n        return self._tim4en\n\n \
    \   @tim4en.setter\n    def tim4en(self, value: int) -> None:\n        self._tim4en.value\
    \ = value\n\n    @property\n    def tim3en(self) -> Field:\n        \"\"\"\n \
    \       TIM3EN\n\n        TIM3 clock enable\n        \"\"\"\n        return self._tim3en\n\
    \n    @tim3en.setter\n    def tim3en(self, value: int) -> None:\n        self._tim3en.value\
    \ = value\n\n    @property\n    def tim2en(self) -> Field:\n        \"\"\"\n \
    \       TIM2EN\n\n        TIM2 clock enable\n        \"\"\"\n        return self._tim2en\n\
    \n    @tim2en.setter\n    def tim2en(self, value: int) -> None:\n        self._tim2en.value\
    \ = value\n\n\nclass Apb2enrRegister(Register):\n    \"\"\"\n    APB2ENR\n\n \
    \   APB2 peripheral clock enable\n              register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._tim1en = Field(\"tim1en\", 0, 1)\n        self._usart1en\
    \ = Field(\"usart1en\", 4, 1)\n        self._usart6en = Field(\"usart6en\", 5,\
    \ 1)\n        self._adc1en = Field(\"adc1en\", 8, 1)\n        self._sdioen = Field(\"\
    sdioen\", 11, 1)\n        self._spi1en = Field(\"spi1en\", 12, 1)\n        self._spi4en\
    \ = Field(\"spi4en\", 13, 1)\n        self._syscfgen = Field(\"syscfgen\", 14,\
    \ 1)\n        self._tim9en = Field(\"tim9en\", 16, 1)\n        self._tim10en =\
    \ Field(\"tim10en\", 17, 1)\n        self._tim11en = Field(\"tim11en\", 18, 1)\n\
    \        super().__init__(\"APB2ENR\", 0x40023800 + 0x44)\n\n    @property\n \
    \   def tim1en(self) -> Field:\n        \"\"\"\n        TIM1EN\n\n        TIM1\
    \ clock enable\n        \"\"\"\n        return self._tim1en\n\n    @tim1en.setter\n\
    \    def tim1en(self, value: int) -> None:\n        self._tim1en.value = value\n\
    \n    @property\n    def usart1en(self) -> Field:\n        \"\"\"\n        USART1EN\n\
    \n        USART1 clock enable\n        \"\"\"\n        return self._usart1en\n\
    \n    @usart1en.setter\n    def usart1en(self, value: int) -> None:\n        self._usart1en.value\
    \ = value\n\n    @property\n    def usart6en(self) -> Field:\n        \"\"\"\n\
    \        USART6EN\n\n        USART6 clock enable\n        \"\"\"\n        return\
    \ self._usart6en\n\n    @usart6en.setter\n    def usart6en(self, value: int) ->\
    \ None:\n        self._usart6en.value = value\n\n    @property\n    def adc1en(self)\
    \ -> Field:\n        \"\"\"\n        ADC1EN\n\n        ADC1 clock enable\n   \
    \     \"\"\"\n        return self._adc1en\n\n    @adc1en.setter\n    def adc1en(self,\
    \ value: int) -> None:\n        self._adc1en.value = value\n\n    @property\n\
    \    def sdioen(self) -> Field:\n        \"\"\"\n        SDIOEN\n\n        SDIO\
    \ clock enable\n        \"\"\"\n        return self._sdioen\n\n    @sdioen.setter\n\
    \    def sdioen(self, value: int) -> None:\n        self._sdioen.value = value\n\
    \n    @property\n    def spi1en(self) -> Field:\n        \"\"\"\n        SPI1EN\n\
    \n        SPI1 clock enable\n        \"\"\"\n        return self._spi1en\n\n \
    \   @spi1en.setter\n    def spi1en(self, value: int) -> None:\n        self._spi1en.value\
    \ = value\n\n    @property\n    def spi4en(self) -> Field:\n        \"\"\"\n \
    \       SPI4EN\n\n        SPI4 clock enable\n        \"\"\"\n        return self._spi4en\n\
    \n    @spi4en.setter\n    def spi4en(self, value: int) -> None:\n        self._spi4en.value\
    \ = value\n\n    @property\n    def syscfgen(self) -> Field:\n        \"\"\"\n\
    \        SYSCFGEN\n\n        System configuration controller clock\n         \
    \         enable\n        \"\"\"\n        return self._syscfgen\n\n    @syscfgen.setter\n\
    \    def syscfgen(self, value: int) -> None:\n        self._syscfgen.value = value\n\
    \n    @property\n    def tim9en(self) -> Field:\n        \"\"\"\n        TIM9EN\n\
    \n        TIM9 clock enable\n        \"\"\"\n        return self._tim9en\n\n \
    \   @tim9en.setter\n    def tim9en(self, value: int) -> None:\n        self._tim9en.value\
    \ = value\n\n    @property\n    def tim10en(self) -> Field:\n        \"\"\"\n\
    \        TIM10EN\n\n        TIM10 clock enable\n        \"\"\"\n        return\
    \ self._tim10en\n\n    @tim10en.setter\n    def tim10en(self, value: int) -> None:\n\
    \        self._tim10en.value = value\n\n    @property\n    def tim11en(self) ->\
    \ Field:\n        \"\"\"\n        TIM11EN\n\n        TIM11 clock enable\n    \
    \    \"\"\"\n        return self._tim11en\n\n    @tim11en.setter\n    def tim11en(self,\
    \ value: int) -> None:\n        self._tim11en.value = value\n\n\nclass Ahb1lpenrRegister(Register):\n\
    \    \"\"\"\n    AHB1LPENR\n\n    AHB1 peripheral clock enable in low power\n\
    \              mode register\n    \"\"\"\n\n    def __init__(self):\n        self._dma2lpen\
    \ = Field(\"dma2lpen\", 22, 1)\n        self._dma1lpen = Field(\"dma1lpen\", 21,\
    \ 1)\n        self._sram1lpen = Field(\"sram1lpen\", 16, 1)\n        self._flitflpen\
    \ = Field(\"flitflpen\", 15, 1)\n        self._crclpen = Field(\"crclpen\", 12,\
    \ 1)\n        self._gpiohlpen = Field(\"gpiohlpen\", 7, 1)\n        self._gpioelpen\
    \ = Field(\"gpioelpen\", 4, 1)\n        self._gpiodlpen = Field(\"gpiodlpen\"\
    , 3, 1)\n        self._gpioclpen = Field(\"gpioclpen\", 2, 1)\n        self._gpioblpen\
    \ = Field(\"gpioblpen\", 1, 1)\n        self._gpioalpen = Field(\"gpioalpen\"\
    , 0, 1)\n        super().__init__(\"AHB1LPENR\", 0x40023800 + 0x50)\n\n    @property\n\
    \    def dma2lpen(self) -> Field:\n        \"\"\"\n        DMA2LPEN\n\n      \
    \  DMA2 clock enable during Sleep\n                  mode\n        \"\"\"\n  \
    \      return self._dma2lpen\n\n    @dma2lpen.setter\n    def dma2lpen(self, value:\
    \ int) -> None:\n        self._dma2lpen.value = value\n\n    @property\n    def\
    \ dma1lpen(self) -> Field:\n        \"\"\"\n        DMA1LPEN\n\n        DMA1 clock\
    \ enable during Sleep\n                  mode\n        \"\"\"\n        return\
    \ self._dma1lpen\n\n    @dma1lpen.setter\n    def dma1lpen(self, value: int) ->\
    \ None:\n        self._dma1lpen.value = value\n\n    @property\n    def sram1lpen(self)\
    \ -> Field:\n        \"\"\"\n        SRAM1LPEN\n\n        SRAM 1interface clock\
    \ enable during\n                  Sleep mode\n        \"\"\"\n        return\
    \ self._sram1lpen\n\n    @sram1lpen.setter\n    def sram1lpen(self, value: int)\
    \ -> None:\n        self._sram1lpen.value = value\n\n    @property\n    def flitflpen(self)\
    \ -> Field:\n        \"\"\"\n        FLITFLPEN\n\n        Flash interface clock\
    \ enable during\n                  Sleep mode\n        \"\"\"\n        return\
    \ self._flitflpen\n\n    @flitflpen.setter\n    def flitflpen(self, value: int)\
    \ -> None:\n        self._flitflpen.value = value\n\n    @property\n    def crclpen(self)\
    \ -> Field:\n        \"\"\"\n        CRCLPEN\n\n        CRC clock enable during\
    \ Sleep\n                  mode\n        \"\"\"\n        return self._crclpen\n\
    \n    @crclpen.setter\n    def crclpen(self, value: int) -> None:\n        self._crclpen.value\
    \ = value\n\n    @property\n    def gpiohlpen(self) -> Field:\n        \"\"\"\n\
    \        GPIOHLPEN\n\n        IO port H clock enable during Sleep\n          \
    \        mode\n        \"\"\"\n        return self._gpiohlpen\n\n    @gpiohlpen.setter\n\
    \    def gpiohlpen(self, value: int) -> None:\n        self._gpiohlpen.value =\
    \ value\n\n    @property\n    def gpioelpen(self) -> Field:\n        \"\"\"\n\
    \        GPIOELPEN\n\n        IO port E clock enable during Sleep\n          \
    \        mode\n        \"\"\"\n        return self._gpioelpen\n\n    @gpioelpen.setter\n\
    \    def gpioelpen(self, value: int) -> None:\n        self._gpioelpen.value =\
    \ value\n\n    @property\n    def gpiodlpen(self) -> Field:\n        \"\"\"\n\
    \        GPIODLPEN\n\n        IO port D clock enable during Sleep\n          \
    \        mode\n        \"\"\"\n        return self._gpiodlpen\n\n    @gpiodlpen.setter\n\
    \    def gpiodlpen(self, value: int) -> None:\n        self._gpiodlpen.value =\
    \ value\n\n    @property\n    def gpioclpen(self) -> Field:\n        \"\"\"\n\
    \        GPIOCLPEN\n\n        IO port C clock enable during Sleep\n          \
    \        mode\n        \"\"\"\n        return self._gpioclpen\n\n    @gpioclpen.setter\n\
    \    def gpioclpen(self, value: int) -> None:\n        self._gpioclpen.value =\
    \ value\n\n    @property\n    def gpioblpen(self) -> Field:\n        \"\"\"\n\
    \        GPIOBLPEN\n\n        IO port B clock enable during Sleep\n          \
    \        mode\n        \"\"\"\n        return self._gpioblpen\n\n    @gpioblpen.setter\n\
    \    def gpioblpen(self, value: int) -> None:\n        self._gpioblpen.value =\
    \ value\n\n    @property\n    def gpioalpen(self) -> Field:\n        \"\"\"\n\
    \        GPIOALPEN\n\n        IO port A clock enable during sleep\n          \
    \        mode\n        \"\"\"\n        return self._gpioalpen\n\n    @gpioalpen.setter\n\
    \    def gpioalpen(self, value: int) -> None:\n        self._gpioalpen.value =\
    \ value\n\n\nclass Ahb2lpenrRegister(Register):\n    \"\"\"\n    AHB2LPENR\n\n\
    \    AHB2 peripheral clock enable in low power\n              mode register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._otgfslpen = Field(\"otgfslpen\"\
    , 7, 1)\n        super().__init__(\"AHB2LPENR\", 0x40023800 + 0x54)\n\n    @property\n\
    \    def otgfslpen(self) -> Field:\n        \"\"\"\n        OTGFSLPEN\n\n    \
    \    USB OTG FS clock enable during Sleep\n                  mode\n        \"\"\
    \"\n        return self._otgfslpen\n\n    @otgfslpen.setter\n    def otgfslpen(self,\
    \ value: int) -> None:\n        self._otgfslpen.value = value\n\n\nclass Apb1lpenrRegister(Register):\n\
    \    \"\"\"\n    APB1LPENR\n\n    APB1 peripheral clock enable in low power\n\
    \              mode register\n    \"\"\"\n\n    def __init__(self):\n        self._pwrlpen\
    \ = Field(\"pwrlpen\", 28, 1)\n        self._i2c3lpen = Field(\"i2c3lpen\", 23,\
    \ 1)\n        self._i2c2lpen = Field(\"i2c2lpen\", 22, 1)\n        self._i2c1lpen\
    \ = Field(\"i2c1lpen\", 21, 1)\n        self._usart2lpen = Field(\"usart2lpen\"\
    , 17, 1)\n        self._spi3lpen = Field(\"spi3lpen\", 15, 1)\n        self._spi2lpen\
    \ = Field(\"spi2lpen\", 14, 1)\n        self._wwdglpen = Field(\"wwdglpen\", 11,\
    \ 1)\n        self._tim5lpen = Field(\"tim5lpen\", 3, 1)\n        self._tim4lpen\
    \ = Field(\"tim4lpen\", 2, 1)\n        self._tim3lpen = Field(\"tim3lpen\", 1,\
    \ 1)\n        self._tim2lpen = Field(\"tim2lpen\", 0, 1)\n        super().__init__(\"\
    APB1LPENR\", 0x40023800 + 0x60)\n\n    @property\n    def pwrlpen(self) -> Field:\n\
    \        \"\"\"\n        PWRLPEN\n\n        Power interface clock enable during\n\
    \                  Sleep mode\n        \"\"\"\n        return self._pwrlpen\n\n\
    \    @pwrlpen.setter\n    def pwrlpen(self, value: int) -> None:\n        self._pwrlpen.value\
    \ = value\n\n    @property\n    def i2c3lpen(self) -> Field:\n        \"\"\"\n\
    \        I2C3LPEN\n\n        I2C3 clock enable during Sleep\n                \
    \  mode\n        \"\"\"\n        return self._i2c3lpen\n\n    @i2c3lpen.setter\n\
    \    def i2c3lpen(self, value: int) -> None:\n        self._i2c3lpen.value = value\n\
    \n    @property\n    def i2c2lpen(self) -> Field:\n        \"\"\"\n        I2C2LPEN\n\
    \n        I2C2 clock enable during Sleep\n                  mode\n        \"\"\
    \"\n        return self._i2c2lpen\n\n    @i2c2lpen.setter\n    def i2c2lpen(self,\
    \ value: int) -> None:\n        self._i2c2lpen.value = value\n\n    @property\n\
    \    def i2c1lpen(self) -> Field:\n        \"\"\"\n        I2C1LPEN\n\n      \
    \  I2C1 clock enable during Sleep\n                  mode\n        \"\"\"\n  \
    \      return self._i2c1lpen\n\n    @i2c1lpen.setter\n    def i2c1lpen(self, value:\
    \ int) -> None:\n        self._i2c1lpen.value = value\n\n    @property\n    def\
    \ usart2lpen(self) -> Field:\n        \"\"\"\n        USART2LPEN\n\n        USART2\
    \ clock enable during Sleep\n                  mode\n        \"\"\"\n        return\
    \ self._usart2lpen\n\n    @usart2lpen.setter\n    def usart2lpen(self, value:\
    \ int) -> None:\n        self._usart2lpen.value = value\n\n    @property\n   \
    \ def spi3lpen(self) -> Field:\n        \"\"\"\n        SPI3LPEN\n\n        SPI3\
    \ clock enable during Sleep\n                  mode\n        \"\"\"\n        return\
    \ self._spi3lpen\n\n    @spi3lpen.setter\n    def spi3lpen(self, value: int) ->\
    \ None:\n        self._spi3lpen.value = value\n\n    @property\n    def spi2lpen(self)\
    \ -> Field:\n        \"\"\"\n        SPI2LPEN\n\n        SPI2 clock enable during\
    \ Sleep\n                  mode\n        \"\"\"\n        return self._spi2lpen\n\
    \n    @spi2lpen.setter\n    def spi2lpen(self, value: int) -> None:\n        self._spi2lpen.value\
    \ = value\n\n    @property\n    def wwdglpen(self) -> Field:\n        \"\"\"\n\
    \        WWDGLPEN\n\n        Window watchdog clock enable during\n           \
    \       Sleep mode\n        \"\"\"\n        return self._wwdglpen\n\n    @wwdglpen.setter\n\
    \    def wwdglpen(self, value: int) -> None:\n        self._wwdglpen.value = value\n\
    \n    @property\n    def tim5lpen(self) -> Field:\n        \"\"\"\n        TIM5LPEN\n\
    \n        TIM5 clock enable during Sleep\n                  mode\n        \"\"\
    \"\n        return self._tim5lpen\n\n    @tim5lpen.setter\n    def tim5lpen(self,\
    \ value: int) -> None:\n        self._tim5lpen.value = value\n\n    @property\n\
    \    def tim4lpen(self) -> Field:\n        \"\"\"\n        TIM4LPEN\n\n      \
    \  TIM4 clock enable during Sleep\n                  mode\n        \"\"\"\n  \
    \      return self._tim4lpen\n\n    @tim4lpen.setter\n    def tim4lpen(self, value:\
    \ int) -> None:\n        self._tim4lpen.value = value\n\n    @property\n    def\
    \ tim3lpen(self) -> Field:\n        \"\"\"\n        TIM3LPEN\n\n        TIM3 clock\
    \ enable during Sleep\n                  mode\n        \"\"\"\n        return\
    \ self._tim3lpen\n\n    @tim3lpen.setter\n    def tim3lpen(self, value: int) ->\
    \ None:\n        self._tim3lpen.value = value\n\n    @property\n    def tim2lpen(self)\
    \ -> Field:\n        \"\"\"\n        TIM2LPEN\n\n        TIM2 clock enable during\
    \ Sleep\n                  mode\n        \"\"\"\n        return self._tim2lpen\n\
    \n    @tim2lpen.setter\n    def tim2lpen(self, value: int) -> None:\n        self._tim2lpen.value\
    \ = value\n\n\nclass Apb2lpenrRegister(Register):\n    \"\"\"\n    APB2LPENR\n\
    \n    APB2 peripheral clock enabled in low power\n              mode register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._tim1lpen = Field(\"tim1lpen\"\
    , 0, 1)\n        self._usart1lpen = Field(\"usart1lpen\", 4, 1)\n        self._usart6lpen\
    \ = Field(\"usart6lpen\", 5, 1)\n        self._adc1lpen = Field(\"adc1lpen\",\
    \ 8, 1)\n        self._sdiolpen = Field(\"sdiolpen\", 11, 1)\n        self._spi1lpen\
    \ = Field(\"spi1lpen\", 12, 1)\n        self._spi4lpen = Field(\"spi4lpen\", 13,\
    \ 1)\n        self._syscfglpen = Field(\"syscfglpen\", 14, 1)\n        self._tim9lpen\
    \ = Field(\"tim9lpen\", 16, 1)\n        self._tim10lpen = Field(\"tim10lpen\"\
    , 17, 1)\n        self._tim11lpen = Field(\"tim11lpen\", 18, 1)\n        super().__init__(\"\
    APB2LPENR\", 0x40023800 + 0x64)\n\n    @property\n    def tim1lpen(self) -> Field:\n\
    \        \"\"\"\n        TIM1LPEN\n\n        TIM1 clock enable during Sleep\n\
    \                  mode\n        \"\"\"\n        return self._tim1lpen\n\n   \
    \ @tim1lpen.setter\n    def tim1lpen(self, value: int) -> None:\n        self._tim1lpen.value\
    \ = value\n\n    @property\n    def usart1lpen(self) -> Field:\n        \"\"\"\
    \n        USART1LPEN\n\n        USART1 clock enable during Sleep\n           \
    \       mode\n        \"\"\"\n        return self._usart1lpen\n\n    @usart1lpen.setter\n\
    \    def usart1lpen(self, value: int) -> None:\n        self._usart1lpen.value\
    \ = value\n\n    @property\n    def usart6lpen(self) -> Field:\n        \"\"\"\
    \n        USART6LPEN\n\n        USART6 clock enable during Sleep\n           \
    \       mode\n        \"\"\"\n        return self._usart6lpen\n\n    @usart6lpen.setter\n\
    \    def usart6lpen(self, value: int) -> None:\n        self._usart6lpen.value\
    \ = value\n\n    @property\n    def adc1lpen(self) -> Field:\n        \"\"\"\n\
    \        ADC1LPEN\n\n        ADC1 clock enable during Sleep\n                \
    \  mode\n        \"\"\"\n        return self._adc1lpen\n\n    @adc1lpen.setter\n\
    \    def adc1lpen(self, value: int) -> None:\n        self._adc1lpen.value = value\n\
    \n    @property\n    def sdiolpen(self) -> Field:\n        \"\"\"\n        SDIOLPEN\n\
    \n        SDIO clock enable during Sleep\n                  mode\n        \"\"\
    \"\n        return self._sdiolpen\n\n    @sdiolpen.setter\n    def sdiolpen(self,\
    \ value: int) -> None:\n        self._sdiolpen.value = value\n\n    @property\n\
    \    def spi1lpen(self) -> Field:\n        \"\"\"\n        SPI1LPEN\n\n      \
    \  SPI 1 clock enable during Sleep\n                  mode\n        \"\"\"\n \
    \       return self._spi1lpen\n\n    @spi1lpen.setter\n    def spi1lpen(self,\
    \ value: int) -> None:\n        self._spi1lpen.value = value\n\n    @property\n\
    \    def spi4lpen(self) -> Field:\n        \"\"\"\n        SPI4LPEN\n\n      \
    \  SPI4 clock enable during Sleep\n                  mode\n        \"\"\"\n  \
    \      return self._spi4lpen\n\n    @spi4lpen.setter\n    def spi4lpen(self, value:\
    \ int) -> None:\n        self._spi4lpen.value = value\n\n    @property\n    def\
    \ syscfglpen(self) -> Field:\n        \"\"\"\n        SYSCFGLPEN\n\n        System\
    \ configuration controller clock\n                  enable during Sleep mode\n\
    \        \"\"\"\n        return self._syscfglpen\n\n    @syscfglpen.setter\n \
    \   def syscfglpen(self, value: int) -> None:\n        self._syscfglpen.value\
    \ = value\n\n    @property\n    def tim9lpen(self) -> Field:\n        \"\"\"\n\
    \        TIM9LPEN\n\n        TIM9 clock enable during sleep\n                \
    \  mode\n        \"\"\"\n        return self._tim9lpen\n\n    @tim9lpen.setter\n\
    \    def tim9lpen(self, value: int) -> None:\n        self._tim9lpen.value = value\n\
    \n    @property\n    def tim10lpen(self) -> Field:\n        \"\"\"\n        TIM10LPEN\n\
    \n        TIM10 clock enable during Sleep\n                  mode\n        \"\"\
    \"\n        return self._tim10lpen\n\n    @tim10lpen.setter\n    def tim10lpen(self,\
    \ value: int) -> None:\n        self._tim10lpen.value = value\n\n    @property\n\
    \    def tim11lpen(self) -> Field:\n        \"\"\"\n        TIM11LPEN\n\n    \
    \    TIM11 clock enable during Sleep\n                  mode\n        \"\"\"\n\
    \        return self._tim11lpen\n\n    @tim11lpen.setter\n    def tim11lpen(self,\
    \ value: int) -> None:\n        self._tim11lpen.value = value\n\n\nclass BdcrRegister(Register):\n\
    \    \"\"\"\n    BDCR\n\n    Backup domain control register\n    \"\"\"\n\n  \
    \  def __init__(self):\n        self._bdrst = Field(\"bdrst\", 16, 1)\n      \
    \  self._rtcen = Field(\"rtcen\", 15, 1)\n        self._rtcsel1 = Field(\"rtcsel1\"\
    , 9, 1)\n        self._rtcsel0 = Field(\"rtcsel0\", 8, 1)\n        self._lsebyp\
    \ = Field(\"lsebyp\", 2, 1)\n        self._lserdy = Field(\"lserdy\", 1, 1)\n\
    \        self._lseon = Field(\"lseon\", 0, 1)\n        super().__init__(\"BDCR\"\
    , 0x40023800 + 0x70)\n\n    @property\n    def bdrst(self) -> Field:\n       \
    \ \"\"\"\n        BDRST\n\n        Backup domain software\n                  reset\n\
    \        \"\"\"\n        return self._bdrst\n\n    @bdrst.setter\n    def bdrst(self,\
    \ value: int) -> None:\n        self._bdrst.value = value\n\n    @property\n \
    \   def rtcen(self) -> Field:\n        \"\"\"\n        RTCEN\n\n        RTC clock\
    \ enable\n        \"\"\"\n        return self._rtcen\n\n    @rtcen.setter\n  \
    \  def rtcen(self, value: int) -> None:\n        self._rtcen.value = value\n\n\
    \    @property\n    def rtcsel1(self) -> Field:\n        \"\"\"\n        RTCSEL1\n\
    \n        RTC clock source selection\n        \"\"\"\n        return self._rtcsel1\n\
    \n    @rtcsel1.setter\n    def rtcsel1(self, value: int) -> None:\n        self._rtcsel1.value\
    \ = value\n\n    @property\n    def rtcsel0(self) -> Field:\n        \"\"\"\n\
    \        RTCSEL0\n\n        RTC clock source selection\n        \"\"\"\n     \
    \   return self._rtcsel0\n\n    @rtcsel0.setter\n    def rtcsel0(self, value:\
    \ int) -> None:\n        self._rtcsel0.value = value\n\n    @property\n    def\
    \ lsebyp(self) -> Field:\n        \"\"\"\n        LSEBYP\n\n        External low-speed\
    \ oscillator\n                  bypass\n        \"\"\"\n        return self._lsebyp\n\
    \n    @lsebyp.setter\n    def lsebyp(self, value: int) -> None:\n        self._lsebyp.value\
    \ = value\n\n    @property\n    def lserdy(self) -> Field:\n        \"\"\"\n \
    \       LSERDY\n\n        External low-speed oscillator\n                  ready\n\
    \        \"\"\"\n        return self._lserdy\n\n    @lserdy.setter\n    def lserdy(self,\
    \ value: int) -> None:\n        self._lserdy.value = value\n\n    @property\n\
    \    def lseon(self) -> Field:\n        \"\"\"\n        LSEON\n\n        External\
    \ low-speed oscillator\n                  enable\n        \"\"\"\n        return\
    \ self._lseon\n\n    @lseon.setter\n    def lseon(self, value: int) -> None:\n\
    \        self._lseon.value = value\n\n\nclass CsrRegister(Register):\n    \"\"\
    \"\n    CSR\n\n    clock control & status\n              register\n    \"\"\"\n\
    \n    def __init__(self):\n        self._lpwrrstf = Field(\"lpwrrstf\", 31, 1)\n\
    \        self._wwdgrstf = Field(\"wwdgrstf\", 30, 1)\n        self._wdgrstf =\
    \ Field(\"wdgrstf\", 29, 1)\n        self._sftrstf = Field(\"sftrstf\", 28, 1)\n\
    \        self._porrstf = Field(\"porrstf\", 27, 1)\n        self._padrstf = Field(\"\
    padrstf\", 26, 1)\n        self._borrstf = Field(\"borrstf\", 25, 1)\n       \
    \ self._rmvf = Field(\"rmvf\", 24, 1)\n        self._lsirdy = Field(\"lsirdy\"\
    , 1, 1)\n        self._lsion = Field(\"lsion\", 0, 1)\n        super().__init__(\"\
    CSR\", 0x40023800 + 0x74)\n\n    @property\n    def lpwrrstf(self) -> Field:\n\
    \        \"\"\"\n        LPWRRSTF\n\n        Low-power reset flag\n        \"\"\
    \"\n        return self._lpwrrstf\n\n    @lpwrrstf.setter\n    def lpwrrstf(self,\
    \ value: int) -> None:\n        self._lpwrrstf.value = value\n\n    @property\n\
    \    def wwdgrstf(self) -> Field:\n        \"\"\"\n        WWDGRSTF\n\n      \
    \  Window watchdog reset flag\n        \"\"\"\n        return self._wwdgrstf\n\
    \n    @wwdgrstf.setter\n    def wwdgrstf(self, value: int) -> None:\n        self._wwdgrstf.value\
    \ = value\n\n    @property\n    def wdgrstf(self) -> Field:\n        \"\"\"\n\
    \        WDGRSTF\n\n        Independent watchdog reset\n                  flag\n\
    \        \"\"\"\n        return self._wdgrstf\n\n    @wdgrstf.setter\n    def\
    \ wdgrstf(self, value: int) -> None:\n        self._wdgrstf.value = value\n\n\
    \    @property\n    def sftrstf(self) -> Field:\n        \"\"\"\n        SFTRSTF\n\
    \n        Software reset flag\n        \"\"\"\n        return self._sftrstf\n\n\
    \    @sftrstf.setter\n    def sftrstf(self, value: int) -> None:\n        self._sftrstf.value\
    \ = value\n\n    @property\n    def porrstf(self) -> Field:\n        \"\"\"\n\
    \        PORRSTF\n\n        POR/PDR reset flag\n        \"\"\"\n        return\
    \ self._porrstf\n\n    @porrstf.setter\n    def porrstf(self, value: int) -> None:\n\
    \        self._porrstf.value = value\n\n    @property\n    def padrstf(self) ->\
    \ Field:\n        \"\"\"\n        PADRSTF\n\n        PIN reset flag\n        \"\
    \"\"\n        return self._padrstf\n\n    @padrstf.setter\n    def padrstf(self,\
    \ value: int) -> None:\n        self._padrstf.value = value\n\n    @property\n\
    \    def borrstf(self) -> Field:\n        \"\"\"\n        BORRSTF\n\n        BOR\
    \ reset flag\n        \"\"\"\n        return self._borrstf\n\n    @borrstf.setter\n\
    \    def borrstf(self, value: int) -> None:\n        self._borrstf.value = value\n\
    \n    @property\n    def rmvf(self) -> Field:\n        \"\"\"\n        RMVF\n\n\
    \        Remove reset flag\n        \"\"\"\n        return self._rmvf\n\n    @rmvf.setter\n\
    \    def rmvf(self, value: int) -> None:\n        self._rmvf.value = value\n\n\
    \    @property\n    def lsirdy(self) -> Field:\n        \"\"\"\n        LSIRDY\n\
    \n        Internal low-speed oscillator\n                  ready\n        \"\"\
    \"\n        return self._lsirdy\n\n    @lsirdy.setter\n    def lsirdy(self, value:\
    \ int) -> None:\n        self._lsirdy.value = value\n\n    @property\n    def\
    \ lsion(self) -> Field:\n        \"\"\"\n        LSION\n\n        Internal low-speed\
    \ oscillator\n                  enable\n        \"\"\"\n        return self._lsion\n\
    \n    @lsion.setter\n    def lsion(self, value: int) -> None:\n        self._lsion.value\
    \ = value\n\n\nclass SscgrRegister(Register):\n    \"\"\"\n    SSCGR\n\n    spread\
    \ spectrum clock generation\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._sscgen = Field(\"sscgen\", 31, 1)\n        self._spreadsel = Field(\"\
    spreadsel\", 30, 1)\n        self._incstep = Field(\"incstep\", 13, 15)\n    \
    \    self._modper = Field(\"modper\", 0, 13)\n        super().__init__(\"SSCGR\"\
    , 0x40023800 + 0x80)\n\n    @property\n    def sscgen(self) -> Field:\n      \
    \  \"\"\"\n        SSCGEN\n\n        Spread spectrum modulation\n            \
    \      enable\n        \"\"\"\n        return self._sscgen\n\n    @sscgen.setter\n\
    \    def sscgen(self, value: int) -> None:\n        self._sscgen.value = value\n\
    \n    @property\n    def spreadsel(self) -> Field:\n        \"\"\"\n        SPREADSEL\n\
    \n        Spread Select\n        \"\"\"\n        return self._spreadsel\n\n  \
    \  @spreadsel.setter\n    def spreadsel(self, value: int) -> None:\n        self._spreadsel.value\
    \ = value\n\n    @property\n    def incstep(self) -> Field:\n        \"\"\"\n\
    \        INCSTEP\n\n        Incrementation step\n        \"\"\"\n        return\
    \ self._incstep\n\n    @incstep.setter\n    def incstep(self, value: int) -> None:\n\
    \        self._incstep.value = value\n\n    @property\n    def modper(self) ->\
    \ Field:\n        \"\"\"\n        MODPER\n\n        Modulation period\n      \
    \  \"\"\"\n        return self._modper\n\n    @modper.setter\n    def modper(self,\
    \ value: int) -> None:\n        self._modper.value = value\n\n\nclass Plli2scfgrRegister(Register):\n\
    \    \"\"\"\n    PLLI2SCFGR\n\n    PLLI2S configuration register\n    \"\"\"\n\
    \n    def __init__(self):\n        self._plli2srx = Field(\"plli2srx\", 28, 3)\n\
    \        self._plli2snx = Field(\"plli2snx\", 6, 9)\n        super().__init__(\"\
    PLLI2SCFGR\", 0x40023800 + 0x84)\n\n    @property\n    def plli2srx(self) -> Field:\n\
    \        \"\"\"\n        PLLI2SRX\n\n        PLLI2S division factor for I2S\n\
    \                  clocks\n        \"\"\"\n        return self._plli2srx\n\n \
    \   @plli2srx.setter\n    def plli2srx(self, value: int) -> None:\n        self._plli2srx.value\
    \ = value\n\n    @property\n    def plli2snx(self) -> Field:\n        \"\"\"\n\
    \        PLLI2SNX\n\n        PLLI2S multiplication factor for\n              \
    \    VCO\n        \"\"\"\n        return self._plli2snx\n\n    @plli2snx.setter\n\
    \    def plli2snx(self, value: int) -> None:\n        self._plli2snx.value = value\n\
    \n\nclass Rcc(Peripheral):\n    \"\"\"\n    RCC\n\n    Reset and clock control\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cr = CrRegister()\n    \
    \    self._pllcfgr = PllcfgrRegister()\n        self._cfgr = CfgrRegister()\n\
    \        self._cir = CirRegister()\n        self._ahb1rstr = Ahb1rstrRegister()\n\
    \        self._ahb2rstr = Ahb2rstrRegister()\n        self._apb1rstr = Apb1rstrRegister()\n\
    \        self._apb2rstr = Apb2rstrRegister()\n        self._ahb1enr = Ahb1enrRegister()\n\
    \        self._ahb2enr = Ahb2enrRegister()\n        self._apb1enr = Apb1enrRegister()\n\
    \        self._apb2enr = Apb2enrRegister()\n        self._ahb1lpenr = Ahb1lpenrRegister()\n\
    \        self._ahb2lpenr = Ahb2lpenrRegister()\n        self._apb1lpenr = Apb1lpenrRegister()\n\
    \        self._apb2lpenr = Apb2lpenrRegister()\n        self._bdcr = BdcrRegister()\n\
    \        self._csr = CsrRegister()\n        self._sscgr = SscgrRegister()\n  \
    \      self._plli2scfgr = Plli2scfgrRegister()\n        super().__init__(\"rcc\"\
    , 0x40023800)\n\n    @property\n    def cr(self) -> CrRegister:\n        return\
    \ self._cr\n\n    @cr.setter\n    def cr(self, value: int) -> None:\n        self._cr.value\
    \ = value\n\n    @property\n    def pllcfgr(self) -> PllcfgrRegister:\n      \
    \  return self._pllcfgr\n\n    @pllcfgr.setter\n    def pllcfgr(self, value: int)\
    \ -> None:\n        self._pllcfgr.value = value\n\n    @property\n    def cfgr(self)\
    \ -> CfgrRegister:\n        return self._cfgr\n\n    @cfgr.setter\n    def cfgr(self,\
    \ value: int) -> None:\n        self._cfgr.value = value\n\n    @property\n  \
    \  def cir(self) -> CirRegister:\n        return self._cir\n\n    @cir.setter\n\
    \    def cir(self, value: int) -> None:\n        self._cir.value = value\n\n \
    \   @property\n    def ahb1rstr(self) -> Ahb1rstrRegister:\n        return self._ahb1rstr\n\
    \n    @ahb1rstr.setter\n    def ahb1rstr(self, value: int) -> None:\n        self._ahb1rstr.value\
    \ = value\n\n    @property\n    def ahb2rstr(self) -> Ahb2rstrRegister:\n    \
    \    return self._ahb2rstr\n\n    @ahb2rstr.setter\n    def ahb2rstr(self, value:\
    \ int) -> None:\n        self._ahb2rstr.value = value\n\n    @property\n    def\
    \ apb1rstr(self) -> Apb1rstrRegister:\n        return self._apb1rstr\n\n    @apb1rstr.setter\n\
    \    def apb1rstr(self, value: int) -> None:\n        self._apb1rstr.value = value\n\
    \n    @property\n    def apb2rstr(self) -> Apb2rstrRegister:\n        return self._apb2rstr\n\
    \n    @apb2rstr.setter\n    def apb2rstr(self, value: int) -> None:\n        self._apb2rstr.value\
    \ = value\n\n    @property\n    def ahb1enr(self) -> Ahb1enrRegister:\n      \
    \  return self._ahb1enr\n\n    @ahb1enr.setter\n    def ahb1enr(self, value: int)\
    \ -> None:\n        self._ahb1enr.value = value\n\n    @property\n    def ahb2enr(self)\
    \ -> Ahb2enrRegister:\n        return self._ahb2enr\n\n    @ahb2enr.setter\n \
    \   def ahb2enr(self, value: int) -> None:\n        self._ahb2enr.value = value\n\
    \n    @property\n    def apb1enr(self) -> Apb1enrRegister:\n        return self._apb1enr\n\
    \n    @apb1enr.setter\n    def apb1enr(self, value: int) -> None:\n        self._apb1enr.value\
    \ = value\n\n    @property\n    def apb2enr(self) -> Apb2enrRegister:\n      \
    \  return self._apb2enr\n\n    @apb2enr.setter\n    def apb2enr(self, value: int)\
    \ -> None:\n        self._apb2enr.value = value\n\n    @property\n    def ahb1lpenr(self)\
    \ -> Ahb1lpenrRegister:\n        return self._ahb1lpenr\n\n    @ahb1lpenr.setter\n\
    \    def ahb1lpenr(self, value: int) -> None:\n        self._ahb1lpenr.value =\
    \ value\n\n    @property\n    def ahb2lpenr(self) -> Ahb2lpenrRegister:\n    \
    \    return self._ahb2lpenr\n\n    @ahb2lpenr.setter\n    def ahb2lpenr(self,\
    \ value: int) -> None:\n        self._ahb2lpenr.value = value\n\n    @property\n\
    \    def apb1lpenr(self) -> Apb1lpenrRegister:\n        return self._apb1lpenr\n\
    \n    @apb1lpenr.setter\n    def apb1lpenr(self, value: int) -> None:\n      \
    \  self._apb1lpenr.value = value\n\n    @property\n    def apb2lpenr(self) ->\
    \ Apb2lpenrRegister:\n        return self._apb2lpenr\n\n    @apb2lpenr.setter\n\
    \    def apb2lpenr(self, value: int) -> None:\n        self._apb2lpenr.value =\
    \ value\n\n    @property\n    def bdcr(self) -> BdcrRegister:\n        return\
    \ self._bdcr\n\n    @bdcr.setter\n    def bdcr(self, value: int) -> None:\n  \
    \      self._bdcr.value = value\n\n    @property\n    def csr(self) -> CsrRegister:\n\
    \        return self._csr\n\n    @csr.setter\n    def csr(self, value: int) ->\
    \ None:\n        self._csr.value = value\n\n    @property\n    def sscgr(self)\
    \ -> SscgrRegister:\n        return self._sscgr\n\n    @sscgr.setter\n    def\
    \ sscgr(self, value: int) -> None:\n        self._sscgr.value = value\n\n    @property\n\
    \    def plli2scfgr(self) -> Plli2scfgrRegister:\n        return self._plli2scfgr\n\
    \n    @plli2scfgr.setter\n    def plli2scfgr(self, value: int) -> None:\n    \
    \    self._plli2scfgr.value = value\n"
  name: RCC
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass TrRegister(Register):\n    \"\"\"\n    TR\n\n    time register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pm = Field(\"pm\", 22, 1)\n\
    \        self._ht = Field(\"ht\", 20, 2)\n        self._hu = Field(\"hu\", 16,\
    \ 4)\n        self._mnt = Field(\"mnt\", 12, 3)\n        self._mnu = Field(\"\
    mnu\", 8, 4)\n        self._st = Field(\"st\", 4, 3)\n        self._su = Field(\"\
    su\", 0, 4)\n        super().__init__(\"TR\", 0x40002800 + 0x0)\n\n    @property\n\
    \    def pm(self) -> Field:\n        \"\"\"\n        PM\n\n        AM/PM notation\n\
    \        \"\"\"\n        return self._pm\n\n    @pm.setter\n    def pm(self, value:\
    \ int) -> None:\n        self._pm.value = value\n\n    @property\n    def ht(self)\
    \ -> Field:\n        \"\"\"\n        HT\n\n        Hour tens in BCD format\n \
    \       \"\"\"\n        return self._ht\n\n    @ht.setter\n    def ht(self, value:\
    \ int) -> None:\n        self._ht.value = value\n\n    @property\n    def hu(self)\
    \ -> Field:\n        \"\"\"\n        HU\n\n        Hour units in BCD format\n\
    \        \"\"\"\n        return self._hu\n\n    @hu.setter\n    def hu(self, value:\
    \ int) -> None:\n        self._hu.value = value\n\n    @property\n    def mnt(self)\
    \ -> Field:\n        \"\"\"\n        MNT\n\n        Minute tens in BCD format\n\
    \        \"\"\"\n        return self._mnt\n\n    @mnt.setter\n    def mnt(self,\
    \ value: int) -> None:\n        self._mnt.value = value\n\n    @property\n   \
    \ def mnu(self) -> Field:\n        \"\"\"\n        MNU\n\n        Minute units\
    \ in BCD format\n        \"\"\"\n        return self._mnu\n\n    @mnu.setter\n\
    \    def mnu(self, value: int) -> None:\n        self._mnu.value = value\n\n \
    \   @property\n    def st(self) -> Field:\n        \"\"\"\n        ST\n\n    \
    \    Second tens in BCD format\n        \"\"\"\n        return self._st\n\n  \
    \  @st.setter\n    def st(self, value: int) -> None:\n        self._st.value =\
    \ value\n\n    @property\n    def su(self) -> Field:\n        \"\"\"\n       \
    \ SU\n\n        Second units in BCD format\n        \"\"\"\n        return self._su\n\
    \n    @su.setter\n    def su(self, value: int) -> None:\n        self._su.value\
    \ = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    date register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._yt = Field(\"yt\", 20, 4)\n\
    \        self._yu = Field(\"yu\", 16, 4)\n        self._wdu = Field(\"wdu\", 13,\
    \ 3)\n        self._mt = Field(\"mt\", 12, 1)\n        self._mu = Field(\"mu\"\
    , 8, 4)\n        self._dt = Field(\"dt\", 4, 2)\n        self._du = Field(\"du\"\
    , 0, 4)\n        super().__init__(\"DR\", 0x40002800 + 0x4)\n\n    @property\n\
    \    def yt(self) -> Field:\n        \"\"\"\n        YT\n\n        Year tens in\
    \ BCD format\n        \"\"\"\n        return self._yt\n\n    @yt.setter\n    def\
    \ yt(self, value: int) -> None:\n        self._yt.value = value\n\n    @property\n\
    \    def yu(self) -> Field:\n        \"\"\"\n        YU\n\n        Year units\
    \ in BCD format\n        \"\"\"\n        return self._yu\n\n    @yu.setter\n \
    \   def yu(self, value: int) -> None:\n        self._yu.value = value\n\n    @property\n\
    \    def wdu(self) -> Field:\n        \"\"\"\n        WDU\n\n        Week day\
    \ units\n        \"\"\"\n        return self._wdu\n\n    @wdu.setter\n    def\
    \ wdu(self, value: int) -> None:\n        self._wdu.value = value\n\n    @property\n\
    \    def mt(self) -> Field:\n        \"\"\"\n        MT\n\n        Month tens\
    \ in BCD format\n        \"\"\"\n        return self._mt\n\n    @mt.setter\n \
    \   def mt(self, value: int) -> None:\n        self._mt.value = value\n\n    @property\n\
    \    def mu(self) -> Field:\n        \"\"\"\n        MU\n\n        Month units\
    \ in BCD format\n        \"\"\"\n        return self._mu\n\n    @mu.setter\n \
    \   def mu(self, value: int) -> None:\n        self._mu.value = value\n\n    @property\n\
    \    def dt(self) -> Field:\n        \"\"\"\n        DT\n\n        Date tens in\
    \ BCD format\n        \"\"\"\n        return self._dt\n\n    @dt.setter\n    def\
    \ dt(self, value: int) -> None:\n        self._dt.value = value\n\n    @property\n\
    \    def du(self) -> Field:\n        \"\"\"\n        DU\n\n        Date units\
    \ in BCD format\n        \"\"\"\n        return self._du\n\n    @du.setter\n \
    \   def du(self, value: int) -> None:\n        self._du.value = value\n\n\nclass\
    \ CrRegister(Register):\n    \"\"\"\n    CR\n\n    control register\n    \"\"\"\
    \n\n    def __init__(self):\n        self._coe = Field(\"coe\", 23, 1)\n     \
    \   self._osel = Field(\"osel\", 21, 2)\n        self._pol = Field(\"pol\", 20,\
    \ 1)\n        self._cosel = Field(\"cosel\", 19, 1)\n        self._bkp = Field(\"\
    bkp\", 18, 1)\n        self._sub1h = Field(\"sub1h\", 17, 1)\n        self._add1h\
    \ = Field(\"add1h\", 16, 1)\n        self._tsie = Field(\"tsie\", 15, 1)\n   \
    \     self._wutie = Field(\"wutie\", 14, 1)\n        self._alrbie = Field(\"alrbie\"\
    , 13, 1)\n        self._alraie = Field(\"alraie\", 12, 1)\n        self._tse =\
    \ Field(\"tse\", 11, 1)\n        self._wute = Field(\"wute\", 10, 1)\n       \
    \ self._alrbe = Field(\"alrbe\", 9, 1)\n        self._alrae = Field(\"alrae\"\
    , 8, 1)\n        self._dce = Field(\"dce\", 7, 1)\n        self._fmt = Field(\"\
    fmt\", 6, 1)\n        self._bypshad = Field(\"bypshad\", 5, 1)\n        self._refckon\
    \ = Field(\"refckon\", 4, 1)\n        self._tsedge = Field(\"tsedge\", 3, 1)\n\
    \        self._wcksel = Field(\"wcksel\", 0, 3)\n        super().__init__(\"CR\"\
    , 0x40002800 + 0x8)\n\n    @property\n    def coe(self) -> Field:\n        \"\"\
    \"\n        COE\n\n        Calibration output enable\n        \"\"\"\n       \
    \ return self._coe\n\n    @coe.setter\n    def coe(self, value: int) -> None:\n\
    \        self._coe.value = value\n\n    @property\n    def osel(self) -> Field:\n\
    \        \"\"\"\n        OSEL\n\n        Output selection\n        \"\"\"\n  \
    \      return self._osel\n\n    @osel.setter\n    def osel(self, value: int) ->\
    \ None:\n        self._osel.value = value\n\n    @property\n    def pol(self)\
    \ -> Field:\n        \"\"\"\n        POL\n\n        Output polarity\n        \"\
    \"\"\n        return self._pol\n\n    @pol.setter\n    def pol(self, value: int)\
    \ -> None:\n        self._pol.value = value\n\n    @property\n    def cosel(self)\
    \ -> Field:\n        \"\"\"\n        COSEL\n\n        Calibration Output\n   \
    \               selection\n        \"\"\"\n        return self._cosel\n\n    @cosel.setter\n\
    \    def cosel(self, value: int) -> None:\n        self._cosel.value = value\n\
    \n    @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n\
    \        Backup\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n\
    \    def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n \
    \   @property\n    def sub1h(self) -> Field:\n        \"\"\"\n        SUB1H\n\n\
    \        Subtract 1 hour (winter time\n                  change)\n        \"\"\
    \"\n        return self._sub1h\n\n    @sub1h.setter\n    def sub1h(self, value:\
    \ int) -> None:\n        self._sub1h.value = value\n\n    @property\n    def add1h(self)\
    \ -> Field:\n        \"\"\"\n        ADD1H\n\n        Add 1 hour (summer time\n\
    \                  change)\n        \"\"\"\n        return self._add1h\n\n   \
    \ @add1h.setter\n    def add1h(self, value: int) -> None:\n        self._add1h.value\
    \ = value\n\n    @property\n    def tsie(self) -> Field:\n        \"\"\"\n   \
    \     TSIE\n\n        Time-stamp interrupt\n                  enable\n       \
    \ \"\"\"\n        return self._tsie\n\n    @tsie.setter\n    def tsie(self, value:\
    \ int) -> None:\n        self._tsie.value = value\n\n    @property\n    def wutie(self)\
    \ -> Field:\n        \"\"\"\n        WUTIE\n\n        Wakeup timer interrupt\n\
    \                  enable\n        \"\"\"\n        return self._wutie\n\n    @wutie.setter\n\
    \    def wutie(self, value: int) -> None:\n        self._wutie.value = value\n\
    \n    @property\n    def alrbie(self) -> Field:\n        \"\"\"\n        ALRBIE\n\
    \n        Alarm B interrupt enable\n        \"\"\"\n        return self._alrbie\n\
    \n    @alrbie.setter\n    def alrbie(self, value: int) -> None:\n        self._alrbie.value\
    \ = value\n\n    @property\n    def alraie(self) -> Field:\n        \"\"\"\n \
    \       ALRAIE\n\n        Alarm A interrupt enable\n        \"\"\"\n        return\
    \ self._alraie\n\n    @alraie.setter\n    def alraie(self, value: int) -> None:\n\
    \        self._alraie.value = value\n\n    @property\n    def tse(self) -> Field:\n\
    \        \"\"\"\n        TSE\n\n        Time stamp enable\n        \"\"\"\n  \
    \      return self._tse\n\n    @tse.setter\n    def tse(self, value: int) -> None:\n\
    \        self._tse.value = value\n\n    @property\n    def wute(self) -> Field:\n\
    \        \"\"\"\n        WUTE\n\n        Wakeup timer enable\n        \"\"\"\n\
    \        return self._wute\n\n    @wute.setter\n    def wute(self, value: int)\
    \ -> None:\n        self._wute.value = value\n\n    @property\n    def alrbe(self)\
    \ -> Field:\n        \"\"\"\n        ALRBE\n\n        Alarm B enable\n       \
    \ \"\"\"\n        return self._alrbe\n\n    @alrbe.setter\n    def alrbe(self,\
    \ value: int) -> None:\n        self._alrbe.value = value\n\n    @property\n \
    \   def alrae(self) -> Field:\n        \"\"\"\n        ALRAE\n\n        Alarm\
    \ A enable\n        \"\"\"\n        return self._alrae\n\n    @alrae.setter\n\
    \    def alrae(self, value: int) -> None:\n        self._alrae.value = value\n\
    \n    @property\n    def dce(self) -> Field:\n        \"\"\"\n        DCE\n\n\
    \        Coarse digital calibration\n                  enable\n        \"\"\"\n\
    \        return self._dce\n\n    @dce.setter\n    def dce(self, value: int) ->\
    \ None:\n        self._dce.value = value\n\n    @property\n    def fmt(self) ->\
    \ Field:\n        \"\"\"\n        FMT\n\n        Hour format\n        \"\"\"\n\
    \        return self._fmt\n\n    @fmt.setter\n    def fmt(self, value: int) ->\
    \ None:\n        self._fmt.value = value\n\n    @property\n    def bypshad(self)\
    \ -> Field:\n        \"\"\"\n        BYPSHAD\n\n        Bypass the shadow\n  \
    \                registers\n        \"\"\"\n        return self._bypshad\n\n \
    \   @bypshad.setter\n    def bypshad(self, value: int) -> None:\n        self._bypshad.value\
    \ = value\n\n    @property\n    def refckon(self) -> Field:\n        \"\"\"\n\
    \        REFCKON\n\n        Reference clock detection enable (50 or\n        \
    \          60 Hz)\n        \"\"\"\n        return self._refckon\n\n    @refckon.setter\n\
    \    def refckon(self, value: int) -> None:\n        self._refckon.value = value\n\
    \n    @property\n    def tsedge(self) -> Field:\n        \"\"\"\n        TSEDGE\n\
    \n        Time-stamp event active\n                  edge\n        \"\"\"\n  \
    \      return self._tsedge\n\n    @tsedge.setter\n    def tsedge(self, value:\
    \ int) -> None:\n        self._tsedge.value = value\n\n    @property\n    def\
    \ wcksel(self) -> Field:\n        \"\"\"\n        WCKSEL\n\n        Wakeup clock\
    \ selection\n        \"\"\"\n        return self._wcksel\n\n    @wcksel.setter\n\
    \    def wcksel(self, value: int) -> None:\n        self._wcksel.value = value\n\
    \n\nclass IsrRegister(Register):\n    \"\"\"\n    ISR\n\n    initialization and\
    \ status\n              register\n    \"\"\"\n\n    def __init__(self):\n    \
    \    self._alrawf = Field(\"alrawf\", 0, 1)\n        self._alrbwf = Field(\"alrbwf\"\
    , 1, 1)\n        self._wutwf = Field(\"wutwf\", 2, 1)\n        self._shpf = Field(\"\
    shpf\", 3, 1)\n        self._inits = Field(\"inits\", 4, 1)\n        self._rsf\
    \ = Field(\"rsf\", 5, 1)\n        self._initf = Field(\"initf\", 6, 1)\n     \
    \   self._init = Field(\"init\", 7, 1)\n        self._alraf = Field(\"alraf\"\
    , 8, 1)\n        self._alrbf = Field(\"alrbf\", 9, 1)\n        self._wutf = Field(\"\
    wutf\", 10, 1)\n        self._tsf = Field(\"tsf\", 11, 1)\n        self._tsovf\
    \ = Field(\"tsovf\", 12, 1)\n        self._tamp1f = Field(\"tamp1f\", 13, 1)\n\
    \        self._tamp2f = Field(\"tamp2f\", 14, 1)\n        self._recalpf = Field(\"\
    recalpf\", 16, 1)\n        super().__init__(\"ISR\", 0x40002800 + 0xC)\n\n   \
    \ @property\n    def alrawf(self) -> Field:\n        \"\"\"\n        ALRAWF\n\n\
    \        Alarm A write flag\n        \"\"\"\n        return self._alrawf\n\n \
    \   @alrawf.setter\n    def alrawf(self, value: int) -> None:\n        self._alrawf.value\
    \ = value\n\n    @property\n    def alrbwf(self) -> Field:\n        \"\"\"\n \
    \       ALRBWF\n\n        Alarm B write flag\n        \"\"\"\n        return self._alrbwf\n\
    \n    @alrbwf.setter\n    def alrbwf(self, value: int) -> None:\n        self._alrbwf.value\
    \ = value\n\n    @property\n    def wutwf(self) -> Field:\n        \"\"\"\n  \
    \      WUTWF\n\n        Wakeup timer write flag\n        \"\"\"\n        return\
    \ self._wutwf\n\n    @wutwf.setter\n    def wutwf(self, value: int) -> None:\n\
    \        self._wutwf.value = value\n\n    @property\n    def shpf(self) -> Field:\n\
    \        \"\"\"\n        SHPF\n\n        Shift operation pending\n        \"\"\
    \"\n        return self._shpf\n\n    @shpf.setter\n    def shpf(self, value: int)\
    \ -> None:\n        self._shpf.value = value\n\n    @property\n    def inits(self)\
    \ -> Field:\n        \"\"\"\n        INITS\n\n        Initialization status flag\n\
    \        \"\"\"\n        return self._inits\n\n    @inits.setter\n    def inits(self,\
    \ value: int) -> None:\n        self._inits.value = value\n\n    @property\n \
    \   def rsf(self) -> Field:\n        \"\"\"\n        RSF\n\n        Registers\
    \ synchronization\n                  flag\n        \"\"\"\n        return self._rsf\n\
    \n    @rsf.setter\n    def rsf(self, value: int) -> None:\n        self._rsf.value\
    \ = value\n\n    @property\n    def initf(self) -> Field:\n        \"\"\"\n  \
    \      INITF\n\n        Initialization flag\n        \"\"\"\n        return self._initf\n\
    \n    @initf.setter\n    def initf(self, value: int) -> None:\n        self._initf.value\
    \ = value\n\n    @property\n    def init(self) -> Field:\n        \"\"\"\n   \
    \     INIT\n\n        Initialization mode\n        \"\"\"\n        return self._init\n\
    \n    @init.setter\n    def init(self, value: int) -> None:\n        self._init.value\
    \ = value\n\n    @property\n    def alraf(self) -> Field:\n        \"\"\"\n  \
    \      ALRAF\n\n        Alarm A flag\n        \"\"\"\n        return self._alraf\n\
    \n    @alraf.setter\n    def alraf(self, value: int) -> None:\n        self._alraf.value\
    \ = value\n\n    @property\n    def alrbf(self) -> Field:\n        \"\"\"\n  \
    \      ALRBF\n\n        Alarm B flag\n        \"\"\"\n        return self._alrbf\n\
    \n    @alrbf.setter\n    def alrbf(self, value: int) -> None:\n        self._alrbf.value\
    \ = value\n\n    @property\n    def wutf(self) -> Field:\n        \"\"\"\n   \
    \     WUTF\n\n        Wakeup timer flag\n        \"\"\"\n        return self._wutf\n\
    \n    @wutf.setter\n    def wutf(self, value: int) -> None:\n        self._wutf.value\
    \ = value\n\n    @property\n    def tsf(self) -> Field:\n        \"\"\"\n    \
    \    TSF\n\n        Time-stamp flag\n        \"\"\"\n        return self._tsf\n\
    \n    @tsf.setter\n    def tsf(self, value: int) -> None:\n        self._tsf.value\
    \ = value\n\n    @property\n    def tsovf(self) -> Field:\n        \"\"\"\n  \
    \      TSOVF\n\n        Time-stamp overflow flag\n        \"\"\"\n        return\
    \ self._tsovf\n\n    @tsovf.setter\n    def tsovf(self, value: int) -> None:\n\
    \        self._tsovf.value = value\n\n    @property\n    def tamp1f(self) -> Field:\n\
    \        \"\"\"\n        TAMP1F\n\n        Tamper detection flag\n        \"\"\
    \"\n        return self._tamp1f\n\n    @tamp1f.setter\n    def tamp1f(self, value:\
    \ int) -> None:\n        self._tamp1f.value = value\n\n    @property\n    def\
    \ tamp2f(self) -> Field:\n        \"\"\"\n        TAMP2F\n\n        TAMPER2 detection\
    \ flag\n        \"\"\"\n        return self._tamp2f\n\n    @tamp2f.setter\n  \
    \  def tamp2f(self, value: int) -> None:\n        self._tamp2f.value = value\n\
    \n    @property\n    def recalpf(self) -> Field:\n        \"\"\"\n        RECALPF\n\
    \n        Recalibration pending Flag\n        \"\"\"\n        return self._recalpf\n\
    \n    @recalpf.setter\n    def recalpf(self, value: int) -> None:\n        self._recalpf.value\
    \ = value\n\n\nclass PrerRegister(Register):\n    \"\"\"\n    PRER\n\n    prescaler\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._prediv_a = Field(\"\
    prediv_a\", 16, 7)\n        self._prediv_s = Field(\"prediv_s\", 0, 15)\n    \
    \    super().__init__(\"PRER\", 0x40002800 + 0x10)\n\n    @property\n    def prediv_a(self)\
    \ -> Field:\n        \"\"\"\n        PREDIV_A\n\n        Asynchronous prescaler\n\
    \                  factor\n        \"\"\"\n        return self._prediv_a\n\n \
    \   @prediv_a.setter\n    def prediv_a(self, value: int) -> None:\n        self._prediv_a.value\
    \ = value\n\n    @property\n    def prediv_s(self) -> Field:\n        \"\"\"\n\
    \        PREDIV_S\n\n        Synchronous prescaler\n                  factor\n\
    \        \"\"\"\n        return self._prediv_s\n\n    @prediv_s.setter\n    def\
    \ prediv_s(self, value: int) -> None:\n        self._prediv_s.value = value\n\n\
    \nclass WutrRegister(Register):\n    \"\"\"\n    WUTR\n\n    wakeup timer register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._wut = Field(\"wut\", 0,\
    \ 16)\n        super().__init__(\"WUTR\", 0x40002800 + 0x14)\n\n    @property\n\
    \    def wut(self) -> Field:\n        \"\"\"\n        WUT\n\n        Wakeup auto-reload\
    \ value\n                  bits\n        \"\"\"\n        return self._wut\n\n\
    \    @wut.setter\n    def wut(self, value: int) -> None:\n        self._wut.value\
    \ = value\n\n\nclass CalibrRegister(Register):\n    \"\"\"\n    CALIBR\n\n   \
    \ calibration register\n    \"\"\"\n\n    def __init__(self):\n        self._dcs\
    \ = Field(\"dcs\", 7, 1)\n        self._dc = Field(\"dc\", 0, 5)\n        super().__init__(\"\
    CALIBR\", 0x40002800 + 0x18)\n\n    @property\n    def dcs(self) -> Field:\n \
    \       \"\"\"\n        DCS\n\n        Digital calibration sign\n        \"\"\"\
    \n        return self._dcs\n\n    @dcs.setter\n    def dcs(self, value: int) ->\
    \ None:\n        self._dcs.value = value\n\n    @property\n    def dc(self) ->\
    \ Field:\n        \"\"\"\n        DC\n\n        Digital calibration\n        \"\
    \"\"\n        return self._dc\n\n    @dc.setter\n    def dc(self, value: int)\
    \ -> None:\n        self._dc.value = value\n\n\nclass AlrmarRegister(Register):\n\
    \    \"\"\"\n    ALRMAR\n\n    alarm A register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._msk4 = Field(\"msk4\", 31, 1)\n        self._wdsel = Field(\"wdsel\"\
    , 30, 1)\n        self._dt = Field(\"dt\", 28, 2)\n        self._du = Field(\"\
    du\", 24, 4)\n        self._msk3 = Field(\"msk3\", 23, 1)\n        self._pm =\
    \ Field(\"pm\", 22, 1)\n        self._ht = Field(\"ht\", 20, 2)\n        self._hu\
    \ = Field(\"hu\", 16, 4)\n        self._msk2 = Field(\"msk2\", 15, 1)\n      \
    \  self._mnt = Field(\"mnt\", 12, 3)\n        self._mnu = Field(\"mnu\", 8, 4)\n\
    \        self._msk1 = Field(\"msk1\", 7, 1)\n        self._st = Field(\"st\",\
    \ 4, 3)\n        self._su = Field(\"su\", 0, 4)\n        super().__init__(\"ALRMAR\"\
    , 0x40002800 + 0x1C)\n\n    @property\n    def msk4(self) -> Field:\n        \"\
    \"\"\n        MSK4\n\n        Alarm A date mask\n        \"\"\"\n        return\
    \ self._msk4\n\n    @msk4.setter\n    def msk4(self, value: int) -> None:\n  \
    \      self._msk4.value = value\n\n    @property\n    def wdsel(self) -> Field:\n\
    \        \"\"\"\n        WDSEL\n\n        Week day selection\n        \"\"\"\n\
    \        return self._wdsel\n\n    @wdsel.setter\n    def wdsel(self, value: int)\
    \ -> None:\n        self._wdsel.value = value\n\n    @property\n    def dt(self)\
    \ -> Field:\n        \"\"\"\n        DT\n\n        Date tens in BCD format\n \
    \       \"\"\"\n        return self._dt\n\n    @dt.setter\n    def dt(self, value:\
    \ int) -> None:\n        self._dt.value = value\n\n    @property\n    def du(self)\
    \ -> Field:\n        \"\"\"\n        DU\n\n        Date units or day in BCD\n\
    \                  format\n        \"\"\"\n        return self._du\n\n    @du.setter\n\
    \    def du(self, value: int) -> None:\n        self._du.value = value\n\n   \
    \ @property\n    def msk3(self) -> Field:\n        \"\"\"\n        MSK3\n\n  \
    \      Alarm A hours mask\n        \"\"\"\n        return self._msk3\n\n    @msk3.setter\n\
    \    def msk3(self, value: int) -> None:\n        self._msk3.value = value\n\n\
    \    @property\n    def pm(self) -> Field:\n        \"\"\"\n        PM\n\n   \
    \     AM/PM notation\n        \"\"\"\n        return self._pm\n\n    @pm.setter\n\
    \    def pm(self, value: int) -> None:\n        self._pm.value = value\n\n   \
    \ @property\n    def ht(self) -> Field:\n        \"\"\"\n        HT\n\n      \
    \  Hour tens in BCD format\n        \"\"\"\n        return self._ht\n\n    @ht.setter\n\
    \    def ht(self, value: int) -> None:\n        self._ht.value = value\n\n   \
    \ @property\n    def hu(self) -> Field:\n        \"\"\"\n        HU\n\n      \
    \  Hour units in BCD format\n        \"\"\"\n        return self._hu\n\n    @hu.setter\n\
    \    def hu(self, value: int) -> None:\n        self._hu.value = value\n\n   \
    \ @property\n    def msk2(self) -> Field:\n        \"\"\"\n        MSK2\n\n  \
    \      Alarm A minutes mask\n        \"\"\"\n        return self._msk2\n\n   \
    \ @msk2.setter\n    def msk2(self, value: int) -> None:\n        self._msk2.value\
    \ = value\n\n    @property\n    def mnt(self) -> Field:\n        \"\"\"\n    \
    \    MNT\n\n        Minute tens in BCD format\n        \"\"\"\n        return\
    \ self._mnt\n\n    @mnt.setter\n    def mnt(self, value: int) -> None:\n     \
    \   self._mnt.value = value\n\n    @property\n    def mnu(self) -> Field:\n  \
    \      \"\"\"\n        MNU\n\n        Minute units in BCD format\n        \"\"\
    \"\n        return self._mnu\n\n    @mnu.setter\n    def mnu(self, value: int)\
    \ -> None:\n        self._mnu.value = value\n\n    @property\n    def msk1(self)\
    \ -> Field:\n        \"\"\"\n        MSK1\n\n        Alarm A seconds mask\n  \
    \      \"\"\"\n        return self._msk1\n\n    @msk1.setter\n    def msk1(self,\
    \ value: int) -> None:\n        self._msk1.value = value\n\n    @property\n  \
    \  def st(self) -> Field:\n        \"\"\"\n        ST\n\n        Second tens in\
    \ BCD format\n        \"\"\"\n        return self._st\n\n    @st.setter\n    def\
    \ st(self, value: int) -> None:\n        self._st.value = value\n\n    @property\n\
    \    def su(self) -> Field:\n        \"\"\"\n        SU\n\n        Second units\
    \ in BCD format\n        \"\"\"\n        return self._su\n\n    @su.setter\n \
    \   def su(self, value: int) -> None:\n        self._su.value = value\n\n\nclass\
    \ AlrmbrRegister(Register):\n    \"\"\"\n    ALRMBR\n\n    alarm B register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._msk4 = Field(\"msk4\", 31,\
    \ 1)\n        self._wdsel = Field(\"wdsel\", 30, 1)\n        self._dt = Field(\"\
    dt\", 28, 2)\n        self._du = Field(\"du\", 24, 4)\n        self._msk3 = Field(\"\
    msk3\", 23, 1)\n        self._pm = Field(\"pm\", 22, 1)\n        self._ht = Field(\"\
    ht\", 20, 2)\n        self._hu = Field(\"hu\", 16, 4)\n        self._msk2 = Field(\"\
    msk2\", 15, 1)\n        self._mnt = Field(\"mnt\", 12, 3)\n        self._mnu =\
    \ Field(\"mnu\", 8, 4)\n        self._msk1 = Field(\"msk1\", 7, 1)\n        self._st\
    \ = Field(\"st\", 4, 3)\n        self._su = Field(\"su\", 0, 4)\n        super().__init__(\"\
    ALRMBR\", 0x40002800 + 0x20)\n\n    @property\n    def msk4(self) -> Field:\n\
    \        \"\"\"\n        MSK4\n\n        Alarm B date mask\n        \"\"\"\n \
    \       return self._msk4\n\n    @msk4.setter\n    def msk4(self, value: int)\
    \ -> None:\n        self._msk4.value = value\n\n    @property\n    def wdsel(self)\
    \ -> Field:\n        \"\"\"\n        WDSEL\n\n        Week day selection\n   \
    \     \"\"\"\n        return self._wdsel\n\n    @wdsel.setter\n    def wdsel(self,\
    \ value: int) -> None:\n        self._wdsel.value = value\n\n    @property\n \
    \   def dt(self) -> Field:\n        \"\"\"\n        DT\n\n        Date tens in\
    \ BCD format\n        \"\"\"\n        return self._dt\n\n    @dt.setter\n    def\
    \ dt(self, value: int) -> None:\n        self._dt.value = value\n\n    @property\n\
    \    def du(self) -> Field:\n        \"\"\"\n        DU\n\n        Date units\
    \ or day in BCD\n                  format\n        \"\"\"\n        return self._du\n\
    \n    @du.setter\n    def du(self, value: int) -> None:\n        self._du.value\
    \ = value\n\n    @property\n    def msk3(self) -> Field:\n        \"\"\"\n   \
    \     MSK3\n\n        Alarm B hours mask\n        \"\"\"\n        return self._msk3\n\
    \n    @msk3.setter\n    def msk3(self, value: int) -> None:\n        self._msk3.value\
    \ = value\n\n    @property\n    def pm(self) -> Field:\n        \"\"\"\n     \
    \   PM\n\n        AM/PM notation\n        \"\"\"\n        return self._pm\n\n\
    \    @pm.setter\n    def pm(self, value: int) -> None:\n        self._pm.value\
    \ = value\n\n    @property\n    def ht(self) -> Field:\n        \"\"\"\n     \
    \   HT\n\n        Hour tens in BCD format\n        \"\"\"\n        return self._ht\n\
    \n    @ht.setter\n    def ht(self, value: int) -> None:\n        self._ht.value\
    \ = value\n\n    @property\n    def hu(self) -> Field:\n        \"\"\"\n     \
    \   HU\n\n        Hour units in BCD format\n        \"\"\"\n        return self._hu\n\
    \n    @hu.setter\n    def hu(self, value: int) -> None:\n        self._hu.value\
    \ = value\n\n    @property\n    def msk2(self) -> Field:\n        \"\"\"\n   \
    \     MSK2\n\n        Alarm B minutes mask\n        \"\"\"\n        return self._msk2\n\
    \n    @msk2.setter\n    def msk2(self, value: int) -> None:\n        self._msk2.value\
    \ = value\n\n    @property\n    def mnt(self) -> Field:\n        \"\"\"\n    \
    \    MNT\n\n        Minute tens in BCD format\n        \"\"\"\n        return\
    \ self._mnt\n\n    @mnt.setter\n    def mnt(self, value: int) -> None:\n     \
    \   self._mnt.value = value\n\n    @property\n    def mnu(self) -> Field:\n  \
    \      \"\"\"\n        MNU\n\n        Minute units in BCD format\n        \"\"\
    \"\n        return self._mnu\n\n    @mnu.setter\n    def mnu(self, value: int)\
    \ -> None:\n        self._mnu.value = value\n\n    @property\n    def msk1(self)\
    \ -> Field:\n        \"\"\"\n        MSK1\n\n        Alarm B seconds mask\n  \
    \      \"\"\"\n        return self._msk1\n\n    @msk1.setter\n    def msk1(self,\
    \ value: int) -> None:\n        self._msk1.value = value\n\n    @property\n  \
    \  def st(self) -> Field:\n        \"\"\"\n        ST\n\n        Second tens in\
    \ BCD format\n        \"\"\"\n        return self._st\n\n    @st.setter\n    def\
    \ st(self, value: int) -> None:\n        self._st.value = value\n\n    @property\n\
    \    def su(self) -> Field:\n        \"\"\"\n        SU\n\n        Second units\
    \ in BCD format\n        \"\"\"\n        return self._su\n\n    @su.setter\n \
    \   def su(self, value: int) -> None:\n        self._su.value = value\n\n\nclass\
    \ WprRegister(Register):\n    \"\"\"\n    WPR\n\n    write protection register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._key = Field(\"key\", 0,\
    \ 8)\n        super().__init__(\"WPR\", 0x40002800 + 0x24)\n\n    @property\n\
    \    def key(self) -> Field:\n        \"\"\"\n        KEY\n\n        Write protection\
    \ key\n        \"\"\"\n        return self._key\n\n    @key.setter\n    def key(self,\
    \ value: int) -> None:\n        self._key.value = value\n\n\nclass SsrRegister(Register):\n\
    \    \"\"\"\n    SSR\n\n    sub second register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ss = Field(\"ss\", 0, 16)\n        super().__init__(\"SSR\", 0x40002800\
    \ + 0x28)\n\n    @property\n    def ss(self) -> Field:\n        \"\"\"\n     \
    \   SS\n\n        Sub second value\n        \"\"\"\n        return self._ss\n\n\
    \    @ss.setter\n    def ss(self, value: int) -> None:\n        self._ss.value\
    \ = value\n\n\nclass ShiftrRegister(Register):\n    \"\"\"\n    SHIFTR\n\n   \
    \ shift control register\n    \"\"\"\n\n    def __init__(self):\n        self._add1s\
    \ = Field(\"add1s\", 31, 1)\n        self._subfs = Field(\"subfs\", 0, 15)\n \
    \       super().__init__(\"SHIFTR\", 0x40002800 + 0x2C)\n\n    @property\n   \
    \ def add1s(self) -> Field:\n        \"\"\"\n        ADD1S\n\n        Add one\
    \ second\n        \"\"\"\n        return self._add1s\n\n    @add1s.setter\n  \
    \  def add1s(self, value: int) -> None:\n        self._add1s.value = value\n\n\
    \    @property\n    def subfs(self) -> Field:\n        \"\"\"\n        SUBFS\n\
    \n        Subtract a fraction of a\n                  second\n        \"\"\"\n\
    \        return self._subfs\n\n    @subfs.setter\n    def subfs(self, value: int)\
    \ -> None:\n        self._subfs.value = value\n\n\nclass TstrRegister(Register):\n\
    \    \"\"\"\n    TSTR\n\n    time stamp time register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pm = Field(\"pm\", 22, 1)\n        self._ht = Field(\"ht\", 20,\
    \ 2)\n        self._hu = Field(\"hu\", 16, 4)\n        self._mnt = Field(\"mnt\"\
    , 12, 3)\n        self._mnu = Field(\"mnu\", 8, 4)\n        self._st = Field(\"\
    st\", 4, 3)\n        self._su = Field(\"su\", 0, 4)\n        super().__init__(\"\
    TSTR\", 0x40002800 + 0x30)\n\n    @property\n    def pm(self) -> Field:\n    \
    \    \"\"\"\n        PM\n\n        AM/PM notation\n        \"\"\"\n        return\
    \ self._pm\n\n    @pm.setter\n    def pm(self, value: int) -> None:\n        self._pm.value\
    \ = value\n\n    @property\n    def ht(self) -> Field:\n        \"\"\"\n     \
    \   HT\n\n        Hour tens in BCD format\n        \"\"\"\n        return self._ht\n\
    \n    @ht.setter\n    def ht(self, value: int) -> None:\n        self._ht.value\
    \ = value\n\n    @property\n    def hu(self) -> Field:\n        \"\"\"\n     \
    \   HU\n\n        Hour units in BCD format\n        \"\"\"\n        return self._hu\n\
    \n    @hu.setter\n    def hu(self, value: int) -> None:\n        self._hu.value\
    \ = value\n\n    @property\n    def mnt(self) -> Field:\n        \"\"\"\n    \
    \    MNT\n\n        Minute tens in BCD format\n        \"\"\"\n        return\
    \ self._mnt\n\n    @mnt.setter\n    def mnt(self, value: int) -> None:\n     \
    \   self._mnt.value = value\n\n    @property\n    def mnu(self) -> Field:\n  \
    \      \"\"\"\n        MNU\n\n        Minute units in BCD format\n        \"\"\
    \"\n        return self._mnu\n\n    @mnu.setter\n    def mnu(self, value: int)\
    \ -> None:\n        self._mnu.value = value\n\n    @property\n    def st(self)\
    \ -> Field:\n        \"\"\"\n        ST\n\n        Second tens in BCD format\n\
    \        \"\"\"\n        return self._st\n\n    @st.setter\n    def st(self, value:\
    \ int) -> None:\n        self._st.value = value\n\n    @property\n    def su(self)\
    \ -> Field:\n        \"\"\"\n        SU\n\n        Second units in BCD format\n\
    \        \"\"\"\n        return self._su\n\n    @su.setter\n    def su(self, value:\
    \ int) -> None:\n        self._su.value = value\n\n\nclass TsdrRegister(Register):\n\
    \    \"\"\"\n    TSDR\n\n    time stamp date register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._wdu = Field(\"wdu\", 13, 3)\n        self._mt = Field(\"mt\", 12,\
    \ 1)\n        self._mu = Field(\"mu\", 8, 4)\n        self._dt = Field(\"dt\"\
    , 4, 2)\n        self._du = Field(\"du\", 0, 4)\n        super().__init__(\"TSDR\"\
    , 0x40002800 + 0x34)\n\n    @property\n    def wdu(self) -> Field:\n        \"\
    \"\"\n        WDU\n\n        Week day units\n        \"\"\"\n        return self._wdu\n\
    \n    @wdu.setter\n    def wdu(self, value: int) -> None:\n        self._wdu.value\
    \ = value\n\n    @property\n    def mt(self) -> Field:\n        \"\"\"\n     \
    \   MT\n\n        Month tens in BCD format\n        \"\"\"\n        return self._mt\n\
    \n    @mt.setter\n    def mt(self, value: int) -> None:\n        self._mt.value\
    \ = value\n\n    @property\n    def mu(self) -> Field:\n        \"\"\"\n     \
    \   MU\n\n        Month units in BCD format\n        \"\"\"\n        return self._mu\n\
    \n    @mu.setter\n    def mu(self, value: int) -> None:\n        self._mu.value\
    \ = value\n\n    @property\n    def dt(self) -> Field:\n        \"\"\"\n     \
    \   DT\n\n        Date tens in BCD format\n        \"\"\"\n        return self._dt\n\
    \n    @dt.setter\n    def dt(self, value: int) -> None:\n        self._dt.value\
    \ = value\n\n    @property\n    def du(self) -> Field:\n        \"\"\"\n     \
    \   DU\n\n        Date units in BCD format\n        \"\"\"\n        return self._du\n\
    \n    @du.setter\n    def du(self, value: int) -> None:\n        self._du.value\
    \ = value\n\n\nclass TsssrRegister(Register):\n    \"\"\"\n    TSSSR\n\n    timestamp\
    \ sub second register\n    \"\"\"\n\n    def __init__(self):\n        self._ss\
    \ = Field(\"ss\", 0, 16)\n        super().__init__(\"TSSSR\", 0x40002800 + 0x38)\n\
    \n    @property\n    def ss(self) -> Field:\n        \"\"\"\n        SS\n\n  \
    \      Sub second value\n        \"\"\"\n        return self._ss\n\n    @ss.setter\n\
    \    def ss(self, value: int) -> None:\n        self._ss.value = value\n\n\nclass\
    \ CalrRegister(Register):\n    \"\"\"\n    CALR\n\n    calibration register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._calp = Field(\"calp\", 15,\
    \ 1)\n        self._calw8 = Field(\"calw8\", 14, 1)\n        self._calw16 = Field(\"\
    calw16\", 13, 1)\n        self._calm = Field(\"calm\", 0, 9)\n        super().__init__(\"\
    CALR\", 0x40002800 + 0x3C)\n\n    @property\n    def calp(self) -> Field:\n  \
    \      \"\"\"\n        CALP\n\n        Increase frequency of RTC by 488.5\n  \
    \                ppm\n        \"\"\"\n        return self._calp\n\n    @calp.setter\n\
    \    def calp(self, value: int) -> None:\n        self._calp.value = value\n\n\
    \    @property\n    def calw8(self) -> Field:\n        \"\"\"\n        CALW8\n\
    \n        Use an 8-second calibration cycle\n                  period\n      \
    \  \"\"\"\n        return self._calw8\n\n    @calw8.setter\n    def calw8(self,\
    \ value: int) -> None:\n        self._calw8.value = value\n\n    @property\n \
    \   def calw16(self) -> Field:\n        \"\"\"\n        CALW16\n\n        Use\
    \ a 16-second calibration cycle\n                  period\n        \"\"\"\n  \
    \      return self._calw16\n\n    @calw16.setter\n    def calw16(self, value:\
    \ int) -> None:\n        self._calw16.value = value\n\n    @property\n    def\
    \ calm(self) -> Field:\n        \"\"\"\n        CALM\n\n        Calibration minus\n\
    \        \"\"\"\n        return self._calm\n\n    @calm.setter\n    def calm(self,\
    \ value: int) -> None:\n        self._calm.value = value\n\n\nclass TafcrRegister(Register):\n\
    \    \"\"\"\n    TAFCR\n\n    tamper and alternate function configuration\n  \
    \            register\n    \"\"\"\n\n    def __init__(self):\n        self._alarmouttype\
    \ = Field(\"alarmouttype\", 18, 1)\n        self._tsinsel = Field(\"tsinsel\"\
    , 17, 1)\n        self._tamp1insel = Field(\"tamp1insel\", 16, 1)\n        self._tamppudis\
    \ = Field(\"tamppudis\", 15, 1)\n        self._tampprch = Field(\"tampprch\",\
    \ 13, 2)\n        self._tampflt = Field(\"tampflt\", 11, 2)\n        self._tampfreq\
    \ = Field(\"tampfreq\", 8, 3)\n        self._tampts = Field(\"tampts\", 7, 1)\n\
    \        self._tamp2trg = Field(\"tamp2trg\", 4, 1)\n        self._tamp2e = Field(\"\
    tamp2e\", 3, 1)\n        self._tampie = Field(\"tampie\", 2, 1)\n        self._tamp1trg\
    \ = Field(\"tamp1trg\", 1, 1)\n        self._tamp1e = Field(\"tamp1e\", 0, 1)\n\
    \        super().__init__(\"TAFCR\", 0x40002800 + 0x40)\n\n    @property\n   \
    \ def alarmouttype(self) -> Field:\n        \"\"\"\n        ALARMOUTTYPE\n\n \
    \       AFO_ALARM output type\n        \"\"\"\n        return self._alarmouttype\n\
    \n    @alarmouttype.setter\n    def alarmouttype(self, value: int) -> None:\n\
    \        self._alarmouttype.value = value\n\n    @property\n    def tsinsel(self)\
    \ -> Field:\n        \"\"\"\n        TSINSEL\n\n        TIMESTAMP mapping\n  \
    \      \"\"\"\n        return self._tsinsel\n\n    @tsinsel.setter\n    def tsinsel(self,\
    \ value: int) -> None:\n        self._tsinsel.value = value\n\n    @property\n\
    \    def tamp1insel(self) -> Field:\n        \"\"\"\n        TAMP1INSEL\n\n  \
    \      TAMPER1 mapping\n        \"\"\"\n        return self._tamp1insel\n\n  \
    \  @tamp1insel.setter\n    def tamp1insel(self, value: int) -> None:\n       \
    \ self._tamp1insel.value = value\n\n    @property\n    def tamppudis(self) ->\
    \ Field:\n        \"\"\"\n        TAMPPUDIS\n\n        TAMPER pull-up disable\n\
    \        \"\"\"\n        return self._tamppudis\n\n    @tamppudis.setter\n   \
    \ def tamppudis(self, value: int) -> None:\n        self._tamppudis.value = value\n\
    \n    @property\n    def tampprch(self) -> Field:\n        \"\"\"\n        TAMPPRCH\n\
    \n        Tamper precharge duration\n        \"\"\"\n        return self._tampprch\n\
    \n    @tampprch.setter\n    def tampprch(self, value: int) -> None:\n        self._tampprch.value\
    \ = value\n\n    @property\n    def tampflt(self) -> Field:\n        \"\"\"\n\
    \        TAMPFLT\n\n        Tamper filter count\n        \"\"\"\n        return\
    \ self._tampflt\n\n    @tampflt.setter\n    def tampflt(self, value: int) -> None:\n\
    \        self._tampflt.value = value\n\n    @property\n    def tampfreq(self)\
    \ -> Field:\n        \"\"\"\n        TAMPFREQ\n\n        Tamper sampling frequency\n\
    \        \"\"\"\n        return self._tampfreq\n\n    @tampfreq.setter\n    def\
    \ tampfreq(self, value: int) -> None:\n        self._tampfreq.value = value\n\n\
    \    @property\n    def tampts(self) -> Field:\n        \"\"\"\n        TAMPTS\n\
    \n        Activate timestamp on tamper detection\n                  event\n  \
    \      \"\"\"\n        return self._tampts\n\n    @tampts.setter\n    def tampts(self,\
    \ value: int) -> None:\n        self._tampts.value = value\n\n    @property\n\
    \    def tamp2trg(self) -> Field:\n        \"\"\"\n        TAMP2TRG\n\n      \
    \  Active level for tamper 2\n        \"\"\"\n        return self._tamp2trg\n\n\
    \    @tamp2trg.setter\n    def tamp2trg(self, value: int) -> None:\n        self._tamp2trg.value\
    \ = value\n\n    @property\n    def tamp2e(self) -> Field:\n        \"\"\"\n \
    \       TAMP2E\n\n        Tamper 2 detection enable\n        \"\"\"\n        return\
    \ self._tamp2e\n\n    @tamp2e.setter\n    def tamp2e(self, value: int) -> None:\n\
    \        self._tamp2e.value = value\n\n    @property\n    def tampie(self) ->\
    \ Field:\n        \"\"\"\n        TAMPIE\n\n        Tamper interrupt enable\n\
    \        \"\"\"\n        return self._tampie\n\n    @tampie.setter\n    def tampie(self,\
    \ value: int) -> None:\n        self._tampie.value = value\n\n    @property\n\
    \    def tamp1trg(self) -> Field:\n        \"\"\"\n        TAMP1TRG\n\n      \
    \  Active level for tamper 1\n        \"\"\"\n        return self._tamp1trg\n\n\
    \    @tamp1trg.setter\n    def tamp1trg(self, value: int) -> None:\n        self._tamp1trg.value\
    \ = value\n\n    @property\n    def tamp1e(self) -> Field:\n        \"\"\"\n \
    \       TAMP1E\n\n        Tamper 1 detection enable\n        \"\"\"\n        return\
    \ self._tamp1e\n\n    @tamp1e.setter\n    def tamp1e(self, value: int) -> None:\n\
    \        self._tamp1e.value = value\n\n\nclass AlrmassrRegister(Register):\n \
    \   \"\"\"\n    ALRMASSR\n\n    alarm A sub second register\n    \"\"\"\n\n  \
    \  def __init__(self):\n        self._maskss = Field(\"maskss\", 24, 4)\n    \
    \    self._ss = Field(\"ss\", 0, 15)\n        super().__init__(\"ALRMASSR\", 0x40002800\
    \ + 0x44)\n\n    @property\n    def maskss(self) -> Field:\n        \"\"\"\n \
    \       MASKSS\n\n        Mask the most-significant bits starting\n          \
    \        at this bit\n        \"\"\"\n        return self._maskss\n\n    @maskss.setter\n\
    \    def maskss(self, value: int) -> None:\n        self._maskss.value = value\n\
    \n    @property\n    def ss(self) -> Field:\n        \"\"\"\n        SS\n\n  \
    \      Sub seconds value\n        \"\"\"\n        return self._ss\n\n    @ss.setter\n\
    \    def ss(self, value: int) -> None:\n        self._ss.value = value\n\n\nclass\
    \ AlrmbssrRegister(Register):\n    \"\"\"\n    ALRMBSSR\n\n    alarm B sub second\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._maskss = Field(\"\
    maskss\", 24, 4)\n        self._ss = Field(\"ss\", 0, 15)\n        super().__init__(\"\
    ALRMBSSR\", 0x40002800 + 0x48)\n\n    @property\n    def maskss(self) -> Field:\n\
    \        \"\"\"\n        MASKSS\n\n        Mask the most-significant bits starting\n\
    \                  at this bit\n        \"\"\"\n        return self._maskss\n\n\
    \    @maskss.setter\n    def maskss(self, value: int) -> None:\n        self._maskss.value\
    \ = value\n\n    @property\n    def ss(self) -> Field:\n        \"\"\"\n     \
    \   SS\n\n        Sub seconds value\n        \"\"\"\n        return self._ss\n\
    \n    @ss.setter\n    def ss(self, value: int) -> None:\n        self._ss.value\
    \ = value\n\n\nclass Bkp0rRegister(Register):\n    \"\"\"\n    BKP0R\n\n    backup\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"\
    bkp\", 0, 32)\n        super().__init__(\"BKP0R\", 0x40002800 + 0x50)\n\n    @property\n\
    \    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n   \
    \     \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp1rRegister(Register):\n\
    \    \"\"\"\n    BKP1R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP1R\"\
    , 0x40002800 + 0x54)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp2rRegister(Register):\n    \"\"\"\n    BKP2R\n\n    backup\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"\
    bkp\", 0, 32)\n        super().__init__(\"BKP2R\", 0x40002800 + 0x58)\n\n    @property\n\
    \    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n   \
    \     \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp3rRegister(Register):\n\
    \    \"\"\"\n    BKP3R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP3R\"\
    , 0x40002800 + 0x5C)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp4rRegister(Register):\n    \"\"\"\n    BKP4R\n\n    backup\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"\
    bkp\", 0, 32)\n        super().__init__(\"BKP4R\", 0x40002800 + 0x60)\n\n    @property\n\
    \    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n   \
    \     \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp5rRegister(Register):\n\
    \    \"\"\"\n    BKP5R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP5R\"\
    , 0x40002800 + 0x64)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp6rRegister(Register):\n    \"\"\"\n    BKP6R\n\n    backup\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"\
    bkp\", 0, 32)\n        super().__init__(\"BKP6R\", 0x40002800 + 0x68)\n\n    @property\n\
    \    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n   \
    \     \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp7rRegister(Register):\n\
    \    \"\"\"\n    BKP7R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP7R\"\
    , 0x40002800 + 0x6C)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp8rRegister(Register):\n    \"\"\"\n    BKP8R\n\n    backup\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"\
    bkp\", 0, 32)\n        super().__init__(\"BKP8R\", 0x40002800 + 0x70)\n\n    @property\n\
    \    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n   \
    \     \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp9rRegister(Register):\n\
    \    \"\"\"\n    BKP9R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP9R\"\
    , 0x40002800 + 0x74)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp10rRegister(Register):\n    \"\"\"\n    BKP10R\n\n   \
    \ backup register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp =\
    \ Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP10R\", 0x40002800 + 0x78)\n\
    \n    @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n\
    \        BKP\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n  \
    \  def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n\nclass\
    \ Bkp11rRegister(Register):\n    \"\"\"\n    BKP11R\n\n    backup register\n \
    \   \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"bkp\", 0, 32)\n\
    \        super().__init__(\"BKP11R\", 0x40002800 + 0x7C)\n\n    @property\n  \
    \  def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n     \
    \   \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp12rRegister(Register):\n\
    \    \"\"\"\n    BKP12R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP12R\"\
    , 0x40002800 + 0x80)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp13rRegister(Register):\n    \"\"\"\n    BKP13R\n\n   \
    \ backup register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp =\
    \ Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP13R\", 0x40002800 + 0x84)\n\
    \n    @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n\
    \        BKP\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n  \
    \  def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n\nclass\
    \ Bkp14rRegister(Register):\n    \"\"\"\n    BKP14R\n\n    backup register\n \
    \   \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"bkp\", 0, 32)\n\
    \        super().__init__(\"BKP14R\", 0x40002800 + 0x88)\n\n    @property\n  \
    \  def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n     \
    \   \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp15rRegister(Register):\n\
    \    \"\"\"\n    BKP15R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP15R\"\
    , 0x40002800 + 0x8C)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp16rRegister(Register):\n    \"\"\"\n    BKP16R\n\n   \
    \ backup register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp =\
    \ Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP16R\", 0x40002800 + 0x90)\n\
    \n    @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n\
    \        BKP\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n  \
    \  def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n\nclass\
    \ Bkp17rRegister(Register):\n    \"\"\"\n    BKP17R\n\n    backup register\n \
    \   \"\"\"\n\n    def __init__(self):\n        self._bkp = Field(\"bkp\", 0, 32)\n\
    \        super().__init__(\"BKP17R\", 0x40002800 + 0x94)\n\n    @property\n  \
    \  def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n        BKP\n     \
    \   \"\"\"\n        return self._bkp\n\n    @bkp.setter\n    def bkp(self, value:\
    \ int) -> None:\n        self._bkp.value = value\n\n\nclass Bkp18rRegister(Register):\n\
    \    \"\"\"\n    BKP18R\n\n    backup register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bkp = Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP18R\"\
    , 0x40002800 + 0x98)\n\n    @property\n    def bkp(self) -> Field:\n        \"\
    \"\"\n        BKP\n\n        BKP\n        \"\"\"\n        return self._bkp\n\n\
    \    @bkp.setter\n    def bkp(self, value: int) -> None:\n        self._bkp.value\
    \ = value\n\n\nclass Bkp19rRegister(Register):\n    \"\"\"\n    BKP19R\n\n   \
    \ backup register\n    \"\"\"\n\n    def __init__(self):\n        self._bkp =\
    \ Field(\"bkp\", 0, 32)\n        super().__init__(\"BKP19R\", 0x40002800 + 0x9C)\n\
    \n    @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n\
    \        BKP\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n  \
    \  def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n\nclass\
    \ Rtc(Peripheral):\n    \"\"\"\n    RTC\n\n    Real-time clock\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._tr = TrRegister()\n        self._dr =\
    \ DrRegister()\n        self._cr = CrRegister()\n        self._isr = IsrRegister()\n\
    \        self._prer = PrerRegister()\n        self._wutr = WutrRegister()\n  \
    \      self._calibr = CalibrRegister()\n        self._alrmar = AlrmarRegister()\n\
    \        self._alrmbr = AlrmbrRegister()\n        self._wpr = WprRegister()\n\
    \        self._ssr = SsrRegister()\n        self._shiftr = ShiftrRegister()\n\
    \        self._tstr = TstrRegister()\n        self._tsdr = TsdrRegister()\n  \
    \      self._tsssr = TsssrRegister()\n        self._calr = CalrRegister()\n  \
    \      self._tafcr = TafcrRegister()\n        self._alrmassr = AlrmassrRegister()\n\
    \        self._alrmbssr = AlrmbssrRegister()\n        self._bkp0r = Bkp0rRegister()\n\
    \        self._bkp1r = Bkp1rRegister()\n        self._bkp2r = Bkp2rRegister()\n\
    \        self._bkp3r = Bkp3rRegister()\n        self._bkp4r = Bkp4rRegister()\n\
    \        self._bkp5r = Bkp5rRegister()\n        self._bkp6r = Bkp6rRegister()\n\
    \        self._bkp7r = Bkp7rRegister()\n        self._bkp8r = Bkp8rRegister()\n\
    \        self._bkp9r = Bkp9rRegister()\n        self._bkp10r = Bkp10rRegister()\n\
    \        self._bkp11r = Bkp11rRegister()\n        self._bkp12r = Bkp12rRegister()\n\
    \        self._bkp13r = Bkp13rRegister()\n        self._bkp14r = Bkp14rRegister()\n\
    \        self._bkp15r = Bkp15rRegister()\n        self._bkp16r = Bkp16rRegister()\n\
    \        self._bkp17r = Bkp17rRegister()\n        self._bkp18r = Bkp18rRegister()\n\
    \        self._bkp19r = Bkp19rRegister()\n        super().__init__(\"rtc\", 0x40002800)\n\
    \n    @property\n    def tr(self) -> TrRegister:\n        return self._tr\n\n\
    \    @tr.setter\n    def tr(self, value: int) -> None:\n        self._tr.value\
    \ = value\n\n    @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\
    \n    @dr.setter\n    def dr(self, value: int) -> None:\n        self._dr.value\
    \ = value\n\n    @property\n    def cr(self) -> CrRegister:\n        return self._cr\n\
    \n    @cr.setter\n    def cr(self, value: int) -> None:\n        self._cr.value\
    \ = value\n\n    @property\n    def isr(self) -> IsrRegister:\n        return\
    \ self._isr\n\n    @isr.setter\n    def isr(self, value: int) -> None:\n     \
    \   self._isr.value = value\n\n    @property\n    def prer(self) -> PrerRegister:\n\
    \        return self._prer\n\n    @prer.setter\n    def prer(self, value: int)\
    \ -> None:\n        self._prer.value = value\n\n    @property\n    def wutr(self)\
    \ -> WutrRegister:\n        return self._wutr\n\n    @wutr.setter\n    def wutr(self,\
    \ value: int) -> None:\n        self._wutr.value = value\n\n    @property\n  \
    \  def calibr(self) -> CalibrRegister:\n        return self._calibr\n\n    @calibr.setter\n\
    \    def calibr(self, value: int) -> None:\n        self._calibr.value = value\n\
    \n    @property\n    def alrmar(self) -> AlrmarRegister:\n        return self._alrmar\n\
    \n    @alrmar.setter\n    def alrmar(self, value: int) -> None:\n        self._alrmar.value\
    \ = value\n\n    @property\n    def alrmbr(self) -> AlrmbrRegister:\n        return\
    \ self._alrmbr\n\n    @alrmbr.setter\n    def alrmbr(self, value: int) -> None:\n\
    \        self._alrmbr.value = value\n\n    @property\n    def wpr(self) -> WprRegister:\n\
    \        return self._wpr\n\n    @wpr.setter\n    def wpr(self, value: int) ->\
    \ None:\n        self._wpr.value = value\n\n    @property\n    def ssr(self) ->\
    \ SsrRegister:\n        return self._ssr\n\n    @ssr.setter\n    def ssr(self,\
    \ value: int) -> None:\n        self._ssr.value = value\n\n    @property\n   \
    \ def shiftr(self) -> ShiftrRegister:\n        return self._shiftr\n\n    @shiftr.setter\n\
    \    def shiftr(self, value: int) -> None:\n        self._shiftr.value = value\n\
    \n    @property\n    def tstr(self) -> TstrRegister:\n        return self._tstr\n\
    \n    @tstr.setter\n    def tstr(self, value: int) -> None:\n        self._tstr.value\
    \ = value\n\n    @property\n    def tsdr(self) -> TsdrRegister:\n        return\
    \ self._tsdr\n\n    @tsdr.setter\n    def tsdr(self, value: int) -> None:\n  \
    \      self._tsdr.value = value\n\n    @property\n    def tsssr(self) -> TsssrRegister:\n\
    \        return self._tsssr\n\n    @tsssr.setter\n    def tsssr(self, value: int)\
    \ -> None:\n        self._tsssr.value = value\n\n    @property\n    def calr(self)\
    \ -> CalrRegister:\n        return self._calr\n\n    @calr.setter\n    def calr(self,\
    \ value: int) -> None:\n        self._calr.value = value\n\n    @property\n  \
    \  def tafcr(self) -> TafcrRegister:\n        return self._tafcr\n\n    @tafcr.setter\n\
    \    def tafcr(self, value: int) -> None:\n        self._tafcr.value = value\n\
    \n    @property\n    def alrmassr(self) -> AlrmassrRegister:\n        return self._alrmassr\n\
    \n    @alrmassr.setter\n    def alrmassr(self, value: int) -> None:\n        self._alrmassr.value\
    \ = value\n\n    @property\n    def alrmbssr(self) -> AlrmbssrRegister:\n    \
    \    return self._alrmbssr\n\n    @alrmbssr.setter\n    def alrmbssr(self, value:\
    \ int) -> None:\n        self._alrmbssr.value = value\n\n    @property\n    def\
    \ bkp0r(self) -> Bkp0rRegister:\n        return self._bkp0r\n\n    @bkp0r.setter\n\
    \    def bkp0r(self, value: int) -> None:\n        self._bkp0r.value = value\n\
    \n    @property\n    def bkp1r(self) -> Bkp1rRegister:\n        return self._bkp1r\n\
    \n    @bkp1r.setter\n    def bkp1r(self, value: int) -> None:\n        self._bkp1r.value\
    \ = value\n\n    @property\n    def bkp2r(self) -> Bkp2rRegister:\n        return\
    \ self._bkp2r\n\n    @bkp2r.setter\n    def bkp2r(self, value: int) -> None:\n\
    \        self._bkp2r.value = value\n\n    @property\n    def bkp3r(self) -> Bkp3rRegister:\n\
    \        return self._bkp3r\n\n    @bkp3r.setter\n    def bkp3r(self, value: int)\
    \ -> None:\n        self._bkp3r.value = value\n\n    @property\n    def bkp4r(self)\
    \ -> Bkp4rRegister:\n        return self._bkp4r\n\n    @bkp4r.setter\n    def\
    \ bkp4r(self, value: int) -> None:\n        self._bkp4r.value = value\n\n    @property\n\
    \    def bkp5r(self) -> Bkp5rRegister:\n        return self._bkp5r\n\n    @bkp5r.setter\n\
    \    def bkp5r(self, value: int) -> None:\n        self._bkp5r.value = value\n\
    \n    @property\n    def bkp6r(self) -> Bkp6rRegister:\n        return self._bkp6r\n\
    \n    @bkp6r.setter\n    def bkp6r(self, value: int) -> None:\n        self._bkp6r.value\
    \ = value\n\n    @property\n    def bkp7r(self) -> Bkp7rRegister:\n        return\
    \ self._bkp7r\n\n    @bkp7r.setter\n    def bkp7r(self, value: int) -> None:\n\
    \        self._bkp7r.value = value\n\n    @property\n    def bkp8r(self) -> Bkp8rRegister:\n\
    \        return self._bkp8r\n\n    @bkp8r.setter\n    def bkp8r(self, value: int)\
    \ -> None:\n        self._bkp8r.value = value\n\n    @property\n    def bkp9r(self)\
    \ -> Bkp9rRegister:\n        return self._bkp9r\n\n    @bkp9r.setter\n    def\
    \ bkp9r(self, value: int) -> None:\n        self._bkp9r.value = value\n\n    @property\n\
    \    def bkp10r(self) -> Bkp10rRegister:\n        return self._bkp10r\n\n    @bkp10r.setter\n\
    \    def bkp10r(self, value: int) -> None:\n        self._bkp10r.value = value\n\
    \n    @property\n    def bkp11r(self) -> Bkp11rRegister:\n        return self._bkp11r\n\
    \n    @bkp11r.setter\n    def bkp11r(self, value: int) -> None:\n        self._bkp11r.value\
    \ = value\n\n    @property\n    def bkp12r(self) -> Bkp12rRegister:\n        return\
    \ self._bkp12r\n\n    @bkp12r.setter\n    def bkp12r(self, value: int) -> None:\n\
    \        self._bkp12r.value = value\n\n    @property\n    def bkp13r(self) ->\
    \ Bkp13rRegister:\n        return self._bkp13r\n\n    @bkp13r.setter\n    def\
    \ bkp13r(self, value: int) -> None:\n        self._bkp13r.value = value\n\n  \
    \  @property\n    def bkp14r(self) -> Bkp14rRegister:\n        return self._bkp14r\n\
    \n    @bkp14r.setter\n    def bkp14r(self, value: int) -> None:\n        self._bkp14r.value\
    \ = value\n\n    @property\n    def bkp15r(self) -> Bkp15rRegister:\n        return\
    \ self._bkp15r\n\n    @bkp15r.setter\n    def bkp15r(self, value: int) -> None:\n\
    \        self._bkp15r.value = value\n\n    @property\n    def bkp16r(self) ->\
    \ Bkp16rRegister:\n        return self._bkp16r\n\n    @bkp16r.setter\n    def\
    \ bkp16r(self, value: int) -> None:\n        self._bkp16r.value = value\n\n  \
    \  @property\n    def bkp17r(self) -> Bkp17rRegister:\n        return self._bkp17r\n\
    \n    @bkp17r.setter\n    def bkp17r(self, value: int) -> None:\n        self._bkp17r.value\
    \ = value\n\n    @property\n    def bkp18r(self) -> Bkp18rRegister:\n        return\
    \ self._bkp18r\n\n    @bkp18r.setter\n    def bkp18r(self, value: int) -> None:\n\
    \        self._bkp18r.value = value\n\n    @property\n    def bkp19r(self) ->\
    \ Bkp19rRegister:\n        return self._bkp19r\n\n    @bkp19r.setter\n    def\
    \ bkp19r(self, value: int) -> None:\n        self._bkp19r.value = value\n"
  name: RTC
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass PowerRegister(Register):\n    \"\"\"\n    POWER\n\n    power\
    \ control register\n    \"\"\"\n\n    def __init__(self):\n        self._pwrctrl\
    \ = Field(\"pwrctrl\", 0, 2)\n        super().__init__(\"POWER\", 0x40012C00 +\
    \ 0x0)\n\n    @property\n    def pwrctrl(self) -> Field:\n        \"\"\"\n   \
    \     PWRCTRL\n\n        PWRCTRL\n        \"\"\"\n        return self._pwrctrl\n\
    \n    @pwrctrl.setter\n    def pwrctrl(self, value: int) -> None:\n        self._pwrctrl.value\
    \ = value\n\n\nclass ClkcrRegister(Register):\n    \"\"\"\n    CLKCR\n\n    SDI\
    \ clock control register\n    \"\"\"\n\n    def __init__(self):\n        self._hwfc_en\
    \ = Field(\"hwfc_en\", 14, 1)\n        self._negedge = Field(\"negedge\", 13,\
    \ 1)\n        self._widbus = Field(\"widbus\", 11, 2)\n        self._bypass =\
    \ Field(\"bypass\", 10, 1)\n        self._pwrsav = Field(\"pwrsav\", 9, 1)\n \
    \       self._clken = Field(\"clken\", 8, 1)\n        self._clkdiv = Field(\"\
    clkdiv\", 0, 8)\n        super().__init__(\"CLKCR\", 0x40012C00 + 0x4)\n\n   \
    \ @property\n    def hwfc_en(self) -> Field:\n        \"\"\"\n        HWFC_EN\n\
    \n        HW Flow Control enable\n        \"\"\"\n        return self._hwfc_en\n\
    \n    @hwfc_en.setter\n    def hwfc_en(self, value: int) -> None:\n        self._hwfc_en.value\
    \ = value\n\n    @property\n    def negedge(self) -> Field:\n        \"\"\"\n\
    \        NEGEDGE\n\n        SDIO_CK dephasing selection\n                  bit\n\
    \        \"\"\"\n        return self._negedge\n\n    @negedge.setter\n    def\
    \ negedge(self, value: int) -> None:\n        self._negedge.value = value\n\n\
    \    @property\n    def widbus(self) -> Field:\n        \"\"\"\n        WIDBUS\n\
    \n        Wide bus mode enable bit\n        \"\"\"\n        return self._widbus\n\
    \n    @widbus.setter\n    def widbus(self, value: int) -> None:\n        self._widbus.value\
    \ = value\n\n    @property\n    def bypass(self) -> Field:\n        \"\"\"\n \
    \       BYPASS\n\n        Clock divider bypass enable\n                  bit\n\
    \        \"\"\"\n        return self._bypass\n\n    @bypass.setter\n    def bypass(self,\
    \ value: int) -> None:\n        self._bypass.value = value\n\n    @property\n\
    \    def pwrsav(self) -> Field:\n        \"\"\"\n        PWRSAV\n\n        Power\
    \ saving configuration\n                  bit\n        \"\"\"\n        return\
    \ self._pwrsav\n\n    @pwrsav.setter\n    def pwrsav(self, value: int) -> None:\n\
    \        self._pwrsav.value = value\n\n    @property\n    def clken(self) -> Field:\n\
    \        \"\"\"\n        CLKEN\n\n        Clock enable bit\n        \"\"\"\n \
    \       return self._clken\n\n    @clken.setter\n    def clken(self, value: int)\
    \ -> None:\n        self._clken.value = value\n\n    @property\n    def clkdiv(self)\
    \ -> Field:\n        \"\"\"\n        CLKDIV\n\n        Clock divide factor\n \
    \       \"\"\"\n        return self._clkdiv\n\n    @clkdiv.setter\n    def clkdiv(self,\
    \ value: int) -> None:\n        self._clkdiv.value = value\n\n\nclass ArgRegister(Register):\n\
    \    \"\"\"\n    ARG\n\n    argument register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cmdarg = Field(\"cmdarg\", 0, 32)\n        super().__init__(\"\
    ARG\", 0x40012C00 + 0x8)\n\n    @property\n    def cmdarg(self) -> Field:\n  \
    \      \"\"\"\n        CMDARG\n\n        Command argument\n        \"\"\"\n  \
    \      return self._cmdarg\n\n    @cmdarg.setter\n    def cmdarg(self, value:\
    \ int) -> None:\n        self._cmdarg.value = value\n\n\nclass CmdRegister(Register):\n\
    \    \"\"\"\n    CMD\n\n    command register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ce_atacmd = Field(\"ce_atacmd\", 14, 1)\n        self._nien = Field(\"\
    nien\", 13, 1)\n        self._encmdcompl = Field(\"encmdcompl\", 12, 1)\n    \
    \    self._sdiosuspend = Field(\"sdiosuspend\", 11, 1)\n        self._cpsmen =\
    \ Field(\"cpsmen\", 10, 1)\n        self._waitpend = Field(\"waitpend\", 9, 1)\n\
    \        self._waitint = Field(\"waitint\", 8, 1)\n        self._waitresp = Field(\"\
    waitresp\", 6, 2)\n        self._cmdindex = Field(\"cmdindex\", 0, 6)\n      \
    \  super().__init__(\"CMD\", 0x40012C00 + 0xC)\n\n    @property\n    def ce_atacmd(self)\
    \ -> Field:\n        \"\"\"\n        CE_ATACMD\n\n        CE-ATA command\n   \
    \     \"\"\"\n        return self._ce_atacmd\n\n    @ce_atacmd.setter\n    def\
    \ ce_atacmd(self, value: int) -> None:\n        self._ce_atacmd.value = value\n\
    \n    @property\n    def nien(self) -> Field:\n        \"\"\"\n        NIEN\n\n\
    \        not Interrupt Enable\n        \"\"\"\n        return self._nien\n\n \
    \   @nien.setter\n    def nien(self, value: int) -> None:\n        self._nien.value\
    \ = value\n\n    @property\n    def encmdcompl(self) -> Field:\n        \"\"\"\
    \n        ENCMDCOMPL\n\n        Enable CMD completion\n        \"\"\"\n      \
    \  return self._encmdcompl\n\n    @encmdcompl.setter\n    def encmdcompl(self,\
    \ value: int) -> None:\n        self._encmdcompl.value = value\n\n    @property\n\
    \    def sdiosuspend(self) -> Field:\n        \"\"\"\n        SDIOSUSPEND\n\n\
    \        SD I/O suspend command\n        \"\"\"\n        return self._sdiosuspend\n\
    \n    @sdiosuspend.setter\n    def sdiosuspend(self, value: int) -> None:\n  \
    \      self._sdiosuspend.value = value\n\n    @property\n    def cpsmen(self)\
    \ -> Field:\n        \"\"\"\n        CPSMEN\n\n        Command path state machine\
    \ (CPSM) Enable\n                  bit\n        \"\"\"\n        return self._cpsmen\n\
    \n    @cpsmen.setter\n    def cpsmen(self, value: int) -> None:\n        self._cpsmen.value\
    \ = value\n\n    @property\n    def waitpend(self) -> Field:\n        \"\"\"\n\
    \        WAITPEND\n\n        CPSM Waits for ends of data transfer\n          \
    \        (CmdPend internal signal).\n        \"\"\"\n        return self._waitpend\n\
    \n    @waitpend.setter\n    def waitpend(self, value: int) -> None:\n        self._waitpend.value\
    \ = value\n\n    @property\n    def waitint(self) -> Field:\n        \"\"\"\n\
    \        WAITINT\n\n        CPSM waits for interrupt\n                  request\n\
    \        \"\"\"\n        return self._waitint\n\n    @waitint.setter\n    def\
    \ waitint(self, value: int) -> None:\n        self._waitint.value = value\n\n\
    \    @property\n    def waitresp(self) -> Field:\n        \"\"\"\n        WAITRESP\n\
    \n        Wait for response bits\n        \"\"\"\n        return self._waitresp\n\
    \n    @waitresp.setter\n    def waitresp(self, value: int) -> None:\n        self._waitresp.value\
    \ = value\n\n    @property\n    def cmdindex(self) -> Field:\n        \"\"\"\n\
    \        CMDINDEX\n\n        Command index\n        \"\"\"\n        return self._cmdindex\n\
    \n    @cmdindex.setter\n    def cmdindex(self, value: int) -> None:\n        self._cmdindex.value\
    \ = value\n\n\nclass RespcmdRegister(Register):\n    \"\"\"\n    RESPCMD\n\n \
    \   command response register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._respcmd = Field(\"respcmd\", 0, 6)\n        super().__init__(\"RESPCMD\"\
    , 0x40012C00 + 0x10)\n\n    @property\n    def respcmd(self) -> Field:\n     \
    \   \"\"\"\n        RESPCMD\n\n        Response command index\n        \"\"\"\n\
    \        return self._respcmd\n\n    @respcmd.setter\n    def respcmd(self, value:\
    \ int) -> None:\n        self._respcmd.value = value\n\n\nclass Resp1Register(Register):\n\
    \    \"\"\"\n    RESP1\n\n    response 1..4 register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cardstatus1 = Field(\"cardstatus1\", 0, 32)\n        super().__init__(\"\
    RESP1\", 0x40012C00 + 0x14)\n\n    @property\n    def cardstatus1(self) -> Field:\n\
    \        \"\"\"\n        CARDSTATUS1\n\n        Card Status\n        \"\"\"\n\
    \        return self._cardstatus1\n\n    @cardstatus1.setter\n    def cardstatus1(self,\
    \ value: int) -> None:\n        self._cardstatus1.value = value\n\n\nclass Resp2Register(Register):\n\
    \    \"\"\"\n    RESP2\n\n    response 1..4 register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cardstatus2 = Field(\"cardstatus2\", 0, 32)\n        super().__init__(\"\
    RESP2\", 0x40012C00 + 0x18)\n\n    @property\n    def cardstatus2(self) -> Field:\n\
    \        \"\"\"\n        CARDSTATUS2\n\n        Card Status\n        \"\"\"\n\
    \        return self._cardstatus2\n\n    @cardstatus2.setter\n    def cardstatus2(self,\
    \ value: int) -> None:\n        self._cardstatus2.value = value\n\n\nclass Resp3Register(Register):\n\
    \    \"\"\"\n    RESP3\n\n    response 1..4 register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cardstatus3 = Field(\"cardstatus3\", 0, 32)\n        super().__init__(\"\
    RESP3\", 0x40012C00 + 0x1C)\n\n    @property\n    def cardstatus3(self) -> Field:\n\
    \        \"\"\"\n        CARDSTATUS3\n\n        Card Status\n        \"\"\"\n\
    \        return self._cardstatus3\n\n    @cardstatus3.setter\n    def cardstatus3(self,\
    \ value: int) -> None:\n        self._cardstatus3.value = value\n\n\nclass Resp4Register(Register):\n\
    \    \"\"\"\n    RESP4\n\n    response 1..4 register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cardstatus4 = Field(\"cardstatus4\", 0, 32)\n        super().__init__(\"\
    RESP4\", 0x40012C00 + 0x20)\n\n    @property\n    def cardstatus4(self) -> Field:\n\
    \        \"\"\"\n        CARDSTATUS4\n\n        Card Status\n        \"\"\"\n\
    \        return self._cardstatus4\n\n    @cardstatus4.setter\n    def cardstatus4(self,\
    \ value: int) -> None:\n        self._cardstatus4.value = value\n\n\nclass DtimerRegister(Register):\n\
    \    \"\"\"\n    DTIMER\n\n    data timer register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._datatime = Field(\"datatime\", 0, 32)\n        super().__init__(\"\
    DTIMER\", 0x40012C00 + 0x24)\n\n    @property\n    def datatime(self) -> Field:\n\
    \        \"\"\"\n        DATATIME\n\n        Data timeout period\n        \"\"\
    \"\n        return self._datatime\n\n    @datatime.setter\n    def datatime(self,\
    \ value: int) -> None:\n        self._datatime.value = value\n\n\nclass DlenRegister(Register):\n\
    \    \"\"\"\n    DLEN\n\n    data length register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._datalength = Field(\"datalength\", 0, 25)\n        super().__init__(\"\
    DLEN\", 0x40012C00 + 0x28)\n\n    @property\n    def datalength(self) -> Field:\n\
    \        \"\"\"\n        DATALENGTH\n\n        Data length value\n        \"\"\
    \"\n        return self._datalength\n\n    @datalength.setter\n    def datalength(self,\
    \ value: int) -> None:\n        self._datalength.value = value\n\n\nclass DctrlRegister(Register):\n\
    \    \"\"\"\n    DCTRL\n\n    data control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._sdioen = Field(\"sdioen\", 11, 1)\n        self._rwmod = Field(\"\
    rwmod\", 10, 1)\n        self._rwstop = Field(\"rwstop\", 9, 1)\n        self._rwstart\
    \ = Field(\"rwstart\", 8, 1)\n        self._dblocksize = Field(\"dblocksize\"\
    , 4, 4)\n        self._dmaen = Field(\"dmaen\", 3, 1)\n        self._dtmode =\
    \ Field(\"dtmode\", 2, 1)\n        self._dtdir = Field(\"dtdir\", 1, 1)\n    \
    \    self._dten = Field(\"dten\", 0, 1)\n        super().__init__(\"DCTRL\", 0x40012C00\
    \ + 0x2C)\n\n    @property\n    def sdioen(self) -> Field:\n        \"\"\"\n \
    \       SDIOEN\n\n        SD I/O enable functions\n        \"\"\"\n        return\
    \ self._sdioen\n\n    @sdioen.setter\n    def sdioen(self, value: int) -> None:\n\
    \        self._sdioen.value = value\n\n    @property\n    def rwmod(self) -> Field:\n\
    \        \"\"\"\n        RWMOD\n\n        Read wait mode\n        \"\"\"\n   \
    \     return self._rwmod\n\n    @rwmod.setter\n    def rwmod(self, value: int)\
    \ -> None:\n        self._rwmod.value = value\n\n    @property\n    def rwstop(self)\
    \ -> Field:\n        \"\"\"\n        RWSTOP\n\n        Read wait stop\n      \
    \  \"\"\"\n        return self._rwstop\n\n    @rwstop.setter\n    def rwstop(self,\
    \ value: int) -> None:\n        self._rwstop.value = value\n\n    @property\n\
    \    def rwstart(self) -> Field:\n        \"\"\"\n        RWSTART\n\n        Read\
    \ wait start\n        \"\"\"\n        return self._rwstart\n\n    @rwstart.setter\n\
    \    def rwstart(self, value: int) -> None:\n        self._rwstart.value = value\n\
    \n    @property\n    def dblocksize(self) -> Field:\n        \"\"\"\n        DBLOCKSIZE\n\
    \n        Data block size\n        \"\"\"\n        return self._dblocksize\n\n\
    \    @dblocksize.setter\n    def dblocksize(self, value: int) -> None:\n     \
    \   self._dblocksize.value = value\n\n    @property\n    def dmaen(self) -> Field:\n\
    \        \"\"\"\n        DMAEN\n\n        DMA enable bit\n        \"\"\"\n   \
    \     return self._dmaen\n\n    @dmaen.setter\n    def dmaen(self, value: int)\
    \ -> None:\n        self._dmaen.value = value\n\n    @property\n    def dtmode(self)\
    \ -> Field:\n        \"\"\"\n        DTMODE\n\n        Data transfer mode selection\
    \ 1: Stream\n                  or SDIO multibyte data transfer.\n        \"\"\"\
    \n        return self._dtmode\n\n    @dtmode.setter\n    def dtmode(self, value:\
    \ int) -> None:\n        self._dtmode.value = value\n\n    @property\n    def\
    \ dtdir(self) -> Field:\n        \"\"\"\n        DTDIR\n\n        Data transfer\
    \ direction\n                  selection\n        \"\"\"\n        return self._dtdir\n\
    \n    @dtdir.setter\n    def dtdir(self, value: int) -> None:\n        self._dtdir.value\
    \ = value\n\n    @property\n    def dten(self) -> Field:\n        \"\"\"\n   \
    \     DTEN\n\n        DTEN\n        \"\"\"\n        return self._dten\n\n    @dten.setter\n\
    \    def dten(self, value: int) -> None:\n        self._dten.value = value\n\n\
    \nclass DcountRegister(Register):\n    \"\"\"\n    DCOUNT\n\n    data counter\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._datacount = Field(\"\
    datacount\", 0, 25)\n        super().__init__(\"DCOUNT\", 0x40012C00 + 0x30)\n\
    \n    @property\n    def datacount(self) -> Field:\n        \"\"\"\n        DATACOUNT\n\
    \n        Data count value\n        \"\"\"\n        return self._datacount\n\n\
    \    @datacount.setter\n    def datacount(self, value: int) -> None:\n       \
    \ self._datacount.value = value\n\n\nclass StaRegister(Register):\n    \"\"\"\n\
    \    STA\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n     \
    \   self._ceataend = Field(\"ceataend\", 23, 1)\n        self._sdioit = Field(\"\
    sdioit\", 22, 1)\n        self._rxdavl = Field(\"rxdavl\", 21, 1)\n        self._txdavl\
    \ = Field(\"txdavl\", 20, 1)\n        self._rxfifoe = Field(\"rxfifoe\", 19, 1)\n\
    \        self._txfifoe = Field(\"txfifoe\", 18, 1)\n        self._rxfifof = Field(\"\
    rxfifof\", 17, 1)\n        self._txfifof = Field(\"txfifof\", 16, 1)\n       \
    \ self._rxfifohf = Field(\"rxfifohf\", 15, 1)\n        self._txfifohe = Field(\"\
    txfifohe\", 14, 1)\n        self._rxact = Field(\"rxact\", 13, 1)\n        self._txact\
    \ = Field(\"txact\", 12, 1)\n        self._cmdact = Field(\"cmdact\", 11, 1)\n\
    \        self._dbckend = Field(\"dbckend\", 10, 1)\n        self._stbiterr = Field(\"\
    stbiterr\", 9, 1)\n        self._dataend = Field(\"dataend\", 8, 1)\n        self._cmdsent\
    \ = Field(\"cmdsent\", 7, 1)\n        self._cmdrend = Field(\"cmdrend\", 6, 1)\n\
    \        self._rxoverr = Field(\"rxoverr\", 5, 1)\n        self._txunderr = Field(\"\
    txunderr\", 4, 1)\n        self._dtimeout = Field(\"dtimeout\", 3, 1)\n      \
    \  self._ctimeout = Field(\"ctimeout\", 2, 1)\n        self._dcrcfail = Field(\"\
    dcrcfail\", 1, 1)\n        self._ccrcfail = Field(\"ccrcfail\", 0, 1)\n      \
    \  super().__init__(\"STA\", 0x40012C00 + 0x34)\n\n    @property\n    def ceataend(self)\
    \ -> Field:\n        \"\"\"\n        CEATAEND\n\n        CE-ATA command completion\
    \ signal\n                  received for CMD61\n        \"\"\"\n        return\
    \ self._ceataend\n\n    @ceataend.setter\n    def ceataend(self, value: int) ->\
    \ None:\n        self._ceataend.value = value\n\n    @property\n    def sdioit(self)\
    \ -> Field:\n        \"\"\"\n        SDIOIT\n\n        SDIO interrupt received\n\
    \        \"\"\"\n        return self._sdioit\n\n    @sdioit.setter\n    def sdioit(self,\
    \ value: int) -> None:\n        self._sdioit.value = value\n\n    @property\n\
    \    def rxdavl(self) -> Field:\n        \"\"\"\n        RXDAVL\n\n        Data\
    \ available in receive\n                  FIFO\n        \"\"\"\n        return\
    \ self._rxdavl\n\n    @rxdavl.setter\n    def rxdavl(self, value: int) -> None:\n\
    \        self._rxdavl.value = value\n\n    @property\n    def txdavl(self) ->\
    \ Field:\n        \"\"\"\n        TXDAVL\n\n        Data available in transmit\n\
    \                  FIFO\n        \"\"\"\n        return self._txdavl\n\n    @txdavl.setter\n\
    \    def txdavl(self, value: int) -> None:\n        self._txdavl.value = value\n\
    \n    @property\n    def rxfifoe(self) -> Field:\n        \"\"\"\n        RXFIFOE\n\
    \n        Receive FIFO empty\n        \"\"\"\n        return self._rxfifoe\n\n\
    \    @rxfifoe.setter\n    def rxfifoe(self, value: int) -> None:\n        self._rxfifoe.value\
    \ = value\n\n    @property\n    def txfifoe(self) -> Field:\n        \"\"\"\n\
    \        TXFIFOE\n\n        Transmit FIFO empty\n        \"\"\"\n        return\
    \ self._txfifoe\n\n    @txfifoe.setter\n    def txfifoe(self, value: int) -> None:\n\
    \        self._txfifoe.value = value\n\n    @property\n    def rxfifof(self) ->\
    \ Field:\n        \"\"\"\n        RXFIFOF\n\n        Receive FIFO full\n     \
    \   \"\"\"\n        return self._rxfifof\n\n    @rxfifof.setter\n    def rxfifof(self,\
    \ value: int) -> None:\n        self._rxfifof.value = value\n\n    @property\n\
    \    def txfifof(self) -> Field:\n        \"\"\"\n        TXFIFOF\n\n        Transmit\
    \ FIFO full\n        \"\"\"\n        return self._txfifof\n\n    @txfifof.setter\n\
    \    def txfifof(self, value: int) -> None:\n        self._txfifof.value = value\n\
    \n    @property\n    def rxfifohf(self) -> Field:\n        \"\"\"\n        RXFIFOHF\n\
    \n        Receive FIFO half full: there are at\n                  least 8 words\
    \ in the FIFO\n        \"\"\"\n        return self._rxfifohf\n\n    @rxfifohf.setter\n\
    \    def rxfifohf(self, value: int) -> None:\n        self._rxfifohf.value = value\n\
    \n    @property\n    def txfifohe(self) -> Field:\n        \"\"\"\n        TXFIFOHE\n\
    \n        Transmit FIFO half empty: at least 8\n                  words can be\
    \ written into the FIFO\n        \"\"\"\n        return self._txfifohe\n\n   \
    \ @txfifohe.setter\n    def txfifohe(self, value: int) -> None:\n        self._txfifohe.value\
    \ = value\n\n    @property\n    def rxact(self) -> Field:\n        \"\"\"\n  \
    \      RXACT\n\n        Data receive in progress\n        \"\"\"\n        return\
    \ self._rxact\n\n    @rxact.setter\n    def rxact(self, value: int) -> None:\n\
    \        self._rxact.value = value\n\n    @property\n    def txact(self) -> Field:\n\
    \        \"\"\"\n        TXACT\n\n        Data transmit in progress\n        \"\
    \"\"\n        return self._txact\n\n    @txact.setter\n    def txact(self, value:\
    \ int) -> None:\n        self._txact.value = value\n\n    @property\n    def cmdact(self)\
    \ -> Field:\n        \"\"\"\n        CMDACT\n\n        Command transfer in\n \
    \                 progress\n        \"\"\"\n        return self._cmdact\n\n  \
    \  @cmdact.setter\n    def cmdact(self, value: int) -> None:\n        self._cmdact.value\
    \ = value\n\n    @property\n    def dbckend(self) -> Field:\n        \"\"\"\n\
    \        DBCKEND\n\n        Data block sent/received (CRC check\n            \
    \      passed)\n        \"\"\"\n        return self._dbckend\n\n    @dbckend.setter\n\
    \    def dbckend(self, value: int) -> None:\n        self._dbckend.value = value\n\
    \n    @property\n    def stbiterr(self) -> Field:\n        \"\"\"\n        STBITERR\n\
    \n        Start bit not detected on all data\n                  signals in wide\
    \ bus mode\n        \"\"\"\n        return self._stbiterr\n\n    @stbiterr.setter\n\
    \    def stbiterr(self, value: int) -> None:\n        self._stbiterr.value = value\n\
    \n    @property\n    def dataend(self) -> Field:\n        \"\"\"\n        DATAEND\n\
    \n        Data end (data counter, SDIDCOUNT, is\n                  zero)\n   \
    \     \"\"\"\n        return self._dataend\n\n    @dataend.setter\n    def dataend(self,\
    \ value: int) -> None:\n        self._dataend.value = value\n\n    @property\n\
    \    def cmdsent(self) -> Field:\n        \"\"\"\n        CMDSENT\n\n        Command\
    \ sent (no response\n                  required)\n        \"\"\"\n        return\
    \ self._cmdsent\n\n    @cmdsent.setter\n    def cmdsent(self, value: int) -> None:\n\
    \        self._cmdsent.value = value\n\n    @property\n    def cmdrend(self) ->\
    \ Field:\n        \"\"\"\n        CMDREND\n\n        Command response received\
    \ (CRC check\n                  passed)\n        \"\"\"\n        return self._cmdrend\n\
    \n    @cmdrend.setter\n    def cmdrend(self, value: int) -> None:\n        self._cmdrend.value\
    \ = value\n\n    @property\n    def rxoverr(self) -> Field:\n        \"\"\"\n\
    \        RXOVERR\n\n        Received FIFO overrun\n                  error\n \
    \       \"\"\"\n        return self._rxoverr\n\n    @rxoverr.setter\n    def rxoverr(self,\
    \ value: int) -> None:\n        self._rxoverr.value = value\n\n    @property\n\
    \    def txunderr(self) -> Field:\n        \"\"\"\n        TXUNDERR\n\n      \
    \  Transmit FIFO underrun\n                  error\n        \"\"\"\n        return\
    \ self._txunderr\n\n    @txunderr.setter\n    def txunderr(self, value: int) ->\
    \ None:\n        self._txunderr.value = value\n\n    @property\n    def dtimeout(self)\
    \ -> Field:\n        \"\"\"\n        DTIMEOUT\n\n        Data timeout\n      \
    \  \"\"\"\n        return self._dtimeout\n\n    @dtimeout.setter\n    def dtimeout(self,\
    \ value: int) -> None:\n        self._dtimeout.value = value\n\n    @property\n\
    \    def ctimeout(self) -> Field:\n        \"\"\"\n        CTIMEOUT\n\n      \
    \  Command response timeout\n        \"\"\"\n        return self._ctimeout\n\n\
    \    @ctimeout.setter\n    def ctimeout(self, value: int) -> None:\n        self._ctimeout.value\
    \ = value\n\n    @property\n    def dcrcfail(self) -> Field:\n        \"\"\"\n\
    \        DCRCFAIL\n\n        Data block sent/received (CRC check\n           \
    \       failed)\n        \"\"\"\n        return self._dcrcfail\n\n    @dcrcfail.setter\n\
    \    def dcrcfail(self, value: int) -> None:\n        self._dcrcfail.value = value\n\
    \n    @property\n    def ccrcfail(self) -> Field:\n        \"\"\"\n        CCRCFAIL\n\
    \n        Command response received (CRC check\n                  failed)\n  \
    \      \"\"\"\n        return self._ccrcfail\n\n    @ccrcfail.setter\n    def\
    \ ccrcfail(self, value: int) -> None:\n        self._ccrcfail.value = value\n\n\
    \nclass IcrRegister(Register):\n    \"\"\"\n    ICR\n\n    interrupt clear register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ceataendc = Field(\"ceataendc\"\
    , 23, 1)\n        self._sdioitc = Field(\"sdioitc\", 22, 1)\n        self._dbckendc\
    \ = Field(\"dbckendc\", 10, 1)\n        self._stbiterrc = Field(\"stbiterrc\"\
    , 9, 1)\n        self._dataendc = Field(\"dataendc\", 8, 1)\n        self._cmdsentc\
    \ = Field(\"cmdsentc\", 7, 1)\n        self._cmdrendc = Field(\"cmdrendc\", 6,\
    \ 1)\n        self._rxoverrc = Field(\"rxoverrc\", 5, 1)\n        self._txunderrc\
    \ = Field(\"txunderrc\", 4, 1)\n        self._dtimeoutc = Field(\"dtimeoutc\"\
    , 3, 1)\n        self._ctimeoutc = Field(\"ctimeoutc\", 2, 1)\n        self._dcrcfailc\
    \ = Field(\"dcrcfailc\", 1, 1)\n        self._ccrcfailc = Field(\"ccrcfailc\"\
    , 0, 1)\n        super().__init__(\"ICR\", 0x40012C00 + 0x38)\n\n    @property\n\
    \    def ceataendc(self) -> Field:\n        \"\"\"\n        CEATAENDC\n\n    \
    \    CEATAEND flag clear bit\n        \"\"\"\n        return self._ceataendc\n\
    \n    @ceataendc.setter\n    def ceataendc(self, value: int) -> None:\n      \
    \  self._ceataendc.value = value\n\n    @property\n    def sdioitc(self) -> Field:\n\
    \        \"\"\"\n        SDIOITC\n\n        SDIOIT flag clear bit\n        \"\"\
    \"\n        return self._sdioitc\n\n    @sdioitc.setter\n    def sdioitc(self,\
    \ value: int) -> None:\n        self._sdioitc.value = value\n\n    @property\n\
    \    def dbckendc(self) -> Field:\n        \"\"\"\n        DBCKENDC\n\n      \
    \  DBCKEND flag clear bit\n        \"\"\"\n        return self._dbckendc\n\n \
    \   @dbckendc.setter\n    def dbckendc(self, value: int) -> None:\n        self._dbckendc.value\
    \ = value\n\n    @property\n    def stbiterrc(self) -> Field:\n        \"\"\"\n\
    \        STBITERRC\n\n        STBITERR flag clear bit\n        \"\"\"\n      \
    \  return self._stbiterrc\n\n    @stbiterrc.setter\n    def stbiterrc(self, value:\
    \ int) -> None:\n        self._stbiterrc.value = value\n\n    @property\n    def\
    \ dataendc(self) -> Field:\n        \"\"\"\n        DATAENDC\n\n        DATAEND\
    \ flag clear bit\n        \"\"\"\n        return self._dataendc\n\n    @dataendc.setter\n\
    \    def dataendc(self, value: int) -> None:\n        self._dataendc.value = value\n\
    \n    @property\n    def cmdsentc(self) -> Field:\n        \"\"\"\n        CMDSENTC\n\
    \n        CMDSENT flag clear bit\n        \"\"\"\n        return self._cmdsentc\n\
    \n    @cmdsentc.setter\n    def cmdsentc(self, value: int) -> None:\n        self._cmdsentc.value\
    \ = value\n\n    @property\n    def cmdrendc(self) -> Field:\n        \"\"\"\n\
    \        CMDRENDC\n\n        CMDREND flag clear bit\n        \"\"\"\n        return\
    \ self._cmdrendc\n\n    @cmdrendc.setter\n    def cmdrendc(self, value: int) ->\
    \ None:\n        self._cmdrendc.value = value\n\n    @property\n    def rxoverrc(self)\
    \ -> Field:\n        \"\"\"\n        RXOVERRC\n\n        RXOVERR flag clear bit\n\
    \        \"\"\"\n        return self._rxoverrc\n\n    @rxoverrc.setter\n    def\
    \ rxoverrc(self, value: int) -> None:\n        self._rxoverrc.value = value\n\n\
    \    @property\n    def txunderrc(self) -> Field:\n        \"\"\"\n        TXUNDERRC\n\
    \n        TXUNDERR flag clear bit\n        \"\"\"\n        return self._txunderrc\n\
    \n    @txunderrc.setter\n    def txunderrc(self, value: int) -> None:\n      \
    \  self._txunderrc.value = value\n\n    @property\n    def dtimeoutc(self) ->\
    \ Field:\n        \"\"\"\n        DTIMEOUTC\n\n        DTIMEOUT flag clear bit\n\
    \        \"\"\"\n        return self._dtimeoutc\n\n    @dtimeoutc.setter\n   \
    \ def dtimeoutc(self, value: int) -> None:\n        self._dtimeoutc.value = value\n\
    \n    @property\n    def ctimeoutc(self) -> Field:\n        \"\"\"\n        CTIMEOUTC\n\
    \n        CTIMEOUT flag clear bit\n        \"\"\"\n        return self._ctimeoutc\n\
    \n    @ctimeoutc.setter\n    def ctimeoutc(self, value: int) -> None:\n      \
    \  self._ctimeoutc.value = value\n\n    @property\n    def dcrcfailc(self) ->\
    \ Field:\n        \"\"\"\n        DCRCFAILC\n\n        DCRCFAIL flag clear bit\n\
    \        \"\"\"\n        return self._dcrcfailc\n\n    @dcrcfailc.setter\n   \
    \ def dcrcfailc(self, value: int) -> None:\n        self._dcrcfailc.value = value\n\
    \n    @property\n    def ccrcfailc(self) -> Field:\n        \"\"\"\n        CCRCFAILC\n\
    \n        CCRCFAIL flag clear bit\n        \"\"\"\n        return self._ccrcfailc\n\
    \n    @ccrcfailc.setter\n    def ccrcfailc(self, value: int) -> None:\n      \
    \  self._ccrcfailc.value = value\n\n\nclass MaskRegister(Register):\n    \"\"\"\
    \n    MASK\n\n    mask register\n    \"\"\"\n\n    def __init__(self):\n     \
    \   self._ceataendie = Field(\"ceataendie\", 23, 1)\n        self._sdioitie =\
    \ Field(\"sdioitie\", 22, 1)\n        self._rxdavlie = Field(\"rxdavlie\", 21,\
    \ 1)\n        self._txdavlie = Field(\"txdavlie\", 20, 1)\n        self._rxfifoeie\
    \ = Field(\"rxfifoeie\", 19, 1)\n        self._txfifoeie = Field(\"txfifoeie\"\
    , 18, 1)\n        self._rxfifofie = Field(\"rxfifofie\", 17, 1)\n        self._txfifofie\
    \ = Field(\"txfifofie\", 16, 1)\n        self._rxfifohfie = Field(\"rxfifohfie\"\
    , 15, 1)\n        self._txfifoheie = Field(\"txfifoheie\", 14, 1)\n        self._rxactie\
    \ = Field(\"rxactie\", 13, 1)\n        self._txactie = Field(\"txactie\", 12,\
    \ 1)\n        self._cmdactie = Field(\"cmdactie\", 11, 1)\n        self._dbckendie\
    \ = Field(\"dbckendie\", 10, 1)\n        self._stbiterrie = Field(\"stbiterrie\"\
    , 9, 1)\n        self._dataendie = Field(\"dataendie\", 8, 1)\n        self._cmdsentie\
    \ = Field(\"cmdsentie\", 7, 1)\n        self._cmdrendie = Field(\"cmdrendie\"\
    , 6, 1)\n        self._rxoverrie = Field(\"rxoverrie\", 5, 1)\n        self._txunderrie\
    \ = Field(\"txunderrie\", 4, 1)\n        self._dtimeoutie = Field(\"dtimeoutie\"\
    , 3, 1)\n        self._ctimeoutie = Field(\"ctimeoutie\", 2, 1)\n        self._dcrcfailie\
    \ = Field(\"dcrcfailie\", 1, 1)\n        self._ccrcfailie = Field(\"ccrcfailie\"\
    , 0, 1)\n        super().__init__(\"MASK\", 0x40012C00 + 0x3C)\n\n    @property\n\
    \    def ceataendie(self) -> Field:\n        \"\"\"\n        CEATAENDIE\n\n  \
    \      CE-ATA command completion signal\n                  received interrupt\
    \ enable\n        \"\"\"\n        return self._ceataendie\n\n    @ceataendie.setter\n\
    \    def ceataendie(self, value: int) -> None:\n        self._ceataendie.value\
    \ = value\n\n    @property\n    def sdioitie(self) -> Field:\n        \"\"\"\n\
    \        SDIOITIE\n\n        SDIO mode interrupt received interrupt\n        \
    \          enable\n        \"\"\"\n        return self._sdioitie\n\n    @sdioitie.setter\n\
    \    def sdioitie(self, value: int) -> None:\n        self._sdioitie.value = value\n\
    \n    @property\n    def rxdavlie(self) -> Field:\n        \"\"\"\n        RXDAVLIE\n\
    \n        Data available in Rx FIFO interrupt\n                  enable\n    \
    \    \"\"\"\n        return self._rxdavlie\n\n    @rxdavlie.setter\n    def rxdavlie(self,\
    \ value: int) -> None:\n        self._rxdavlie.value = value\n\n    @property\n\
    \    def txdavlie(self) -> Field:\n        \"\"\"\n        TXDAVLIE\n\n      \
    \  Data available in Tx FIFO interrupt\n                  enable\n        \"\"\
    \"\n        return self._txdavlie\n\n    @txdavlie.setter\n    def txdavlie(self,\
    \ value: int) -> None:\n        self._txdavlie.value = value\n\n    @property\n\
    \    def rxfifoeie(self) -> Field:\n        \"\"\"\n        RXFIFOEIE\n\n    \
    \    Rx FIFO empty interrupt\n                  enable\n        \"\"\"\n     \
    \   return self._rxfifoeie\n\n    @rxfifoeie.setter\n    def rxfifoeie(self, value:\
    \ int) -> None:\n        self._rxfifoeie.value = value\n\n    @property\n    def\
    \ txfifoeie(self) -> Field:\n        \"\"\"\n        TXFIFOEIE\n\n        Tx FIFO\
    \ empty interrupt\n                  enable\n        \"\"\"\n        return self._txfifoeie\n\
    \n    @txfifoeie.setter\n    def txfifoeie(self, value: int) -> None:\n      \
    \  self._txfifoeie.value = value\n\n    @property\n    def rxfifofie(self) ->\
    \ Field:\n        \"\"\"\n        RXFIFOFIE\n\n        Rx FIFO full interrupt\n\
    \                  enable\n        \"\"\"\n        return self._rxfifofie\n\n\
    \    @rxfifofie.setter\n    def rxfifofie(self, value: int) -> None:\n       \
    \ self._rxfifofie.value = value\n\n    @property\n    def txfifofie(self) -> Field:\n\
    \        \"\"\"\n        TXFIFOFIE\n\n        Tx FIFO full interrupt\n       \
    \           enable\n        \"\"\"\n        return self._txfifofie\n\n    @txfifofie.setter\n\
    \    def txfifofie(self, value: int) -> None:\n        self._txfifofie.value =\
    \ value\n\n    @property\n    def rxfifohfie(self) -> Field:\n        \"\"\"\n\
    \        RXFIFOHFIE\n\n        Rx FIFO half full interrupt\n                 \
    \ enable\n        \"\"\"\n        return self._rxfifohfie\n\n    @rxfifohfie.setter\n\
    \    def rxfifohfie(self, value: int) -> None:\n        self._rxfifohfie.value\
    \ = value\n\n    @property\n    def txfifoheie(self) -> Field:\n        \"\"\"\
    \n        TXFIFOHEIE\n\n        Tx FIFO half empty interrupt\n               \
    \   enable\n        \"\"\"\n        return self._txfifoheie\n\n    @txfifoheie.setter\n\
    \    def txfifoheie(self, value: int) -> None:\n        self._txfifoheie.value\
    \ = value\n\n    @property\n    def rxactie(self) -> Field:\n        \"\"\"\n\
    \        RXACTIE\n\n        Data receive acting interrupt\n                  enable\n\
    \        \"\"\"\n        return self._rxactie\n\n    @rxactie.setter\n    def\
    \ rxactie(self, value: int) -> None:\n        self._rxactie.value = value\n\n\
    \    @property\n    def txactie(self) -> Field:\n        \"\"\"\n        TXACTIE\n\
    \n        Data transmit acting interrupt\n                  enable\n        \"\
    \"\"\n        return self._txactie\n\n    @txactie.setter\n    def txactie(self,\
    \ value: int) -> None:\n        self._txactie.value = value\n\n    @property\n\
    \    def cmdactie(self) -> Field:\n        \"\"\"\n        CMDACTIE\n\n      \
    \  Command acting interrupt\n                  enable\n        \"\"\"\n      \
    \  return self._cmdactie\n\n    @cmdactie.setter\n    def cmdactie(self, value:\
    \ int) -> None:\n        self._cmdactie.value = value\n\n    @property\n    def\
    \ dbckendie(self) -> Field:\n        \"\"\"\n        DBCKENDIE\n\n        Data\
    \ block end interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._dbckendie\n\n    @dbckendie.setter\n    def dbckendie(self, value: int)\
    \ -> None:\n        self._dbckendie.value = value\n\n    @property\n    def stbiterrie(self)\
    \ -> Field:\n        \"\"\"\n        STBITERRIE\n\n        Start bit error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._stbiterrie\n\n\
    \    @stbiterrie.setter\n    def stbiterrie(self, value: int) -> None:\n     \
    \   self._stbiterrie.value = value\n\n    @property\n    def dataendie(self) ->\
    \ Field:\n        \"\"\"\n        DATAENDIE\n\n        Data end interrupt enable\n\
    \        \"\"\"\n        return self._dataendie\n\n    @dataendie.setter\n   \
    \ def dataendie(self, value: int) -> None:\n        self._dataendie.value = value\n\
    \n    @property\n    def cmdsentie(self) -> Field:\n        \"\"\"\n        CMDSENTIE\n\
    \n        Command sent interrupt\n                  enable\n        \"\"\"\n \
    \       return self._cmdsentie\n\n    @cmdsentie.setter\n    def cmdsentie(self,\
    \ value: int) -> None:\n        self._cmdsentie.value = value\n\n    @property\n\
    \    def cmdrendie(self) -> Field:\n        \"\"\"\n        CMDRENDIE\n\n    \
    \    Command response received interrupt\n                  enable\n        \"\
    \"\"\n        return self._cmdrendie\n\n    @cmdrendie.setter\n    def cmdrendie(self,\
    \ value: int) -> None:\n        self._cmdrendie.value = value\n\n    @property\n\
    \    def rxoverrie(self) -> Field:\n        \"\"\"\n        RXOVERRIE\n\n    \
    \    Rx FIFO overrun error interrupt\n                  enable\n        \"\"\"\
    \n        return self._rxoverrie\n\n    @rxoverrie.setter\n    def rxoverrie(self,\
    \ value: int) -> None:\n        self._rxoverrie.value = value\n\n    @property\n\
    \    def txunderrie(self) -> Field:\n        \"\"\"\n        TXUNDERRIE\n\n  \
    \      Tx FIFO underrun error interrupt\n                  enable\n        \"\"\
    \"\n        return self._txunderrie\n\n    @txunderrie.setter\n    def txunderrie(self,\
    \ value: int) -> None:\n        self._txunderrie.value = value\n\n    @property\n\
    \    def dtimeoutie(self) -> Field:\n        \"\"\"\n        DTIMEOUTIE\n\n  \
    \      Data timeout interrupt\n                  enable\n        \"\"\"\n    \
    \    return self._dtimeoutie\n\n    @dtimeoutie.setter\n    def dtimeoutie(self,\
    \ value: int) -> None:\n        self._dtimeoutie.value = value\n\n    @property\n\
    \    def ctimeoutie(self) -> Field:\n        \"\"\"\n        CTIMEOUTIE\n\n  \
    \      Command timeout interrupt\n                  enable\n        \"\"\"\n \
    \       return self._ctimeoutie\n\n    @ctimeoutie.setter\n    def ctimeoutie(self,\
    \ value: int) -> None:\n        self._ctimeoutie.value = value\n\n    @property\n\
    \    def dcrcfailie(self) -> Field:\n        \"\"\"\n        DCRCFAILIE\n\n  \
    \      Data CRC fail interrupt\n                  enable\n        \"\"\"\n   \
    \     return self._dcrcfailie\n\n    @dcrcfailie.setter\n    def dcrcfailie(self,\
    \ value: int) -> None:\n        self._dcrcfailie.value = value\n\n    @property\n\
    \    def ccrcfailie(self) -> Field:\n        \"\"\"\n        CCRCFAILIE\n\n  \
    \      Command CRC fail interrupt\n                  enable\n        \"\"\"\n\
    \        return self._ccrcfailie\n\n    @ccrcfailie.setter\n    def ccrcfailie(self,\
    \ value: int) -> None:\n        self._ccrcfailie.value = value\n\n\nclass FifocntRegister(Register):\n\
    \    \"\"\"\n    FIFOCNT\n\n    FIFO counter register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._fifocount = Field(\"fifocount\", 0, 24)\n        super().__init__(\"\
    FIFOCNT\", 0x40012C00 + 0x48)\n\n    @property\n    def fifocount(self) -> Field:\n\
    \        \"\"\"\n        FIFOCOUNT\n\n        Remaining number of words to be\
    \ written\n                  to or read from the FIFO.\n        \"\"\"\n     \
    \   return self._fifocount\n\n    @fifocount.setter\n    def fifocount(self, value:\
    \ int) -> None:\n        self._fifocount.value = value\n\n\nclass FifoRegister(Register):\n\
    \    \"\"\"\n    FIFO\n\n    data FIFO register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._fifodata = Field(\"fifodata\", 0, 32)\n        super().__init__(\"\
    FIFO\", 0x40012C00 + 0x80)\n\n    @property\n    def fifodata(self) -> Field:\n\
    \        \"\"\"\n        FIFODATA\n\n        Receive and transmit FIFO\n     \
    \             data\n        \"\"\"\n        return self._fifodata\n\n    @fifodata.setter\n\
    \    def fifodata(self, value: int) -> None:\n        self._fifodata.value = value\n\
    \n\nclass Sdio(Peripheral):\n    \"\"\"\n    SDIO\n\n    Secure digital input/output\n\
    \          interface\n    \"\"\"\n\n    def __init__(self):\n        self._power\
    \ = PowerRegister()\n        self._clkcr = ClkcrRegister()\n        self._arg\
    \ = ArgRegister()\n        self._cmd = CmdRegister()\n        self._respcmd =\
    \ RespcmdRegister()\n        self._resp1 = Resp1Register()\n        self._resp2\
    \ = Resp2Register()\n        self._resp3 = Resp3Register()\n        self._resp4\
    \ = Resp4Register()\n        self._dtimer = DtimerRegister()\n        self._dlen\
    \ = DlenRegister()\n        self._dctrl = DctrlRegister()\n        self._dcount\
    \ = DcountRegister()\n        self._sta = StaRegister()\n        self._icr = IcrRegister()\n\
    \        self._mask = MaskRegister()\n        self._fifocnt = FifocntRegister()\n\
    \        self._fifo = FifoRegister()\n        super().__init__(\"sdio\", 0x40012C00)\n\
    \n    @property\n    def power(self) -> PowerRegister:\n        return self._power\n\
    \n    @power.setter\n    def power(self, value: int) -> None:\n        self._power.value\
    \ = value\n\n    @property\n    def clkcr(self) -> ClkcrRegister:\n        return\
    \ self._clkcr\n\n    @clkcr.setter\n    def clkcr(self, value: int) -> None:\n\
    \        self._clkcr.value = value\n\n    @property\n    def arg(self) -> ArgRegister:\n\
    \        return self._arg\n\n    @arg.setter\n    def arg(self, value: int) ->\
    \ None:\n        self._arg.value = value\n\n    @property\n    def cmd(self) ->\
    \ CmdRegister:\n        return self._cmd\n\n    @cmd.setter\n    def cmd(self,\
    \ value: int) -> None:\n        self._cmd.value = value\n\n    @property\n   \
    \ def respcmd(self) -> RespcmdRegister:\n        return self._respcmd\n\n    @respcmd.setter\n\
    \    def respcmd(self, value: int) -> None:\n        self._respcmd.value = value\n\
    \n    @property\n    def resp1(self) -> Resp1Register:\n        return self._resp1\n\
    \n    @resp1.setter\n    def resp1(self, value: int) -> None:\n        self._resp1.value\
    \ = value\n\n    @property\n    def resp2(self) -> Resp2Register:\n        return\
    \ self._resp2\n\n    @resp2.setter\n    def resp2(self, value: int) -> None:\n\
    \        self._resp2.value = value\n\n    @property\n    def resp3(self) -> Resp3Register:\n\
    \        return self._resp3\n\n    @resp3.setter\n    def resp3(self, value: int)\
    \ -> None:\n        self._resp3.value = value\n\n    @property\n    def resp4(self)\
    \ -> Resp4Register:\n        return self._resp4\n\n    @resp4.setter\n    def\
    \ resp4(self, value: int) -> None:\n        self._resp4.value = value\n\n    @property\n\
    \    def dtimer(self) -> DtimerRegister:\n        return self._dtimer\n\n    @dtimer.setter\n\
    \    def dtimer(self, value: int) -> None:\n        self._dtimer.value = value\n\
    \n    @property\n    def dlen(self) -> DlenRegister:\n        return self._dlen\n\
    \n    @dlen.setter\n    def dlen(self, value: int) -> None:\n        self._dlen.value\
    \ = value\n\n    @property\n    def dctrl(self) -> DctrlRegister:\n        return\
    \ self._dctrl\n\n    @dctrl.setter\n    def dctrl(self, value: int) -> None:\n\
    \        self._dctrl.value = value\n\n    @property\n    def dcount(self) -> DcountRegister:\n\
    \        return self._dcount\n\n    @dcount.setter\n    def dcount(self, value:\
    \ int) -> None:\n        self._dcount.value = value\n\n    @property\n    def\
    \ sta(self) -> StaRegister:\n        return self._sta\n\n    @sta.setter\n   \
    \ def sta(self, value: int) -> None:\n        self._sta.value = value\n\n    @property\n\
    \    def icr(self) -> IcrRegister:\n        return self._icr\n\n    @icr.setter\n\
    \    def icr(self, value: int) -> None:\n        self._icr.value = value\n\n \
    \   @property\n    def mask(self) -> MaskRegister:\n        return self._mask\n\
    \n    @mask.setter\n    def mask(self, value: int) -> None:\n        self._mask.value\
    \ = value\n\n    @property\n    def fifocnt(self) -> FifocntRegister:\n      \
    \  return self._fifocnt\n\n    @fifocnt.setter\n    def fifocnt(self, value: int)\
    \ -> None:\n        self._fifocnt.value = value\n\n    @property\n    def fifo(self)\
    \ -> FifoRegister:\n        return self._fifo\n\n    @fifo.setter\n    def fifo(self,\
    \ value: int) -> None:\n        self._fifo.value = value\n"
  name: SDIO
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass MemrmRegister(Register):\n    \"\"\"\n    MEMRM\n\n    memory\
    \ remap register\n    \"\"\"\n\n    def __init__(self):\n        self._mem_mode\
    \ = Field(\"mem_mode\", 0, 2)\n        super().__init__(\"MEMRM\", 0x40013800\
    \ + 0x0)\n\n    @property\n    def mem_mode(self) -> Field:\n        \"\"\"\n\
    \        MEM_MODE\n\n        MEM_MODE\n        \"\"\"\n        return self._mem_mode\n\
    \n    @mem_mode.setter\n    def mem_mode(self, value: int) -> None:\n        self._mem_mode.value\
    \ = value\n\n\nclass PmcRegister(Register):\n    \"\"\"\n    PMC\n\n    peripheral\
    \ mode configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._adc1dc2 = Field(\"adc1dc2\", 16, 1)\n        super().__init__(\"\
    PMC\", 0x40013800 + 0x4)\n\n    @property\n    def adc1dc2(self) -> Field:\n \
    \       \"\"\"\n        ADC1DC2\n\n        ADC1DC2\n        \"\"\"\n        return\
    \ self._adc1dc2\n\n    @adc1dc2.setter\n    def adc1dc2(self, value: int) -> None:\n\
    \        self._adc1dc2.value = value\n\n\nclass Exticr1Register(Register):\n \
    \   \"\"\"\n    EXTICR1\n\n    external interrupt configuration register\n   \
    \           1\n    \"\"\"\n\n    def __init__(self):\n        self._exti3 = Field(\"\
    exti3\", 12, 4)\n        self._exti2 = Field(\"exti2\", 8, 4)\n        self._exti1\
    \ = Field(\"exti1\", 4, 4)\n        self._exti0 = Field(\"exti0\", 0, 4)\n   \
    \     super().__init__(\"EXTICR1\", 0x40013800 + 0x8)\n\n    @property\n    def\
    \ exti3(self) -> Field:\n        \"\"\"\n        EXTI3\n\n        EXTI x configuration\
    \ (x = 0 to\n                  3)\n        \"\"\"\n        return self._exti3\n\
    \n    @exti3.setter\n    def exti3(self, value: int) -> None:\n        self._exti3.value\
    \ = value\n\n    @property\n    def exti2(self) -> Field:\n        \"\"\"\n  \
    \      EXTI2\n\n        EXTI x configuration (x = 0 to\n                  3)\n\
    \        \"\"\"\n        return self._exti2\n\n    @exti2.setter\n    def exti2(self,\
    \ value: int) -> None:\n        self._exti2.value = value\n\n    @property\n \
    \   def exti1(self) -> Field:\n        \"\"\"\n        EXTI1\n\n        EXTI x\
    \ configuration (x = 0 to\n                  3)\n        \"\"\"\n        return\
    \ self._exti1\n\n    @exti1.setter\n    def exti1(self, value: int) -> None:\n\
    \        self._exti1.value = value\n\n    @property\n    def exti0(self) -> Field:\n\
    \        \"\"\"\n        EXTI0\n\n        EXTI x configuration (x = 0 to\n   \
    \               3)\n        \"\"\"\n        return self._exti0\n\n    @exti0.setter\n\
    \    def exti0(self, value: int) -> None:\n        self._exti0.value = value\n\
    \n\nclass Exticr2Register(Register):\n    \"\"\"\n    EXTICR2\n\n    external\
    \ interrupt configuration register\n              2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._exti7 = Field(\"exti7\", 12, 4)\n        self._exti6 = Field(\"\
    exti6\", 8, 4)\n        self._exti5 = Field(\"exti5\", 4, 4)\n        self._exti4\
    \ = Field(\"exti4\", 0, 4)\n        super().__init__(\"EXTICR2\", 0x40013800 +\
    \ 0xC)\n\n    @property\n    def exti7(self) -> Field:\n        \"\"\"\n     \
    \   EXTI7\n\n        EXTI x configuration (x = 4 to\n                  7)\n  \
    \      \"\"\"\n        return self._exti7\n\n    @exti7.setter\n    def exti7(self,\
    \ value: int) -> None:\n        self._exti7.value = value\n\n    @property\n \
    \   def exti6(self) -> Field:\n        \"\"\"\n        EXTI6\n\n        EXTI x\
    \ configuration (x = 4 to\n                  7)\n        \"\"\"\n        return\
    \ self._exti6\n\n    @exti6.setter\n    def exti6(self, value: int) -> None:\n\
    \        self._exti6.value = value\n\n    @property\n    def exti5(self) -> Field:\n\
    \        \"\"\"\n        EXTI5\n\n        EXTI x configuration (x = 4 to\n   \
    \               7)\n        \"\"\"\n        return self._exti5\n\n    @exti5.setter\n\
    \    def exti5(self, value: int) -> None:\n        self._exti5.value = value\n\
    \n    @property\n    def exti4(self) -> Field:\n        \"\"\"\n        EXTI4\n\
    \n        EXTI x configuration (x = 4 to\n                  7)\n        \"\"\"\
    \n        return self._exti4\n\n    @exti4.setter\n    def exti4(self, value:\
    \ int) -> None:\n        self._exti4.value = value\n\n\nclass Exticr3Register(Register):\n\
    \    \"\"\"\n    EXTICR3\n\n    external interrupt configuration register\n  \
    \            3\n    \"\"\"\n\n    def __init__(self):\n        self._exti11 =\
    \ Field(\"exti11\", 12, 4)\n        self._exti10 = Field(\"exti10\", 8, 4)\n \
    \       self._exti9 = Field(\"exti9\", 4, 4)\n        self._exti8 = Field(\"exti8\"\
    , 0, 4)\n        super().__init__(\"EXTICR3\", 0x40013800 + 0x10)\n\n    @property\n\
    \    def exti11(self) -> Field:\n        \"\"\"\n        EXTI11\n\n        EXTI\
    \ x configuration (x = 8 to\n                  11)\n        \"\"\"\n        return\
    \ self._exti11\n\n    @exti11.setter\n    def exti11(self, value: int) -> None:\n\
    \        self._exti11.value = value\n\n    @property\n    def exti10(self) ->\
    \ Field:\n        \"\"\"\n        EXTI10\n\n        EXTI10\n        \"\"\"\n \
    \       return self._exti10\n\n    @exti10.setter\n    def exti10(self, value:\
    \ int) -> None:\n        self._exti10.value = value\n\n    @property\n    def\
    \ exti9(self) -> Field:\n        \"\"\"\n        EXTI9\n\n        EXTI x configuration\
    \ (x = 8 to\n                  11)\n        \"\"\"\n        return self._exti9\n\
    \n    @exti9.setter\n    def exti9(self, value: int) -> None:\n        self._exti9.value\
    \ = value\n\n    @property\n    def exti8(self) -> Field:\n        \"\"\"\n  \
    \      EXTI8\n\n        EXTI x configuration (x = 8 to\n                  11)\n\
    \        \"\"\"\n        return self._exti8\n\n    @exti8.setter\n    def exti8(self,\
    \ value: int) -> None:\n        self._exti8.value = value\n\n\nclass Exticr4Register(Register):\n\
    \    \"\"\"\n    EXTICR4\n\n    external interrupt configuration register\n  \
    \            4\n    \"\"\"\n\n    def __init__(self):\n        self._exti15 =\
    \ Field(\"exti15\", 12, 4)\n        self._exti14 = Field(\"exti14\", 8, 4)\n \
    \       self._exti13 = Field(\"exti13\", 4, 4)\n        self._exti12 = Field(\"\
    exti12\", 0, 4)\n        super().__init__(\"EXTICR4\", 0x40013800 + 0x14)\n\n\
    \    @property\n    def exti15(self) -> Field:\n        \"\"\"\n        EXTI15\n\
    \n        EXTI x configuration (x = 12 to\n                  15)\n        \"\"\
    \"\n        return self._exti15\n\n    @exti15.setter\n    def exti15(self, value:\
    \ int) -> None:\n        self._exti15.value = value\n\n    @property\n    def\
    \ exti14(self) -> Field:\n        \"\"\"\n        EXTI14\n\n        EXTI x configuration\
    \ (x = 12 to\n                  15)\n        \"\"\"\n        return self._exti14\n\
    \n    @exti14.setter\n    def exti14(self, value: int) -> None:\n        self._exti14.value\
    \ = value\n\n    @property\n    def exti13(self) -> Field:\n        \"\"\"\n \
    \       EXTI13\n\n        EXTI x configuration (x = 12 to\n                  15)\n\
    \        \"\"\"\n        return self._exti13\n\n    @exti13.setter\n    def exti13(self,\
    \ value: int) -> None:\n        self._exti13.value = value\n\n    @property\n\
    \    def exti12(self) -> Field:\n        \"\"\"\n        EXTI12\n\n        EXTI\
    \ x configuration (x = 12 to\n                  15)\n        \"\"\"\n        return\
    \ self._exti12\n\n    @exti12.setter\n    def exti12(self, value: int) -> None:\n\
    \        self._exti12.value = value\n\n\nclass CmpcrRegister(Register):\n    \"\
    \"\"\n    CMPCR\n\n    Compensation cell control\n              register\n   \
    \ \"\"\"\n\n    def __init__(self):\n        self._ready = Field(\"ready\", 8,\
    \ 1)\n        self._cmp_pd = Field(\"cmp_pd\", 0, 1)\n        super().__init__(\"\
    CMPCR\", 0x40013800 + 0x20)\n\n    @property\n    def ready(self) -> Field:\n\
    \        \"\"\"\n        READY\n\n        READY\n        \"\"\"\n        return\
    \ self._ready\n\n    @ready.setter\n    def ready(self, value: int) -> None:\n\
    \        self._ready.value = value\n\n    @property\n    def cmp_pd(self) -> Field:\n\
    \        \"\"\"\n        CMP_PD\n\n        Compensation cell\n               \
    \   power-down\n        \"\"\"\n        return self._cmp_pd\n\n    @cmp_pd.setter\n\
    \    def cmp_pd(self, value: int) -> None:\n        self._cmp_pd.value = value\n\
    \n\nclass Syscfg(Peripheral):\n    \"\"\"\n    SYSCFG\n\n    System configuration\
    \ controller\n    \"\"\"\n\n    def __init__(self):\n        self._memrm = MemrmRegister()\n\
    \        self._pmc = PmcRegister()\n        self._exticr1 = Exticr1Register()\n\
    \        self._exticr2 = Exticr2Register()\n        self._exticr3 = Exticr3Register()\n\
    \        self._exticr4 = Exticr4Register()\n        self._cmpcr = CmpcrRegister()\n\
    \        super().__init__(\"syscfg\", 0x40013800)\n\n    @property\n    def memrm(self)\
    \ -> MemrmRegister:\n        return self._memrm\n\n    @memrm.setter\n    def\
    \ memrm(self, value: int) -> None:\n        self._memrm.value = value\n\n    @property\n\
    \    def pmc(self) -> PmcRegister:\n        return self._pmc\n\n    @pmc.setter\n\
    \    def pmc(self, value: int) -> None:\n        self._pmc.value = value\n\n \
    \   @property\n    def exticr1(self) -> Exticr1Register:\n        return self._exticr1\n\
    \n    @exticr1.setter\n    def exticr1(self, value: int) -> None:\n        self._exticr1.value\
    \ = value\n\n    @property\n    def exticr2(self) -> Exticr2Register:\n      \
    \  return self._exticr2\n\n    @exticr2.setter\n    def exticr2(self, value: int)\
    \ -> None:\n        self._exticr2.value = value\n\n    @property\n    def exticr3(self)\
    \ -> Exticr3Register:\n        return self._exticr3\n\n    @exticr3.setter\n \
    \   def exticr3(self, value: int) -> None:\n        self._exticr3.value = value\n\
    \n    @property\n    def exticr4(self) -> Exticr4Register:\n        return self._exticr4\n\
    \n    @exticr4.setter\n    def exticr4(self, value: int) -> None:\n        self._exticr4.value\
    \ = value\n\n    @property\n    def cmpcr(self) -> CmpcrRegister:\n        return\
    \ self._cmpcr\n\n    @cmpcr.setter\n    def cmpcr(self, value: int) -> None:\n\
    \        self._cmpcr.value = value\n"
  name: SYSCFG
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._cms =\
    \ Field(\"cms\", 5, 2)\n        self._dir = Field(\"dir\", 4, 1)\n        self._opm\
    \ = Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40010000 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def cms(self)\
    \ -> Field:\n        \"\"\"\n        CMS\n\n        Center-aligned mode\n    \
    \              selection\n        \"\"\"\n        return self._cms\n\n    @cms.setter\n\
    \    def cms(self, value: int) -> None:\n        self._cms.value = value\n\n \
    \   @property\n    def dir(self) -> Field:\n        \"\"\"\n        DIR\n\n  \
    \      Direction\n        \"\"\"\n        return self._dir\n\n    @dir.setter\n\
    \    def dir(self, value: int) -> None:\n        self._dir.value = value\n\n \
    \   @property\n    def opm(self) -> Field:\n        \"\"\"\n        OPM\n\n  \
    \      One-pulse mode\n        \"\"\"\n        return self._opm\n\n    @opm.setter\n\
    \    def opm(self, value: int) -> None:\n        self._opm.value = value\n\n \
    \   @property\n    def urs(self) -> Field:\n        \"\"\"\n        URS\n\n  \
    \      Update request source\n        \"\"\"\n        return self._urs\n\n   \
    \ @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._ois4 = Field(\"\
    ois4\", 14, 1)\n        self._ois3n = Field(\"ois3n\", 13, 1)\n        self._ois3\
    \ = Field(\"ois3\", 12, 1)\n        self._ois2n = Field(\"ois2n\", 11, 1)\n  \
    \      self._ois2 = Field(\"ois2\", 10, 1)\n        self._ois1n = Field(\"ois1n\"\
    , 9, 1)\n        self._ois1 = Field(\"ois1\", 8, 1)\n        self._ti1s = Field(\"\
    ti1s\", 7, 1)\n        self._mms = Field(\"mms\", 4, 3)\n        self._ccds =\
    \ Field(\"ccds\", 3, 1)\n        self._ccus = Field(\"ccus\", 2, 1)\n        self._ccpc\
    \ = Field(\"ccpc\", 0, 1)\n        super().__init__(\"CR2\", 0x40010000 + 0x4)\n\
    \n    @property\n    def ois4(self) -> Field:\n        \"\"\"\n        OIS4\n\n\
    \        Output Idle state 4\n        \"\"\"\n        return self._ois4\n\n  \
    \  @ois4.setter\n    def ois4(self, value: int) -> None:\n        self._ois4.value\
    \ = value\n\n    @property\n    def ois3n(self) -> Field:\n        \"\"\"\n  \
    \      OIS3N\n\n        Output Idle state 3\n        \"\"\"\n        return self._ois3n\n\
    \n    @ois3n.setter\n    def ois3n(self, value: int) -> None:\n        self._ois3n.value\
    \ = value\n\n    @property\n    def ois3(self) -> Field:\n        \"\"\"\n   \
    \     OIS3\n\n        Output Idle state 3\n        \"\"\"\n        return self._ois3\n\
    \n    @ois3.setter\n    def ois3(self, value: int) -> None:\n        self._ois3.value\
    \ = value\n\n    @property\n    def ois2n(self) -> Field:\n        \"\"\"\n  \
    \      OIS2N\n\n        Output Idle state 2\n        \"\"\"\n        return self._ois2n\n\
    \n    @ois2n.setter\n    def ois2n(self, value: int) -> None:\n        self._ois2n.value\
    \ = value\n\n    @property\n    def ois2(self) -> Field:\n        \"\"\"\n   \
    \     OIS2\n\n        Output Idle state 2\n        \"\"\"\n        return self._ois2\n\
    \n    @ois2.setter\n    def ois2(self, value: int) -> None:\n        self._ois2.value\
    \ = value\n\n    @property\n    def ois1n(self) -> Field:\n        \"\"\"\n  \
    \      OIS1N\n\n        Output Idle state 1\n        \"\"\"\n        return self._ois1n\n\
    \n    @ois1n.setter\n    def ois1n(self, value: int) -> None:\n        self._ois1n.value\
    \ = value\n\n    @property\n    def ois1(self) -> Field:\n        \"\"\"\n   \
    \     OIS1\n\n        Output Idle state 1\n        \"\"\"\n        return self._ois1\n\
    \n    @ois1.setter\n    def ois1(self, value: int) -> None:\n        self._ois1.value\
    \ = value\n\n    @property\n    def ti1s(self) -> Field:\n        \"\"\"\n   \
    \     TI1S\n\n        TI1 selection\n        \"\"\"\n        return self._ti1s\n\
    \n    @ti1s.setter\n    def ti1s(self, value: int) -> None:\n        self._ti1s.value\
    \ = value\n\n    @property\n    def mms(self) -> Field:\n        \"\"\"\n    \
    \    MMS\n\n        Master mode selection\n        \"\"\"\n        return self._mms\n\
    \n    @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n    @property\n    def ccds(self) -> Field:\n        \"\"\"\n   \
    \     CCDS\n\n        Capture/compare DMA\n                  selection\n     \
    \   \"\"\"\n        return self._ccds\n\n    @ccds.setter\n    def ccds(self,\
    \ value: int) -> None:\n        self._ccds.value = value\n\n    @property\n  \
    \  def ccus(self) -> Field:\n        \"\"\"\n        CCUS\n\n        Capture/compare\
    \ control update\n                  selection\n        \"\"\"\n        return\
    \ self._ccus\n\n    @ccus.setter\n    def ccus(self, value: int) -> None:\n  \
    \      self._ccus.value = value\n\n    @property\n    def ccpc(self) -> Field:\n\
    \        \"\"\"\n        CCPC\n\n        Capture/compare preloaded\n         \
    \         control\n        \"\"\"\n        return self._ccpc\n\n    @ccpc.setter\n\
    \    def ccpc(self, value: int) -> None:\n        self._ccpc.value = value\n\n\
    \nclass SmcrRegister(Register):\n    \"\"\"\n    SMCR\n\n    slave mode control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._etp = Field(\"\
    etp\", 15, 1)\n        self._ece = Field(\"ece\", 14, 1)\n        self._etps =\
    \ Field(\"etps\", 12, 2)\n        self._etf = Field(\"etf\", 8, 4)\n        self._msm\
    \ = Field(\"msm\", 7, 1)\n        self._ts = Field(\"ts\", 4, 3)\n        self._sms\
    \ = Field(\"sms\", 0, 3)\n        super().__init__(\"SMCR\", 0x40010000 + 0x8)\n\
    \n    @property\n    def etp(self) -> Field:\n        \"\"\"\n        ETP\n\n\
    \        External trigger polarity\n        \"\"\"\n        return self._etp\n\
    \n    @etp.setter\n    def etp(self, value: int) -> None:\n        self._etp.value\
    \ = value\n\n    @property\n    def ece(self) -> Field:\n        \"\"\"\n    \
    \    ECE\n\n        External clock enable\n        \"\"\"\n        return self._ece\n\
    \n    @ece.setter\n    def ece(self, value: int) -> None:\n        self._ece.value\
    \ = value\n\n    @property\n    def etps(self) -> Field:\n        \"\"\"\n   \
    \     ETPS\n\n        External trigger prescaler\n        \"\"\"\n        return\
    \ self._etps\n\n    @etps.setter\n    def etps(self, value: int) -> None:\n  \
    \      self._etps.value = value\n\n    @property\n    def etf(self) -> Field:\n\
    \        \"\"\"\n        ETF\n\n        External trigger filter\n        \"\"\"\
    \n        return self._etf\n\n    @etf.setter\n    def etf(self, value: int) ->\
    \ None:\n        self._etf.value = value\n\n    @property\n    def msm(self) ->\
    \ Field:\n        \"\"\"\n        MSM\n\n        Master/Slave mode\n        \"\
    \"\"\n        return self._msm\n\n    @msm.setter\n    def msm(self, value: int)\
    \ -> None:\n        self._msm.value = value\n\n    @property\n    def ts(self)\
    \ -> Field:\n        \"\"\"\n        TS\n\n        Trigger selection\n       \
    \ \"\"\"\n        return self._ts\n\n    @ts.setter\n    def ts(self, value: int)\
    \ -> None:\n        self._ts.value = value\n\n    @property\n    def sms(self)\
    \ -> Field:\n        \"\"\"\n        SMS\n\n        Slave mode selection\n   \
    \     \"\"\"\n        return self._sms\n\n    @sms.setter\n    def sms(self, value:\
    \ int) -> None:\n        self._sms.value = value\n\n\nclass DierRegister(Register):\n\
    \    \"\"\"\n    DIER\n\n    DMA/Interrupt enable register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._tde = Field(\"tde\", 14, 1)\n        self._comde\
    \ = Field(\"comde\", 13, 1)\n        self._cc4de = Field(\"cc4de\", 12, 1)\n \
    \       self._cc3de = Field(\"cc3de\", 11, 1)\n        self._cc2de = Field(\"\
    cc2de\", 10, 1)\n        self._cc1de = Field(\"cc1de\", 9, 1)\n        self._ude\
    \ = Field(\"ude\", 8, 1)\n        self._bie = Field(\"bie\", 7, 1)\n        self._tie\
    \ = Field(\"tie\", 6, 1)\n        self._comie = Field(\"comie\", 5, 1)\n     \
    \   self._cc4ie = Field(\"cc4ie\", 4, 1)\n        self._cc3ie = Field(\"cc3ie\"\
    , 3, 1)\n        self._cc2ie = Field(\"cc2ie\", 2, 1)\n        self._cc1ie = Field(\"\
    cc1ie\", 1, 1)\n        self._uie = Field(\"uie\", 0, 1)\n        super().__init__(\"\
    DIER\", 0x40010000 + 0xC)\n\n    @property\n    def tde(self) -> Field:\n    \
    \    \"\"\"\n        TDE\n\n        Trigger DMA request enable\n        \"\"\"\
    \n        return self._tde\n\n    @tde.setter\n    def tde(self, value: int) ->\
    \ None:\n        self._tde.value = value\n\n    @property\n    def comde(self)\
    \ -> Field:\n        \"\"\"\n        COMDE\n\n        COM DMA request enable\n\
    \        \"\"\"\n        return self._comde\n\n    @comde.setter\n    def comde(self,\
    \ value: int) -> None:\n        self._comde.value = value\n\n    @property\n \
    \   def cc4de(self) -> Field:\n        \"\"\"\n        CC4DE\n\n        Capture/Compare\
    \ 4 DMA request\n                  enable\n        \"\"\"\n        return self._cc4de\n\
    \n    @cc4de.setter\n    def cc4de(self, value: int) -> None:\n        self._cc4de.value\
    \ = value\n\n    @property\n    def cc3de(self) -> Field:\n        \"\"\"\n  \
    \      CC3DE\n\n        Capture/Compare 3 DMA request\n                  enable\n\
    \        \"\"\"\n        return self._cc3de\n\n    @cc3de.setter\n    def cc3de(self,\
    \ value: int) -> None:\n        self._cc3de.value = value\n\n    @property\n \
    \   def cc2de(self) -> Field:\n        \"\"\"\n        CC2DE\n\n        Capture/Compare\
    \ 2 DMA request\n                  enable\n        \"\"\"\n        return self._cc2de\n\
    \n    @cc2de.setter\n    def cc2de(self, value: int) -> None:\n        self._cc2de.value\
    \ = value\n\n    @property\n    def cc1de(self) -> Field:\n        \"\"\"\n  \
    \      CC1DE\n\n        Capture/Compare 1 DMA request\n                  enable\n\
    \        \"\"\"\n        return self._cc1de\n\n    @cc1de.setter\n    def cc1de(self,\
    \ value: int) -> None:\n        self._cc1de.value = value\n\n    @property\n \
    \   def ude(self) -> Field:\n        \"\"\"\n        UDE\n\n        Update DMA\
    \ request enable\n        \"\"\"\n        return self._ude\n\n    @ude.setter\n\
    \    def ude(self, value: int) -> None:\n        self._ude.value = value\n\n \
    \   @property\n    def bie(self) -> Field:\n        \"\"\"\n        BIE\n\n  \
    \      Break interrupt enable\n        \"\"\"\n        return self._bie\n\n  \
    \  @bie.setter\n    def bie(self, value: int) -> None:\n        self._bie.value\
    \ = value\n\n    @property\n    def tie(self) -> Field:\n        \"\"\"\n    \
    \    TIE\n\n        Trigger interrupt enable\n        \"\"\"\n        return self._tie\n\
    \n    @tie.setter\n    def tie(self, value: int) -> None:\n        self._tie.value\
    \ = value\n\n    @property\n    def comie(self) -> Field:\n        \"\"\"\n  \
    \      COMIE\n\n        COM interrupt enable\n        \"\"\"\n        return self._comie\n\
    \n    @comie.setter\n    def comie(self, value: int) -> None:\n        self._comie.value\
    \ = value\n\n    @property\n    def cc4ie(self) -> Field:\n        \"\"\"\n  \
    \      CC4IE\n\n        Capture/Compare 4 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc4ie\n\n    @cc4ie.setter\n    def cc4ie(self,\
    \ value: int) -> None:\n        self._cc4ie.value = value\n\n    @property\n \
    \   def cc3ie(self) -> Field:\n        \"\"\"\n        CC3IE\n\n        Capture/Compare\
    \ 3 interrupt\n                  enable\n        \"\"\"\n        return self._cc3ie\n\
    \n    @cc3ie.setter\n    def cc3ie(self, value: int) -> None:\n        self._cc3ie.value\
    \ = value\n\n    @property\n    def cc2ie(self) -> Field:\n        \"\"\"\n  \
    \      CC2IE\n\n        Capture/Compare 2 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc2ie\n\n    @cc2ie.setter\n    def cc2ie(self,\
    \ value: int) -> None:\n        self._cc2ie.value = value\n\n    @property\n \
    \   def cc1ie(self) -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare\
    \ 1 interrupt\n                  enable\n        \"\"\"\n        return self._cc1ie\n\
    \n    @cc1ie.setter\n    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value\
    \ = value\n\n    @property\n    def uie(self) -> Field:\n        \"\"\"\n    \
    \    UIE\n\n        Update interrupt enable\n        \"\"\"\n        return self._uie\n\
    \n    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc4of = Field(\"cc4of\"\
    , 12, 1)\n        self._cc3of = Field(\"cc3of\", 11, 1)\n        self._cc2of =\
    \ Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"cc1of\", 9, 1)\n    \
    \    self._bif = Field(\"bif\", 7, 1)\n        self._tif = Field(\"tif\", 6, 1)\n\
    \        self._comif = Field(\"comif\", 5, 1)\n        self._cc4if = Field(\"\
    cc4if\", 4, 1)\n        self._cc3if = Field(\"cc3if\", 3, 1)\n        self._cc2if\
    \ = Field(\"cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n   \
    \     self._uif = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40010000\
    \ + 0x10)\n\n    @property\n    def cc4of(self) -> Field:\n        \"\"\"\n  \
    \      CC4OF\n\n        Capture/Compare 4 overcapture\n                  flag\n\
    \        \"\"\"\n        return self._cc4of\n\n    @cc4of.setter\n    def cc4of(self,\
    \ value: int) -> None:\n        self._cc4of.value = value\n\n    @property\n \
    \   def cc3of(self) -> Field:\n        \"\"\"\n        CC3OF\n\n        Capture/Compare\
    \ 3 overcapture\n                  flag\n        \"\"\"\n        return self._cc3of\n\
    \n    @cc3of.setter\n    def cc3of(self, value: int) -> None:\n        self._cc3of.value\
    \ = value\n\n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n  \
    \      CC2OF\n\n        Capture/compare 2 overcapture\n                  flag\n\
    \        \"\"\"\n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self,\
    \ value: int) -> None:\n        self._cc2of.value = value\n\n    @property\n \
    \   def cc1of(self) -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare\
    \ 1 overcapture\n                  flag\n        \"\"\"\n        return self._cc1of\n\
    \n    @cc1of.setter\n    def cc1of(self, value: int) -> None:\n        self._cc1of.value\
    \ = value\n\n    @property\n    def bif(self) -> Field:\n        \"\"\"\n    \
    \    BIF\n\n        Break interrupt flag\n        \"\"\"\n        return self._bif\n\
    \n    @bif.setter\n    def bif(self, value: int) -> None:\n        self._bif.value\
    \ = value\n\n    @property\n    def tif(self) -> Field:\n        \"\"\"\n    \
    \    TIF\n\n        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\
    \n    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def comif(self) -> Field:\n        \"\"\"\n  \
    \      COMIF\n\n        COM interrupt flag\n        \"\"\"\n        return self._comif\n\
    \n    @comif.setter\n    def comif(self, value: int) -> None:\n        self._comif.value\
    \ = value\n\n    @property\n    def cc4if(self) -> Field:\n        \"\"\"\n  \
    \      CC4IF\n\n        Capture/Compare 4 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc4if\n\n    @cc4if.setter\n    def cc4if(self,\
    \ value: int) -> None:\n        self._cc4if.value = value\n\n    @property\n \
    \   def cc3if(self) -> Field:\n        \"\"\"\n        CC3IF\n\n        Capture/Compare\
    \ 3 interrupt\n                  flag\n        \"\"\"\n        return self._cc3if\n\
    \n    @cc3if.setter\n    def cc3if(self, value: int) -> None:\n        self._cc3if.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._bg\
    \ = Field(\"bg\", 7, 1)\n        self._tg = Field(\"tg\", 6, 1)\n        self._comg\
    \ = Field(\"comg\", 5, 1)\n        self._cc4g = Field(\"cc4g\", 4, 1)\n      \
    \  self._cc3g = Field(\"cc3g\", 3, 1)\n        self._cc2g = Field(\"cc2g\", 2,\
    \ 1)\n        self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"\
    ug\", 0, 1)\n        super().__init__(\"EGR\", 0x40010000 + 0x14)\n\n    @property\n\
    \    def bg(self) -> Field:\n        \"\"\"\n        BG\n\n        Break generation\n\
    \        \"\"\"\n        return self._bg\n\n    @bg.setter\n    def bg(self, value:\
    \ int) -> None:\n        self._bg.value = value\n\n    @property\n    def tg(self)\
    \ -> Field:\n        \"\"\"\n        TG\n\n        Trigger generation\n      \
    \  \"\"\"\n        return self._tg\n\n    @tg.setter\n    def tg(self, value:\
    \ int) -> None:\n        self._tg.value = value\n\n    @property\n    def comg(self)\
    \ -> Field:\n        \"\"\"\n        COMG\n\n        Capture/Compare control update\n\
    \                  generation\n        \"\"\"\n        return self._comg\n\n \
    \   @comg.setter\n    def comg(self, value: int) -> None:\n        self._comg.value\
    \ = value\n\n    @property\n    def cc4g(self) -> Field:\n        \"\"\"\n   \
    \     CC4G\n\n        Capture/compare 4\n                  generation\n      \
    \  \"\"\"\n        return self._cc4g\n\n    @cc4g.setter\n    def cc4g(self, value:\
    \ int) -> None:\n        self._cc4g.value = value\n\n    @property\n    def cc3g(self)\
    \ -> Field:\n        \"\"\"\n        CC3G\n\n        Capture/compare 3\n     \
    \             generation\n        \"\"\"\n        return self._cc3g\n\n    @cc3g.setter\n\
    \    def cc3g(self, value: int) -> None:\n        self._cc3g.value = value\n\n\
    \    @property\n    def cc2g(self) -> Field:\n        \"\"\"\n        CC2G\n\n\
    \        Capture/compare 2\n                  generation\n        \"\"\"\n   \
    \     return self._cc2g\n\n    @cc2g.setter\n    def cc2g(self, value: int) ->\
    \ None:\n        self._cc2g.value = value\n\n    @property\n    def cc1g(self)\
    \ -> Field:\n        \"\"\"\n        CC1G\n\n        Capture/compare 1\n     \
    \             generation\n        \"\"\"\n        return self._cc1g\n\n    @cc1g.setter\n\
    \    def cc1g(self, value: int) -> None:\n        self._cc1g.value = value\n\n\
    \    @property\n    def ug(self) -> Field:\n        \"\"\"\n        UG\n\n   \
    \     Update generation\n        \"\"\"\n        return self._ug\n\n    @ug.setter\n\
    \    def ug(self, value: int) -> None:\n        self._ug.value = value\n\n\nclass\
    \ Ccmr1_outputRegister(Register):\n    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare\
    \ mode register 1 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc2ce = Field(\"oc2ce\", 15, 1)\n        self._oc2m = Field(\"\
    oc2m\", 12, 3)\n        self._oc2pe = Field(\"oc2pe\", 11, 1)\n        self._oc2fe\
    \ = Field(\"oc2fe\", 10, 1)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n    \
    \    self._oc1ce = Field(\"oc1ce\", 7, 1)\n        self._oc1m = Field(\"oc1m\"\
    , 4, 3)\n        self._oc1pe = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"\
    oc1fe\", 2, 1)\n        self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"\
    CCMR1_Output\", 0x40010000 + 0x18)\n\n    @property\n    def oc2ce(self) -> Field:\n\
    \        \"\"\"\n        OC2CE\n\n        Output Compare 2 clear\n           \
    \       enable\n        \"\"\"\n        return self._oc2ce\n\n    @oc2ce.setter\n\
    \    def oc2ce(self, value: int) -> None:\n        self._oc2ce.value = value\n\
    \n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n        OC2M\n\n\
    \        Output Compare 2 mode\n        \"\"\"\n        return self._oc2m\n\n\
    \    @oc2m.setter\n    def oc2m(self, value: int) -> None:\n        self._oc2m.value\
    \ = value\n\n    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n  \
    \      OC2PE\n\n        Output Compare 2 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n    def oc2pe(self,\
    \ value: int) -> None:\n        self._oc2pe.value = value\n\n    @property\n \
    \   def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\n        Output\
    \ Compare 2 fast\n                  enable\n        \"\"\"\n        return self._oc2fe\n\
    \n    @oc2fe.setter\n    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value\
    \ = value\n\n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n   \
    \     CC2S\n\n        Capture/Compare 2\n                  selection\n       \
    \ \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n    def cc2s(self, value:\
    \ int) -> None:\n        self._cc2s.value = value\n\n    @property\n    def oc1ce(self)\
    \ -> Field:\n        \"\"\"\n        OC1CE\n\n        Output Compare 1 clear\n\
    \                  enable\n        \"\"\"\n        return self._oc1ce\n\n    @oc1ce.setter\n\
    \    def oc1ce(self, value: int) -> None:\n        self._oc1ce.value = value\n\
    \n    @property\n    def oc1m(self) -> Field:\n        \"\"\"\n        OC1M\n\n\
    \        Output Compare 1 mode\n        \"\"\"\n        return self._oc1m\n\n\
    \    @oc1m.setter\n    def oc1m(self, value: int) -> None:\n        self._oc1m.value\
    \ = value\n\n    @property\n    def oc1pe(self) -> Field:\n        \"\"\"\n  \
    \      OC1PE\n\n        Output Compare 1 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n    def oc1pe(self,\
    \ value: int) -> None:\n        self._oc1pe.value = value\n\n    @property\n \
    \   def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\n        Output\
    \ Compare 1 fast\n                  enable\n        \"\"\"\n        return self._oc1fe\n\
    \n    @oc1fe.setter\n    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value\
    \ = value\n\n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n   \
    \     CC1S\n\n        Capture/Compare 1\n                  selection\n       \
    \ \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n    def cc1s(self, value:\
    \ int) -> None:\n        self._cc1s.value = value\n\n\nclass Ccmr1_inputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare mode register 1 (input\n \
    \             mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic2f\
    \ = Field(\"ic2f\", 12, 4)\n        self._ic2pcs = Field(\"ic2pcs\", 10, 2)\n\
    \        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f = Field(\"ic1f\"\
    , 4, 4)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n        self._cc1s = Field(\"\
    cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\", 0x40010000 + 0x18)\n\n\
    \    @property\n    def ic2f(self) -> Field:\n        \"\"\"\n        IC2F\n\n\
    \        Input capture 2 filter\n        \"\"\"\n        return self._ic2f\n\n\
    \    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n        self._ic2f.value\
    \ = value\n\n    @property\n    def ic2pcs(self) -> Field:\n        \"\"\"\n \
    \       IC2PCS\n\n        Input capture 2 prescaler\n        \"\"\"\n        return\
    \ self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self, value: int) -> None:\n\
    \        self._ic2pcs.value = value\n\n    @property\n    def cc2s(self) -> Field:\n\
    \        \"\"\"\n        CC2S\n\n        Capture/Compare 2\n                 \
    \ selection\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n \
    \   def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n        IC1F\n\n\
    \        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\n\
    \    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class Ccmr2_outputRegister(Register):\n    \"\"\"\n    CCMR2_OUTPUT\n\n    capture/compare\
    \ mode register 2 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc4ce = Field(\"oc4ce\", 15, 1)\n        self._oc4m = Field(\"\
    oc4m\", 12, 3)\n        self._oc4pe = Field(\"oc4pe\", 11, 1)\n        self._oc4fe\
    \ = Field(\"oc4fe\", 10, 1)\n        self._cc4s = Field(\"cc4s\", 8, 2)\n    \
    \    self._oc3ce = Field(\"oc3ce\", 7, 1)\n        self._oc3m = Field(\"oc3m\"\
    , 4, 3)\n        self._oc3pe = Field(\"oc3pe\", 3, 1)\n        self._oc3fe = Field(\"\
    oc3fe\", 2, 1)\n        self._cc3s = Field(\"cc3s\", 0, 2)\n        super().__init__(\"\
    CCMR2_Output\", 0x40010000 + 0x1C)\n\n    @property\n    def oc4ce(self) -> Field:\n\
    \        \"\"\"\n        OC4CE\n\n        Output compare 4 clear\n           \
    \       enable\n        \"\"\"\n        return self._oc4ce\n\n    @oc4ce.setter\n\
    \    def oc4ce(self, value: int) -> None:\n        self._oc4ce.value = value\n\
    \n    @property\n    def oc4m(self) -> Field:\n        \"\"\"\n        OC4M\n\n\
    \        Output compare 4 mode\n        \"\"\"\n        return self._oc4m\n\n\
    \    @oc4m.setter\n    def oc4m(self, value: int) -> None:\n        self._oc4m.value\
    \ = value\n\n    @property\n    def oc4pe(self) -> Field:\n        \"\"\"\n  \
    \      OC4PE\n\n        Output compare 4 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc4pe\n\n    @oc4pe.setter\n    def oc4pe(self,\
    \ value: int) -> None:\n        self._oc4pe.value = value\n\n    @property\n \
    \   def oc4fe(self) -> Field:\n        \"\"\"\n        OC4FE\n\n        Output\
    \ compare 4 fast\n                  enable\n        \"\"\"\n        return self._oc4fe\n\
    \n    @oc4fe.setter\n    def oc4fe(self, value: int) -> None:\n        self._oc4fe.value\
    \ = value\n\n    @property\n    def cc4s(self) -> Field:\n        \"\"\"\n   \
    \     CC4S\n\n        Capture/Compare 4\n                  selection\n       \
    \ \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n    def cc4s(self, value:\
    \ int) -> None:\n        self._cc4s.value = value\n\n    @property\n    def oc3ce(self)\
    \ -> Field:\n        \"\"\"\n        OC3CE\n\n        Output compare 3 clear\n\
    \                  enable\n        \"\"\"\n        return self._oc3ce\n\n    @oc3ce.setter\n\
    \    def oc3ce(self, value: int) -> None:\n        self._oc3ce.value = value\n\
    \n    @property\n    def oc3m(self) -> Field:\n        \"\"\"\n        OC3M\n\n\
    \        Output compare 3 mode\n        \"\"\"\n        return self._oc3m\n\n\
    \    @oc3m.setter\n    def oc3m(self, value: int) -> None:\n        self._oc3m.value\
    \ = value\n\n    @property\n    def oc3pe(self) -> Field:\n        \"\"\"\n  \
    \      OC3PE\n\n        Output compare 3 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc3pe\n\n    @oc3pe.setter\n    def oc3pe(self,\
    \ value: int) -> None:\n        self._oc3pe.value = value\n\n    @property\n \
    \   def oc3fe(self) -> Field:\n        \"\"\"\n        OC3FE\n\n        Output\
    \ compare 3 fast\n                  enable\n        \"\"\"\n        return self._oc3fe\n\
    \n    @oc3fe.setter\n    def oc3fe(self, value: int) -> None:\n        self._oc3fe.value\
    \ = value\n\n    @property\n    def cc3s(self) -> Field:\n        \"\"\"\n   \
    \     CC3S\n\n        Capture/Compare 3\n                  selection\n       \
    \ \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n    def cc3s(self, value:\
    \ int) -> None:\n        self._cc3s.value = value\n\n\nclass Ccmr2_inputRegister(Register):\n\
    \    \"\"\"\n    CCMR2_INPUT\n\n    capture/compare mode register 2 (input\n \
    \             mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic4f\
    \ = Field(\"ic4f\", 12, 4)\n        self._ic4psc = Field(\"ic4psc\", 10, 2)\n\
    \        self._cc4s = Field(\"cc4s\", 8, 2)\n        self._ic3f = Field(\"ic3f\"\
    , 4, 4)\n        self._ic3psc = Field(\"ic3psc\", 2, 2)\n        self._cc3s =\
    \ Field(\"cc3s\", 0, 2)\n        super().__init__(\"CCMR2_Input\", 0x40010000\
    \ + 0x1C)\n\n    @property\n    def ic4f(self) -> Field:\n        \"\"\"\n   \
    \     IC4F\n\n        Input capture 4 filter\n        \"\"\"\n        return self._ic4f\n\
    \n    @ic4f.setter\n    def ic4f(self, value: int) -> None:\n        self._ic4f.value\
    \ = value\n\n    @property\n    def ic4psc(self) -> Field:\n        \"\"\"\n \
    \       IC4PSC\n\n        Input capture 4 prescaler\n        \"\"\"\n        return\
    \ self._ic4psc\n\n    @ic4psc.setter\n    def ic4psc(self, value: int) -> None:\n\
    \        self._ic4psc.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        Capture/Compare 4\n                 \
    \ selection\n        \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n \
    \   def cc4s(self, value: int) -> None:\n        self._cc4s.value = value\n\n\
    \    @property\n    def ic3f(self) -> Field:\n        \"\"\"\n        IC3F\n\n\
    \        Input capture 3 filter\n        \"\"\"\n        return self._ic3f\n\n\
    \    @ic3f.setter\n    def ic3f(self, value: int) -> None:\n        self._ic3f.value\
    \ = value\n\n    @property\n    def ic3psc(self) -> Field:\n        \"\"\"\n \
    \       IC3PSC\n\n        Input capture 3 prescaler\n        \"\"\"\n        return\
    \ self._ic3psc\n\n    @ic3psc.setter\n    def ic3psc(self, value: int) -> None:\n\
    \        self._ic3psc.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        Capture/compare 3\n                 \
    \ selection\n        \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n \
    \   def cc3s(self, value: int) -> None:\n        self._cc3s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc4p\
    \ = Field(\"cc4p\", 13, 1)\n        self._cc4e = Field(\"cc4e\", 12, 1)\n    \
    \    self._cc3np = Field(\"cc3np\", 11, 1)\n        self._cc3ne = Field(\"cc3ne\"\
    , 10, 1)\n        self._cc3p = Field(\"cc3p\", 9, 1)\n        self._cc3e = Field(\"\
    cc3e\", 8, 1)\n        self._cc2np = Field(\"cc2np\", 7, 1)\n        self._cc2ne\
    \ = Field(\"cc2ne\", 6, 1)\n        self._cc2p = Field(\"cc2p\", 5, 1)\n     \
    \   self._cc2e = Field(\"cc2e\", 4, 1)\n        self._cc1np = Field(\"cc1np\"\
    , 3, 1)\n        self._cc1ne = Field(\"cc1ne\", 2, 1)\n        self._cc1p = Field(\"\
    cc1p\", 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40010000 + 0x20)\n\n    @property\n    def cc4p(self) -> Field:\n  \
    \      \"\"\"\n        CC4P\n\n        Capture/Compare 3 output\n            \
    \      Polarity\n        \"\"\"\n        return self._cc4p\n\n    @cc4p.setter\n\
    \    def cc4p(self, value: int) -> None:\n        self._cc4p.value = value\n\n\
    \    @property\n    def cc4e(self) -> Field:\n        \"\"\"\n        CC4E\n\n\
    \        Capture/Compare 4 output\n                  enable\n        \"\"\"\n\
    \        return self._cc4e\n\n    @cc4e.setter\n    def cc4e(self, value: int)\
    \ -> None:\n        self._cc4e.value = value\n\n    @property\n    def cc3np(self)\
    \ -> Field:\n        \"\"\"\n        CC3NP\n\n        Capture/Compare 3 output\n\
    \                  Polarity\n        \"\"\"\n        return self._cc3np\n\n  \
    \  @cc3np.setter\n    def cc3np(self, value: int) -> None:\n        self._cc3np.value\
    \ = value\n\n    @property\n    def cc3ne(self) -> Field:\n        \"\"\"\n  \
    \      CC3NE\n\n        Capture/Compare 3 complementary output\n             \
    \     enable\n        \"\"\"\n        return self._cc3ne\n\n    @cc3ne.setter\n\
    \    def cc3ne(self, value: int) -> None:\n        self._cc3ne.value = value\n\
    \n    @property\n    def cc3p(self) -> Field:\n        \"\"\"\n        CC3P\n\n\
    \        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc3p\n\n    @cc3p.setter\n    def cc3p(self, value: int)\
    \ -> None:\n        self._cc3p.value = value\n\n    @property\n    def cc3e(self)\
    \ -> Field:\n        \"\"\"\n        CC3E\n\n        Capture/Compare 3 output\n\
    \                  enable\n        \"\"\"\n        return self._cc3e\n\n    @cc3e.setter\n\
    \    def cc3e(self, value: int) -> None:\n        self._cc3e.value = value\n\n\
    \    @property\n    def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\
    \n        Capture/Compare 2 output\n                  Polarity\n        \"\"\"\
    \n        return self._cc2np\n\n    @cc2np.setter\n    def cc2np(self, value:\
    \ int) -> None:\n        self._cc2np.value = value\n\n    @property\n    def cc2ne(self)\
    \ -> Field:\n        \"\"\"\n        CC2NE\n\n        Capture/Compare 2 complementary\
    \ output\n                  enable\n        \"\"\"\n        return self._cc2ne\n\
    \n    @cc2ne.setter\n    def cc2ne(self, value: int) -> None:\n        self._cc2ne.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1ne(self) -> Field:\n        \"\"\"\n        CC1NE\n\n        Capture/Compare\
    \ 1 complementary output\n                  enable\n        \"\"\"\n        return\
    \ self._cc1ne\n\n    @cc1ne.setter\n    def cc1ne(self, value: int) -> None:\n\
    \        self._cc1ne.value = value\n\n    @property\n    def cc1p(self) -> Field:\n\
    \        \"\"\"\n        CC1P\n\n        Capture/Compare 1 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc1p\n\n    @cc1p.setter\n\
    \    def cc1p(self, value: int) -> None:\n        self._cc1p.value = value\n\n\
    \    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n        CC1E\n\n\
    \        Capture/Compare 1 output\n                  enable\n        \"\"\"\n\
    \        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self, value: int)\
    \ -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt = Field(\"cnt\", 0, 16)\n        super().__init__(\"CNT\", 0x40010000\
    \ + 0x24)\n\n    @property\n    def cnt(self) -> Field:\n        \"\"\"\n    \
    \    CNT\n\n        counter value\n        \"\"\"\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40010000 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr = Field(\"arr\", 0, 16)\n        super().__init__(\"ARR\",\
    \ 0x40010000 + 0x2C)\n\n    @property\n    def arr(self) -> Field:\n        \"\
    \"\"\n        ARR\n\n        Auto-reload value\n        \"\"\"\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n \
    \   CCR1\n\n    capture/compare register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr1 = Field(\"ccr1\", 0, 16)\n        super().__init__(\"CCR1\"\
    , 0x40010000 + 0x34)\n\n    @property\n    def ccr1(self) -> Field:\n        \"\
    \"\"\n        CCR1\n\n        Capture/Compare 1 value\n        \"\"\"\n      \
    \  return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int) -> None:\n\
    \        self._ccr1.value = value\n\n\nclass Ccr2Register(Register):\n    \"\"\
    \"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr2 = Field(\"ccr2\", 0, 16)\n        super().__init__(\"CCR2\"\
    , 0x40010000 + 0x38)\n\n    @property\n    def ccr2(self) -> Field:\n        \"\
    \"\"\n        CCR2\n\n        Capture/Compare 2 value\n        \"\"\"\n      \
    \  return self._ccr2\n\n    @ccr2.setter\n    def ccr2(self, value: int) -> None:\n\
    \        self._ccr2.value = value\n\n\nclass Ccr3Register(Register):\n    \"\"\
    \"\n    CCR3\n\n    capture/compare register 3\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr3 = Field(\"ccr3\", 0, 16)\n        super().__init__(\"CCR3\"\
    , 0x40010000 + 0x3C)\n\n    @property\n    def ccr3(self) -> Field:\n        \"\
    \"\"\n        CCR3\n\n        Capture/Compare value\n        \"\"\"\n        return\
    \ self._ccr3\n\n    @ccr3.setter\n    def ccr3(self, value: int) -> None:\n  \
    \      self._ccr3.value = value\n\n\nclass Ccr4Register(Register):\n    \"\"\"\
    \n    CCR4\n\n    capture/compare register 4\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr4 = Field(\"ccr4\", 0, 16)\n        super().__init__(\"CCR4\"\
    , 0x40010000 + 0x40)\n\n    @property\n    def ccr4(self) -> Field:\n        \"\
    \"\"\n        CCR4\n\n        Capture/Compare value\n        \"\"\"\n        return\
    \ self._ccr4\n\n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n  \
    \      self._ccr4.value = value\n\n\nclass DcrRegister(Register):\n    \"\"\"\n\
    \    DCR\n\n    DMA control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dbl = Field(\"dbl\", 8, 5)\n        self._dba = Field(\"dba\",\
    \ 0, 5)\n        super().__init__(\"DCR\", 0x40010000 + 0x48)\n\n    @property\n\
    \    def dbl(self) -> Field:\n        \"\"\"\n        DBL\n\n        DMA burst\
    \ length\n        \"\"\"\n        return self._dbl\n\n    @dbl.setter\n    def\
    \ dbl(self, value: int) -> None:\n        self._dbl.value = value\n\n    @property\n\
    \    def dba(self) -> Field:\n        \"\"\"\n        DBA\n\n        DMA base\
    \ address\n        \"\"\"\n        return self._dba\n\n    @dba.setter\n    def\
    \ dba(self, value: int) -> None:\n        self._dba.value = value\n\n\nclass DmarRegister(Register):\n\
    \    \"\"\"\n    DMAR\n\n    DMA address for full transfer\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._dmab = Field(\"dmab\", 0, 16)\n        super().__init__(\"\
    DMAR\", 0x40010000 + 0x4C)\n\n    @property\n    def dmab(self) -> Field:\n  \
    \      \"\"\"\n        DMAB\n\n        DMA register for burst\n              \
    \    accesses\n        \"\"\"\n        return self._dmab\n\n    @dmab.setter\n\
    \    def dmab(self, value: int) -> None:\n        self._dmab.value = value\n\n\
    \nclass RcrRegister(Register):\n    \"\"\"\n    RCR\n\n    repetition counter\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._rep = Field(\"\
    rep\", 0, 8)\n        super().__init__(\"RCR\", 0x40010000 + 0x30)\n\n    @property\n\
    \    def rep(self) -> Field:\n        \"\"\"\n        REP\n\n        Repetition\
    \ counter value\n        \"\"\"\n        return self._rep\n\n    @rep.setter\n\
    \    def rep(self, value: int) -> None:\n        self._rep.value = value\n\n\n\
    class BdtrRegister(Register):\n    \"\"\"\n    BDTR\n\n    break and dead-time\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._moe = Field(\"\
    moe\", 15, 1)\n        self._aoe = Field(\"aoe\", 14, 1)\n        self._bkp =\
    \ Field(\"bkp\", 13, 1)\n        self._bke = Field(\"bke\", 12, 1)\n        self._ossr\
    \ = Field(\"ossr\", 11, 1)\n        self._ossi = Field(\"ossi\", 10, 1)\n    \
    \    self._lock = Field(\"lock\", 8, 2)\n        self._dtg = Field(\"dtg\", 0,\
    \ 8)\n        super().__init__(\"BDTR\", 0x40010000 + 0x44)\n\n    @property\n\
    \    def moe(self) -> Field:\n        \"\"\"\n        MOE\n\n        Main output\
    \ enable\n        \"\"\"\n        return self._moe\n\n    @moe.setter\n    def\
    \ moe(self, value: int) -> None:\n        self._moe.value = value\n\n    @property\n\
    \    def aoe(self) -> Field:\n        \"\"\"\n        AOE\n\n        Automatic\
    \ output enable\n        \"\"\"\n        return self._aoe\n\n    @aoe.setter\n\
    \    def aoe(self, value: int) -> None:\n        self._aoe.value = value\n\n \
    \   @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n  \
    \      Break polarity\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n\
    \    def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n \
    \   @property\n    def bke(self) -> Field:\n        \"\"\"\n        BKE\n\n  \
    \      Break enable\n        \"\"\"\n        return self._bke\n\n    @bke.setter\n\
    \    def bke(self, value: int) -> None:\n        self._bke.value = value\n\n \
    \   @property\n    def ossr(self) -> Field:\n        \"\"\"\n        OSSR\n\n\
    \        Off-state selection for Run\n                  mode\n        \"\"\"\n\
    \        return self._ossr\n\n    @ossr.setter\n    def ossr(self, value: int)\
    \ -> None:\n        self._ossr.value = value\n\n    @property\n    def ossi(self)\
    \ -> Field:\n        \"\"\"\n        OSSI\n\n        Off-state selection for Idle\n\
    \                  mode\n        \"\"\"\n        return self._ossi\n\n    @ossi.setter\n\
    \    def ossi(self, value: int) -> None:\n        self._ossi.value = value\n\n\
    \    @property\n    def lock(self) -> Field:\n        \"\"\"\n        LOCK\n\n\
    \        Lock configuration\n        \"\"\"\n        return self._lock\n\n   \
    \ @lock.setter\n    def lock(self, value: int) -> None:\n        self._lock.value\
    \ = value\n\n    @property\n    def dtg(self) -> Field:\n        \"\"\"\n    \
    \    DTG\n\n        Dead-time generator setup\n        \"\"\"\n        return\
    \ self._dtg\n\n    @dtg.setter\n    def dtg(self, value: int) -> None:\n     \
    \   self._dtg.value = value\n\n\nclass Tim1(Peripheral):\n    \"\"\"\n    TIM1\n\
    \n    Advanced-timers\n    \"\"\"\n\n    def __init__(self):\n        self._cr1\
    \ = Cr1Register()\n        self._cr2 = Cr2Register()\n        self._smcr = SmcrRegister()\n\
    \        self._dier = DierRegister()\n        self._sr = SrRegister()\n      \
    \  self._egr = EgrRegister()\n        self._ccmr1_output = Ccmr1_outputRegister()\n\
    \        self._ccmr1_input = Ccmr1_inputRegister()\n        self._ccmr2_output\
    \ = Ccmr2_outputRegister()\n        self._ccmr2_input = Ccmr2_inputRegister()\n\
    \        self._ccer = CcerRegister()\n        self._cnt = CntRegister()\n    \
    \    self._psc = PscRegister()\n        self._arr = ArrRegister()\n        self._ccr1\
    \ = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n        self._ccr3 =\
    \ Ccr3Register()\n        self._ccr4 = Ccr4Register()\n        self._dcr = DcrRegister()\n\
    \        self._dmar = DmarRegister()\n        self._rcr = RcrRegister()\n    \
    \    self._bdtr = BdtrRegister()\n        super().__init__(\"tim1\", 0x40010000)\n\
    \n    @property\n    def cr1(self) -> Cr1Register:\n        return self._cr1\n\
    \n    @cr1.setter\n    def cr1(self, value: int) -> None:\n        self._cr1.value\
    \ = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n        return\
    \ self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) -> None:\n     \
    \   self._cr2.value = value\n\n    @property\n    def smcr(self) -> SmcrRegister:\n\
    \        return self._smcr\n\n    @smcr.setter\n    def smcr(self, value: int)\
    \ -> None:\n        self._smcr.value = value\n\n    @property\n    def dier(self)\
    \ -> DierRegister:\n        return self._dier\n\n    @dier.setter\n    def dier(self,\
    \ value: int) -> None:\n        self._dier.value = value\n\n    @property\n  \
    \  def sr(self) -> SrRegister:\n        return self._sr\n\n    @sr.setter\n  \
    \  def sr(self, value: int) -> None:\n        self._sr.value = value\n\n    @property\n\
    \    def egr(self) -> EgrRegister:\n        return self._egr\n\n    @egr.setter\n\
    \    def egr(self, value: int) -> None:\n        self._egr.value = value\n\n \
    \   @property\n    def ccmr1_output(self) -> Ccmr1_outputRegister:\n        return\
    \ self._ccmr1_output\n\n    @ccmr1_output.setter\n    def ccmr1_output(self, value:\
    \ int) -> None:\n        self._ccmr1_output.value = value\n\n    @property\n \
    \   def ccmr1_input(self) -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\
    \n    @ccmr1_input.setter\n    def ccmr1_input(self, value: int) -> None:\n  \
    \      self._ccmr1_input.value = value\n\n    @property\n    def ccmr2_output(self)\
    \ -> Ccmr2_outputRegister:\n        return self._ccmr2_output\n\n    @ccmr2_output.setter\n\
    \    def ccmr2_output(self, value: int) -> None:\n        self._ccmr2_output.value\
    \ = value\n\n    @property\n    def ccmr2_input(self) -> Ccmr2_inputRegister:\n\
    \        return self._ccmr2_input\n\n    @ccmr2_input.setter\n    def ccmr2_input(self,\
    \ value: int) -> None:\n        self._ccmr2_input.value = value\n\n    @property\n\
    \    def ccer(self) -> CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n\
    \    def ccer(self, value: int) -> None:\n        self._ccer.value = value\n\n\
    \    @property\n    def cnt(self) -> CntRegister:\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n    @property\n    def psc(self) -> PscRegister:\n        return\
    \ self._psc\n\n    @psc.setter\n    def psc(self, value: int) -> None:\n     \
    \   self._psc.value = value\n\n    @property\n    def arr(self) -> ArrRegister:\n\
    \        return self._arr\n\n    @arr.setter\n    def arr(self, value: int) ->\
    \ None:\n        self._arr.value = value\n\n    @property\n    def ccr1(self)\
    \ -> Ccr1Register:\n        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self,\
    \ value: int) -> None:\n        self._ccr1.value = value\n\n    @property\n  \
    \  def ccr2(self) -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n\
    \    def ccr2(self, value: int) -> None:\n        self._ccr2.value = value\n\n\
    \    @property\n    def ccr3(self) -> Ccr3Register:\n        return self._ccr3\n\
    \n    @ccr3.setter\n    def ccr3(self, value: int) -> None:\n        self._ccr3.value\
    \ = value\n\n    @property\n    def ccr4(self) -> Ccr4Register:\n        return\
    \ self._ccr4\n\n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n  \
    \      self._ccr4.value = value\n\n    @property\n    def dcr(self) -> DcrRegister:\n\
    \        return self._dcr\n\n    @dcr.setter\n    def dcr(self, value: int) ->\
    \ None:\n        self._dcr.value = value\n\n    @property\n    def dmar(self)\
    \ -> DmarRegister:\n        return self._dmar\n\n    @dmar.setter\n    def dmar(self,\
    \ value: int) -> None:\n        self._dmar.value = value\n\n    @property\n  \
    \  def rcr(self) -> RcrRegister:\n        return self._rcr\n\n    @rcr.setter\n\
    \    def rcr(self, value: int) -> None:\n        self._rcr.value = value\n\n \
    \   @property\n    def bdtr(self) -> BdtrRegister:\n        return self._bdtr\n\
    \n    @bdtr.setter\n    def bdtr(self, value: int) -> None:\n        self._bdtr.value\
    \ = value\n"
  name: TIM1
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._cms =\
    \ Field(\"cms\", 5, 2)\n        self._dir = Field(\"dir\", 4, 1)\n        self._opm\
    \ = Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40010400 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def cms(self)\
    \ -> Field:\n        \"\"\"\n        CMS\n\n        Center-aligned mode\n    \
    \              selection\n        \"\"\"\n        return self._cms\n\n    @cms.setter\n\
    \    def cms(self, value: int) -> None:\n        self._cms.value = value\n\n \
    \   @property\n    def dir(self) -> Field:\n        \"\"\"\n        DIR\n\n  \
    \      Direction\n        \"\"\"\n        return self._dir\n\n    @dir.setter\n\
    \    def dir(self, value: int) -> None:\n        self._dir.value = value\n\n \
    \   @property\n    def opm(self) -> Field:\n        \"\"\"\n        OPM\n\n  \
    \      One-pulse mode\n        \"\"\"\n        return self._opm\n\n    @opm.setter\n\
    \    def opm(self, value: int) -> None:\n        self._opm.value = value\n\n \
    \   @property\n    def urs(self) -> Field:\n        \"\"\"\n        URS\n\n  \
    \      Update request source\n        \"\"\"\n        return self._urs\n\n   \
    \ @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._ois4 = Field(\"\
    ois4\", 14, 1)\n        self._ois3n = Field(\"ois3n\", 13, 1)\n        self._ois3\
    \ = Field(\"ois3\", 12, 1)\n        self._ois2n = Field(\"ois2n\", 11, 1)\n  \
    \      self._ois2 = Field(\"ois2\", 10, 1)\n        self._ois1n = Field(\"ois1n\"\
    , 9, 1)\n        self._ois1 = Field(\"ois1\", 8, 1)\n        self._ti1s = Field(\"\
    ti1s\", 7, 1)\n        self._mms = Field(\"mms\", 4, 3)\n        self._ccds =\
    \ Field(\"ccds\", 3, 1)\n        self._ccus = Field(\"ccus\", 2, 1)\n        self._ccpc\
    \ = Field(\"ccpc\", 0, 1)\n        super().__init__(\"CR2\", 0x40010400 + 0x4)\n\
    \n    @property\n    def ois4(self) -> Field:\n        \"\"\"\n        OIS4\n\n\
    \        Output Idle state 4\n        \"\"\"\n        return self._ois4\n\n  \
    \  @ois4.setter\n    def ois4(self, value: int) -> None:\n        self._ois4.value\
    \ = value\n\n    @property\n    def ois3n(self) -> Field:\n        \"\"\"\n  \
    \      OIS3N\n\n        Output Idle state 3\n        \"\"\"\n        return self._ois3n\n\
    \n    @ois3n.setter\n    def ois3n(self, value: int) -> None:\n        self._ois3n.value\
    \ = value\n\n    @property\n    def ois3(self) -> Field:\n        \"\"\"\n   \
    \     OIS3\n\n        Output Idle state 3\n        \"\"\"\n        return self._ois3\n\
    \n    @ois3.setter\n    def ois3(self, value: int) -> None:\n        self._ois3.value\
    \ = value\n\n    @property\n    def ois2n(self) -> Field:\n        \"\"\"\n  \
    \      OIS2N\n\n        Output Idle state 2\n        \"\"\"\n        return self._ois2n\n\
    \n    @ois2n.setter\n    def ois2n(self, value: int) -> None:\n        self._ois2n.value\
    \ = value\n\n    @property\n    def ois2(self) -> Field:\n        \"\"\"\n   \
    \     OIS2\n\n        Output Idle state 2\n        \"\"\"\n        return self._ois2\n\
    \n    @ois2.setter\n    def ois2(self, value: int) -> None:\n        self._ois2.value\
    \ = value\n\n    @property\n    def ois1n(self) -> Field:\n        \"\"\"\n  \
    \      OIS1N\n\n        Output Idle state 1\n        \"\"\"\n        return self._ois1n\n\
    \n    @ois1n.setter\n    def ois1n(self, value: int) -> None:\n        self._ois1n.value\
    \ = value\n\n    @property\n    def ois1(self) -> Field:\n        \"\"\"\n   \
    \     OIS1\n\n        Output Idle state 1\n        \"\"\"\n        return self._ois1\n\
    \n    @ois1.setter\n    def ois1(self, value: int) -> None:\n        self._ois1.value\
    \ = value\n\n    @property\n    def ti1s(self) -> Field:\n        \"\"\"\n   \
    \     TI1S\n\n        TI1 selection\n        \"\"\"\n        return self._ti1s\n\
    \n    @ti1s.setter\n    def ti1s(self, value: int) -> None:\n        self._ti1s.value\
    \ = value\n\n    @property\n    def mms(self) -> Field:\n        \"\"\"\n    \
    \    MMS\n\n        Master mode selection\n        \"\"\"\n        return self._mms\n\
    \n    @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n    @property\n    def ccds(self) -> Field:\n        \"\"\"\n   \
    \     CCDS\n\n        Capture/compare DMA\n                  selection\n     \
    \   \"\"\"\n        return self._ccds\n\n    @ccds.setter\n    def ccds(self,\
    \ value: int) -> None:\n        self._ccds.value = value\n\n    @property\n  \
    \  def ccus(self) -> Field:\n        \"\"\"\n        CCUS\n\n        Capture/compare\
    \ control update\n                  selection\n        \"\"\"\n        return\
    \ self._ccus\n\n    @ccus.setter\n    def ccus(self, value: int) -> None:\n  \
    \      self._ccus.value = value\n\n    @property\n    def ccpc(self) -> Field:\n\
    \        \"\"\"\n        CCPC\n\n        Capture/compare preloaded\n         \
    \         control\n        \"\"\"\n        return self._ccpc\n\n    @ccpc.setter\n\
    \    def ccpc(self, value: int) -> None:\n        self._ccpc.value = value\n\n\
    \nclass SmcrRegister(Register):\n    \"\"\"\n    SMCR\n\n    slave mode control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._etp = Field(\"\
    etp\", 15, 1)\n        self._ece = Field(\"ece\", 14, 1)\n        self._etps =\
    \ Field(\"etps\", 12, 2)\n        self._etf = Field(\"etf\", 8, 4)\n        self._msm\
    \ = Field(\"msm\", 7, 1)\n        self._ts = Field(\"ts\", 4, 3)\n        self._sms\
    \ = Field(\"sms\", 0, 3)\n        super().__init__(\"SMCR\", 0x40010400 + 0x8)\n\
    \n    @property\n    def etp(self) -> Field:\n        \"\"\"\n        ETP\n\n\
    \        External trigger polarity\n        \"\"\"\n        return self._etp\n\
    \n    @etp.setter\n    def etp(self, value: int) -> None:\n        self._etp.value\
    \ = value\n\n    @property\n    def ece(self) -> Field:\n        \"\"\"\n    \
    \    ECE\n\n        External clock enable\n        \"\"\"\n        return self._ece\n\
    \n    @ece.setter\n    def ece(self, value: int) -> None:\n        self._ece.value\
    \ = value\n\n    @property\n    def etps(self) -> Field:\n        \"\"\"\n   \
    \     ETPS\n\n        External trigger prescaler\n        \"\"\"\n        return\
    \ self._etps\n\n    @etps.setter\n    def etps(self, value: int) -> None:\n  \
    \      self._etps.value = value\n\n    @property\n    def etf(self) -> Field:\n\
    \        \"\"\"\n        ETF\n\n        External trigger filter\n        \"\"\"\
    \n        return self._etf\n\n    @etf.setter\n    def etf(self, value: int) ->\
    \ None:\n        self._etf.value = value\n\n    @property\n    def msm(self) ->\
    \ Field:\n        \"\"\"\n        MSM\n\n        Master/Slave mode\n        \"\
    \"\"\n        return self._msm\n\n    @msm.setter\n    def msm(self, value: int)\
    \ -> None:\n        self._msm.value = value\n\n    @property\n    def ts(self)\
    \ -> Field:\n        \"\"\"\n        TS\n\n        Trigger selection\n       \
    \ \"\"\"\n        return self._ts\n\n    @ts.setter\n    def ts(self, value: int)\
    \ -> None:\n        self._ts.value = value\n\n    @property\n    def sms(self)\
    \ -> Field:\n        \"\"\"\n        SMS\n\n        Slave mode selection\n   \
    \     \"\"\"\n        return self._sms\n\n    @sms.setter\n    def sms(self, value:\
    \ int) -> None:\n        self._sms.value = value\n\n\nclass DierRegister(Register):\n\
    \    \"\"\"\n    DIER\n\n    DMA/Interrupt enable register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._tde = Field(\"tde\", 14, 1)\n        self._comde\
    \ = Field(\"comde\", 13, 1)\n        self._cc4de = Field(\"cc4de\", 12, 1)\n \
    \       self._cc3de = Field(\"cc3de\", 11, 1)\n        self._cc2de = Field(\"\
    cc2de\", 10, 1)\n        self._cc1de = Field(\"cc1de\", 9, 1)\n        self._ude\
    \ = Field(\"ude\", 8, 1)\n        self._bie = Field(\"bie\", 7, 1)\n        self._tie\
    \ = Field(\"tie\", 6, 1)\n        self._comie = Field(\"comie\", 5, 1)\n     \
    \   self._cc4ie = Field(\"cc4ie\", 4, 1)\n        self._cc3ie = Field(\"cc3ie\"\
    , 3, 1)\n        self._cc2ie = Field(\"cc2ie\", 2, 1)\n        self._cc1ie = Field(\"\
    cc1ie\", 1, 1)\n        self._uie = Field(\"uie\", 0, 1)\n        super().__init__(\"\
    DIER\", 0x40010400 + 0xC)\n\n    @property\n    def tde(self) -> Field:\n    \
    \    \"\"\"\n        TDE\n\n        Trigger DMA request enable\n        \"\"\"\
    \n        return self._tde\n\n    @tde.setter\n    def tde(self, value: int) ->\
    \ None:\n        self._tde.value = value\n\n    @property\n    def comde(self)\
    \ -> Field:\n        \"\"\"\n        COMDE\n\n        COM DMA request enable\n\
    \        \"\"\"\n        return self._comde\n\n    @comde.setter\n    def comde(self,\
    \ value: int) -> None:\n        self._comde.value = value\n\n    @property\n \
    \   def cc4de(self) -> Field:\n        \"\"\"\n        CC4DE\n\n        Capture/Compare\
    \ 4 DMA request\n                  enable\n        \"\"\"\n        return self._cc4de\n\
    \n    @cc4de.setter\n    def cc4de(self, value: int) -> None:\n        self._cc4de.value\
    \ = value\n\n    @property\n    def cc3de(self) -> Field:\n        \"\"\"\n  \
    \      CC3DE\n\n        Capture/Compare 3 DMA request\n                  enable\n\
    \        \"\"\"\n        return self._cc3de\n\n    @cc3de.setter\n    def cc3de(self,\
    \ value: int) -> None:\n        self._cc3de.value = value\n\n    @property\n \
    \   def cc2de(self) -> Field:\n        \"\"\"\n        CC2DE\n\n        Capture/Compare\
    \ 2 DMA request\n                  enable\n        \"\"\"\n        return self._cc2de\n\
    \n    @cc2de.setter\n    def cc2de(self, value: int) -> None:\n        self._cc2de.value\
    \ = value\n\n    @property\n    def cc1de(self) -> Field:\n        \"\"\"\n  \
    \      CC1DE\n\n        Capture/Compare 1 DMA request\n                  enable\n\
    \        \"\"\"\n        return self._cc1de\n\n    @cc1de.setter\n    def cc1de(self,\
    \ value: int) -> None:\n        self._cc1de.value = value\n\n    @property\n \
    \   def ude(self) -> Field:\n        \"\"\"\n        UDE\n\n        Update DMA\
    \ request enable\n        \"\"\"\n        return self._ude\n\n    @ude.setter\n\
    \    def ude(self, value: int) -> None:\n        self._ude.value = value\n\n \
    \   @property\n    def bie(self) -> Field:\n        \"\"\"\n        BIE\n\n  \
    \      Break interrupt enable\n        \"\"\"\n        return self._bie\n\n  \
    \  @bie.setter\n    def bie(self, value: int) -> None:\n        self._bie.value\
    \ = value\n\n    @property\n    def tie(self) -> Field:\n        \"\"\"\n    \
    \    TIE\n\n        Trigger interrupt enable\n        \"\"\"\n        return self._tie\n\
    \n    @tie.setter\n    def tie(self, value: int) -> None:\n        self._tie.value\
    \ = value\n\n    @property\n    def comie(self) -> Field:\n        \"\"\"\n  \
    \      COMIE\n\n        COM interrupt enable\n        \"\"\"\n        return self._comie\n\
    \n    @comie.setter\n    def comie(self, value: int) -> None:\n        self._comie.value\
    \ = value\n\n    @property\n    def cc4ie(self) -> Field:\n        \"\"\"\n  \
    \      CC4IE\n\n        Capture/Compare 4 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc4ie\n\n    @cc4ie.setter\n    def cc4ie(self,\
    \ value: int) -> None:\n        self._cc4ie.value = value\n\n    @property\n \
    \   def cc3ie(self) -> Field:\n        \"\"\"\n        CC3IE\n\n        Capture/Compare\
    \ 3 interrupt\n                  enable\n        \"\"\"\n        return self._cc3ie\n\
    \n    @cc3ie.setter\n    def cc3ie(self, value: int) -> None:\n        self._cc3ie.value\
    \ = value\n\n    @property\n    def cc2ie(self) -> Field:\n        \"\"\"\n  \
    \      CC2IE\n\n        Capture/Compare 2 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc2ie\n\n    @cc2ie.setter\n    def cc2ie(self,\
    \ value: int) -> None:\n        self._cc2ie.value = value\n\n    @property\n \
    \   def cc1ie(self) -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare\
    \ 1 interrupt\n                  enable\n        \"\"\"\n        return self._cc1ie\n\
    \n    @cc1ie.setter\n    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value\
    \ = value\n\n    @property\n    def uie(self) -> Field:\n        \"\"\"\n    \
    \    UIE\n\n        Update interrupt enable\n        \"\"\"\n        return self._uie\n\
    \n    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc4of = Field(\"cc4of\"\
    , 12, 1)\n        self._cc3of = Field(\"cc3of\", 11, 1)\n        self._cc2of =\
    \ Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"cc1of\", 9, 1)\n    \
    \    self._bif = Field(\"bif\", 7, 1)\n        self._tif = Field(\"tif\", 6, 1)\n\
    \        self._comif = Field(\"comif\", 5, 1)\n        self._cc4if = Field(\"\
    cc4if\", 4, 1)\n        self._cc3if = Field(\"cc3if\", 3, 1)\n        self._cc2if\
    \ = Field(\"cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n   \
    \     self._uif = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40010400\
    \ + 0x10)\n\n    @property\n    def cc4of(self) -> Field:\n        \"\"\"\n  \
    \      CC4OF\n\n        Capture/Compare 4 overcapture\n                  flag\n\
    \        \"\"\"\n        return self._cc4of\n\n    @cc4of.setter\n    def cc4of(self,\
    \ value: int) -> None:\n        self._cc4of.value = value\n\n    @property\n \
    \   def cc3of(self) -> Field:\n        \"\"\"\n        CC3OF\n\n        Capture/Compare\
    \ 3 overcapture\n                  flag\n        \"\"\"\n        return self._cc3of\n\
    \n    @cc3of.setter\n    def cc3of(self, value: int) -> None:\n        self._cc3of.value\
    \ = value\n\n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n  \
    \      CC2OF\n\n        Capture/compare 2 overcapture\n                  flag\n\
    \        \"\"\"\n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self,\
    \ value: int) -> None:\n        self._cc2of.value = value\n\n    @property\n \
    \   def cc1of(self) -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare\
    \ 1 overcapture\n                  flag\n        \"\"\"\n        return self._cc1of\n\
    \n    @cc1of.setter\n    def cc1of(self, value: int) -> None:\n        self._cc1of.value\
    \ = value\n\n    @property\n    def bif(self) -> Field:\n        \"\"\"\n    \
    \    BIF\n\n        Break interrupt flag\n        \"\"\"\n        return self._bif\n\
    \n    @bif.setter\n    def bif(self, value: int) -> None:\n        self._bif.value\
    \ = value\n\n    @property\n    def tif(self) -> Field:\n        \"\"\"\n    \
    \    TIF\n\n        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\
    \n    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def comif(self) -> Field:\n        \"\"\"\n  \
    \      COMIF\n\n        COM interrupt flag\n        \"\"\"\n        return self._comif\n\
    \n    @comif.setter\n    def comif(self, value: int) -> None:\n        self._comif.value\
    \ = value\n\n    @property\n    def cc4if(self) -> Field:\n        \"\"\"\n  \
    \      CC4IF\n\n        Capture/Compare 4 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc4if\n\n    @cc4if.setter\n    def cc4if(self,\
    \ value: int) -> None:\n        self._cc4if.value = value\n\n    @property\n \
    \   def cc3if(self) -> Field:\n        \"\"\"\n        CC3IF\n\n        Capture/Compare\
    \ 3 interrupt\n                  flag\n        \"\"\"\n        return self._cc3if\n\
    \n    @cc3if.setter\n    def cc3if(self, value: int) -> None:\n        self._cc3if.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._bg\
    \ = Field(\"bg\", 7, 1)\n        self._tg = Field(\"tg\", 6, 1)\n        self._comg\
    \ = Field(\"comg\", 5, 1)\n        self._cc4g = Field(\"cc4g\", 4, 1)\n      \
    \  self._cc3g = Field(\"cc3g\", 3, 1)\n        self._cc2g = Field(\"cc2g\", 2,\
    \ 1)\n        self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"\
    ug\", 0, 1)\n        super().__init__(\"EGR\", 0x40010400 + 0x14)\n\n    @property\n\
    \    def bg(self) -> Field:\n        \"\"\"\n        BG\n\n        Break generation\n\
    \        \"\"\"\n        return self._bg\n\n    @bg.setter\n    def bg(self, value:\
    \ int) -> None:\n        self._bg.value = value\n\n    @property\n    def tg(self)\
    \ -> Field:\n        \"\"\"\n        TG\n\n        Trigger generation\n      \
    \  \"\"\"\n        return self._tg\n\n    @tg.setter\n    def tg(self, value:\
    \ int) -> None:\n        self._tg.value = value\n\n    @property\n    def comg(self)\
    \ -> Field:\n        \"\"\"\n        COMG\n\n        Capture/Compare control update\n\
    \                  generation\n        \"\"\"\n        return self._comg\n\n \
    \   @comg.setter\n    def comg(self, value: int) -> None:\n        self._comg.value\
    \ = value\n\n    @property\n    def cc4g(self) -> Field:\n        \"\"\"\n   \
    \     CC4G\n\n        Capture/compare 4\n                  generation\n      \
    \  \"\"\"\n        return self._cc4g\n\n    @cc4g.setter\n    def cc4g(self, value:\
    \ int) -> None:\n        self._cc4g.value = value\n\n    @property\n    def cc3g(self)\
    \ -> Field:\n        \"\"\"\n        CC3G\n\n        Capture/compare 3\n     \
    \             generation\n        \"\"\"\n        return self._cc3g\n\n    @cc3g.setter\n\
    \    def cc3g(self, value: int) -> None:\n        self._cc3g.value = value\n\n\
    \    @property\n    def cc2g(self) -> Field:\n        \"\"\"\n        CC2G\n\n\
    \        Capture/compare 2\n                  generation\n        \"\"\"\n   \
    \     return self._cc2g\n\n    @cc2g.setter\n    def cc2g(self, value: int) ->\
    \ None:\n        self._cc2g.value = value\n\n    @property\n    def cc1g(self)\
    \ -> Field:\n        \"\"\"\n        CC1G\n\n        Capture/compare 1\n     \
    \             generation\n        \"\"\"\n        return self._cc1g\n\n    @cc1g.setter\n\
    \    def cc1g(self, value: int) -> None:\n        self._cc1g.value = value\n\n\
    \    @property\n    def ug(self) -> Field:\n        \"\"\"\n        UG\n\n   \
    \     Update generation\n        \"\"\"\n        return self._ug\n\n    @ug.setter\n\
    \    def ug(self, value: int) -> None:\n        self._ug.value = value\n\n\nclass\
    \ Ccmr1_outputRegister(Register):\n    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare\
    \ mode register 1 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc2ce = Field(\"oc2ce\", 15, 1)\n        self._oc2m = Field(\"\
    oc2m\", 12, 3)\n        self._oc2pe = Field(\"oc2pe\", 11, 1)\n        self._oc2fe\
    \ = Field(\"oc2fe\", 10, 1)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n    \
    \    self._oc1ce = Field(\"oc1ce\", 7, 1)\n        self._oc1m = Field(\"oc1m\"\
    , 4, 3)\n        self._oc1pe = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"\
    oc1fe\", 2, 1)\n        self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"\
    CCMR1_Output\", 0x40010400 + 0x18)\n\n    @property\n    def oc2ce(self) -> Field:\n\
    \        \"\"\"\n        OC2CE\n\n        Output Compare 2 clear\n           \
    \       enable\n        \"\"\"\n        return self._oc2ce\n\n    @oc2ce.setter\n\
    \    def oc2ce(self, value: int) -> None:\n        self._oc2ce.value = value\n\
    \n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n        OC2M\n\n\
    \        Output Compare 2 mode\n        \"\"\"\n        return self._oc2m\n\n\
    \    @oc2m.setter\n    def oc2m(self, value: int) -> None:\n        self._oc2m.value\
    \ = value\n\n    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n  \
    \      OC2PE\n\n        Output Compare 2 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n    def oc2pe(self,\
    \ value: int) -> None:\n        self._oc2pe.value = value\n\n    @property\n \
    \   def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\n        Output\
    \ Compare 2 fast\n                  enable\n        \"\"\"\n        return self._oc2fe\n\
    \n    @oc2fe.setter\n    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value\
    \ = value\n\n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n   \
    \     CC2S\n\n        Capture/Compare 2\n                  selection\n       \
    \ \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n    def cc2s(self, value:\
    \ int) -> None:\n        self._cc2s.value = value\n\n    @property\n    def oc1ce(self)\
    \ -> Field:\n        \"\"\"\n        OC1CE\n\n        Output Compare 1 clear\n\
    \                  enable\n        \"\"\"\n        return self._oc1ce\n\n    @oc1ce.setter\n\
    \    def oc1ce(self, value: int) -> None:\n        self._oc1ce.value = value\n\
    \n    @property\n    def oc1m(self) -> Field:\n        \"\"\"\n        OC1M\n\n\
    \        Output Compare 1 mode\n        \"\"\"\n        return self._oc1m\n\n\
    \    @oc1m.setter\n    def oc1m(self, value: int) -> None:\n        self._oc1m.value\
    \ = value\n\n    @property\n    def oc1pe(self) -> Field:\n        \"\"\"\n  \
    \      OC1PE\n\n        Output Compare 1 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n    def oc1pe(self,\
    \ value: int) -> None:\n        self._oc1pe.value = value\n\n    @property\n \
    \   def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\n        Output\
    \ Compare 1 fast\n                  enable\n        \"\"\"\n        return self._oc1fe\n\
    \n    @oc1fe.setter\n    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value\
    \ = value\n\n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n   \
    \     CC1S\n\n        Capture/Compare 1\n                  selection\n       \
    \ \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n    def cc1s(self, value:\
    \ int) -> None:\n        self._cc1s.value = value\n\n\nclass Ccmr1_inputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare mode register 1 (input\n \
    \             mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic2f\
    \ = Field(\"ic2f\", 12, 4)\n        self._ic2pcs = Field(\"ic2pcs\", 10, 2)\n\
    \        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f = Field(\"ic1f\"\
    , 4, 4)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n        self._cc1s = Field(\"\
    cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\", 0x40010400 + 0x18)\n\n\
    \    @property\n    def ic2f(self) -> Field:\n        \"\"\"\n        IC2F\n\n\
    \        Input capture 2 filter\n        \"\"\"\n        return self._ic2f\n\n\
    \    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n        self._ic2f.value\
    \ = value\n\n    @property\n    def ic2pcs(self) -> Field:\n        \"\"\"\n \
    \       IC2PCS\n\n        Input capture 2 prescaler\n        \"\"\"\n        return\
    \ self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self, value: int) -> None:\n\
    \        self._ic2pcs.value = value\n\n    @property\n    def cc2s(self) -> Field:\n\
    \        \"\"\"\n        CC2S\n\n        Capture/Compare 2\n                 \
    \ selection\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n \
    \   def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n        IC1F\n\n\
    \        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\n\
    \    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class Ccmr2_outputRegister(Register):\n    \"\"\"\n    CCMR2_OUTPUT\n\n    capture/compare\
    \ mode register 2 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc4ce = Field(\"oc4ce\", 15, 1)\n        self._oc4m = Field(\"\
    oc4m\", 12, 3)\n        self._oc4pe = Field(\"oc4pe\", 11, 1)\n        self._oc4fe\
    \ = Field(\"oc4fe\", 10, 1)\n        self._cc4s = Field(\"cc4s\", 8, 2)\n    \
    \    self._oc3ce = Field(\"oc3ce\", 7, 1)\n        self._oc3m = Field(\"oc3m\"\
    , 4, 3)\n        self._oc3pe = Field(\"oc3pe\", 3, 1)\n        self._oc3fe = Field(\"\
    oc3fe\", 2, 1)\n        self._cc3s = Field(\"cc3s\", 0, 2)\n        super().__init__(\"\
    CCMR2_Output\", 0x40010400 + 0x1C)\n\n    @property\n    def oc4ce(self) -> Field:\n\
    \        \"\"\"\n        OC4CE\n\n        Output compare 4 clear\n           \
    \       enable\n        \"\"\"\n        return self._oc4ce\n\n    @oc4ce.setter\n\
    \    def oc4ce(self, value: int) -> None:\n        self._oc4ce.value = value\n\
    \n    @property\n    def oc4m(self) -> Field:\n        \"\"\"\n        OC4M\n\n\
    \        Output compare 4 mode\n        \"\"\"\n        return self._oc4m\n\n\
    \    @oc4m.setter\n    def oc4m(self, value: int) -> None:\n        self._oc4m.value\
    \ = value\n\n    @property\n    def oc4pe(self) -> Field:\n        \"\"\"\n  \
    \      OC4PE\n\n        Output compare 4 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc4pe\n\n    @oc4pe.setter\n    def oc4pe(self,\
    \ value: int) -> None:\n        self._oc4pe.value = value\n\n    @property\n \
    \   def oc4fe(self) -> Field:\n        \"\"\"\n        OC4FE\n\n        Output\
    \ compare 4 fast\n                  enable\n        \"\"\"\n        return self._oc4fe\n\
    \n    @oc4fe.setter\n    def oc4fe(self, value: int) -> None:\n        self._oc4fe.value\
    \ = value\n\n    @property\n    def cc4s(self) -> Field:\n        \"\"\"\n   \
    \     CC4S\n\n        Capture/Compare 4\n                  selection\n       \
    \ \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n    def cc4s(self, value:\
    \ int) -> None:\n        self._cc4s.value = value\n\n    @property\n    def oc3ce(self)\
    \ -> Field:\n        \"\"\"\n        OC3CE\n\n        Output compare 3 clear\n\
    \                  enable\n        \"\"\"\n        return self._oc3ce\n\n    @oc3ce.setter\n\
    \    def oc3ce(self, value: int) -> None:\n        self._oc3ce.value = value\n\
    \n    @property\n    def oc3m(self) -> Field:\n        \"\"\"\n        OC3M\n\n\
    \        Output compare 3 mode\n        \"\"\"\n        return self._oc3m\n\n\
    \    @oc3m.setter\n    def oc3m(self, value: int) -> None:\n        self._oc3m.value\
    \ = value\n\n    @property\n    def oc3pe(self) -> Field:\n        \"\"\"\n  \
    \      OC3PE\n\n        Output compare 3 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc3pe\n\n    @oc3pe.setter\n    def oc3pe(self,\
    \ value: int) -> None:\n        self._oc3pe.value = value\n\n    @property\n \
    \   def oc3fe(self) -> Field:\n        \"\"\"\n        OC3FE\n\n        Output\
    \ compare 3 fast\n                  enable\n        \"\"\"\n        return self._oc3fe\n\
    \n    @oc3fe.setter\n    def oc3fe(self, value: int) -> None:\n        self._oc3fe.value\
    \ = value\n\n    @property\n    def cc3s(self) -> Field:\n        \"\"\"\n   \
    \     CC3S\n\n        Capture/Compare 3\n                  selection\n       \
    \ \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n    def cc3s(self, value:\
    \ int) -> None:\n        self._cc3s.value = value\n\n\nclass Ccmr2_inputRegister(Register):\n\
    \    \"\"\"\n    CCMR2_INPUT\n\n    capture/compare mode register 2 (input\n \
    \             mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic4f\
    \ = Field(\"ic4f\", 12, 4)\n        self._ic4psc = Field(\"ic4psc\", 10, 2)\n\
    \        self._cc4s = Field(\"cc4s\", 8, 2)\n        self._ic3f = Field(\"ic3f\"\
    , 4, 4)\n        self._ic3psc = Field(\"ic3psc\", 2, 2)\n        self._cc3s =\
    \ Field(\"cc3s\", 0, 2)\n        super().__init__(\"CCMR2_Input\", 0x40010400\
    \ + 0x1C)\n\n    @property\n    def ic4f(self) -> Field:\n        \"\"\"\n   \
    \     IC4F\n\n        Input capture 4 filter\n        \"\"\"\n        return self._ic4f\n\
    \n    @ic4f.setter\n    def ic4f(self, value: int) -> None:\n        self._ic4f.value\
    \ = value\n\n    @property\n    def ic4psc(self) -> Field:\n        \"\"\"\n \
    \       IC4PSC\n\n        Input capture 4 prescaler\n        \"\"\"\n        return\
    \ self._ic4psc\n\n    @ic4psc.setter\n    def ic4psc(self, value: int) -> None:\n\
    \        self._ic4psc.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        Capture/Compare 4\n                 \
    \ selection\n        \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n \
    \   def cc4s(self, value: int) -> None:\n        self._cc4s.value = value\n\n\
    \    @property\n    def ic3f(self) -> Field:\n        \"\"\"\n        IC3F\n\n\
    \        Input capture 3 filter\n        \"\"\"\n        return self._ic3f\n\n\
    \    @ic3f.setter\n    def ic3f(self, value: int) -> None:\n        self._ic3f.value\
    \ = value\n\n    @property\n    def ic3psc(self) -> Field:\n        \"\"\"\n \
    \       IC3PSC\n\n        Input capture 3 prescaler\n        \"\"\"\n        return\
    \ self._ic3psc\n\n    @ic3psc.setter\n    def ic3psc(self, value: int) -> None:\n\
    \        self._ic3psc.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        Capture/compare 3\n                 \
    \ selection\n        \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n \
    \   def cc3s(self, value: int) -> None:\n        self._cc3s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc4p\
    \ = Field(\"cc4p\", 13, 1)\n        self._cc4e = Field(\"cc4e\", 12, 1)\n    \
    \    self._cc3np = Field(\"cc3np\", 11, 1)\n        self._cc3ne = Field(\"cc3ne\"\
    , 10, 1)\n        self._cc3p = Field(\"cc3p\", 9, 1)\n        self._cc3e = Field(\"\
    cc3e\", 8, 1)\n        self._cc2np = Field(\"cc2np\", 7, 1)\n        self._cc2ne\
    \ = Field(\"cc2ne\", 6, 1)\n        self._cc2p = Field(\"cc2p\", 5, 1)\n     \
    \   self._cc2e = Field(\"cc2e\", 4, 1)\n        self._cc1np = Field(\"cc1np\"\
    , 3, 1)\n        self._cc1ne = Field(\"cc1ne\", 2, 1)\n        self._cc1p = Field(\"\
    cc1p\", 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40010400 + 0x20)\n\n    @property\n    def cc4p(self) -> Field:\n  \
    \      \"\"\"\n        CC4P\n\n        Capture/Compare 3 output\n            \
    \      Polarity\n        \"\"\"\n        return self._cc4p\n\n    @cc4p.setter\n\
    \    def cc4p(self, value: int) -> None:\n        self._cc4p.value = value\n\n\
    \    @property\n    def cc4e(self) -> Field:\n        \"\"\"\n        CC4E\n\n\
    \        Capture/Compare 4 output\n                  enable\n        \"\"\"\n\
    \        return self._cc4e\n\n    @cc4e.setter\n    def cc4e(self, value: int)\
    \ -> None:\n        self._cc4e.value = value\n\n    @property\n    def cc3np(self)\
    \ -> Field:\n        \"\"\"\n        CC3NP\n\n        Capture/Compare 3 output\n\
    \                  Polarity\n        \"\"\"\n        return self._cc3np\n\n  \
    \  @cc3np.setter\n    def cc3np(self, value: int) -> None:\n        self._cc3np.value\
    \ = value\n\n    @property\n    def cc3ne(self) -> Field:\n        \"\"\"\n  \
    \      CC3NE\n\n        Capture/Compare 3 complementary output\n             \
    \     enable\n        \"\"\"\n        return self._cc3ne\n\n    @cc3ne.setter\n\
    \    def cc3ne(self, value: int) -> None:\n        self._cc3ne.value = value\n\
    \n    @property\n    def cc3p(self) -> Field:\n        \"\"\"\n        CC3P\n\n\
    \        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc3p\n\n    @cc3p.setter\n    def cc3p(self, value: int)\
    \ -> None:\n        self._cc3p.value = value\n\n    @property\n    def cc3e(self)\
    \ -> Field:\n        \"\"\"\n        CC3E\n\n        Capture/Compare 3 output\n\
    \                  enable\n        \"\"\"\n        return self._cc3e\n\n    @cc3e.setter\n\
    \    def cc3e(self, value: int) -> None:\n        self._cc3e.value = value\n\n\
    \    @property\n    def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\
    \n        Capture/Compare 2 output\n                  Polarity\n        \"\"\"\
    \n        return self._cc2np\n\n    @cc2np.setter\n    def cc2np(self, value:\
    \ int) -> None:\n        self._cc2np.value = value\n\n    @property\n    def cc2ne(self)\
    \ -> Field:\n        \"\"\"\n        CC2NE\n\n        Capture/Compare 2 complementary\
    \ output\n                  enable\n        \"\"\"\n        return self._cc2ne\n\
    \n    @cc2ne.setter\n    def cc2ne(self, value: int) -> None:\n        self._cc2ne.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1ne(self) -> Field:\n        \"\"\"\n        CC1NE\n\n        Capture/Compare\
    \ 1 complementary output\n                  enable\n        \"\"\"\n        return\
    \ self._cc1ne\n\n    @cc1ne.setter\n    def cc1ne(self, value: int) -> None:\n\
    \        self._cc1ne.value = value\n\n    @property\n    def cc1p(self) -> Field:\n\
    \        \"\"\"\n        CC1P\n\n        Capture/Compare 1 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc1p\n\n    @cc1p.setter\n\
    \    def cc1p(self, value: int) -> None:\n        self._cc1p.value = value\n\n\
    \    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n        CC1E\n\n\
    \        Capture/Compare 1 output\n                  enable\n        \"\"\"\n\
    \        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self, value: int)\
    \ -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt = Field(\"cnt\", 0, 16)\n        super().__init__(\"CNT\", 0x40010400\
    \ + 0x24)\n\n    @property\n    def cnt(self) -> Field:\n        \"\"\"\n    \
    \    CNT\n\n        counter value\n        \"\"\"\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40010400 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr = Field(\"arr\", 0, 16)\n        super().__init__(\"ARR\",\
    \ 0x40010400 + 0x2C)\n\n    @property\n    def arr(self) -> Field:\n        \"\
    \"\"\n        ARR\n\n        Auto-reload value\n        \"\"\"\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n \
    \   CCR1\n\n    capture/compare register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr1 = Field(\"ccr1\", 0, 16)\n        super().__init__(\"CCR1\"\
    , 0x40010400 + 0x34)\n\n    @property\n    def ccr1(self) -> Field:\n        \"\
    \"\"\n        CCR1\n\n        Capture/Compare 1 value\n        \"\"\"\n      \
    \  return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int) -> None:\n\
    \        self._ccr1.value = value\n\n\nclass Ccr2Register(Register):\n    \"\"\
    \"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr2 = Field(\"ccr2\", 0, 16)\n        super().__init__(\"CCR2\"\
    , 0x40010400 + 0x38)\n\n    @property\n    def ccr2(self) -> Field:\n        \"\
    \"\"\n        CCR2\n\n        Capture/Compare 2 value\n        \"\"\"\n      \
    \  return self._ccr2\n\n    @ccr2.setter\n    def ccr2(self, value: int) -> None:\n\
    \        self._ccr2.value = value\n\n\nclass Ccr3Register(Register):\n    \"\"\
    \"\n    CCR3\n\n    capture/compare register 3\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr3 = Field(\"ccr3\", 0, 16)\n        super().__init__(\"CCR3\"\
    , 0x40010400 + 0x3C)\n\n    @property\n    def ccr3(self) -> Field:\n        \"\
    \"\"\n        CCR3\n\n        Capture/Compare value\n        \"\"\"\n        return\
    \ self._ccr3\n\n    @ccr3.setter\n    def ccr3(self, value: int) -> None:\n  \
    \      self._ccr3.value = value\n\n\nclass Ccr4Register(Register):\n    \"\"\"\
    \n    CCR4\n\n    capture/compare register 4\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr4 = Field(\"ccr4\", 0, 16)\n        super().__init__(\"CCR4\"\
    , 0x40010400 + 0x40)\n\n    @property\n    def ccr4(self) -> Field:\n        \"\
    \"\"\n        CCR4\n\n        Capture/Compare value\n        \"\"\"\n        return\
    \ self._ccr4\n\n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n  \
    \      self._ccr4.value = value\n\n\nclass DcrRegister(Register):\n    \"\"\"\n\
    \    DCR\n\n    DMA control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dbl = Field(\"dbl\", 8, 5)\n        self._dba = Field(\"dba\",\
    \ 0, 5)\n        super().__init__(\"DCR\", 0x40010400 + 0x48)\n\n    @property\n\
    \    def dbl(self) -> Field:\n        \"\"\"\n        DBL\n\n        DMA burst\
    \ length\n        \"\"\"\n        return self._dbl\n\n    @dbl.setter\n    def\
    \ dbl(self, value: int) -> None:\n        self._dbl.value = value\n\n    @property\n\
    \    def dba(self) -> Field:\n        \"\"\"\n        DBA\n\n        DMA base\
    \ address\n        \"\"\"\n        return self._dba\n\n    @dba.setter\n    def\
    \ dba(self, value: int) -> None:\n        self._dba.value = value\n\n\nclass DmarRegister(Register):\n\
    \    \"\"\"\n    DMAR\n\n    DMA address for full transfer\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._dmab = Field(\"dmab\", 0, 16)\n        super().__init__(\"\
    DMAR\", 0x40010400 + 0x4C)\n\n    @property\n    def dmab(self) -> Field:\n  \
    \      \"\"\"\n        DMAB\n\n        DMA register for burst\n              \
    \    accesses\n        \"\"\"\n        return self._dmab\n\n    @dmab.setter\n\
    \    def dmab(self, value: int) -> None:\n        self._dmab.value = value\n\n\
    \nclass RcrRegister(Register):\n    \"\"\"\n    RCR\n\n    repetition counter\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._rep = Field(\"\
    rep\", 0, 8)\n        super().__init__(\"RCR\", 0x40010400 + 0x30)\n\n    @property\n\
    \    def rep(self) -> Field:\n        \"\"\"\n        REP\n\n        Repetition\
    \ counter value\n        \"\"\"\n        return self._rep\n\n    @rep.setter\n\
    \    def rep(self, value: int) -> None:\n        self._rep.value = value\n\n\n\
    class BdtrRegister(Register):\n    \"\"\"\n    BDTR\n\n    break and dead-time\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._moe = Field(\"\
    moe\", 15, 1)\n        self._aoe = Field(\"aoe\", 14, 1)\n        self._bkp =\
    \ Field(\"bkp\", 13, 1)\n        self._bke = Field(\"bke\", 12, 1)\n        self._ossr\
    \ = Field(\"ossr\", 11, 1)\n        self._ossi = Field(\"ossi\", 10, 1)\n    \
    \    self._lock = Field(\"lock\", 8, 2)\n        self._dtg = Field(\"dtg\", 0,\
    \ 8)\n        super().__init__(\"BDTR\", 0x40010400 + 0x44)\n\n    @property\n\
    \    def moe(self) -> Field:\n        \"\"\"\n        MOE\n\n        Main output\
    \ enable\n        \"\"\"\n        return self._moe\n\n    @moe.setter\n    def\
    \ moe(self, value: int) -> None:\n        self._moe.value = value\n\n    @property\n\
    \    def aoe(self) -> Field:\n        \"\"\"\n        AOE\n\n        Automatic\
    \ output enable\n        \"\"\"\n        return self._aoe\n\n    @aoe.setter\n\
    \    def aoe(self, value: int) -> None:\n        self._aoe.value = value\n\n \
    \   @property\n    def bkp(self) -> Field:\n        \"\"\"\n        BKP\n\n  \
    \      Break polarity\n        \"\"\"\n        return self._bkp\n\n    @bkp.setter\n\
    \    def bkp(self, value: int) -> None:\n        self._bkp.value = value\n\n \
    \   @property\n    def bke(self) -> Field:\n        \"\"\"\n        BKE\n\n  \
    \      Break enable\n        \"\"\"\n        return self._bke\n\n    @bke.setter\n\
    \    def bke(self, value: int) -> None:\n        self._bke.value = value\n\n \
    \   @property\n    def ossr(self) -> Field:\n        \"\"\"\n        OSSR\n\n\
    \        Off-state selection for Run\n                  mode\n        \"\"\"\n\
    \        return self._ossr\n\n    @ossr.setter\n    def ossr(self, value: int)\
    \ -> None:\n        self._ossr.value = value\n\n    @property\n    def ossi(self)\
    \ -> Field:\n        \"\"\"\n        OSSI\n\n        Off-state selection for Idle\n\
    \                  mode\n        \"\"\"\n        return self._ossi\n\n    @ossi.setter\n\
    \    def ossi(self, value: int) -> None:\n        self._ossi.value = value\n\n\
    \    @property\n    def lock(self) -> Field:\n        \"\"\"\n        LOCK\n\n\
    \        Lock configuration\n        \"\"\"\n        return self._lock\n\n   \
    \ @lock.setter\n    def lock(self, value: int) -> None:\n        self._lock.value\
    \ = value\n\n    @property\n    def dtg(self) -> Field:\n        \"\"\"\n    \
    \    DTG\n\n        Dead-time generator setup\n        \"\"\"\n        return\
    \ self._dtg\n\n    @dtg.setter\n    def dtg(self, value: int) -> None:\n     \
    \   self._dtg.value = value\n\n\nclass Tim8(Peripheral):\n    \"\"\"\n    TIM8\n\
    \n    Advanced-timers\n    \"\"\"\n\n    def __init__(self):\n        self._cr1\
    \ = Cr1Register()\n        self._cr2 = Cr2Register()\n        self._smcr = SmcrRegister()\n\
    \        self._dier = DierRegister()\n        self._sr = SrRegister()\n      \
    \  self._egr = EgrRegister()\n        self._ccmr1_output = Ccmr1_outputRegister()\n\
    \        self._ccmr1_input = Ccmr1_inputRegister()\n        self._ccmr2_output\
    \ = Ccmr2_outputRegister()\n        self._ccmr2_input = Ccmr2_inputRegister()\n\
    \        self._ccer = CcerRegister()\n        self._cnt = CntRegister()\n    \
    \    self._psc = PscRegister()\n        self._arr = ArrRegister()\n        self._ccr1\
    \ = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n        self._ccr3 =\
    \ Ccr3Register()\n        self._ccr4 = Ccr4Register()\n        self._dcr = DcrRegister()\n\
    \        self._dmar = DmarRegister()\n        self._rcr = RcrRegister()\n    \
    \    self._bdtr = BdtrRegister()\n        super().__init__(\"tim8\", 0x40010400)\n\
    \n    @property\n    def cr1(self) -> Cr1Register:\n        return self._cr1\n\
    \n    @cr1.setter\n    def cr1(self, value: int) -> None:\n        self._cr1.value\
    \ = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n        return\
    \ self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) -> None:\n     \
    \   self._cr2.value = value\n\n    @property\n    def smcr(self) -> SmcrRegister:\n\
    \        return self._smcr\n\n    @smcr.setter\n    def smcr(self, value: int)\
    \ -> None:\n        self._smcr.value = value\n\n    @property\n    def dier(self)\
    \ -> DierRegister:\n        return self._dier\n\n    @dier.setter\n    def dier(self,\
    \ value: int) -> None:\n        self._dier.value = value\n\n    @property\n  \
    \  def sr(self) -> SrRegister:\n        return self._sr\n\n    @sr.setter\n  \
    \  def sr(self, value: int) -> None:\n        self._sr.value = value\n\n    @property\n\
    \    def egr(self) -> EgrRegister:\n        return self._egr\n\n    @egr.setter\n\
    \    def egr(self, value: int) -> None:\n        self._egr.value = value\n\n \
    \   @property\n    def ccmr1_output(self) -> Ccmr1_outputRegister:\n        return\
    \ self._ccmr1_output\n\n    @ccmr1_output.setter\n    def ccmr1_output(self, value:\
    \ int) -> None:\n        self._ccmr1_output.value = value\n\n    @property\n \
    \   def ccmr1_input(self) -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\
    \n    @ccmr1_input.setter\n    def ccmr1_input(self, value: int) -> None:\n  \
    \      self._ccmr1_input.value = value\n\n    @property\n    def ccmr2_output(self)\
    \ -> Ccmr2_outputRegister:\n        return self._ccmr2_output\n\n    @ccmr2_output.setter\n\
    \    def ccmr2_output(self, value: int) -> None:\n        self._ccmr2_output.value\
    \ = value\n\n    @property\n    def ccmr2_input(self) -> Ccmr2_inputRegister:\n\
    \        return self._ccmr2_input\n\n    @ccmr2_input.setter\n    def ccmr2_input(self,\
    \ value: int) -> None:\n        self._ccmr2_input.value = value\n\n    @property\n\
    \    def ccer(self) -> CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n\
    \    def ccer(self, value: int) -> None:\n        self._ccer.value = value\n\n\
    \    @property\n    def cnt(self) -> CntRegister:\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n    @property\n    def psc(self) -> PscRegister:\n        return\
    \ self._psc\n\n    @psc.setter\n    def psc(self, value: int) -> None:\n     \
    \   self._psc.value = value\n\n    @property\n    def arr(self) -> ArrRegister:\n\
    \        return self._arr\n\n    @arr.setter\n    def arr(self, value: int) ->\
    \ None:\n        self._arr.value = value\n\n    @property\n    def ccr1(self)\
    \ -> Ccr1Register:\n        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self,\
    \ value: int) -> None:\n        self._ccr1.value = value\n\n    @property\n  \
    \  def ccr2(self) -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n\
    \    def ccr2(self, value: int) -> None:\n        self._ccr2.value = value\n\n\
    \    @property\n    def ccr3(self) -> Ccr3Register:\n        return self._ccr3\n\
    \n    @ccr3.setter\n    def ccr3(self, value: int) -> None:\n        self._ccr3.value\
    \ = value\n\n    @property\n    def ccr4(self) -> Ccr4Register:\n        return\
    \ self._ccr4\n\n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n  \
    \      self._ccr4.value = value\n\n    @property\n    def dcr(self) -> DcrRegister:\n\
    \        return self._dcr\n\n    @dcr.setter\n    def dcr(self, value: int) ->\
    \ None:\n        self._dcr.value = value\n\n    @property\n    def dmar(self)\
    \ -> DmarRegister:\n        return self._dmar\n\n    @dmar.setter\n    def dmar(self,\
    \ value: int) -> None:\n        self._dmar.value = value\n\n    @property\n  \
    \  def rcr(self) -> RcrRegister:\n        return self._rcr\n\n    @rcr.setter\n\
    \    def rcr(self, value: int) -> None:\n        self._rcr.value = value\n\n \
    \   @property\n    def bdtr(self) -> BdtrRegister:\n        return self._bdtr\n\
    \n    @bdtr.setter\n    def bdtr(self, value: int) -> None:\n        self._bdtr.value\
    \ = value\n"
  name: TIM8
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._urs =\
    \ Field(\"urs\", 2, 1)\n        self._udis = Field(\"udis\", 1, 1)\n        self._cen\
    \ = Field(\"cen\", 0, 1)\n        super().__init__(\"CR1\", 0x40014400 + 0x0)\n\
    \n    @property\n    def ckd(self) -> Field:\n        \"\"\"\n        CKD\n\n\
    \        Clock division\n        \"\"\"\n        return self._ckd\n\n    @ckd.setter\n\
    \    def ckd(self, value: int) -> None:\n        self._ckd.value = value\n\n \
    \   @property\n    def arpe(self) -> Field:\n        \"\"\"\n        ARPE\n\n\
    \        Auto-reload preload enable\n        \"\"\"\n        return self._arpe\n\
    \n    @arpe.setter\n    def arpe(self, value: int) -> None:\n        self._arpe.value\
    \ = value\n\n    @property\n    def urs(self) -> Field:\n        \"\"\"\n    \
    \    URS\n\n        Update request source\n        \"\"\"\n        return self._urs\n\
    \n    @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass DierRegister(Register):\n    \"\"\"\n    DIER\n\n    DMA/Interrupt\
    \ enable register\n    \"\"\"\n\n    def __init__(self):\n        self._cc1ie\
    \ = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"uie\", 0, 1)\n       \
    \ super().__init__(\"DIER\", 0x40014400 + 0xC)\n\n    @property\n    def cc1ie(self)\
    \ -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare 1 interrupt\n\
    \                  enable\n        \"\"\"\n        return self._cc1ie\n\n    @cc1ie.setter\n\
    \    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value = value\n\
    \n    @property\n    def uie(self) -> Field:\n        \"\"\"\n        UIE\n\n\
    \        Update interrupt enable\n        \"\"\"\n        return self._uie\n\n\
    \    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc1of = Field(\"cc1of\"\
    , 9, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n        self._uif = Field(\"\
    uif\", 0, 1)\n        super().__init__(\"SR\", 0x40014400 + 0x10)\n\n    @property\n\
    \    def cc1of(self) -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare\
    \ 1 overcapture\n                  flag\n        \"\"\"\n        return self._cc1of\n\
    \n    @cc1of.setter\n    def cc1of(self, value: int) -> None:\n        self._cc1of.value\
    \ = value\n\n    @property\n    def cc1if(self) -> Field:\n        \"\"\"\n  \
    \      CC1IF\n\n        Capture/compare 1 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc1if\n\n    @cc1if.setter\n    def cc1if(self,\
    \ value: int) -> None:\n        self._cc1if.value = value\n\n    @property\n \
    \   def uif(self) -> Field:\n        \"\"\"\n        UIF\n\n        Update interrupt\
    \ flag\n        \"\"\"\n        return self._uif\n\n    @uif.setter\n    def uif(self,\
    \ value: int) -> None:\n        self._uif.value = value\n\n\nclass EgrRegister(Register):\n\
    \    \"\"\"\n    EGR\n\n    event generation register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\",\
    \ 0, 1)\n        super().__init__(\"EGR\", 0x40014400 + 0x14)\n\n    @property\n\
    \    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n        Capture/compare\
    \ 1\n                  generation\n        \"\"\"\n        return self._cc1g\n\
    \n    @cc1g.setter\n    def cc1g(self, value: int) -> None:\n        self._cc1g.value\
    \ = value\n\n    @property\n    def ug(self) -> Field:\n        \"\"\"\n     \
    \   UG\n\n        Update generation\n        \"\"\"\n        return self._ug\n\
    \n    @ug.setter\n    def ug(self, value: int) -> None:\n        self._ug.value\
    \ = value\n\n\nclass Ccmr1_outputRegister(Register):\n    \"\"\"\n    CCMR1_OUTPUT\n\
    \n    capture/compare mode register 1 (output\n              mode)\n    \"\"\"\
    \n\n    def __init__(self):\n        self._oc1m = Field(\"oc1m\", 4, 3)\n    \
    \    self._oc1pe = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\"\
    , 2, 1)\n        self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"\
    CCMR1_Output\", 0x40014400 + 0x18)\n\n    @property\n    def oc1m(self) -> Field:\n\
    \        \"\"\"\n        OC1M\n\n        Output Compare 1 mode\n        \"\"\"\
    \n        return self._oc1m\n\n    @oc1m.setter\n    def oc1m(self, value: int)\
    \ -> None:\n        self._oc1m.value = value\n\n    @property\n    def oc1pe(self)\
    \ -> Field:\n        \"\"\"\n        OC1PE\n\n        Output Compare 1 preload\n\
    \                  enable\n        \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n\
    \    def oc1pe(self, value: int) -> None:\n        self._oc1pe.value = value\n\
    \n    @property\n    def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\
    \n        Output Compare 1 fast\n                  enable\n        \"\"\"\n  \
    \      return self._oc1fe\n\n    @oc1fe.setter\n    def oc1fe(self, value: int)\
    \ -> None:\n        self._oc1fe.value = value\n\n    @property\n    def cc1s(self)\
    \ -> Field:\n        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n     \
    \             selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n\
    \    def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\
    \nclass Ccmr1_inputRegister(Register):\n    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare\
    \ mode register 1 (input\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ic1f = Field(\"ic1f\", 4, 4)\n        self._icpcs = Field(\"icpcs\"\
    , 2, 2)\n        self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"\
    CCMR1_Input\", 0x40014400 + 0x18)\n\n    @property\n    def ic1f(self) -> Field:\n\
    \        \"\"\"\n        IC1F\n\n        Input capture 1 filter\n        \"\"\"\
    \n        return self._ic1f\n\n    @ic1f.setter\n    def ic1f(self, value: int)\
    \ -> None:\n        self._ic1f.value = value\n\n    @property\n    def icpcs(self)\
    \ -> Field:\n        \"\"\"\n        ICPCS\n\n        Input capture 1 prescaler\n\
    \        \"\"\"\n        return self._icpcs\n\n    @icpcs.setter\n    def icpcs(self,\
    \ value: int) -> None:\n        self._icpcs.value = value\n\n    @property\n \
    \   def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n        Capture/Compare\
    \ 1\n                  selection\n        \"\"\"\n        return self._cc1s\n\n\
    \    @cc1s.setter\n    def cc1s(self, value: int) -> None:\n        self._cc1s.value\
    \ = value\n\n\nclass CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare\
    \ enable\n              register\n    \"\"\"\n\n    def __init__(self):\n    \
    \    self._cc1np = Field(\"cc1np\", 3, 1)\n        self._cc1p = Field(\"cc1p\"\
    , 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40014400 + 0x20)\n\n    @property\n    def cc1np(self) -> Field:\n \
    \       \"\"\"\n        CC1NP\n\n        Capture/Compare 1 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n\
    \    def cc1np(self, value: int) -> None:\n        self._cc1np.value = value\n\
    \n    @property\n    def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n\
    \        Capture/Compare 1 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc1p\n\n    @cc1p.setter\n    def cc1p(self, value: int)\
    \ -> None:\n        self._cc1p.value = value\n\n    @property\n    def cc1e(self)\
    \ -> Field:\n        \"\"\"\n        CC1E\n\n        Capture/Compare 1 output\n\
    \                  enable\n        \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n\
    \    def cc1e(self, value: int) -> None:\n        self._cc1e.value = value\n\n\
    \nclass CntRegister(Register):\n    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\
    \n\n    def __init__(self):\n        self._cnt = Field(\"cnt\", 0, 16)\n     \
    \   super().__init__(\"CNT\", 0x40014400 + 0x24)\n\n    @property\n    def cnt(self)\
    \ -> Field:\n        \"\"\"\n        CNT\n\n        counter value\n        \"\"\
    \"\n        return self._cnt\n\n    @cnt.setter\n    def cnt(self, value: int)\
    \ -> None:\n        self._cnt.value = value\n\n\nclass PscRegister(Register):\n\
    \    \"\"\"\n    PSC\n\n    prescaler\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._psc = Field(\"psc\", 0, 16)\n        super().__init__(\"PSC\",\
    \ 0x40014400 + 0x28)\n\n    @property\n    def psc(self) -> Field:\n        \"\
    \"\"\n        PSC\n\n        Prescaler value\n        \"\"\"\n        return self._psc\n\
    \n    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n\nclass ArrRegister(Register):\n    \"\"\"\n    ARR\n\n    auto-reload\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._arr = Field(\"\
    arr\", 0, 16)\n        super().__init__(\"ARR\", 0x40014400 + 0x2C)\n\n    @property\n\
    \    def arr(self) -> Field:\n        \"\"\"\n        ARR\n\n        Auto-reload\
    \ value\n        \"\"\"\n        return self._arr\n\n    @arr.setter\n    def\
    \ arr(self, value: int) -> None:\n        self._arr.value = value\n\n\nclass Ccr1Register(Register):\n\
    \    \"\"\"\n    CCR1\n\n    capture/compare register 1\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ccr1 = Field(\"ccr1\", 0, 16)\n        super().__init__(\"\
    CCR1\", 0x40014400 + 0x34)\n\n    @property\n    def ccr1(self) -> Field:\n  \
    \      \"\"\"\n        CCR1\n\n        Capture/Compare 1 value\n        \"\"\"\
    \n        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int)\
    \ -> None:\n        self._ccr1.value = value\n\n\nclass Tim10(Peripheral):\n \
    \   \"\"\"\n    TIM10\n\n    General-purpose-timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._dier = DierRegister()\n    \
    \    self._sr = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccer = CcerRegister()\n        self._cnt = CntRegister()\n    \
    \    self._psc = PscRegister()\n        self._arr = ArrRegister()\n        self._ccr1\
    \ = Ccr1Register()\n        super().__init__(\"tim10\", 0x40014400)\n\n    @property\n\
    \    def cr1(self) -> Cr1Register:\n        return self._cr1\n\n    @cr1.setter\n\
    \    def cr1(self, value: int) -> None:\n        self._cr1.value = value\n\n \
    \   @property\n    def dier(self) -> DierRegister:\n        return self._dier\n\
    \n    @dier.setter\n    def dier(self, value: int) -> None:\n        self._dier.value\
    \ = value\n\n    @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\
    \n    @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value\
    \ = value\n\n    @property\n    def egr(self) -> EgrRegister:\n        return\
    \ self._egr\n\n    @egr.setter\n    def egr(self, value: int) -> None:\n     \
    \   self._egr.value = value\n\n    @property\n    def ccmr1_output(self) -> Ccmr1_outputRegister:\n\
    \        return self._ccmr1_output\n\n    @ccmr1_output.setter\n    def ccmr1_output(self,\
    \ value: int) -> None:\n        self._ccmr1_output.value = value\n\n    @property\n\
    \    def ccmr1_input(self) -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\
    \n    @ccmr1_input.setter\n    def ccmr1_input(self, value: int) -> None:\n  \
    \      self._ccmr1_input.value = value\n\n    @property\n    def ccer(self) ->\
    \ CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n    def ccer(self,\
    \ value: int) -> None:\n        self._ccer.value = value\n\n    @property\n  \
    \  def cnt(self) -> CntRegister:\n        return self._cnt\n\n    @cnt.setter\n\
    \    def cnt(self, value: int) -> None:\n        self._cnt.value = value\n\n \
    \   @property\n    def psc(self) -> PscRegister:\n        return self._psc\n\n\
    \    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n    @property\n    def arr(self) -> ArrRegister:\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n    @property\n    def ccr1(self) -> Ccr1Register:\n\
    \        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int)\
    \ -> None:\n        self._ccr1.value = value\n"
  name: TIM10
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._urs =\
    \ Field(\"urs\", 2, 1)\n        self._udis = Field(\"udis\", 1, 1)\n        self._cen\
    \ = Field(\"cen\", 0, 1)\n        super().__init__(\"CR1\", 0x40014800 + 0x0)\n\
    \n    @property\n    def ckd(self) -> Field:\n        \"\"\"\n        CKD\n\n\
    \        Clock division\n        \"\"\"\n        return self._ckd\n\n    @ckd.setter\n\
    \    def ckd(self, value: int) -> None:\n        self._ckd.value = value\n\n \
    \   @property\n    def arpe(self) -> Field:\n        \"\"\"\n        ARPE\n\n\
    \        Auto-reload preload enable\n        \"\"\"\n        return self._arpe\n\
    \n    @arpe.setter\n    def arpe(self, value: int) -> None:\n        self._arpe.value\
    \ = value\n\n    @property\n    def urs(self) -> Field:\n        \"\"\"\n    \
    \    URS\n\n        Update request source\n        \"\"\"\n        return self._urs\n\
    \n    @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass DierRegister(Register):\n    \"\"\"\n    DIER\n\n    DMA/Interrupt\
    \ enable register\n    \"\"\"\n\n    def __init__(self):\n        self._cc1ie\
    \ = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"uie\", 0, 1)\n       \
    \ super().__init__(\"DIER\", 0x40014800 + 0xC)\n\n    @property\n    def cc1ie(self)\
    \ -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare 1 interrupt\n\
    \                  enable\n        \"\"\"\n        return self._cc1ie\n\n    @cc1ie.setter\n\
    \    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value = value\n\
    \n    @property\n    def uie(self) -> Field:\n        \"\"\"\n        UIE\n\n\
    \        Update interrupt enable\n        \"\"\"\n        return self._uie\n\n\
    \    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc1of = Field(\"cc1of\"\
    , 9, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n        self._uif = Field(\"\
    uif\", 0, 1)\n        super().__init__(\"SR\", 0x40014800 + 0x10)\n\n    @property\n\
    \    def cc1of(self) -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare\
    \ 1 overcapture\n                  flag\n        \"\"\"\n        return self._cc1of\n\
    \n    @cc1of.setter\n    def cc1of(self, value: int) -> None:\n        self._cc1of.value\
    \ = value\n\n    @property\n    def cc1if(self) -> Field:\n        \"\"\"\n  \
    \      CC1IF\n\n        Capture/compare 1 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc1if\n\n    @cc1if.setter\n    def cc1if(self,\
    \ value: int) -> None:\n        self._cc1if.value = value\n\n    @property\n \
    \   def uif(self) -> Field:\n        \"\"\"\n        UIF\n\n        Update interrupt\
    \ flag\n        \"\"\"\n        return self._uif\n\n    @uif.setter\n    def uif(self,\
    \ value: int) -> None:\n        self._uif.value = value\n\n\nclass EgrRegister(Register):\n\
    \    \"\"\"\n    EGR\n\n    event generation register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\",\
    \ 0, 1)\n        super().__init__(\"EGR\", 0x40014800 + 0x14)\n\n    @property\n\
    \    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n        Capture/compare\
    \ 1\n                  generation\n        \"\"\"\n        return self._cc1g\n\
    \n    @cc1g.setter\n    def cc1g(self, value: int) -> None:\n        self._cc1g.value\
    \ = value\n\n    @property\n    def ug(self) -> Field:\n        \"\"\"\n     \
    \   UG\n\n        Update generation\n        \"\"\"\n        return self._ug\n\
    \n    @ug.setter\n    def ug(self, value: int) -> None:\n        self._ug.value\
    \ = value\n\n\nclass Ccmr1_outputRegister(Register):\n    \"\"\"\n    CCMR1_OUTPUT\n\
    \n    capture/compare mode register 1 (output\n              mode)\n    \"\"\"\
    \n\n    def __init__(self):\n        self._oc1m = Field(\"oc1m\", 4, 3)\n    \
    \    self._oc1pe = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\"\
    , 2, 1)\n        self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"\
    CCMR1_Output\", 0x40014800 + 0x18)\n\n    @property\n    def oc1m(self) -> Field:\n\
    \        \"\"\"\n        OC1M\n\n        Output Compare 1 mode\n        \"\"\"\
    \n        return self._oc1m\n\n    @oc1m.setter\n    def oc1m(self, value: int)\
    \ -> None:\n        self._oc1m.value = value\n\n    @property\n    def oc1pe(self)\
    \ -> Field:\n        \"\"\"\n        OC1PE\n\n        Output Compare 1 preload\n\
    \                  enable\n        \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n\
    \    def oc1pe(self, value: int) -> None:\n        self._oc1pe.value = value\n\
    \n    @property\n    def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\
    \n        Output Compare 1 fast\n                  enable\n        \"\"\"\n  \
    \      return self._oc1fe\n\n    @oc1fe.setter\n    def oc1fe(self, value: int)\
    \ -> None:\n        self._oc1fe.value = value\n\n    @property\n    def cc1s(self)\
    \ -> Field:\n        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n     \
    \             selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n\
    \    def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\
    \nclass Ccmr1_inputRegister(Register):\n    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare\
    \ mode register 1 (input\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ic1f = Field(\"ic1f\", 4, 4)\n        self._icpcs = Field(\"icpcs\"\
    , 2, 2)\n        self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"\
    CCMR1_Input\", 0x40014800 + 0x18)\n\n    @property\n    def ic1f(self) -> Field:\n\
    \        \"\"\"\n        IC1F\n\n        Input capture 1 filter\n        \"\"\"\
    \n        return self._ic1f\n\n    @ic1f.setter\n    def ic1f(self, value: int)\
    \ -> None:\n        self._ic1f.value = value\n\n    @property\n    def icpcs(self)\
    \ -> Field:\n        \"\"\"\n        ICPCS\n\n        Input capture 1 prescaler\n\
    \        \"\"\"\n        return self._icpcs\n\n    @icpcs.setter\n    def icpcs(self,\
    \ value: int) -> None:\n        self._icpcs.value = value\n\n    @property\n \
    \   def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n        Capture/Compare\
    \ 1\n                  selection\n        \"\"\"\n        return self._cc1s\n\n\
    \    @cc1s.setter\n    def cc1s(self, value: int) -> None:\n        self._cc1s.value\
    \ = value\n\n\nclass CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare\
    \ enable\n              register\n    \"\"\"\n\n    def __init__(self):\n    \
    \    self._cc1np = Field(\"cc1np\", 3, 1)\n        self._cc1p = Field(\"cc1p\"\
    , 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40014800 + 0x20)\n\n    @property\n    def cc1np(self) -> Field:\n \
    \       \"\"\"\n        CC1NP\n\n        Capture/Compare 1 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n\
    \    def cc1np(self, value: int) -> None:\n        self._cc1np.value = value\n\
    \n    @property\n    def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n\
    \        Capture/Compare 1 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc1p\n\n    @cc1p.setter\n    def cc1p(self, value: int)\
    \ -> None:\n        self._cc1p.value = value\n\n    @property\n    def cc1e(self)\
    \ -> Field:\n        \"\"\"\n        CC1E\n\n        Capture/Compare 1 output\n\
    \                  enable\n        \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n\
    \    def cc1e(self, value: int) -> None:\n        self._cc1e.value = value\n\n\
    \nclass CntRegister(Register):\n    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\
    \n\n    def __init__(self):\n        self._cnt = Field(\"cnt\", 0, 16)\n     \
    \   super().__init__(\"CNT\", 0x40014800 + 0x24)\n\n    @property\n    def cnt(self)\
    \ -> Field:\n        \"\"\"\n        CNT\n\n        counter value\n        \"\"\
    \"\n        return self._cnt\n\n    @cnt.setter\n    def cnt(self, value: int)\
    \ -> None:\n        self._cnt.value = value\n\n\nclass PscRegister(Register):\n\
    \    \"\"\"\n    PSC\n\n    prescaler\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._psc = Field(\"psc\", 0, 16)\n        super().__init__(\"PSC\",\
    \ 0x40014800 + 0x28)\n\n    @property\n    def psc(self) -> Field:\n        \"\
    \"\"\n        PSC\n\n        Prescaler value\n        \"\"\"\n        return self._psc\n\
    \n    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n\nclass ArrRegister(Register):\n    \"\"\"\n    ARR\n\n    auto-reload\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._arr = Field(\"\
    arr\", 0, 16)\n        super().__init__(\"ARR\", 0x40014800 + 0x2C)\n\n    @property\n\
    \    def arr(self) -> Field:\n        \"\"\"\n        ARR\n\n        Auto-reload\
    \ value\n        \"\"\"\n        return self._arr\n\n    @arr.setter\n    def\
    \ arr(self, value: int) -> None:\n        self._arr.value = value\n\n\nclass Ccr1Register(Register):\n\
    \    \"\"\"\n    CCR1\n\n    capture/compare register 1\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ccr1 = Field(\"ccr1\", 0, 16)\n        super().__init__(\"\
    CCR1\", 0x40014800 + 0x34)\n\n    @property\n    def ccr1(self) -> Field:\n  \
    \      \"\"\"\n        CCR1\n\n        Capture/Compare 1 value\n        \"\"\"\
    \n        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int)\
    \ -> None:\n        self._ccr1.value = value\n\n\nclass OrRegister(Register):\n\
    \    \"\"\"\n    OR\n\n    option register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._rmp = Field(\"rmp\", 0, 2)\n        super().__init__(\"OR\", 0x40014800\
    \ + 0x50)\n\n    @property\n    def rmp(self) -> Field:\n        \"\"\"\n    \
    \    RMP\n\n        Input 1 remapping\n                  capability\n        \"\
    \"\"\n        return self._rmp\n\n    @rmp.setter\n    def rmp(self, value: int)\
    \ -> None:\n        self._rmp.value = value\n\n\nclass Tim11(Peripheral):\n  \
    \  \"\"\"\n    TIM11\n\n    General-purpose-timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._dier = DierRegister()\n    \
    \    self._sr = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccer = CcerRegister()\n        self._cnt = CntRegister()\n    \
    \    self._psc = PscRegister()\n        self._arr = ArrRegister()\n        self._ccr1\
    \ = Ccr1Register()\n        self._or = OrRegister()\n        super().__init__(\"\
    tim11\", 0x40014800)\n\n    @property\n    def cr1(self) -> Cr1Register:\n   \
    \     return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def dier(self) -> DierRegister:\n\
    \        return self._dier\n\n    @dier.setter\n    def dier(self, value: int)\
    \ -> None:\n        self._dier.value = value\n\n    @property\n    def sr(self)\
    \ -> SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self,\
    \ value: int) -> None:\n        self._sr.value = value\n\n    @property\n    def\
    \ egr(self) -> EgrRegister:\n        return self._egr\n\n    @egr.setter\n   \
    \ def egr(self, value: int) -> None:\n        self._egr.value = value\n\n    @property\n\
    \    def ccmr1_output(self) -> Ccmr1_outputRegister:\n        return self._ccmr1_output\n\
    \n    @ccmr1_output.setter\n    def ccmr1_output(self, value: int) -> None:\n\
    \        self._ccmr1_output.value = value\n\n    @property\n    def ccmr1_input(self)\
    \ -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\n    @ccmr1_input.setter\n\
    \    def ccmr1_input(self, value: int) -> None:\n        self._ccmr1_input.value\
    \ = value\n\n    @property\n    def ccer(self) -> CcerRegister:\n        return\
    \ self._ccer\n\n    @ccer.setter\n    def ccer(self, value: int) -> None:\n  \
    \      self._ccer.value = value\n\n    @property\n    def cnt(self) -> CntRegister:\n\
    \        return self._cnt\n\n    @cnt.setter\n    def cnt(self, value: int) ->\
    \ None:\n        self._cnt.value = value\n\n    @property\n    def psc(self) ->\
    \ PscRegister:\n        return self._psc\n\n    @psc.setter\n    def psc(self,\
    \ value: int) -> None:\n        self._psc.value = value\n\n    @property\n   \
    \ def arr(self) -> ArrRegister:\n        return self._arr\n\n    @arr.setter\n\
    \    def arr(self, value: int) -> None:\n        self._arr.value = value\n\n \
    \   @property\n    def ccr1(self) -> Ccr1Register:\n        return self._ccr1\n\
    \n    @ccr1.setter\n    def ccr1(self, value: int) -> None:\n        self._ccr1.value\
    \ = value\n\n    @property\n    def or(self) -> OrRegister:\n        return self._or\n\
    \n    @or.setter\n    def or(self, value: int) -> None:\n        self._or.value\
    \ = value\n"
  name: TIM11
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._cms =\
    \ Field(\"cms\", 5, 2)\n        self._dir = Field(\"dir\", 4, 1)\n        self._opm\
    \ = Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40000000 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def cms(self)\
    \ -> Field:\n        \"\"\"\n        CMS\n\n        Center-aligned mode\n    \
    \              selection\n        \"\"\"\n        return self._cms\n\n    @cms.setter\n\
    \    def cms(self, value: int) -> None:\n        self._cms.value = value\n\n \
    \   @property\n    def dir(self) -> Field:\n        \"\"\"\n        DIR\n\n  \
    \      Direction\n        \"\"\"\n        return self._dir\n\n    @dir.setter\n\
    \    def dir(self, value: int) -> None:\n        self._dir.value = value\n\n \
    \   @property\n    def opm(self) -> Field:\n        \"\"\"\n        OPM\n\n  \
    \      One-pulse mode\n        \"\"\"\n        return self._opm\n\n    @opm.setter\n\
    \    def opm(self, value: int) -> None:\n        self._opm.value = value\n\n \
    \   @property\n    def urs(self) -> Field:\n        \"\"\"\n        URS\n\n  \
    \      Update request source\n        \"\"\"\n        return self._urs\n\n   \
    \ @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._ti1s = Field(\"\
    ti1s\", 7, 1)\n        self._mms = Field(\"mms\", 4, 3)\n        self._ccds =\
    \ Field(\"ccds\", 3, 1)\n        super().__init__(\"CR2\", 0x40000000 + 0x4)\n\
    \n    @property\n    def ti1s(self) -> Field:\n        \"\"\"\n        TI1S\n\n\
    \        TI1 selection\n        \"\"\"\n        return self._ti1s\n\n    @ti1s.setter\n\
    \    def ti1s(self, value: int) -> None:\n        self._ti1s.value = value\n\n\
    \    @property\n    def mms(self) -> Field:\n        \"\"\"\n        MMS\n\n \
    \       Master mode selection\n        \"\"\"\n        return self._mms\n\n  \
    \  @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n    @property\n    def ccds(self) -> Field:\n        \"\"\"\n   \
    \     CCDS\n\n        Capture/compare DMA\n                  selection\n     \
    \   \"\"\"\n        return self._ccds\n\n    @ccds.setter\n    def ccds(self,\
    \ value: int) -> None:\n        self._ccds.value = value\n\n\nclass SmcrRegister(Register):\n\
    \    \"\"\"\n    SMCR\n\n    slave mode control register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._etp = Field(\"etp\", 15, 1)\n        self._ece\
    \ = Field(\"ece\", 14, 1)\n        self._etps = Field(\"etps\", 12, 2)\n     \
    \   self._etf = Field(\"etf\", 8, 4)\n        self._msm = Field(\"msm\", 7, 1)\n\
    \        self._ts = Field(\"ts\", 4, 3)\n        self._sms = Field(\"sms\", 0,\
    \ 3)\n        super().__init__(\"SMCR\", 0x40000000 + 0x8)\n\n    @property\n\
    \    def etp(self) -> Field:\n        \"\"\"\n        ETP\n\n        External\
    \ trigger polarity\n        \"\"\"\n        return self._etp\n\n    @etp.setter\n\
    \    def etp(self, value: int) -> None:\n        self._etp.value = value\n\n \
    \   @property\n    def ece(self) -> Field:\n        \"\"\"\n        ECE\n\n  \
    \      External clock enable\n        \"\"\"\n        return self._ece\n\n   \
    \ @ece.setter\n    def ece(self, value: int) -> None:\n        self._ece.value\
    \ = value\n\n    @property\n    def etps(self) -> Field:\n        \"\"\"\n   \
    \     ETPS\n\n        External trigger prescaler\n        \"\"\"\n        return\
    \ self._etps\n\n    @etps.setter\n    def etps(self, value: int) -> None:\n  \
    \      self._etps.value = value\n\n    @property\n    def etf(self) -> Field:\n\
    \        \"\"\"\n        ETF\n\n        External trigger filter\n        \"\"\"\
    \n        return self._etf\n\n    @etf.setter\n    def etf(self, value: int) ->\
    \ None:\n        self._etf.value = value\n\n    @property\n    def msm(self) ->\
    \ Field:\n        \"\"\"\n        MSM\n\n        Master/Slave mode\n        \"\
    \"\"\n        return self._msm\n\n    @msm.setter\n    def msm(self, value: int)\
    \ -> None:\n        self._msm.value = value\n\n    @property\n    def ts(self)\
    \ -> Field:\n        \"\"\"\n        TS\n\n        Trigger selection\n       \
    \ \"\"\"\n        return self._ts\n\n    @ts.setter\n    def ts(self, value: int)\
    \ -> None:\n        self._ts.value = value\n\n    @property\n    def sms(self)\
    \ -> Field:\n        \"\"\"\n        SMS\n\n        Slave mode selection\n   \
    \     \"\"\"\n        return self._sms\n\n    @sms.setter\n    def sms(self, value:\
    \ int) -> None:\n        self._sms.value = value\n\n\nclass DierRegister(Register):\n\
    \    \"\"\"\n    DIER\n\n    DMA/Interrupt enable register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._tde = Field(\"tde\", 14, 1)\n        self._cc4de\
    \ = Field(\"cc4de\", 12, 1)\n        self._cc3de = Field(\"cc3de\", 11, 1)\n \
    \       self._cc2de = Field(\"cc2de\", 10, 1)\n        self._cc1de = Field(\"\
    cc1de\", 9, 1)\n        self._ude = Field(\"ude\", 8, 1)\n        self._tie =\
    \ Field(\"tie\", 6, 1)\n        self._cc4ie = Field(\"cc4ie\", 4, 1)\n       \
    \ self._cc3ie = Field(\"cc3ie\", 3, 1)\n        self._cc2ie = Field(\"cc2ie\"\
    , 2, 1)\n        self._cc1ie = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"\
    uie\", 0, 1)\n        super().__init__(\"DIER\", 0x40000000 + 0xC)\n\n    @property\n\
    \    def tde(self) -> Field:\n        \"\"\"\n        TDE\n\n        Trigger DMA\
    \ request enable\n        \"\"\"\n        return self._tde\n\n    @tde.setter\n\
    \    def tde(self, value: int) -> None:\n        self._tde.value = value\n\n \
    \   @property\n    def cc4de(self) -> Field:\n        \"\"\"\n        CC4DE\n\n\
    \        Capture/Compare 4 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc4de\n\n    @cc4de.setter\n    def cc4de(self, value:\
    \ int) -> None:\n        self._cc4de.value = value\n\n    @property\n    def cc3de(self)\
    \ -> Field:\n        \"\"\"\n        CC3DE\n\n        Capture/Compare 3 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc3de\n\n    @cc3de.setter\n\
    \    def cc3de(self, value: int) -> None:\n        self._cc3de.value = value\n\
    \n    @property\n    def cc2de(self) -> Field:\n        \"\"\"\n        CC2DE\n\
    \n        Capture/Compare 2 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc2de\n\n    @cc2de.setter\n    def cc2de(self, value:\
    \ int) -> None:\n        self._cc2de.value = value\n\n    @property\n    def cc1de(self)\
    \ -> Field:\n        \"\"\"\n        CC1DE\n\n        Capture/Compare 1 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc1de\n\n    @cc1de.setter\n\
    \    def cc1de(self, value: int) -> None:\n        self._cc1de.value = value\n\
    \n    @property\n    def ude(self) -> Field:\n        \"\"\"\n        UDE\n\n\
    \        Update DMA request enable\n        \"\"\"\n        return self._ude\n\
    \n    @ude.setter\n    def ude(self, value: int) -> None:\n        self._ude.value\
    \ = value\n\n    @property\n    def tie(self) -> Field:\n        \"\"\"\n    \
    \    TIE\n\n        Trigger interrupt enable\n        \"\"\"\n        return self._tie\n\
    \n    @tie.setter\n    def tie(self, value: int) -> None:\n        self._tie.value\
    \ = value\n\n    @property\n    def cc4ie(self) -> Field:\n        \"\"\"\n  \
    \      CC4IE\n\n        Capture/Compare 4 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc4ie\n\n    @cc4ie.setter\n    def cc4ie(self,\
    \ value: int) -> None:\n        self._cc4ie.value = value\n\n    @property\n \
    \   def cc3ie(self) -> Field:\n        \"\"\"\n        CC3IE\n\n        Capture/Compare\
    \ 3 interrupt\n                  enable\n        \"\"\"\n        return self._cc3ie\n\
    \n    @cc3ie.setter\n    def cc3ie(self, value: int) -> None:\n        self._cc3ie.value\
    \ = value\n\n    @property\n    def cc2ie(self) -> Field:\n        \"\"\"\n  \
    \      CC2IE\n\n        Capture/Compare 2 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc2ie\n\n    @cc2ie.setter\n    def cc2ie(self,\
    \ value: int) -> None:\n        self._cc2ie.value = value\n\n    @property\n \
    \   def cc1ie(self) -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare\
    \ 1 interrupt\n                  enable\n        \"\"\"\n        return self._cc1ie\n\
    \n    @cc1ie.setter\n    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value\
    \ = value\n\n    @property\n    def uie(self) -> Field:\n        \"\"\"\n    \
    \    UIE\n\n        Update interrupt enable\n        \"\"\"\n        return self._uie\n\
    \n    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc4of = Field(\"cc4of\"\
    , 12, 1)\n        self._cc3of = Field(\"cc3of\", 11, 1)\n        self._cc2of =\
    \ Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"cc1of\", 9, 1)\n    \
    \    self._tif = Field(\"tif\", 6, 1)\n        self._cc4if = Field(\"cc4if\",\
    \ 4, 1)\n        self._cc3if = Field(\"cc3if\", 3, 1)\n        self._cc2if = Field(\"\
    cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n        self._uif\
    \ = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40000000 + 0x10)\n\
    \n    @property\n    def cc4of(self) -> Field:\n        \"\"\"\n        CC4OF\n\
    \n        Capture/Compare 4 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc4of\n\n    @cc4of.setter\n    def cc4of(self, value:\
    \ int) -> None:\n        self._cc4of.value = value\n\n    @property\n    def cc3of(self)\
    \ -> Field:\n        \"\"\"\n        CC3OF\n\n        Capture/Compare 3 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc3of\n\n    @cc3of.setter\n\
    \    def cc3of(self, value: int) -> None:\n        self._cc3of.value = value\n\
    \n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n        CC2OF\n\
    \n        Capture/compare 2 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self, value:\
    \ int) -> None:\n        self._cc2of.value = value\n\n    @property\n    def cc1of(self)\
    \ -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare 1 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc1of\n\n    @cc1of.setter\n\
    \    def cc1of(self, value: int) -> None:\n        self._cc1of.value = value\n\
    \n    @property\n    def tif(self) -> Field:\n        \"\"\"\n        TIF\n\n\
    \        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\n\
    \    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def cc4if(self) -> Field:\n        \"\"\"\n  \
    \      CC4IF\n\n        Capture/Compare 4 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc4if\n\n    @cc4if.setter\n    def cc4if(self,\
    \ value: int) -> None:\n        self._cc4if.value = value\n\n    @property\n \
    \   def cc3if(self) -> Field:\n        \"\"\"\n        CC3IF\n\n        Capture/Compare\
    \ 3 interrupt\n                  flag\n        \"\"\"\n        return self._cc3if\n\
    \n    @cc3if.setter\n    def cc3if(self, value: int) -> None:\n        self._cc3if.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._tg\
    \ = Field(\"tg\", 6, 1)\n        self._cc4g = Field(\"cc4g\", 4, 1)\n        self._cc3g\
    \ = Field(\"cc3g\", 3, 1)\n        self._cc2g = Field(\"cc2g\", 2, 1)\n      \
    \  self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\", 0, 1)\n\
    \        super().__init__(\"EGR\", 0x40000000 + 0x14)\n\n    @property\n    def\
    \ tg(self) -> Field:\n        \"\"\"\n        TG\n\n        Trigger generation\n\
    \        \"\"\"\n        return self._tg\n\n    @tg.setter\n    def tg(self, value:\
    \ int) -> None:\n        self._tg.value = value\n\n    @property\n    def cc4g(self)\
    \ -> Field:\n        \"\"\"\n        CC4G\n\n        Capture/compare 4\n     \
    \             generation\n        \"\"\"\n        return self._cc4g\n\n    @cc4g.setter\n\
    \    def cc4g(self, value: int) -> None:\n        self._cc4g.value = value\n\n\
    \    @property\n    def cc3g(self) -> Field:\n        \"\"\"\n        CC3G\n\n\
    \        Capture/compare 3\n                  generation\n        \"\"\"\n   \
    \     return self._cc3g\n\n    @cc3g.setter\n    def cc3g(self, value: int) ->\
    \ None:\n        self._cc3g.value = value\n\n    @property\n    def cc2g(self)\
    \ -> Field:\n        \"\"\"\n        CC2G\n\n        Capture/compare 2\n     \
    \             generation\n        \"\"\"\n        return self._cc2g\n\n    @cc2g.setter\n\
    \    def cc2g(self, value: int) -> None:\n        self._cc2g.value = value\n\n\
    \    @property\n    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n\
    \        Capture/compare 1\n                  generation\n        \"\"\"\n   \
    \     return self._cc1g\n\n    @cc1g.setter\n    def cc1g(self, value: int) ->\
    \ None:\n        self._cc1g.value = value\n\n    @property\n    def ug(self) ->\
    \ Field:\n        \"\"\"\n        UG\n\n        Update generation\n        \"\"\
    \"\n        return self._ug\n\n    @ug.setter\n    def ug(self, value: int) ->\
    \ None:\n        self._ug.value = value\n\n\nclass Ccmr1_outputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare mode register 1 (output\n\
    \              mode)\n    \"\"\"\n\n    def __init__(self):\n        self._oc2ce\
    \ = Field(\"oc2ce\", 15, 1)\n        self._oc2m = Field(\"oc2m\", 12, 3)\n   \
    \     self._oc2pe = Field(\"oc2pe\", 11, 1)\n        self._oc2fe = Field(\"oc2fe\"\
    , 10, 1)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._oc1ce = Field(\"\
    oc1ce\", 7, 1)\n        self._oc1m = Field(\"oc1m\", 4, 3)\n        self._oc1pe\
    \ = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\", 2, 1)\n   \
    \     self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Output\"\
    , 0x40000000 + 0x18)\n\n    @property\n    def oc2ce(self) -> Field:\n       \
    \ \"\"\"\n        OC2CE\n\n        OC2CE\n        \"\"\"\n        return self._oc2ce\n\
    \n    @oc2ce.setter\n    def oc2ce(self, value: int) -> None:\n        self._oc2ce.value\
    \ = value\n\n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n   \
    \     OC2M\n\n        OC2M\n        \"\"\"\n        return self._oc2m\n\n    @oc2m.setter\n\
    \    def oc2m(self, value: int) -> None:\n        self._oc2m.value = value\n\n\
    \    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n        OC2PE\n\
    \n        OC2PE\n        \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n\
    \    def oc2pe(self, value: int) -> None:\n        self._oc2pe.value = value\n\
    \n    @property\n    def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\
    \n        OC2FE\n        \"\"\"\n        return self._oc2fe\n\n    @oc2fe.setter\n\
    \    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value = value\n\
    \n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n\
    \        CC2S\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n\
    \    def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def oc1ce(self) -> Field:\n        \"\"\"\n        OC1CE\n\
    \n        OC1CE\n        \"\"\"\n        return self._oc1ce\n\n    @oc1ce.setter\n\
    \    def oc1ce(self, value: int) -> None:\n        self._oc1ce.value = value\n\
    \n    @property\n    def oc1m(self) -> Field:\n        \"\"\"\n        OC1M\n\n\
    \        OC1M\n        \"\"\"\n        return self._oc1m\n\n    @oc1m.setter\n\
    \    def oc1m(self, value: int) -> None:\n        self._oc1m.value = value\n\n\
    \    @property\n    def oc1pe(self) -> Field:\n        \"\"\"\n        OC1PE\n\
    \n        OC1PE\n        \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n\
    \    def oc1pe(self, value: int) -> None:\n        self._oc1pe.value = value\n\
    \n    @property\n    def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\
    \n        OC1FE\n        \"\"\"\n        return self._oc1fe\n\n    @oc1fe.setter\n\
    \    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value = value\n\
    \n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n\
    \        CC1S\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n\
    \    def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\
    \nclass Ccmr1_inputRegister(Register):\n    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare\
    \ mode register 1 (input\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ic2f = Field(\"ic2f\", 12, 4)\n        self._ic2pcs = Field(\"\
    ic2pcs\", 10, 2)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f\
    \ = Field(\"ic1f\", 4, 4)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n    \
    \    self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\"\
    , 0x40000000 + 0x18)\n\n    @property\n    def ic2f(self) -> Field:\n        \"\
    \"\"\n        IC2F\n\n        Input capture 2 filter\n        \"\"\"\n       \
    \ return self._ic2f\n\n    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n\
    \        self._ic2f.value = value\n\n    @property\n    def ic2pcs(self) -> Field:\n\
    \        \"\"\"\n        IC2PCS\n\n        Input capture 2 prescaler\n       \
    \ \"\"\"\n        return self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self,\
    \ value: int) -> None:\n        self._ic2pcs.value = value\n\n    @property\n\
    \    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n        Capture/Compare\
    \ 2\n                  selection\n        \"\"\"\n        return self._cc2s\n\n\
    \    @cc2s.setter\n    def cc2s(self, value: int) -> None:\n        self._cc2s.value\
    \ = value\n\n    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n   \
    \     IC1F\n\n        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\
    \n    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class Ccmr2_outputRegister(Register):\n    \"\"\"\n    CCMR2_OUTPUT\n\n    capture/compare\
    \ mode register 2 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc4ce = Field(\"oc4ce\", 15, 1)\n        self._oc4m = Field(\"\
    oc4m\", 12, 3)\n        self._oc4pe = Field(\"oc4pe\", 11, 1)\n        self._oc4fe\
    \ = Field(\"oc4fe\", 10, 1)\n        self._cc4s = Field(\"cc4s\", 8, 2)\n    \
    \    self._oc3ce = Field(\"oc3ce\", 7, 1)\n        self._oc3m = Field(\"oc3m\"\
    , 4, 3)\n        self._oc3pe = Field(\"oc3pe\", 3, 1)\n        self._oc3fe = Field(\"\
    oc3fe\", 2, 1)\n        self._cc3s = Field(\"cc3s\", 0, 2)\n        super().__init__(\"\
    CCMR2_Output\", 0x40000000 + 0x1C)\n\n    @property\n    def oc4ce(self) -> Field:\n\
    \        \"\"\"\n        OC4CE\n\n        OC4CE\n        \"\"\"\n        return\
    \ self._oc4ce\n\n    @oc4ce.setter\n    def oc4ce(self, value: int) -> None:\n\
    \        self._oc4ce.value = value\n\n    @property\n    def oc4m(self) -> Field:\n\
    \        \"\"\"\n        OC4M\n\n        OC4M\n        \"\"\"\n        return\
    \ self._oc4m\n\n    @oc4m.setter\n    def oc4m(self, value: int) -> None:\n  \
    \      self._oc4m.value = value\n\n    @property\n    def oc4pe(self) -> Field:\n\
    \        \"\"\"\n        OC4PE\n\n        OC4PE\n        \"\"\"\n        return\
    \ self._oc4pe\n\n    @oc4pe.setter\n    def oc4pe(self, value: int) -> None:\n\
    \        self._oc4pe.value = value\n\n    @property\n    def oc4fe(self) -> Field:\n\
    \        \"\"\"\n        OC4FE\n\n        OC4FE\n        \"\"\"\n        return\
    \ self._oc4fe\n\n    @oc4fe.setter\n    def oc4fe(self, value: int) -> None:\n\
    \        self._oc4fe.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        CC4S\n        \"\"\"\n        return\
    \ self._cc4s\n\n    @cc4s.setter\n    def cc4s(self, value: int) -> None:\n  \
    \      self._cc4s.value = value\n\n    @property\n    def oc3ce(self) -> Field:\n\
    \        \"\"\"\n        OC3CE\n\n        OC3CE\n        \"\"\"\n        return\
    \ self._oc3ce\n\n    @oc3ce.setter\n    def oc3ce(self, value: int) -> None:\n\
    \        self._oc3ce.value = value\n\n    @property\n    def oc3m(self) -> Field:\n\
    \        \"\"\"\n        OC3M\n\n        OC3M\n        \"\"\"\n        return\
    \ self._oc3m\n\n    @oc3m.setter\n    def oc3m(self, value: int) -> None:\n  \
    \      self._oc3m.value = value\n\n    @property\n    def oc3pe(self) -> Field:\n\
    \        \"\"\"\n        OC3PE\n\n        OC3PE\n        \"\"\"\n        return\
    \ self._oc3pe\n\n    @oc3pe.setter\n    def oc3pe(self, value: int) -> None:\n\
    \        self._oc3pe.value = value\n\n    @property\n    def oc3fe(self) -> Field:\n\
    \        \"\"\"\n        OC3FE\n\n        OC3FE\n        \"\"\"\n        return\
    \ self._oc3fe\n\n    @oc3fe.setter\n    def oc3fe(self, value: int) -> None:\n\
    \        self._oc3fe.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        CC3S\n        \"\"\"\n        return\
    \ self._cc3s\n\n    @cc3s.setter\n    def cc3s(self, value: int) -> None:\n  \
    \      self._cc3s.value = value\n\n\nclass Ccmr2_inputRegister(Register):\n  \
    \  \"\"\"\n    CCMR2_INPUT\n\n    capture/compare mode register 2 (input\n   \
    \           mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic4f =\
    \ Field(\"ic4f\", 12, 4)\n        self._ic4psc = Field(\"ic4psc\", 10, 2)\n  \
    \      self._cc4s = Field(\"cc4s\", 8, 2)\n        self._ic3f = Field(\"ic3f\"\
    , 4, 4)\n        self._ic3psc = Field(\"ic3psc\", 2, 2)\n        self._cc3s =\
    \ Field(\"cc3s\", 0, 2)\n        super().__init__(\"CCMR2_Input\", 0x40000000\
    \ + 0x1C)\n\n    @property\n    def ic4f(self) -> Field:\n        \"\"\"\n   \
    \     IC4F\n\n        Input capture 4 filter\n        \"\"\"\n        return self._ic4f\n\
    \n    @ic4f.setter\n    def ic4f(self, value: int) -> None:\n        self._ic4f.value\
    \ = value\n\n    @property\n    def ic4psc(self) -> Field:\n        \"\"\"\n \
    \       IC4PSC\n\n        Input capture 4 prescaler\n        \"\"\"\n        return\
    \ self._ic4psc\n\n    @ic4psc.setter\n    def ic4psc(self, value: int) -> None:\n\
    \        self._ic4psc.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        Capture/Compare 4\n                 \
    \ selection\n        \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n \
    \   def cc4s(self, value: int) -> None:\n        self._cc4s.value = value\n\n\
    \    @property\n    def ic3f(self) -> Field:\n        \"\"\"\n        IC3F\n\n\
    \        Input capture 3 filter\n        \"\"\"\n        return self._ic3f\n\n\
    \    @ic3f.setter\n    def ic3f(self, value: int) -> None:\n        self._ic3f.value\
    \ = value\n\n    @property\n    def ic3psc(self) -> Field:\n        \"\"\"\n \
    \       IC3PSC\n\n        Input capture 3 prescaler\n        \"\"\"\n        return\
    \ self._ic3psc\n\n    @ic3psc.setter\n    def ic3psc(self, value: int) -> None:\n\
    \        self._ic3psc.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        Capture/compare 3\n                 \
    \ selection\n        \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n \
    \   def cc3s(self, value: int) -> None:\n        self._cc3s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc4np\
    \ = Field(\"cc4np\", 15, 1)\n        self._cc4p = Field(\"cc4p\", 13, 1)\n   \
    \     self._cc4e = Field(\"cc4e\", 12, 1)\n        self._cc3np = Field(\"cc3np\"\
    , 11, 1)\n        self._cc3p = Field(\"cc3p\", 9, 1)\n        self._cc3e = Field(\"\
    cc3e\", 8, 1)\n        self._cc2np = Field(\"cc2np\", 7, 1)\n        self._cc2p\
    \ = Field(\"cc2p\", 5, 1)\n        self._cc2e = Field(\"cc2e\", 4, 1)\n      \
    \  self._cc1np = Field(\"cc1np\", 3, 1)\n        self._cc1p = Field(\"cc1p\",\
    \ 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40000000 + 0x20)\n\n    @property\n    def cc4np(self) -> Field:\n \
    \       \"\"\"\n        CC4NP\n\n        Capture/Compare 4 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc4np\n\n    @cc4np.setter\n\
    \    def cc4np(self, value: int) -> None:\n        self._cc4np.value = value\n\
    \n    @property\n    def cc4p(self) -> Field:\n        \"\"\"\n        CC4P\n\n\
    \        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc4p\n\n    @cc4p.setter\n    def cc4p(self, value: int)\
    \ -> None:\n        self._cc4p.value = value\n\n    @property\n    def cc4e(self)\
    \ -> Field:\n        \"\"\"\n        CC4E\n\n        Capture/Compare 4 output\n\
    \                  enable\n        \"\"\"\n        return self._cc4e\n\n    @cc4e.setter\n\
    \    def cc4e(self, value: int) -> None:\n        self._cc4e.value = value\n\n\
    \    @property\n    def cc3np(self) -> Field:\n        \"\"\"\n        CC3NP\n\
    \n        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\
    \n        return self._cc3np\n\n    @cc3np.setter\n    def cc3np(self, value:\
    \ int) -> None:\n        self._cc3np.value = value\n\n    @property\n    def cc3p(self)\
    \ -> Field:\n        \"\"\"\n        CC3P\n\n        Capture/Compare 3 output\n\
    \                  Polarity\n        \"\"\"\n        return self._cc3p\n\n   \
    \ @cc3p.setter\n    def cc3p(self, value: int) -> None:\n        self._cc3p.value\
    \ = value\n\n    @property\n    def cc3e(self) -> Field:\n        \"\"\"\n   \
    \     CC3E\n\n        Capture/Compare 3 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc3e\n\n    @cc3e.setter\n    def cc3e(self,\
    \ value: int) -> None:\n        self._cc3e.value = value\n\n    @property\n  \
    \  def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\n        Capture/Compare\
    \ 2 output\n                  Polarity\n        \"\"\"\n        return self._cc2np\n\
    \n    @cc2np.setter\n    def cc2np(self, value: int) -> None:\n        self._cc2np.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n        Capture/Compare\
    \ 1 output\n                  Polarity\n        \"\"\"\n        return self._cc1p\n\
    \n    @cc1p.setter\n    def cc1p(self, value: int) -> None:\n        self._cc1p.value\
    \ = value\n\n    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n   \
    \     CC1E\n\n        Capture/Compare 1 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self,\
    \ value: int) -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt_h = Field(\"cnt_h\", 16, 16)\n        self._cnt_l = Field(\"\
    cnt_l\", 0, 16)\n        super().__init__(\"CNT\", 0x40000000 + 0x24)\n\n    @property\n\
    \    def cnt_h(self) -> Field:\n        \"\"\"\n        CNT_H\n\n        High\
    \ counter value\n        \"\"\"\n        return self._cnt_h\n\n    @cnt_h.setter\n\
    \    def cnt_h(self, value: int) -> None:\n        self._cnt_h.value = value\n\
    \n    @property\n    def cnt_l(self) -> Field:\n        \"\"\"\n        CNT_L\n\
    \n        Low counter value\n        \"\"\"\n        return self._cnt_l\n\n  \
    \  @cnt_l.setter\n    def cnt_l(self, value: int) -> None:\n        self._cnt_l.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40000000 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr_h = Field(\"arr_h\", 16, 16)\n        self._arr_l = Field(\"\
    arr_l\", 0, 16)\n        super().__init__(\"ARR\", 0x40000000 + 0x2C)\n\n    @property\n\
    \    def arr_h(self) -> Field:\n        \"\"\"\n        ARR_H\n\n        High\
    \ Auto-reload value\n        \"\"\"\n        return self._arr_h\n\n    @arr_h.setter\n\
    \    def arr_h(self, value: int) -> None:\n        self._arr_h.value = value\n\
    \n    @property\n    def arr_l(self) -> Field:\n        \"\"\"\n        ARR_L\n\
    \n        Low Auto-reload value\n        \"\"\"\n        return self._arr_l\n\n\
    \    @arr_l.setter\n    def arr_l(self, value: int) -> None:\n        self._arr_l.value\
    \ = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n    CCR1\n\n    capture/compare\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ccr1_h = Field(\"\
    ccr1_h\", 16, 16)\n        self._ccr1_l = Field(\"ccr1_l\", 0, 16)\n        super().__init__(\"\
    CCR1\", 0x40000000 + 0x34)\n\n    @property\n    def ccr1_h(self) -> Field:\n\
    \        \"\"\"\n        CCR1_H\n\n        High Capture/Compare 1\n          \
    \        value\n        \"\"\"\n        return self._ccr1_h\n\n    @ccr1_h.setter\n\
    \    def ccr1_h(self, value: int) -> None:\n        self._ccr1_h.value = value\n\
    \n    @property\n    def ccr1_l(self) -> Field:\n        \"\"\"\n        CCR1_L\n\
    \n        Low Capture/Compare 1\n                  value\n        \"\"\"\n   \
    \     return self._ccr1_l\n\n    @ccr1_l.setter\n    def ccr1_l(self, value: int)\
    \ -> None:\n        self._ccr1_l.value = value\n\n\nclass Ccr2Register(Register):\n\
    \    \"\"\"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ccr2_h = Field(\"ccr2_h\", 16, 16)\n        self._ccr2_l\
    \ = Field(\"ccr2_l\", 0, 16)\n        super().__init__(\"CCR2\", 0x40000000 +\
    \ 0x38)\n\n    @property\n    def ccr2_h(self) -> Field:\n        \"\"\"\n   \
    \     CCR2_H\n\n        High Capture/Compare 2\n                  value\n    \
    \    \"\"\"\n        return self._ccr2_h\n\n    @ccr2_h.setter\n    def ccr2_h(self,\
    \ value: int) -> None:\n        self._ccr2_h.value = value\n\n    @property\n\
    \    def ccr2_l(self) -> Field:\n        \"\"\"\n        CCR2_L\n\n        Low\
    \ Capture/Compare 2\n                  value\n        \"\"\"\n        return self._ccr2_l\n\
    \n    @ccr2_l.setter\n    def ccr2_l(self, value: int) -> None:\n        self._ccr2_l.value\
    \ = value\n\n\nclass Ccr3Register(Register):\n    \"\"\"\n    CCR3\n\n    capture/compare\
    \ register 3\n    \"\"\"\n\n    def __init__(self):\n        self._ccr3_h = Field(\"\
    ccr3_h\", 16, 16)\n        self._ccr3_l = Field(\"ccr3_l\", 0, 16)\n        super().__init__(\"\
    CCR3\", 0x40000000 + 0x3C)\n\n    @property\n    def ccr3_h(self) -> Field:\n\
    \        \"\"\"\n        CCR3_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr3_h\n\n    @ccr3_h.setter\n    def ccr3_h(self,\
    \ value: int) -> None:\n        self._ccr3_h.value = value\n\n    @property\n\
    \    def ccr3_l(self) -> Field:\n        \"\"\"\n        CCR3_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr3_l\n\n    @ccr3_l.setter\n\
    \    def ccr3_l(self, value: int) -> None:\n        self._ccr3_l.value = value\n\
    \n\nclass Ccr4Register(Register):\n    \"\"\"\n    CCR4\n\n    capture/compare\
    \ register 4\n    \"\"\"\n\n    def __init__(self):\n        self._ccr4_h = Field(\"\
    ccr4_h\", 16, 16)\n        self._ccr4_l = Field(\"ccr4_l\", 0, 16)\n        super().__init__(\"\
    CCR4\", 0x40000000 + 0x40)\n\n    @property\n    def ccr4_h(self) -> Field:\n\
    \        \"\"\"\n        CCR4_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr4_h\n\n    @ccr4_h.setter\n    def ccr4_h(self,\
    \ value: int) -> None:\n        self._ccr4_h.value = value\n\n    @property\n\
    \    def ccr4_l(self) -> Field:\n        \"\"\"\n        CCR4_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr4_l\n\n    @ccr4_l.setter\n\
    \    def ccr4_l(self, value: int) -> None:\n        self._ccr4_l.value = value\n\
    \n\nclass DcrRegister(Register):\n    \"\"\"\n    DCR\n\n    DMA control register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dbl = Field(\"dbl\", 8,\
    \ 5)\n        self._dba = Field(\"dba\", 0, 5)\n        super().__init__(\"DCR\"\
    , 0x40000000 + 0x48)\n\n    @property\n    def dbl(self) -> Field:\n        \"\
    \"\"\n        DBL\n\n        DMA burst length\n        \"\"\"\n        return\
    \ self._dbl\n\n    @dbl.setter\n    def dbl(self, value: int) -> None:\n     \
    \   self._dbl.value = value\n\n    @property\n    def dba(self) -> Field:\n  \
    \      \"\"\"\n        DBA\n\n        DMA base address\n        \"\"\"\n     \
    \   return self._dba\n\n    @dba.setter\n    def dba(self, value: int) -> None:\n\
    \        self._dba.value = value\n\n\nclass DmarRegister(Register):\n    \"\"\"\
    \n    DMAR\n\n    DMA address for full transfer\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dmab = Field(\"dmab\", 0, 16)\n        super().__init__(\"DMAR\"\
    , 0x40000000 + 0x4C)\n\n    @property\n    def dmab(self) -> Field:\n        \"\
    \"\"\n        DMAB\n\n        DMA register for burst\n                  accesses\n\
    \        \"\"\"\n        return self._dmab\n\n    @dmab.setter\n    def dmab(self,\
    \ value: int) -> None:\n        self._dmab.value = value\n\n\nclass OrRegister(Register):\n\
    \    \"\"\"\n    OR\n\n    TIM5 option register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._itr1_rmp = Field(\"itr1_rmp\", 10, 2)\n        super().__init__(\"\
    OR\", 0x40000000 + 0x50)\n\n    @property\n    def itr1_rmp(self) -> Field:\n\
    \        \"\"\"\n        ITR1_RMP\n\n        Timer Input 4 remap\n        \"\"\
    \"\n        return self._itr1_rmp\n\n    @itr1_rmp.setter\n    def itr1_rmp(self,\
    \ value: int) -> None:\n        self._itr1_rmp.value = value\n\n\nclass Tim2(Peripheral):\n\
    \    \"\"\"\n    TIM2\n\n    General purpose timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._cr2 = Cr2Register()\n      \
    \  self._smcr = SmcrRegister()\n        self._dier = DierRegister()\n        self._sr\
    \ = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccmr2_output = Ccmr2_outputRegister()\n        self._ccmr2_input\
    \ = Ccmr2_inputRegister()\n        self._ccer = CcerRegister()\n        self._cnt\
    \ = CntRegister()\n        self._psc = PscRegister()\n        self._arr = ArrRegister()\n\
    \        self._ccr1 = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n  \
    \      self._ccr3 = Ccr3Register()\n        self._ccr4 = Ccr4Register()\n    \
    \    self._dcr = DcrRegister()\n        self._dmar = DmarRegister()\n        self._or\
    \ = OrRegister()\n        super().__init__(\"tim2\", 0x40000000)\n\n    @property\n\
    \    def cr1(self) -> Cr1Register:\n        return self._cr1\n\n    @cr1.setter\n\
    \    def cr1(self, value: int) -> None:\n        self._cr1.value = value\n\n \
    \   @property\n    def cr2(self) -> Cr2Register:\n        return self._cr2\n\n\
    \    @cr2.setter\n    def cr2(self, value: int) -> None:\n        self._cr2.value\
    \ = value\n\n    @property\n    def smcr(self) -> SmcrRegister:\n        return\
    \ self._smcr\n\n    @smcr.setter\n    def smcr(self, value: int) -> None:\n  \
    \      self._smcr.value = value\n\n    @property\n    def dier(self) -> DierRegister:\n\
    \        return self._dier\n\n    @dier.setter\n    def dier(self, value: int)\
    \ -> None:\n        self._dier.value = value\n\n    @property\n    def sr(self)\
    \ -> SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self,\
    \ value: int) -> None:\n        self._sr.value = value\n\n    @property\n    def\
    \ egr(self) -> EgrRegister:\n        return self._egr\n\n    @egr.setter\n   \
    \ def egr(self, value: int) -> None:\n        self._egr.value = value\n\n    @property\n\
    \    def ccmr1_output(self) -> Ccmr1_outputRegister:\n        return self._ccmr1_output\n\
    \n    @ccmr1_output.setter\n    def ccmr1_output(self, value: int) -> None:\n\
    \        self._ccmr1_output.value = value\n\n    @property\n    def ccmr1_input(self)\
    \ -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\n    @ccmr1_input.setter\n\
    \    def ccmr1_input(self, value: int) -> None:\n        self._ccmr1_input.value\
    \ = value\n\n    @property\n    def ccmr2_output(self) -> Ccmr2_outputRegister:\n\
    \        return self._ccmr2_output\n\n    @ccmr2_output.setter\n    def ccmr2_output(self,\
    \ value: int) -> None:\n        self._ccmr2_output.value = value\n\n    @property\n\
    \    def ccmr2_input(self) -> Ccmr2_inputRegister:\n        return self._ccmr2_input\n\
    \n    @ccmr2_input.setter\n    def ccmr2_input(self, value: int) -> None:\n  \
    \      self._ccmr2_input.value = value\n\n    @property\n    def ccer(self) ->\
    \ CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n    def ccer(self,\
    \ value: int) -> None:\n        self._ccer.value = value\n\n    @property\n  \
    \  def cnt(self) -> CntRegister:\n        return self._cnt\n\n    @cnt.setter\n\
    \    def cnt(self, value: int) -> None:\n        self._cnt.value = value\n\n \
    \   @property\n    def psc(self) -> PscRegister:\n        return self._psc\n\n\
    \    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n    @property\n    def arr(self) -> ArrRegister:\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n    @property\n    def ccr1(self) -> Ccr1Register:\n\
    \        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int)\
    \ -> None:\n        self._ccr1.value = value\n\n    @property\n    def ccr2(self)\
    \ -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n    def ccr2(self,\
    \ value: int) -> None:\n        self._ccr2.value = value\n\n    @property\n  \
    \  def ccr3(self) -> Ccr3Register:\n        return self._ccr3\n\n    @ccr3.setter\n\
    \    def ccr3(self, value: int) -> None:\n        self._ccr3.value = value\n\n\
    \    @property\n    def ccr4(self) -> Ccr4Register:\n        return self._ccr4\n\
    \n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n        self._ccr4.value\
    \ = value\n\n    @property\n    def dcr(self) -> DcrRegister:\n        return\
    \ self._dcr\n\n    @dcr.setter\n    def dcr(self, value: int) -> None:\n     \
    \   self._dcr.value = value\n\n    @property\n    def dmar(self) -> DmarRegister:\n\
    \        return self._dmar\n\n    @dmar.setter\n    def dmar(self, value: int)\
    \ -> None:\n        self._dmar.value = value\n\n    @property\n    def or(self)\
    \ -> OrRegister:\n        return self._or\n\n    @or.setter\n    def or(self,\
    \ value: int) -> None:\n        self._or.value = value\n"
  name: TIM2
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._cms =\
    \ Field(\"cms\", 5, 2)\n        self._dir = Field(\"dir\", 4, 1)\n        self._opm\
    \ = Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40000400 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def cms(self)\
    \ -> Field:\n        \"\"\"\n        CMS\n\n        Center-aligned mode\n    \
    \              selection\n        \"\"\"\n        return self._cms\n\n    @cms.setter\n\
    \    def cms(self, value: int) -> None:\n        self._cms.value = value\n\n \
    \   @property\n    def dir(self) -> Field:\n        \"\"\"\n        DIR\n\n  \
    \      Direction\n        \"\"\"\n        return self._dir\n\n    @dir.setter\n\
    \    def dir(self, value: int) -> None:\n        self._dir.value = value\n\n \
    \   @property\n    def opm(self) -> Field:\n        \"\"\"\n        OPM\n\n  \
    \      One-pulse mode\n        \"\"\"\n        return self._opm\n\n    @opm.setter\n\
    \    def opm(self, value: int) -> None:\n        self._opm.value = value\n\n \
    \   @property\n    def urs(self) -> Field:\n        \"\"\"\n        URS\n\n  \
    \      Update request source\n        \"\"\"\n        return self._urs\n\n   \
    \ @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._ti1s = Field(\"\
    ti1s\", 7, 1)\n        self._mms = Field(\"mms\", 4, 3)\n        self._ccds =\
    \ Field(\"ccds\", 3, 1)\n        super().__init__(\"CR2\", 0x40000400 + 0x4)\n\
    \n    @property\n    def ti1s(self) -> Field:\n        \"\"\"\n        TI1S\n\n\
    \        TI1 selection\n        \"\"\"\n        return self._ti1s\n\n    @ti1s.setter\n\
    \    def ti1s(self, value: int) -> None:\n        self._ti1s.value = value\n\n\
    \    @property\n    def mms(self) -> Field:\n        \"\"\"\n        MMS\n\n \
    \       Master mode selection\n        \"\"\"\n        return self._mms\n\n  \
    \  @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n    @property\n    def ccds(self) -> Field:\n        \"\"\"\n   \
    \     CCDS\n\n        Capture/compare DMA\n                  selection\n     \
    \   \"\"\"\n        return self._ccds\n\n    @ccds.setter\n    def ccds(self,\
    \ value: int) -> None:\n        self._ccds.value = value\n\n\nclass SmcrRegister(Register):\n\
    \    \"\"\"\n    SMCR\n\n    slave mode control register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._etp = Field(\"etp\", 15, 1)\n        self._ece\
    \ = Field(\"ece\", 14, 1)\n        self._etps = Field(\"etps\", 12, 2)\n     \
    \   self._etf = Field(\"etf\", 8, 4)\n        self._msm = Field(\"msm\", 7, 1)\n\
    \        self._ts = Field(\"ts\", 4, 3)\n        self._sms = Field(\"sms\", 0,\
    \ 3)\n        super().__init__(\"SMCR\", 0x40000400 + 0x8)\n\n    @property\n\
    \    def etp(self) -> Field:\n        \"\"\"\n        ETP\n\n        External\
    \ trigger polarity\n        \"\"\"\n        return self._etp\n\n    @etp.setter\n\
    \    def etp(self, value: int) -> None:\n        self._etp.value = value\n\n \
    \   @property\n    def ece(self) -> Field:\n        \"\"\"\n        ECE\n\n  \
    \      External clock enable\n        \"\"\"\n        return self._ece\n\n   \
    \ @ece.setter\n    def ece(self, value: int) -> None:\n        self._ece.value\
    \ = value\n\n    @property\n    def etps(self) -> Field:\n        \"\"\"\n   \
    \     ETPS\n\n        External trigger prescaler\n        \"\"\"\n        return\
    \ self._etps\n\n    @etps.setter\n    def etps(self, value: int) -> None:\n  \
    \      self._etps.value = value\n\n    @property\n    def etf(self) -> Field:\n\
    \        \"\"\"\n        ETF\n\n        External trigger filter\n        \"\"\"\
    \n        return self._etf\n\n    @etf.setter\n    def etf(self, value: int) ->\
    \ None:\n        self._etf.value = value\n\n    @property\n    def msm(self) ->\
    \ Field:\n        \"\"\"\n        MSM\n\n        Master/Slave mode\n        \"\
    \"\"\n        return self._msm\n\n    @msm.setter\n    def msm(self, value: int)\
    \ -> None:\n        self._msm.value = value\n\n    @property\n    def ts(self)\
    \ -> Field:\n        \"\"\"\n        TS\n\n        Trigger selection\n       \
    \ \"\"\"\n        return self._ts\n\n    @ts.setter\n    def ts(self, value: int)\
    \ -> None:\n        self._ts.value = value\n\n    @property\n    def sms(self)\
    \ -> Field:\n        \"\"\"\n        SMS\n\n        Slave mode selection\n   \
    \     \"\"\"\n        return self._sms\n\n    @sms.setter\n    def sms(self, value:\
    \ int) -> None:\n        self._sms.value = value\n\n\nclass DierRegister(Register):\n\
    \    \"\"\"\n    DIER\n\n    DMA/Interrupt enable register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._tde = Field(\"tde\", 14, 1)\n        self._cc4de\
    \ = Field(\"cc4de\", 12, 1)\n        self._cc3de = Field(\"cc3de\", 11, 1)\n \
    \       self._cc2de = Field(\"cc2de\", 10, 1)\n        self._cc1de = Field(\"\
    cc1de\", 9, 1)\n        self._ude = Field(\"ude\", 8, 1)\n        self._tie =\
    \ Field(\"tie\", 6, 1)\n        self._cc4ie = Field(\"cc4ie\", 4, 1)\n       \
    \ self._cc3ie = Field(\"cc3ie\", 3, 1)\n        self._cc2ie = Field(\"cc2ie\"\
    , 2, 1)\n        self._cc1ie = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"\
    uie\", 0, 1)\n        super().__init__(\"DIER\", 0x40000400 + 0xC)\n\n    @property\n\
    \    def tde(self) -> Field:\n        \"\"\"\n        TDE\n\n        Trigger DMA\
    \ request enable\n        \"\"\"\n        return self._tde\n\n    @tde.setter\n\
    \    def tde(self, value: int) -> None:\n        self._tde.value = value\n\n \
    \   @property\n    def cc4de(self) -> Field:\n        \"\"\"\n        CC4DE\n\n\
    \        Capture/Compare 4 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc4de\n\n    @cc4de.setter\n    def cc4de(self, value:\
    \ int) -> None:\n        self._cc4de.value = value\n\n    @property\n    def cc3de(self)\
    \ -> Field:\n        \"\"\"\n        CC3DE\n\n        Capture/Compare 3 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc3de\n\n    @cc3de.setter\n\
    \    def cc3de(self, value: int) -> None:\n        self._cc3de.value = value\n\
    \n    @property\n    def cc2de(self) -> Field:\n        \"\"\"\n        CC2DE\n\
    \n        Capture/Compare 2 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc2de\n\n    @cc2de.setter\n    def cc2de(self, value:\
    \ int) -> None:\n        self._cc2de.value = value\n\n    @property\n    def cc1de(self)\
    \ -> Field:\n        \"\"\"\n        CC1DE\n\n        Capture/Compare 1 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc1de\n\n    @cc1de.setter\n\
    \    def cc1de(self, value: int) -> None:\n        self._cc1de.value = value\n\
    \n    @property\n    def ude(self) -> Field:\n        \"\"\"\n        UDE\n\n\
    \        Update DMA request enable\n        \"\"\"\n        return self._ude\n\
    \n    @ude.setter\n    def ude(self, value: int) -> None:\n        self._ude.value\
    \ = value\n\n    @property\n    def tie(self) -> Field:\n        \"\"\"\n    \
    \    TIE\n\n        Trigger interrupt enable\n        \"\"\"\n        return self._tie\n\
    \n    @tie.setter\n    def tie(self, value: int) -> None:\n        self._tie.value\
    \ = value\n\n    @property\n    def cc4ie(self) -> Field:\n        \"\"\"\n  \
    \      CC4IE\n\n        Capture/Compare 4 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc4ie\n\n    @cc4ie.setter\n    def cc4ie(self,\
    \ value: int) -> None:\n        self._cc4ie.value = value\n\n    @property\n \
    \   def cc3ie(self) -> Field:\n        \"\"\"\n        CC3IE\n\n        Capture/Compare\
    \ 3 interrupt\n                  enable\n        \"\"\"\n        return self._cc3ie\n\
    \n    @cc3ie.setter\n    def cc3ie(self, value: int) -> None:\n        self._cc3ie.value\
    \ = value\n\n    @property\n    def cc2ie(self) -> Field:\n        \"\"\"\n  \
    \      CC2IE\n\n        Capture/Compare 2 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc2ie\n\n    @cc2ie.setter\n    def cc2ie(self,\
    \ value: int) -> None:\n        self._cc2ie.value = value\n\n    @property\n \
    \   def cc1ie(self) -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare\
    \ 1 interrupt\n                  enable\n        \"\"\"\n        return self._cc1ie\n\
    \n    @cc1ie.setter\n    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value\
    \ = value\n\n    @property\n    def uie(self) -> Field:\n        \"\"\"\n    \
    \    UIE\n\n        Update interrupt enable\n        \"\"\"\n        return self._uie\n\
    \n    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc4of = Field(\"cc4of\"\
    , 12, 1)\n        self._cc3of = Field(\"cc3of\", 11, 1)\n        self._cc2of =\
    \ Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"cc1of\", 9, 1)\n    \
    \    self._tif = Field(\"tif\", 6, 1)\n        self._cc4if = Field(\"cc4if\",\
    \ 4, 1)\n        self._cc3if = Field(\"cc3if\", 3, 1)\n        self._cc2if = Field(\"\
    cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n        self._uif\
    \ = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40000400 + 0x10)\n\
    \n    @property\n    def cc4of(self) -> Field:\n        \"\"\"\n        CC4OF\n\
    \n        Capture/Compare 4 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc4of\n\n    @cc4of.setter\n    def cc4of(self, value:\
    \ int) -> None:\n        self._cc4of.value = value\n\n    @property\n    def cc3of(self)\
    \ -> Field:\n        \"\"\"\n        CC3OF\n\n        Capture/Compare 3 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc3of\n\n    @cc3of.setter\n\
    \    def cc3of(self, value: int) -> None:\n        self._cc3of.value = value\n\
    \n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n        CC2OF\n\
    \n        Capture/compare 2 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self, value:\
    \ int) -> None:\n        self._cc2of.value = value\n\n    @property\n    def cc1of(self)\
    \ -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare 1 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc1of\n\n    @cc1of.setter\n\
    \    def cc1of(self, value: int) -> None:\n        self._cc1of.value = value\n\
    \n    @property\n    def tif(self) -> Field:\n        \"\"\"\n        TIF\n\n\
    \        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\n\
    \    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def cc4if(self) -> Field:\n        \"\"\"\n  \
    \      CC4IF\n\n        Capture/Compare 4 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc4if\n\n    @cc4if.setter\n    def cc4if(self,\
    \ value: int) -> None:\n        self._cc4if.value = value\n\n    @property\n \
    \   def cc3if(self) -> Field:\n        \"\"\"\n        CC3IF\n\n        Capture/Compare\
    \ 3 interrupt\n                  flag\n        \"\"\"\n        return self._cc3if\n\
    \n    @cc3if.setter\n    def cc3if(self, value: int) -> None:\n        self._cc3if.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._tg\
    \ = Field(\"tg\", 6, 1)\n        self._cc4g = Field(\"cc4g\", 4, 1)\n        self._cc3g\
    \ = Field(\"cc3g\", 3, 1)\n        self._cc2g = Field(\"cc2g\", 2, 1)\n      \
    \  self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\", 0, 1)\n\
    \        super().__init__(\"EGR\", 0x40000400 + 0x14)\n\n    @property\n    def\
    \ tg(self) -> Field:\n        \"\"\"\n        TG\n\n        Trigger generation\n\
    \        \"\"\"\n        return self._tg\n\n    @tg.setter\n    def tg(self, value:\
    \ int) -> None:\n        self._tg.value = value\n\n    @property\n    def cc4g(self)\
    \ -> Field:\n        \"\"\"\n        CC4G\n\n        Capture/compare 4\n     \
    \             generation\n        \"\"\"\n        return self._cc4g\n\n    @cc4g.setter\n\
    \    def cc4g(self, value: int) -> None:\n        self._cc4g.value = value\n\n\
    \    @property\n    def cc3g(self) -> Field:\n        \"\"\"\n        CC3G\n\n\
    \        Capture/compare 3\n                  generation\n        \"\"\"\n   \
    \     return self._cc3g\n\n    @cc3g.setter\n    def cc3g(self, value: int) ->\
    \ None:\n        self._cc3g.value = value\n\n    @property\n    def cc2g(self)\
    \ -> Field:\n        \"\"\"\n        CC2G\n\n        Capture/compare 2\n     \
    \             generation\n        \"\"\"\n        return self._cc2g\n\n    @cc2g.setter\n\
    \    def cc2g(self, value: int) -> None:\n        self._cc2g.value = value\n\n\
    \    @property\n    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n\
    \        Capture/compare 1\n                  generation\n        \"\"\"\n   \
    \     return self._cc1g\n\n    @cc1g.setter\n    def cc1g(self, value: int) ->\
    \ None:\n        self._cc1g.value = value\n\n    @property\n    def ug(self) ->\
    \ Field:\n        \"\"\"\n        UG\n\n        Update generation\n        \"\"\
    \"\n        return self._ug\n\n    @ug.setter\n    def ug(self, value: int) ->\
    \ None:\n        self._ug.value = value\n\n\nclass Ccmr1_outputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare mode register 1 (output\n\
    \              mode)\n    \"\"\"\n\n    def __init__(self):\n        self._oc2ce\
    \ = Field(\"oc2ce\", 15, 1)\n        self._oc2m = Field(\"oc2m\", 12, 3)\n   \
    \     self._oc2pe = Field(\"oc2pe\", 11, 1)\n        self._oc2fe = Field(\"oc2fe\"\
    , 10, 1)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._oc1ce = Field(\"\
    oc1ce\", 7, 1)\n        self._oc1m = Field(\"oc1m\", 4, 3)\n        self._oc1pe\
    \ = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\", 2, 1)\n   \
    \     self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Output\"\
    , 0x40000400 + 0x18)\n\n    @property\n    def oc2ce(self) -> Field:\n       \
    \ \"\"\"\n        OC2CE\n\n        OC2CE\n        \"\"\"\n        return self._oc2ce\n\
    \n    @oc2ce.setter\n    def oc2ce(self, value: int) -> None:\n        self._oc2ce.value\
    \ = value\n\n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n   \
    \     OC2M\n\n        OC2M\n        \"\"\"\n        return self._oc2m\n\n    @oc2m.setter\n\
    \    def oc2m(self, value: int) -> None:\n        self._oc2m.value = value\n\n\
    \    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n        OC2PE\n\
    \n        OC2PE\n        \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n\
    \    def oc2pe(self, value: int) -> None:\n        self._oc2pe.value = value\n\
    \n    @property\n    def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\
    \n        OC2FE\n        \"\"\"\n        return self._oc2fe\n\n    @oc2fe.setter\n\
    \    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value = value\n\
    \n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n\
    \        CC2S\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n\
    \    def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def oc1ce(self) -> Field:\n        \"\"\"\n        OC1CE\n\
    \n        OC1CE\n        \"\"\"\n        return self._oc1ce\n\n    @oc1ce.setter\n\
    \    def oc1ce(self, value: int) -> None:\n        self._oc1ce.value = value\n\
    \n    @property\n    def oc1m(self) -> Field:\n        \"\"\"\n        OC1M\n\n\
    \        OC1M\n        \"\"\"\n        return self._oc1m\n\n    @oc1m.setter\n\
    \    def oc1m(self, value: int) -> None:\n        self._oc1m.value = value\n\n\
    \    @property\n    def oc1pe(self) -> Field:\n        \"\"\"\n        OC1PE\n\
    \n        OC1PE\n        \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n\
    \    def oc1pe(self, value: int) -> None:\n        self._oc1pe.value = value\n\
    \n    @property\n    def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\
    \n        OC1FE\n        \"\"\"\n        return self._oc1fe\n\n    @oc1fe.setter\n\
    \    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value = value\n\
    \n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n\
    \        CC1S\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n\
    \    def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\
    \nclass Ccmr1_inputRegister(Register):\n    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare\
    \ mode register 1 (input\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ic2f = Field(\"ic2f\", 12, 4)\n        self._ic2pcs = Field(\"\
    ic2pcs\", 10, 2)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f\
    \ = Field(\"ic1f\", 4, 4)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n    \
    \    self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\"\
    , 0x40000400 + 0x18)\n\n    @property\n    def ic2f(self) -> Field:\n        \"\
    \"\"\n        IC2F\n\n        Input capture 2 filter\n        \"\"\"\n       \
    \ return self._ic2f\n\n    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n\
    \        self._ic2f.value = value\n\n    @property\n    def ic2pcs(self) -> Field:\n\
    \        \"\"\"\n        IC2PCS\n\n        Input capture 2 prescaler\n       \
    \ \"\"\"\n        return self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self,\
    \ value: int) -> None:\n        self._ic2pcs.value = value\n\n    @property\n\
    \    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n        Capture/Compare\
    \ 2\n                  selection\n        \"\"\"\n        return self._cc2s\n\n\
    \    @cc2s.setter\n    def cc2s(self, value: int) -> None:\n        self._cc2s.value\
    \ = value\n\n    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n   \
    \     IC1F\n\n        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\
    \n    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class Ccmr2_outputRegister(Register):\n    \"\"\"\n    CCMR2_OUTPUT\n\n    capture/compare\
    \ mode register 2 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc4ce = Field(\"oc4ce\", 15, 1)\n        self._oc4m = Field(\"\
    oc4m\", 12, 3)\n        self._oc4pe = Field(\"oc4pe\", 11, 1)\n        self._oc4fe\
    \ = Field(\"oc4fe\", 10, 1)\n        self._cc4s = Field(\"cc4s\", 8, 2)\n    \
    \    self._oc3ce = Field(\"oc3ce\", 7, 1)\n        self._oc3m = Field(\"oc3m\"\
    , 4, 3)\n        self._oc3pe = Field(\"oc3pe\", 3, 1)\n        self._oc3fe = Field(\"\
    oc3fe\", 2, 1)\n        self._cc3s = Field(\"cc3s\", 0, 2)\n        super().__init__(\"\
    CCMR2_Output\", 0x40000400 + 0x1C)\n\n    @property\n    def oc4ce(self) -> Field:\n\
    \        \"\"\"\n        OC4CE\n\n        OC4CE\n        \"\"\"\n        return\
    \ self._oc4ce\n\n    @oc4ce.setter\n    def oc4ce(self, value: int) -> None:\n\
    \        self._oc4ce.value = value\n\n    @property\n    def oc4m(self) -> Field:\n\
    \        \"\"\"\n        OC4M\n\n        OC4M\n        \"\"\"\n        return\
    \ self._oc4m\n\n    @oc4m.setter\n    def oc4m(self, value: int) -> None:\n  \
    \      self._oc4m.value = value\n\n    @property\n    def oc4pe(self) -> Field:\n\
    \        \"\"\"\n        OC4PE\n\n        OC4PE\n        \"\"\"\n        return\
    \ self._oc4pe\n\n    @oc4pe.setter\n    def oc4pe(self, value: int) -> None:\n\
    \        self._oc4pe.value = value\n\n    @property\n    def oc4fe(self) -> Field:\n\
    \        \"\"\"\n        OC4FE\n\n        OC4FE\n        \"\"\"\n        return\
    \ self._oc4fe\n\n    @oc4fe.setter\n    def oc4fe(self, value: int) -> None:\n\
    \        self._oc4fe.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        CC4S\n        \"\"\"\n        return\
    \ self._cc4s\n\n    @cc4s.setter\n    def cc4s(self, value: int) -> None:\n  \
    \      self._cc4s.value = value\n\n    @property\n    def oc3ce(self) -> Field:\n\
    \        \"\"\"\n        OC3CE\n\n        OC3CE\n        \"\"\"\n        return\
    \ self._oc3ce\n\n    @oc3ce.setter\n    def oc3ce(self, value: int) -> None:\n\
    \        self._oc3ce.value = value\n\n    @property\n    def oc3m(self) -> Field:\n\
    \        \"\"\"\n        OC3M\n\n        OC3M\n        \"\"\"\n        return\
    \ self._oc3m\n\n    @oc3m.setter\n    def oc3m(self, value: int) -> None:\n  \
    \      self._oc3m.value = value\n\n    @property\n    def oc3pe(self) -> Field:\n\
    \        \"\"\"\n        OC3PE\n\n        OC3PE\n        \"\"\"\n        return\
    \ self._oc3pe\n\n    @oc3pe.setter\n    def oc3pe(self, value: int) -> None:\n\
    \        self._oc3pe.value = value\n\n    @property\n    def oc3fe(self) -> Field:\n\
    \        \"\"\"\n        OC3FE\n\n        OC3FE\n        \"\"\"\n        return\
    \ self._oc3fe\n\n    @oc3fe.setter\n    def oc3fe(self, value: int) -> None:\n\
    \        self._oc3fe.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        CC3S\n        \"\"\"\n        return\
    \ self._cc3s\n\n    @cc3s.setter\n    def cc3s(self, value: int) -> None:\n  \
    \      self._cc3s.value = value\n\n\nclass Ccmr2_inputRegister(Register):\n  \
    \  \"\"\"\n    CCMR2_INPUT\n\n    capture/compare mode register 2 (input\n   \
    \           mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic4f =\
    \ Field(\"ic4f\", 12, 4)\n        self._ic4psc = Field(\"ic4psc\", 10, 2)\n  \
    \      self._cc4s = Field(\"cc4s\", 8, 2)\n        self._ic3f = Field(\"ic3f\"\
    , 4, 4)\n        self._ic3psc = Field(\"ic3psc\", 2, 2)\n        self._cc3s =\
    \ Field(\"cc3s\", 0, 2)\n        super().__init__(\"CCMR2_Input\", 0x40000400\
    \ + 0x1C)\n\n    @property\n    def ic4f(self) -> Field:\n        \"\"\"\n   \
    \     IC4F\n\n        Input capture 4 filter\n        \"\"\"\n        return self._ic4f\n\
    \n    @ic4f.setter\n    def ic4f(self, value: int) -> None:\n        self._ic4f.value\
    \ = value\n\n    @property\n    def ic4psc(self) -> Field:\n        \"\"\"\n \
    \       IC4PSC\n\n        Input capture 4 prescaler\n        \"\"\"\n        return\
    \ self._ic4psc\n\n    @ic4psc.setter\n    def ic4psc(self, value: int) -> None:\n\
    \        self._ic4psc.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        Capture/Compare 4\n                 \
    \ selection\n        \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n \
    \   def cc4s(self, value: int) -> None:\n        self._cc4s.value = value\n\n\
    \    @property\n    def ic3f(self) -> Field:\n        \"\"\"\n        IC3F\n\n\
    \        Input capture 3 filter\n        \"\"\"\n        return self._ic3f\n\n\
    \    @ic3f.setter\n    def ic3f(self, value: int) -> None:\n        self._ic3f.value\
    \ = value\n\n    @property\n    def ic3psc(self) -> Field:\n        \"\"\"\n \
    \       IC3PSC\n\n        Input capture 3 prescaler\n        \"\"\"\n        return\
    \ self._ic3psc\n\n    @ic3psc.setter\n    def ic3psc(self, value: int) -> None:\n\
    \        self._ic3psc.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        Capture/compare 3\n                 \
    \ selection\n        \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n \
    \   def cc3s(self, value: int) -> None:\n        self._cc3s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc4np\
    \ = Field(\"cc4np\", 15, 1)\n        self._cc4p = Field(\"cc4p\", 13, 1)\n   \
    \     self._cc4e = Field(\"cc4e\", 12, 1)\n        self._cc3np = Field(\"cc3np\"\
    , 11, 1)\n        self._cc3p = Field(\"cc3p\", 9, 1)\n        self._cc3e = Field(\"\
    cc3e\", 8, 1)\n        self._cc2np = Field(\"cc2np\", 7, 1)\n        self._cc2p\
    \ = Field(\"cc2p\", 5, 1)\n        self._cc2e = Field(\"cc2e\", 4, 1)\n      \
    \  self._cc1np = Field(\"cc1np\", 3, 1)\n        self._cc1p = Field(\"cc1p\",\
    \ 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40000400 + 0x20)\n\n    @property\n    def cc4np(self) -> Field:\n \
    \       \"\"\"\n        CC4NP\n\n        Capture/Compare 4 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc4np\n\n    @cc4np.setter\n\
    \    def cc4np(self, value: int) -> None:\n        self._cc4np.value = value\n\
    \n    @property\n    def cc4p(self) -> Field:\n        \"\"\"\n        CC4P\n\n\
    \        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc4p\n\n    @cc4p.setter\n    def cc4p(self, value: int)\
    \ -> None:\n        self._cc4p.value = value\n\n    @property\n    def cc4e(self)\
    \ -> Field:\n        \"\"\"\n        CC4E\n\n        Capture/Compare 4 output\n\
    \                  enable\n        \"\"\"\n        return self._cc4e\n\n    @cc4e.setter\n\
    \    def cc4e(self, value: int) -> None:\n        self._cc4e.value = value\n\n\
    \    @property\n    def cc3np(self) -> Field:\n        \"\"\"\n        CC3NP\n\
    \n        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\
    \n        return self._cc3np\n\n    @cc3np.setter\n    def cc3np(self, value:\
    \ int) -> None:\n        self._cc3np.value = value\n\n    @property\n    def cc3p(self)\
    \ -> Field:\n        \"\"\"\n        CC3P\n\n        Capture/Compare 3 output\n\
    \                  Polarity\n        \"\"\"\n        return self._cc3p\n\n   \
    \ @cc3p.setter\n    def cc3p(self, value: int) -> None:\n        self._cc3p.value\
    \ = value\n\n    @property\n    def cc3e(self) -> Field:\n        \"\"\"\n   \
    \     CC3E\n\n        Capture/Compare 3 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc3e\n\n    @cc3e.setter\n    def cc3e(self,\
    \ value: int) -> None:\n        self._cc3e.value = value\n\n    @property\n  \
    \  def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\n        Capture/Compare\
    \ 2 output\n                  Polarity\n        \"\"\"\n        return self._cc2np\n\
    \n    @cc2np.setter\n    def cc2np(self, value: int) -> None:\n        self._cc2np.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n        Capture/Compare\
    \ 1 output\n                  Polarity\n        \"\"\"\n        return self._cc1p\n\
    \n    @cc1p.setter\n    def cc1p(self, value: int) -> None:\n        self._cc1p.value\
    \ = value\n\n    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n   \
    \     CC1E\n\n        Capture/Compare 1 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self,\
    \ value: int) -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt_h = Field(\"cnt_h\", 16, 16)\n        self._cnt_l = Field(\"\
    cnt_l\", 0, 16)\n        super().__init__(\"CNT\", 0x40000400 + 0x24)\n\n    @property\n\
    \    def cnt_h(self) -> Field:\n        \"\"\"\n        CNT_H\n\n        High\
    \ counter value\n        \"\"\"\n        return self._cnt_h\n\n    @cnt_h.setter\n\
    \    def cnt_h(self, value: int) -> None:\n        self._cnt_h.value = value\n\
    \n    @property\n    def cnt_l(self) -> Field:\n        \"\"\"\n        CNT_L\n\
    \n        Low counter value\n        \"\"\"\n        return self._cnt_l\n\n  \
    \  @cnt_l.setter\n    def cnt_l(self, value: int) -> None:\n        self._cnt_l.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40000400 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr_h = Field(\"arr_h\", 16, 16)\n        self._arr_l = Field(\"\
    arr_l\", 0, 16)\n        super().__init__(\"ARR\", 0x40000400 + 0x2C)\n\n    @property\n\
    \    def arr_h(self) -> Field:\n        \"\"\"\n        ARR_H\n\n        High\
    \ Auto-reload value\n        \"\"\"\n        return self._arr_h\n\n    @arr_h.setter\n\
    \    def arr_h(self, value: int) -> None:\n        self._arr_h.value = value\n\
    \n    @property\n    def arr_l(self) -> Field:\n        \"\"\"\n        ARR_L\n\
    \n        Low Auto-reload value\n        \"\"\"\n        return self._arr_l\n\n\
    \    @arr_l.setter\n    def arr_l(self, value: int) -> None:\n        self._arr_l.value\
    \ = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n    CCR1\n\n    capture/compare\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ccr1_h = Field(\"\
    ccr1_h\", 16, 16)\n        self._ccr1_l = Field(\"ccr1_l\", 0, 16)\n        super().__init__(\"\
    CCR1\", 0x40000400 + 0x34)\n\n    @property\n    def ccr1_h(self) -> Field:\n\
    \        \"\"\"\n        CCR1_H\n\n        High Capture/Compare 1\n          \
    \        value\n        \"\"\"\n        return self._ccr1_h\n\n    @ccr1_h.setter\n\
    \    def ccr1_h(self, value: int) -> None:\n        self._ccr1_h.value = value\n\
    \n    @property\n    def ccr1_l(self) -> Field:\n        \"\"\"\n        CCR1_L\n\
    \n        Low Capture/Compare 1\n                  value\n        \"\"\"\n   \
    \     return self._ccr1_l\n\n    @ccr1_l.setter\n    def ccr1_l(self, value: int)\
    \ -> None:\n        self._ccr1_l.value = value\n\n\nclass Ccr2Register(Register):\n\
    \    \"\"\"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ccr2_h = Field(\"ccr2_h\", 16, 16)\n        self._ccr2_l\
    \ = Field(\"ccr2_l\", 0, 16)\n        super().__init__(\"CCR2\", 0x40000400 +\
    \ 0x38)\n\n    @property\n    def ccr2_h(self) -> Field:\n        \"\"\"\n   \
    \     CCR2_H\n\n        High Capture/Compare 2\n                  value\n    \
    \    \"\"\"\n        return self._ccr2_h\n\n    @ccr2_h.setter\n    def ccr2_h(self,\
    \ value: int) -> None:\n        self._ccr2_h.value = value\n\n    @property\n\
    \    def ccr2_l(self) -> Field:\n        \"\"\"\n        CCR2_L\n\n        Low\
    \ Capture/Compare 2\n                  value\n        \"\"\"\n        return self._ccr2_l\n\
    \n    @ccr2_l.setter\n    def ccr2_l(self, value: int) -> None:\n        self._ccr2_l.value\
    \ = value\n\n\nclass Ccr3Register(Register):\n    \"\"\"\n    CCR3\n\n    capture/compare\
    \ register 3\n    \"\"\"\n\n    def __init__(self):\n        self._ccr3_h = Field(\"\
    ccr3_h\", 16, 16)\n        self._ccr3_l = Field(\"ccr3_l\", 0, 16)\n        super().__init__(\"\
    CCR3\", 0x40000400 + 0x3C)\n\n    @property\n    def ccr3_h(self) -> Field:\n\
    \        \"\"\"\n        CCR3_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr3_h\n\n    @ccr3_h.setter\n    def ccr3_h(self,\
    \ value: int) -> None:\n        self._ccr3_h.value = value\n\n    @property\n\
    \    def ccr3_l(self) -> Field:\n        \"\"\"\n        CCR3_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr3_l\n\n    @ccr3_l.setter\n\
    \    def ccr3_l(self, value: int) -> None:\n        self._ccr3_l.value = value\n\
    \n\nclass Ccr4Register(Register):\n    \"\"\"\n    CCR4\n\n    capture/compare\
    \ register 4\n    \"\"\"\n\n    def __init__(self):\n        self._ccr4_h = Field(\"\
    ccr4_h\", 16, 16)\n        self._ccr4_l = Field(\"ccr4_l\", 0, 16)\n        super().__init__(\"\
    CCR4\", 0x40000400 + 0x40)\n\n    @property\n    def ccr4_h(self) -> Field:\n\
    \        \"\"\"\n        CCR4_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr4_h\n\n    @ccr4_h.setter\n    def ccr4_h(self,\
    \ value: int) -> None:\n        self._ccr4_h.value = value\n\n    @property\n\
    \    def ccr4_l(self) -> Field:\n        \"\"\"\n        CCR4_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr4_l\n\n    @ccr4_l.setter\n\
    \    def ccr4_l(self, value: int) -> None:\n        self._ccr4_l.value = value\n\
    \n\nclass DcrRegister(Register):\n    \"\"\"\n    DCR\n\n    DMA control register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dbl = Field(\"dbl\", 8,\
    \ 5)\n        self._dba = Field(\"dba\", 0, 5)\n        super().__init__(\"DCR\"\
    , 0x40000400 + 0x48)\n\n    @property\n    def dbl(self) -> Field:\n        \"\
    \"\"\n        DBL\n\n        DMA burst length\n        \"\"\"\n        return\
    \ self._dbl\n\n    @dbl.setter\n    def dbl(self, value: int) -> None:\n     \
    \   self._dbl.value = value\n\n    @property\n    def dba(self) -> Field:\n  \
    \      \"\"\"\n        DBA\n\n        DMA base address\n        \"\"\"\n     \
    \   return self._dba\n\n    @dba.setter\n    def dba(self, value: int) -> None:\n\
    \        self._dba.value = value\n\n\nclass DmarRegister(Register):\n    \"\"\"\
    \n    DMAR\n\n    DMA address for full transfer\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dmab = Field(\"dmab\", 0, 16)\n        super().__init__(\"DMAR\"\
    , 0x40000400 + 0x4C)\n\n    @property\n    def dmab(self) -> Field:\n        \"\
    \"\"\n        DMAB\n\n        DMA register for burst\n                  accesses\n\
    \        \"\"\"\n        return self._dmab\n\n    @dmab.setter\n    def dmab(self,\
    \ value: int) -> None:\n        self._dmab.value = value\n\n\nclass Tim3(Peripheral):\n\
    \    \"\"\"\n    TIM3\n\n    General purpose timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._cr2 = Cr2Register()\n      \
    \  self._smcr = SmcrRegister()\n        self._dier = DierRegister()\n        self._sr\
    \ = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccmr2_output = Ccmr2_outputRegister()\n        self._ccmr2_input\
    \ = Ccmr2_inputRegister()\n        self._ccer = CcerRegister()\n        self._cnt\
    \ = CntRegister()\n        self._psc = PscRegister()\n        self._arr = ArrRegister()\n\
    \        self._ccr1 = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n  \
    \      self._ccr3 = Ccr3Register()\n        self._ccr4 = Ccr4Register()\n    \
    \    self._dcr = DcrRegister()\n        self._dmar = DmarRegister()\n        super().__init__(\"\
    tim3\", 0x40000400)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def smcr(self)\
    \ -> SmcrRegister:\n        return self._smcr\n\n    @smcr.setter\n    def smcr(self,\
    \ value: int) -> None:\n        self._smcr.value = value\n\n    @property\n  \
    \  def dier(self) -> DierRegister:\n        return self._dier\n\n    @dier.setter\n\
    \    def dier(self, value: int) -> None:\n        self._dier.value = value\n\n\
    \    @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\n \
    \   @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value\
    \ = value\n\n    @property\n    def egr(self) -> EgrRegister:\n        return\
    \ self._egr\n\n    @egr.setter\n    def egr(self, value: int) -> None:\n     \
    \   self._egr.value = value\n\n    @property\n    def ccmr1_output(self) -> Ccmr1_outputRegister:\n\
    \        return self._ccmr1_output\n\n    @ccmr1_output.setter\n    def ccmr1_output(self,\
    \ value: int) -> None:\n        self._ccmr1_output.value = value\n\n    @property\n\
    \    def ccmr1_input(self) -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\
    \n    @ccmr1_input.setter\n    def ccmr1_input(self, value: int) -> None:\n  \
    \      self._ccmr1_input.value = value\n\n    @property\n    def ccmr2_output(self)\
    \ -> Ccmr2_outputRegister:\n        return self._ccmr2_output\n\n    @ccmr2_output.setter\n\
    \    def ccmr2_output(self, value: int) -> None:\n        self._ccmr2_output.value\
    \ = value\n\n    @property\n    def ccmr2_input(self) -> Ccmr2_inputRegister:\n\
    \        return self._ccmr2_input\n\n    @ccmr2_input.setter\n    def ccmr2_input(self,\
    \ value: int) -> None:\n        self._ccmr2_input.value = value\n\n    @property\n\
    \    def ccer(self) -> CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n\
    \    def ccer(self, value: int) -> None:\n        self._ccer.value = value\n\n\
    \    @property\n    def cnt(self) -> CntRegister:\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n    @property\n    def psc(self) -> PscRegister:\n        return\
    \ self._psc\n\n    @psc.setter\n    def psc(self, value: int) -> None:\n     \
    \   self._psc.value = value\n\n    @property\n    def arr(self) -> ArrRegister:\n\
    \        return self._arr\n\n    @arr.setter\n    def arr(self, value: int) ->\
    \ None:\n        self._arr.value = value\n\n    @property\n    def ccr1(self)\
    \ -> Ccr1Register:\n        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self,\
    \ value: int) -> None:\n        self._ccr1.value = value\n\n    @property\n  \
    \  def ccr2(self) -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n\
    \    def ccr2(self, value: int) -> None:\n        self._ccr2.value = value\n\n\
    \    @property\n    def ccr3(self) -> Ccr3Register:\n        return self._ccr3\n\
    \n    @ccr3.setter\n    def ccr3(self, value: int) -> None:\n        self._ccr3.value\
    \ = value\n\n    @property\n    def ccr4(self) -> Ccr4Register:\n        return\
    \ self._ccr4\n\n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n  \
    \      self._ccr4.value = value\n\n    @property\n    def dcr(self) -> DcrRegister:\n\
    \        return self._dcr\n\n    @dcr.setter\n    def dcr(self, value: int) ->\
    \ None:\n        self._dcr.value = value\n\n    @property\n    def dmar(self)\
    \ -> DmarRegister:\n        return self._dmar\n\n    @dmar.setter\n    def dmar(self,\
    \ value: int) -> None:\n        self._dmar.value = value\n"
  name: TIM3
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._cms =\
    \ Field(\"cms\", 5, 2)\n        self._dir = Field(\"dir\", 4, 1)\n        self._opm\
    \ = Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40000800 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def cms(self)\
    \ -> Field:\n        \"\"\"\n        CMS\n\n        Center-aligned mode\n    \
    \              selection\n        \"\"\"\n        return self._cms\n\n    @cms.setter\n\
    \    def cms(self, value: int) -> None:\n        self._cms.value = value\n\n \
    \   @property\n    def dir(self) -> Field:\n        \"\"\"\n        DIR\n\n  \
    \      Direction\n        \"\"\"\n        return self._dir\n\n    @dir.setter\n\
    \    def dir(self, value: int) -> None:\n        self._dir.value = value\n\n \
    \   @property\n    def opm(self) -> Field:\n        \"\"\"\n        OPM\n\n  \
    \      One-pulse mode\n        \"\"\"\n        return self._opm\n\n    @opm.setter\n\
    \    def opm(self, value: int) -> None:\n        self._opm.value = value\n\n \
    \   @property\n    def urs(self) -> Field:\n        \"\"\"\n        URS\n\n  \
    \      Update request source\n        \"\"\"\n        return self._urs\n\n   \
    \ @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._ti1s = Field(\"\
    ti1s\", 7, 1)\n        self._mms = Field(\"mms\", 4, 3)\n        self._ccds =\
    \ Field(\"ccds\", 3, 1)\n        super().__init__(\"CR2\", 0x40000800 + 0x4)\n\
    \n    @property\n    def ti1s(self) -> Field:\n        \"\"\"\n        TI1S\n\n\
    \        TI1 selection\n        \"\"\"\n        return self._ti1s\n\n    @ti1s.setter\n\
    \    def ti1s(self, value: int) -> None:\n        self._ti1s.value = value\n\n\
    \    @property\n    def mms(self) -> Field:\n        \"\"\"\n        MMS\n\n \
    \       Master mode selection\n        \"\"\"\n        return self._mms\n\n  \
    \  @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n    @property\n    def ccds(self) -> Field:\n        \"\"\"\n   \
    \     CCDS\n\n        Capture/compare DMA\n                  selection\n     \
    \   \"\"\"\n        return self._ccds\n\n    @ccds.setter\n    def ccds(self,\
    \ value: int) -> None:\n        self._ccds.value = value\n\n\nclass SmcrRegister(Register):\n\
    \    \"\"\"\n    SMCR\n\n    slave mode control register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._etp = Field(\"etp\", 15, 1)\n        self._ece\
    \ = Field(\"ece\", 14, 1)\n        self._etps = Field(\"etps\", 12, 2)\n     \
    \   self._etf = Field(\"etf\", 8, 4)\n        self._msm = Field(\"msm\", 7, 1)\n\
    \        self._ts = Field(\"ts\", 4, 3)\n        self._sms = Field(\"sms\", 0,\
    \ 3)\n        super().__init__(\"SMCR\", 0x40000800 + 0x8)\n\n    @property\n\
    \    def etp(self) -> Field:\n        \"\"\"\n        ETP\n\n        External\
    \ trigger polarity\n        \"\"\"\n        return self._etp\n\n    @etp.setter\n\
    \    def etp(self, value: int) -> None:\n        self._etp.value = value\n\n \
    \   @property\n    def ece(self) -> Field:\n        \"\"\"\n        ECE\n\n  \
    \      External clock enable\n        \"\"\"\n        return self._ece\n\n   \
    \ @ece.setter\n    def ece(self, value: int) -> None:\n        self._ece.value\
    \ = value\n\n    @property\n    def etps(self) -> Field:\n        \"\"\"\n   \
    \     ETPS\n\n        External trigger prescaler\n        \"\"\"\n        return\
    \ self._etps\n\n    @etps.setter\n    def etps(self, value: int) -> None:\n  \
    \      self._etps.value = value\n\n    @property\n    def etf(self) -> Field:\n\
    \        \"\"\"\n        ETF\n\n        External trigger filter\n        \"\"\"\
    \n        return self._etf\n\n    @etf.setter\n    def etf(self, value: int) ->\
    \ None:\n        self._etf.value = value\n\n    @property\n    def msm(self) ->\
    \ Field:\n        \"\"\"\n        MSM\n\n        Master/Slave mode\n        \"\
    \"\"\n        return self._msm\n\n    @msm.setter\n    def msm(self, value: int)\
    \ -> None:\n        self._msm.value = value\n\n    @property\n    def ts(self)\
    \ -> Field:\n        \"\"\"\n        TS\n\n        Trigger selection\n       \
    \ \"\"\"\n        return self._ts\n\n    @ts.setter\n    def ts(self, value: int)\
    \ -> None:\n        self._ts.value = value\n\n    @property\n    def sms(self)\
    \ -> Field:\n        \"\"\"\n        SMS\n\n        Slave mode selection\n   \
    \     \"\"\"\n        return self._sms\n\n    @sms.setter\n    def sms(self, value:\
    \ int) -> None:\n        self._sms.value = value\n\n\nclass DierRegister(Register):\n\
    \    \"\"\"\n    DIER\n\n    DMA/Interrupt enable register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._tde = Field(\"tde\", 14, 1)\n        self._cc4de\
    \ = Field(\"cc4de\", 12, 1)\n        self._cc3de = Field(\"cc3de\", 11, 1)\n \
    \       self._cc2de = Field(\"cc2de\", 10, 1)\n        self._cc1de = Field(\"\
    cc1de\", 9, 1)\n        self._ude = Field(\"ude\", 8, 1)\n        self._tie =\
    \ Field(\"tie\", 6, 1)\n        self._cc4ie = Field(\"cc4ie\", 4, 1)\n       \
    \ self._cc3ie = Field(\"cc3ie\", 3, 1)\n        self._cc2ie = Field(\"cc2ie\"\
    , 2, 1)\n        self._cc1ie = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"\
    uie\", 0, 1)\n        super().__init__(\"DIER\", 0x40000800 + 0xC)\n\n    @property\n\
    \    def tde(self) -> Field:\n        \"\"\"\n        TDE\n\n        Trigger DMA\
    \ request enable\n        \"\"\"\n        return self._tde\n\n    @tde.setter\n\
    \    def tde(self, value: int) -> None:\n        self._tde.value = value\n\n \
    \   @property\n    def cc4de(self) -> Field:\n        \"\"\"\n        CC4DE\n\n\
    \        Capture/Compare 4 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc4de\n\n    @cc4de.setter\n    def cc4de(self, value:\
    \ int) -> None:\n        self._cc4de.value = value\n\n    @property\n    def cc3de(self)\
    \ -> Field:\n        \"\"\"\n        CC3DE\n\n        Capture/Compare 3 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc3de\n\n    @cc3de.setter\n\
    \    def cc3de(self, value: int) -> None:\n        self._cc3de.value = value\n\
    \n    @property\n    def cc2de(self) -> Field:\n        \"\"\"\n        CC2DE\n\
    \n        Capture/Compare 2 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc2de\n\n    @cc2de.setter\n    def cc2de(self, value:\
    \ int) -> None:\n        self._cc2de.value = value\n\n    @property\n    def cc1de(self)\
    \ -> Field:\n        \"\"\"\n        CC1DE\n\n        Capture/Compare 1 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc1de\n\n    @cc1de.setter\n\
    \    def cc1de(self, value: int) -> None:\n        self._cc1de.value = value\n\
    \n    @property\n    def ude(self) -> Field:\n        \"\"\"\n        UDE\n\n\
    \        Update DMA request enable\n        \"\"\"\n        return self._ude\n\
    \n    @ude.setter\n    def ude(self, value: int) -> None:\n        self._ude.value\
    \ = value\n\n    @property\n    def tie(self) -> Field:\n        \"\"\"\n    \
    \    TIE\n\n        Trigger interrupt enable\n        \"\"\"\n        return self._tie\n\
    \n    @tie.setter\n    def tie(self, value: int) -> None:\n        self._tie.value\
    \ = value\n\n    @property\n    def cc4ie(self) -> Field:\n        \"\"\"\n  \
    \      CC4IE\n\n        Capture/Compare 4 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc4ie\n\n    @cc4ie.setter\n    def cc4ie(self,\
    \ value: int) -> None:\n        self._cc4ie.value = value\n\n    @property\n \
    \   def cc3ie(self) -> Field:\n        \"\"\"\n        CC3IE\n\n        Capture/Compare\
    \ 3 interrupt\n                  enable\n        \"\"\"\n        return self._cc3ie\n\
    \n    @cc3ie.setter\n    def cc3ie(self, value: int) -> None:\n        self._cc3ie.value\
    \ = value\n\n    @property\n    def cc2ie(self) -> Field:\n        \"\"\"\n  \
    \      CC2IE\n\n        Capture/Compare 2 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc2ie\n\n    @cc2ie.setter\n    def cc2ie(self,\
    \ value: int) -> None:\n        self._cc2ie.value = value\n\n    @property\n \
    \   def cc1ie(self) -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare\
    \ 1 interrupt\n                  enable\n        \"\"\"\n        return self._cc1ie\n\
    \n    @cc1ie.setter\n    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value\
    \ = value\n\n    @property\n    def uie(self) -> Field:\n        \"\"\"\n    \
    \    UIE\n\n        Update interrupt enable\n        \"\"\"\n        return self._uie\n\
    \n    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc4of = Field(\"cc4of\"\
    , 12, 1)\n        self._cc3of = Field(\"cc3of\", 11, 1)\n        self._cc2of =\
    \ Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"cc1of\", 9, 1)\n    \
    \    self._tif = Field(\"tif\", 6, 1)\n        self._cc4if = Field(\"cc4if\",\
    \ 4, 1)\n        self._cc3if = Field(\"cc3if\", 3, 1)\n        self._cc2if = Field(\"\
    cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n        self._uif\
    \ = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40000800 + 0x10)\n\
    \n    @property\n    def cc4of(self) -> Field:\n        \"\"\"\n        CC4OF\n\
    \n        Capture/Compare 4 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc4of\n\n    @cc4of.setter\n    def cc4of(self, value:\
    \ int) -> None:\n        self._cc4of.value = value\n\n    @property\n    def cc3of(self)\
    \ -> Field:\n        \"\"\"\n        CC3OF\n\n        Capture/Compare 3 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc3of\n\n    @cc3of.setter\n\
    \    def cc3of(self, value: int) -> None:\n        self._cc3of.value = value\n\
    \n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n        CC2OF\n\
    \n        Capture/compare 2 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self, value:\
    \ int) -> None:\n        self._cc2of.value = value\n\n    @property\n    def cc1of(self)\
    \ -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare 1 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc1of\n\n    @cc1of.setter\n\
    \    def cc1of(self, value: int) -> None:\n        self._cc1of.value = value\n\
    \n    @property\n    def tif(self) -> Field:\n        \"\"\"\n        TIF\n\n\
    \        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\n\
    \    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def cc4if(self) -> Field:\n        \"\"\"\n  \
    \      CC4IF\n\n        Capture/Compare 4 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc4if\n\n    @cc4if.setter\n    def cc4if(self,\
    \ value: int) -> None:\n        self._cc4if.value = value\n\n    @property\n \
    \   def cc3if(self) -> Field:\n        \"\"\"\n        CC3IF\n\n        Capture/Compare\
    \ 3 interrupt\n                  flag\n        \"\"\"\n        return self._cc3if\n\
    \n    @cc3if.setter\n    def cc3if(self, value: int) -> None:\n        self._cc3if.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._tg\
    \ = Field(\"tg\", 6, 1)\n        self._cc4g = Field(\"cc4g\", 4, 1)\n        self._cc3g\
    \ = Field(\"cc3g\", 3, 1)\n        self._cc2g = Field(\"cc2g\", 2, 1)\n      \
    \  self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\", 0, 1)\n\
    \        super().__init__(\"EGR\", 0x40000800 + 0x14)\n\n    @property\n    def\
    \ tg(self) -> Field:\n        \"\"\"\n        TG\n\n        Trigger generation\n\
    \        \"\"\"\n        return self._tg\n\n    @tg.setter\n    def tg(self, value:\
    \ int) -> None:\n        self._tg.value = value\n\n    @property\n    def cc4g(self)\
    \ -> Field:\n        \"\"\"\n        CC4G\n\n        Capture/compare 4\n     \
    \             generation\n        \"\"\"\n        return self._cc4g\n\n    @cc4g.setter\n\
    \    def cc4g(self, value: int) -> None:\n        self._cc4g.value = value\n\n\
    \    @property\n    def cc3g(self) -> Field:\n        \"\"\"\n        CC3G\n\n\
    \        Capture/compare 3\n                  generation\n        \"\"\"\n   \
    \     return self._cc3g\n\n    @cc3g.setter\n    def cc3g(self, value: int) ->\
    \ None:\n        self._cc3g.value = value\n\n    @property\n    def cc2g(self)\
    \ -> Field:\n        \"\"\"\n        CC2G\n\n        Capture/compare 2\n     \
    \             generation\n        \"\"\"\n        return self._cc2g\n\n    @cc2g.setter\n\
    \    def cc2g(self, value: int) -> None:\n        self._cc2g.value = value\n\n\
    \    @property\n    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n\
    \        Capture/compare 1\n                  generation\n        \"\"\"\n   \
    \     return self._cc1g\n\n    @cc1g.setter\n    def cc1g(self, value: int) ->\
    \ None:\n        self._cc1g.value = value\n\n    @property\n    def ug(self) ->\
    \ Field:\n        \"\"\"\n        UG\n\n        Update generation\n        \"\"\
    \"\n        return self._ug\n\n    @ug.setter\n    def ug(self, value: int) ->\
    \ None:\n        self._ug.value = value\n\n\nclass Ccmr1_outputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare mode register 1 (output\n\
    \              mode)\n    \"\"\"\n\n    def __init__(self):\n        self._oc2ce\
    \ = Field(\"oc2ce\", 15, 1)\n        self._oc2m = Field(\"oc2m\", 12, 3)\n   \
    \     self._oc2pe = Field(\"oc2pe\", 11, 1)\n        self._oc2fe = Field(\"oc2fe\"\
    , 10, 1)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._oc1ce = Field(\"\
    oc1ce\", 7, 1)\n        self._oc1m = Field(\"oc1m\", 4, 3)\n        self._oc1pe\
    \ = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\", 2, 1)\n   \
    \     self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Output\"\
    , 0x40000800 + 0x18)\n\n    @property\n    def oc2ce(self) -> Field:\n       \
    \ \"\"\"\n        OC2CE\n\n        OC2CE\n        \"\"\"\n        return self._oc2ce\n\
    \n    @oc2ce.setter\n    def oc2ce(self, value: int) -> None:\n        self._oc2ce.value\
    \ = value\n\n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n   \
    \     OC2M\n\n        OC2M\n        \"\"\"\n        return self._oc2m\n\n    @oc2m.setter\n\
    \    def oc2m(self, value: int) -> None:\n        self._oc2m.value = value\n\n\
    \    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n        OC2PE\n\
    \n        OC2PE\n        \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n\
    \    def oc2pe(self, value: int) -> None:\n        self._oc2pe.value = value\n\
    \n    @property\n    def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\
    \n        OC2FE\n        \"\"\"\n        return self._oc2fe\n\n    @oc2fe.setter\n\
    \    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value = value\n\
    \n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n\
    \        CC2S\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n\
    \    def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def oc1ce(self) -> Field:\n        \"\"\"\n        OC1CE\n\
    \n        OC1CE\n        \"\"\"\n        return self._oc1ce\n\n    @oc1ce.setter\n\
    \    def oc1ce(self, value: int) -> None:\n        self._oc1ce.value = value\n\
    \n    @property\n    def oc1m(self) -> Field:\n        \"\"\"\n        OC1M\n\n\
    \        OC1M\n        \"\"\"\n        return self._oc1m\n\n    @oc1m.setter\n\
    \    def oc1m(self, value: int) -> None:\n        self._oc1m.value = value\n\n\
    \    @property\n    def oc1pe(self) -> Field:\n        \"\"\"\n        OC1PE\n\
    \n        OC1PE\n        \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n\
    \    def oc1pe(self, value: int) -> None:\n        self._oc1pe.value = value\n\
    \n    @property\n    def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\
    \n        OC1FE\n        \"\"\"\n        return self._oc1fe\n\n    @oc1fe.setter\n\
    \    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value = value\n\
    \n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n\
    \        CC1S\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n\
    \    def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\
    \nclass Ccmr1_inputRegister(Register):\n    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare\
    \ mode register 1 (input\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ic2f = Field(\"ic2f\", 12, 4)\n        self._ic2pcs = Field(\"\
    ic2pcs\", 10, 2)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f\
    \ = Field(\"ic1f\", 4, 4)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n    \
    \    self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\"\
    , 0x40000800 + 0x18)\n\n    @property\n    def ic2f(self) -> Field:\n        \"\
    \"\"\n        IC2F\n\n        Input capture 2 filter\n        \"\"\"\n       \
    \ return self._ic2f\n\n    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n\
    \        self._ic2f.value = value\n\n    @property\n    def ic2pcs(self) -> Field:\n\
    \        \"\"\"\n        IC2PCS\n\n        Input capture 2 prescaler\n       \
    \ \"\"\"\n        return self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self,\
    \ value: int) -> None:\n        self._ic2pcs.value = value\n\n    @property\n\
    \    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n        Capture/Compare\
    \ 2\n                  selection\n        \"\"\"\n        return self._cc2s\n\n\
    \    @cc2s.setter\n    def cc2s(self, value: int) -> None:\n        self._cc2s.value\
    \ = value\n\n    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n   \
    \     IC1F\n\n        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\
    \n    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class Ccmr2_outputRegister(Register):\n    \"\"\"\n    CCMR2_OUTPUT\n\n    capture/compare\
    \ mode register 2 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc4ce = Field(\"oc4ce\", 15, 1)\n        self._oc4m = Field(\"\
    oc4m\", 12, 3)\n        self._oc4pe = Field(\"oc4pe\", 11, 1)\n        self._oc4fe\
    \ = Field(\"oc4fe\", 10, 1)\n        self._cc4s = Field(\"cc4s\", 8, 2)\n    \
    \    self._oc3ce = Field(\"oc3ce\", 7, 1)\n        self._oc3m = Field(\"oc3m\"\
    , 4, 3)\n        self._oc3pe = Field(\"oc3pe\", 3, 1)\n        self._oc3fe = Field(\"\
    oc3fe\", 2, 1)\n        self._cc3s = Field(\"cc3s\", 0, 2)\n        super().__init__(\"\
    CCMR2_Output\", 0x40000800 + 0x1C)\n\n    @property\n    def oc4ce(self) -> Field:\n\
    \        \"\"\"\n        OC4CE\n\n        OC4CE\n        \"\"\"\n        return\
    \ self._oc4ce\n\n    @oc4ce.setter\n    def oc4ce(self, value: int) -> None:\n\
    \        self._oc4ce.value = value\n\n    @property\n    def oc4m(self) -> Field:\n\
    \        \"\"\"\n        OC4M\n\n        OC4M\n        \"\"\"\n        return\
    \ self._oc4m\n\n    @oc4m.setter\n    def oc4m(self, value: int) -> None:\n  \
    \      self._oc4m.value = value\n\n    @property\n    def oc4pe(self) -> Field:\n\
    \        \"\"\"\n        OC4PE\n\n        OC4PE\n        \"\"\"\n        return\
    \ self._oc4pe\n\n    @oc4pe.setter\n    def oc4pe(self, value: int) -> None:\n\
    \        self._oc4pe.value = value\n\n    @property\n    def oc4fe(self) -> Field:\n\
    \        \"\"\"\n        OC4FE\n\n        OC4FE\n        \"\"\"\n        return\
    \ self._oc4fe\n\n    @oc4fe.setter\n    def oc4fe(self, value: int) -> None:\n\
    \        self._oc4fe.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        CC4S\n        \"\"\"\n        return\
    \ self._cc4s\n\n    @cc4s.setter\n    def cc4s(self, value: int) -> None:\n  \
    \      self._cc4s.value = value\n\n    @property\n    def oc3ce(self) -> Field:\n\
    \        \"\"\"\n        OC3CE\n\n        OC3CE\n        \"\"\"\n        return\
    \ self._oc3ce\n\n    @oc3ce.setter\n    def oc3ce(self, value: int) -> None:\n\
    \        self._oc3ce.value = value\n\n    @property\n    def oc3m(self) -> Field:\n\
    \        \"\"\"\n        OC3M\n\n        OC3M\n        \"\"\"\n        return\
    \ self._oc3m\n\n    @oc3m.setter\n    def oc3m(self, value: int) -> None:\n  \
    \      self._oc3m.value = value\n\n    @property\n    def oc3pe(self) -> Field:\n\
    \        \"\"\"\n        OC3PE\n\n        OC3PE\n        \"\"\"\n        return\
    \ self._oc3pe\n\n    @oc3pe.setter\n    def oc3pe(self, value: int) -> None:\n\
    \        self._oc3pe.value = value\n\n    @property\n    def oc3fe(self) -> Field:\n\
    \        \"\"\"\n        OC3FE\n\n        OC3FE\n        \"\"\"\n        return\
    \ self._oc3fe\n\n    @oc3fe.setter\n    def oc3fe(self, value: int) -> None:\n\
    \        self._oc3fe.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        CC3S\n        \"\"\"\n        return\
    \ self._cc3s\n\n    @cc3s.setter\n    def cc3s(self, value: int) -> None:\n  \
    \      self._cc3s.value = value\n\n\nclass Ccmr2_inputRegister(Register):\n  \
    \  \"\"\"\n    CCMR2_INPUT\n\n    capture/compare mode register 2 (input\n   \
    \           mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic4f =\
    \ Field(\"ic4f\", 12, 4)\n        self._ic4psc = Field(\"ic4psc\", 10, 2)\n  \
    \      self._cc4s = Field(\"cc4s\", 8, 2)\n        self._ic3f = Field(\"ic3f\"\
    , 4, 4)\n        self._ic3psc = Field(\"ic3psc\", 2, 2)\n        self._cc3s =\
    \ Field(\"cc3s\", 0, 2)\n        super().__init__(\"CCMR2_Input\", 0x40000800\
    \ + 0x1C)\n\n    @property\n    def ic4f(self) -> Field:\n        \"\"\"\n   \
    \     IC4F\n\n        Input capture 4 filter\n        \"\"\"\n        return self._ic4f\n\
    \n    @ic4f.setter\n    def ic4f(self, value: int) -> None:\n        self._ic4f.value\
    \ = value\n\n    @property\n    def ic4psc(self) -> Field:\n        \"\"\"\n \
    \       IC4PSC\n\n        Input capture 4 prescaler\n        \"\"\"\n        return\
    \ self._ic4psc\n\n    @ic4psc.setter\n    def ic4psc(self, value: int) -> None:\n\
    \        self._ic4psc.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        Capture/Compare 4\n                 \
    \ selection\n        \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n \
    \   def cc4s(self, value: int) -> None:\n        self._cc4s.value = value\n\n\
    \    @property\n    def ic3f(self) -> Field:\n        \"\"\"\n        IC3F\n\n\
    \        Input capture 3 filter\n        \"\"\"\n        return self._ic3f\n\n\
    \    @ic3f.setter\n    def ic3f(self, value: int) -> None:\n        self._ic3f.value\
    \ = value\n\n    @property\n    def ic3psc(self) -> Field:\n        \"\"\"\n \
    \       IC3PSC\n\n        Input capture 3 prescaler\n        \"\"\"\n        return\
    \ self._ic3psc\n\n    @ic3psc.setter\n    def ic3psc(self, value: int) -> None:\n\
    \        self._ic3psc.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        Capture/compare 3\n                 \
    \ selection\n        \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n \
    \   def cc3s(self, value: int) -> None:\n        self._cc3s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc4np\
    \ = Field(\"cc4np\", 15, 1)\n        self._cc4p = Field(\"cc4p\", 13, 1)\n   \
    \     self._cc4e = Field(\"cc4e\", 12, 1)\n        self._cc3np = Field(\"cc3np\"\
    , 11, 1)\n        self._cc3p = Field(\"cc3p\", 9, 1)\n        self._cc3e = Field(\"\
    cc3e\", 8, 1)\n        self._cc2np = Field(\"cc2np\", 7, 1)\n        self._cc2p\
    \ = Field(\"cc2p\", 5, 1)\n        self._cc2e = Field(\"cc2e\", 4, 1)\n      \
    \  self._cc1np = Field(\"cc1np\", 3, 1)\n        self._cc1p = Field(\"cc1p\",\
    \ 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40000800 + 0x20)\n\n    @property\n    def cc4np(self) -> Field:\n \
    \       \"\"\"\n        CC4NP\n\n        Capture/Compare 4 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc4np\n\n    @cc4np.setter\n\
    \    def cc4np(self, value: int) -> None:\n        self._cc4np.value = value\n\
    \n    @property\n    def cc4p(self) -> Field:\n        \"\"\"\n        CC4P\n\n\
    \        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc4p\n\n    @cc4p.setter\n    def cc4p(self, value: int)\
    \ -> None:\n        self._cc4p.value = value\n\n    @property\n    def cc4e(self)\
    \ -> Field:\n        \"\"\"\n        CC4E\n\n        Capture/Compare 4 output\n\
    \                  enable\n        \"\"\"\n        return self._cc4e\n\n    @cc4e.setter\n\
    \    def cc4e(self, value: int) -> None:\n        self._cc4e.value = value\n\n\
    \    @property\n    def cc3np(self) -> Field:\n        \"\"\"\n        CC3NP\n\
    \n        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\
    \n        return self._cc3np\n\n    @cc3np.setter\n    def cc3np(self, value:\
    \ int) -> None:\n        self._cc3np.value = value\n\n    @property\n    def cc3p(self)\
    \ -> Field:\n        \"\"\"\n        CC3P\n\n        Capture/Compare 3 output\n\
    \                  Polarity\n        \"\"\"\n        return self._cc3p\n\n   \
    \ @cc3p.setter\n    def cc3p(self, value: int) -> None:\n        self._cc3p.value\
    \ = value\n\n    @property\n    def cc3e(self) -> Field:\n        \"\"\"\n   \
    \     CC3E\n\n        Capture/Compare 3 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc3e\n\n    @cc3e.setter\n    def cc3e(self,\
    \ value: int) -> None:\n        self._cc3e.value = value\n\n    @property\n  \
    \  def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\n        Capture/Compare\
    \ 2 output\n                  Polarity\n        \"\"\"\n        return self._cc2np\n\
    \n    @cc2np.setter\n    def cc2np(self, value: int) -> None:\n        self._cc2np.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n        Capture/Compare\
    \ 1 output\n                  Polarity\n        \"\"\"\n        return self._cc1p\n\
    \n    @cc1p.setter\n    def cc1p(self, value: int) -> None:\n        self._cc1p.value\
    \ = value\n\n    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n   \
    \     CC1E\n\n        Capture/Compare 1 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self,\
    \ value: int) -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt_h = Field(\"cnt_h\", 16, 16)\n        self._cnt_l = Field(\"\
    cnt_l\", 0, 16)\n        super().__init__(\"CNT\", 0x40000800 + 0x24)\n\n    @property\n\
    \    def cnt_h(self) -> Field:\n        \"\"\"\n        CNT_H\n\n        High\
    \ counter value\n        \"\"\"\n        return self._cnt_h\n\n    @cnt_h.setter\n\
    \    def cnt_h(self, value: int) -> None:\n        self._cnt_h.value = value\n\
    \n    @property\n    def cnt_l(self) -> Field:\n        \"\"\"\n        CNT_L\n\
    \n        Low counter value\n        \"\"\"\n        return self._cnt_l\n\n  \
    \  @cnt_l.setter\n    def cnt_l(self, value: int) -> None:\n        self._cnt_l.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40000800 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr_h = Field(\"arr_h\", 16, 16)\n        self._arr_l = Field(\"\
    arr_l\", 0, 16)\n        super().__init__(\"ARR\", 0x40000800 + 0x2C)\n\n    @property\n\
    \    def arr_h(self) -> Field:\n        \"\"\"\n        ARR_H\n\n        High\
    \ Auto-reload value\n        \"\"\"\n        return self._arr_h\n\n    @arr_h.setter\n\
    \    def arr_h(self, value: int) -> None:\n        self._arr_h.value = value\n\
    \n    @property\n    def arr_l(self) -> Field:\n        \"\"\"\n        ARR_L\n\
    \n        Low Auto-reload value\n        \"\"\"\n        return self._arr_l\n\n\
    \    @arr_l.setter\n    def arr_l(self, value: int) -> None:\n        self._arr_l.value\
    \ = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n    CCR1\n\n    capture/compare\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ccr1_h = Field(\"\
    ccr1_h\", 16, 16)\n        self._ccr1_l = Field(\"ccr1_l\", 0, 16)\n        super().__init__(\"\
    CCR1\", 0x40000800 + 0x34)\n\n    @property\n    def ccr1_h(self) -> Field:\n\
    \        \"\"\"\n        CCR1_H\n\n        High Capture/Compare 1\n          \
    \        value\n        \"\"\"\n        return self._ccr1_h\n\n    @ccr1_h.setter\n\
    \    def ccr1_h(self, value: int) -> None:\n        self._ccr1_h.value = value\n\
    \n    @property\n    def ccr1_l(self) -> Field:\n        \"\"\"\n        CCR1_L\n\
    \n        Low Capture/Compare 1\n                  value\n        \"\"\"\n   \
    \     return self._ccr1_l\n\n    @ccr1_l.setter\n    def ccr1_l(self, value: int)\
    \ -> None:\n        self._ccr1_l.value = value\n\n\nclass Ccr2Register(Register):\n\
    \    \"\"\"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ccr2_h = Field(\"ccr2_h\", 16, 16)\n        self._ccr2_l\
    \ = Field(\"ccr2_l\", 0, 16)\n        super().__init__(\"CCR2\", 0x40000800 +\
    \ 0x38)\n\n    @property\n    def ccr2_h(self) -> Field:\n        \"\"\"\n   \
    \     CCR2_H\n\n        High Capture/Compare 2\n                  value\n    \
    \    \"\"\"\n        return self._ccr2_h\n\n    @ccr2_h.setter\n    def ccr2_h(self,\
    \ value: int) -> None:\n        self._ccr2_h.value = value\n\n    @property\n\
    \    def ccr2_l(self) -> Field:\n        \"\"\"\n        CCR2_L\n\n        Low\
    \ Capture/Compare 2\n                  value\n        \"\"\"\n        return self._ccr2_l\n\
    \n    @ccr2_l.setter\n    def ccr2_l(self, value: int) -> None:\n        self._ccr2_l.value\
    \ = value\n\n\nclass Ccr3Register(Register):\n    \"\"\"\n    CCR3\n\n    capture/compare\
    \ register 3\n    \"\"\"\n\n    def __init__(self):\n        self._ccr3_h = Field(\"\
    ccr3_h\", 16, 16)\n        self._ccr3_l = Field(\"ccr3_l\", 0, 16)\n        super().__init__(\"\
    CCR3\", 0x40000800 + 0x3C)\n\n    @property\n    def ccr3_h(self) -> Field:\n\
    \        \"\"\"\n        CCR3_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr3_h\n\n    @ccr3_h.setter\n    def ccr3_h(self,\
    \ value: int) -> None:\n        self._ccr3_h.value = value\n\n    @property\n\
    \    def ccr3_l(self) -> Field:\n        \"\"\"\n        CCR3_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr3_l\n\n    @ccr3_l.setter\n\
    \    def ccr3_l(self, value: int) -> None:\n        self._ccr3_l.value = value\n\
    \n\nclass Ccr4Register(Register):\n    \"\"\"\n    CCR4\n\n    capture/compare\
    \ register 4\n    \"\"\"\n\n    def __init__(self):\n        self._ccr4_h = Field(\"\
    ccr4_h\", 16, 16)\n        self._ccr4_l = Field(\"ccr4_l\", 0, 16)\n        super().__init__(\"\
    CCR4\", 0x40000800 + 0x40)\n\n    @property\n    def ccr4_h(self) -> Field:\n\
    \        \"\"\"\n        CCR4_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr4_h\n\n    @ccr4_h.setter\n    def ccr4_h(self,\
    \ value: int) -> None:\n        self._ccr4_h.value = value\n\n    @property\n\
    \    def ccr4_l(self) -> Field:\n        \"\"\"\n        CCR4_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr4_l\n\n    @ccr4_l.setter\n\
    \    def ccr4_l(self, value: int) -> None:\n        self._ccr4_l.value = value\n\
    \n\nclass DcrRegister(Register):\n    \"\"\"\n    DCR\n\n    DMA control register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dbl = Field(\"dbl\", 8,\
    \ 5)\n        self._dba = Field(\"dba\", 0, 5)\n        super().__init__(\"DCR\"\
    , 0x40000800 + 0x48)\n\n    @property\n    def dbl(self) -> Field:\n        \"\
    \"\"\n        DBL\n\n        DMA burst length\n        \"\"\"\n        return\
    \ self._dbl\n\n    @dbl.setter\n    def dbl(self, value: int) -> None:\n     \
    \   self._dbl.value = value\n\n    @property\n    def dba(self) -> Field:\n  \
    \      \"\"\"\n        DBA\n\n        DMA base address\n        \"\"\"\n     \
    \   return self._dba\n\n    @dba.setter\n    def dba(self, value: int) -> None:\n\
    \        self._dba.value = value\n\n\nclass DmarRegister(Register):\n    \"\"\"\
    \n    DMAR\n\n    DMA address for full transfer\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dmab = Field(\"dmab\", 0, 16)\n        super().__init__(\"DMAR\"\
    , 0x40000800 + 0x4C)\n\n    @property\n    def dmab(self) -> Field:\n        \"\
    \"\"\n        DMAB\n\n        DMA register for burst\n                  accesses\n\
    \        \"\"\"\n        return self._dmab\n\n    @dmab.setter\n    def dmab(self,\
    \ value: int) -> None:\n        self._dmab.value = value\n\n\nclass Tim4(Peripheral):\n\
    \    \"\"\"\n    TIM4\n\n    General purpose timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._cr2 = Cr2Register()\n      \
    \  self._smcr = SmcrRegister()\n        self._dier = DierRegister()\n        self._sr\
    \ = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccmr2_output = Ccmr2_outputRegister()\n        self._ccmr2_input\
    \ = Ccmr2_inputRegister()\n        self._ccer = CcerRegister()\n        self._cnt\
    \ = CntRegister()\n        self._psc = PscRegister()\n        self._arr = ArrRegister()\n\
    \        self._ccr1 = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n  \
    \      self._ccr3 = Ccr3Register()\n        self._ccr4 = Ccr4Register()\n    \
    \    self._dcr = DcrRegister()\n        self._dmar = DmarRegister()\n        super().__init__(\"\
    tim4\", 0x40000800)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def smcr(self)\
    \ -> SmcrRegister:\n        return self._smcr\n\n    @smcr.setter\n    def smcr(self,\
    \ value: int) -> None:\n        self._smcr.value = value\n\n    @property\n  \
    \  def dier(self) -> DierRegister:\n        return self._dier\n\n    @dier.setter\n\
    \    def dier(self, value: int) -> None:\n        self._dier.value = value\n\n\
    \    @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\n \
    \   @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value\
    \ = value\n\n    @property\n    def egr(self) -> EgrRegister:\n        return\
    \ self._egr\n\n    @egr.setter\n    def egr(self, value: int) -> None:\n     \
    \   self._egr.value = value\n\n    @property\n    def ccmr1_output(self) -> Ccmr1_outputRegister:\n\
    \        return self._ccmr1_output\n\n    @ccmr1_output.setter\n    def ccmr1_output(self,\
    \ value: int) -> None:\n        self._ccmr1_output.value = value\n\n    @property\n\
    \    def ccmr1_input(self) -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\
    \n    @ccmr1_input.setter\n    def ccmr1_input(self, value: int) -> None:\n  \
    \      self._ccmr1_input.value = value\n\n    @property\n    def ccmr2_output(self)\
    \ -> Ccmr2_outputRegister:\n        return self._ccmr2_output\n\n    @ccmr2_output.setter\n\
    \    def ccmr2_output(self, value: int) -> None:\n        self._ccmr2_output.value\
    \ = value\n\n    @property\n    def ccmr2_input(self) -> Ccmr2_inputRegister:\n\
    \        return self._ccmr2_input\n\n    @ccmr2_input.setter\n    def ccmr2_input(self,\
    \ value: int) -> None:\n        self._ccmr2_input.value = value\n\n    @property\n\
    \    def ccer(self) -> CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n\
    \    def ccer(self, value: int) -> None:\n        self._ccer.value = value\n\n\
    \    @property\n    def cnt(self) -> CntRegister:\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n    @property\n    def psc(self) -> PscRegister:\n        return\
    \ self._psc\n\n    @psc.setter\n    def psc(self, value: int) -> None:\n     \
    \   self._psc.value = value\n\n    @property\n    def arr(self) -> ArrRegister:\n\
    \        return self._arr\n\n    @arr.setter\n    def arr(self, value: int) ->\
    \ None:\n        self._arr.value = value\n\n    @property\n    def ccr1(self)\
    \ -> Ccr1Register:\n        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self,\
    \ value: int) -> None:\n        self._ccr1.value = value\n\n    @property\n  \
    \  def ccr2(self) -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n\
    \    def ccr2(self, value: int) -> None:\n        self._ccr2.value = value\n\n\
    \    @property\n    def ccr3(self) -> Ccr3Register:\n        return self._ccr3\n\
    \n    @ccr3.setter\n    def ccr3(self, value: int) -> None:\n        self._ccr3.value\
    \ = value\n\n    @property\n    def ccr4(self) -> Ccr4Register:\n        return\
    \ self._ccr4\n\n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n  \
    \      self._ccr4.value = value\n\n    @property\n    def dcr(self) -> DcrRegister:\n\
    \        return self._dcr\n\n    @dcr.setter\n    def dcr(self, value: int) ->\
    \ None:\n        self._dcr.value = value\n\n    @property\n    def dmar(self)\
    \ -> DmarRegister:\n        return self._dmar\n\n    @dmar.setter\n    def dmar(self,\
    \ value: int) -> None:\n        self._dmar.value = value\n"
  name: TIM4
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._cms =\
    \ Field(\"cms\", 5, 2)\n        self._dir = Field(\"dir\", 4, 1)\n        self._opm\
    \ = Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40000C00 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def cms(self)\
    \ -> Field:\n        \"\"\"\n        CMS\n\n        Center-aligned mode\n    \
    \              selection\n        \"\"\"\n        return self._cms\n\n    @cms.setter\n\
    \    def cms(self, value: int) -> None:\n        self._cms.value = value\n\n \
    \   @property\n    def dir(self) -> Field:\n        \"\"\"\n        DIR\n\n  \
    \      Direction\n        \"\"\"\n        return self._dir\n\n    @dir.setter\n\
    \    def dir(self, value: int) -> None:\n        self._dir.value = value\n\n \
    \   @property\n    def opm(self) -> Field:\n        \"\"\"\n        OPM\n\n  \
    \      One-pulse mode\n        \"\"\"\n        return self._opm\n\n    @opm.setter\n\
    \    def opm(self, value: int) -> None:\n        self._opm.value = value\n\n \
    \   @property\n    def urs(self) -> Field:\n        \"\"\"\n        URS\n\n  \
    \      Update request source\n        \"\"\"\n        return self._urs\n\n   \
    \ @urs.setter\n    def urs(self, value: int) -> None:\n        self._urs.value\
    \ = value\n\n    @property\n    def udis(self) -> Field:\n        \"\"\"\n   \
    \     UDIS\n\n        Update disable\n        \"\"\"\n        return self._udis\n\
    \n    @udis.setter\n    def udis(self, value: int) -> None:\n        self._udis.value\
    \ = value\n\n    @property\n    def cen(self) -> Field:\n        \"\"\"\n    \
    \    CEN\n\n        Counter enable\n        \"\"\"\n        return self._cen\n\
    \n    @cen.setter\n    def cen(self, value: int) -> None:\n        self._cen.value\
    \ = value\n\n\nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._ti1s = Field(\"\
    ti1s\", 7, 1)\n        self._mms = Field(\"mms\", 4, 3)\n        self._ccds =\
    \ Field(\"ccds\", 3, 1)\n        super().__init__(\"CR2\", 0x40000C00 + 0x4)\n\
    \n    @property\n    def ti1s(self) -> Field:\n        \"\"\"\n        TI1S\n\n\
    \        TI1 selection\n        \"\"\"\n        return self._ti1s\n\n    @ti1s.setter\n\
    \    def ti1s(self, value: int) -> None:\n        self._ti1s.value = value\n\n\
    \    @property\n    def mms(self) -> Field:\n        \"\"\"\n        MMS\n\n \
    \       Master mode selection\n        \"\"\"\n        return self._mms\n\n  \
    \  @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n    @property\n    def ccds(self) -> Field:\n        \"\"\"\n   \
    \     CCDS\n\n        Capture/compare DMA\n                  selection\n     \
    \   \"\"\"\n        return self._ccds\n\n    @ccds.setter\n    def ccds(self,\
    \ value: int) -> None:\n        self._ccds.value = value\n\n\nclass SmcrRegister(Register):\n\
    \    \"\"\"\n    SMCR\n\n    slave mode control register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._etp = Field(\"etp\", 15, 1)\n        self._ece\
    \ = Field(\"ece\", 14, 1)\n        self._etps = Field(\"etps\", 12, 2)\n     \
    \   self._etf = Field(\"etf\", 8, 4)\n        self._msm = Field(\"msm\", 7, 1)\n\
    \        self._ts = Field(\"ts\", 4, 3)\n        self._sms = Field(\"sms\", 0,\
    \ 3)\n        super().__init__(\"SMCR\", 0x40000C00 + 0x8)\n\n    @property\n\
    \    def etp(self) -> Field:\n        \"\"\"\n        ETP\n\n        External\
    \ trigger polarity\n        \"\"\"\n        return self._etp\n\n    @etp.setter\n\
    \    def etp(self, value: int) -> None:\n        self._etp.value = value\n\n \
    \   @property\n    def ece(self) -> Field:\n        \"\"\"\n        ECE\n\n  \
    \      External clock enable\n        \"\"\"\n        return self._ece\n\n   \
    \ @ece.setter\n    def ece(self, value: int) -> None:\n        self._ece.value\
    \ = value\n\n    @property\n    def etps(self) -> Field:\n        \"\"\"\n   \
    \     ETPS\n\n        External trigger prescaler\n        \"\"\"\n        return\
    \ self._etps\n\n    @etps.setter\n    def etps(self, value: int) -> None:\n  \
    \      self._etps.value = value\n\n    @property\n    def etf(self) -> Field:\n\
    \        \"\"\"\n        ETF\n\n        External trigger filter\n        \"\"\"\
    \n        return self._etf\n\n    @etf.setter\n    def etf(self, value: int) ->\
    \ None:\n        self._etf.value = value\n\n    @property\n    def msm(self) ->\
    \ Field:\n        \"\"\"\n        MSM\n\n        Master/Slave mode\n        \"\
    \"\"\n        return self._msm\n\n    @msm.setter\n    def msm(self, value: int)\
    \ -> None:\n        self._msm.value = value\n\n    @property\n    def ts(self)\
    \ -> Field:\n        \"\"\"\n        TS\n\n        Trigger selection\n       \
    \ \"\"\"\n        return self._ts\n\n    @ts.setter\n    def ts(self, value: int)\
    \ -> None:\n        self._ts.value = value\n\n    @property\n    def sms(self)\
    \ -> Field:\n        \"\"\"\n        SMS\n\n        Slave mode selection\n   \
    \     \"\"\"\n        return self._sms\n\n    @sms.setter\n    def sms(self, value:\
    \ int) -> None:\n        self._sms.value = value\n\n\nclass DierRegister(Register):\n\
    \    \"\"\"\n    DIER\n\n    DMA/Interrupt enable register\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._tde = Field(\"tde\", 14, 1)\n        self._cc4de\
    \ = Field(\"cc4de\", 12, 1)\n        self._cc3de = Field(\"cc3de\", 11, 1)\n \
    \       self._cc2de = Field(\"cc2de\", 10, 1)\n        self._cc1de = Field(\"\
    cc1de\", 9, 1)\n        self._ude = Field(\"ude\", 8, 1)\n        self._tie =\
    \ Field(\"tie\", 6, 1)\n        self._cc4ie = Field(\"cc4ie\", 4, 1)\n       \
    \ self._cc3ie = Field(\"cc3ie\", 3, 1)\n        self._cc2ie = Field(\"cc2ie\"\
    , 2, 1)\n        self._cc1ie = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"\
    uie\", 0, 1)\n        super().__init__(\"DIER\", 0x40000C00 + 0xC)\n\n    @property\n\
    \    def tde(self) -> Field:\n        \"\"\"\n        TDE\n\n        Trigger DMA\
    \ request enable\n        \"\"\"\n        return self._tde\n\n    @tde.setter\n\
    \    def tde(self, value: int) -> None:\n        self._tde.value = value\n\n \
    \   @property\n    def cc4de(self) -> Field:\n        \"\"\"\n        CC4DE\n\n\
    \        Capture/Compare 4 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc4de\n\n    @cc4de.setter\n    def cc4de(self, value:\
    \ int) -> None:\n        self._cc4de.value = value\n\n    @property\n    def cc3de(self)\
    \ -> Field:\n        \"\"\"\n        CC3DE\n\n        Capture/Compare 3 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc3de\n\n    @cc3de.setter\n\
    \    def cc3de(self, value: int) -> None:\n        self._cc3de.value = value\n\
    \n    @property\n    def cc2de(self) -> Field:\n        \"\"\"\n        CC2DE\n\
    \n        Capture/Compare 2 DMA request\n                  enable\n        \"\"\
    \"\n        return self._cc2de\n\n    @cc2de.setter\n    def cc2de(self, value:\
    \ int) -> None:\n        self._cc2de.value = value\n\n    @property\n    def cc1de(self)\
    \ -> Field:\n        \"\"\"\n        CC1DE\n\n        Capture/Compare 1 DMA request\n\
    \                  enable\n        \"\"\"\n        return self._cc1de\n\n    @cc1de.setter\n\
    \    def cc1de(self, value: int) -> None:\n        self._cc1de.value = value\n\
    \n    @property\n    def ude(self) -> Field:\n        \"\"\"\n        UDE\n\n\
    \        Update DMA request enable\n        \"\"\"\n        return self._ude\n\
    \n    @ude.setter\n    def ude(self, value: int) -> None:\n        self._ude.value\
    \ = value\n\n    @property\n    def tie(self) -> Field:\n        \"\"\"\n    \
    \    TIE\n\n        Trigger interrupt enable\n        \"\"\"\n        return self._tie\n\
    \n    @tie.setter\n    def tie(self, value: int) -> None:\n        self._tie.value\
    \ = value\n\n    @property\n    def cc4ie(self) -> Field:\n        \"\"\"\n  \
    \      CC4IE\n\n        Capture/Compare 4 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc4ie\n\n    @cc4ie.setter\n    def cc4ie(self,\
    \ value: int) -> None:\n        self._cc4ie.value = value\n\n    @property\n \
    \   def cc3ie(self) -> Field:\n        \"\"\"\n        CC3IE\n\n        Capture/Compare\
    \ 3 interrupt\n                  enable\n        \"\"\"\n        return self._cc3ie\n\
    \n    @cc3ie.setter\n    def cc3ie(self, value: int) -> None:\n        self._cc3ie.value\
    \ = value\n\n    @property\n    def cc2ie(self) -> Field:\n        \"\"\"\n  \
    \      CC2IE\n\n        Capture/Compare 2 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc2ie\n\n    @cc2ie.setter\n    def cc2ie(self,\
    \ value: int) -> None:\n        self._cc2ie.value = value\n\n    @property\n \
    \   def cc1ie(self) -> Field:\n        \"\"\"\n        CC1IE\n\n        Capture/Compare\
    \ 1 interrupt\n                  enable\n        \"\"\"\n        return self._cc1ie\n\
    \n    @cc1ie.setter\n    def cc1ie(self, value: int) -> None:\n        self._cc1ie.value\
    \ = value\n\n    @property\n    def uie(self) -> Field:\n        \"\"\"\n    \
    \    UIE\n\n        Update interrupt enable\n        \"\"\"\n        return self._uie\n\
    \n    @uie.setter\n    def uie(self, value: int) -> None:\n        self._uie.value\
    \ = value\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    status register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cc4of = Field(\"cc4of\"\
    , 12, 1)\n        self._cc3of = Field(\"cc3of\", 11, 1)\n        self._cc2of =\
    \ Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"cc1of\", 9, 1)\n    \
    \    self._tif = Field(\"tif\", 6, 1)\n        self._cc4if = Field(\"cc4if\",\
    \ 4, 1)\n        self._cc3if = Field(\"cc3if\", 3, 1)\n        self._cc2if = Field(\"\
    cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n        self._uif\
    \ = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40000C00 + 0x10)\n\
    \n    @property\n    def cc4of(self) -> Field:\n        \"\"\"\n        CC4OF\n\
    \n        Capture/Compare 4 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc4of\n\n    @cc4of.setter\n    def cc4of(self, value:\
    \ int) -> None:\n        self._cc4of.value = value\n\n    @property\n    def cc3of(self)\
    \ -> Field:\n        \"\"\"\n        CC3OF\n\n        Capture/Compare 3 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc3of\n\n    @cc3of.setter\n\
    \    def cc3of(self, value: int) -> None:\n        self._cc3of.value = value\n\
    \n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n        CC2OF\n\
    \n        Capture/compare 2 overcapture\n                  flag\n        \"\"\"\
    \n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self, value:\
    \ int) -> None:\n        self._cc2of.value = value\n\n    @property\n    def cc1of(self)\
    \ -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare 1 overcapture\n\
    \                  flag\n        \"\"\"\n        return self._cc1of\n\n    @cc1of.setter\n\
    \    def cc1of(self, value: int) -> None:\n        self._cc1of.value = value\n\
    \n    @property\n    def tif(self) -> Field:\n        \"\"\"\n        TIF\n\n\
    \        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\n\
    \    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def cc4if(self) -> Field:\n        \"\"\"\n  \
    \      CC4IF\n\n        Capture/Compare 4 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc4if\n\n    @cc4if.setter\n    def cc4if(self,\
    \ value: int) -> None:\n        self._cc4if.value = value\n\n    @property\n \
    \   def cc3if(self) -> Field:\n        \"\"\"\n        CC3IF\n\n        Capture/Compare\
    \ 3 interrupt\n                  flag\n        \"\"\"\n        return self._cc3if\n\
    \n    @cc3if.setter\n    def cc3if(self, value: int) -> None:\n        self._cc3if.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._tg\
    \ = Field(\"tg\", 6, 1)\n        self._cc4g = Field(\"cc4g\", 4, 1)\n        self._cc3g\
    \ = Field(\"cc3g\", 3, 1)\n        self._cc2g = Field(\"cc2g\", 2, 1)\n      \
    \  self._cc1g = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\", 0, 1)\n\
    \        super().__init__(\"EGR\", 0x40000C00 + 0x14)\n\n    @property\n    def\
    \ tg(self) -> Field:\n        \"\"\"\n        TG\n\n        Trigger generation\n\
    \        \"\"\"\n        return self._tg\n\n    @tg.setter\n    def tg(self, value:\
    \ int) -> None:\n        self._tg.value = value\n\n    @property\n    def cc4g(self)\
    \ -> Field:\n        \"\"\"\n        CC4G\n\n        Capture/compare 4\n     \
    \             generation\n        \"\"\"\n        return self._cc4g\n\n    @cc4g.setter\n\
    \    def cc4g(self, value: int) -> None:\n        self._cc4g.value = value\n\n\
    \    @property\n    def cc3g(self) -> Field:\n        \"\"\"\n        CC3G\n\n\
    \        Capture/compare 3\n                  generation\n        \"\"\"\n   \
    \     return self._cc3g\n\n    @cc3g.setter\n    def cc3g(self, value: int) ->\
    \ None:\n        self._cc3g.value = value\n\n    @property\n    def cc2g(self)\
    \ -> Field:\n        \"\"\"\n        CC2G\n\n        Capture/compare 2\n     \
    \             generation\n        \"\"\"\n        return self._cc2g\n\n    @cc2g.setter\n\
    \    def cc2g(self, value: int) -> None:\n        self._cc2g.value = value\n\n\
    \    @property\n    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n\
    \        Capture/compare 1\n                  generation\n        \"\"\"\n   \
    \     return self._cc1g\n\n    @cc1g.setter\n    def cc1g(self, value: int) ->\
    \ None:\n        self._cc1g.value = value\n\n    @property\n    def ug(self) ->\
    \ Field:\n        \"\"\"\n        UG\n\n        Update generation\n        \"\"\
    \"\n        return self._ug\n\n    @ug.setter\n    def ug(self, value: int) ->\
    \ None:\n        self._ug.value = value\n\n\nclass Ccmr1_outputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare mode register 1 (output\n\
    \              mode)\n    \"\"\"\n\n    def __init__(self):\n        self._oc2ce\
    \ = Field(\"oc2ce\", 15, 1)\n        self._oc2m = Field(\"oc2m\", 12, 3)\n   \
    \     self._oc2pe = Field(\"oc2pe\", 11, 1)\n        self._oc2fe = Field(\"oc2fe\"\
    , 10, 1)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._oc1ce = Field(\"\
    oc1ce\", 7, 1)\n        self._oc1m = Field(\"oc1m\", 4, 3)\n        self._oc1pe\
    \ = Field(\"oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\", 2, 1)\n   \
    \     self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Output\"\
    , 0x40000C00 + 0x18)\n\n    @property\n    def oc2ce(self) -> Field:\n       \
    \ \"\"\"\n        OC2CE\n\n        OC2CE\n        \"\"\"\n        return self._oc2ce\n\
    \n    @oc2ce.setter\n    def oc2ce(self, value: int) -> None:\n        self._oc2ce.value\
    \ = value\n\n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n   \
    \     OC2M\n\n        OC2M\n        \"\"\"\n        return self._oc2m\n\n    @oc2m.setter\n\
    \    def oc2m(self, value: int) -> None:\n        self._oc2m.value = value\n\n\
    \    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n        OC2PE\n\
    \n        OC2PE\n        \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n\
    \    def oc2pe(self, value: int) -> None:\n        self._oc2pe.value = value\n\
    \n    @property\n    def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\
    \n        OC2FE\n        \"\"\"\n        return self._oc2fe\n\n    @oc2fe.setter\n\
    \    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value = value\n\
    \n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n\
    \        CC2S\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n\
    \    def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def oc1ce(self) -> Field:\n        \"\"\"\n        OC1CE\n\
    \n        OC1CE\n        \"\"\"\n        return self._oc1ce\n\n    @oc1ce.setter\n\
    \    def oc1ce(self, value: int) -> None:\n        self._oc1ce.value = value\n\
    \n    @property\n    def oc1m(self) -> Field:\n        \"\"\"\n        OC1M\n\n\
    \        OC1M\n        \"\"\"\n        return self._oc1m\n\n    @oc1m.setter\n\
    \    def oc1m(self, value: int) -> None:\n        self._oc1m.value = value\n\n\
    \    @property\n    def oc1pe(self) -> Field:\n        \"\"\"\n        OC1PE\n\
    \n        OC1PE\n        \"\"\"\n        return self._oc1pe\n\n    @oc1pe.setter\n\
    \    def oc1pe(self, value: int) -> None:\n        self._oc1pe.value = value\n\
    \n    @property\n    def oc1fe(self) -> Field:\n        \"\"\"\n        OC1FE\n\
    \n        OC1FE\n        \"\"\"\n        return self._oc1fe\n\n    @oc1fe.setter\n\
    \    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value = value\n\
    \n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n\
    \        CC1S\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n\
    \    def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\
    \nclass Ccmr1_inputRegister(Register):\n    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare\
    \ mode register 1 (input\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ic2f = Field(\"ic2f\", 12, 4)\n        self._ic2pcs = Field(\"\
    ic2pcs\", 10, 2)\n        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f\
    \ = Field(\"ic1f\", 4, 4)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n    \
    \    self._cc1s = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\"\
    , 0x40000C00 + 0x18)\n\n    @property\n    def ic2f(self) -> Field:\n        \"\
    \"\"\n        IC2F\n\n        Input capture 2 filter\n        \"\"\"\n       \
    \ return self._ic2f\n\n    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n\
    \        self._ic2f.value = value\n\n    @property\n    def ic2pcs(self) -> Field:\n\
    \        \"\"\"\n        IC2PCS\n\n        Input capture 2 prescaler\n       \
    \ \"\"\"\n        return self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self,\
    \ value: int) -> None:\n        self._ic2pcs.value = value\n\n    @property\n\
    \    def cc2s(self) -> Field:\n        \"\"\"\n        CC2S\n\n        Capture/Compare\
    \ 2\n                  selection\n        \"\"\"\n        return self._cc2s\n\n\
    \    @cc2s.setter\n    def cc2s(self, value: int) -> None:\n        self._cc2s.value\
    \ = value\n\n    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n   \
    \     IC1F\n\n        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\
    \n    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class Ccmr2_outputRegister(Register):\n    \"\"\"\n    CCMR2_OUTPUT\n\n    capture/compare\
    \ mode register 2 (output\n              mode)\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._oc4ce = Field(\"oc4ce\", 15, 1)\n        self._oc4m = Field(\"\
    oc4m\", 12, 3)\n        self._oc4pe = Field(\"oc4pe\", 11, 1)\n        self._oc4fe\
    \ = Field(\"oc4fe\", 10, 1)\n        self._cc4s = Field(\"cc4s\", 8, 2)\n    \
    \    self._oc3ce = Field(\"oc3ce\", 7, 1)\n        self._oc3m = Field(\"oc3m\"\
    , 4, 3)\n        self._oc3pe = Field(\"oc3pe\", 3, 1)\n        self._oc3fe = Field(\"\
    oc3fe\", 2, 1)\n        self._cc3s = Field(\"cc3s\", 0, 2)\n        super().__init__(\"\
    CCMR2_Output\", 0x40000C00 + 0x1C)\n\n    @property\n    def oc4ce(self) -> Field:\n\
    \        \"\"\"\n        OC4CE\n\n        OC4CE\n        \"\"\"\n        return\
    \ self._oc4ce\n\n    @oc4ce.setter\n    def oc4ce(self, value: int) -> None:\n\
    \        self._oc4ce.value = value\n\n    @property\n    def oc4m(self) -> Field:\n\
    \        \"\"\"\n        OC4M\n\n        OC4M\n        \"\"\"\n        return\
    \ self._oc4m\n\n    @oc4m.setter\n    def oc4m(self, value: int) -> None:\n  \
    \      self._oc4m.value = value\n\n    @property\n    def oc4pe(self) -> Field:\n\
    \        \"\"\"\n        OC4PE\n\n        OC4PE\n        \"\"\"\n        return\
    \ self._oc4pe\n\n    @oc4pe.setter\n    def oc4pe(self, value: int) -> None:\n\
    \        self._oc4pe.value = value\n\n    @property\n    def oc4fe(self) -> Field:\n\
    \        \"\"\"\n        OC4FE\n\n        OC4FE\n        \"\"\"\n        return\
    \ self._oc4fe\n\n    @oc4fe.setter\n    def oc4fe(self, value: int) -> None:\n\
    \        self._oc4fe.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        CC4S\n        \"\"\"\n        return\
    \ self._cc4s\n\n    @cc4s.setter\n    def cc4s(self, value: int) -> None:\n  \
    \      self._cc4s.value = value\n\n    @property\n    def oc3ce(self) -> Field:\n\
    \        \"\"\"\n        OC3CE\n\n        OC3CE\n        \"\"\"\n        return\
    \ self._oc3ce\n\n    @oc3ce.setter\n    def oc3ce(self, value: int) -> None:\n\
    \        self._oc3ce.value = value\n\n    @property\n    def oc3m(self) -> Field:\n\
    \        \"\"\"\n        OC3M\n\n        OC3M\n        \"\"\"\n        return\
    \ self._oc3m\n\n    @oc3m.setter\n    def oc3m(self, value: int) -> None:\n  \
    \      self._oc3m.value = value\n\n    @property\n    def oc3pe(self) -> Field:\n\
    \        \"\"\"\n        OC3PE\n\n        OC3PE\n        \"\"\"\n        return\
    \ self._oc3pe\n\n    @oc3pe.setter\n    def oc3pe(self, value: int) -> None:\n\
    \        self._oc3pe.value = value\n\n    @property\n    def oc3fe(self) -> Field:\n\
    \        \"\"\"\n        OC3FE\n\n        OC3FE\n        \"\"\"\n        return\
    \ self._oc3fe\n\n    @oc3fe.setter\n    def oc3fe(self, value: int) -> None:\n\
    \        self._oc3fe.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        CC3S\n        \"\"\"\n        return\
    \ self._cc3s\n\n    @cc3s.setter\n    def cc3s(self, value: int) -> None:\n  \
    \      self._cc3s.value = value\n\n\nclass Ccmr2_inputRegister(Register):\n  \
    \  \"\"\"\n    CCMR2_INPUT\n\n    capture/compare mode register 2 (input\n   \
    \           mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic4f =\
    \ Field(\"ic4f\", 12, 4)\n        self._ic4psc = Field(\"ic4psc\", 10, 2)\n  \
    \      self._cc4s = Field(\"cc4s\", 8, 2)\n        self._ic3f = Field(\"ic3f\"\
    , 4, 4)\n        self._ic3psc = Field(\"ic3psc\", 2, 2)\n        self._cc3s =\
    \ Field(\"cc3s\", 0, 2)\n        super().__init__(\"CCMR2_Input\", 0x40000C00\
    \ + 0x1C)\n\n    @property\n    def ic4f(self) -> Field:\n        \"\"\"\n   \
    \     IC4F\n\n        Input capture 4 filter\n        \"\"\"\n        return self._ic4f\n\
    \n    @ic4f.setter\n    def ic4f(self, value: int) -> None:\n        self._ic4f.value\
    \ = value\n\n    @property\n    def ic4psc(self) -> Field:\n        \"\"\"\n \
    \       IC4PSC\n\n        Input capture 4 prescaler\n        \"\"\"\n        return\
    \ self._ic4psc\n\n    @ic4psc.setter\n    def ic4psc(self, value: int) -> None:\n\
    \        self._ic4psc.value = value\n\n    @property\n    def cc4s(self) -> Field:\n\
    \        \"\"\"\n        CC4S\n\n        Capture/Compare 4\n                 \
    \ selection\n        \"\"\"\n        return self._cc4s\n\n    @cc4s.setter\n \
    \   def cc4s(self, value: int) -> None:\n        self._cc4s.value = value\n\n\
    \    @property\n    def ic3f(self) -> Field:\n        \"\"\"\n        IC3F\n\n\
    \        Input capture 3 filter\n        \"\"\"\n        return self._ic3f\n\n\
    \    @ic3f.setter\n    def ic3f(self, value: int) -> None:\n        self._ic3f.value\
    \ = value\n\n    @property\n    def ic3psc(self) -> Field:\n        \"\"\"\n \
    \       IC3PSC\n\n        Input capture 3 prescaler\n        \"\"\"\n        return\
    \ self._ic3psc\n\n    @ic3psc.setter\n    def ic3psc(self, value: int) -> None:\n\
    \        self._ic3psc.value = value\n\n    @property\n    def cc3s(self) -> Field:\n\
    \        \"\"\"\n        CC3S\n\n        Capture/compare 3\n                 \
    \ selection\n        \"\"\"\n        return self._cc3s\n\n    @cc3s.setter\n \
    \   def cc3s(self, value: int) -> None:\n        self._cc3s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc4np\
    \ = Field(\"cc4np\", 15, 1)\n        self._cc4p = Field(\"cc4p\", 13, 1)\n   \
    \     self._cc4e = Field(\"cc4e\", 12, 1)\n        self._cc3np = Field(\"cc3np\"\
    , 11, 1)\n        self._cc3p = Field(\"cc3p\", 9, 1)\n        self._cc3e = Field(\"\
    cc3e\", 8, 1)\n        self._cc2np = Field(\"cc2np\", 7, 1)\n        self._cc2p\
    \ = Field(\"cc2p\", 5, 1)\n        self._cc2e = Field(\"cc2e\", 4, 1)\n      \
    \  self._cc1np = Field(\"cc1np\", 3, 1)\n        self._cc1p = Field(\"cc1p\",\
    \ 1, 1)\n        self._cc1e = Field(\"cc1e\", 0, 1)\n        super().__init__(\"\
    CCER\", 0x40000C00 + 0x20)\n\n    @property\n    def cc4np(self) -> Field:\n \
    \       \"\"\"\n        CC4NP\n\n        Capture/Compare 4 output\n          \
    \        Polarity\n        \"\"\"\n        return self._cc4np\n\n    @cc4np.setter\n\
    \    def cc4np(self, value: int) -> None:\n        self._cc4np.value = value\n\
    \n    @property\n    def cc4p(self) -> Field:\n        \"\"\"\n        CC4P\n\n\
    \        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\n\
    \        return self._cc4p\n\n    @cc4p.setter\n    def cc4p(self, value: int)\
    \ -> None:\n        self._cc4p.value = value\n\n    @property\n    def cc4e(self)\
    \ -> Field:\n        \"\"\"\n        CC4E\n\n        Capture/Compare 4 output\n\
    \                  enable\n        \"\"\"\n        return self._cc4e\n\n    @cc4e.setter\n\
    \    def cc4e(self, value: int) -> None:\n        self._cc4e.value = value\n\n\
    \    @property\n    def cc3np(self) -> Field:\n        \"\"\"\n        CC3NP\n\
    \n        Capture/Compare 3 output\n                  Polarity\n        \"\"\"\
    \n        return self._cc3np\n\n    @cc3np.setter\n    def cc3np(self, value:\
    \ int) -> None:\n        self._cc3np.value = value\n\n    @property\n    def cc3p(self)\
    \ -> Field:\n        \"\"\"\n        CC3P\n\n        Capture/Compare 3 output\n\
    \                  Polarity\n        \"\"\"\n        return self._cc3p\n\n   \
    \ @cc3p.setter\n    def cc3p(self, value: int) -> None:\n        self._cc3p.value\
    \ = value\n\n    @property\n    def cc3e(self) -> Field:\n        \"\"\"\n   \
    \     CC3E\n\n        Capture/Compare 3 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc3e\n\n    @cc3e.setter\n    def cc3e(self,\
    \ value: int) -> None:\n        self._cc3e.value = value\n\n    @property\n  \
    \  def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\n        Capture/Compare\
    \ 2 output\n                  Polarity\n        \"\"\"\n        return self._cc2np\n\
    \n    @cc2np.setter\n    def cc2np(self, value: int) -> None:\n        self._cc2np.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n        Capture/Compare\
    \ 1 output\n                  Polarity\n        \"\"\"\n        return self._cc1p\n\
    \n    @cc1p.setter\n    def cc1p(self, value: int) -> None:\n        self._cc1p.value\
    \ = value\n\n    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n   \
    \     CC1E\n\n        Capture/Compare 1 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self,\
    \ value: int) -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt_h = Field(\"cnt_h\", 16, 16)\n        self._cnt_l = Field(\"\
    cnt_l\", 0, 16)\n        super().__init__(\"CNT\", 0x40000C00 + 0x24)\n\n    @property\n\
    \    def cnt_h(self) -> Field:\n        \"\"\"\n        CNT_H\n\n        High\
    \ counter value\n        \"\"\"\n        return self._cnt_h\n\n    @cnt_h.setter\n\
    \    def cnt_h(self, value: int) -> None:\n        self._cnt_h.value = value\n\
    \n    @property\n    def cnt_l(self) -> Field:\n        \"\"\"\n        CNT_L\n\
    \n        Low counter value\n        \"\"\"\n        return self._cnt_l\n\n  \
    \  @cnt_l.setter\n    def cnt_l(self, value: int) -> None:\n        self._cnt_l.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40000C00 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr_h = Field(\"arr_h\", 16, 16)\n        self._arr_l = Field(\"\
    arr_l\", 0, 16)\n        super().__init__(\"ARR\", 0x40000C00 + 0x2C)\n\n    @property\n\
    \    def arr_h(self) -> Field:\n        \"\"\"\n        ARR_H\n\n        High\
    \ Auto-reload value\n        \"\"\"\n        return self._arr_h\n\n    @arr_h.setter\n\
    \    def arr_h(self, value: int) -> None:\n        self._arr_h.value = value\n\
    \n    @property\n    def arr_l(self) -> Field:\n        \"\"\"\n        ARR_L\n\
    \n        Low Auto-reload value\n        \"\"\"\n        return self._arr_l\n\n\
    \    @arr_l.setter\n    def arr_l(self, value: int) -> None:\n        self._arr_l.value\
    \ = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n    CCR1\n\n    capture/compare\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ccr1_h = Field(\"\
    ccr1_h\", 16, 16)\n        self._ccr1_l = Field(\"ccr1_l\", 0, 16)\n        super().__init__(\"\
    CCR1\", 0x40000C00 + 0x34)\n\n    @property\n    def ccr1_h(self) -> Field:\n\
    \        \"\"\"\n        CCR1_H\n\n        High Capture/Compare 1\n          \
    \        value\n        \"\"\"\n        return self._ccr1_h\n\n    @ccr1_h.setter\n\
    \    def ccr1_h(self, value: int) -> None:\n        self._ccr1_h.value = value\n\
    \n    @property\n    def ccr1_l(self) -> Field:\n        \"\"\"\n        CCR1_L\n\
    \n        Low Capture/Compare 1\n                  value\n        \"\"\"\n   \
    \     return self._ccr1_l\n\n    @ccr1_l.setter\n    def ccr1_l(self, value: int)\
    \ -> None:\n        self._ccr1_l.value = value\n\n\nclass Ccr2Register(Register):\n\
    \    \"\"\"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ccr2_h = Field(\"ccr2_h\", 16, 16)\n        self._ccr2_l\
    \ = Field(\"ccr2_l\", 0, 16)\n        super().__init__(\"CCR2\", 0x40000C00 +\
    \ 0x38)\n\n    @property\n    def ccr2_h(self) -> Field:\n        \"\"\"\n   \
    \     CCR2_H\n\n        High Capture/Compare 2\n                  value\n    \
    \    \"\"\"\n        return self._ccr2_h\n\n    @ccr2_h.setter\n    def ccr2_h(self,\
    \ value: int) -> None:\n        self._ccr2_h.value = value\n\n    @property\n\
    \    def ccr2_l(self) -> Field:\n        \"\"\"\n        CCR2_L\n\n        Low\
    \ Capture/Compare 2\n                  value\n        \"\"\"\n        return self._ccr2_l\n\
    \n    @ccr2_l.setter\n    def ccr2_l(self, value: int) -> None:\n        self._ccr2_l.value\
    \ = value\n\n\nclass Ccr3Register(Register):\n    \"\"\"\n    CCR3\n\n    capture/compare\
    \ register 3\n    \"\"\"\n\n    def __init__(self):\n        self._ccr3_h = Field(\"\
    ccr3_h\", 16, 16)\n        self._ccr3_l = Field(\"ccr3_l\", 0, 16)\n        super().__init__(\"\
    CCR3\", 0x40000C00 + 0x3C)\n\n    @property\n    def ccr3_h(self) -> Field:\n\
    \        \"\"\"\n        CCR3_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr3_h\n\n    @ccr3_h.setter\n    def ccr3_h(self,\
    \ value: int) -> None:\n        self._ccr3_h.value = value\n\n    @property\n\
    \    def ccr3_l(self) -> Field:\n        \"\"\"\n        CCR3_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr3_l\n\n    @ccr3_l.setter\n\
    \    def ccr3_l(self, value: int) -> None:\n        self._ccr3_l.value = value\n\
    \n\nclass Ccr4Register(Register):\n    \"\"\"\n    CCR4\n\n    capture/compare\
    \ register 4\n    \"\"\"\n\n    def __init__(self):\n        self._ccr4_h = Field(\"\
    ccr4_h\", 16, 16)\n        self._ccr4_l = Field(\"ccr4_l\", 0, 16)\n        super().__init__(\"\
    CCR4\", 0x40000C00 + 0x40)\n\n    @property\n    def ccr4_h(self) -> Field:\n\
    \        \"\"\"\n        CCR4_H\n\n        High Capture/Compare value\n      \
    \  \"\"\"\n        return self._ccr4_h\n\n    @ccr4_h.setter\n    def ccr4_h(self,\
    \ value: int) -> None:\n        self._ccr4_h.value = value\n\n    @property\n\
    \    def ccr4_l(self) -> Field:\n        \"\"\"\n        CCR4_L\n\n        Low\
    \ Capture/Compare value\n        \"\"\"\n        return self._ccr4_l\n\n    @ccr4_l.setter\n\
    \    def ccr4_l(self, value: int) -> None:\n        self._ccr4_l.value = value\n\
    \n\nclass DcrRegister(Register):\n    \"\"\"\n    DCR\n\n    DMA control register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dbl = Field(\"dbl\", 8,\
    \ 5)\n        self._dba = Field(\"dba\", 0, 5)\n        super().__init__(\"DCR\"\
    , 0x40000C00 + 0x48)\n\n    @property\n    def dbl(self) -> Field:\n        \"\
    \"\"\n        DBL\n\n        DMA burst length\n        \"\"\"\n        return\
    \ self._dbl\n\n    @dbl.setter\n    def dbl(self, value: int) -> None:\n     \
    \   self._dbl.value = value\n\n    @property\n    def dba(self) -> Field:\n  \
    \      \"\"\"\n        DBA\n\n        DMA base address\n        \"\"\"\n     \
    \   return self._dba\n\n    @dba.setter\n    def dba(self, value: int) -> None:\n\
    \        self._dba.value = value\n\n\nclass DmarRegister(Register):\n    \"\"\"\
    \n    DMAR\n\n    DMA address for full transfer\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._dmab = Field(\"dmab\", 0, 16)\n        super().__init__(\"DMAR\"\
    , 0x40000C00 + 0x4C)\n\n    @property\n    def dmab(self) -> Field:\n        \"\
    \"\"\n        DMAB\n\n        DMA register for burst\n                  accesses\n\
    \        \"\"\"\n        return self._dmab\n\n    @dmab.setter\n    def dmab(self,\
    \ value: int) -> None:\n        self._dmab.value = value\n\n\nclass OrRegister(Register):\n\
    \    \"\"\"\n    OR\n\n    TIM5 option register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._it4_rmp = Field(\"it4_rmp\", 6, 2)\n        super().__init__(\"\
    OR\", 0x40000C00 + 0x50)\n\n    @property\n    def it4_rmp(self) -> Field:\n \
    \       \"\"\"\n        IT4_RMP\n\n        Timer Input 4 remap\n        \"\"\"\
    \n        return self._it4_rmp\n\n    @it4_rmp.setter\n    def it4_rmp(self, value:\
    \ int) -> None:\n        self._it4_rmp.value = value\n\n\nclass Tim5(Peripheral):\n\
    \    \"\"\"\n    TIM5\n\n    General-purpose-timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._cr2 = Cr2Register()\n      \
    \  self._smcr = SmcrRegister()\n        self._dier = DierRegister()\n        self._sr\
    \ = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccmr2_output = Ccmr2_outputRegister()\n        self._ccmr2_input\
    \ = Ccmr2_inputRegister()\n        self._ccer = CcerRegister()\n        self._cnt\
    \ = CntRegister()\n        self._psc = PscRegister()\n        self._arr = ArrRegister()\n\
    \        self._ccr1 = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n  \
    \      self._ccr3 = Ccr3Register()\n        self._ccr4 = Ccr4Register()\n    \
    \    self._dcr = DcrRegister()\n        self._dmar = DmarRegister()\n        self._or\
    \ = OrRegister()\n        super().__init__(\"tim5\", 0x40000C00)\n\n    @property\n\
    \    def cr1(self) -> Cr1Register:\n        return self._cr1\n\n    @cr1.setter\n\
    \    def cr1(self, value: int) -> None:\n        self._cr1.value = value\n\n \
    \   @property\n    def cr2(self) -> Cr2Register:\n        return self._cr2\n\n\
    \    @cr2.setter\n    def cr2(self, value: int) -> None:\n        self._cr2.value\
    \ = value\n\n    @property\n    def smcr(self) -> SmcrRegister:\n        return\
    \ self._smcr\n\n    @smcr.setter\n    def smcr(self, value: int) -> None:\n  \
    \      self._smcr.value = value\n\n    @property\n    def dier(self) -> DierRegister:\n\
    \        return self._dier\n\n    @dier.setter\n    def dier(self, value: int)\
    \ -> None:\n        self._dier.value = value\n\n    @property\n    def sr(self)\
    \ -> SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self,\
    \ value: int) -> None:\n        self._sr.value = value\n\n    @property\n    def\
    \ egr(self) -> EgrRegister:\n        return self._egr\n\n    @egr.setter\n   \
    \ def egr(self, value: int) -> None:\n        self._egr.value = value\n\n    @property\n\
    \    def ccmr1_output(self) -> Ccmr1_outputRegister:\n        return self._ccmr1_output\n\
    \n    @ccmr1_output.setter\n    def ccmr1_output(self, value: int) -> None:\n\
    \        self._ccmr1_output.value = value\n\n    @property\n    def ccmr1_input(self)\
    \ -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\n    @ccmr1_input.setter\n\
    \    def ccmr1_input(self, value: int) -> None:\n        self._ccmr1_input.value\
    \ = value\n\n    @property\n    def ccmr2_output(self) -> Ccmr2_outputRegister:\n\
    \        return self._ccmr2_output\n\n    @ccmr2_output.setter\n    def ccmr2_output(self,\
    \ value: int) -> None:\n        self._ccmr2_output.value = value\n\n    @property\n\
    \    def ccmr2_input(self) -> Ccmr2_inputRegister:\n        return self._ccmr2_input\n\
    \n    @ccmr2_input.setter\n    def ccmr2_input(self, value: int) -> None:\n  \
    \      self._ccmr2_input.value = value\n\n    @property\n    def ccer(self) ->\
    \ CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n    def ccer(self,\
    \ value: int) -> None:\n        self._ccer.value = value\n\n    @property\n  \
    \  def cnt(self) -> CntRegister:\n        return self._cnt\n\n    @cnt.setter\n\
    \    def cnt(self, value: int) -> None:\n        self._cnt.value = value\n\n \
    \   @property\n    def psc(self) -> PscRegister:\n        return self._psc\n\n\
    \    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n    @property\n    def arr(self) -> ArrRegister:\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n    @property\n    def ccr1(self) -> Ccr1Register:\n\
    \        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int)\
    \ -> None:\n        self._ccr1.value = value\n\n    @property\n    def ccr2(self)\
    \ -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n    def ccr2(self,\
    \ value: int) -> None:\n        self._ccr2.value = value\n\n    @property\n  \
    \  def ccr3(self) -> Ccr3Register:\n        return self._ccr3\n\n    @ccr3.setter\n\
    \    def ccr3(self, value: int) -> None:\n        self._ccr3.value = value\n\n\
    \    @property\n    def ccr4(self) -> Ccr4Register:\n        return self._ccr4\n\
    \n    @ccr4.setter\n    def ccr4(self, value: int) -> None:\n        self._ccr4.value\
    \ = value\n\n    @property\n    def dcr(self) -> DcrRegister:\n        return\
    \ self._dcr\n\n    @dcr.setter\n    def dcr(self, value: int) -> None:\n     \
    \   self._dcr.value = value\n\n    @property\n    def dmar(self) -> DmarRegister:\n\
    \        return self._dmar\n\n    @dmar.setter\n    def dmar(self, value: int)\
    \ -> None:\n        self._dmar.value = value\n\n    @property\n    def or(self)\
    \ -> OrRegister:\n        return self._or\n\n    @or.setter\n    def or(self,\
    \ value: int) -> None:\n        self._or.value = value\n"
  name: TIM5
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._ckd = Field(\"\
    ckd\", 8, 2)\n        self._arpe = Field(\"arpe\", 7, 1)\n        self._opm =\
    \ Field(\"opm\", 3, 1)\n        self._urs = Field(\"urs\", 2, 1)\n        self._udis\
    \ = Field(\"udis\", 1, 1)\n        self._cen = Field(\"cen\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40014000 + 0x0)\n\n    @property\n    def ckd(self) -> Field:\n     \
    \   \"\"\"\n        CKD\n\n        Clock division\n        \"\"\"\n        return\
    \ self._ckd\n\n    @ckd.setter\n    def ckd(self, value: int) -> None:\n     \
    \   self._ckd.value = value\n\n    @property\n    def arpe(self) -> Field:\n \
    \       \"\"\"\n        ARPE\n\n        Auto-reload preload enable\n        \"\
    \"\"\n        return self._arpe\n\n    @arpe.setter\n    def arpe(self, value:\
    \ int) -> None:\n        self._arpe.value = value\n\n    @property\n    def opm(self)\
    \ -> Field:\n        \"\"\"\n        OPM\n\n        One-pulse mode\n        \"\
    \"\"\n        return self._opm\n\n    @opm.setter\n    def opm(self, value: int)\
    \ -> None:\n        self._opm.value = value\n\n    @property\n    def urs(self)\
    \ -> Field:\n        \"\"\"\n        URS\n\n        Update request source\n  \
    \      \"\"\"\n        return self._urs\n\n    @urs.setter\n    def urs(self,\
    \ value: int) -> None:\n        self._urs.value = value\n\n    @property\n   \
    \ def udis(self) -> Field:\n        \"\"\"\n        UDIS\n\n        Update disable\n\
    \        \"\"\"\n        return self._udis\n\n    @udis.setter\n    def udis(self,\
    \ value: int) -> None:\n        self._udis.value = value\n\n    @property\n  \
    \  def cen(self) -> Field:\n        \"\"\"\n        CEN\n\n        Counter enable\n\
    \        \"\"\"\n        return self._cen\n\n    @cen.setter\n    def cen(self,\
    \ value: int) -> None:\n        self._cen.value = value\n\n\nclass Cr2Register(Register):\n\
    \    \"\"\"\n    CR2\n\n    control register 2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._mms = Field(\"mms\", 4, 3)\n        super().__init__(\"CR2\", 0x40014000\
    \ + 0x4)\n\n    @property\n    def mms(self) -> Field:\n        \"\"\"\n     \
    \   MMS\n\n        Master mode selection\n        \"\"\"\n        return self._mms\n\
    \n    @mms.setter\n    def mms(self, value: int) -> None:\n        self._mms.value\
    \ = value\n\n\nclass SmcrRegister(Register):\n    \"\"\"\n    SMCR\n\n    slave\
    \ mode control register\n    \"\"\"\n\n    def __init__(self):\n        self._msm\
    \ = Field(\"msm\", 7, 1)\n        self._ts = Field(\"ts\", 4, 3)\n        self._sms\
    \ = Field(\"sms\", 0, 3)\n        super().__init__(\"SMCR\", 0x40014000 + 0x8)\n\
    \n    @property\n    def msm(self) -> Field:\n        \"\"\"\n        MSM\n\n\
    \        Master/Slave mode\n        \"\"\"\n        return self._msm\n\n    @msm.setter\n\
    \    def msm(self, value: int) -> None:\n        self._msm.value = value\n\n \
    \   @property\n    def ts(self) -> Field:\n        \"\"\"\n        TS\n\n    \
    \    Trigger selection\n        \"\"\"\n        return self._ts\n\n    @ts.setter\n\
    \    def ts(self, value: int) -> None:\n        self._ts.value = value\n\n   \
    \ @property\n    def sms(self) -> Field:\n        \"\"\"\n        SMS\n\n    \
    \    Slave mode selection\n        \"\"\"\n        return self._sms\n\n    @sms.setter\n\
    \    def sms(self, value: int) -> None:\n        self._sms.value = value\n\n\n\
    class DierRegister(Register):\n    \"\"\"\n    DIER\n\n    DMA/Interrupt enable\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._tie = Field(\"\
    tie\", 6, 1)\n        self._cc2ie = Field(\"cc2ie\", 2, 1)\n        self._cc1ie\
    \ = Field(\"cc1ie\", 1, 1)\n        self._uie = Field(\"uie\", 0, 1)\n       \
    \ super().__init__(\"DIER\", 0x40014000 + 0xC)\n\n    @property\n    def tie(self)\
    \ -> Field:\n        \"\"\"\n        TIE\n\n        Trigger interrupt enable\n\
    \        \"\"\"\n        return self._tie\n\n    @tie.setter\n    def tie(self,\
    \ value: int) -> None:\n        self._tie.value = value\n\n    @property\n   \
    \ def cc2ie(self) -> Field:\n        \"\"\"\n        CC2IE\n\n        Capture/Compare\
    \ 2 interrupt\n                  enable\n        \"\"\"\n        return self._cc2ie\n\
    \n    @cc2ie.setter\n    def cc2ie(self, value: int) -> None:\n        self._cc2ie.value\
    \ = value\n\n    @property\n    def cc1ie(self) -> Field:\n        \"\"\"\n  \
    \      CC1IE\n\n        Capture/Compare 1 interrupt\n                  enable\n\
    \        \"\"\"\n        return self._cc1ie\n\n    @cc1ie.setter\n    def cc1ie(self,\
    \ value: int) -> None:\n        self._cc1ie.value = value\n\n    @property\n \
    \   def uie(self) -> Field:\n        \"\"\"\n        UIE\n\n        Update interrupt\
    \ enable\n        \"\"\"\n        return self._uie\n\n    @uie.setter\n    def\
    \ uie(self, value: int) -> None:\n        self._uie.value = value\n\n\nclass SrRegister(Register):\n\
    \    \"\"\"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cc2of = Field(\"cc2of\", 10, 1)\n        self._cc1of = Field(\"\
    cc1of\", 9, 1)\n        self._tif = Field(\"tif\", 6, 1)\n        self._cc2if\
    \ = Field(\"cc2if\", 2, 1)\n        self._cc1if = Field(\"cc1if\", 1, 1)\n   \
    \     self._uif = Field(\"uif\", 0, 1)\n        super().__init__(\"SR\", 0x40014000\
    \ + 0x10)\n\n    @property\n    def cc2of(self) -> Field:\n        \"\"\"\n  \
    \      CC2OF\n\n        Capture/compare 2 overcapture\n                  flag\n\
    \        \"\"\"\n        return self._cc2of\n\n    @cc2of.setter\n    def cc2of(self,\
    \ value: int) -> None:\n        self._cc2of.value = value\n\n    @property\n \
    \   def cc1of(self) -> Field:\n        \"\"\"\n        CC1OF\n\n        Capture/Compare\
    \ 1 overcapture\n                  flag\n        \"\"\"\n        return self._cc1of\n\
    \n    @cc1of.setter\n    def cc1of(self, value: int) -> None:\n        self._cc1of.value\
    \ = value\n\n    @property\n    def tif(self) -> Field:\n        \"\"\"\n    \
    \    TIF\n\n        Trigger interrupt flag\n        \"\"\"\n        return self._tif\n\
    \n    @tif.setter\n    def tif(self, value: int) -> None:\n        self._tif.value\
    \ = value\n\n    @property\n    def cc2if(self) -> Field:\n        \"\"\"\n  \
    \      CC2IF\n\n        Capture/Compare 2 interrupt\n                  flag\n\
    \        \"\"\"\n        return self._cc2if\n\n    @cc2if.setter\n    def cc2if(self,\
    \ value: int) -> None:\n        self._cc2if.value = value\n\n    @property\n \
    \   def cc1if(self) -> Field:\n        \"\"\"\n        CC1IF\n\n        Capture/compare\
    \ 1 interrupt\n                  flag\n        \"\"\"\n        return self._cc1if\n\
    \n    @cc1if.setter\n    def cc1if(self, value: int) -> None:\n        self._cc1if.value\
    \ = value\n\n    @property\n    def uif(self) -> Field:\n        \"\"\"\n    \
    \    UIF\n\n        Update interrupt flag\n        \"\"\"\n        return self._uif\n\
    \n    @uif.setter\n    def uif(self, value: int) -> None:\n        self._uif.value\
    \ = value\n\n\nclass EgrRegister(Register):\n    \"\"\"\n    EGR\n\n    event\
    \ generation register\n    \"\"\"\n\n    def __init__(self):\n        self._tg\
    \ = Field(\"tg\", 6, 1)\n        self._cc2g = Field(\"cc2g\", 2, 1)\n        self._cc1g\
    \ = Field(\"cc1g\", 1, 1)\n        self._ug = Field(\"ug\", 0, 1)\n        super().__init__(\"\
    EGR\", 0x40014000 + 0x14)\n\n    @property\n    def tg(self) -> Field:\n     \
    \   \"\"\"\n        TG\n\n        Trigger generation\n        \"\"\"\n       \
    \ return self._tg\n\n    @tg.setter\n    def tg(self, value: int) -> None:\n \
    \       self._tg.value = value\n\n    @property\n    def cc2g(self) -> Field:\n\
    \        \"\"\"\n        CC2G\n\n        Capture/compare 2\n                 \
    \ generation\n        \"\"\"\n        return self._cc2g\n\n    @cc2g.setter\n\
    \    def cc2g(self, value: int) -> None:\n        self._cc2g.value = value\n\n\
    \    @property\n    def cc1g(self) -> Field:\n        \"\"\"\n        CC1G\n\n\
    \        Capture/compare 1\n                  generation\n        \"\"\"\n   \
    \     return self._cc1g\n\n    @cc1g.setter\n    def cc1g(self, value: int) ->\
    \ None:\n        self._cc1g.value = value\n\n    @property\n    def ug(self) ->\
    \ Field:\n        \"\"\"\n        UG\n\n        Update generation\n        \"\"\
    \"\n        return self._ug\n\n    @ug.setter\n    def ug(self, value: int) ->\
    \ None:\n        self._ug.value = value\n\n\nclass Ccmr1_outputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_OUTPUT\n\n    capture/compare mode register 1 (output\n\
    \              mode)\n    \"\"\"\n\n    def __init__(self):\n        self._oc2m\
    \ = Field(\"oc2m\", 12, 3)\n        self._oc2pe = Field(\"oc2pe\", 11, 1)\n  \
    \      self._oc2fe = Field(\"oc2fe\", 10, 1)\n        self._cc2s = Field(\"cc2s\"\
    , 8, 2)\n        self._oc1m = Field(\"oc1m\", 4, 3)\n        self._oc1pe = Field(\"\
    oc1pe\", 3, 1)\n        self._oc1fe = Field(\"oc1fe\", 2, 1)\n        self._cc1s\
    \ = Field(\"cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Output\", 0x40014000\
    \ + 0x18)\n\n    @property\n    def oc2m(self) -> Field:\n        \"\"\"\n   \
    \     OC2M\n\n        Output Compare 2 mode\n        \"\"\"\n        return self._oc2m\n\
    \n    @oc2m.setter\n    def oc2m(self, value: int) -> None:\n        self._oc2m.value\
    \ = value\n\n    @property\n    def oc2pe(self) -> Field:\n        \"\"\"\n  \
    \      OC2PE\n\n        Output Compare 2 preload\n                  enable\n \
    \       \"\"\"\n        return self._oc2pe\n\n    @oc2pe.setter\n    def oc2pe(self,\
    \ value: int) -> None:\n        self._oc2pe.value = value\n\n    @property\n \
    \   def oc2fe(self) -> Field:\n        \"\"\"\n        OC2FE\n\n        Output\
    \ Compare 2 fast\n                  enable\n        \"\"\"\n        return self._oc2fe\n\
    \n    @oc2fe.setter\n    def oc2fe(self, value: int) -> None:\n        self._oc2fe.value\
    \ = value\n\n    @property\n    def cc2s(self) -> Field:\n        \"\"\"\n   \
    \     CC2S\n\n        Capture/Compare 2\n                  selection\n       \
    \ \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n    def cc2s(self, value:\
    \ int) -> None:\n        self._cc2s.value = value\n\n    @property\n    def oc1m(self)\
    \ -> Field:\n        \"\"\"\n        OC1M\n\n        Output Compare 1 mode\n \
    \       \"\"\"\n        return self._oc1m\n\n    @oc1m.setter\n    def oc1m(self,\
    \ value: int) -> None:\n        self._oc1m.value = value\n\n    @property\n  \
    \  def oc1pe(self) -> Field:\n        \"\"\"\n        OC1PE\n\n        Output\
    \ Compare 1 preload\n                  enable\n        \"\"\"\n        return\
    \ self._oc1pe\n\n    @oc1pe.setter\n    def oc1pe(self, value: int) -> None:\n\
    \        self._oc1pe.value = value\n\n    @property\n    def oc1fe(self) -> Field:\n\
    \        \"\"\"\n        OC1FE\n\n        Output Compare 1 fast\n            \
    \      enable\n        \"\"\"\n        return self._oc1fe\n\n    @oc1fe.setter\n\
    \    def oc1fe(self, value: int) -> None:\n        self._oc1fe.value = value\n\
    \n    @property\n    def cc1s(self) -> Field:\n        \"\"\"\n        CC1S\n\n\
    \        Capture/Compare 1\n                  selection\n        \"\"\"\n    \
    \    return self._cc1s\n\n    @cc1s.setter\n    def cc1s(self, value: int) ->\
    \ None:\n        self._cc1s.value = value\n\n\nclass Ccmr1_inputRegister(Register):\n\
    \    \"\"\"\n    CCMR1_INPUT\n\n    capture/compare mode register 1 (input\n \
    \             mode)\n    \"\"\"\n\n    def __init__(self):\n        self._ic2f\
    \ = Field(\"ic2f\", 12, 3)\n        self._ic2pcs = Field(\"ic2pcs\", 10, 2)\n\
    \        self._cc2s = Field(\"cc2s\", 8, 2)\n        self._ic1f = Field(\"ic1f\"\
    , 4, 3)\n        self._icpcs = Field(\"icpcs\", 2, 2)\n        self._cc1s = Field(\"\
    cc1s\", 0, 2)\n        super().__init__(\"CCMR1_Input\", 0x40014000 + 0x18)\n\n\
    \    @property\n    def ic2f(self) -> Field:\n        \"\"\"\n        IC2F\n\n\
    \        Input capture 2 filter\n        \"\"\"\n        return self._ic2f\n\n\
    \    @ic2f.setter\n    def ic2f(self, value: int) -> None:\n        self._ic2f.value\
    \ = value\n\n    @property\n    def ic2pcs(self) -> Field:\n        \"\"\"\n \
    \       IC2PCS\n\n        Input capture 2 prescaler\n        \"\"\"\n        return\
    \ self._ic2pcs\n\n    @ic2pcs.setter\n    def ic2pcs(self, value: int) -> None:\n\
    \        self._ic2pcs.value = value\n\n    @property\n    def cc2s(self) -> Field:\n\
    \        \"\"\"\n        CC2S\n\n        Capture/Compare 2\n                 \
    \ selection\n        \"\"\"\n        return self._cc2s\n\n    @cc2s.setter\n \
    \   def cc2s(self, value: int) -> None:\n        self._cc2s.value = value\n\n\
    \    @property\n    def ic1f(self) -> Field:\n        \"\"\"\n        IC1F\n\n\
    \        Input capture 1 filter\n        \"\"\"\n        return self._ic1f\n\n\
    \    @ic1f.setter\n    def ic1f(self, value: int) -> None:\n        self._ic1f.value\
    \ = value\n\n    @property\n    def icpcs(self) -> Field:\n        \"\"\"\n  \
    \      ICPCS\n\n        Input capture 1 prescaler\n        \"\"\"\n        return\
    \ self._icpcs\n\n    @icpcs.setter\n    def icpcs(self, value: int) -> None:\n\
    \        self._icpcs.value = value\n\n    @property\n    def cc1s(self) -> Field:\n\
    \        \"\"\"\n        CC1S\n\n        Capture/Compare 1\n                 \
    \ selection\n        \"\"\"\n        return self._cc1s\n\n    @cc1s.setter\n \
    \   def cc1s(self, value: int) -> None:\n        self._cc1s.value = value\n\n\n\
    class CcerRegister(Register):\n    \"\"\"\n    CCER\n\n    capture/compare enable\n\
    \              register\n    \"\"\"\n\n    def __init__(self):\n        self._cc2np\
    \ = Field(\"cc2np\", 7, 1)\n        self._cc2p = Field(\"cc2p\", 5, 1)\n     \
    \   self._cc2e = Field(\"cc2e\", 4, 1)\n        self._cc1np = Field(\"cc1np\"\
    , 3, 1)\n        self._cc1p = Field(\"cc1p\", 1, 1)\n        self._cc1e = Field(\"\
    cc1e\", 0, 1)\n        super().__init__(\"CCER\", 0x40014000 + 0x20)\n\n    @property\n\
    \    def cc2np(self) -> Field:\n        \"\"\"\n        CC2NP\n\n        Capture/Compare\
    \ 2 output\n                  Polarity\n        \"\"\"\n        return self._cc2np\n\
    \n    @cc2np.setter\n    def cc2np(self, value: int) -> None:\n        self._cc2np.value\
    \ = value\n\n    @property\n    def cc2p(self) -> Field:\n        \"\"\"\n   \
    \     CC2P\n\n        Capture/Compare 2 output\n                  Polarity\n \
    \       \"\"\"\n        return self._cc2p\n\n    @cc2p.setter\n    def cc2p(self,\
    \ value: int) -> None:\n        self._cc2p.value = value\n\n    @property\n  \
    \  def cc2e(self) -> Field:\n        \"\"\"\n        CC2E\n\n        Capture/Compare\
    \ 2 output\n                  enable\n        \"\"\"\n        return self._cc2e\n\
    \n    @cc2e.setter\n    def cc2e(self, value: int) -> None:\n        self._cc2e.value\
    \ = value\n\n    @property\n    def cc1np(self) -> Field:\n        \"\"\"\n  \
    \      CC1NP\n\n        Capture/Compare 1 output\n                  Polarity\n\
    \        \"\"\"\n        return self._cc1np\n\n    @cc1np.setter\n    def cc1np(self,\
    \ value: int) -> None:\n        self._cc1np.value = value\n\n    @property\n \
    \   def cc1p(self) -> Field:\n        \"\"\"\n        CC1P\n\n        Capture/Compare\
    \ 1 output\n                  Polarity\n        \"\"\"\n        return self._cc1p\n\
    \n    @cc1p.setter\n    def cc1p(self, value: int) -> None:\n        self._cc1p.value\
    \ = value\n\n    @property\n    def cc1e(self) -> Field:\n        \"\"\"\n   \
    \     CC1E\n\n        Capture/Compare 1 output\n                  enable\n   \
    \     \"\"\"\n        return self._cc1e\n\n    @cc1e.setter\n    def cc1e(self,\
    \ value: int) -> None:\n        self._cc1e.value = value\n\n\nclass CntRegister(Register):\n\
    \    \"\"\"\n    CNT\n\n    counter\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._cnt = Field(\"cnt\", 0, 16)\n        super().__init__(\"CNT\", 0x40014000\
    \ + 0x24)\n\n    @property\n    def cnt(self) -> Field:\n        \"\"\"\n    \
    \    CNT\n\n        counter value\n        \"\"\"\n        return self._cnt\n\n\
    \    @cnt.setter\n    def cnt(self, value: int) -> None:\n        self._cnt.value\
    \ = value\n\n\nclass PscRegister(Register):\n    \"\"\"\n    PSC\n\n    prescaler\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._psc = Field(\"psc\", 0,\
    \ 16)\n        super().__init__(\"PSC\", 0x40014000 + 0x28)\n\n    @property\n\
    \    def psc(self) -> Field:\n        \"\"\"\n        PSC\n\n        Prescaler\
    \ value\n        \"\"\"\n        return self._psc\n\n    @psc.setter\n    def\
    \ psc(self, value: int) -> None:\n        self._psc.value = value\n\n\nclass ArrRegister(Register):\n\
    \    \"\"\"\n    ARR\n\n    auto-reload register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._arr = Field(\"arr\", 0, 16)\n        super().__init__(\"ARR\",\
    \ 0x40014000 + 0x2C)\n\n    @property\n    def arr(self) -> Field:\n        \"\
    \"\"\n        ARR\n\n        Auto-reload value\n        \"\"\"\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n\nclass Ccr1Register(Register):\n    \"\"\"\n \
    \   CCR1\n\n    capture/compare register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr1 = Field(\"ccr1\", 0, 16)\n        super().__init__(\"CCR1\"\
    , 0x40014000 + 0x34)\n\n    @property\n    def ccr1(self) -> Field:\n        \"\
    \"\"\n        CCR1\n\n        Capture/Compare 1 value\n        \"\"\"\n      \
    \  return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int) -> None:\n\
    \        self._ccr1.value = value\n\n\nclass Ccr2Register(Register):\n    \"\"\
    \"\n    CCR2\n\n    capture/compare register 2\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ccr2 = Field(\"ccr2\", 0, 16)\n        super().__init__(\"CCR2\"\
    , 0x40014000 + 0x38)\n\n    @property\n    def ccr2(self) -> Field:\n        \"\
    \"\"\n        CCR2\n\n        Capture/Compare 2 value\n        \"\"\"\n      \
    \  return self._ccr2\n\n    @ccr2.setter\n    def ccr2(self, value: int) -> None:\n\
    \        self._ccr2.value = value\n\n\nclass Tim9(Peripheral):\n    \"\"\"\n \
    \   TIM9\n\n    General purpose timers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cr1 = Cr1Register()\n        self._cr2 = Cr2Register()\n      \
    \  self._smcr = SmcrRegister()\n        self._dier = DierRegister()\n        self._sr\
    \ = SrRegister()\n        self._egr = EgrRegister()\n        self._ccmr1_output\
    \ = Ccmr1_outputRegister()\n        self._ccmr1_input = Ccmr1_inputRegister()\n\
    \        self._ccer = CcerRegister()\n        self._cnt = CntRegister()\n    \
    \    self._psc = PscRegister()\n        self._arr = ArrRegister()\n        self._ccr1\
    \ = Ccr1Register()\n        self._ccr2 = Ccr2Register()\n        super().__init__(\"\
    tim9\", 0x40014000)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def smcr(self)\
    \ -> SmcrRegister:\n        return self._smcr\n\n    @smcr.setter\n    def smcr(self,\
    \ value: int) -> None:\n        self._smcr.value = value\n\n    @property\n  \
    \  def dier(self) -> DierRegister:\n        return self._dier\n\n    @dier.setter\n\
    \    def dier(self, value: int) -> None:\n        self._dier.value = value\n\n\
    \    @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\n \
    \   @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value\
    \ = value\n\n    @property\n    def egr(self) -> EgrRegister:\n        return\
    \ self._egr\n\n    @egr.setter\n    def egr(self, value: int) -> None:\n     \
    \   self._egr.value = value\n\n    @property\n    def ccmr1_output(self) -> Ccmr1_outputRegister:\n\
    \        return self._ccmr1_output\n\n    @ccmr1_output.setter\n    def ccmr1_output(self,\
    \ value: int) -> None:\n        self._ccmr1_output.value = value\n\n    @property\n\
    \    def ccmr1_input(self) -> Ccmr1_inputRegister:\n        return self._ccmr1_input\n\
    \n    @ccmr1_input.setter\n    def ccmr1_input(self, value: int) -> None:\n  \
    \      self._ccmr1_input.value = value\n\n    @property\n    def ccer(self) ->\
    \ CcerRegister:\n        return self._ccer\n\n    @ccer.setter\n    def ccer(self,\
    \ value: int) -> None:\n        self._ccer.value = value\n\n    @property\n  \
    \  def cnt(self) -> CntRegister:\n        return self._cnt\n\n    @cnt.setter\n\
    \    def cnt(self, value: int) -> None:\n        self._cnt.value = value\n\n \
    \   @property\n    def psc(self) -> PscRegister:\n        return self._psc\n\n\
    \    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n    @property\n    def arr(self) -> ArrRegister:\n        return\
    \ self._arr\n\n    @arr.setter\n    def arr(self, value: int) -> None:\n     \
    \   self._arr.value = value\n\n    @property\n    def ccr1(self) -> Ccr1Register:\n\
    \        return self._ccr1\n\n    @ccr1.setter\n    def ccr1(self, value: int)\
    \ -> None:\n        self._ccr1.value = value\n\n    @property\n    def ccr2(self)\
    \ -> Ccr2Register:\n        return self._ccr2\n\n    @ccr2.setter\n    def ccr2(self,\
    \ value: int) -> None:\n        self._ccr2.value = value\n"
  name: TIM9
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    Status\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._cts = Field(\"\
    cts\", 9, 1)\n        self._lbd = Field(\"lbd\", 8, 1)\n        self._txe = Field(\"\
    txe\", 7, 1)\n        self._tc = Field(\"tc\", 6, 1)\n        self._rxne = Field(\"\
    rxne\", 5, 1)\n        self._idle = Field(\"idle\", 4, 1)\n        self._ore =\
    \ Field(\"ore\", 3, 1)\n        self._nf = Field(\"nf\", 2, 1)\n        self._fe\
    \ = Field(\"fe\", 1, 1)\n        self._pe = Field(\"pe\", 0, 1)\n        super().__init__(\"\
    SR\", 0x40011000 + 0x0)\n\n    @property\n    def cts(self) -> Field:\n      \
    \  \"\"\"\n        CTS\n\n        CTS flag\n        \"\"\"\n        return self._cts\n\
    \n    @cts.setter\n    def cts(self, value: int) -> None:\n        self._cts.value\
    \ = value\n\n    @property\n    def lbd(self) -> Field:\n        \"\"\"\n    \
    \    LBD\n\n        LIN break detection flag\n        \"\"\"\n        return self._lbd\n\
    \n    @lbd.setter\n    def lbd(self, value: int) -> None:\n        self._lbd.value\
    \ = value\n\n    @property\n    def txe(self) -> Field:\n        \"\"\"\n    \
    \    TXE\n\n        Transmit data register\n                  empty\n        \"\
    \"\"\n        return self._txe\n\n    @txe.setter\n    def txe(self, value: int)\
    \ -> None:\n        self._txe.value = value\n\n    @property\n    def tc(self)\
    \ -> Field:\n        \"\"\"\n        TC\n\n        Transmission complete\n   \
    \     \"\"\"\n        return self._tc\n\n    @tc.setter\n    def tc(self, value:\
    \ int) -> None:\n        self._tc.value = value\n\n    @property\n    def rxne(self)\
    \ -> Field:\n        \"\"\"\n        RXNE\n\n        Read data register not\n\
    \                  empty\n        \"\"\"\n        return self._rxne\n\n    @rxne.setter\n\
    \    def rxne(self, value: int) -> None:\n        self._rxne.value = value\n\n\
    \    @property\n    def idle(self) -> Field:\n        \"\"\"\n        IDLE\n\n\
    \        IDLE line detected\n        \"\"\"\n        return self._idle\n\n   \
    \ @idle.setter\n    def idle(self, value: int) -> None:\n        self._idle.value\
    \ = value\n\n    @property\n    def ore(self) -> Field:\n        \"\"\"\n    \
    \    ORE\n\n        Overrun error\n        \"\"\"\n        return self._ore\n\n\
    \    @ore.setter\n    def ore(self, value: int) -> None:\n        self._ore.value\
    \ = value\n\n    @property\n    def nf(self) -> Field:\n        \"\"\"\n     \
    \   NF\n\n        Noise detected flag\n        \"\"\"\n        return self._nf\n\
    \n    @nf.setter\n    def nf(self, value: int) -> None:\n        self._nf.value\
    \ = value\n\n    @property\n    def fe(self) -> Field:\n        \"\"\"\n     \
    \   FE\n\n        Framing error\n        \"\"\"\n        return self._fe\n\n \
    \   @fe.setter\n    def fe(self, value: int) -> None:\n        self._fe.value\
    \ = value\n\n    @property\n    def pe(self) -> Field:\n        \"\"\"\n     \
    \   PE\n\n        Parity error\n        \"\"\"\n        return self._pe\n\n  \
    \  @pe.setter\n    def pe(self, value: int) -> None:\n        self._pe.value =\
    \ value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 9)\n\
    \        super().__init__(\"DR\", 0x40011000 + 0x4)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        Data value\n     \
    \   \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass BrrRegister(Register):\n\
    \    \"\"\"\n    BRR\n\n    Baud rate register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._div_mantissa = Field(\"div_mantissa\", 4, 12)\n        self._div_fraction\
    \ = Field(\"div_fraction\", 0, 4)\n        super().__init__(\"BRR\", 0x40011000\
    \ + 0x8)\n\n    @property\n    def div_mantissa(self) -> Field:\n        \"\"\"\
    \n        DIV_MANTISSA\n\n        mantissa of USARTDIV\n        \"\"\"\n     \
    \   return self._div_mantissa\n\n    @div_mantissa.setter\n    def div_mantissa(self,\
    \ value: int) -> None:\n        self._div_mantissa.value = value\n\n    @property\n\
    \    def div_fraction(self) -> Field:\n        \"\"\"\n        DIV_FRACTION\n\n\
    \        fraction of USARTDIV\n        \"\"\"\n        return self._div_fraction\n\
    \n    @div_fraction.setter\n    def div_fraction(self, value: int) -> None:\n\
    \        self._div_fraction.value = value\n\n\nclass Cr1Register(Register):\n\
    \    \"\"\"\n    CR1\n\n    Control register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._over8 = Field(\"over8\", 15, 1)\n        self._ue = Field(\"ue\"\
    , 13, 1)\n        self._m = Field(\"m\", 12, 1)\n        self._wake = Field(\"\
    wake\", 11, 1)\n        self._pce = Field(\"pce\", 10, 1)\n        self._ps =\
    \ Field(\"ps\", 9, 1)\n        self._peie = Field(\"peie\", 8, 1)\n        self._txeie\
    \ = Field(\"txeie\", 7, 1)\n        self._tcie = Field(\"tcie\", 6, 1)\n     \
    \   self._rxneie = Field(\"rxneie\", 5, 1)\n        self._idleie = Field(\"idleie\"\
    , 4, 1)\n        self._te = Field(\"te\", 3, 1)\n        self._re = Field(\"re\"\
    , 2, 1)\n        self._rwu = Field(\"rwu\", 1, 1)\n        self._sbk = Field(\"\
    sbk\", 0, 1)\n        super().__init__(\"CR1\", 0x40011000 + 0xC)\n\n    @property\n\
    \    def over8(self) -> Field:\n        \"\"\"\n        OVER8\n\n        Oversampling\
    \ mode\n        \"\"\"\n        return self._over8\n\n    @over8.setter\n    def\
    \ over8(self, value: int) -> None:\n        self._over8.value = value\n\n    @property\n\
    \    def ue(self) -> Field:\n        \"\"\"\n        UE\n\n        USART enable\n\
    \        \"\"\"\n        return self._ue\n\n    @ue.setter\n    def ue(self, value:\
    \ int) -> None:\n        self._ue.value = value\n\n    @property\n    def m(self)\
    \ -> Field:\n        \"\"\"\n        M\n\n        Word length\n        \"\"\"\n\
    \        return self._m\n\n    @m.setter\n    def m(self, value: int) -> None:\n\
    \        self._m.value = value\n\n    @property\n    def wake(self) -> Field:\n\
    \        \"\"\"\n        WAKE\n\n        Wakeup method\n        \"\"\"\n     \
    \   return self._wake\n\n    @wake.setter\n    def wake(self, value: int) -> None:\n\
    \        self._wake.value = value\n\n    @property\n    def pce(self) -> Field:\n\
    \        \"\"\"\n        PCE\n\n        Parity control enable\n        \"\"\"\n\
    \        return self._pce\n\n    @pce.setter\n    def pce(self, value: int) ->\
    \ None:\n        self._pce.value = value\n\n    @property\n    def ps(self) ->\
    \ Field:\n        \"\"\"\n        PS\n\n        Parity selection\n        \"\"\
    \"\n        return self._ps\n\n    @ps.setter\n    def ps(self, value: int) ->\
    \ None:\n        self._ps.value = value\n\n    @property\n    def peie(self) ->\
    \ Field:\n        \"\"\"\n        PEIE\n\n        PE interrupt enable\n      \
    \  \"\"\"\n        return self._peie\n\n    @peie.setter\n    def peie(self, value:\
    \ int) -> None:\n        self._peie.value = value\n\n    @property\n    def txeie(self)\
    \ -> Field:\n        \"\"\"\n        TXEIE\n\n        TXE interrupt enable\n \
    \       \"\"\"\n        return self._txeie\n\n    @txeie.setter\n    def txeie(self,\
    \ value: int) -> None:\n        self._txeie.value = value\n\n    @property\n \
    \   def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transmission\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def rxneie(self) -> Field:\n\
    \        \"\"\"\n        RXNEIE\n\n        RXNE interrupt enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ idleie(self) -> Field:\n        \"\"\"\n        IDLEIE\n\n        IDLE interrupt\
    \ enable\n        \"\"\"\n        return self._idleie\n\n    @idleie.setter\n\
    \    def idleie(self, value: int) -> None:\n        self._idleie.value = value\n\
    \n    @property\n    def te(self) -> Field:\n        \"\"\"\n        TE\n\n  \
    \      Transmitter enable\n        \"\"\"\n        return self._te\n\n    @te.setter\n\
    \    def te(self, value: int) -> None:\n        self._te.value = value\n\n   \
    \ @property\n    def re(self) -> Field:\n        \"\"\"\n        RE\n\n      \
    \  Receiver enable\n        \"\"\"\n        return self._re\n\n    @re.setter\n\
    \    def re(self, value: int) -> None:\n        self._re.value = value\n\n   \
    \ @property\n    def rwu(self) -> Field:\n        \"\"\"\n        RWU\n\n    \
    \    Receiver wakeup\n        \"\"\"\n        return self._rwu\n\n    @rwu.setter\n\
    \    def rwu(self, value: int) -> None:\n        self._rwu.value = value\n\n \
    \   @property\n    def sbk(self) -> Field:\n        \"\"\"\n        SBK\n\n  \
    \      Send break\n        \"\"\"\n        return self._sbk\n\n    @sbk.setter\n\
    \    def sbk(self, value: int) -> None:\n        self._sbk.value = value\n\n\n\
    class Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    Control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._linen = Field(\"linen\"\
    , 14, 1)\n        self._stop = Field(\"stop\", 12, 2)\n        self._clken = Field(\"\
    clken\", 11, 1)\n        self._cpol = Field(\"cpol\", 10, 1)\n        self._cpha\
    \ = Field(\"cpha\", 9, 1)\n        self._lbcl = Field(\"lbcl\", 8, 1)\n      \
    \  self._lbdie = Field(\"lbdie\", 6, 1)\n        self._lbdl = Field(\"lbdl\",\
    \ 5, 1)\n        self._add = Field(\"add\", 0, 4)\n        super().__init__(\"\
    CR2\", 0x40011000 + 0x10)\n\n    @property\n    def linen(self) -> Field:\n  \
    \      \"\"\"\n        LINEN\n\n        LIN mode enable\n        \"\"\"\n    \
    \    return self._linen\n\n    @linen.setter\n    def linen(self, value: int)\
    \ -> None:\n        self._linen.value = value\n\n    @property\n    def stop(self)\
    \ -> Field:\n        \"\"\"\n        STOP\n\n        STOP bits\n        \"\"\"\
    \n        return self._stop\n\n    @stop.setter\n    def stop(self, value: int)\
    \ -> None:\n        self._stop.value = value\n\n    @property\n    def clken(self)\
    \ -> Field:\n        \"\"\"\n        CLKEN\n\n        Clock enable\n        \"\
    \"\"\n        return self._clken\n\n    @clken.setter\n    def clken(self, value:\
    \ int) -> None:\n        self._clken.value = value\n\n    @property\n    def cpol(self)\
    \ -> Field:\n        \"\"\"\n        CPOL\n\n        Clock polarity\n        \"\
    \"\"\n        return self._cpol\n\n    @cpol.setter\n    def cpol(self, value:\
    \ int) -> None:\n        self._cpol.value = value\n\n    @property\n    def cpha(self)\
    \ -> Field:\n        \"\"\"\n        CPHA\n\n        Clock phase\n        \"\"\
    \"\n        return self._cpha\n\n    @cpha.setter\n    def cpha(self, value: int)\
    \ -> None:\n        self._cpha.value = value\n\n    @property\n    def lbcl(self)\
    \ -> Field:\n        \"\"\"\n        LBCL\n\n        Last bit clock pulse\n  \
    \      \"\"\"\n        return self._lbcl\n\n    @lbcl.setter\n    def lbcl(self,\
    \ value: int) -> None:\n        self._lbcl.value = value\n\n    @property\n  \
    \  def lbdie(self) -> Field:\n        \"\"\"\n        LBDIE\n\n        LIN break\
    \ detection interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._lbdie\n\n    @lbdie.setter\n    def lbdie(self, value: int) -> None:\n\
    \        self._lbdie.value = value\n\n    @property\n    def lbdl(self) -> Field:\n\
    \        \"\"\"\n        LBDL\n\n        lin break detection length\n        \"\
    \"\"\n        return self._lbdl\n\n    @lbdl.setter\n    def lbdl(self, value:\
    \ int) -> None:\n        self._lbdl.value = value\n\n    @property\n    def add(self)\
    \ -> Field:\n        \"\"\"\n        ADD\n\n        Address of the USART node\n\
    \        \"\"\"\n        return self._add\n\n    @add.setter\n    def add(self,\
    \ value: int) -> None:\n        self._add.value = value\n\n\nclass Cr3Register(Register):\n\
    \    \"\"\"\n    CR3\n\n    Control register 3\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._onebit = Field(\"onebit\", 11, 1)\n        self._ctsie = Field(\"\
    ctsie\", 10, 1)\n        self._ctse = Field(\"ctse\", 9, 1)\n        self._rtse\
    \ = Field(\"rtse\", 8, 1)\n        self._dmat = Field(\"dmat\", 7, 1)\n      \
    \  self._dmar = Field(\"dmar\", 6, 1)\n        self._scen = Field(\"scen\", 5,\
    \ 1)\n        self._nack = Field(\"nack\", 4, 1)\n        self._hdsel = Field(\"\
    hdsel\", 3, 1)\n        self._irlp = Field(\"irlp\", 2, 1)\n        self._iren\
    \ = Field(\"iren\", 1, 1)\n        self._eie = Field(\"eie\", 0, 1)\n        super().__init__(\"\
    CR3\", 0x40011000 + 0x14)\n\n    @property\n    def onebit(self) -> Field:\n \
    \       \"\"\"\n        ONEBIT\n\n        One sample bit method\n            \
    \      enable\n        \"\"\"\n        return self._onebit\n\n    @onebit.setter\n\
    \    def onebit(self, value: int) -> None:\n        self._onebit.value = value\n\
    \n    @property\n    def ctsie(self) -> Field:\n        \"\"\"\n        CTSIE\n\
    \n        CTS interrupt enable\n        \"\"\"\n        return self._ctsie\n\n\
    \    @ctsie.setter\n    def ctsie(self, value: int) -> None:\n        self._ctsie.value\
    \ = value\n\n    @property\n    def ctse(self) -> Field:\n        \"\"\"\n   \
    \     CTSE\n\n        CTS enable\n        \"\"\"\n        return self._ctse\n\n\
    \    @ctse.setter\n    def ctse(self, value: int) -> None:\n        self._ctse.value\
    \ = value\n\n    @property\n    def rtse(self) -> Field:\n        \"\"\"\n   \
    \     RTSE\n\n        RTS enable\n        \"\"\"\n        return self._rtse\n\n\
    \    @rtse.setter\n    def rtse(self, value: int) -> None:\n        self._rtse.value\
    \ = value\n\n    @property\n    def dmat(self) -> Field:\n        \"\"\"\n   \
    \     DMAT\n\n        DMA enable transmitter\n        \"\"\"\n        return self._dmat\n\
    \n    @dmat.setter\n    def dmat(self, value: int) -> None:\n        self._dmat.value\
    \ = value\n\n    @property\n    def dmar(self) -> Field:\n        \"\"\"\n   \
    \     DMAR\n\n        DMA enable receiver\n        \"\"\"\n        return self._dmar\n\
    \n    @dmar.setter\n    def dmar(self, value: int) -> None:\n        self._dmar.value\
    \ = value\n\n    @property\n    def scen(self) -> Field:\n        \"\"\"\n   \
    \     SCEN\n\n        Smartcard mode enable\n        \"\"\"\n        return self._scen\n\
    \n    @scen.setter\n    def scen(self, value: int) -> None:\n        self._scen.value\
    \ = value\n\n    @property\n    def nack(self) -> Field:\n        \"\"\"\n   \
    \     NACK\n\n        Smartcard NACK enable\n        \"\"\"\n        return self._nack\n\
    \n    @nack.setter\n    def nack(self, value: int) -> None:\n        self._nack.value\
    \ = value\n\n    @property\n    def hdsel(self) -> Field:\n        \"\"\"\n  \
    \      HDSEL\n\n        Half-duplex selection\n        \"\"\"\n        return\
    \ self._hdsel\n\n    @hdsel.setter\n    def hdsel(self, value: int) -> None:\n\
    \        self._hdsel.value = value\n\n    @property\n    def irlp(self) -> Field:\n\
    \        \"\"\"\n        IRLP\n\n        IrDA low-power\n        \"\"\"\n    \
    \    return self._irlp\n\n    @irlp.setter\n    def irlp(self, value: int) ->\
    \ None:\n        self._irlp.value = value\n\n    @property\n    def iren(self)\
    \ -> Field:\n        \"\"\"\n        IREN\n\n        IrDA mode enable\n      \
    \  \"\"\"\n        return self._iren\n\n    @iren.setter\n    def iren(self, value:\
    \ int) -> None:\n        self._iren.value = value\n\n    @property\n    def eie(self)\
    \ -> Field:\n        \"\"\"\n        EIE\n\n        Error interrupt enable\n \
    \       \"\"\"\n        return self._eie\n\n    @eie.setter\n    def eie(self,\
    \ value: int) -> None:\n        self._eie.value = value\n\n\nclass GtprRegister(Register):\n\
    \    \"\"\"\n    GTPR\n\n    Guard time and prescaler\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._gt = Field(\"gt\", 8, 8)\n\
    \        self._psc = Field(\"psc\", 0, 8)\n        super().__init__(\"GTPR\",\
    \ 0x40011000 + 0x18)\n\n    @property\n    def gt(self) -> Field:\n        \"\"\
    \"\n        GT\n\n        Guard time value\n        \"\"\"\n        return self._gt\n\
    \n    @gt.setter\n    def gt(self, value: int) -> None:\n        self._gt.value\
    \ = value\n\n    @property\n    def psc(self) -> Field:\n        \"\"\"\n    \
    \    PSC\n\n        Prescaler value\n        \"\"\"\n        return self._psc\n\
    \n    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n\nclass Usart1(Peripheral):\n    \"\"\"\n    USART1\n\n    Universal\
    \ synchronous asynchronous receiver\n          transmitter\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._sr = SrRegister()\n        self._dr = DrRegister()\n\
    \        self._brr = BrrRegister()\n        self._cr1 = Cr1Register()\n      \
    \  self._cr2 = Cr2Register()\n        self._cr3 = Cr3Register()\n        self._gtpr\
    \ = GtprRegister()\n        super().__init__(\"usart1\", 0x40011000)\n\n    @property\n\
    \    def sr(self) -> SrRegister:\n        return self._sr\n\n    @sr.setter\n\
    \    def sr(self, value: int) -> None:\n        self._sr.value = value\n\n   \
    \ @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n   \
    \ @property\n    def brr(self) -> BrrRegister:\n        return self._brr\n\n \
    \   @brr.setter\n    def brr(self, value: int) -> None:\n        self._brr.value\
    \ = value\n\n    @property\n    def cr1(self) -> Cr1Register:\n        return\
    \ self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n     \
    \   self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def cr3(self) ->\
    \ Cr3Register:\n        return self._cr3\n\n    @cr3.setter\n    def cr3(self,\
    \ value: int) -> None:\n        self._cr3.value = value\n\n    @property\n   \
    \ def gtpr(self) -> GtprRegister:\n        return self._gtpr\n\n    @gtpr.setter\n\
    \    def gtpr(self, value: int) -> None:\n        self._gtpr.value = value\n"
  name: USART1
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    Status\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._cts = Field(\"\
    cts\", 9, 1)\n        self._lbd = Field(\"lbd\", 8, 1)\n        self._txe = Field(\"\
    txe\", 7, 1)\n        self._tc = Field(\"tc\", 6, 1)\n        self._rxne = Field(\"\
    rxne\", 5, 1)\n        self._idle = Field(\"idle\", 4, 1)\n        self._ore =\
    \ Field(\"ore\", 3, 1)\n        self._nf = Field(\"nf\", 2, 1)\n        self._fe\
    \ = Field(\"fe\", 1, 1)\n        self._pe = Field(\"pe\", 0, 1)\n        super().__init__(\"\
    SR\", 0x40004400 + 0x0)\n\n    @property\n    def cts(self) -> Field:\n      \
    \  \"\"\"\n        CTS\n\n        CTS flag\n        \"\"\"\n        return self._cts\n\
    \n    @cts.setter\n    def cts(self, value: int) -> None:\n        self._cts.value\
    \ = value\n\n    @property\n    def lbd(self) -> Field:\n        \"\"\"\n    \
    \    LBD\n\n        LIN break detection flag\n        \"\"\"\n        return self._lbd\n\
    \n    @lbd.setter\n    def lbd(self, value: int) -> None:\n        self._lbd.value\
    \ = value\n\n    @property\n    def txe(self) -> Field:\n        \"\"\"\n    \
    \    TXE\n\n        Transmit data register\n                  empty\n        \"\
    \"\"\n        return self._txe\n\n    @txe.setter\n    def txe(self, value: int)\
    \ -> None:\n        self._txe.value = value\n\n    @property\n    def tc(self)\
    \ -> Field:\n        \"\"\"\n        TC\n\n        Transmission complete\n   \
    \     \"\"\"\n        return self._tc\n\n    @tc.setter\n    def tc(self, value:\
    \ int) -> None:\n        self._tc.value = value\n\n    @property\n    def rxne(self)\
    \ -> Field:\n        \"\"\"\n        RXNE\n\n        Read data register not\n\
    \                  empty\n        \"\"\"\n        return self._rxne\n\n    @rxne.setter\n\
    \    def rxne(self, value: int) -> None:\n        self._rxne.value = value\n\n\
    \    @property\n    def idle(self) -> Field:\n        \"\"\"\n        IDLE\n\n\
    \        IDLE line detected\n        \"\"\"\n        return self._idle\n\n   \
    \ @idle.setter\n    def idle(self, value: int) -> None:\n        self._idle.value\
    \ = value\n\n    @property\n    def ore(self) -> Field:\n        \"\"\"\n    \
    \    ORE\n\n        Overrun error\n        \"\"\"\n        return self._ore\n\n\
    \    @ore.setter\n    def ore(self, value: int) -> None:\n        self._ore.value\
    \ = value\n\n    @property\n    def nf(self) -> Field:\n        \"\"\"\n     \
    \   NF\n\n        Noise detected flag\n        \"\"\"\n        return self._nf\n\
    \n    @nf.setter\n    def nf(self, value: int) -> None:\n        self._nf.value\
    \ = value\n\n    @property\n    def fe(self) -> Field:\n        \"\"\"\n     \
    \   FE\n\n        Framing error\n        \"\"\"\n        return self._fe\n\n \
    \   @fe.setter\n    def fe(self, value: int) -> None:\n        self._fe.value\
    \ = value\n\n    @property\n    def pe(self) -> Field:\n        \"\"\"\n     \
    \   PE\n\n        Parity error\n        \"\"\"\n        return self._pe\n\n  \
    \  @pe.setter\n    def pe(self, value: int) -> None:\n        self._pe.value =\
    \ value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 9)\n\
    \        super().__init__(\"DR\", 0x40004400 + 0x4)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        Data value\n     \
    \   \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass BrrRegister(Register):\n\
    \    \"\"\"\n    BRR\n\n    Baud rate register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._div_mantissa = Field(\"div_mantissa\", 4, 12)\n        self._div_fraction\
    \ = Field(\"div_fraction\", 0, 4)\n        super().__init__(\"BRR\", 0x40004400\
    \ + 0x8)\n\n    @property\n    def div_mantissa(self) -> Field:\n        \"\"\"\
    \n        DIV_MANTISSA\n\n        mantissa of USARTDIV\n        \"\"\"\n     \
    \   return self._div_mantissa\n\n    @div_mantissa.setter\n    def div_mantissa(self,\
    \ value: int) -> None:\n        self._div_mantissa.value = value\n\n    @property\n\
    \    def div_fraction(self) -> Field:\n        \"\"\"\n        DIV_FRACTION\n\n\
    \        fraction of USARTDIV\n        \"\"\"\n        return self._div_fraction\n\
    \n    @div_fraction.setter\n    def div_fraction(self, value: int) -> None:\n\
    \        self._div_fraction.value = value\n\n\nclass Cr1Register(Register):\n\
    \    \"\"\"\n    CR1\n\n    Control register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._over8 = Field(\"over8\", 15, 1)\n        self._ue = Field(\"ue\"\
    , 13, 1)\n        self._m = Field(\"m\", 12, 1)\n        self._wake = Field(\"\
    wake\", 11, 1)\n        self._pce = Field(\"pce\", 10, 1)\n        self._ps =\
    \ Field(\"ps\", 9, 1)\n        self._peie = Field(\"peie\", 8, 1)\n        self._txeie\
    \ = Field(\"txeie\", 7, 1)\n        self._tcie = Field(\"tcie\", 6, 1)\n     \
    \   self._rxneie = Field(\"rxneie\", 5, 1)\n        self._idleie = Field(\"idleie\"\
    , 4, 1)\n        self._te = Field(\"te\", 3, 1)\n        self._re = Field(\"re\"\
    , 2, 1)\n        self._rwu = Field(\"rwu\", 1, 1)\n        self._sbk = Field(\"\
    sbk\", 0, 1)\n        super().__init__(\"CR1\", 0x40004400 + 0xC)\n\n    @property\n\
    \    def over8(self) -> Field:\n        \"\"\"\n        OVER8\n\n        Oversampling\
    \ mode\n        \"\"\"\n        return self._over8\n\n    @over8.setter\n    def\
    \ over8(self, value: int) -> None:\n        self._over8.value = value\n\n    @property\n\
    \    def ue(self) -> Field:\n        \"\"\"\n        UE\n\n        USART enable\n\
    \        \"\"\"\n        return self._ue\n\n    @ue.setter\n    def ue(self, value:\
    \ int) -> None:\n        self._ue.value = value\n\n    @property\n    def m(self)\
    \ -> Field:\n        \"\"\"\n        M\n\n        Word length\n        \"\"\"\n\
    \        return self._m\n\n    @m.setter\n    def m(self, value: int) -> None:\n\
    \        self._m.value = value\n\n    @property\n    def wake(self) -> Field:\n\
    \        \"\"\"\n        WAKE\n\n        Wakeup method\n        \"\"\"\n     \
    \   return self._wake\n\n    @wake.setter\n    def wake(self, value: int) -> None:\n\
    \        self._wake.value = value\n\n    @property\n    def pce(self) -> Field:\n\
    \        \"\"\"\n        PCE\n\n        Parity control enable\n        \"\"\"\n\
    \        return self._pce\n\n    @pce.setter\n    def pce(self, value: int) ->\
    \ None:\n        self._pce.value = value\n\n    @property\n    def ps(self) ->\
    \ Field:\n        \"\"\"\n        PS\n\n        Parity selection\n        \"\"\
    \"\n        return self._ps\n\n    @ps.setter\n    def ps(self, value: int) ->\
    \ None:\n        self._ps.value = value\n\n    @property\n    def peie(self) ->\
    \ Field:\n        \"\"\"\n        PEIE\n\n        PE interrupt enable\n      \
    \  \"\"\"\n        return self._peie\n\n    @peie.setter\n    def peie(self, value:\
    \ int) -> None:\n        self._peie.value = value\n\n    @property\n    def txeie(self)\
    \ -> Field:\n        \"\"\"\n        TXEIE\n\n        TXE interrupt enable\n \
    \       \"\"\"\n        return self._txeie\n\n    @txeie.setter\n    def txeie(self,\
    \ value: int) -> None:\n        self._txeie.value = value\n\n    @property\n \
    \   def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transmission\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def rxneie(self) -> Field:\n\
    \        \"\"\"\n        RXNEIE\n\n        RXNE interrupt enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ idleie(self) -> Field:\n        \"\"\"\n        IDLEIE\n\n        IDLE interrupt\
    \ enable\n        \"\"\"\n        return self._idleie\n\n    @idleie.setter\n\
    \    def idleie(self, value: int) -> None:\n        self._idleie.value = value\n\
    \n    @property\n    def te(self) -> Field:\n        \"\"\"\n        TE\n\n  \
    \      Transmitter enable\n        \"\"\"\n        return self._te\n\n    @te.setter\n\
    \    def te(self, value: int) -> None:\n        self._te.value = value\n\n   \
    \ @property\n    def re(self) -> Field:\n        \"\"\"\n        RE\n\n      \
    \  Receiver enable\n        \"\"\"\n        return self._re\n\n    @re.setter\n\
    \    def re(self, value: int) -> None:\n        self._re.value = value\n\n   \
    \ @property\n    def rwu(self) -> Field:\n        \"\"\"\n        RWU\n\n    \
    \    Receiver wakeup\n        \"\"\"\n        return self._rwu\n\n    @rwu.setter\n\
    \    def rwu(self, value: int) -> None:\n        self._rwu.value = value\n\n \
    \   @property\n    def sbk(self) -> Field:\n        \"\"\"\n        SBK\n\n  \
    \      Send break\n        \"\"\"\n        return self._sbk\n\n    @sbk.setter\n\
    \    def sbk(self, value: int) -> None:\n        self._sbk.value = value\n\n\n\
    class Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    Control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._linen = Field(\"linen\"\
    , 14, 1)\n        self._stop = Field(\"stop\", 12, 2)\n        self._clken = Field(\"\
    clken\", 11, 1)\n        self._cpol = Field(\"cpol\", 10, 1)\n        self._cpha\
    \ = Field(\"cpha\", 9, 1)\n        self._lbcl = Field(\"lbcl\", 8, 1)\n      \
    \  self._lbdie = Field(\"lbdie\", 6, 1)\n        self._lbdl = Field(\"lbdl\",\
    \ 5, 1)\n        self._add = Field(\"add\", 0, 4)\n        super().__init__(\"\
    CR2\", 0x40004400 + 0x10)\n\n    @property\n    def linen(self) -> Field:\n  \
    \      \"\"\"\n        LINEN\n\n        LIN mode enable\n        \"\"\"\n    \
    \    return self._linen\n\n    @linen.setter\n    def linen(self, value: int)\
    \ -> None:\n        self._linen.value = value\n\n    @property\n    def stop(self)\
    \ -> Field:\n        \"\"\"\n        STOP\n\n        STOP bits\n        \"\"\"\
    \n        return self._stop\n\n    @stop.setter\n    def stop(self, value: int)\
    \ -> None:\n        self._stop.value = value\n\n    @property\n    def clken(self)\
    \ -> Field:\n        \"\"\"\n        CLKEN\n\n        Clock enable\n        \"\
    \"\"\n        return self._clken\n\n    @clken.setter\n    def clken(self, value:\
    \ int) -> None:\n        self._clken.value = value\n\n    @property\n    def cpol(self)\
    \ -> Field:\n        \"\"\"\n        CPOL\n\n        Clock polarity\n        \"\
    \"\"\n        return self._cpol\n\n    @cpol.setter\n    def cpol(self, value:\
    \ int) -> None:\n        self._cpol.value = value\n\n    @property\n    def cpha(self)\
    \ -> Field:\n        \"\"\"\n        CPHA\n\n        Clock phase\n        \"\"\
    \"\n        return self._cpha\n\n    @cpha.setter\n    def cpha(self, value: int)\
    \ -> None:\n        self._cpha.value = value\n\n    @property\n    def lbcl(self)\
    \ -> Field:\n        \"\"\"\n        LBCL\n\n        Last bit clock pulse\n  \
    \      \"\"\"\n        return self._lbcl\n\n    @lbcl.setter\n    def lbcl(self,\
    \ value: int) -> None:\n        self._lbcl.value = value\n\n    @property\n  \
    \  def lbdie(self) -> Field:\n        \"\"\"\n        LBDIE\n\n        LIN break\
    \ detection interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._lbdie\n\n    @lbdie.setter\n    def lbdie(self, value: int) -> None:\n\
    \        self._lbdie.value = value\n\n    @property\n    def lbdl(self) -> Field:\n\
    \        \"\"\"\n        LBDL\n\n        lin break detection length\n        \"\
    \"\"\n        return self._lbdl\n\n    @lbdl.setter\n    def lbdl(self, value:\
    \ int) -> None:\n        self._lbdl.value = value\n\n    @property\n    def add(self)\
    \ -> Field:\n        \"\"\"\n        ADD\n\n        Address of the USART node\n\
    \        \"\"\"\n        return self._add\n\n    @add.setter\n    def add(self,\
    \ value: int) -> None:\n        self._add.value = value\n\n\nclass Cr3Register(Register):\n\
    \    \"\"\"\n    CR3\n\n    Control register 3\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._onebit = Field(\"onebit\", 11, 1)\n        self._ctsie = Field(\"\
    ctsie\", 10, 1)\n        self._ctse = Field(\"ctse\", 9, 1)\n        self._rtse\
    \ = Field(\"rtse\", 8, 1)\n        self._dmat = Field(\"dmat\", 7, 1)\n      \
    \  self._dmar = Field(\"dmar\", 6, 1)\n        self._scen = Field(\"scen\", 5,\
    \ 1)\n        self._nack = Field(\"nack\", 4, 1)\n        self._hdsel = Field(\"\
    hdsel\", 3, 1)\n        self._irlp = Field(\"irlp\", 2, 1)\n        self._iren\
    \ = Field(\"iren\", 1, 1)\n        self._eie = Field(\"eie\", 0, 1)\n        super().__init__(\"\
    CR3\", 0x40004400 + 0x14)\n\n    @property\n    def onebit(self) -> Field:\n \
    \       \"\"\"\n        ONEBIT\n\n        One sample bit method\n            \
    \      enable\n        \"\"\"\n        return self._onebit\n\n    @onebit.setter\n\
    \    def onebit(self, value: int) -> None:\n        self._onebit.value = value\n\
    \n    @property\n    def ctsie(self) -> Field:\n        \"\"\"\n        CTSIE\n\
    \n        CTS interrupt enable\n        \"\"\"\n        return self._ctsie\n\n\
    \    @ctsie.setter\n    def ctsie(self, value: int) -> None:\n        self._ctsie.value\
    \ = value\n\n    @property\n    def ctse(self) -> Field:\n        \"\"\"\n   \
    \     CTSE\n\n        CTS enable\n        \"\"\"\n        return self._ctse\n\n\
    \    @ctse.setter\n    def ctse(self, value: int) -> None:\n        self._ctse.value\
    \ = value\n\n    @property\n    def rtse(self) -> Field:\n        \"\"\"\n   \
    \     RTSE\n\n        RTS enable\n        \"\"\"\n        return self._rtse\n\n\
    \    @rtse.setter\n    def rtse(self, value: int) -> None:\n        self._rtse.value\
    \ = value\n\n    @property\n    def dmat(self) -> Field:\n        \"\"\"\n   \
    \     DMAT\n\n        DMA enable transmitter\n        \"\"\"\n        return self._dmat\n\
    \n    @dmat.setter\n    def dmat(self, value: int) -> None:\n        self._dmat.value\
    \ = value\n\n    @property\n    def dmar(self) -> Field:\n        \"\"\"\n   \
    \     DMAR\n\n        DMA enable receiver\n        \"\"\"\n        return self._dmar\n\
    \n    @dmar.setter\n    def dmar(self, value: int) -> None:\n        self._dmar.value\
    \ = value\n\n    @property\n    def scen(self) -> Field:\n        \"\"\"\n   \
    \     SCEN\n\n        Smartcard mode enable\n        \"\"\"\n        return self._scen\n\
    \n    @scen.setter\n    def scen(self, value: int) -> None:\n        self._scen.value\
    \ = value\n\n    @property\n    def nack(self) -> Field:\n        \"\"\"\n   \
    \     NACK\n\n        Smartcard NACK enable\n        \"\"\"\n        return self._nack\n\
    \n    @nack.setter\n    def nack(self, value: int) -> None:\n        self._nack.value\
    \ = value\n\n    @property\n    def hdsel(self) -> Field:\n        \"\"\"\n  \
    \      HDSEL\n\n        Half-duplex selection\n        \"\"\"\n        return\
    \ self._hdsel\n\n    @hdsel.setter\n    def hdsel(self, value: int) -> None:\n\
    \        self._hdsel.value = value\n\n    @property\n    def irlp(self) -> Field:\n\
    \        \"\"\"\n        IRLP\n\n        IrDA low-power\n        \"\"\"\n    \
    \    return self._irlp\n\n    @irlp.setter\n    def irlp(self, value: int) ->\
    \ None:\n        self._irlp.value = value\n\n    @property\n    def iren(self)\
    \ -> Field:\n        \"\"\"\n        IREN\n\n        IrDA mode enable\n      \
    \  \"\"\"\n        return self._iren\n\n    @iren.setter\n    def iren(self, value:\
    \ int) -> None:\n        self._iren.value = value\n\n    @property\n    def eie(self)\
    \ -> Field:\n        \"\"\"\n        EIE\n\n        Error interrupt enable\n \
    \       \"\"\"\n        return self._eie\n\n    @eie.setter\n    def eie(self,\
    \ value: int) -> None:\n        self._eie.value = value\n\n\nclass GtprRegister(Register):\n\
    \    \"\"\"\n    GTPR\n\n    Guard time and prescaler\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._gt = Field(\"gt\", 8, 8)\n\
    \        self._psc = Field(\"psc\", 0, 8)\n        super().__init__(\"GTPR\",\
    \ 0x40004400 + 0x18)\n\n    @property\n    def gt(self) -> Field:\n        \"\"\
    \"\n        GT\n\n        Guard time value\n        \"\"\"\n        return self._gt\n\
    \n    @gt.setter\n    def gt(self, value: int) -> None:\n        self._gt.value\
    \ = value\n\n    @property\n    def psc(self) -> Field:\n        \"\"\"\n    \
    \    PSC\n\n        Prescaler value\n        \"\"\"\n        return self._psc\n\
    \n    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n\nclass Usart2(Peripheral):\n    \"\"\"\n    USART2\n\n    Universal\
    \ synchronous asynchronous receiver\n          transmitter\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._sr = SrRegister()\n        self._dr = DrRegister()\n\
    \        self._brr = BrrRegister()\n        self._cr1 = Cr1Register()\n      \
    \  self._cr2 = Cr2Register()\n        self._cr3 = Cr3Register()\n        self._gtpr\
    \ = GtprRegister()\n        super().__init__(\"usart2\", 0x40004400)\n\n    @property\n\
    \    def sr(self) -> SrRegister:\n        return self._sr\n\n    @sr.setter\n\
    \    def sr(self, value: int) -> None:\n        self._sr.value = value\n\n   \
    \ @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n   \
    \ @property\n    def brr(self) -> BrrRegister:\n        return self._brr\n\n \
    \   @brr.setter\n    def brr(self, value: int) -> None:\n        self._brr.value\
    \ = value\n\n    @property\n    def cr1(self) -> Cr1Register:\n        return\
    \ self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n     \
    \   self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def cr3(self) ->\
    \ Cr3Register:\n        return self._cr3\n\n    @cr3.setter\n    def cr3(self,\
    \ value: int) -> None:\n        self._cr3.value = value\n\n    @property\n   \
    \ def gtpr(self) -> GtprRegister:\n        return self._gtpr\n\n    @gtpr.setter\n\
    \    def gtpr(self, value: int) -> None:\n        self._gtpr.value = value\n"
  name: USART2
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass SrRegister(Register):\n    \"\"\"\n    SR\n\n    Status\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._cts = Field(\"\
    cts\", 9, 1)\n        self._lbd = Field(\"lbd\", 8, 1)\n        self._txe = Field(\"\
    txe\", 7, 1)\n        self._tc = Field(\"tc\", 6, 1)\n        self._rxne = Field(\"\
    rxne\", 5, 1)\n        self._idle = Field(\"idle\", 4, 1)\n        self._ore =\
    \ Field(\"ore\", 3, 1)\n        self._nf = Field(\"nf\", 2, 1)\n        self._fe\
    \ = Field(\"fe\", 1, 1)\n        self._pe = Field(\"pe\", 0, 1)\n        super().__init__(\"\
    SR\", 0x40011400 + 0x0)\n\n    @property\n    def cts(self) -> Field:\n      \
    \  \"\"\"\n        CTS\n\n        CTS flag\n        \"\"\"\n        return self._cts\n\
    \n    @cts.setter\n    def cts(self, value: int) -> None:\n        self._cts.value\
    \ = value\n\n    @property\n    def lbd(self) -> Field:\n        \"\"\"\n    \
    \    LBD\n\n        LIN break detection flag\n        \"\"\"\n        return self._lbd\n\
    \n    @lbd.setter\n    def lbd(self, value: int) -> None:\n        self._lbd.value\
    \ = value\n\n    @property\n    def txe(self) -> Field:\n        \"\"\"\n    \
    \    TXE\n\n        Transmit data register\n                  empty\n        \"\
    \"\"\n        return self._txe\n\n    @txe.setter\n    def txe(self, value: int)\
    \ -> None:\n        self._txe.value = value\n\n    @property\n    def tc(self)\
    \ -> Field:\n        \"\"\"\n        TC\n\n        Transmission complete\n   \
    \     \"\"\"\n        return self._tc\n\n    @tc.setter\n    def tc(self, value:\
    \ int) -> None:\n        self._tc.value = value\n\n    @property\n    def rxne(self)\
    \ -> Field:\n        \"\"\"\n        RXNE\n\n        Read data register not\n\
    \                  empty\n        \"\"\"\n        return self._rxne\n\n    @rxne.setter\n\
    \    def rxne(self, value: int) -> None:\n        self._rxne.value = value\n\n\
    \    @property\n    def idle(self) -> Field:\n        \"\"\"\n        IDLE\n\n\
    \        IDLE line detected\n        \"\"\"\n        return self._idle\n\n   \
    \ @idle.setter\n    def idle(self, value: int) -> None:\n        self._idle.value\
    \ = value\n\n    @property\n    def ore(self) -> Field:\n        \"\"\"\n    \
    \    ORE\n\n        Overrun error\n        \"\"\"\n        return self._ore\n\n\
    \    @ore.setter\n    def ore(self, value: int) -> None:\n        self._ore.value\
    \ = value\n\n    @property\n    def nf(self) -> Field:\n        \"\"\"\n     \
    \   NF\n\n        Noise detected flag\n        \"\"\"\n        return self._nf\n\
    \n    @nf.setter\n    def nf(self, value: int) -> None:\n        self._nf.value\
    \ = value\n\n    @property\n    def fe(self) -> Field:\n        \"\"\"\n     \
    \   FE\n\n        Framing error\n        \"\"\"\n        return self._fe\n\n \
    \   @fe.setter\n    def fe(self, value: int) -> None:\n        self._fe.value\
    \ = value\n\n    @property\n    def pe(self) -> Field:\n        \"\"\"\n     \
    \   PE\n\n        Parity error\n        \"\"\"\n        return self._pe\n\n  \
    \  @pe.setter\n    def pe(self, value: int) -> None:\n        self._pe.value =\
    \ value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 9)\n\
    \        super().__init__(\"DR\", 0x40011400 + 0x4)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        Data value\n     \
    \   \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass BrrRegister(Register):\n\
    \    \"\"\"\n    BRR\n\n    Baud rate register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._div_mantissa = Field(\"div_mantissa\", 4, 12)\n        self._div_fraction\
    \ = Field(\"div_fraction\", 0, 4)\n        super().__init__(\"BRR\", 0x40011400\
    \ + 0x8)\n\n    @property\n    def div_mantissa(self) -> Field:\n        \"\"\"\
    \n        DIV_MANTISSA\n\n        mantissa of USARTDIV\n        \"\"\"\n     \
    \   return self._div_mantissa\n\n    @div_mantissa.setter\n    def div_mantissa(self,\
    \ value: int) -> None:\n        self._div_mantissa.value = value\n\n    @property\n\
    \    def div_fraction(self) -> Field:\n        \"\"\"\n        DIV_FRACTION\n\n\
    \        fraction of USARTDIV\n        \"\"\"\n        return self._div_fraction\n\
    \n    @div_fraction.setter\n    def div_fraction(self, value: int) -> None:\n\
    \        self._div_fraction.value = value\n\n\nclass Cr1Register(Register):\n\
    \    \"\"\"\n    CR1\n\n    Control register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._over8 = Field(\"over8\", 15, 1)\n        self._ue = Field(\"ue\"\
    , 13, 1)\n        self._m = Field(\"m\", 12, 1)\n        self._wake = Field(\"\
    wake\", 11, 1)\n        self._pce = Field(\"pce\", 10, 1)\n        self._ps =\
    \ Field(\"ps\", 9, 1)\n        self._peie = Field(\"peie\", 8, 1)\n        self._txeie\
    \ = Field(\"txeie\", 7, 1)\n        self._tcie = Field(\"tcie\", 6, 1)\n     \
    \   self._rxneie = Field(\"rxneie\", 5, 1)\n        self._idleie = Field(\"idleie\"\
    , 4, 1)\n        self._te = Field(\"te\", 3, 1)\n        self._re = Field(\"re\"\
    , 2, 1)\n        self._rwu = Field(\"rwu\", 1, 1)\n        self._sbk = Field(\"\
    sbk\", 0, 1)\n        super().__init__(\"CR1\", 0x40011400 + 0xC)\n\n    @property\n\
    \    def over8(self) -> Field:\n        \"\"\"\n        OVER8\n\n        Oversampling\
    \ mode\n        \"\"\"\n        return self._over8\n\n    @over8.setter\n    def\
    \ over8(self, value: int) -> None:\n        self._over8.value = value\n\n    @property\n\
    \    def ue(self) -> Field:\n        \"\"\"\n        UE\n\n        USART enable\n\
    \        \"\"\"\n        return self._ue\n\n    @ue.setter\n    def ue(self, value:\
    \ int) -> None:\n        self._ue.value = value\n\n    @property\n    def m(self)\
    \ -> Field:\n        \"\"\"\n        M\n\n        Word length\n        \"\"\"\n\
    \        return self._m\n\n    @m.setter\n    def m(self, value: int) -> None:\n\
    \        self._m.value = value\n\n    @property\n    def wake(self) -> Field:\n\
    \        \"\"\"\n        WAKE\n\n        Wakeup method\n        \"\"\"\n     \
    \   return self._wake\n\n    @wake.setter\n    def wake(self, value: int) -> None:\n\
    \        self._wake.value = value\n\n    @property\n    def pce(self) -> Field:\n\
    \        \"\"\"\n        PCE\n\n        Parity control enable\n        \"\"\"\n\
    \        return self._pce\n\n    @pce.setter\n    def pce(self, value: int) ->\
    \ None:\n        self._pce.value = value\n\n    @property\n    def ps(self) ->\
    \ Field:\n        \"\"\"\n        PS\n\n        Parity selection\n        \"\"\
    \"\n        return self._ps\n\n    @ps.setter\n    def ps(self, value: int) ->\
    \ None:\n        self._ps.value = value\n\n    @property\n    def peie(self) ->\
    \ Field:\n        \"\"\"\n        PEIE\n\n        PE interrupt enable\n      \
    \  \"\"\"\n        return self._peie\n\n    @peie.setter\n    def peie(self, value:\
    \ int) -> None:\n        self._peie.value = value\n\n    @property\n    def txeie(self)\
    \ -> Field:\n        \"\"\"\n        TXEIE\n\n        TXE interrupt enable\n \
    \       \"\"\"\n        return self._txeie\n\n    @txeie.setter\n    def txeie(self,\
    \ value: int) -> None:\n        self._txeie.value = value\n\n    @property\n \
    \   def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transmission\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def rxneie(self) -> Field:\n\
    \        \"\"\"\n        RXNEIE\n\n        RXNE interrupt enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ idleie(self) -> Field:\n        \"\"\"\n        IDLEIE\n\n        IDLE interrupt\
    \ enable\n        \"\"\"\n        return self._idleie\n\n    @idleie.setter\n\
    \    def idleie(self, value: int) -> None:\n        self._idleie.value = value\n\
    \n    @property\n    def te(self) -> Field:\n        \"\"\"\n        TE\n\n  \
    \      Transmitter enable\n        \"\"\"\n        return self._te\n\n    @te.setter\n\
    \    def te(self, value: int) -> None:\n        self._te.value = value\n\n   \
    \ @property\n    def re(self) -> Field:\n        \"\"\"\n        RE\n\n      \
    \  Receiver enable\n        \"\"\"\n        return self._re\n\n    @re.setter\n\
    \    def re(self, value: int) -> None:\n        self._re.value = value\n\n   \
    \ @property\n    def rwu(self) -> Field:\n        \"\"\"\n        RWU\n\n    \
    \    Receiver wakeup\n        \"\"\"\n        return self._rwu\n\n    @rwu.setter\n\
    \    def rwu(self, value: int) -> None:\n        self._rwu.value = value\n\n \
    \   @property\n    def sbk(self) -> Field:\n        \"\"\"\n        SBK\n\n  \
    \      Send break\n        \"\"\"\n        return self._sbk\n\n    @sbk.setter\n\
    \    def sbk(self, value: int) -> None:\n        self._sbk.value = value\n\n\n\
    class Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    Control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._linen = Field(\"linen\"\
    , 14, 1)\n        self._stop = Field(\"stop\", 12, 2)\n        self._clken = Field(\"\
    clken\", 11, 1)\n        self._cpol = Field(\"cpol\", 10, 1)\n        self._cpha\
    \ = Field(\"cpha\", 9, 1)\n        self._lbcl = Field(\"lbcl\", 8, 1)\n      \
    \  self._lbdie = Field(\"lbdie\", 6, 1)\n        self._lbdl = Field(\"lbdl\",\
    \ 5, 1)\n        self._add = Field(\"add\", 0, 4)\n        super().__init__(\"\
    CR2\", 0x40011400 + 0x10)\n\n    @property\n    def linen(self) -> Field:\n  \
    \      \"\"\"\n        LINEN\n\n        LIN mode enable\n        \"\"\"\n    \
    \    return self._linen\n\n    @linen.setter\n    def linen(self, value: int)\
    \ -> None:\n        self._linen.value = value\n\n    @property\n    def stop(self)\
    \ -> Field:\n        \"\"\"\n        STOP\n\n        STOP bits\n        \"\"\"\
    \n        return self._stop\n\n    @stop.setter\n    def stop(self, value: int)\
    \ -> None:\n        self._stop.value = value\n\n    @property\n    def clken(self)\
    \ -> Field:\n        \"\"\"\n        CLKEN\n\n        Clock enable\n        \"\
    \"\"\n        return self._clken\n\n    @clken.setter\n    def clken(self, value:\
    \ int) -> None:\n        self._clken.value = value\n\n    @property\n    def cpol(self)\
    \ -> Field:\n        \"\"\"\n        CPOL\n\n        Clock polarity\n        \"\
    \"\"\n        return self._cpol\n\n    @cpol.setter\n    def cpol(self, value:\
    \ int) -> None:\n        self._cpol.value = value\n\n    @property\n    def cpha(self)\
    \ -> Field:\n        \"\"\"\n        CPHA\n\n        Clock phase\n        \"\"\
    \"\n        return self._cpha\n\n    @cpha.setter\n    def cpha(self, value: int)\
    \ -> None:\n        self._cpha.value = value\n\n    @property\n    def lbcl(self)\
    \ -> Field:\n        \"\"\"\n        LBCL\n\n        Last bit clock pulse\n  \
    \      \"\"\"\n        return self._lbcl\n\n    @lbcl.setter\n    def lbcl(self,\
    \ value: int) -> None:\n        self._lbcl.value = value\n\n    @property\n  \
    \  def lbdie(self) -> Field:\n        \"\"\"\n        LBDIE\n\n        LIN break\
    \ detection interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._lbdie\n\n    @lbdie.setter\n    def lbdie(self, value: int) -> None:\n\
    \        self._lbdie.value = value\n\n    @property\n    def lbdl(self) -> Field:\n\
    \        \"\"\"\n        LBDL\n\n        lin break detection length\n        \"\
    \"\"\n        return self._lbdl\n\n    @lbdl.setter\n    def lbdl(self, value:\
    \ int) -> None:\n        self._lbdl.value = value\n\n    @property\n    def add(self)\
    \ -> Field:\n        \"\"\"\n        ADD\n\n        Address of the USART node\n\
    \        \"\"\"\n        return self._add\n\n    @add.setter\n    def add(self,\
    \ value: int) -> None:\n        self._add.value = value\n\n\nclass Cr3Register(Register):\n\
    \    \"\"\"\n    CR3\n\n    Control register 3\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._onebit = Field(\"onebit\", 11, 1)\n        self._ctsie = Field(\"\
    ctsie\", 10, 1)\n        self._ctse = Field(\"ctse\", 9, 1)\n        self._rtse\
    \ = Field(\"rtse\", 8, 1)\n        self._dmat = Field(\"dmat\", 7, 1)\n      \
    \  self._dmar = Field(\"dmar\", 6, 1)\n        self._scen = Field(\"scen\", 5,\
    \ 1)\n        self._nack = Field(\"nack\", 4, 1)\n        self._hdsel = Field(\"\
    hdsel\", 3, 1)\n        self._irlp = Field(\"irlp\", 2, 1)\n        self._iren\
    \ = Field(\"iren\", 1, 1)\n        self._eie = Field(\"eie\", 0, 1)\n        super().__init__(\"\
    CR3\", 0x40011400 + 0x14)\n\n    @property\n    def onebit(self) -> Field:\n \
    \       \"\"\"\n        ONEBIT\n\n        One sample bit method\n            \
    \      enable\n        \"\"\"\n        return self._onebit\n\n    @onebit.setter\n\
    \    def onebit(self, value: int) -> None:\n        self._onebit.value = value\n\
    \n    @property\n    def ctsie(self) -> Field:\n        \"\"\"\n        CTSIE\n\
    \n        CTS interrupt enable\n        \"\"\"\n        return self._ctsie\n\n\
    \    @ctsie.setter\n    def ctsie(self, value: int) -> None:\n        self._ctsie.value\
    \ = value\n\n    @property\n    def ctse(self) -> Field:\n        \"\"\"\n   \
    \     CTSE\n\n        CTS enable\n        \"\"\"\n        return self._ctse\n\n\
    \    @ctse.setter\n    def ctse(self, value: int) -> None:\n        self._ctse.value\
    \ = value\n\n    @property\n    def rtse(self) -> Field:\n        \"\"\"\n   \
    \     RTSE\n\n        RTS enable\n        \"\"\"\n        return self._rtse\n\n\
    \    @rtse.setter\n    def rtse(self, value: int) -> None:\n        self._rtse.value\
    \ = value\n\n    @property\n    def dmat(self) -> Field:\n        \"\"\"\n   \
    \     DMAT\n\n        DMA enable transmitter\n        \"\"\"\n        return self._dmat\n\
    \n    @dmat.setter\n    def dmat(self, value: int) -> None:\n        self._dmat.value\
    \ = value\n\n    @property\n    def dmar(self) -> Field:\n        \"\"\"\n   \
    \     DMAR\n\n        DMA enable receiver\n        \"\"\"\n        return self._dmar\n\
    \n    @dmar.setter\n    def dmar(self, value: int) -> None:\n        self._dmar.value\
    \ = value\n\n    @property\n    def scen(self) -> Field:\n        \"\"\"\n   \
    \     SCEN\n\n        Smartcard mode enable\n        \"\"\"\n        return self._scen\n\
    \n    @scen.setter\n    def scen(self, value: int) -> None:\n        self._scen.value\
    \ = value\n\n    @property\n    def nack(self) -> Field:\n        \"\"\"\n   \
    \     NACK\n\n        Smartcard NACK enable\n        \"\"\"\n        return self._nack\n\
    \n    @nack.setter\n    def nack(self, value: int) -> None:\n        self._nack.value\
    \ = value\n\n    @property\n    def hdsel(self) -> Field:\n        \"\"\"\n  \
    \      HDSEL\n\n        Half-duplex selection\n        \"\"\"\n        return\
    \ self._hdsel\n\n    @hdsel.setter\n    def hdsel(self, value: int) -> None:\n\
    \        self._hdsel.value = value\n\n    @property\n    def irlp(self) -> Field:\n\
    \        \"\"\"\n        IRLP\n\n        IrDA low-power\n        \"\"\"\n    \
    \    return self._irlp\n\n    @irlp.setter\n    def irlp(self, value: int) ->\
    \ None:\n        self._irlp.value = value\n\n    @property\n    def iren(self)\
    \ -> Field:\n        \"\"\"\n        IREN\n\n        IrDA mode enable\n      \
    \  \"\"\"\n        return self._iren\n\n    @iren.setter\n    def iren(self, value:\
    \ int) -> None:\n        self._iren.value = value\n\n    @property\n    def eie(self)\
    \ -> Field:\n        \"\"\"\n        EIE\n\n        Error interrupt enable\n \
    \       \"\"\"\n        return self._eie\n\n    @eie.setter\n    def eie(self,\
    \ value: int) -> None:\n        self._eie.value = value\n\n\nclass GtprRegister(Register):\n\
    \    \"\"\"\n    GTPR\n\n    Guard time and prescaler\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._gt = Field(\"gt\", 8, 8)\n\
    \        self._psc = Field(\"psc\", 0, 8)\n        super().__init__(\"GTPR\",\
    \ 0x40011400 + 0x18)\n\n    @property\n    def gt(self) -> Field:\n        \"\"\
    \"\n        GT\n\n        Guard time value\n        \"\"\"\n        return self._gt\n\
    \n    @gt.setter\n    def gt(self, value: int) -> None:\n        self._gt.value\
    \ = value\n\n    @property\n    def psc(self) -> Field:\n        \"\"\"\n    \
    \    PSC\n\n        Prescaler value\n        \"\"\"\n        return self._psc\n\
    \n    @psc.setter\n    def psc(self, value: int) -> None:\n        self._psc.value\
    \ = value\n\n\nclass Usart6(Peripheral):\n    \"\"\"\n    USART6\n\n    Universal\
    \ synchronous asynchronous receiver\n          transmitter\n    \"\"\"\n\n   \
    \ def __init__(self):\n        self._sr = SrRegister()\n        self._dr = DrRegister()\n\
    \        self._brr = BrrRegister()\n        self._cr1 = Cr1Register()\n      \
    \  self._cr2 = Cr2Register()\n        self._cr3 = Cr3Register()\n        self._gtpr\
    \ = GtprRegister()\n        super().__init__(\"usart6\", 0x40011400)\n\n    @property\n\
    \    def sr(self) -> SrRegister:\n        return self._sr\n\n    @sr.setter\n\
    \    def sr(self, value: int) -> None:\n        self._sr.value = value\n\n   \
    \ @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n   \
    \ @property\n    def brr(self) -> BrrRegister:\n        return self._brr\n\n \
    \   @brr.setter\n    def brr(self, value: int) -> None:\n        self._brr.value\
    \ = value\n\n    @property\n    def cr1(self) -> Cr1Register:\n        return\
    \ self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n     \
    \   self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def cr3(self) ->\
    \ Cr3Register:\n        return self._cr3\n\n    @cr3.setter\n    def cr3(self,\
    \ value: int) -> None:\n        self._cr3.value = value\n\n    @property\n   \
    \ def gtpr(self) -> GtprRegister:\n        return self._gtpr\n\n    @gtpr.setter\n\
    \    def gtpr(self, value: int) -> None:\n        self._gtpr.value = value\n"
  name: USART6
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CrRegister(Register):\n    \"\"\"\n    CR\n\n    Control\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._wdga = Field(\"\
    wdga\", 7, 1)\n        self._t = Field(\"t\", 0, 7)\n        super().__init__(\"\
    CR\", 0x40002C00 + 0x0)\n\n    @property\n    def wdga(self) -> Field:\n     \
    \   \"\"\"\n        WDGA\n\n        Activation bit\n        \"\"\"\n        return\
    \ self._wdga\n\n    @wdga.setter\n    def wdga(self, value: int) -> None:\n  \
    \      self._wdga.value = value\n\n    @property\n    def t(self) -> Field:\n\
    \        \"\"\"\n        T\n\n        7-bit counter (MSB to LSB)\n        \"\"\
    \"\n        return self._t\n\n    @t.setter\n    def t(self, value: int) -> None:\n\
    \        self._t.value = value\n\n\nclass CfrRegister(Register):\n    \"\"\"\n\
    \    CFR\n\n    Configuration register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ewi = Field(\"ewi\", 9, 1)\n        self._wdgtb1 = Field(\"wdgtb1\"\
    , 8, 1)\n        self._wdgtb0 = Field(\"wdgtb0\", 7, 1)\n        self._w = Field(\"\
    w\", 0, 7)\n        super().__init__(\"CFR\", 0x40002C00 + 0x4)\n\n    @property\n\
    \    def ewi(self) -> Field:\n        \"\"\"\n        EWI\n\n        Early wakeup\
    \ interrupt\n        \"\"\"\n        return self._ewi\n\n    @ewi.setter\n   \
    \ def ewi(self, value: int) -> None:\n        self._ewi.value = value\n\n    @property\n\
    \    def wdgtb1(self) -> Field:\n        \"\"\"\n        WDGTB1\n\n        Timer\
    \ base\n        \"\"\"\n        return self._wdgtb1\n\n    @wdgtb1.setter\n  \
    \  def wdgtb1(self, value: int) -> None:\n        self._wdgtb1.value = value\n\
    \n    @property\n    def wdgtb0(self) -> Field:\n        \"\"\"\n        WDGTB0\n\
    \n        Timer base\n        \"\"\"\n        return self._wdgtb0\n\n    @wdgtb0.setter\n\
    \    def wdgtb0(self, value: int) -> None:\n        self._wdgtb0.value = value\n\
    \n    @property\n    def w(self) -> Field:\n        \"\"\"\n        W\n\n    \
    \    7-bit window value\n        \"\"\"\n        return self._w\n\n    @w.setter\n\
    \    def w(self, value: int) -> None:\n        self._w.value = value\n\n\nclass\
    \ SrRegister(Register):\n    \"\"\"\n    SR\n\n    Status register\n    \"\"\"\
    \n\n    def __init__(self):\n        self._ewif = Field(\"ewif\", 0, 1)\n    \
    \    super().__init__(\"SR\", 0x40002C00 + 0x8)\n\n    @property\n    def ewif(self)\
    \ -> Field:\n        \"\"\"\n        EWIF\n\n        Early wakeup interrupt\n\
    \                  flag\n        \"\"\"\n        return self._ewif\n\n    @ewif.setter\n\
    \    def ewif(self, value: int) -> None:\n        self._ewif.value = value\n\n\
    \nclass Wwdg(Peripheral):\n    \"\"\"\n    WWDG\n\n    Window watchdog\n    \"\
    \"\"\n\n    def __init__(self):\n        self._cr = CrRegister()\n        self._cfr\
    \ = CfrRegister()\n        self._sr = SrRegister()\n        super().__init__(\"\
    wwdg\", 0x40002C00)\n\n    @property\n    def cr(self) -> CrRegister:\n      \
    \  return self._cr\n\n    @cr.setter\n    def cr(self, value: int) -> None:\n\
    \        self._cr.value = value\n\n    @property\n    def cfr(self) -> CfrRegister:\n\
    \        return self._cfr\n\n    @cfr.setter\n    def cfr(self, value: int) ->\
    \ None:\n        self._cfr.value = value\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n"
  name: WWDG
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass LisrRegister(Register):\n    \"\"\"\n    LISR\n\n    low\
    \ interrupt status register\n    \"\"\"\n\n    def __init__(self):\n        self._tcif3\
    \ = Field(\"tcif3\", 27, 1)\n        self._htif3 = Field(\"htif3\", 26, 1)\n \
    \       self._teif3 = Field(\"teif3\", 25, 1)\n        self._dmeif3 = Field(\"\
    dmeif3\", 24, 1)\n        self._feif3 = Field(\"feif3\", 22, 1)\n        self._tcif2\
    \ = Field(\"tcif2\", 21, 1)\n        self._htif2 = Field(\"htif2\", 20, 1)\n \
    \       self._teif2 = Field(\"teif2\", 19, 1)\n        self._dmeif2 = Field(\"\
    dmeif2\", 18, 1)\n        self._feif2 = Field(\"feif2\", 16, 1)\n        self._tcif1\
    \ = Field(\"tcif1\", 11, 1)\n        self._htif1 = Field(\"htif1\", 10, 1)\n \
    \       self._teif1 = Field(\"teif1\", 9, 1)\n        self._dmeif1 = Field(\"\
    dmeif1\", 8, 1)\n        self._feif1 = Field(\"feif1\", 6, 1)\n        self._tcif0\
    \ = Field(\"tcif0\", 5, 1)\n        self._htif0 = Field(\"htif0\", 4, 1)\n   \
    \     self._teif0 = Field(\"teif0\", 3, 1)\n        self._dmeif0 = Field(\"dmeif0\"\
    , 2, 1)\n        self._feif0 = Field(\"feif0\", 0, 1)\n        super().__init__(\"\
    LISR\", 0x40026400 + 0x0)\n\n    @property\n    def tcif3(self) -> Field:\n  \
    \      \"\"\"\n        TCIF3\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif3\n\
    \n    @tcif3.setter\n    def tcif3(self, value: int) -> None:\n        self._tcif3.value\
    \ = value\n\n    @property\n    def htif3(self) -> Field:\n        \"\"\"\n  \
    \      HTIF3\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif3\n\n    @htif3.setter\n\
    \    def htif3(self, value: int) -> None:\n        self._htif3.value = value\n\
    \n    @property\n    def teif3(self) -> Field:\n        \"\"\"\n        TEIF3\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif3\n\n    @teif3.setter\n    def teif3(self,\
    \ value: int) -> None:\n        self._teif3.value = value\n\n    @property\n \
    \   def dmeif3(self) -> Field:\n        \"\"\"\n        DMEIF3\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif3\n\n    @dmeif3.setter\n    def dmeif3(self, value:\
    \ int) -> None:\n        self._dmeif3.value = value\n\n    @property\n    def\
    \ feif3(self) -> Field:\n        \"\"\"\n        FEIF3\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif3\n\n    @feif3.setter\n    def feif3(self, value: int) -> None:\n\
    \        self._feif3.value = value\n\n    @property\n    def tcif2(self) -> Field:\n\
    \        \"\"\"\n        TCIF2\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif2\n\
    \n    @tcif2.setter\n    def tcif2(self, value: int) -> None:\n        self._tcif2.value\
    \ = value\n\n    @property\n    def htif2(self) -> Field:\n        \"\"\"\n  \
    \      HTIF2\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif2\n\n    @htif2.setter\n\
    \    def htif2(self, value: int) -> None:\n        self._htif2.value = value\n\
    \n    @property\n    def teif2(self) -> Field:\n        \"\"\"\n        TEIF2\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif2\n\n    @teif2.setter\n    def teif2(self,\
    \ value: int) -> None:\n        self._teif2.value = value\n\n    @property\n \
    \   def dmeif2(self) -> Field:\n        \"\"\"\n        DMEIF2\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif2\n\n    @dmeif2.setter\n    def dmeif2(self, value:\
    \ int) -> None:\n        self._dmeif2.value = value\n\n    @property\n    def\
    \ feif2(self) -> Field:\n        \"\"\"\n        FEIF2\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif2\n\n    @feif2.setter\n    def feif2(self, value: int) -> None:\n\
    \        self._feif2.value = value\n\n    @property\n    def tcif1(self) -> Field:\n\
    \        \"\"\"\n        TCIF1\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif1\n\
    \n    @tcif1.setter\n    def tcif1(self, value: int) -> None:\n        self._tcif1.value\
    \ = value\n\n    @property\n    def htif1(self) -> Field:\n        \"\"\"\n  \
    \      HTIF1\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif1\n\n    @htif1.setter\n\
    \    def htif1(self, value: int) -> None:\n        self._htif1.value = value\n\
    \n    @property\n    def teif1(self) -> Field:\n        \"\"\"\n        TEIF1\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif1\n\n    @teif1.setter\n    def teif1(self,\
    \ value: int) -> None:\n        self._teif1.value = value\n\n    @property\n \
    \   def dmeif1(self) -> Field:\n        \"\"\"\n        DMEIF1\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif1\n\n    @dmeif1.setter\n    def dmeif1(self, value:\
    \ int) -> None:\n        self._dmeif1.value = value\n\n    @property\n    def\
    \ feif1(self) -> Field:\n        \"\"\"\n        FEIF1\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif1\n\n    @feif1.setter\n    def feif1(self, value: int) -> None:\n\
    \        self._feif1.value = value\n\n    @property\n    def tcif0(self) -> Field:\n\
    \        \"\"\"\n        TCIF0\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif0\n\
    \n    @tcif0.setter\n    def tcif0(self, value: int) -> None:\n        self._tcif0.value\
    \ = value\n\n    @property\n    def htif0(self) -> Field:\n        \"\"\"\n  \
    \      HTIF0\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif0\n\n    @htif0.setter\n\
    \    def htif0(self, value: int) -> None:\n        self._htif0.value = value\n\
    \n    @property\n    def teif0(self) -> Field:\n        \"\"\"\n        TEIF0\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif0\n\n    @teif0.setter\n    def teif0(self,\
    \ value: int) -> None:\n        self._teif0.value = value\n\n    @property\n \
    \   def dmeif0(self) -> Field:\n        \"\"\"\n        DMEIF0\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif0\n\n    @dmeif0.setter\n    def dmeif0(self, value:\
    \ int) -> None:\n        self._dmeif0.value = value\n\n    @property\n    def\
    \ feif0(self) -> Field:\n        \"\"\"\n        FEIF0\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif0\n\n    @feif0.setter\n    def feif0(self, value: int) -> None:\n\
    \        self._feif0.value = value\n\n\nclass HisrRegister(Register):\n    \"\"\
    \"\n    HISR\n\n    high interrupt status register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._tcif7 = Field(\"tcif7\", 27, 1)\n        self._htif7 = Field(\"\
    htif7\", 26, 1)\n        self._teif7 = Field(\"teif7\", 25, 1)\n        self._dmeif7\
    \ = Field(\"dmeif7\", 24, 1)\n        self._feif7 = Field(\"feif7\", 22, 1)\n\
    \        self._tcif6 = Field(\"tcif6\", 21, 1)\n        self._htif6 = Field(\"\
    htif6\", 20, 1)\n        self._teif6 = Field(\"teif6\", 19, 1)\n        self._dmeif6\
    \ = Field(\"dmeif6\", 18, 1)\n        self._feif6 = Field(\"feif6\", 16, 1)\n\
    \        self._tcif5 = Field(\"tcif5\", 11, 1)\n        self._htif5 = Field(\"\
    htif5\", 10, 1)\n        self._teif5 = Field(\"teif5\", 9, 1)\n        self._dmeif5\
    \ = Field(\"dmeif5\", 8, 1)\n        self._feif5 = Field(\"feif5\", 6, 1)\n  \
    \      self._tcif4 = Field(\"tcif4\", 5, 1)\n        self._htif4 = Field(\"htif4\"\
    , 4, 1)\n        self._teif4 = Field(\"teif4\", 3, 1)\n        self._dmeif4 =\
    \ Field(\"dmeif4\", 2, 1)\n        self._feif4 = Field(\"feif4\", 0, 1)\n    \
    \    super().__init__(\"HISR\", 0x40026400 + 0x4)\n\n    @property\n    def tcif7(self)\
    \ -> Field:\n        \"\"\"\n        TCIF7\n\n        Stream x transfer complete\
    \ interrupt\n                  flag (x=7..4)\n        \"\"\"\n        return self._tcif7\n\
    \n    @tcif7.setter\n    def tcif7(self, value: int) -> None:\n        self._tcif7.value\
    \ = value\n\n    @property\n    def htif7(self) -> Field:\n        \"\"\"\n  \
    \      HTIF7\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif7\n\n    @htif7.setter\n\
    \    def htif7(self, value: int) -> None:\n        self._htif7.value = value\n\
    \n    @property\n    def teif7(self) -> Field:\n        \"\"\"\n        TEIF7\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif7\n\n    @teif7.setter\n    def teif7(self,\
    \ value: int) -> None:\n        self._teif7.value = value\n\n    @property\n \
    \   def dmeif7(self) -> Field:\n        \"\"\"\n        DMEIF7\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif7\n\n    @dmeif7.setter\n    def dmeif7(self, value:\
    \ int) -> None:\n        self._dmeif7.value = value\n\n    @property\n    def\
    \ feif7(self) -> Field:\n        \"\"\"\n        FEIF7\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif7\n\n    @feif7.setter\n    def feif7(self, value: int) -> None:\n\
    \        self._feif7.value = value\n\n    @property\n    def tcif6(self) -> Field:\n\
    \        \"\"\"\n        TCIF6\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x=7..4)\n        \"\"\"\n        return self._tcif6\n\
    \n    @tcif6.setter\n    def tcif6(self, value: int) -> None:\n        self._tcif6.value\
    \ = value\n\n    @property\n    def htif6(self) -> Field:\n        \"\"\"\n  \
    \      HTIF6\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif6\n\n    @htif6.setter\n\
    \    def htif6(self, value: int) -> None:\n        self._htif6.value = value\n\
    \n    @property\n    def teif6(self) -> Field:\n        \"\"\"\n        TEIF6\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif6\n\n    @teif6.setter\n    def teif6(self,\
    \ value: int) -> None:\n        self._teif6.value = value\n\n    @property\n \
    \   def dmeif6(self) -> Field:\n        \"\"\"\n        DMEIF6\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif6\n\n    @dmeif6.setter\n    def dmeif6(self, value:\
    \ int) -> None:\n        self._dmeif6.value = value\n\n    @property\n    def\
    \ feif6(self) -> Field:\n        \"\"\"\n        FEIF6\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif6\n\n    @feif6.setter\n    def feif6(self, value: int) -> None:\n\
    \        self._feif6.value = value\n\n    @property\n    def tcif5(self) -> Field:\n\
    \        \"\"\"\n        TCIF5\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x=7..4)\n        \"\"\"\n        return self._tcif5\n\
    \n    @tcif5.setter\n    def tcif5(self, value: int) -> None:\n        self._tcif5.value\
    \ = value\n\n    @property\n    def htif5(self) -> Field:\n        \"\"\"\n  \
    \      HTIF5\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif5\n\n    @htif5.setter\n\
    \    def htif5(self, value: int) -> None:\n        self._htif5.value = value\n\
    \n    @property\n    def teif5(self) -> Field:\n        \"\"\"\n        TEIF5\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif5\n\n    @teif5.setter\n    def teif5(self,\
    \ value: int) -> None:\n        self._teif5.value = value\n\n    @property\n \
    \   def dmeif5(self) -> Field:\n        \"\"\"\n        DMEIF5\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif5\n\n    @dmeif5.setter\n    def dmeif5(self, value:\
    \ int) -> None:\n        self._dmeif5.value = value\n\n    @property\n    def\
    \ feif5(self) -> Field:\n        \"\"\"\n        FEIF5\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif5\n\n    @feif5.setter\n    def feif5(self, value: int) -> None:\n\
    \        self._feif5.value = value\n\n    @property\n    def tcif4(self) -> Field:\n\
    \        \"\"\"\n        TCIF4\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x=7..4)\n        \"\"\"\n        return self._tcif4\n\
    \n    @tcif4.setter\n    def tcif4(self, value: int) -> None:\n        self._tcif4.value\
    \ = value\n\n    @property\n    def htif4(self) -> Field:\n        \"\"\"\n  \
    \      HTIF4\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif4\n\n    @htif4.setter\n\
    \    def htif4(self, value: int) -> None:\n        self._htif4.value = value\n\
    \n    @property\n    def teif4(self) -> Field:\n        \"\"\"\n        TEIF4\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif4\n\n    @teif4.setter\n    def teif4(self,\
    \ value: int) -> None:\n        self._teif4.value = value\n\n    @property\n \
    \   def dmeif4(self) -> Field:\n        \"\"\"\n        DMEIF4\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif4\n\n    @dmeif4.setter\n    def dmeif4(self, value:\
    \ int) -> None:\n        self._dmeif4.value = value\n\n    @property\n    def\
    \ feif4(self) -> Field:\n        \"\"\"\n        FEIF4\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif4\n\n    @feif4.setter\n    def feif4(self, value: int) -> None:\n\
    \        self._feif4.value = value\n\n\nclass LifcrRegister(Register):\n    \"\
    \"\"\n    LIFCR\n\n    low interrupt flag clear\n              register\n    \"\
    \"\"\n\n    def __init__(self):\n        self._ctcif3 = Field(\"ctcif3\", 27,\
    \ 1)\n        self._chtif3 = Field(\"chtif3\", 26, 1)\n        self._cteif3 =\
    \ Field(\"cteif3\", 25, 1)\n        self._cdmeif3 = Field(\"cdmeif3\", 24, 1)\n\
    \        self._cfeif3 = Field(\"cfeif3\", 22, 1)\n        self._ctcif2 = Field(\"\
    ctcif2\", 21, 1)\n        self._chtif2 = Field(\"chtif2\", 20, 1)\n        self._cteif2\
    \ = Field(\"cteif2\", 19, 1)\n        self._cdmeif2 = Field(\"cdmeif2\", 18, 1)\n\
    \        self._cfeif2 = Field(\"cfeif2\", 16, 1)\n        self._ctcif1 = Field(\"\
    ctcif1\", 11, 1)\n        self._chtif1 = Field(\"chtif1\", 10, 1)\n        self._cteif1\
    \ = Field(\"cteif1\", 9, 1)\n        self._cdmeif1 = Field(\"cdmeif1\", 8, 1)\n\
    \        self._cfeif1 = Field(\"cfeif1\", 6, 1)\n        self._ctcif0 = Field(\"\
    ctcif0\", 5, 1)\n        self._chtif0 = Field(\"chtif0\", 4, 1)\n        self._cteif0\
    \ = Field(\"cteif0\", 3, 1)\n        self._cdmeif0 = Field(\"cdmeif0\", 2, 1)\n\
    \        self._cfeif0 = Field(\"cfeif0\", 0, 1)\n        super().__init__(\"LIFCR\"\
    , 0x40026400 + 0x8)\n\n    @property\n    def ctcif3(self) -> Field:\n       \
    \ \"\"\"\n        CTCIF3\n\n        Stream x clear transfer complete\n       \
    \           interrupt flag (x = 3..0)\n        \"\"\"\n        return self._ctcif3\n\
    \n    @ctcif3.setter\n    def ctcif3(self, value: int) -> None:\n        self._ctcif3.value\
    \ = value\n\n    @property\n    def chtif3(self) -> Field:\n        \"\"\"\n \
    \       CHTIF3\n\n        Stream x clear half transfer interrupt\n           \
    \       flag (x = 3..0)\n        \"\"\"\n        return self._chtif3\n\n    @chtif3.setter\n\
    \    def chtif3(self, value: int) -> None:\n        self._chtif3.value = value\n\
    \n    @property\n    def cteif3(self) -> Field:\n        \"\"\"\n        CTEIF3\n\
    \n        Stream x clear transfer error interrupt\n                  flag (x =\
    \ 3..0)\n        \"\"\"\n        return self._cteif3\n\n    @cteif3.setter\n \
    \   def cteif3(self, value: int) -> None:\n        self._cteif3.value = value\n\
    \n    @property\n    def cdmeif3(self) -> Field:\n        \"\"\"\n        CDMEIF3\n\
    \n        Stream x clear direct mode error\n                  interrupt flag (x\
    \ = 3..0)\n        \"\"\"\n        return self._cdmeif3\n\n    @cdmeif3.setter\n\
    \    def cdmeif3(self, value: int) -> None:\n        self._cdmeif3.value = value\n\
    \n    @property\n    def cfeif3(self) -> Field:\n        \"\"\"\n        CFEIF3\n\
    \n        Stream x clear FIFO error interrupt flag\n                  (x = 3..0)\n\
    \        \"\"\"\n        return self._cfeif3\n\n    @cfeif3.setter\n    def cfeif3(self,\
    \ value: int) -> None:\n        self._cfeif3.value = value\n\n    @property\n\
    \    def ctcif2(self) -> Field:\n        \"\"\"\n        CTCIF2\n\n        Stream\
    \ x clear transfer complete\n                  interrupt flag (x = 3..0)\n   \
    \     \"\"\"\n        return self._ctcif2\n\n    @ctcif2.setter\n    def ctcif2(self,\
    \ value: int) -> None:\n        self._ctcif2.value = value\n\n    @property\n\
    \    def chtif2(self) -> Field:\n        \"\"\"\n        CHTIF2\n\n        Stream\
    \ x clear half transfer interrupt\n                  flag (x = 3..0)\n       \
    \ \"\"\"\n        return self._chtif2\n\n    @chtif2.setter\n    def chtif2(self,\
    \ value: int) -> None:\n        self._chtif2.value = value\n\n    @property\n\
    \    def cteif2(self) -> Field:\n        \"\"\"\n        CTEIF2\n\n        Stream\
    \ x clear transfer error interrupt\n                  flag (x = 3..0)\n      \
    \  \"\"\"\n        return self._cteif2\n\n    @cteif2.setter\n    def cteif2(self,\
    \ value: int) -> None:\n        self._cteif2.value = value\n\n    @property\n\
    \    def cdmeif2(self) -> Field:\n        \"\"\"\n        CDMEIF2\n\n        Stream\
    \ x clear direct mode error\n                  interrupt flag (x = 3..0)\n   \
    \     \"\"\"\n        return self._cdmeif2\n\n    @cdmeif2.setter\n    def cdmeif2(self,\
    \ value: int) -> None:\n        self._cdmeif2.value = value\n\n    @property\n\
    \    def cfeif2(self) -> Field:\n        \"\"\"\n        CFEIF2\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 3..0)\n        \"\"\
    \"\n        return self._cfeif2\n\n    @cfeif2.setter\n    def cfeif2(self, value:\
    \ int) -> None:\n        self._cfeif2.value = value\n\n    @property\n    def\
    \ ctcif1(self) -> Field:\n        \"\"\"\n        CTCIF1\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 3..0)\n        \"\"\
    \"\n        return self._ctcif1\n\n    @ctcif1.setter\n    def ctcif1(self, value:\
    \ int) -> None:\n        self._ctcif1.value = value\n\n    @property\n    def\
    \ chtif1(self) -> Field:\n        \"\"\"\n        CHTIF1\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._chtif1\n\n    @chtif1.setter\n    def chtif1(self, value:\
    \ int) -> None:\n        self._chtif1.value = value\n\n    @property\n    def\
    \ cteif1(self) -> Field:\n        \"\"\"\n        CTEIF1\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._cteif1\n\n    @cteif1.setter\n    def cteif1(self, value:\
    \ int) -> None:\n        self._cteif1.value = value\n\n    @property\n    def\
    \ cdmeif1(self) -> Field:\n        \"\"\"\n        CDMEIF1\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 3..0)\n     \
    \   \"\"\"\n        return self._cdmeif1\n\n    @cdmeif1.setter\n    def cdmeif1(self,\
    \ value: int) -> None:\n        self._cdmeif1.value = value\n\n    @property\n\
    \    def cfeif1(self) -> Field:\n        \"\"\"\n        CFEIF1\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 3..0)\n        \"\"\
    \"\n        return self._cfeif1\n\n    @cfeif1.setter\n    def cfeif1(self, value:\
    \ int) -> None:\n        self._cfeif1.value = value\n\n    @property\n    def\
    \ ctcif0(self) -> Field:\n        \"\"\"\n        CTCIF0\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 3..0)\n        \"\"\
    \"\n        return self._ctcif0\n\n    @ctcif0.setter\n    def ctcif0(self, value:\
    \ int) -> None:\n        self._ctcif0.value = value\n\n    @property\n    def\
    \ chtif0(self) -> Field:\n        \"\"\"\n        CHTIF0\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._chtif0\n\n    @chtif0.setter\n    def chtif0(self, value:\
    \ int) -> None:\n        self._chtif0.value = value\n\n    @property\n    def\
    \ cteif0(self) -> Field:\n        \"\"\"\n        CTEIF0\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._cteif0\n\n    @cteif0.setter\n    def cteif0(self, value:\
    \ int) -> None:\n        self._cteif0.value = value\n\n    @property\n    def\
    \ cdmeif0(self) -> Field:\n        \"\"\"\n        CDMEIF0\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 3..0)\n     \
    \   \"\"\"\n        return self._cdmeif0\n\n    @cdmeif0.setter\n    def cdmeif0(self,\
    \ value: int) -> None:\n        self._cdmeif0.value = value\n\n    @property\n\
    \    def cfeif0(self) -> Field:\n        \"\"\"\n        CFEIF0\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 3..0)\n        \"\"\
    \"\n        return self._cfeif0\n\n    @cfeif0.setter\n    def cfeif0(self, value:\
    \ int) -> None:\n        self._cfeif0.value = value\n\n\nclass HifcrRegister(Register):\n\
    \    \"\"\"\n    HIFCR\n\n    high interrupt flag clear\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ctcif7 = Field(\"ctcif7\"\
    , 27, 1)\n        self._chtif7 = Field(\"chtif7\", 26, 1)\n        self._cteif7\
    \ = Field(\"cteif7\", 25, 1)\n        self._cdmeif7 = Field(\"cdmeif7\", 24, 1)\n\
    \        self._cfeif7 = Field(\"cfeif7\", 22, 1)\n        self._ctcif6 = Field(\"\
    ctcif6\", 21, 1)\n        self._chtif6 = Field(\"chtif6\", 20, 1)\n        self._cteif6\
    \ = Field(\"cteif6\", 19, 1)\n        self._cdmeif6 = Field(\"cdmeif6\", 18, 1)\n\
    \        self._cfeif6 = Field(\"cfeif6\", 16, 1)\n        self._ctcif5 = Field(\"\
    ctcif5\", 11, 1)\n        self._chtif5 = Field(\"chtif5\", 10, 1)\n        self._cteif5\
    \ = Field(\"cteif5\", 9, 1)\n        self._cdmeif5 = Field(\"cdmeif5\", 8, 1)\n\
    \        self._cfeif5 = Field(\"cfeif5\", 6, 1)\n        self._ctcif4 = Field(\"\
    ctcif4\", 5, 1)\n        self._chtif4 = Field(\"chtif4\", 4, 1)\n        self._cteif4\
    \ = Field(\"cteif4\", 3, 1)\n        self._cdmeif4 = Field(\"cdmeif4\", 2, 1)\n\
    \        self._cfeif4 = Field(\"cfeif4\", 0, 1)\n        super().__init__(\"HIFCR\"\
    , 0x40026400 + 0xC)\n\n    @property\n    def ctcif7(self) -> Field:\n       \
    \ \"\"\"\n        CTCIF7\n\n        Stream x clear transfer complete\n       \
    \           interrupt flag (x = 7..4)\n        \"\"\"\n        return self._ctcif7\n\
    \n    @ctcif7.setter\n    def ctcif7(self, value: int) -> None:\n        self._ctcif7.value\
    \ = value\n\n    @property\n    def chtif7(self) -> Field:\n        \"\"\"\n \
    \       CHTIF7\n\n        Stream x clear half transfer interrupt\n           \
    \       flag (x = 7..4)\n        \"\"\"\n        return self._chtif7\n\n    @chtif7.setter\n\
    \    def chtif7(self, value: int) -> None:\n        self._chtif7.value = value\n\
    \n    @property\n    def cteif7(self) -> Field:\n        \"\"\"\n        CTEIF7\n\
    \n        Stream x clear transfer error interrupt\n                  flag (x =\
    \ 7..4)\n        \"\"\"\n        return self._cteif7\n\n    @cteif7.setter\n \
    \   def cteif7(self, value: int) -> None:\n        self._cteif7.value = value\n\
    \n    @property\n    def cdmeif7(self) -> Field:\n        \"\"\"\n        CDMEIF7\n\
    \n        Stream x clear direct mode error\n                  interrupt flag (x\
    \ = 7..4)\n        \"\"\"\n        return self._cdmeif7\n\n    @cdmeif7.setter\n\
    \    def cdmeif7(self, value: int) -> None:\n        self._cdmeif7.value = value\n\
    \n    @property\n    def cfeif7(self) -> Field:\n        \"\"\"\n        CFEIF7\n\
    \n        Stream x clear FIFO error interrupt flag\n                  (x = 7..4)\n\
    \        \"\"\"\n        return self._cfeif7\n\n    @cfeif7.setter\n    def cfeif7(self,\
    \ value: int) -> None:\n        self._cfeif7.value = value\n\n    @property\n\
    \    def ctcif6(self) -> Field:\n        \"\"\"\n        CTCIF6\n\n        Stream\
    \ x clear transfer complete\n                  interrupt flag (x = 7..4)\n   \
    \     \"\"\"\n        return self._ctcif6\n\n    @ctcif6.setter\n    def ctcif6(self,\
    \ value: int) -> None:\n        self._ctcif6.value = value\n\n    @property\n\
    \    def chtif6(self) -> Field:\n        \"\"\"\n        CHTIF6\n\n        Stream\
    \ x clear half transfer interrupt\n                  flag (x = 7..4)\n       \
    \ \"\"\"\n        return self._chtif6\n\n    @chtif6.setter\n    def chtif6(self,\
    \ value: int) -> None:\n        self._chtif6.value = value\n\n    @property\n\
    \    def cteif6(self) -> Field:\n        \"\"\"\n        CTEIF6\n\n        Stream\
    \ x clear transfer error interrupt\n                  flag (x = 7..4)\n      \
    \  \"\"\"\n        return self._cteif6\n\n    @cteif6.setter\n    def cteif6(self,\
    \ value: int) -> None:\n        self._cteif6.value = value\n\n    @property\n\
    \    def cdmeif6(self) -> Field:\n        \"\"\"\n        CDMEIF6\n\n        Stream\
    \ x clear direct mode error\n                  interrupt flag (x = 7..4)\n   \
    \     \"\"\"\n        return self._cdmeif6\n\n    @cdmeif6.setter\n    def cdmeif6(self,\
    \ value: int) -> None:\n        self._cdmeif6.value = value\n\n    @property\n\
    \    def cfeif6(self) -> Field:\n        \"\"\"\n        CFEIF6\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 7..4)\n        \"\"\
    \"\n        return self._cfeif6\n\n    @cfeif6.setter\n    def cfeif6(self, value:\
    \ int) -> None:\n        self._cfeif6.value = value\n\n    @property\n    def\
    \ ctcif5(self) -> Field:\n        \"\"\"\n        CTCIF5\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 7..4)\n        \"\"\
    \"\n        return self._ctcif5\n\n    @ctcif5.setter\n    def ctcif5(self, value:\
    \ int) -> None:\n        self._ctcif5.value = value\n\n    @property\n    def\
    \ chtif5(self) -> Field:\n        \"\"\"\n        CHTIF5\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._chtif5\n\n    @chtif5.setter\n    def chtif5(self, value:\
    \ int) -> None:\n        self._chtif5.value = value\n\n    @property\n    def\
    \ cteif5(self) -> Field:\n        \"\"\"\n        CTEIF5\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._cteif5\n\n    @cteif5.setter\n    def cteif5(self, value:\
    \ int) -> None:\n        self._cteif5.value = value\n\n    @property\n    def\
    \ cdmeif5(self) -> Field:\n        \"\"\"\n        CDMEIF5\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 7..4)\n     \
    \   \"\"\"\n        return self._cdmeif5\n\n    @cdmeif5.setter\n    def cdmeif5(self,\
    \ value: int) -> None:\n        self._cdmeif5.value = value\n\n    @property\n\
    \    def cfeif5(self) -> Field:\n        \"\"\"\n        CFEIF5\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 7..4)\n        \"\"\
    \"\n        return self._cfeif5\n\n    @cfeif5.setter\n    def cfeif5(self, value:\
    \ int) -> None:\n        self._cfeif5.value = value\n\n    @property\n    def\
    \ ctcif4(self) -> Field:\n        \"\"\"\n        CTCIF4\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 7..4)\n        \"\"\
    \"\n        return self._ctcif4\n\n    @ctcif4.setter\n    def ctcif4(self, value:\
    \ int) -> None:\n        self._ctcif4.value = value\n\n    @property\n    def\
    \ chtif4(self) -> Field:\n        \"\"\"\n        CHTIF4\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._chtif4\n\n    @chtif4.setter\n    def chtif4(self, value:\
    \ int) -> None:\n        self._chtif4.value = value\n\n    @property\n    def\
    \ cteif4(self) -> Field:\n        \"\"\"\n        CTEIF4\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._cteif4\n\n    @cteif4.setter\n    def cteif4(self, value:\
    \ int) -> None:\n        self._cteif4.value = value\n\n    @property\n    def\
    \ cdmeif4(self) -> Field:\n        \"\"\"\n        CDMEIF4\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 7..4)\n     \
    \   \"\"\"\n        return self._cdmeif4\n\n    @cdmeif4.setter\n    def cdmeif4(self,\
    \ value: int) -> None:\n        self._cdmeif4.value = value\n\n    @property\n\
    \    def cfeif4(self) -> Field:\n        \"\"\"\n        CFEIF4\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 7..4)\n        \"\"\
    \"\n        return self._cfeif4\n\n    @cfeif4.setter\n    def cfeif4(self, value:\
    \ int) -> None:\n        self._cfeif4.value = value\n\n\nclass S0crRegister(Register):\n\
    \    \"\"\"\n    S0CR\n\n    stream x configuration\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._chsel = Field(\"chsel\"\
    , 25, 3)\n        self._mburst = Field(\"mburst\", 23, 2)\n        self._pburst\
    \ = Field(\"pburst\", 21, 2)\n        self._ct = Field(\"ct\", 19, 1)\n      \
    \  self._dbm = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n\
    \        self._pincos = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"\
    msize\", 13, 2)\n        self._psize = Field(\"psize\", 11, 2)\n        self._minc\
    \ = Field(\"minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n     \
    \   self._circ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6,\
    \ 2)\n        self._pfctrl = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"\
    tcie\", 4, 1)\n        self._htie = Field(\"htie\", 3, 1)\n        self._teie\
    \ = Field(\"teie\", 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n    \
    \    self._en = Field(\"en\", 0, 1)\n        super().__init__(\"S0CR\", 0x40026400\
    \ + 0x10)\n\n    @property\n    def chsel(self) -> Field:\n        \"\"\"\n  \
    \      CHSEL\n\n        Channel selection\n        \"\"\"\n        return self._chsel\n\
    \n    @chsel.setter\n    def chsel(self, value: int) -> None:\n        self._chsel.value\
    \ = value\n\n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n \
    \       MBURST\n\n        Memory burst transfer\n                  configuration\n\
    \        \"\"\"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self,\
    \ value: int) -> None:\n        self._mburst.value = value\n\n    @property\n\
    \    def pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ct(self) -> Field:\n\
    \        \"\"\"\n        CT\n\n        Current target (only in double buffer\n\
    \                  mode)\n        \"\"\"\n        return self._ct\n\n    @ct.setter\n\
    \    def ct(self, value: int) -> None:\n        self._ct.value = value\n\n   \
    \ @property\n    def dbm(self) -> Field:\n        \"\"\"\n        DBM\n\n    \
    \    Double buffer mode\n        \"\"\"\n        return self._dbm\n\n    @dbm.setter\n\
    \    def dbm(self, value: int) -> None:\n        self._dbm.value = value\n\n \
    \   @property\n    def pl(self) -> Field:\n        \"\"\"\n        PL\n\n    \
    \    Priority level\n        \"\"\"\n        return self._pl\n\n    @pl.setter\n\
    \    def pl(self, value: int) -> None:\n        self._pl.value = value\n\n   \
    \ @property\n    def pincos(self) -> Field:\n        \"\"\"\n        PINCOS\n\n\
    \        Peripheral increment offset\n                  size\n        \"\"\"\n\
    \        return self._pincos\n\n    @pincos.setter\n    def pincos(self, value:\
    \ int) -> None:\n        self._pincos.value = value\n\n    @property\n    def\
    \ msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\n        Memory data\
    \ size\n        \"\"\"\n        return self._msize\n\n    @msize.setter\n    def\
    \ msize(self, value: int) -> None:\n        self._msize.value = value\n\n    @property\n\
    \    def psize(self) -> Field:\n        \"\"\"\n        PSIZE\n\n        Peripheral\
    \ data size\n        \"\"\"\n        return self._psize\n\n    @psize.setter\n\
    \    def psize(self, value: int) -> None:\n        self._psize.value = value\n\
    \n    @property\n    def minc(self) -> Field:\n        \"\"\"\n        MINC\n\n\
    \        Memory increment mode\n        \"\"\"\n        return self._minc\n\n\
    \    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S0ndtrRegister(Register):\n\
    \    \"\"\"\n    S0NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S0NDTR\", 0x40026400 + 0x14)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S0parRegister(Register):\n    \"\"\"\n    S0PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S0PAR\",\
    \ 0x40026400 + 0x18)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S0m0arRegister(Register):\n    \"\"\"\n    S0M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S0M0AR\"\
    , 0x40026400 + 0x1C)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S0m1arRegister(Register):\n    \"\"\"\n\
    \    S0M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S0M1AR\", 0x40026400 + 0x20)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S0fcrRegister(Register):\n    \"\"\
    \"\n    S0FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S0FCR\", 0x40026400 + 0x24)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S1crRegister(Register):\n    \"\"\"\n    S1CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S1CR\", 0x40026400 + 0x28)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S1ndtrRegister(Register):\n\
    \    \"\"\"\n    S1NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S1NDTR\", 0x40026400 + 0x2C)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S1parRegister(Register):\n    \"\"\"\n    S1PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S1PAR\",\
    \ 0x40026400 + 0x30)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S1m0arRegister(Register):\n    \"\"\"\n    S1M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S1M0AR\"\
    , 0x40026400 + 0x34)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S1m1arRegister(Register):\n    \"\"\"\n\
    \    S1M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S1M1AR\", 0x40026400 + 0x38)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S1fcrRegister(Register):\n    \"\"\
    \"\n    S1FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S1FCR\", 0x40026400 + 0x3C)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S2crRegister(Register):\n    \"\"\"\n    S2CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S2CR\", 0x40026400 + 0x40)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S2ndtrRegister(Register):\n\
    \    \"\"\"\n    S2NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S2NDTR\", 0x40026400 + 0x44)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S2parRegister(Register):\n    \"\"\"\n    S2PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S2PAR\",\
    \ 0x40026400 + 0x48)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S2m0arRegister(Register):\n    \"\"\"\n    S2M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S2M0AR\"\
    , 0x40026400 + 0x4C)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S2m1arRegister(Register):\n    \"\"\"\n\
    \    S2M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S2M1AR\", 0x40026400 + 0x50)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S2fcrRegister(Register):\n    \"\"\
    \"\n    S2FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S2FCR\", 0x40026400 + 0x54)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S3crRegister(Register):\n    \"\"\"\n    S3CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S3CR\", 0x40026400 + 0x58)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S3ndtrRegister(Register):\n\
    \    \"\"\"\n    S3NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S3NDTR\", 0x40026400 + 0x5C)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S3parRegister(Register):\n    \"\"\"\n    S3PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S3PAR\",\
    \ 0x40026400 + 0x60)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S3m0arRegister(Register):\n    \"\"\"\n    S3M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S3M0AR\"\
    , 0x40026400 + 0x64)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S3m1arRegister(Register):\n    \"\"\"\n\
    \    S3M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S3M1AR\", 0x40026400 + 0x68)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S3fcrRegister(Register):\n    \"\"\
    \"\n    S3FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S3FCR\", 0x40026400 + 0x6C)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S4crRegister(Register):\n    \"\"\"\n    S4CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S4CR\", 0x40026400 + 0x70)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S4ndtrRegister(Register):\n\
    \    \"\"\"\n    S4NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S4NDTR\", 0x40026400 + 0x74)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S4parRegister(Register):\n    \"\"\"\n    S4PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S4PAR\",\
    \ 0x40026400 + 0x78)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S4m0arRegister(Register):\n    \"\"\"\n    S4M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S4M0AR\"\
    , 0x40026400 + 0x7C)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S4m1arRegister(Register):\n    \"\"\"\n\
    \    S4M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S4M1AR\", 0x40026400 + 0x80)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S4fcrRegister(Register):\n    \"\"\
    \"\n    S4FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S4FCR\", 0x40026400 + 0x84)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S5crRegister(Register):\n    \"\"\"\n    S5CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S5CR\", 0x40026400 + 0x88)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S5ndtrRegister(Register):\n\
    \    \"\"\"\n    S5NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S5NDTR\", 0x40026400 + 0x8C)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S5parRegister(Register):\n    \"\"\"\n    S5PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S5PAR\",\
    \ 0x40026400 + 0x90)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S5m0arRegister(Register):\n    \"\"\"\n    S5M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S5M0AR\"\
    , 0x40026400 + 0x94)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S5m1arRegister(Register):\n    \"\"\"\n\
    \    S5M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S5M1AR\", 0x40026400 + 0x98)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S5fcrRegister(Register):\n    \"\"\
    \"\n    S5FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S5FCR\", 0x40026400 + 0x9C)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S6crRegister(Register):\n    \"\"\"\n    S6CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S6CR\", 0x40026400 + 0xA0)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S6ndtrRegister(Register):\n\
    \    \"\"\"\n    S6NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S6NDTR\", 0x40026400 + 0xA4)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S6parRegister(Register):\n    \"\"\"\n    S6PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S6PAR\",\
    \ 0x40026400 + 0xA8)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S6m0arRegister(Register):\n    \"\"\"\n    S6M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S6M0AR\"\
    , 0x40026400 + 0xAC)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S6m1arRegister(Register):\n    \"\"\"\n\
    \    S6M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S6M1AR\", 0x40026400 + 0xB0)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S6fcrRegister(Register):\n    \"\"\
    \"\n    S6FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S6FCR\", 0x40026400 + 0xB4)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S7crRegister(Register):\n    \"\"\"\n    S7CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S7CR\", 0x40026400 + 0xB8)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S7ndtrRegister(Register):\n\
    \    \"\"\"\n    S7NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S7NDTR\", 0x40026400 + 0xBC)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S7parRegister(Register):\n    \"\"\"\n    S7PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S7PAR\",\
    \ 0x40026400 + 0xC0)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S7m0arRegister(Register):\n    \"\"\"\n    S7M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S7M0AR\"\
    , 0x40026400 + 0xC4)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S7m1arRegister(Register):\n    \"\"\"\n\
    \    S7M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S7M1AR\", 0x40026400 + 0xC8)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S7fcrRegister(Register):\n    \"\"\
    \"\n    S7FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S7FCR\", 0x40026400 + 0xCC)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass Dma2(Peripheral):\n    \"\"\"\n    DMA2\n\n    DMA controller\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lisr = LisrRegister()\n\
    \        self._hisr = HisrRegister()\n        self._lifcr = LifcrRegister()\n\
    \        self._hifcr = HifcrRegister()\n        self._s0cr = S0crRegister()\n\
    \        self._s0ndtr = S0ndtrRegister()\n        self._s0par = S0parRegister()\n\
    \        self._s0m0ar = S0m0arRegister()\n        self._s0m1ar = S0m1arRegister()\n\
    \        self._s0fcr = S0fcrRegister()\n        self._s1cr = S1crRegister()\n\
    \        self._s1ndtr = S1ndtrRegister()\n        self._s1par = S1parRegister()\n\
    \        self._s1m0ar = S1m0arRegister()\n        self._s1m1ar = S1m1arRegister()\n\
    \        self._s1fcr = S1fcrRegister()\n        self._s2cr = S2crRegister()\n\
    \        self._s2ndtr = S2ndtrRegister()\n        self._s2par = S2parRegister()\n\
    \        self._s2m0ar = S2m0arRegister()\n        self._s2m1ar = S2m1arRegister()\n\
    \        self._s2fcr = S2fcrRegister()\n        self._s3cr = S3crRegister()\n\
    \        self._s3ndtr = S3ndtrRegister()\n        self._s3par = S3parRegister()\n\
    \        self._s3m0ar = S3m0arRegister()\n        self._s3m1ar = S3m1arRegister()\n\
    \        self._s3fcr = S3fcrRegister()\n        self._s4cr = S4crRegister()\n\
    \        self._s4ndtr = S4ndtrRegister()\n        self._s4par = S4parRegister()\n\
    \        self._s4m0ar = S4m0arRegister()\n        self._s4m1ar = S4m1arRegister()\n\
    \        self._s4fcr = S4fcrRegister()\n        self._s5cr = S5crRegister()\n\
    \        self._s5ndtr = S5ndtrRegister()\n        self._s5par = S5parRegister()\n\
    \        self._s5m0ar = S5m0arRegister()\n        self._s5m1ar = S5m1arRegister()\n\
    \        self._s5fcr = S5fcrRegister()\n        self._s6cr = S6crRegister()\n\
    \        self._s6ndtr = S6ndtrRegister()\n        self._s6par = S6parRegister()\n\
    \        self._s6m0ar = S6m0arRegister()\n        self._s6m1ar = S6m1arRegister()\n\
    \        self._s6fcr = S6fcrRegister()\n        self._s7cr = S7crRegister()\n\
    \        self._s7ndtr = S7ndtrRegister()\n        self._s7par = S7parRegister()\n\
    \        self._s7m0ar = S7m0arRegister()\n        self._s7m1ar = S7m1arRegister()\n\
    \        self._s7fcr = S7fcrRegister()\n        super().__init__(\"dma2\", 0x40026400)\n\
    \n    @property\n    def lisr(self) -> LisrRegister:\n        return self._lisr\n\
    \n    @lisr.setter\n    def lisr(self, value: int) -> None:\n        self._lisr.value\
    \ = value\n\n    @property\n    def hisr(self) -> HisrRegister:\n        return\
    \ self._hisr\n\n    @hisr.setter\n    def hisr(self, value: int) -> None:\n  \
    \      self._hisr.value = value\n\n    @property\n    def lifcr(self) -> LifcrRegister:\n\
    \        return self._lifcr\n\n    @lifcr.setter\n    def lifcr(self, value: int)\
    \ -> None:\n        self._lifcr.value = value\n\n    @property\n    def hifcr(self)\
    \ -> HifcrRegister:\n        return self._hifcr\n\n    @hifcr.setter\n    def\
    \ hifcr(self, value: int) -> None:\n        self._hifcr.value = value\n\n    @property\n\
    \    def s0cr(self) -> S0crRegister:\n        return self._s0cr\n\n    @s0cr.setter\n\
    \    def s0cr(self, value: int) -> None:\n        self._s0cr.value = value\n\n\
    \    @property\n    def s0ndtr(self) -> S0ndtrRegister:\n        return self._s0ndtr\n\
    \n    @s0ndtr.setter\n    def s0ndtr(self, value: int) -> None:\n        self._s0ndtr.value\
    \ = value\n\n    @property\n    def s0par(self) -> S0parRegister:\n        return\
    \ self._s0par\n\n    @s0par.setter\n    def s0par(self, value: int) -> None:\n\
    \        self._s0par.value = value\n\n    @property\n    def s0m0ar(self) -> S0m0arRegister:\n\
    \        return self._s0m0ar\n\n    @s0m0ar.setter\n    def s0m0ar(self, value:\
    \ int) -> None:\n        self._s0m0ar.value = value\n\n    @property\n    def\
    \ s0m1ar(self) -> S0m1arRegister:\n        return self._s0m1ar\n\n    @s0m1ar.setter\n\
    \    def s0m1ar(self, value: int) -> None:\n        self._s0m1ar.value = value\n\
    \n    @property\n    def s0fcr(self) -> S0fcrRegister:\n        return self._s0fcr\n\
    \n    @s0fcr.setter\n    def s0fcr(self, value: int) -> None:\n        self._s0fcr.value\
    \ = value\n\n    @property\n    def s1cr(self) -> S1crRegister:\n        return\
    \ self._s1cr\n\n    @s1cr.setter\n    def s1cr(self, value: int) -> None:\n  \
    \      self._s1cr.value = value\n\n    @property\n    def s1ndtr(self) -> S1ndtrRegister:\n\
    \        return self._s1ndtr\n\n    @s1ndtr.setter\n    def s1ndtr(self, value:\
    \ int) -> None:\n        self._s1ndtr.value = value\n\n    @property\n    def\
    \ s1par(self) -> S1parRegister:\n        return self._s1par\n\n    @s1par.setter\n\
    \    def s1par(self, value: int) -> None:\n        self._s1par.value = value\n\
    \n    @property\n    def s1m0ar(self) -> S1m0arRegister:\n        return self._s1m0ar\n\
    \n    @s1m0ar.setter\n    def s1m0ar(self, value: int) -> None:\n        self._s1m0ar.value\
    \ = value\n\n    @property\n    def s1m1ar(self) -> S1m1arRegister:\n        return\
    \ self._s1m1ar\n\n    @s1m1ar.setter\n    def s1m1ar(self, value: int) -> None:\n\
    \        self._s1m1ar.value = value\n\n    @property\n    def s1fcr(self) -> S1fcrRegister:\n\
    \        return self._s1fcr\n\n    @s1fcr.setter\n    def s1fcr(self, value: int)\
    \ -> None:\n        self._s1fcr.value = value\n\n    @property\n    def s2cr(self)\
    \ -> S2crRegister:\n        return self._s2cr\n\n    @s2cr.setter\n    def s2cr(self,\
    \ value: int) -> None:\n        self._s2cr.value = value\n\n    @property\n  \
    \  def s2ndtr(self) -> S2ndtrRegister:\n        return self._s2ndtr\n\n    @s2ndtr.setter\n\
    \    def s2ndtr(self, value: int) -> None:\n        self._s2ndtr.value = value\n\
    \n    @property\n    def s2par(self) -> S2parRegister:\n        return self._s2par\n\
    \n    @s2par.setter\n    def s2par(self, value: int) -> None:\n        self._s2par.value\
    \ = value\n\n    @property\n    def s2m0ar(self) -> S2m0arRegister:\n        return\
    \ self._s2m0ar\n\n    @s2m0ar.setter\n    def s2m0ar(self, value: int) -> None:\n\
    \        self._s2m0ar.value = value\n\n    @property\n    def s2m1ar(self) ->\
    \ S2m1arRegister:\n        return self._s2m1ar\n\n    @s2m1ar.setter\n    def\
    \ s2m1ar(self, value: int) -> None:\n        self._s2m1ar.value = value\n\n  \
    \  @property\n    def s2fcr(self) -> S2fcrRegister:\n        return self._s2fcr\n\
    \n    @s2fcr.setter\n    def s2fcr(self, value: int) -> None:\n        self._s2fcr.value\
    \ = value\n\n    @property\n    def s3cr(self) -> S3crRegister:\n        return\
    \ self._s3cr\n\n    @s3cr.setter\n    def s3cr(self, value: int) -> None:\n  \
    \      self._s3cr.value = value\n\n    @property\n    def s3ndtr(self) -> S3ndtrRegister:\n\
    \        return self._s3ndtr\n\n    @s3ndtr.setter\n    def s3ndtr(self, value:\
    \ int) -> None:\n        self._s3ndtr.value = value\n\n    @property\n    def\
    \ s3par(self) -> S3parRegister:\n        return self._s3par\n\n    @s3par.setter\n\
    \    def s3par(self, value: int) -> None:\n        self._s3par.value = value\n\
    \n    @property\n    def s3m0ar(self) -> S3m0arRegister:\n        return self._s3m0ar\n\
    \n    @s3m0ar.setter\n    def s3m0ar(self, value: int) -> None:\n        self._s3m0ar.value\
    \ = value\n\n    @property\n    def s3m1ar(self) -> S3m1arRegister:\n        return\
    \ self._s3m1ar\n\n    @s3m1ar.setter\n    def s3m1ar(self, value: int) -> None:\n\
    \        self._s3m1ar.value = value\n\n    @property\n    def s3fcr(self) -> S3fcrRegister:\n\
    \        return self._s3fcr\n\n    @s3fcr.setter\n    def s3fcr(self, value: int)\
    \ -> None:\n        self._s3fcr.value = value\n\n    @property\n    def s4cr(self)\
    \ -> S4crRegister:\n        return self._s4cr\n\n    @s4cr.setter\n    def s4cr(self,\
    \ value: int) -> None:\n        self._s4cr.value = value\n\n    @property\n  \
    \  def s4ndtr(self) -> S4ndtrRegister:\n        return self._s4ndtr\n\n    @s4ndtr.setter\n\
    \    def s4ndtr(self, value: int) -> None:\n        self._s4ndtr.value = value\n\
    \n    @property\n    def s4par(self) -> S4parRegister:\n        return self._s4par\n\
    \n    @s4par.setter\n    def s4par(self, value: int) -> None:\n        self._s4par.value\
    \ = value\n\n    @property\n    def s4m0ar(self) -> S4m0arRegister:\n        return\
    \ self._s4m0ar\n\n    @s4m0ar.setter\n    def s4m0ar(self, value: int) -> None:\n\
    \        self._s4m0ar.value = value\n\n    @property\n    def s4m1ar(self) ->\
    \ S4m1arRegister:\n        return self._s4m1ar\n\n    @s4m1ar.setter\n    def\
    \ s4m1ar(self, value: int) -> None:\n        self._s4m1ar.value = value\n\n  \
    \  @property\n    def s4fcr(self) -> S4fcrRegister:\n        return self._s4fcr\n\
    \n    @s4fcr.setter\n    def s4fcr(self, value: int) -> None:\n        self._s4fcr.value\
    \ = value\n\n    @property\n    def s5cr(self) -> S5crRegister:\n        return\
    \ self._s5cr\n\n    @s5cr.setter\n    def s5cr(self, value: int) -> None:\n  \
    \      self._s5cr.value = value\n\n    @property\n    def s5ndtr(self) -> S5ndtrRegister:\n\
    \        return self._s5ndtr\n\n    @s5ndtr.setter\n    def s5ndtr(self, value:\
    \ int) -> None:\n        self._s5ndtr.value = value\n\n    @property\n    def\
    \ s5par(self) -> S5parRegister:\n        return self._s5par\n\n    @s5par.setter\n\
    \    def s5par(self, value: int) -> None:\n        self._s5par.value = value\n\
    \n    @property\n    def s5m0ar(self) -> S5m0arRegister:\n        return self._s5m0ar\n\
    \n    @s5m0ar.setter\n    def s5m0ar(self, value: int) -> None:\n        self._s5m0ar.value\
    \ = value\n\n    @property\n    def s5m1ar(self) -> S5m1arRegister:\n        return\
    \ self._s5m1ar\n\n    @s5m1ar.setter\n    def s5m1ar(self, value: int) -> None:\n\
    \        self._s5m1ar.value = value\n\n    @property\n    def s5fcr(self) -> S5fcrRegister:\n\
    \        return self._s5fcr\n\n    @s5fcr.setter\n    def s5fcr(self, value: int)\
    \ -> None:\n        self._s5fcr.value = value\n\n    @property\n    def s6cr(self)\
    \ -> S6crRegister:\n        return self._s6cr\n\n    @s6cr.setter\n    def s6cr(self,\
    \ value: int) -> None:\n        self._s6cr.value = value\n\n    @property\n  \
    \  def s6ndtr(self) -> S6ndtrRegister:\n        return self._s6ndtr\n\n    @s6ndtr.setter\n\
    \    def s6ndtr(self, value: int) -> None:\n        self._s6ndtr.value = value\n\
    \n    @property\n    def s6par(self) -> S6parRegister:\n        return self._s6par\n\
    \n    @s6par.setter\n    def s6par(self, value: int) -> None:\n        self._s6par.value\
    \ = value\n\n    @property\n    def s6m0ar(self) -> S6m0arRegister:\n        return\
    \ self._s6m0ar\n\n    @s6m0ar.setter\n    def s6m0ar(self, value: int) -> None:\n\
    \        self._s6m0ar.value = value\n\n    @property\n    def s6m1ar(self) ->\
    \ S6m1arRegister:\n        return self._s6m1ar\n\n    @s6m1ar.setter\n    def\
    \ s6m1ar(self, value: int) -> None:\n        self._s6m1ar.value = value\n\n  \
    \  @property\n    def s6fcr(self) -> S6fcrRegister:\n        return self._s6fcr\n\
    \n    @s6fcr.setter\n    def s6fcr(self, value: int) -> None:\n        self._s6fcr.value\
    \ = value\n\n    @property\n    def s7cr(self) -> S7crRegister:\n        return\
    \ self._s7cr\n\n    @s7cr.setter\n    def s7cr(self, value: int) -> None:\n  \
    \      self._s7cr.value = value\n\n    @property\n    def s7ndtr(self) -> S7ndtrRegister:\n\
    \        return self._s7ndtr\n\n    @s7ndtr.setter\n    def s7ndtr(self, value:\
    \ int) -> None:\n        self._s7ndtr.value = value\n\n    @property\n    def\
    \ s7par(self) -> S7parRegister:\n        return self._s7par\n\n    @s7par.setter\n\
    \    def s7par(self, value: int) -> None:\n        self._s7par.value = value\n\
    \n    @property\n    def s7m0ar(self) -> S7m0arRegister:\n        return self._s7m0ar\n\
    \n    @s7m0ar.setter\n    def s7m0ar(self, value: int) -> None:\n        self._s7m0ar.value\
    \ = value\n\n    @property\n    def s7m1ar(self) -> S7m1arRegister:\n        return\
    \ self._s7m1ar\n\n    @s7m1ar.setter\n    def s7m1ar(self, value: int) -> None:\n\
    \        self._s7m1ar.value = value\n\n    @property\n    def s7fcr(self) -> S7fcrRegister:\n\
    \        return self._s7fcr\n\n    @s7fcr.setter\n    def s7fcr(self, value: int)\
    \ -> None:\n        self._s7fcr.value = value\n"
  name: DMA2
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass LisrRegister(Register):\n    \"\"\"\n    LISR\n\n    low\
    \ interrupt status register\n    \"\"\"\n\n    def __init__(self):\n        self._tcif3\
    \ = Field(\"tcif3\", 27, 1)\n        self._htif3 = Field(\"htif3\", 26, 1)\n \
    \       self._teif3 = Field(\"teif3\", 25, 1)\n        self._dmeif3 = Field(\"\
    dmeif3\", 24, 1)\n        self._feif3 = Field(\"feif3\", 22, 1)\n        self._tcif2\
    \ = Field(\"tcif2\", 21, 1)\n        self._htif2 = Field(\"htif2\", 20, 1)\n \
    \       self._teif2 = Field(\"teif2\", 19, 1)\n        self._dmeif2 = Field(\"\
    dmeif2\", 18, 1)\n        self._feif2 = Field(\"feif2\", 16, 1)\n        self._tcif1\
    \ = Field(\"tcif1\", 11, 1)\n        self._htif1 = Field(\"htif1\", 10, 1)\n \
    \       self._teif1 = Field(\"teif1\", 9, 1)\n        self._dmeif1 = Field(\"\
    dmeif1\", 8, 1)\n        self._feif1 = Field(\"feif1\", 6, 1)\n        self._tcif0\
    \ = Field(\"tcif0\", 5, 1)\n        self._htif0 = Field(\"htif0\", 4, 1)\n   \
    \     self._teif0 = Field(\"teif0\", 3, 1)\n        self._dmeif0 = Field(\"dmeif0\"\
    , 2, 1)\n        self._feif0 = Field(\"feif0\", 0, 1)\n        super().__init__(\"\
    LISR\", 0x40026000 + 0x0)\n\n    @property\n    def tcif3(self) -> Field:\n  \
    \      \"\"\"\n        TCIF3\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif3\n\
    \n    @tcif3.setter\n    def tcif3(self, value: int) -> None:\n        self._tcif3.value\
    \ = value\n\n    @property\n    def htif3(self) -> Field:\n        \"\"\"\n  \
    \      HTIF3\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif3\n\n    @htif3.setter\n\
    \    def htif3(self, value: int) -> None:\n        self._htif3.value = value\n\
    \n    @property\n    def teif3(self) -> Field:\n        \"\"\"\n        TEIF3\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif3\n\n    @teif3.setter\n    def teif3(self,\
    \ value: int) -> None:\n        self._teif3.value = value\n\n    @property\n \
    \   def dmeif3(self) -> Field:\n        \"\"\"\n        DMEIF3\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif3\n\n    @dmeif3.setter\n    def dmeif3(self, value:\
    \ int) -> None:\n        self._dmeif3.value = value\n\n    @property\n    def\
    \ feif3(self) -> Field:\n        \"\"\"\n        FEIF3\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif3\n\n    @feif3.setter\n    def feif3(self, value: int) -> None:\n\
    \        self._feif3.value = value\n\n    @property\n    def tcif2(self) -> Field:\n\
    \        \"\"\"\n        TCIF2\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif2\n\
    \n    @tcif2.setter\n    def tcif2(self, value: int) -> None:\n        self._tcif2.value\
    \ = value\n\n    @property\n    def htif2(self) -> Field:\n        \"\"\"\n  \
    \      HTIF2\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif2\n\n    @htif2.setter\n\
    \    def htif2(self, value: int) -> None:\n        self._htif2.value = value\n\
    \n    @property\n    def teif2(self) -> Field:\n        \"\"\"\n        TEIF2\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif2\n\n    @teif2.setter\n    def teif2(self,\
    \ value: int) -> None:\n        self._teif2.value = value\n\n    @property\n \
    \   def dmeif2(self) -> Field:\n        \"\"\"\n        DMEIF2\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif2\n\n    @dmeif2.setter\n    def dmeif2(self, value:\
    \ int) -> None:\n        self._dmeif2.value = value\n\n    @property\n    def\
    \ feif2(self) -> Field:\n        \"\"\"\n        FEIF2\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif2\n\n    @feif2.setter\n    def feif2(self, value: int) -> None:\n\
    \        self._feif2.value = value\n\n    @property\n    def tcif1(self) -> Field:\n\
    \        \"\"\"\n        TCIF1\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif1\n\
    \n    @tcif1.setter\n    def tcif1(self, value: int) -> None:\n        self._tcif1.value\
    \ = value\n\n    @property\n    def htif1(self) -> Field:\n        \"\"\"\n  \
    \      HTIF1\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif1\n\n    @htif1.setter\n\
    \    def htif1(self, value: int) -> None:\n        self._htif1.value = value\n\
    \n    @property\n    def teif1(self) -> Field:\n        \"\"\"\n        TEIF1\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif1\n\n    @teif1.setter\n    def teif1(self,\
    \ value: int) -> None:\n        self._teif1.value = value\n\n    @property\n \
    \   def dmeif1(self) -> Field:\n        \"\"\"\n        DMEIF1\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif1\n\n    @dmeif1.setter\n    def dmeif1(self, value:\
    \ int) -> None:\n        self._dmeif1.value = value\n\n    @property\n    def\
    \ feif1(self) -> Field:\n        \"\"\"\n        FEIF1\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif1\n\n    @feif1.setter\n    def feif1(self, value: int) -> None:\n\
    \        self._feif1.value = value\n\n    @property\n    def tcif0(self) -> Field:\n\
    \        \"\"\"\n        TCIF0\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x = 3..0)\n        \"\"\"\n        return self._tcif0\n\
    \n    @tcif0.setter\n    def tcif0(self, value: int) -> None:\n        self._tcif0.value\
    \ = value\n\n    @property\n    def htif0(self) -> Field:\n        \"\"\"\n  \
    \      HTIF0\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=3..0)\n        \"\"\"\n        return self._htif0\n\n    @htif0.setter\n\
    \    def htif0(self, value: int) -> None:\n        self._htif0.value = value\n\
    \n    @property\n    def teif0(self) -> Field:\n        \"\"\"\n        TEIF0\n\
    \n        Stream x transfer error interrupt flag\n                  (x=3..0)\n\
    \        \"\"\"\n        return self._teif0\n\n    @teif0.setter\n    def teif0(self,\
    \ value: int) -> None:\n        self._teif0.value = value\n\n    @property\n \
    \   def dmeif0(self) -> Field:\n        \"\"\"\n        DMEIF0\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=3..0)\n        \"\"\
    \"\n        return self._dmeif0\n\n    @dmeif0.setter\n    def dmeif0(self, value:\
    \ int) -> None:\n        self._dmeif0.value = value\n\n    @property\n    def\
    \ feif0(self) -> Field:\n        \"\"\"\n        FEIF0\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=3..0)\n        \"\"\"\n        return\
    \ self._feif0\n\n    @feif0.setter\n    def feif0(self, value: int) -> None:\n\
    \        self._feif0.value = value\n\n\nclass HisrRegister(Register):\n    \"\"\
    \"\n    HISR\n\n    high interrupt status register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._tcif7 = Field(\"tcif7\", 27, 1)\n        self._htif7 = Field(\"\
    htif7\", 26, 1)\n        self._teif7 = Field(\"teif7\", 25, 1)\n        self._dmeif7\
    \ = Field(\"dmeif7\", 24, 1)\n        self._feif7 = Field(\"feif7\", 22, 1)\n\
    \        self._tcif6 = Field(\"tcif6\", 21, 1)\n        self._htif6 = Field(\"\
    htif6\", 20, 1)\n        self._teif6 = Field(\"teif6\", 19, 1)\n        self._dmeif6\
    \ = Field(\"dmeif6\", 18, 1)\n        self._feif6 = Field(\"feif6\", 16, 1)\n\
    \        self._tcif5 = Field(\"tcif5\", 11, 1)\n        self._htif5 = Field(\"\
    htif5\", 10, 1)\n        self._teif5 = Field(\"teif5\", 9, 1)\n        self._dmeif5\
    \ = Field(\"dmeif5\", 8, 1)\n        self._feif5 = Field(\"feif5\", 6, 1)\n  \
    \      self._tcif4 = Field(\"tcif4\", 5, 1)\n        self._htif4 = Field(\"htif4\"\
    , 4, 1)\n        self._teif4 = Field(\"teif4\", 3, 1)\n        self._dmeif4 =\
    \ Field(\"dmeif4\", 2, 1)\n        self._feif4 = Field(\"feif4\", 0, 1)\n    \
    \    super().__init__(\"HISR\", 0x40026000 + 0x4)\n\n    @property\n    def tcif7(self)\
    \ -> Field:\n        \"\"\"\n        TCIF7\n\n        Stream x transfer complete\
    \ interrupt\n                  flag (x=7..4)\n        \"\"\"\n        return self._tcif7\n\
    \n    @tcif7.setter\n    def tcif7(self, value: int) -> None:\n        self._tcif7.value\
    \ = value\n\n    @property\n    def htif7(self) -> Field:\n        \"\"\"\n  \
    \      HTIF7\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif7\n\n    @htif7.setter\n\
    \    def htif7(self, value: int) -> None:\n        self._htif7.value = value\n\
    \n    @property\n    def teif7(self) -> Field:\n        \"\"\"\n        TEIF7\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif7\n\n    @teif7.setter\n    def teif7(self,\
    \ value: int) -> None:\n        self._teif7.value = value\n\n    @property\n \
    \   def dmeif7(self) -> Field:\n        \"\"\"\n        DMEIF7\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif7\n\n    @dmeif7.setter\n    def dmeif7(self, value:\
    \ int) -> None:\n        self._dmeif7.value = value\n\n    @property\n    def\
    \ feif7(self) -> Field:\n        \"\"\"\n        FEIF7\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif7\n\n    @feif7.setter\n    def feif7(self, value: int) -> None:\n\
    \        self._feif7.value = value\n\n    @property\n    def tcif6(self) -> Field:\n\
    \        \"\"\"\n        TCIF6\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x=7..4)\n        \"\"\"\n        return self._tcif6\n\
    \n    @tcif6.setter\n    def tcif6(self, value: int) -> None:\n        self._tcif6.value\
    \ = value\n\n    @property\n    def htif6(self) -> Field:\n        \"\"\"\n  \
    \      HTIF6\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif6\n\n    @htif6.setter\n\
    \    def htif6(self, value: int) -> None:\n        self._htif6.value = value\n\
    \n    @property\n    def teif6(self) -> Field:\n        \"\"\"\n        TEIF6\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif6\n\n    @teif6.setter\n    def teif6(self,\
    \ value: int) -> None:\n        self._teif6.value = value\n\n    @property\n \
    \   def dmeif6(self) -> Field:\n        \"\"\"\n        DMEIF6\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif6\n\n    @dmeif6.setter\n    def dmeif6(self, value:\
    \ int) -> None:\n        self._dmeif6.value = value\n\n    @property\n    def\
    \ feif6(self) -> Field:\n        \"\"\"\n        FEIF6\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif6\n\n    @feif6.setter\n    def feif6(self, value: int) -> None:\n\
    \        self._feif6.value = value\n\n    @property\n    def tcif5(self) -> Field:\n\
    \        \"\"\"\n        TCIF5\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x=7..4)\n        \"\"\"\n        return self._tcif5\n\
    \n    @tcif5.setter\n    def tcif5(self, value: int) -> None:\n        self._tcif5.value\
    \ = value\n\n    @property\n    def htif5(self) -> Field:\n        \"\"\"\n  \
    \      HTIF5\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif5\n\n    @htif5.setter\n\
    \    def htif5(self, value: int) -> None:\n        self._htif5.value = value\n\
    \n    @property\n    def teif5(self) -> Field:\n        \"\"\"\n        TEIF5\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif5\n\n    @teif5.setter\n    def teif5(self,\
    \ value: int) -> None:\n        self._teif5.value = value\n\n    @property\n \
    \   def dmeif5(self) -> Field:\n        \"\"\"\n        DMEIF5\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif5\n\n    @dmeif5.setter\n    def dmeif5(self, value:\
    \ int) -> None:\n        self._dmeif5.value = value\n\n    @property\n    def\
    \ feif5(self) -> Field:\n        \"\"\"\n        FEIF5\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif5\n\n    @feif5.setter\n    def feif5(self, value: int) -> None:\n\
    \        self._feif5.value = value\n\n    @property\n    def tcif4(self) -> Field:\n\
    \        \"\"\"\n        TCIF4\n\n        Stream x transfer complete interrupt\n\
    \                  flag (x=7..4)\n        \"\"\"\n        return self._tcif4\n\
    \n    @tcif4.setter\n    def tcif4(self, value: int) -> None:\n        self._tcif4.value\
    \ = value\n\n    @property\n    def htif4(self) -> Field:\n        \"\"\"\n  \
    \      HTIF4\n\n        Stream x half transfer interrupt flag\n              \
    \    (x=7..4)\n        \"\"\"\n        return self._htif4\n\n    @htif4.setter\n\
    \    def htif4(self, value: int) -> None:\n        self._htif4.value = value\n\
    \n    @property\n    def teif4(self) -> Field:\n        \"\"\"\n        TEIF4\n\
    \n        Stream x transfer error interrupt flag\n                  (x=7..4)\n\
    \        \"\"\"\n        return self._teif4\n\n    @teif4.setter\n    def teif4(self,\
    \ value: int) -> None:\n        self._teif4.value = value\n\n    @property\n \
    \   def dmeif4(self) -> Field:\n        \"\"\"\n        DMEIF4\n\n        Stream\
    \ x direct mode error interrupt\n                  flag (x=7..4)\n        \"\"\
    \"\n        return self._dmeif4\n\n    @dmeif4.setter\n    def dmeif4(self, value:\
    \ int) -> None:\n        self._dmeif4.value = value\n\n    @property\n    def\
    \ feif4(self) -> Field:\n        \"\"\"\n        FEIF4\n\n        Stream x FIFO\
    \ error interrupt flag\n                  (x=7..4)\n        \"\"\"\n        return\
    \ self._feif4\n\n    @feif4.setter\n    def feif4(self, value: int) -> None:\n\
    \        self._feif4.value = value\n\n\nclass LifcrRegister(Register):\n    \"\
    \"\"\n    LIFCR\n\n    low interrupt flag clear\n              register\n    \"\
    \"\"\n\n    def __init__(self):\n        self._ctcif3 = Field(\"ctcif3\", 27,\
    \ 1)\n        self._chtif3 = Field(\"chtif3\", 26, 1)\n        self._cteif3 =\
    \ Field(\"cteif3\", 25, 1)\n        self._cdmeif3 = Field(\"cdmeif3\", 24, 1)\n\
    \        self._cfeif3 = Field(\"cfeif3\", 22, 1)\n        self._ctcif2 = Field(\"\
    ctcif2\", 21, 1)\n        self._chtif2 = Field(\"chtif2\", 20, 1)\n        self._cteif2\
    \ = Field(\"cteif2\", 19, 1)\n        self._cdmeif2 = Field(\"cdmeif2\", 18, 1)\n\
    \        self._cfeif2 = Field(\"cfeif2\", 16, 1)\n        self._ctcif1 = Field(\"\
    ctcif1\", 11, 1)\n        self._chtif1 = Field(\"chtif1\", 10, 1)\n        self._cteif1\
    \ = Field(\"cteif1\", 9, 1)\n        self._cdmeif1 = Field(\"cdmeif1\", 8, 1)\n\
    \        self._cfeif1 = Field(\"cfeif1\", 6, 1)\n        self._ctcif0 = Field(\"\
    ctcif0\", 5, 1)\n        self._chtif0 = Field(\"chtif0\", 4, 1)\n        self._cteif0\
    \ = Field(\"cteif0\", 3, 1)\n        self._cdmeif0 = Field(\"cdmeif0\", 2, 1)\n\
    \        self._cfeif0 = Field(\"cfeif0\", 0, 1)\n        super().__init__(\"LIFCR\"\
    , 0x40026000 + 0x8)\n\n    @property\n    def ctcif3(self) -> Field:\n       \
    \ \"\"\"\n        CTCIF3\n\n        Stream x clear transfer complete\n       \
    \           interrupt flag (x = 3..0)\n        \"\"\"\n        return self._ctcif3\n\
    \n    @ctcif3.setter\n    def ctcif3(self, value: int) -> None:\n        self._ctcif3.value\
    \ = value\n\n    @property\n    def chtif3(self) -> Field:\n        \"\"\"\n \
    \       CHTIF3\n\n        Stream x clear half transfer interrupt\n           \
    \       flag (x = 3..0)\n        \"\"\"\n        return self._chtif3\n\n    @chtif3.setter\n\
    \    def chtif3(self, value: int) -> None:\n        self._chtif3.value = value\n\
    \n    @property\n    def cteif3(self) -> Field:\n        \"\"\"\n        CTEIF3\n\
    \n        Stream x clear transfer error interrupt\n                  flag (x =\
    \ 3..0)\n        \"\"\"\n        return self._cteif3\n\n    @cteif3.setter\n \
    \   def cteif3(self, value: int) -> None:\n        self._cteif3.value = value\n\
    \n    @property\n    def cdmeif3(self) -> Field:\n        \"\"\"\n        CDMEIF3\n\
    \n        Stream x clear direct mode error\n                  interrupt flag (x\
    \ = 3..0)\n        \"\"\"\n        return self._cdmeif3\n\n    @cdmeif3.setter\n\
    \    def cdmeif3(self, value: int) -> None:\n        self._cdmeif3.value = value\n\
    \n    @property\n    def cfeif3(self) -> Field:\n        \"\"\"\n        CFEIF3\n\
    \n        Stream x clear FIFO error interrupt flag\n                  (x = 3..0)\n\
    \        \"\"\"\n        return self._cfeif3\n\n    @cfeif3.setter\n    def cfeif3(self,\
    \ value: int) -> None:\n        self._cfeif3.value = value\n\n    @property\n\
    \    def ctcif2(self) -> Field:\n        \"\"\"\n        CTCIF2\n\n        Stream\
    \ x clear transfer complete\n                  interrupt flag (x = 3..0)\n   \
    \     \"\"\"\n        return self._ctcif2\n\n    @ctcif2.setter\n    def ctcif2(self,\
    \ value: int) -> None:\n        self._ctcif2.value = value\n\n    @property\n\
    \    def chtif2(self) -> Field:\n        \"\"\"\n        CHTIF2\n\n        Stream\
    \ x clear half transfer interrupt\n                  flag (x = 3..0)\n       \
    \ \"\"\"\n        return self._chtif2\n\n    @chtif2.setter\n    def chtif2(self,\
    \ value: int) -> None:\n        self._chtif2.value = value\n\n    @property\n\
    \    def cteif2(self) -> Field:\n        \"\"\"\n        CTEIF2\n\n        Stream\
    \ x clear transfer error interrupt\n                  flag (x = 3..0)\n      \
    \  \"\"\"\n        return self._cteif2\n\n    @cteif2.setter\n    def cteif2(self,\
    \ value: int) -> None:\n        self._cteif2.value = value\n\n    @property\n\
    \    def cdmeif2(self) -> Field:\n        \"\"\"\n        CDMEIF2\n\n        Stream\
    \ x clear direct mode error\n                  interrupt flag (x = 3..0)\n   \
    \     \"\"\"\n        return self._cdmeif2\n\n    @cdmeif2.setter\n    def cdmeif2(self,\
    \ value: int) -> None:\n        self._cdmeif2.value = value\n\n    @property\n\
    \    def cfeif2(self) -> Field:\n        \"\"\"\n        CFEIF2\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 3..0)\n        \"\"\
    \"\n        return self._cfeif2\n\n    @cfeif2.setter\n    def cfeif2(self, value:\
    \ int) -> None:\n        self._cfeif2.value = value\n\n    @property\n    def\
    \ ctcif1(self) -> Field:\n        \"\"\"\n        CTCIF1\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 3..0)\n        \"\"\
    \"\n        return self._ctcif1\n\n    @ctcif1.setter\n    def ctcif1(self, value:\
    \ int) -> None:\n        self._ctcif1.value = value\n\n    @property\n    def\
    \ chtif1(self) -> Field:\n        \"\"\"\n        CHTIF1\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._chtif1\n\n    @chtif1.setter\n    def chtif1(self, value:\
    \ int) -> None:\n        self._chtif1.value = value\n\n    @property\n    def\
    \ cteif1(self) -> Field:\n        \"\"\"\n        CTEIF1\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._cteif1\n\n    @cteif1.setter\n    def cteif1(self, value:\
    \ int) -> None:\n        self._cteif1.value = value\n\n    @property\n    def\
    \ cdmeif1(self) -> Field:\n        \"\"\"\n        CDMEIF1\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 3..0)\n     \
    \   \"\"\"\n        return self._cdmeif1\n\n    @cdmeif1.setter\n    def cdmeif1(self,\
    \ value: int) -> None:\n        self._cdmeif1.value = value\n\n    @property\n\
    \    def cfeif1(self) -> Field:\n        \"\"\"\n        CFEIF1\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 3..0)\n        \"\"\
    \"\n        return self._cfeif1\n\n    @cfeif1.setter\n    def cfeif1(self, value:\
    \ int) -> None:\n        self._cfeif1.value = value\n\n    @property\n    def\
    \ ctcif0(self) -> Field:\n        \"\"\"\n        CTCIF0\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 3..0)\n        \"\"\
    \"\n        return self._ctcif0\n\n    @ctcif0.setter\n    def ctcif0(self, value:\
    \ int) -> None:\n        self._ctcif0.value = value\n\n    @property\n    def\
    \ chtif0(self) -> Field:\n        \"\"\"\n        CHTIF0\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._chtif0\n\n    @chtif0.setter\n    def chtif0(self, value:\
    \ int) -> None:\n        self._chtif0.value = value\n\n    @property\n    def\
    \ cteif0(self) -> Field:\n        \"\"\"\n        CTEIF0\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 3..0)\n        \"\"\"\n\
    \        return self._cteif0\n\n    @cteif0.setter\n    def cteif0(self, value:\
    \ int) -> None:\n        self._cteif0.value = value\n\n    @property\n    def\
    \ cdmeif0(self) -> Field:\n        \"\"\"\n        CDMEIF0\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 3..0)\n     \
    \   \"\"\"\n        return self._cdmeif0\n\n    @cdmeif0.setter\n    def cdmeif0(self,\
    \ value: int) -> None:\n        self._cdmeif0.value = value\n\n    @property\n\
    \    def cfeif0(self) -> Field:\n        \"\"\"\n        CFEIF0\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 3..0)\n        \"\"\
    \"\n        return self._cfeif0\n\n    @cfeif0.setter\n    def cfeif0(self, value:\
    \ int) -> None:\n        self._cfeif0.value = value\n\n\nclass HifcrRegister(Register):\n\
    \    \"\"\"\n    HIFCR\n\n    high interrupt flag clear\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ctcif7 = Field(\"ctcif7\"\
    , 27, 1)\n        self._chtif7 = Field(\"chtif7\", 26, 1)\n        self._cteif7\
    \ = Field(\"cteif7\", 25, 1)\n        self._cdmeif7 = Field(\"cdmeif7\", 24, 1)\n\
    \        self._cfeif7 = Field(\"cfeif7\", 22, 1)\n        self._ctcif6 = Field(\"\
    ctcif6\", 21, 1)\n        self._chtif6 = Field(\"chtif6\", 20, 1)\n        self._cteif6\
    \ = Field(\"cteif6\", 19, 1)\n        self._cdmeif6 = Field(\"cdmeif6\", 18, 1)\n\
    \        self._cfeif6 = Field(\"cfeif6\", 16, 1)\n        self._ctcif5 = Field(\"\
    ctcif5\", 11, 1)\n        self._chtif5 = Field(\"chtif5\", 10, 1)\n        self._cteif5\
    \ = Field(\"cteif5\", 9, 1)\n        self._cdmeif5 = Field(\"cdmeif5\", 8, 1)\n\
    \        self._cfeif5 = Field(\"cfeif5\", 6, 1)\n        self._ctcif4 = Field(\"\
    ctcif4\", 5, 1)\n        self._chtif4 = Field(\"chtif4\", 4, 1)\n        self._cteif4\
    \ = Field(\"cteif4\", 3, 1)\n        self._cdmeif4 = Field(\"cdmeif4\", 2, 1)\n\
    \        self._cfeif4 = Field(\"cfeif4\", 0, 1)\n        super().__init__(\"HIFCR\"\
    , 0x40026000 + 0xC)\n\n    @property\n    def ctcif7(self) -> Field:\n       \
    \ \"\"\"\n        CTCIF7\n\n        Stream x clear transfer complete\n       \
    \           interrupt flag (x = 7..4)\n        \"\"\"\n        return self._ctcif7\n\
    \n    @ctcif7.setter\n    def ctcif7(self, value: int) -> None:\n        self._ctcif7.value\
    \ = value\n\n    @property\n    def chtif7(self) -> Field:\n        \"\"\"\n \
    \       CHTIF7\n\n        Stream x clear half transfer interrupt\n           \
    \       flag (x = 7..4)\n        \"\"\"\n        return self._chtif7\n\n    @chtif7.setter\n\
    \    def chtif7(self, value: int) -> None:\n        self._chtif7.value = value\n\
    \n    @property\n    def cteif7(self) -> Field:\n        \"\"\"\n        CTEIF7\n\
    \n        Stream x clear transfer error interrupt\n                  flag (x =\
    \ 7..4)\n        \"\"\"\n        return self._cteif7\n\n    @cteif7.setter\n \
    \   def cteif7(self, value: int) -> None:\n        self._cteif7.value = value\n\
    \n    @property\n    def cdmeif7(self) -> Field:\n        \"\"\"\n        CDMEIF7\n\
    \n        Stream x clear direct mode error\n                  interrupt flag (x\
    \ = 7..4)\n        \"\"\"\n        return self._cdmeif7\n\n    @cdmeif7.setter\n\
    \    def cdmeif7(self, value: int) -> None:\n        self._cdmeif7.value = value\n\
    \n    @property\n    def cfeif7(self) -> Field:\n        \"\"\"\n        CFEIF7\n\
    \n        Stream x clear FIFO error interrupt flag\n                  (x = 7..4)\n\
    \        \"\"\"\n        return self._cfeif7\n\n    @cfeif7.setter\n    def cfeif7(self,\
    \ value: int) -> None:\n        self._cfeif7.value = value\n\n    @property\n\
    \    def ctcif6(self) -> Field:\n        \"\"\"\n        CTCIF6\n\n        Stream\
    \ x clear transfer complete\n                  interrupt flag (x = 7..4)\n   \
    \     \"\"\"\n        return self._ctcif6\n\n    @ctcif6.setter\n    def ctcif6(self,\
    \ value: int) -> None:\n        self._ctcif6.value = value\n\n    @property\n\
    \    def chtif6(self) -> Field:\n        \"\"\"\n        CHTIF6\n\n        Stream\
    \ x clear half transfer interrupt\n                  flag (x = 7..4)\n       \
    \ \"\"\"\n        return self._chtif6\n\n    @chtif6.setter\n    def chtif6(self,\
    \ value: int) -> None:\n        self._chtif6.value = value\n\n    @property\n\
    \    def cteif6(self) -> Field:\n        \"\"\"\n        CTEIF6\n\n        Stream\
    \ x clear transfer error interrupt\n                  flag (x = 7..4)\n      \
    \  \"\"\"\n        return self._cteif6\n\n    @cteif6.setter\n    def cteif6(self,\
    \ value: int) -> None:\n        self._cteif6.value = value\n\n    @property\n\
    \    def cdmeif6(self) -> Field:\n        \"\"\"\n        CDMEIF6\n\n        Stream\
    \ x clear direct mode error\n                  interrupt flag (x = 7..4)\n   \
    \     \"\"\"\n        return self._cdmeif6\n\n    @cdmeif6.setter\n    def cdmeif6(self,\
    \ value: int) -> None:\n        self._cdmeif6.value = value\n\n    @property\n\
    \    def cfeif6(self) -> Field:\n        \"\"\"\n        CFEIF6\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 7..4)\n        \"\"\
    \"\n        return self._cfeif6\n\n    @cfeif6.setter\n    def cfeif6(self, value:\
    \ int) -> None:\n        self._cfeif6.value = value\n\n    @property\n    def\
    \ ctcif5(self) -> Field:\n        \"\"\"\n        CTCIF5\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 7..4)\n        \"\"\
    \"\n        return self._ctcif5\n\n    @ctcif5.setter\n    def ctcif5(self, value:\
    \ int) -> None:\n        self._ctcif5.value = value\n\n    @property\n    def\
    \ chtif5(self) -> Field:\n        \"\"\"\n        CHTIF5\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._chtif5\n\n    @chtif5.setter\n    def chtif5(self, value:\
    \ int) -> None:\n        self._chtif5.value = value\n\n    @property\n    def\
    \ cteif5(self) -> Field:\n        \"\"\"\n        CTEIF5\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._cteif5\n\n    @cteif5.setter\n    def cteif5(self, value:\
    \ int) -> None:\n        self._cteif5.value = value\n\n    @property\n    def\
    \ cdmeif5(self) -> Field:\n        \"\"\"\n        CDMEIF5\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 7..4)\n     \
    \   \"\"\"\n        return self._cdmeif5\n\n    @cdmeif5.setter\n    def cdmeif5(self,\
    \ value: int) -> None:\n        self._cdmeif5.value = value\n\n    @property\n\
    \    def cfeif5(self) -> Field:\n        \"\"\"\n        CFEIF5\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 7..4)\n        \"\"\
    \"\n        return self._cfeif5\n\n    @cfeif5.setter\n    def cfeif5(self, value:\
    \ int) -> None:\n        self._cfeif5.value = value\n\n    @property\n    def\
    \ ctcif4(self) -> Field:\n        \"\"\"\n        CTCIF4\n\n        Stream x clear\
    \ transfer complete\n                  interrupt flag (x = 7..4)\n        \"\"\
    \"\n        return self._ctcif4\n\n    @ctcif4.setter\n    def ctcif4(self, value:\
    \ int) -> None:\n        self._ctcif4.value = value\n\n    @property\n    def\
    \ chtif4(self) -> Field:\n        \"\"\"\n        CHTIF4\n\n        Stream x clear\
    \ half transfer interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._chtif4\n\n    @chtif4.setter\n    def chtif4(self, value:\
    \ int) -> None:\n        self._chtif4.value = value\n\n    @property\n    def\
    \ cteif4(self) -> Field:\n        \"\"\"\n        CTEIF4\n\n        Stream x clear\
    \ transfer error interrupt\n                  flag (x = 7..4)\n        \"\"\"\n\
    \        return self._cteif4\n\n    @cteif4.setter\n    def cteif4(self, value:\
    \ int) -> None:\n        self._cteif4.value = value\n\n    @property\n    def\
    \ cdmeif4(self) -> Field:\n        \"\"\"\n        CDMEIF4\n\n        Stream x\
    \ clear direct mode error\n                  interrupt flag (x = 7..4)\n     \
    \   \"\"\"\n        return self._cdmeif4\n\n    @cdmeif4.setter\n    def cdmeif4(self,\
    \ value: int) -> None:\n        self._cdmeif4.value = value\n\n    @property\n\
    \    def cfeif4(self) -> Field:\n        \"\"\"\n        CFEIF4\n\n        Stream\
    \ x clear FIFO error interrupt flag\n                  (x = 7..4)\n        \"\"\
    \"\n        return self._cfeif4\n\n    @cfeif4.setter\n    def cfeif4(self, value:\
    \ int) -> None:\n        self._cfeif4.value = value\n\n\nclass S0crRegister(Register):\n\
    \    \"\"\"\n    S0CR\n\n    stream x configuration\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._chsel = Field(\"chsel\"\
    , 25, 3)\n        self._mburst = Field(\"mburst\", 23, 2)\n        self._pburst\
    \ = Field(\"pburst\", 21, 2)\n        self._ct = Field(\"ct\", 19, 1)\n      \
    \  self._dbm = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n\
    \        self._pincos = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"\
    msize\", 13, 2)\n        self._psize = Field(\"psize\", 11, 2)\n        self._minc\
    \ = Field(\"minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n     \
    \   self._circ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6,\
    \ 2)\n        self._pfctrl = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"\
    tcie\", 4, 1)\n        self._htie = Field(\"htie\", 3, 1)\n        self._teie\
    \ = Field(\"teie\", 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n    \
    \    self._en = Field(\"en\", 0, 1)\n        super().__init__(\"S0CR\", 0x40026000\
    \ + 0x10)\n\n    @property\n    def chsel(self) -> Field:\n        \"\"\"\n  \
    \      CHSEL\n\n        Channel selection\n        \"\"\"\n        return self._chsel\n\
    \n    @chsel.setter\n    def chsel(self, value: int) -> None:\n        self._chsel.value\
    \ = value\n\n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n \
    \       MBURST\n\n        Memory burst transfer\n                  configuration\n\
    \        \"\"\"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self,\
    \ value: int) -> None:\n        self._mburst.value = value\n\n    @property\n\
    \    def pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ct(self) -> Field:\n\
    \        \"\"\"\n        CT\n\n        Current target (only in double buffer\n\
    \                  mode)\n        \"\"\"\n        return self._ct\n\n    @ct.setter\n\
    \    def ct(self, value: int) -> None:\n        self._ct.value = value\n\n   \
    \ @property\n    def dbm(self) -> Field:\n        \"\"\"\n        DBM\n\n    \
    \    Double buffer mode\n        \"\"\"\n        return self._dbm\n\n    @dbm.setter\n\
    \    def dbm(self, value: int) -> None:\n        self._dbm.value = value\n\n \
    \   @property\n    def pl(self) -> Field:\n        \"\"\"\n        PL\n\n    \
    \    Priority level\n        \"\"\"\n        return self._pl\n\n    @pl.setter\n\
    \    def pl(self, value: int) -> None:\n        self._pl.value = value\n\n   \
    \ @property\n    def pincos(self) -> Field:\n        \"\"\"\n        PINCOS\n\n\
    \        Peripheral increment offset\n                  size\n        \"\"\"\n\
    \        return self._pincos\n\n    @pincos.setter\n    def pincos(self, value:\
    \ int) -> None:\n        self._pincos.value = value\n\n    @property\n    def\
    \ msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\n        Memory data\
    \ size\n        \"\"\"\n        return self._msize\n\n    @msize.setter\n    def\
    \ msize(self, value: int) -> None:\n        self._msize.value = value\n\n    @property\n\
    \    def psize(self) -> Field:\n        \"\"\"\n        PSIZE\n\n        Peripheral\
    \ data size\n        \"\"\"\n        return self._psize\n\n    @psize.setter\n\
    \    def psize(self, value: int) -> None:\n        self._psize.value = value\n\
    \n    @property\n    def minc(self) -> Field:\n        \"\"\"\n        MINC\n\n\
    \        Memory increment mode\n        \"\"\"\n        return self._minc\n\n\
    \    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S0ndtrRegister(Register):\n\
    \    \"\"\"\n    S0NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S0NDTR\", 0x40026000 + 0x14)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S0parRegister(Register):\n    \"\"\"\n    S0PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S0PAR\",\
    \ 0x40026000 + 0x18)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S0m0arRegister(Register):\n    \"\"\"\n    S0M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S0M0AR\"\
    , 0x40026000 + 0x1C)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S0m1arRegister(Register):\n    \"\"\"\n\
    \    S0M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S0M1AR\", 0x40026000 + 0x20)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S0fcrRegister(Register):\n    \"\"\
    \"\n    S0FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S0FCR\", 0x40026000 + 0x24)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S1crRegister(Register):\n    \"\"\"\n    S1CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S1CR\", 0x40026000 + 0x28)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S1ndtrRegister(Register):\n\
    \    \"\"\"\n    S1NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S1NDTR\", 0x40026000 + 0x2C)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S1parRegister(Register):\n    \"\"\"\n    S1PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S1PAR\",\
    \ 0x40026000 + 0x30)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S1m0arRegister(Register):\n    \"\"\"\n    S1M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S1M0AR\"\
    , 0x40026000 + 0x34)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S1m1arRegister(Register):\n    \"\"\"\n\
    \    S1M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S1M1AR\", 0x40026000 + 0x38)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S1fcrRegister(Register):\n    \"\"\
    \"\n    S1FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S1FCR\", 0x40026000 + 0x3C)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S2crRegister(Register):\n    \"\"\"\n    S2CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S2CR\", 0x40026000 + 0x40)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S2ndtrRegister(Register):\n\
    \    \"\"\"\n    S2NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S2NDTR\", 0x40026000 + 0x44)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S2parRegister(Register):\n    \"\"\"\n    S2PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S2PAR\",\
    \ 0x40026000 + 0x48)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S2m0arRegister(Register):\n    \"\"\"\n    S2M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S2M0AR\"\
    , 0x40026000 + 0x4C)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S2m1arRegister(Register):\n    \"\"\"\n\
    \    S2M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S2M1AR\", 0x40026000 + 0x50)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S2fcrRegister(Register):\n    \"\"\
    \"\n    S2FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S2FCR\", 0x40026000 + 0x54)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S3crRegister(Register):\n    \"\"\"\n    S3CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S3CR\", 0x40026000 + 0x58)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S3ndtrRegister(Register):\n\
    \    \"\"\"\n    S3NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S3NDTR\", 0x40026000 + 0x5C)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S3parRegister(Register):\n    \"\"\"\n    S3PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S3PAR\",\
    \ 0x40026000 + 0x60)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S3m0arRegister(Register):\n    \"\"\"\n    S3M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S3M0AR\"\
    , 0x40026000 + 0x64)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S3m1arRegister(Register):\n    \"\"\"\n\
    \    S3M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S3M1AR\", 0x40026000 + 0x68)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S3fcrRegister(Register):\n    \"\"\
    \"\n    S3FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S3FCR\", 0x40026000 + 0x6C)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S4crRegister(Register):\n    \"\"\"\n    S4CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S4CR\", 0x40026000 + 0x70)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S4ndtrRegister(Register):\n\
    \    \"\"\"\n    S4NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S4NDTR\", 0x40026000 + 0x74)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S4parRegister(Register):\n    \"\"\"\n    S4PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S4PAR\",\
    \ 0x40026000 + 0x78)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S4m0arRegister(Register):\n    \"\"\"\n    S4M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S4M0AR\"\
    , 0x40026000 + 0x7C)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S4m1arRegister(Register):\n    \"\"\"\n\
    \    S4M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S4M1AR\", 0x40026000 + 0x80)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S4fcrRegister(Register):\n    \"\"\
    \"\n    S4FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S4FCR\", 0x40026000 + 0x84)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S5crRegister(Register):\n    \"\"\"\n    S5CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S5CR\", 0x40026000 + 0x88)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S5ndtrRegister(Register):\n\
    \    \"\"\"\n    S5NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S5NDTR\", 0x40026000 + 0x8C)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S5parRegister(Register):\n    \"\"\"\n    S5PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S5PAR\",\
    \ 0x40026000 + 0x90)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S5m0arRegister(Register):\n    \"\"\"\n    S5M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S5M0AR\"\
    , 0x40026000 + 0x94)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S5m1arRegister(Register):\n    \"\"\"\n\
    \    S5M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S5M1AR\", 0x40026000 + 0x98)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S5fcrRegister(Register):\n    \"\"\
    \"\n    S5FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S5FCR\", 0x40026000 + 0x9C)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S6crRegister(Register):\n    \"\"\"\n    S6CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S6CR\", 0x40026000 + 0xA0)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S6ndtrRegister(Register):\n\
    \    \"\"\"\n    S6NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S6NDTR\", 0x40026000 + 0xA4)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S6parRegister(Register):\n    \"\"\"\n    S6PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S6PAR\",\
    \ 0x40026000 + 0xA8)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S6m0arRegister(Register):\n    \"\"\"\n    S6M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S6M0AR\"\
    , 0x40026000 + 0xAC)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S6m1arRegister(Register):\n    \"\"\"\n\
    \    S6M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S6M1AR\", 0x40026000 + 0xB0)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S6fcrRegister(Register):\n    \"\"\
    \"\n    S6FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S6FCR\", 0x40026000 + 0xB4)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass S7crRegister(Register):\n    \"\"\"\n    S7CR\n\n    stream\
    \ x configuration\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._chsel = Field(\"chsel\", 25, 3)\n        self._mburst = Field(\"\
    mburst\", 23, 2)\n        self._pburst = Field(\"pburst\", 21, 2)\n        self._ack\
    \ = Field(\"ack\", 20, 1)\n        self._ct = Field(\"ct\", 19, 1)\n        self._dbm\
    \ = Field(\"dbm\", 18, 1)\n        self._pl = Field(\"pl\", 16, 2)\n        self._pincos\
    \ = Field(\"pincos\", 15, 1)\n        self._msize = Field(\"msize\", 13, 2)\n\
    \        self._psize = Field(\"psize\", 11, 2)\n        self._minc = Field(\"\
    minc\", 10, 1)\n        self._pinc = Field(\"pinc\", 9, 1)\n        self._circ\
    \ = Field(\"circ\", 8, 1)\n        self._dir = Field(\"dir\", 6, 2)\n        self._pfctrl\
    \ = Field(\"pfctrl\", 5, 1)\n        self._tcie = Field(\"tcie\", 4, 1)\n    \
    \    self._htie = Field(\"htie\", 3, 1)\n        self._teie = Field(\"teie\",\
    \ 2, 1)\n        self._dmeie = Field(\"dmeie\", 1, 1)\n        self._en = Field(\"\
    en\", 0, 1)\n        super().__init__(\"S7CR\", 0x40026000 + 0xB8)\n\n    @property\n\
    \    def chsel(self) -> Field:\n        \"\"\"\n        CHSEL\n\n        Channel\
    \ selection\n        \"\"\"\n        return self._chsel\n\n    @chsel.setter\n\
    \    def chsel(self, value: int) -> None:\n        self._chsel.value = value\n\
    \n    @property\n    def mburst(self) -> Field:\n        \"\"\"\n        MBURST\n\
    \n        Memory burst transfer\n                  configuration\n        \"\"\
    \"\n        return self._mburst\n\n    @mburst.setter\n    def mburst(self, value:\
    \ int) -> None:\n        self._mburst.value = value\n\n    @property\n    def\
    \ pburst(self) -> Field:\n        \"\"\"\n        PBURST\n\n        Peripheral\
    \ burst transfer\n                  configuration\n        \"\"\"\n        return\
    \ self._pburst\n\n    @pburst.setter\n    def pburst(self, value: int) -> None:\n\
    \        self._pburst.value = value\n\n    @property\n    def ack(self) -> Field:\n\
    \        \"\"\"\n        ACK\n\n        ACK\n        \"\"\"\n        return self._ack\n\
    \n    @ack.setter\n    def ack(self, value: int) -> None:\n        self._ack.value\
    \ = value\n\n    @property\n    def ct(self) -> Field:\n        \"\"\"\n     \
    \   CT\n\n        Current target (only in double buffer\n                  mode)\n\
    \        \"\"\"\n        return self._ct\n\n    @ct.setter\n    def ct(self, value:\
    \ int) -> None:\n        self._ct.value = value\n\n    @property\n    def dbm(self)\
    \ -> Field:\n        \"\"\"\n        DBM\n\n        Double buffer mode\n     \
    \   \"\"\"\n        return self._dbm\n\n    @dbm.setter\n    def dbm(self, value:\
    \ int) -> None:\n        self._dbm.value = value\n\n    @property\n    def pl(self)\
    \ -> Field:\n        \"\"\"\n        PL\n\n        Priority level\n        \"\"\
    \"\n        return self._pl\n\n    @pl.setter\n    def pl(self, value: int) ->\
    \ None:\n        self._pl.value = value\n\n    @property\n    def pincos(self)\
    \ -> Field:\n        \"\"\"\n        PINCOS\n\n        Peripheral increment offset\n\
    \                  size\n        \"\"\"\n        return self._pincos\n\n    @pincos.setter\n\
    \    def pincos(self, value: int) -> None:\n        self._pincos.value = value\n\
    \n    @property\n    def msize(self) -> Field:\n        \"\"\"\n        MSIZE\n\
    \n        Memory data size\n        \"\"\"\n        return self._msize\n\n   \
    \ @msize.setter\n    def msize(self, value: int) -> None:\n        self._msize.value\
    \ = value\n\n    @property\n    def psize(self) -> Field:\n        \"\"\"\n  \
    \      PSIZE\n\n        Peripheral data size\n        \"\"\"\n        return self._psize\n\
    \n    @psize.setter\n    def psize(self, value: int) -> None:\n        self._psize.value\
    \ = value\n\n    @property\n    def minc(self) -> Field:\n        \"\"\"\n   \
    \     MINC\n\n        Memory increment mode\n        \"\"\"\n        return self._minc\n\
    \n    @minc.setter\n    def minc(self, value: int) -> None:\n        self._minc.value\
    \ = value\n\n    @property\n    def pinc(self) -> Field:\n        \"\"\"\n   \
    \     PINC\n\n        Peripheral increment mode\n        \"\"\"\n        return\
    \ self._pinc\n\n    @pinc.setter\n    def pinc(self, value: int) -> None:\n  \
    \      self._pinc.value = value\n\n    @property\n    def circ(self) -> Field:\n\
    \        \"\"\"\n        CIRC\n\n        Circular mode\n        \"\"\"\n     \
    \   return self._circ\n\n    @circ.setter\n    def circ(self, value: int) -> None:\n\
    \        self._circ.value = value\n\n    @property\n    def dir(self) -> Field:\n\
    \        \"\"\"\n        DIR\n\n        Data transfer direction\n        \"\"\"\
    \n        return self._dir\n\n    @dir.setter\n    def dir(self, value: int) ->\
    \ None:\n        self._dir.value = value\n\n    @property\n    def pfctrl(self)\
    \ -> Field:\n        \"\"\"\n        PFCTRL\n\n        Peripheral flow controller\n\
    \        \"\"\"\n        return self._pfctrl\n\n    @pfctrl.setter\n    def pfctrl(self,\
    \ value: int) -> None:\n        self._pfctrl.value = value\n\n    @property\n\
    \    def tcie(self) -> Field:\n        \"\"\"\n        TCIE\n\n        Transfer\
    \ complete interrupt\n                  enable\n        \"\"\"\n        return\
    \ self._tcie\n\n    @tcie.setter\n    def tcie(self, value: int) -> None:\n  \
    \      self._tcie.value = value\n\n    @property\n    def htie(self) -> Field:\n\
    \        \"\"\"\n        HTIE\n\n        Half transfer interrupt\n           \
    \       enable\n        \"\"\"\n        return self._htie\n\n    @htie.setter\n\
    \    def htie(self, value: int) -> None:\n        self._htie.value = value\n\n\
    \    @property\n    def teie(self) -> Field:\n        \"\"\"\n        TEIE\n\n\
    \        Transfer error interrupt\n                  enable\n        \"\"\"\n\
    \        return self._teie\n\n    @teie.setter\n    def teie(self, value: int)\
    \ -> None:\n        self._teie.value = value\n\n    @property\n    def dmeie(self)\
    \ -> Field:\n        \"\"\"\n        DMEIE\n\n        Direct mode error interrupt\n\
    \                  enable\n        \"\"\"\n        return self._dmeie\n\n    @dmeie.setter\n\
    \    def dmeie(self, value: int) -> None:\n        self._dmeie.value = value\n\
    \n    @property\n    def en(self) -> Field:\n        \"\"\"\n        EN\n\n  \
    \      Stream enable / flag stream ready when\n                  read low\n  \
    \      \"\"\"\n        return self._en\n\n    @en.setter\n    def en(self, value:\
    \ int) -> None:\n        self._en.value = value\n\n\nclass S7ndtrRegister(Register):\n\
    \    \"\"\"\n    S7NDTR\n\n    stream x number of data\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ndt = Field(\"ndt\", 0,\
    \ 16)\n        super().__init__(\"S7NDTR\", 0x40026000 + 0xBC)\n\n    @property\n\
    \    def ndt(self) -> Field:\n        \"\"\"\n        NDT\n\n        Number of\
    \ data items to\n                  transfer\n        \"\"\"\n        return self._ndt\n\
    \n    @ndt.setter\n    def ndt(self, value: int) -> None:\n        self._ndt.value\
    \ = value\n\n\nclass S7parRegister(Register):\n    \"\"\"\n    S7PAR\n\n    stream\
    \ x peripheral address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pa = Field(\"pa\", 0, 32)\n        super().__init__(\"S7PAR\",\
    \ 0x40026000 + 0xC0)\n\n    @property\n    def pa(self) -> Field:\n        \"\"\
    \"\n        PA\n\n        Peripheral address\n        \"\"\"\n        return self._pa\n\
    \n    @pa.setter\n    def pa(self, value: int) -> None:\n        self._pa.value\
    \ = value\n\n\nclass S7m0arRegister(Register):\n    \"\"\"\n    S7M0AR\n\n   \
    \ stream x memory 0 address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._m0a = Field(\"m0a\", 0, 32)\n        super().__init__(\"S7M0AR\"\
    , 0x40026000 + 0xC4)\n\n    @property\n    def m0a(self) -> Field:\n        \"\
    \"\"\n        M0A\n\n        Memory 0 address\n        \"\"\"\n        return\
    \ self._m0a\n\n    @m0a.setter\n    def m0a(self, value: int) -> None:\n     \
    \   self._m0a.value = value\n\n\nclass S7m1arRegister(Register):\n    \"\"\"\n\
    \    S7M1AR\n\n    stream x memory 1 address\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._m1a = Field(\"m1a\", 0, 32)\n   \
    \     super().__init__(\"S7M1AR\", 0x40026000 + 0xC8)\n\n    @property\n    def\
    \ m1a(self) -> Field:\n        \"\"\"\n        M1A\n\n        Memory 1 address\
    \ (used in case of Double\n                  buffer mode)\n        \"\"\"\n  \
    \      return self._m1a\n\n    @m1a.setter\n    def m1a(self, value: int) -> None:\n\
    \        self._m1a.value = value\n\n\nclass S7fcrRegister(Register):\n    \"\"\
    \"\n    S7FCR\n\n    stream x FIFO control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._feie = Field(\"feie\", 7, 1)\n        self._fs = Field(\"fs\",\
    \ 3, 3)\n        self._dmdis = Field(\"dmdis\", 2, 1)\n        self._fth = Field(\"\
    fth\", 0, 2)\n        super().__init__(\"S7FCR\", 0x40026000 + 0xCC)\n\n    @property\n\
    \    def feie(self) -> Field:\n        \"\"\"\n        FEIE\n\n        FIFO error\
    \ interrupt\n                  enable\n        \"\"\"\n        return self._feie\n\
    \n    @feie.setter\n    def feie(self, value: int) -> None:\n        self._feie.value\
    \ = value\n\n    @property\n    def fs(self) -> Field:\n        \"\"\"\n     \
    \   FS\n\n        FIFO status\n        \"\"\"\n        return self._fs\n\n   \
    \ @fs.setter\n    def fs(self, value: int) -> None:\n        self._fs.value =\
    \ value\n\n    @property\n    def dmdis(self) -> Field:\n        \"\"\"\n    \
    \    DMDIS\n\n        Direct mode disable\n        \"\"\"\n        return self._dmdis\n\
    \n    @dmdis.setter\n    def dmdis(self, value: int) -> None:\n        self._dmdis.value\
    \ = value\n\n    @property\n    def fth(self) -> Field:\n        \"\"\"\n    \
    \    FTH\n\n        FIFO threshold selection\n        \"\"\"\n        return self._fth\n\
    \n    @fth.setter\n    def fth(self, value: int) -> None:\n        self._fth.value\
    \ = value\n\n\nclass Dma1(Peripheral):\n    \"\"\"\n    DMA1\n\n    DMA controller\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lisr = LisrRegister()\n\
    \        self._hisr = HisrRegister()\n        self._lifcr = LifcrRegister()\n\
    \        self._hifcr = HifcrRegister()\n        self._s0cr = S0crRegister()\n\
    \        self._s0ndtr = S0ndtrRegister()\n        self._s0par = S0parRegister()\n\
    \        self._s0m0ar = S0m0arRegister()\n        self._s0m1ar = S0m1arRegister()\n\
    \        self._s0fcr = S0fcrRegister()\n        self._s1cr = S1crRegister()\n\
    \        self._s1ndtr = S1ndtrRegister()\n        self._s1par = S1parRegister()\n\
    \        self._s1m0ar = S1m0arRegister()\n        self._s1m1ar = S1m1arRegister()\n\
    \        self._s1fcr = S1fcrRegister()\n        self._s2cr = S2crRegister()\n\
    \        self._s2ndtr = S2ndtrRegister()\n        self._s2par = S2parRegister()\n\
    \        self._s2m0ar = S2m0arRegister()\n        self._s2m1ar = S2m1arRegister()\n\
    \        self._s2fcr = S2fcrRegister()\n        self._s3cr = S3crRegister()\n\
    \        self._s3ndtr = S3ndtrRegister()\n        self._s3par = S3parRegister()\n\
    \        self._s3m0ar = S3m0arRegister()\n        self._s3m1ar = S3m1arRegister()\n\
    \        self._s3fcr = S3fcrRegister()\n        self._s4cr = S4crRegister()\n\
    \        self._s4ndtr = S4ndtrRegister()\n        self._s4par = S4parRegister()\n\
    \        self._s4m0ar = S4m0arRegister()\n        self._s4m1ar = S4m1arRegister()\n\
    \        self._s4fcr = S4fcrRegister()\n        self._s5cr = S5crRegister()\n\
    \        self._s5ndtr = S5ndtrRegister()\n        self._s5par = S5parRegister()\n\
    \        self._s5m0ar = S5m0arRegister()\n        self._s5m1ar = S5m1arRegister()\n\
    \        self._s5fcr = S5fcrRegister()\n        self._s6cr = S6crRegister()\n\
    \        self._s6ndtr = S6ndtrRegister()\n        self._s6par = S6parRegister()\n\
    \        self._s6m0ar = S6m0arRegister()\n        self._s6m1ar = S6m1arRegister()\n\
    \        self._s6fcr = S6fcrRegister()\n        self._s7cr = S7crRegister()\n\
    \        self._s7ndtr = S7ndtrRegister()\n        self._s7par = S7parRegister()\n\
    \        self._s7m0ar = S7m0arRegister()\n        self._s7m1ar = S7m1arRegister()\n\
    \        self._s7fcr = S7fcrRegister()\n        super().__init__(\"dma1\", 0x40026000)\n\
    \n    @property\n    def lisr(self) -> LisrRegister:\n        return self._lisr\n\
    \n    @lisr.setter\n    def lisr(self, value: int) -> None:\n        self._lisr.value\
    \ = value\n\n    @property\n    def hisr(self) -> HisrRegister:\n        return\
    \ self._hisr\n\n    @hisr.setter\n    def hisr(self, value: int) -> None:\n  \
    \      self._hisr.value = value\n\n    @property\n    def lifcr(self) -> LifcrRegister:\n\
    \        return self._lifcr\n\n    @lifcr.setter\n    def lifcr(self, value: int)\
    \ -> None:\n        self._lifcr.value = value\n\n    @property\n    def hifcr(self)\
    \ -> HifcrRegister:\n        return self._hifcr\n\n    @hifcr.setter\n    def\
    \ hifcr(self, value: int) -> None:\n        self._hifcr.value = value\n\n    @property\n\
    \    def s0cr(self) -> S0crRegister:\n        return self._s0cr\n\n    @s0cr.setter\n\
    \    def s0cr(self, value: int) -> None:\n        self._s0cr.value = value\n\n\
    \    @property\n    def s0ndtr(self) -> S0ndtrRegister:\n        return self._s0ndtr\n\
    \n    @s0ndtr.setter\n    def s0ndtr(self, value: int) -> None:\n        self._s0ndtr.value\
    \ = value\n\n    @property\n    def s0par(self) -> S0parRegister:\n        return\
    \ self._s0par\n\n    @s0par.setter\n    def s0par(self, value: int) -> None:\n\
    \        self._s0par.value = value\n\n    @property\n    def s0m0ar(self) -> S0m0arRegister:\n\
    \        return self._s0m0ar\n\n    @s0m0ar.setter\n    def s0m0ar(self, value:\
    \ int) -> None:\n        self._s0m0ar.value = value\n\n    @property\n    def\
    \ s0m1ar(self) -> S0m1arRegister:\n        return self._s0m1ar\n\n    @s0m1ar.setter\n\
    \    def s0m1ar(self, value: int) -> None:\n        self._s0m1ar.value = value\n\
    \n    @property\n    def s0fcr(self) -> S0fcrRegister:\n        return self._s0fcr\n\
    \n    @s0fcr.setter\n    def s0fcr(self, value: int) -> None:\n        self._s0fcr.value\
    \ = value\n\n    @property\n    def s1cr(self) -> S1crRegister:\n        return\
    \ self._s1cr\n\n    @s1cr.setter\n    def s1cr(self, value: int) -> None:\n  \
    \      self._s1cr.value = value\n\n    @property\n    def s1ndtr(self) -> S1ndtrRegister:\n\
    \        return self._s1ndtr\n\n    @s1ndtr.setter\n    def s1ndtr(self, value:\
    \ int) -> None:\n        self._s1ndtr.value = value\n\n    @property\n    def\
    \ s1par(self) -> S1parRegister:\n        return self._s1par\n\n    @s1par.setter\n\
    \    def s1par(self, value: int) -> None:\n        self._s1par.value = value\n\
    \n    @property\n    def s1m0ar(self) -> S1m0arRegister:\n        return self._s1m0ar\n\
    \n    @s1m0ar.setter\n    def s1m0ar(self, value: int) -> None:\n        self._s1m0ar.value\
    \ = value\n\n    @property\n    def s1m1ar(self) -> S1m1arRegister:\n        return\
    \ self._s1m1ar\n\n    @s1m1ar.setter\n    def s1m1ar(self, value: int) -> None:\n\
    \        self._s1m1ar.value = value\n\n    @property\n    def s1fcr(self) -> S1fcrRegister:\n\
    \        return self._s1fcr\n\n    @s1fcr.setter\n    def s1fcr(self, value: int)\
    \ -> None:\n        self._s1fcr.value = value\n\n    @property\n    def s2cr(self)\
    \ -> S2crRegister:\n        return self._s2cr\n\n    @s2cr.setter\n    def s2cr(self,\
    \ value: int) -> None:\n        self._s2cr.value = value\n\n    @property\n  \
    \  def s2ndtr(self) -> S2ndtrRegister:\n        return self._s2ndtr\n\n    @s2ndtr.setter\n\
    \    def s2ndtr(self, value: int) -> None:\n        self._s2ndtr.value = value\n\
    \n    @property\n    def s2par(self) -> S2parRegister:\n        return self._s2par\n\
    \n    @s2par.setter\n    def s2par(self, value: int) -> None:\n        self._s2par.value\
    \ = value\n\n    @property\n    def s2m0ar(self) -> S2m0arRegister:\n        return\
    \ self._s2m0ar\n\n    @s2m0ar.setter\n    def s2m0ar(self, value: int) -> None:\n\
    \        self._s2m0ar.value = value\n\n    @property\n    def s2m1ar(self) ->\
    \ S2m1arRegister:\n        return self._s2m1ar\n\n    @s2m1ar.setter\n    def\
    \ s2m1ar(self, value: int) -> None:\n        self._s2m1ar.value = value\n\n  \
    \  @property\n    def s2fcr(self) -> S2fcrRegister:\n        return self._s2fcr\n\
    \n    @s2fcr.setter\n    def s2fcr(self, value: int) -> None:\n        self._s2fcr.value\
    \ = value\n\n    @property\n    def s3cr(self) -> S3crRegister:\n        return\
    \ self._s3cr\n\n    @s3cr.setter\n    def s3cr(self, value: int) -> None:\n  \
    \      self._s3cr.value = value\n\n    @property\n    def s3ndtr(self) -> S3ndtrRegister:\n\
    \        return self._s3ndtr\n\n    @s3ndtr.setter\n    def s3ndtr(self, value:\
    \ int) -> None:\n        self._s3ndtr.value = value\n\n    @property\n    def\
    \ s3par(self) -> S3parRegister:\n        return self._s3par\n\n    @s3par.setter\n\
    \    def s3par(self, value: int) -> None:\n        self._s3par.value = value\n\
    \n    @property\n    def s3m0ar(self) -> S3m0arRegister:\n        return self._s3m0ar\n\
    \n    @s3m0ar.setter\n    def s3m0ar(self, value: int) -> None:\n        self._s3m0ar.value\
    \ = value\n\n    @property\n    def s3m1ar(self) -> S3m1arRegister:\n        return\
    \ self._s3m1ar\n\n    @s3m1ar.setter\n    def s3m1ar(self, value: int) -> None:\n\
    \        self._s3m1ar.value = value\n\n    @property\n    def s3fcr(self) -> S3fcrRegister:\n\
    \        return self._s3fcr\n\n    @s3fcr.setter\n    def s3fcr(self, value: int)\
    \ -> None:\n        self._s3fcr.value = value\n\n    @property\n    def s4cr(self)\
    \ -> S4crRegister:\n        return self._s4cr\n\n    @s4cr.setter\n    def s4cr(self,\
    \ value: int) -> None:\n        self._s4cr.value = value\n\n    @property\n  \
    \  def s4ndtr(self) -> S4ndtrRegister:\n        return self._s4ndtr\n\n    @s4ndtr.setter\n\
    \    def s4ndtr(self, value: int) -> None:\n        self._s4ndtr.value = value\n\
    \n    @property\n    def s4par(self) -> S4parRegister:\n        return self._s4par\n\
    \n    @s4par.setter\n    def s4par(self, value: int) -> None:\n        self._s4par.value\
    \ = value\n\n    @property\n    def s4m0ar(self) -> S4m0arRegister:\n        return\
    \ self._s4m0ar\n\n    @s4m0ar.setter\n    def s4m0ar(self, value: int) -> None:\n\
    \        self._s4m0ar.value = value\n\n    @property\n    def s4m1ar(self) ->\
    \ S4m1arRegister:\n        return self._s4m1ar\n\n    @s4m1ar.setter\n    def\
    \ s4m1ar(self, value: int) -> None:\n        self._s4m1ar.value = value\n\n  \
    \  @property\n    def s4fcr(self) -> S4fcrRegister:\n        return self._s4fcr\n\
    \n    @s4fcr.setter\n    def s4fcr(self, value: int) -> None:\n        self._s4fcr.value\
    \ = value\n\n    @property\n    def s5cr(self) -> S5crRegister:\n        return\
    \ self._s5cr\n\n    @s5cr.setter\n    def s5cr(self, value: int) -> None:\n  \
    \      self._s5cr.value = value\n\n    @property\n    def s5ndtr(self) -> S5ndtrRegister:\n\
    \        return self._s5ndtr\n\n    @s5ndtr.setter\n    def s5ndtr(self, value:\
    \ int) -> None:\n        self._s5ndtr.value = value\n\n    @property\n    def\
    \ s5par(self) -> S5parRegister:\n        return self._s5par\n\n    @s5par.setter\n\
    \    def s5par(self, value: int) -> None:\n        self._s5par.value = value\n\
    \n    @property\n    def s5m0ar(self) -> S5m0arRegister:\n        return self._s5m0ar\n\
    \n    @s5m0ar.setter\n    def s5m0ar(self, value: int) -> None:\n        self._s5m0ar.value\
    \ = value\n\n    @property\n    def s5m1ar(self) -> S5m1arRegister:\n        return\
    \ self._s5m1ar\n\n    @s5m1ar.setter\n    def s5m1ar(self, value: int) -> None:\n\
    \        self._s5m1ar.value = value\n\n    @property\n    def s5fcr(self) -> S5fcrRegister:\n\
    \        return self._s5fcr\n\n    @s5fcr.setter\n    def s5fcr(self, value: int)\
    \ -> None:\n        self._s5fcr.value = value\n\n    @property\n    def s6cr(self)\
    \ -> S6crRegister:\n        return self._s6cr\n\n    @s6cr.setter\n    def s6cr(self,\
    \ value: int) -> None:\n        self._s6cr.value = value\n\n    @property\n  \
    \  def s6ndtr(self) -> S6ndtrRegister:\n        return self._s6ndtr\n\n    @s6ndtr.setter\n\
    \    def s6ndtr(self, value: int) -> None:\n        self._s6ndtr.value = value\n\
    \n    @property\n    def s6par(self) -> S6parRegister:\n        return self._s6par\n\
    \n    @s6par.setter\n    def s6par(self, value: int) -> None:\n        self._s6par.value\
    \ = value\n\n    @property\n    def s6m0ar(self) -> S6m0arRegister:\n        return\
    \ self._s6m0ar\n\n    @s6m0ar.setter\n    def s6m0ar(self, value: int) -> None:\n\
    \        self._s6m0ar.value = value\n\n    @property\n    def s6m1ar(self) ->\
    \ S6m1arRegister:\n        return self._s6m1ar\n\n    @s6m1ar.setter\n    def\
    \ s6m1ar(self, value: int) -> None:\n        self._s6m1ar.value = value\n\n  \
    \  @property\n    def s6fcr(self) -> S6fcrRegister:\n        return self._s6fcr\n\
    \n    @s6fcr.setter\n    def s6fcr(self, value: int) -> None:\n        self._s6fcr.value\
    \ = value\n\n    @property\n    def s7cr(self) -> S7crRegister:\n        return\
    \ self._s7cr\n\n    @s7cr.setter\n    def s7cr(self, value: int) -> None:\n  \
    \      self._s7cr.value = value\n\n    @property\n    def s7ndtr(self) -> S7ndtrRegister:\n\
    \        return self._s7ndtr\n\n    @s7ndtr.setter\n    def s7ndtr(self, value:\
    \ int) -> None:\n        self._s7ndtr.value = value\n\n    @property\n    def\
    \ s7par(self) -> S7parRegister:\n        return self._s7par\n\n    @s7par.setter\n\
    \    def s7par(self, value: int) -> None:\n        self._s7par.value = value\n\
    \n    @property\n    def s7m0ar(self) -> S7m0arRegister:\n        return self._s7m0ar\n\
    \n    @s7m0ar.setter\n    def s7m0ar(self, value: int) -> None:\n        self._s7m0ar.value\
    \ = value\n\n    @property\n    def s7m1ar(self) -> S7m1arRegister:\n        return\
    \ self._s7m1ar\n\n    @s7m1ar.setter\n    def s7m1ar(self, value: int) -> None:\n\
    \        self._s7m1ar.value = value\n\n    @property\n    def s7fcr(self) -> S7fcrRegister:\n\
    \        return self._s7fcr\n\n    @s7fcr.setter\n    def s7fcr(self, value: int)\
    \ -> None:\n        self._s7fcr.value = value\n"
  name: DMA1
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ModerRegister(Register):\n    \"\"\"\n    MODER\n\n    GPIO\
    \ port mode register\n    \"\"\"\n\n    def __init__(self):\n        self._moder15\
    \ = Field(\"moder15\", 30, 2)\n        self._moder14 = Field(\"moder14\", 28,\
    \ 2)\n        self._moder13 = Field(\"moder13\", 26, 2)\n        self._moder12\
    \ = Field(\"moder12\", 24, 2)\n        self._moder11 = Field(\"moder11\", 22,\
    \ 2)\n        self._moder10 = Field(\"moder10\", 20, 2)\n        self._moder9\
    \ = Field(\"moder9\", 18, 2)\n        self._moder8 = Field(\"moder8\", 16, 2)\n\
    \        self._moder7 = Field(\"moder7\", 14, 2)\n        self._moder6 = Field(\"\
    moder6\", 12, 2)\n        self._moder5 = Field(\"moder5\", 10, 2)\n        self._moder4\
    \ = Field(\"moder4\", 8, 2)\n        self._moder3 = Field(\"moder3\", 6, 2)\n\
    \        self._moder2 = Field(\"moder2\", 4, 2)\n        self._moder1 = Field(\"\
    moder1\", 2, 2)\n        self._moder0 = Field(\"moder0\", 0, 2)\n        super().__init__(\"\
    MODER\", 0x40021C00 + 0x0)\n\n    @property\n    def moder15(self) -> Field:\n\
    \        \"\"\"\n        MODER15\n\n        Port x configuration bits (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._moder15\n\n   \
    \ @moder15.setter\n    def moder15(self, value: int) -> None:\n        self._moder15.value\
    \ = value\n\n    @property\n    def moder14(self) -> Field:\n        \"\"\"\n\
    \        MODER14\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder14\n\n    @moder14.setter\n\
    \    def moder14(self, value: int) -> None:\n        self._moder14.value = value\n\
    \n    @property\n    def moder13(self) -> Field:\n        \"\"\"\n        MODER13\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder13\n\n    @moder13.setter\n    def moder13(self,\
    \ value: int) -> None:\n        self._moder13.value = value\n\n    @property\n\
    \    def moder12(self) -> Field:\n        \"\"\"\n        MODER12\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder12\n\n    @moder12.setter\n    def moder12(self, value: int)\
    \ -> None:\n        self._moder12.value = value\n\n    @property\n    def moder11(self)\
    \ -> Field:\n        \"\"\"\n        MODER11\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder11\n\
    \n    @moder11.setter\n    def moder11(self, value: int) -> None:\n        self._moder11.value\
    \ = value\n\n    @property\n    def moder10(self) -> Field:\n        \"\"\"\n\
    \        MODER10\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder10\n\n    @moder10.setter\n\
    \    def moder10(self, value: int) -> None:\n        self._moder10.value = value\n\
    \n    @property\n    def moder9(self) -> Field:\n        \"\"\"\n        MODER9\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder9\n\n    @moder9.setter\n    def moder9(self,\
    \ value: int) -> None:\n        self._moder9.value = value\n\n    @property\n\
    \    def moder8(self) -> Field:\n        \"\"\"\n        MODER8\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder8\n\n    @moder8.setter\n    def moder8(self, value: int)\
    \ -> None:\n        self._moder8.value = value\n\n    @property\n    def moder7(self)\
    \ -> Field:\n        \"\"\"\n        MODER7\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder7\n\
    \n    @moder7.setter\n    def moder7(self, value: int) -> None:\n        self._moder7.value\
    \ = value\n\n    @property\n    def moder6(self) -> Field:\n        \"\"\"\n \
    \       MODER6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder6\n\n    @moder6.setter\n    def moder6(self,\
    \ value: int) -> None:\n        self._moder6.value = value\n\n    @property\n\
    \    def moder5(self) -> Field:\n        \"\"\"\n        MODER5\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder5\n\n    @moder5.setter\n    def moder5(self, value: int)\
    \ -> None:\n        self._moder5.value = value\n\n    @property\n    def moder4(self)\
    \ -> Field:\n        \"\"\"\n        MODER4\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder4\n\
    \n    @moder4.setter\n    def moder4(self, value: int) -> None:\n        self._moder4.value\
    \ = value\n\n    @property\n    def moder3(self) -> Field:\n        \"\"\"\n \
    \       MODER3\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder3\n\n    @moder3.setter\n    def moder3(self,\
    \ value: int) -> None:\n        self._moder3.value = value\n\n    @property\n\
    \    def moder2(self) -> Field:\n        \"\"\"\n        MODER2\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder2\n\n    @moder2.setter\n    def moder2(self, value: int)\
    \ -> None:\n        self._moder2.value = value\n\n    @property\n    def moder1(self)\
    \ -> Field:\n        \"\"\"\n        MODER1\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder1\n\
    \n    @moder1.setter\n    def moder1(self, value: int) -> None:\n        self._moder1.value\
    \ = value\n\n    @property\n    def moder0(self) -> Field:\n        \"\"\"\n \
    \       MODER0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder0\n\n    @moder0.setter\n    def moder0(self,\
    \ value: int) -> None:\n        self._moder0.value = value\n\n\nclass OtyperRegister(Register):\n\
    \    \"\"\"\n    OTYPER\n\n    GPIO port output type register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._ot15 = Field(\"ot15\", 15, 1)\n      \
    \  self._ot14 = Field(\"ot14\", 14, 1)\n        self._ot13 = Field(\"ot13\", 13,\
    \ 1)\n        self._ot12 = Field(\"ot12\", 12, 1)\n        self._ot11 = Field(\"\
    ot11\", 11, 1)\n        self._ot10 = Field(\"ot10\", 10, 1)\n        self._ot9\
    \ = Field(\"ot9\", 9, 1)\n        self._ot8 = Field(\"ot8\", 8, 1)\n        self._ot7\
    \ = Field(\"ot7\", 7, 1)\n        self._ot6 = Field(\"ot6\", 6, 1)\n        self._ot5\
    \ = Field(\"ot5\", 5, 1)\n        self._ot4 = Field(\"ot4\", 4, 1)\n        self._ot3\
    \ = Field(\"ot3\", 3, 1)\n        self._ot2 = Field(\"ot2\", 2, 1)\n        self._ot1\
    \ = Field(\"ot1\", 1, 1)\n        self._ot0 = Field(\"ot0\", 0, 1)\n        super().__init__(\"\
    OTYPER\", 0x40021C00 + 0x4)\n\n    @property\n    def ot15(self) -> Field:\n \
    \       \"\"\"\n        OT15\n\n        Port x configuration bits (y =\n     \
    \             0..15)\n        \"\"\"\n        return self._ot15\n\n    @ot15.setter\n\
    \    def ot15(self, value: int) -> None:\n        self._ot15.value = value\n\n\
    \    @property\n    def ot14(self) -> Field:\n        \"\"\"\n        OT14\n\n\
    \        Port x configuration bits (y =\n                  0..15)\n        \"\"\
    \"\n        return self._ot14\n\n    @ot14.setter\n    def ot14(self, value: int)\
    \ -> None:\n        self._ot14.value = value\n\n    @property\n    def ot13(self)\
    \ -> Field:\n        \"\"\"\n        OT13\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._ot13\n\n\
    \    @ot13.setter\n    def ot13(self, value: int) -> None:\n        self._ot13.value\
    \ = value\n\n    @property\n    def ot12(self) -> Field:\n        \"\"\"\n   \
    \     OT12\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot12\n\n    @ot12.setter\n    def ot12(self,\
    \ value: int) -> None:\n        self._ot12.value = value\n\n    @property\n  \
    \  def ot11(self) -> Field:\n        \"\"\"\n        OT11\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot11\n\
    \n    @ot11.setter\n    def ot11(self, value: int) -> None:\n        self._ot11.value\
    \ = value\n\n    @property\n    def ot10(self) -> Field:\n        \"\"\"\n   \
    \     OT10\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot10\n\n    @ot10.setter\n    def ot10(self,\
    \ value: int) -> None:\n        self._ot10.value = value\n\n    @property\n  \
    \  def ot9(self) -> Field:\n        \"\"\"\n        OT9\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot9\n\
    \n    @ot9.setter\n    def ot9(self, value: int) -> None:\n        self._ot9.value\
    \ = value\n\n    @property\n    def ot8(self) -> Field:\n        \"\"\"\n    \
    \    OT8\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot8\n\n    @ot8.setter\n    def ot8(self,\
    \ value: int) -> None:\n        self._ot8.value = value\n\n    @property\n   \
    \ def ot7(self) -> Field:\n        \"\"\"\n        OT7\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot7\n\
    \n    @ot7.setter\n    def ot7(self, value: int) -> None:\n        self._ot7.value\
    \ = value\n\n    @property\n    def ot6(self) -> Field:\n        \"\"\"\n    \
    \    OT6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot6\n\n    @ot6.setter\n    def ot6(self,\
    \ value: int) -> None:\n        self._ot6.value = value\n\n    @property\n   \
    \ def ot5(self) -> Field:\n        \"\"\"\n        OT5\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot5\n\
    \n    @ot5.setter\n    def ot5(self, value: int) -> None:\n        self._ot5.value\
    \ = value\n\n    @property\n    def ot4(self) -> Field:\n        \"\"\"\n    \
    \    OT4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot4\n\n    @ot4.setter\n    def ot4(self,\
    \ value: int) -> None:\n        self._ot4.value = value\n\n    @property\n   \
    \ def ot3(self) -> Field:\n        \"\"\"\n        OT3\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot3\n\
    \n    @ot3.setter\n    def ot3(self, value: int) -> None:\n        self._ot3.value\
    \ = value\n\n    @property\n    def ot2(self) -> Field:\n        \"\"\"\n    \
    \    OT2\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot2\n\n    @ot2.setter\n    def ot2(self,\
    \ value: int) -> None:\n        self._ot2.value = value\n\n    @property\n   \
    \ def ot1(self) -> Field:\n        \"\"\"\n        OT1\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot1\n\
    \n    @ot1.setter\n    def ot1(self, value: int) -> None:\n        self._ot1.value\
    \ = value\n\n    @property\n    def ot0(self) -> Field:\n        \"\"\"\n    \
    \    OT0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot0\n\n    @ot0.setter\n    def ot0(self,\
    \ value: int) -> None:\n        self._ot0.value = value\n\n\nclass OspeedrRegister(Register):\n\
    \    \"\"\"\n    OSPEEDR\n\n    GPIO port output speed\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ospeedr15 = Field(\"ospeedr15\"\
    , 30, 2)\n        self._ospeedr14 = Field(\"ospeedr14\", 28, 2)\n        self._ospeedr13\
    \ = Field(\"ospeedr13\", 26, 2)\n        self._ospeedr12 = Field(\"ospeedr12\"\
    , 24, 2)\n        self._ospeedr11 = Field(\"ospeedr11\", 22, 2)\n        self._ospeedr10\
    \ = Field(\"ospeedr10\", 20, 2)\n        self._ospeedr9 = Field(\"ospeedr9\",\
    \ 18, 2)\n        self._ospeedr8 = Field(\"ospeedr8\", 16, 2)\n        self._ospeedr7\
    \ = Field(\"ospeedr7\", 14, 2)\n        self._ospeedr6 = Field(\"ospeedr6\", 12,\
    \ 2)\n        self._ospeedr5 = Field(\"ospeedr5\", 10, 2)\n        self._ospeedr4\
    \ = Field(\"ospeedr4\", 8, 2)\n        self._ospeedr3 = Field(\"ospeedr3\", 6,\
    \ 2)\n        self._ospeedr2 = Field(\"ospeedr2\", 4, 2)\n        self._ospeedr1\
    \ = Field(\"ospeedr1\", 2, 2)\n        self._ospeedr0 = Field(\"ospeedr0\", 0,\
    \ 2)\n        super().__init__(\"OSPEEDR\", 0x40021C00 + 0x8)\n\n    @property\n\
    \    def ospeedr15(self) -> Field:\n        \"\"\"\n        OSPEEDR15\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr15\n\n    @ospeedr15.setter\n    def ospeedr15(self,\
    \ value: int) -> None:\n        self._ospeedr15.value = value\n\n    @property\n\
    \    def ospeedr14(self) -> Field:\n        \"\"\"\n        OSPEEDR14\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr14\n\n    @ospeedr14.setter\n    def ospeedr14(self,\
    \ value: int) -> None:\n        self._ospeedr14.value = value\n\n    @property\n\
    \    def ospeedr13(self) -> Field:\n        \"\"\"\n        OSPEEDR13\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr13\n\n    @ospeedr13.setter\n    def ospeedr13(self,\
    \ value: int) -> None:\n        self._ospeedr13.value = value\n\n    @property\n\
    \    def ospeedr12(self) -> Field:\n        \"\"\"\n        OSPEEDR12\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr12\n\n    @ospeedr12.setter\n    def ospeedr12(self,\
    \ value: int) -> None:\n        self._ospeedr12.value = value\n\n    @property\n\
    \    def ospeedr11(self) -> Field:\n        \"\"\"\n        OSPEEDR11\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr11\n\n    @ospeedr11.setter\n    def ospeedr11(self,\
    \ value: int) -> None:\n        self._ospeedr11.value = value\n\n    @property\n\
    \    def ospeedr10(self) -> Field:\n        \"\"\"\n        OSPEEDR10\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr10\n\n    @ospeedr10.setter\n    def ospeedr10(self,\
    \ value: int) -> None:\n        self._ospeedr10.value = value\n\n    @property\n\
    \    def ospeedr9(self) -> Field:\n        \"\"\"\n        OSPEEDR9\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr9\n\n    @ospeedr9.setter\n    def ospeedr9(self,\
    \ value: int) -> None:\n        self._ospeedr9.value = value\n\n    @property\n\
    \    def ospeedr8(self) -> Field:\n        \"\"\"\n        OSPEEDR8\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr8\n\n    @ospeedr8.setter\n    def ospeedr8(self,\
    \ value: int) -> None:\n        self._ospeedr8.value = value\n\n    @property\n\
    \    def ospeedr7(self) -> Field:\n        \"\"\"\n        OSPEEDR7\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr7\n\n    @ospeedr7.setter\n    def ospeedr7(self,\
    \ value: int) -> None:\n        self._ospeedr7.value = value\n\n    @property\n\
    \    def ospeedr6(self) -> Field:\n        \"\"\"\n        OSPEEDR6\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr6\n\n    @ospeedr6.setter\n    def ospeedr6(self,\
    \ value: int) -> None:\n        self._ospeedr6.value = value\n\n    @property\n\
    \    def ospeedr5(self) -> Field:\n        \"\"\"\n        OSPEEDR5\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr5\n\n    @ospeedr5.setter\n    def ospeedr5(self,\
    \ value: int) -> None:\n        self._ospeedr5.value = value\n\n    @property\n\
    \    def ospeedr4(self) -> Field:\n        \"\"\"\n        OSPEEDR4\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr4\n\n    @ospeedr4.setter\n    def ospeedr4(self,\
    \ value: int) -> None:\n        self._ospeedr4.value = value\n\n    @property\n\
    \    def ospeedr3(self) -> Field:\n        \"\"\"\n        OSPEEDR3\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr3\n\n    @ospeedr3.setter\n    def ospeedr3(self,\
    \ value: int) -> None:\n        self._ospeedr3.value = value\n\n    @property\n\
    \    def ospeedr2(self) -> Field:\n        \"\"\"\n        OSPEEDR2\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr2\n\n    @ospeedr2.setter\n    def ospeedr2(self,\
    \ value: int) -> None:\n        self._ospeedr2.value = value\n\n    @property\n\
    \    def ospeedr1(self) -> Field:\n        \"\"\"\n        OSPEEDR1\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr1\n\n    @ospeedr1.setter\n    def ospeedr1(self,\
    \ value: int) -> None:\n        self._ospeedr1.value = value\n\n    @property\n\
    \    def ospeedr0(self) -> Field:\n        \"\"\"\n        OSPEEDR0\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr0\n\n    @ospeedr0.setter\n    def ospeedr0(self,\
    \ value: int) -> None:\n        self._ospeedr0.value = value\n\n\nclass PupdrRegister(Register):\n\
    \    \"\"\"\n    PUPDR\n\n    GPIO port pull-up/pull-down\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pupdr15 = Field(\"pupdr15\"\
    , 30, 2)\n        self._pupdr14 = Field(\"pupdr14\", 28, 2)\n        self._pupdr13\
    \ = Field(\"pupdr13\", 26, 2)\n        self._pupdr12 = Field(\"pupdr12\", 24,\
    \ 2)\n        self._pupdr11 = Field(\"pupdr11\", 22, 2)\n        self._pupdr10\
    \ = Field(\"pupdr10\", 20, 2)\n        self._pupdr9 = Field(\"pupdr9\", 18, 2)\n\
    \        self._pupdr8 = Field(\"pupdr8\", 16, 2)\n        self._pupdr7 = Field(\"\
    pupdr7\", 14, 2)\n        self._pupdr6 = Field(\"pupdr6\", 12, 2)\n        self._pupdr5\
    \ = Field(\"pupdr5\", 10, 2)\n        self._pupdr4 = Field(\"pupdr4\", 8, 2)\n\
    \        self._pupdr3 = Field(\"pupdr3\", 6, 2)\n        self._pupdr2 = Field(\"\
    pupdr2\", 4, 2)\n        self._pupdr1 = Field(\"pupdr1\", 2, 2)\n        self._pupdr0\
    \ = Field(\"pupdr0\", 0, 2)\n        super().__init__(\"PUPDR\", 0x40021C00 +\
    \ 0xC)\n\n    @property\n    def pupdr15(self) -> Field:\n        \"\"\"\n   \
    \     PUPDR15\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr15\n\n    @pupdr15.setter\n    def\
    \ pupdr15(self, value: int) -> None:\n        self._pupdr15.value = value\n\n\
    \    @property\n    def pupdr14(self) -> Field:\n        \"\"\"\n        PUPDR14\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr14\n\n    @pupdr14.setter\n    def pupdr14(self,\
    \ value: int) -> None:\n        self._pupdr14.value = value\n\n    @property\n\
    \    def pupdr13(self) -> Field:\n        \"\"\"\n        PUPDR13\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr13\n\n    @pupdr13.setter\n    def pupdr13(self, value: int)\
    \ -> None:\n        self._pupdr13.value = value\n\n    @property\n    def pupdr12(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR12\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr12\n\
    \n    @pupdr12.setter\n    def pupdr12(self, value: int) -> None:\n        self._pupdr12.value\
    \ = value\n\n    @property\n    def pupdr11(self) -> Field:\n        \"\"\"\n\
    \        PUPDR11\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._pupdr11\n\n    @pupdr11.setter\n\
    \    def pupdr11(self, value: int) -> None:\n        self._pupdr11.value = value\n\
    \n    @property\n    def pupdr10(self) -> Field:\n        \"\"\"\n        PUPDR10\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr10\n\n    @pupdr10.setter\n    def pupdr10(self,\
    \ value: int) -> None:\n        self._pupdr10.value = value\n\n    @property\n\
    \    def pupdr9(self) -> Field:\n        \"\"\"\n        PUPDR9\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr9\n\n    @pupdr9.setter\n    def pupdr9(self, value: int)\
    \ -> None:\n        self._pupdr9.value = value\n\n    @property\n    def pupdr8(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR8\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr8\n\
    \n    @pupdr8.setter\n    def pupdr8(self, value: int) -> None:\n        self._pupdr8.value\
    \ = value\n\n    @property\n    def pupdr7(self) -> Field:\n        \"\"\"\n \
    \       PUPDR7\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr7\n\n    @pupdr7.setter\n    def pupdr7(self,\
    \ value: int) -> None:\n        self._pupdr7.value = value\n\n    @property\n\
    \    def pupdr6(self) -> Field:\n        \"\"\"\n        PUPDR6\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr6\n\n    @pupdr6.setter\n    def pupdr6(self, value: int)\
    \ -> None:\n        self._pupdr6.value = value\n\n    @property\n    def pupdr5(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR5\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr5\n\
    \n    @pupdr5.setter\n    def pupdr5(self, value: int) -> None:\n        self._pupdr5.value\
    \ = value\n\n    @property\n    def pupdr4(self) -> Field:\n        \"\"\"\n \
    \       PUPDR4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr4\n\n    @pupdr4.setter\n    def pupdr4(self,\
    \ value: int) -> None:\n        self._pupdr4.value = value\n\n    @property\n\
    \    def pupdr3(self) -> Field:\n        \"\"\"\n        PUPDR3\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr3\n\n    @pupdr3.setter\n    def pupdr3(self, value: int)\
    \ -> None:\n        self._pupdr3.value = value\n\n    @property\n    def pupdr2(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR2\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr2\n\
    \n    @pupdr2.setter\n    def pupdr2(self, value: int) -> None:\n        self._pupdr2.value\
    \ = value\n\n    @property\n    def pupdr1(self) -> Field:\n        \"\"\"\n \
    \       PUPDR1\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr1\n\n    @pupdr1.setter\n    def pupdr1(self,\
    \ value: int) -> None:\n        self._pupdr1.value = value\n\n    @property\n\
    \    def pupdr0(self) -> Field:\n        \"\"\"\n        PUPDR0\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr0\n\n    @pupdr0.setter\n    def pupdr0(self, value: int)\
    \ -> None:\n        self._pupdr0.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    GPIO port input data register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._idr15 = Field(\"idr15\", 15, 1)\n        self._idr14\
    \ = Field(\"idr14\", 14, 1)\n        self._idr13 = Field(\"idr13\", 13, 1)\n \
    \       self._idr12 = Field(\"idr12\", 12, 1)\n        self._idr11 = Field(\"\
    idr11\", 11, 1)\n        self._idr10 = Field(\"idr10\", 10, 1)\n        self._idr9\
    \ = Field(\"idr9\", 9, 1)\n        self._idr8 = Field(\"idr8\", 8, 1)\n      \
    \  self._idr7 = Field(\"idr7\", 7, 1)\n        self._idr6 = Field(\"idr6\", 6,\
    \ 1)\n        self._idr5 = Field(\"idr5\", 5, 1)\n        self._idr4 = Field(\"\
    idr4\", 4, 1)\n        self._idr3 = Field(\"idr3\", 3, 1)\n        self._idr2\
    \ = Field(\"idr2\", 2, 1)\n        self._idr1 = Field(\"idr1\", 1, 1)\n      \
    \  self._idr0 = Field(\"idr0\", 0, 1)\n        super().__init__(\"IDR\", 0x40021C00\
    \ + 0x10)\n\n    @property\n    def idr15(self) -> Field:\n        \"\"\"\n  \
    \      IDR15\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr15\n\n    @idr15.setter\n    def idr15(self,\
    \ value: int) -> None:\n        self._idr15.value = value\n\n    @property\n \
    \   def idr14(self) -> Field:\n        \"\"\"\n        IDR14\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr14\n\
    \n    @idr14.setter\n    def idr14(self, value: int) -> None:\n        self._idr14.value\
    \ = value\n\n    @property\n    def idr13(self) -> Field:\n        \"\"\"\n  \
    \      IDR13\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr13\n\n    @idr13.setter\n    def idr13(self,\
    \ value: int) -> None:\n        self._idr13.value = value\n\n    @property\n \
    \   def idr12(self) -> Field:\n        \"\"\"\n        IDR12\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr12\n\
    \n    @idr12.setter\n    def idr12(self, value: int) -> None:\n        self._idr12.value\
    \ = value\n\n    @property\n    def idr11(self) -> Field:\n        \"\"\"\n  \
    \      IDR11\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr11\n\n    @idr11.setter\n    def idr11(self,\
    \ value: int) -> None:\n        self._idr11.value = value\n\n    @property\n \
    \   def idr10(self) -> Field:\n        \"\"\"\n        IDR10\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr10\n\
    \n    @idr10.setter\n    def idr10(self, value: int) -> None:\n        self._idr10.value\
    \ = value\n\n    @property\n    def idr9(self) -> Field:\n        \"\"\"\n   \
    \     IDR9\n\n        Port input data (y =\n                  0..15)\n       \
    \ \"\"\"\n        return self._idr9\n\n    @idr9.setter\n    def idr9(self, value:\
    \ int) -> None:\n        self._idr9.value = value\n\n    @property\n    def idr8(self)\
    \ -> Field:\n        \"\"\"\n        IDR8\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr8\n\n    @idr8.setter\n\
    \    def idr8(self, value: int) -> None:\n        self._idr8.value = value\n\n\
    \    @property\n    def idr7(self) -> Field:\n        \"\"\"\n        IDR7\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr7\n\n    @idr7.setter\n    def idr7(self, value: int) ->\
    \ None:\n        self._idr7.value = value\n\n    @property\n    def idr6(self)\
    \ -> Field:\n        \"\"\"\n        IDR6\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr6\n\n    @idr6.setter\n\
    \    def idr6(self, value: int) -> None:\n        self._idr6.value = value\n\n\
    \    @property\n    def idr5(self) -> Field:\n        \"\"\"\n        IDR5\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr5\n\n    @idr5.setter\n    def idr5(self, value: int) ->\
    \ None:\n        self._idr5.value = value\n\n    @property\n    def idr4(self)\
    \ -> Field:\n        \"\"\"\n        IDR4\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr4\n\n    @idr4.setter\n\
    \    def idr4(self, value: int) -> None:\n        self._idr4.value = value\n\n\
    \    @property\n    def idr3(self) -> Field:\n        \"\"\"\n        IDR3\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr3\n\n    @idr3.setter\n    def idr3(self, value: int) ->\
    \ None:\n        self._idr3.value = value\n\n    @property\n    def idr2(self)\
    \ -> Field:\n        \"\"\"\n        IDR2\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr2\n\n    @idr2.setter\n\
    \    def idr2(self, value: int) -> None:\n        self._idr2.value = value\n\n\
    \    @property\n    def idr1(self) -> Field:\n        \"\"\"\n        IDR1\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr1\n\n    @idr1.setter\n    def idr1(self, value: int) ->\
    \ None:\n        self._idr1.value = value\n\n    @property\n    def idr0(self)\
    \ -> Field:\n        \"\"\"\n        IDR0\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr0\n\n    @idr0.setter\n\
    \    def idr0(self, value: int) -> None:\n        self._idr0.value = value\n\n\
    \nclass OdrRegister(Register):\n    \"\"\"\n    ODR\n\n    GPIO port output data\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._odr15 = Field(\"\
    odr15\", 15, 1)\n        self._odr14 = Field(\"odr14\", 14, 1)\n        self._odr13\
    \ = Field(\"odr13\", 13, 1)\n        self._odr12 = Field(\"odr12\", 12, 1)\n \
    \       self._odr11 = Field(\"odr11\", 11, 1)\n        self._odr10 = Field(\"\
    odr10\", 10, 1)\n        self._odr9 = Field(\"odr9\", 9, 1)\n        self._odr8\
    \ = Field(\"odr8\", 8, 1)\n        self._odr7 = Field(\"odr7\", 7, 1)\n      \
    \  self._odr6 = Field(\"odr6\", 6, 1)\n        self._odr5 = Field(\"odr5\", 5,\
    \ 1)\n        self._odr4 = Field(\"odr4\", 4, 1)\n        self._odr3 = Field(\"\
    odr3\", 3, 1)\n        self._odr2 = Field(\"odr2\", 2, 1)\n        self._odr1\
    \ = Field(\"odr1\", 1, 1)\n        self._odr0 = Field(\"odr0\", 0, 1)\n      \
    \  super().__init__(\"ODR\", 0x40021C00 + 0x14)\n\n    @property\n    def odr15(self)\
    \ -> Field:\n        \"\"\"\n        ODR15\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr15\n\n    @odr15.setter\n\
    \    def odr15(self, value: int) -> None:\n        self._odr15.value = value\n\
    \n    @property\n    def odr14(self) -> Field:\n        \"\"\"\n        ODR14\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr14\n\n    @odr14.setter\n    def odr14(self, value: int)\
    \ -> None:\n        self._odr14.value = value\n\n    @property\n    def odr13(self)\
    \ -> Field:\n        \"\"\"\n        ODR13\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr13\n\n    @odr13.setter\n\
    \    def odr13(self, value: int) -> None:\n        self._odr13.value = value\n\
    \n    @property\n    def odr12(self) -> Field:\n        \"\"\"\n        ODR12\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr12\n\n    @odr12.setter\n    def odr12(self, value: int)\
    \ -> None:\n        self._odr12.value = value\n\n    @property\n    def odr11(self)\
    \ -> Field:\n        \"\"\"\n        ODR11\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr11\n\n    @odr11.setter\n\
    \    def odr11(self, value: int) -> None:\n        self._odr11.value = value\n\
    \n    @property\n    def odr10(self) -> Field:\n        \"\"\"\n        ODR10\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr10\n\n    @odr10.setter\n    def odr10(self, value: int)\
    \ -> None:\n        self._odr10.value = value\n\n    @property\n    def odr9(self)\
    \ -> Field:\n        \"\"\"\n        ODR9\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr9\n\n    @odr9.setter\n\
    \    def odr9(self, value: int) -> None:\n        self._odr9.value = value\n\n\
    \    @property\n    def odr8(self) -> Field:\n        \"\"\"\n        ODR8\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr8\n\n    @odr8.setter\n    def odr8(self, value: int) ->\
    \ None:\n        self._odr8.value = value\n\n    @property\n    def odr7(self)\
    \ -> Field:\n        \"\"\"\n        ODR7\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr7\n\n    @odr7.setter\n\
    \    def odr7(self, value: int) -> None:\n        self._odr7.value = value\n\n\
    \    @property\n    def odr6(self) -> Field:\n        \"\"\"\n        ODR6\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr6\n\n    @odr6.setter\n    def odr6(self, value: int) ->\
    \ None:\n        self._odr6.value = value\n\n    @property\n    def odr5(self)\
    \ -> Field:\n        \"\"\"\n        ODR5\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr5\n\n    @odr5.setter\n\
    \    def odr5(self, value: int) -> None:\n        self._odr5.value = value\n\n\
    \    @property\n    def odr4(self) -> Field:\n        \"\"\"\n        ODR4\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr4\n\n    @odr4.setter\n    def odr4(self, value: int) ->\
    \ None:\n        self._odr4.value = value\n\n    @property\n    def odr3(self)\
    \ -> Field:\n        \"\"\"\n        ODR3\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr3\n\n    @odr3.setter\n\
    \    def odr3(self, value: int) -> None:\n        self._odr3.value = value\n\n\
    \    @property\n    def odr2(self) -> Field:\n        \"\"\"\n        ODR2\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr2\n\n    @odr2.setter\n    def odr2(self, value: int) ->\
    \ None:\n        self._odr2.value = value\n\n    @property\n    def odr1(self)\
    \ -> Field:\n        \"\"\"\n        ODR1\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr1\n\n    @odr1.setter\n\
    \    def odr1(self, value: int) -> None:\n        self._odr1.value = value\n\n\
    \    @property\n    def odr0(self) -> Field:\n        \"\"\"\n        ODR0\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr0\n\n    @odr0.setter\n    def odr0(self, value: int) ->\
    \ None:\n        self._odr0.value = value\n\n\nclass BsrrRegister(Register):\n\
    \    \"\"\"\n    BSRR\n\n    GPIO port bit set/reset\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._br15 = Field(\"br15\", 31,\
    \ 1)\n        self._br14 = Field(\"br14\", 30, 1)\n        self._br13 = Field(\"\
    br13\", 29, 1)\n        self._br12 = Field(\"br12\", 28, 1)\n        self._br11\
    \ = Field(\"br11\", 27, 1)\n        self._br10 = Field(\"br10\", 26, 1)\n    \
    \    self._br9 = Field(\"br9\", 25, 1)\n        self._br8 = Field(\"br8\", 24,\
    \ 1)\n        self._br7 = Field(\"br7\", 23, 1)\n        self._br6 = Field(\"\
    br6\", 22, 1)\n        self._br5 = Field(\"br5\", 21, 1)\n        self._br4 =\
    \ Field(\"br4\", 20, 1)\n        self._br3 = Field(\"br3\", 19, 1)\n        self._br2\
    \ = Field(\"br2\", 18, 1)\n        self._br1 = Field(\"br1\", 17, 1)\n       \
    \ self._br0 = Field(\"br0\", 16, 1)\n        self._bs15 = Field(\"bs15\", 15,\
    \ 1)\n        self._bs14 = Field(\"bs14\", 14, 1)\n        self._bs13 = Field(\"\
    bs13\", 13, 1)\n        self._bs12 = Field(\"bs12\", 12, 1)\n        self._bs11\
    \ = Field(\"bs11\", 11, 1)\n        self._bs10 = Field(\"bs10\", 10, 1)\n    \
    \    self._bs9 = Field(\"bs9\", 9, 1)\n        self._bs8 = Field(\"bs8\", 8, 1)\n\
    \        self._bs7 = Field(\"bs7\", 7, 1)\n        self._bs6 = Field(\"bs6\",\
    \ 6, 1)\n        self._bs5 = Field(\"bs5\", 5, 1)\n        self._bs4 = Field(\"\
    bs4\", 4, 1)\n        self._bs3 = Field(\"bs3\", 3, 1)\n        self._bs2 = Field(\"\
    bs2\", 2, 1)\n        self._bs1 = Field(\"bs1\", 1, 1)\n        self._bs0 = Field(\"\
    bs0\", 0, 1)\n        super().__init__(\"BSRR\", 0x40021C00 + 0x18)\n\n    @property\n\
    \    def br15(self) -> Field:\n        \"\"\"\n        BR15\n\n        Port x\
    \ reset bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br15\n\
    \n    @br15.setter\n    def br15(self, value: int) -> None:\n        self._br15.value\
    \ = value\n\n    @property\n    def br14(self) -> Field:\n        \"\"\"\n   \
    \     BR14\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br14\n\n    @br14.setter\n    def br14(self,\
    \ value: int) -> None:\n        self._br14.value = value\n\n    @property\n  \
    \  def br13(self) -> Field:\n        \"\"\"\n        BR13\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br13\n\
    \n    @br13.setter\n    def br13(self, value: int) -> None:\n        self._br13.value\
    \ = value\n\n    @property\n    def br12(self) -> Field:\n        \"\"\"\n   \
    \     BR12\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br12\n\n    @br12.setter\n    def br12(self,\
    \ value: int) -> None:\n        self._br12.value = value\n\n    @property\n  \
    \  def br11(self) -> Field:\n        \"\"\"\n        BR11\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br11\n\
    \n    @br11.setter\n    def br11(self, value: int) -> None:\n        self._br11.value\
    \ = value\n\n    @property\n    def br10(self) -> Field:\n        \"\"\"\n   \
    \     BR10\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br10\n\n    @br10.setter\n    def br10(self,\
    \ value: int) -> None:\n        self._br10.value = value\n\n    @property\n  \
    \  def br9(self) -> Field:\n        \"\"\"\n        BR9\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br9\n\
    \n    @br9.setter\n    def br9(self, value: int) -> None:\n        self._br9.value\
    \ = value\n\n    @property\n    def br8(self) -> Field:\n        \"\"\"\n    \
    \    BR8\n\n        Port x reset bit y (y =\n                  0..15)\n      \
    \  \"\"\"\n        return self._br8\n\n    @br8.setter\n    def br8(self, value:\
    \ int) -> None:\n        self._br8.value = value\n\n    @property\n    def br7(self)\
    \ -> Field:\n        \"\"\"\n        BR7\n\n        Port x reset bit y (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._br7\n\n    @br7.setter\n\
    \    def br7(self, value: int) -> None:\n        self._br7.value = value\n\n \
    \   @property\n    def br6(self) -> Field:\n        \"\"\"\n        BR6\n\n  \
    \      Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._br6\n\n    @br6.setter\n    def br6(self, value: int) -> None:\n\
    \        self._br6.value = value\n\n    @property\n    def br5(self) -> Field:\n\
    \        \"\"\"\n        BR5\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br5\n\n    @br5.setter\n \
    \   def br5(self, value: int) -> None:\n        self._br5.value = value\n\n  \
    \  @property\n    def br4(self) -> Field:\n        \"\"\"\n        BR4\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br4\n\n    @br4.setter\n    def br4(self, value: int) -> None:\n\
    \        self._br4.value = value\n\n    @property\n    def br3(self) -> Field:\n\
    \        \"\"\"\n        BR3\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br3\n\n    @br3.setter\n \
    \   def br3(self, value: int) -> None:\n        self._br3.value = value\n\n  \
    \  @property\n    def br2(self) -> Field:\n        \"\"\"\n        BR2\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br2\n\n    @br2.setter\n    def br2(self, value: int) -> None:\n\
    \        self._br2.value = value\n\n    @property\n    def br1(self) -> Field:\n\
    \        \"\"\"\n        BR1\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br1\n\n    @br1.setter\n \
    \   def br1(self, value: int) -> None:\n        self._br1.value = value\n\n  \
    \  @property\n    def br0(self) -> Field:\n        \"\"\"\n        BR0\n\n   \
    \     Port x set bit y (y=\n                  0..15)\n        \"\"\"\n       \
    \ return self._br0\n\n    @br0.setter\n    def br0(self, value: int) -> None:\n\
    \        self._br0.value = value\n\n    @property\n    def bs15(self) -> Field:\n\
    \        \"\"\"\n        BS15\n\n        Port x set bit y (y=\n              \
    \    0..15)\n        \"\"\"\n        return self._bs15\n\n    @bs15.setter\n \
    \   def bs15(self, value: int) -> None:\n        self._bs15.value = value\n\n\
    \    @property\n    def bs14(self) -> Field:\n        \"\"\"\n        BS14\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs14\n\n    @bs14.setter\n    def bs14(self, value: int) ->\
    \ None:\n        self._bs14.value = value\n\n    @property\n    def bs13(self)\
    \ -> Field:\n        \"\"\"\n        BS13\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs13\n\n    @bs13.setter\n\
    \    def bs13(self, value: int) -> None:\n        self._bs13.value = value\n\n\
    \    @property\n    def bs12(self) -> Field:\n        \"\"\"\n        BS12\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs12\n\n    @bs12.setter\n    def bs12(self, value: int) ->\
    \ None:\n        self._bs12.value = value\n\n    @property\n    def bs11(self)\
    \ -> Field:\n        \"\"\"\n        BS11\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs11\n\n    @bs11.setter\n\
    \    def bs11(self, value: int) -> None:\n        self._bs11.value = value\n\n\
    \    @property\n    def bs10(self) -> Field:\n        \"\"\"\n        BS10\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs10\n\n    @bs10.setter\n    def bs10(self, value: int) ->\
    \ None:\n        self._bs10.value = value\n\n    @property\n    def bs9(self)\
    \ -> Field:\n        \"\"\"\n        BS9\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs9\n\n    @bs9.setter\n\
    \    def bs9(self, value: int) -> None:\n        self._bs9.value = value\n\n \
    \   @property\n    def bs8(self) -> Field:\n        \"\"\"\n        BS8\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs8\n\n    @bs8.setter\n    def bs8(self, value: int) -> None:\n\
    \        self._bs8.value = value\n\n    @property\n    def bs7(self) -> Field:\n\
    \        \"\"\"\n        BS7\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs7\n\n    @bs7.setter\n    def\
    \ bs7(self, value: int) -> None:\n        self._bs7.value = value\n\n    @property\n\
    \    def bs6(self) -> Field:\n        \"\"\"\n        BS6\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs6\n\
    \n    @bs6.setter\n    def bs6(self, value: int) -> None:\n        self._bs6.value\
    \ = value\n\n    @property\n    def bs5(self) -> Field:\n        \"\"\"\n    \
    \    BS5\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs5\n\n    @bs5.setter\n    def bs5(self, value: int)\
    \ -> None:\n        self._bs5.value = value\n\n    @property\n    def bs4(self)\
    \ -> Field:\n        \"\"\"\n        BS4\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs4\n\n    @bs4.setter\n\
    \    def bs4(self, value: int) -> None:\n        self._bs4.value = value\n\n \
    \   @property\n    def bs3(self) -> Field:\n        \"\"\"\n        BS3\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs3\n\n    @bs3.setter\n    def bs3(self, value: int) -> None:\n\
    \        self._bs3.value = value\n\n    @property\n    def bs2(self) -> Field:\n\
    \        \"\"\"\n        BS2\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs2\n\n    @bs2.setter\n    def\
    \ bs2(self, value: int) -> None:\n        self._bs2.value = value\n\n    @property\n\
    \    def bs1(self) -> Field:\n        \"\"\"\n        BS1\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs1\n\
    \n    @bs1.setter\n    def bs1(self, value: int) -> None:\n        self._bs1.value\
    \ = value\n\n    @property\n    def bs0(self) -> Field:\n        \"\"\"\n    \
    \    BS0\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs0\n\n    @bs0.setter\n    def bs0(self, value: int)\
    \ -> None:\n        self._bs0.value = value\n\n\nclass LckrRegister(Register):\n\
    \    \"\"\"\n    LCKR\n\n    GPIO port configuration lock\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lckk = Field(\"lckk\", 16,\
    \ 1)\n        self._lck15 = Field(\"lck15\", 15, 1)\n        self._lck14 = Field(\"\
    lck14\", 14, 1)\n        self._lck13 = Field(\"lck13\", 13, 1)\n        self._lck12\
    \ = Field(\"lck12\", 12, 1)\n        self._lck11 = Field(\"lck11\", 11, 1)\n \
    \       self._lck10 = Field(\"lck10\", 10, 1)\n        self._lck9 = Field(\"lck9\"\
    , 9, 1)\n        self._lck8 = Field(\"lck8\", 8, 1)\n        self._lck7 = Field(\"\
    lck7\", 7, 1)\n        self._lck6 = Field(\"lck6\", 6, 1)\n        self._lck5\
    \ = Field(\"lck5\", 5, 1)\n        self._lck4 = Field(\"lck4\", 4, 1)\n      \
    \  self._lck3 = Field(\"lck3\", 3, 1)\n        self._lck2 = Field(\"lck2\", 2,\
    \ 1)\n        self._lck1 = Field(\"lck1\", 1, 1)\n        self._lck0 = Field(\"\
    lck0\", 0, 1)\n        super().__init__(\"LCKR\", 0x40021C00 + 0x1C)\n\n    @property\n\
    \    def lckk(self) -> Field:\n        \"\"\"\n        LCKK\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lckk\n\
    \n    @lckk.setter\n    def lckk(self, value: int) -> None:\n        self._lckk.value\
    \ = value\n\n    @property\n    def lck15(self) -> Field:\n        \"\"\"\n  \
    \      LCK15\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck15\n\n    @lck15.setter\n    def lck15(self,\
    \ value: int) -> None:\n        self._lck15.value = value\n\n    @property\n \
    \   def lck14(self) -> Field:\n        \"\"\"\n        LCK14\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck14\n\
    \n    @lck14.setter\n    def lck14(self, value: int) -> None:\n        self._lck14.value\
    \ = value\n\n    @property\n    def lck13(self) -> Field:\n        \"\"\"\n  \
    \      LCK13\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck13\n\n    @lck13.setter\n    def lck13(self,\
    \ value: int) -> None:\n        self._lck13.value = value\n\n    @property\n \
    \   def lck12(self) -> Field:\n        \"\"\"\n        LCK12\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck12\n\
    \n    @lck12.setter\n    def lck12(self, value: int) -> None:\n        self._lck12.value\
    \ = value\n\n    @property\n    def lck11(self) -> Field:\n        \"\"\"\n  \
    \      LCK11\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck11\n\n    @lck11.setter\n    def lck11(self,\
    \ value: int) -> None:\n        self._lck11.value = value\n\n    @property\n \
    \   def lck10(self) -> Field:\n        \"\"\"\n        LCK10\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck10\n\
    \n    @lck10.setter\n    def lck10(self, value: int) -> None:\n        self._lck10.value\
    \ = value\n\n    @property\n    def lck9(self) -> Field:\n        \"\"\"\n   \
    \     LCK9\n\n        Port x lock bit y (y=\n                  0..15)\n      \
    \  \"\"\"\n        return self._lck9\n\n    @lck9.setter\n    def lck9(self, value:\
    \ int) -> None:\n        self._lck9.value = value\n\n    @property\n    def lck8(self)\
    \ -> Field:\n        \"\"\"\n        LCK8\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck8\n\n    @lck8.setter\n\
    \    def lck8(self, value: int) -> None:\n        self._lck8.value = value\n\n\
    \    @property\n    def lck7(self) -> Field:\n        \"\"\"\n        LCK7\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck7\n\n    @lck7.setter\n    def lck7(self, value: int) ->\
    \ None:\n        self._lck7.value = value\n\n    @property\n    def lck6(self)\
    \ -> Field:\n        \"\"\"\n        LCK6\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck6\n\n    @lck6.setter\n\
    \    def lck6(self, value: int) -> None:\n        self._lck6.value = value\n\n\
    \    @property\n    def lck5(self) -> Field:\n        \"\"\"\n        LCK5\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck5\n\n    @lck5.setter\n    def lck5(self, value: int) ->\
    \ None:\n        self._lck5.value = value\n\n    @property\n    def lck4(self)\
    \ -> Field:\n        \"\"\"\n        LCK4\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck4\n\n    @lck4.setter\n\
    \    def lck4(self, value: int) -> None:\n        self._lck4.value = value\n\n\
    \    @property\n    def lck3(self) -> Field:\n        \"\"\"\n        LCK3\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck3\n\n    @lck3.setter\n    def lck3(self, value: int) ->\
    \ None:\n        self._lck3.value = value\n\n    @property\n    def lck2(self)\
    \ -> Field:\n        \"\"\"\n        LCK2\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck2\n\n    @lck2.setter\n\
    \    def lck2(self, value: int) -> None:\n        self._lck2.value = value\n\n\
    \    @property\n    def lck1(self) -> Field:\n        \"\"\"\n        LCK1\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck1\n\n    @lck1.setter\n    def lck1(self, value: int) ->\
    \ None:\n        self._lck1.value = value\n\n    @property\n    def lck0(self)\
    \ -> Field:\n        \"\"\"\n        LCK0\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck0\n\n    @lck0.setter\n\
    \    def lck0(self, value: int) -> None:\n        self._lck0.value = value\n\n\
    \nclass AfrlRegister(Register):\n    \"\"\"\n    AFRL\n\n    GPIO alternate function\
    \ low\n              register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._afrl7 = Field(\"afrl7\", 28, 4)\n        self._afrl6 = Field(\"afrl6\"\
    , 24, 4)\n        self._afrl5 = Field(\"afrl5\", 20, 4)\n        self._afrl4 =\
    \ Field(\"afrl4\", 16, 4)\n        self._afrl3 = Field(\"afrl3\", 12, 4)\n   \
    \     self._afrl2 = Field(\"afrl2\", 8, 4)\n        self._afrl1 = Field(\"afrl1\"\
    , 4, 4)\n        self._afrl0 = Field(\"afrl0\", 0, 4)\n        super().__init__(\"\
    AFRL\", 0x40021C00 + 0x20)\n\n    @property\n    def afrl7(self) -> Field:\n \
    \       \"\"\"\n        AFRL7\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 0..7)\n        \"\"\"\n        return self._afrl7\n\
    \n    @afrl7.setter\n    def afrl7(self, value: int) -> None:\n        self._afrl7.value\
    \ = value\n\n    @property\n    def afrl6(self) -> Field:\n        \"\"\"\n  \
    \      AFRL6\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 0..7)\n        \"\"\"\n        return self._afrl6\n\n    @afrl6.setter\n\
    \    def afrl6(self, value: int) -> None:\n        self._afrl6.value = value\n\
    \n    @property\n    def afrl5(self) -> Field:\n        \"\"\"\n        AFRL5\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl5\n\n    @afrl5.setter\n \
    \   def afrl5(self, value: int) -> None:\n        self._afrl5.value = value\n\n\
    \    @property\n    def afrl4(self) -> Field:\n        \"\"\"\n        AFRL4\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl4\n\n    @afrl4.setter\n \
    \   def afrl4(self, value: int) -> None:\n        self._afrl4.value = value\n\n\
    \    @property\n    def afrl3(self) -> Field:\n        \"\"\"\n        AFRL3\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl3\n\n    @afrl3.setter\n \
    \   def afrl3(self, value: int) -> None:\n        self._afrl3.value = value\n\n\
    \    @property\n    def afrl2(self) -> Field:\n        \"\"\"\n        AFRL2\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl2\n\n    @afrl2.setter\n \
    \   def afrl2(self, value: int) -> None:\n        self._afrl2.value = value\n\n\
    \    @property\n    def afrl1(self) -> Field:\n        \"\"\"\n        AFRL1\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl1\n\n    @afrl1.setter\n \
    \   def afrl1(self, value: int) -> None:\n        self._afrl1.value = value\n\n\
    \    @property\n    def afrl0(self) -> Field:\n        \"\"\"\n        AFRL0\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl0\n\n    @afrl0.setter\n \
    \   def afrl0(self, value: int) -> None:\n        self._afrl0.value = value\n\n\
    \nclass AfrhRegister(Register):\n    \"\"\"\n    AFRH\n\n    GPIO alternate function\
    \ high\n              register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._afrh15 = Field(\"afrh15\", 28, 4)\n        self._afrh14 = Field(\"afrh14\"\
    , 24, 4)\n        self._afrh13 = Field(\"afrh13\", 20, 4)\n        self._afrh12\
    \ = Field(\"afrh12\", 16, 4)\n        self._afrh11 = Field(\"afrh11\", 12, 4)\n\
    \        self._afrh10 = Field(\"afrh10\", 8, 4)\n        self._afrh9 = Field(\"\
    afrh9\", 4, 4)\n        self._afrh8 = Field(\"afrh8\", 0, 4)\n        super().__init__(\"\
    AFRH\", 0x40021C00 + 0x24)\n\n    @property\n    def afrh15(self) -> Field:\n\
    \        \"\"\"\n        AFRH15\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 8..15)\n        \"\"\"\n        return self._afrh15\n\
    \n    @afrh15.setter\n    def afrh15(self, value: int) -> None:\n        self._afrh15.value\
    \ = value\n\n    @property\n    def afrh14(self) -> Field:\n        \"\"\"\n \
    \       AFRH14\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh14\n\n  \
    \  @afrh14.setter\n    def afrh14(self, value: int) -> None:\n        self._afrh14.value\
    \ = value\n\n    @property\n    def afrh13(self) -> Field:\n        \"\"\"\n \
    \       AFRH13\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh13\n\n  \
    \  @afrh13.setter\n    def afrh13(self, value: int) -> None:\n        self._afrh13.value\
    \ = value\n\n    @property\n    def afrh12(self) -> Field:\n        \"\"\"\n \
    \       AFRH12\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh12\n\n  \
    \  @afrh12.setter\n    def afrh12(self, value: int) -> None:\n        self._afrh12.value\
    \ = value\n\n    @property\n    def afrh11(self) -> Field:\n        \"\"\"\n \
    \       AFRH11\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh11\n\n  \
    \  @afrh11.setter\n    def afrh11(self, value: int) -> None:\n        self._afrh11.value\
    \ = value\n\n    @property\n    def afrh10(self) -> Field:\n        \"\"\"\n \
    \       AFRH10\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh10\n\n  \
    \  @afrh10.setter\n    def afrh10(self, value: int) -> None:\n        self._afrh10.value\
    \ = value\n\n    @property\n    def afrh9(self) -> Field:\n        \"\"\"\n  \
    \      AFRH9\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 8..15)\n        \"\"\"\n        return self._afrh9\n\n    @afrh9.setter\n\
    \    def afrh9(self, value: int) -> None:\n        self._afrh9.value = value\n\
    \n    @property\n    def afrh8(self) -> Field:\n        \"\"\"\n        AFRH8\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 8..15)\n        \"\"\"\n        return self._afrh8\n\n    @afrh8.setter\n\
    \    def afrh8(self, value: int) -> None:\n        self._afrh8.value = value\n\
    \n\nclass Gpioh(Peripheral):\n    \"\"\"\n    GPIOH\n\n    General-purpose I/Os\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._moder = ModerRegister()\n\
    \        self._otyper = OtyperRegister()\n        self._ospeedr = OspeedrRegister()\n\
    \        self._pupdr = PupdrRegister()\n        self._idr = IdrRegister()\n  \
    \      self._odr = OdrRegister()\n        self._bsrr = BsrrRegister()\n      \
    \  self._lckr = LckrRegister()\n        self._afrl = AfrlRegister()\n        self._afrh\
    \ = AfrhRegister()\n        super().__init__(\"gpioh\", 0x40021C00)\n\n    @property\n\
    \    def moder(self) -> ModerRegister:\n        return self._moder\n\n    @moder.setter\n\
    \    def moder(self, value: int) -> None:\n        self._moder.value = value\n\
    \n    @property\n    def otyper(self) -> OtyperRegister:\n        return self._otyper\n\
    \n    @otyper.setter\n    def otyper(self, value: int) -> None:\n        self._otyper.value\
    \ = value\n\n    @property\n    def ospeedr(self) -> OspeedrRegister:\n      \
    \  return self._ospeedr\n\n    @ospeedr.setter\n    def ospeedr(self, value: int)\
    \ -> None:\n        self._ospeedr.value = value\n\n    @property\n    def pupdr(self)\
    \ -> PupdrRegister:\n        return self._pupdr\n\n    @pupdr.setter\n    def\
    \ pupdr(self, value: int) -> None:\n        self._pupdr.value = value\n\n    @property\n\
    \    def idr(self) -> IdrRegister:\n        return self._idr\n\n    @idr.setter\n\
    \    def idr(self, value: int) -> None:\n        self._idr.value = value\n\n \
    \   @property\n    def odr(self) -> OdrRegister:\n        return self._odr\n\n\
    \    @odr.setter\n    def odr(self, value: int) -> None:\n        self._odr.value\
    \ = value\n\n    @property\n    def bsrr(self) -> BsrrRegister:\n        return\
    \ self._bsrr\n\n    @bsrr.setter\n    def bsrr(self, value: int) -> None:\n  \
    \      self._bsrr.value = value\n\n    @property\n    def lckr(self) -> LckrRegister:\n\
    \        return self._lckr\n\n    @lckr.setter\n    def lckr(self, value: int)\
    \ -> None:\n        self._lckr.value = value\n\n    @property\n    def afrl(self)\
    \ -> AfrlRegister:\n        return self._afrl\n\n    @afrl.setter\n    def afrl(self,\
    \ value: int) -> None:\n        self._afrl.value = value\n\n    @property\n  \
    \  def afrh(self) -> AfrhRegister:\n        return self._afrh\n\n    @afrh.setter\n\
    \    def afrh(self, value: int) -> None:\n        self._afrh.value = value\n"
  name: GPIOH
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ModerRegister(Register):\n    \"\"\"\n    MODER\n\n    GPIO\
    \ port mode register\n    \"\"\"\n\n    def __init__(self):\n        self._moder15\
    \ = Field(\"moder15\", 30, 2)\n        self._moder14 = Field(\"moder14\", 28,\
    \ 2)\n        self._moder13 = Field(\"moder13\", 26, 2)\n        self._moder12\
    \ = Field(\"moder12\", 24, 2)\n        self._moder11 = Field(\"moder11\", 22,\
    \ 2)\n        self._moder10 = Field(\"moder10\", 20, 2)\n        self._moder9\
    \ = Field(\"moder9\", 18, 2)\n        self._moder8 = Field(\"moder8\", 16, 2)\n\
    \        self._moder7 = Field(\"moder7\", 14, 2)\n        self._moder6 = Field(\"\
    moder6\", 12, 2)\n        self._moder5 = Field(\"moder5\", 10, 2)\n        self._moder4\
    \ = Field(\"moder4\", 8, 2)\n        self._moder3 = Field(\"moder3\", 6, 2)\n\
    \        self._moder2 = Field(\"moder2\", 4, 2)\n        self._moder1 = Field(\"\
    moder1\", 2, 2)\n        self._moder0 = Field(\"moder0\", 0, 2)\n        super().__init__(\"\
    MODER\", 0x40021000 + 0x0)\n\n    @property\n    def moder15(self) -> Field:\n\
    \        \"\"\"\n        MODER15\n\n        Port x configuration bits (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._moder15\n\n   \
    \ @moder15.setter\n    def moder15(self, value: int) -> None:\n        self._moder15.value\
    \ = value\n\n    @property\n    def moder14(self) -> Field:\n        \"\"\"\n\
    \        MODER14\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder14\n\n    @moder14.setter\n\
    \    def moder14(self, value: int) -> None:\n        self._moder14.value = value\n\
    \n    @property\n    def moder13(self) -> Field:\n        \"\"\"\n        MODER13\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder13\n\n    @moder13.setter\n    def moder13(self,\
    \ value: int) -> None:\n        self._moder13.value = value\n\n    @property\n\
    \    def moder12(self) -> Field:\n        \"\"\"\n        MODER12\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder12\n\n    @moder12.setter\n    def moder12(self, value: int)\
    \ -> None:\n        self._moder12.value = value\n\n    @property\n    def moder11(self)\
    \ -> Field:\n        \"\"\"\n        MODER11\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder11\n\
    \n    @moder11.setter\n    def moder11(self, value: int) -> None:\n        self._moder11.value\
    \ = value\n\n    @property\n    def moder10(self) -> Field:\n        \"\"\"\n\
    \        MODER10\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder10\n\n    @moder10.setter\n\
    \    def moder10(self, value: int) -> None:\n        self._moder10.value = value\n\
    \n    @property\n    def moder9(self) -> Field:\n        \"\"\"\n        MODER9\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder9\n\n    @moder9.setter\n    def moder9(self,\
    \ value: int) -> None:\n        self._moder9.value = value\n\n    @property\n\
    \    def moder8(self) -> Field:\n        \"\"\"\n        MODER8\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder8\n\n    @moder8.setter\n    def moder8(self, value: int)\
    \ -> None:\n        self._moder8.value = value\n\n    @property\n    def moder7(self)\
    \ -> Field:\n        \"\"\"\n        MODER7\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder7\n\
    \n    @moder7.setter\n    def moder7(self, value: int) -> None:\n        self._moder7.value\
    \ = value\n\n    @property\n    def moder6(self) -> Field:\n        \"\"\"\n \
    \       MODER6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder6\n\n    @moder6.setter\n    def moder6(self,\
    \ value: int) -> None:\n        self._moder6.value = value\n\n    @property\n\
    \    def moder5(self) -> Field:\n        \"\"\"\n        MODER5\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder5\n\n    @moder5.setter\n    def moder5(self, value: int)\
    \ -> None:\n        self._moder5.value = value\n\n    @property\n    def moder4(self)\
    \ -> Field:\n        \"\"\"\n        MODER4\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder4\n\
    \n    @moder4.setter\n    def moder4(self, value: int) -> None:\n        self._moder4.value\
    \ = value\n\n    @property\n    def moder3(self) -> Field:\n        \"\"\"\n \
    \       MODER3\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder3\n\n    @moder3.setter\n    def moder3(self,\
    \ value: int) -> None:\n        self._moder3.value = value\n\n    @property\n\
    \    def moder2(self) -> Field:\n        \"\"\"\n        MODER2\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder2\n\n    @moder2.setter\n    def moder2(self, value: int)\
    \ -> None:\n        self._moder2.value = value\n\n    @property\n    def moder1(self)\
    \ -> Field:\n        \"\"\"\n        MODER1\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder1\n\
    \n    @moder1.setter\n    def moder1(self, value: int) -> None:\n        self._moder1.value\
    \ = value\n\n    @property\n    def moder0(self) -> Field:\n        \"\"\"\n \
    \       MODER0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder0\n\n    @moder0.setter\n    def moder0(self,\
    \ value: int) -> None:\n        self._moder0.value = value\n\n\nclass OtyperRegister(Register):\n\
    \    \"\"\"\n    OTYPER\n\n    GPIO port output type register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._ot15 = Field(\"ot15\", 15, 1)\n      \
    \  self._ot14 = Field(\"ot14\", 14, 1)\n        self._ot13 = Field(\"ot13\", 13,\
    \ 1)\n        self._ot12 = Field(\"ot12\", 12, 1)\n        self._ot11 = Field(\"\
    ot11\", 11, 1)\n        self._ot10 = Field(\"ot10\", 10, 1)\n        self._ot9\
    \ = Field(\"ot9\", 9, 1)\n        self._ot8 = Field(\"ot8\", 8, 1)\n        self._ot7\
    \ = Field(\"ot7\", 7, 1)\n        self._ot6 = Field(\"ot6\", 6, 1)\n        self._ot5\
    \ = Field(\"ot5\", 5, 1)\n        self._ot4 = Field(\"ot4\", 4, 1)\n        self._ot3\
    \ = Field(\"ot3\", 3, 1)\n        self._ot2 = Field(\"ot2\", 2, 1)\n        self._ot1\
    \ = Field(\"ot1\", 1, 1)\n        self._ot0 = Field(\"ot0\", 0, 1)\n        super().__init__(\"\
    OTYPER\", 0x40021000 + 0x4)\n\n    @property\n    def ot15(self) -> Field:\n \
    \       \"\"\"\n        OT15\n\n        Port x configuration bits (y =\n     \
    \             0..15)\n        \"\"\"\n        return self._ot15\n\n    @ot15.setter\n\
    \    def ot15(self, value: int) -> None:\n        self._ot15.value = value\n\n\
    \    @property\n    def ot14(self) -> Field:\n        \"\"\"\n        OT14\n\n\
    \        Port x configuration bits (y =\n                  0..15)\n        \"\"\
    \"\n        return self._ot14\n\n    @ot14.setter\n    def ot14(self, value: int)\
    \ -> None:\n        self._ot14.value = value\n\n    @property\n    def ot13(self)\
    \ -> Field:\n        \"\"\"\n        OT13\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._ot13\n\n\
    \    @ot13.setter\n    def ot13(self, value: int) -> None:\n        self._ot13.value\
    \ = value\n\n    @property\n    def ot12(self) -> Field:\n        \"\"\"\n   \
    \     OT12\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot12\n\n    @ot12.setter\n    def ot12(self,\
    \ value: int) -> None:\n        self._ot12.value = value\n\n    @property\n  \
    \  def ot11(self) -> Field:\n        \"\"\"\n        OT11\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot11\n\
    \n    @ot11.setter\n    def ot11(self, value: int) -> None:\n        self._ot11.value\
    \ = value\n\n    @property\n    def ot10(self) -> Field:\n        \"\"\"\n   \
    \     OT10\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot10\n\n    @ot10.setter\n    def ot10(self,\
    \ value: int) -> None:\n        self._ot10.value = value\n\n    @property\n  \
    \  def ot9(self) -> Field:\n        \"\"\"\n        OT9\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot9\n\
    \n    @ot9.setter\n    def ot9(self, value: int) -> None:\n        self._ot9.value\
    \ = value\n\n    @property\n    def ot8(self) -> Field:\n        \"\"\"\n    \
    \    OT8\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot8\n\n    @ot8.setter\n    def ot8(self,\
    \ value: int) -> None:\n        self._ot8.value = value\n\n    @property\n   \
    \ def ot7(self) -> Field:\n        \"\"\"\n        OT7\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot7\n\
    \n    @ot7.setter\n    def ot7(self, value: int) -> None:\n        self._ot7.value\
    \ = value\n\n    @property\n    def ot6(self) -> Field:\n        \"\"\"\n    \
    \    OT6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot6\n\n    @ot6.setter\n    def ot6(self,\
    \ value: int) -> None:\n        self._ot6.value = value\n\n    @property\n   \
    \ def ot5(self) -> Field:\n        \"\"\"\n        OT5\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot5\n\
    \n    @ot5.setter\n    def ot5(self, value: int) -> None:\n        self._ot5.value\
    \ = value\n\n    @property\n    def ot4(self) -> Field:\n        \"\"\"\n    \
    \    OT4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot4\n\n    @ot4.setter\n    def ot4(self,\
    \ value: int) -> None:\n        self._ot4.value = value\n\n    @property\n   \
    \ def ot3(self) -> Field:\n        \"\"\"\n        OT3\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot3\n\
    \n    @ot3.setter\n    def ot3(self, value: int) -> None:\n        self._ot3.value\
    \ = value\n\n    @property\n    def ot2(self) -> Field:\n        \"\"\"\n    \
    \    OT2\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot2\n\n    @ot2.setter\n    def ot2(self,\
    \ value: int) -> None:\n        self._ot2.value = value\n\n    @property\n   \
    \ def ot1(self) -> Field:\n        \"\"\"\n        OT1\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot1\n\
    \n    @ot1.setter\n    def ot1(self, value: int) -> None:\n        self._ot1.value\
    \ = value\n\n    @property\n    def ot0(self) -> Field:\n        \"\"\"\n    \
    \    OT0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot0\n\n    @ot0.setter\n    def ot0(self,\
    \ value: int) -> None:\n        self._ot0.value = value\n\n\nclass OspeedrRegister(Register):\n\
    \    \"\"\"\n    OSPEEDR\n\n    GPIO port output speed\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ospeedr15 = Field(\"ospeedr15\"\
    , 30, 2)\n        self._ospeedr14 = Field(\"ospeedr14\", 28, 2)\n        self._ospeedr13\
    \ = Field(\"ospeedr13\", 26, 2)\n        self._ospeedr12 = Field(\"ospeedr12\"\
    , 24, 2)\n        self._ospeedr11 = Field(\"ospeedr11\", 22, 2)\n        self._ospeedr10\
    \ = Field(\"ospeedr10\", 20, 2)\n        self._ospeedr9 = Field(\"ospeedr9\",\
    \ 18, 2)\n        self._ospeedr8 = Field(\"ospeedr8\", 16, 2)\n        self._ospeedr7\
    \ = Field(\"ospeedr7\", 14, 2)\n        self._ospeedr6 = Field(\"ospeedr6\", 12,\
    \ 2)\n        self._ospeedr5 = Field(\"ospeedr5\", 10, 2)\n        self._ospeedr4\
    \ = Field(\"ospeedr4\", 8, 2)\n        self._ospeedr3 = Field(\"ospeedr3\", 6,\
    \ 2)\n        self._ospeedr2 = Field(\"ospeedr2\", 4, 2)\n        self._ospeedr1\
    \ = Field(\"ospeedr1\", 2, 2)\n        self._ospeedr0 = Field(\"ospeedr0\", 0,\
    \ 2)\n        super().__init__(\"OSPEEDR\", 0x40021000 + 0x8)\n\n    @property\n\
    \    def ospeedr15(self) -> Field:\n        \"\"\"\n        OSPEEDR15\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr15\n\n    @ospeedr15.setter\n    def ospeedr15(self,\
    \ value: int) -> None:\n        self._ospeedr15.value = value\n\n    @property\n\
    \    def ospeedr14(self) -> Field:\n        \"\"\"\n        OSPEEDR14\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr14\n\n    @ospeedr14.setter\n    def ospeedr14(self,\
    \ value: int) -> None:\n        self._ospeedr14.value = value\n\n    @property\n\
    \    def ospeedr13(self) -> Field:\n        \"\"\"\n        OSPEEDR13\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr13\n\n    @ospeedr13.setter\n    def ospeedr13(self,\
    \ value: int) -> None:\n        self._ospeedr13.value = value\n\n    @property\n\
    \    def ospeedr12(self) -> Field:\n        \"\"\"\n        OSPEEDR12\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr12\n\n    @ospeedr12.setter\n    def ospeedr12(self,\
    \ value: int) -> None:\n        self._ospeedr12.value = value\n\n    @property\n\
    \    def ospeedr11(self) -> Field:\n        \"\"\"\n        OSPEEDR11\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr11\n\n    @ospeedr11.setter\n    def ospeedr11(self,\
    \ value: int) -> None:\n        self._ospeedr11.value = value\n\n    @property\n\
    \    def ospeedr10(self) -> Field:\n        \"\"\"\n        OSPEEDR10\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr10\n\n    @ospeedr10.setter\n    def ospeedr10(self,\
    \ value: int) -> None:\n        self._ospeedr10.value = value\n\n    @property\n\
    \    def ospeedr9(self) -> Field:\n        \"\"\"\n        OSPEEDR9\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr9\n\n    @ospeedr9.setter\n    def ospeedr9(self,\
    \ value: int) -> None:\n        self._ospeedr9.value = value\n\n    @property\n\
    \    def ospeedr8(self) -> Field:\n        \"\"\"\n        OSPEEDR8\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr8\n\n    @ospeedr8.setter\n    def ospeedr8(self,\
    \ value: int) -> None:\n        self._ospeedr8.value = value\n\n    @property\n\
    \    def ospeedr7(self) -> Field:\n        \"\"\"\n        OSPEEDR7\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr7\n\n    @ospeedr7.setter\n    def ospeedr7(self,\
    \ value: int) -> None:\n        self._ospeedr7.value = value\n\n    @property\n\
    \    def ospeedr6(self) -> Field:\n        \"\"\"\n        OSPEEDR6\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr6\n\n    @ospeedr6.setter\n    def ospeedr6(self,\
    \ value: int) -> None:\n        self._ospeedr6.value = value\n\n    @property\n\
    \    def ospeedr5(self) -> Field:\n        \"\"\"\n        OSPEEDR5\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr5\n\n    @ospeedr5.setter\n    def ospeedr5(self,\
    \ value: int) -> None:\n        self._ospeedr5.value = value\n\n    @property\n\
    \    def ospeedr4(self) -> Field:\n        \"\"\"\n        OSPEEDR4\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr4\n\n    @ospeedr4.setter\n    def ospeedr4(self,\
    \ value: int) -> None:\n        self._ospeedr4.value = value\n\n    @property\n\
    \    def ospeedr3(self) -> Field:\n        \"\"\"\n        OSPEEDR3\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr3\n\n    @ospeedr3.setter\n    def ospeedr3(self,\
    \ value: int) -> None:\n        self._ospeedr3.value = value\n\n    @property\n\
    \    def ospeedr2(self) -> Field:\n        \"\"\"\n        OSPEEDR2\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr2\n\n    @ospeedr2.setter\n    def ospeedr2(self,\
    \ value: int) -> None:\n        self._ospeedr2.value = value\n\n    @property\n\
    \    def ospeedr1(self) -> Field:\n        \"\"\"\n        OSPEEDR1\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr1\n\n    @ospeedr1.setter\n    def ospeedr1(self,\
    \ value: int) -> None:\n        self._ospeedr1.value = value\n\n    @property\n\
    \    def ospeedr0(self) -> Field:\n        \"\"\"\n        OSPEEDR0\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr0\n\n    @ospeedr0.setter\n    def ospeedr0(self,\
    \ value: int) -> None:\n        self._ospeedr0.value = value\n\n\nclass PupdrRegister(Register):\n\
    \    \"\"\"\n    PUPDR\n\n    GPIO port pull-up/pull-down\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pupdr15 = Field(\"pupdr15\"\
    , 30, 2)\n        self._pupdr14 = Field(\"pupdr14\", 28, 2)\n        self._pupdr13\
    \ = Field(\"pupdr13\", 26, 2)\n        self._pupdr12 = Field(\"pupdr12\", 24,\
    \ 2)\n        self._pupdr11 = Field(\"pupdr11\", 22, 2)\n        self._pupdr10\
    \ = Field(\"pupdr10\", 20, 2)\n        self._pupdr9 = Field(\"pupdr9\", 18, 2)\n\
    \        self._pupdr8 = Field(\"pupdr8\", 16, 2)\n        self._pupdr7 = Field(\"\
    pupdr7\", 14, 2)\n        self._pupdr6 = Field(\"pupdr6\", 12, 2)\n        self._pupdr5\
    \ = Field(\"pupdr5\", 10, 2)\n        self._pupdr4 = Field(\"pupdr4\", 8, 2)\n\
    \        self._pupdr3 = Field(\"pupdr3\", 6, 2)\n        self._pupdr2 = Field(\"\
    pupdr2\", 4, 2)\n        self._pupdr1 = Field(\"pupdr1\", 2, 2)\n        self._pupdr0\
    \ = Field(\"pupdr0\", 0, 2)\n        super().__init__(\"PUPDR\", 0x40021000 +\
    \ 0xC)\n\n    @property\n    def pupdr15(self) -> Field:\n        \"\"\"\n   \
    \     PUPDR15\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr15\n\n    @pupdr15.setter\n    def\
    \ pupdr15(self, value: int) -> None:\n        self._pupdr15.value = value\n\n\
    \    @property\n    def pupdr14(self) -> Field:\n        \"\"\"\n        PUPDR14\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr14\n\n    @pupdr14.setter\n    def pupdr14(self,\
    \ value: int) -> None:\n        self._pupdr14.value = value\n\n    @property\n\
    \    def pupdr13(self) -> Field:\n        \"\"\"\n        PUPDR13\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr13\n\n    @pupdr13.setter\n    def pupdr13(self, value: int)\
    \ -> None:\n        self._pupdr13.value = value\n\n    @property\n    def pupdr12(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR12\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr12\n\
    \n    @pupdr12.setter\n    def pupdr12(self, value: int) -> None:\n        self._pupdr12.value\
    \ = value\n\n    @property\n    def pupdr11(self) -> Field:\n        \"\"\"\n\
    \        PUPDR11\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._pupdr11\n\n    @pupdr11.setter\n\
    \    def pupdr11(self, value: int) -> None:\n        self._pupdr11.value = value\n\
    \n    @property\n    def pupdr10(self) -> Field:\n        \"\"\"\n        PUPDR10\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr10\n\n    @pupdr10.setter\n    def pupdr10(self,\
    \ value: int) -> None:\n        self._pupdr10.value = value\n\n    @property\n\
    \    def pupdr9(self) -> Field:\n        \"\"\"\n        PUPDR9\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr9\n\n    @pupdr9.setter\n    def pupdr9(self, value: int)\
    \ -> None:\n        self._pupdr9.value = value\n\n    @property\n    def pupdr8(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR8\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr8\n\
    \n    @pupdr8.setter\n    def pupdr8(self, value: int) -> None:\n        self._pupdr8.value\
    \ = value\n\n    @property\n    def pupdr7(self) -> Field:\n        \"\"\"\n \
    \       PUPDR7\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr7\n\n    @pupdr7.setter\n    def pupdr7(self,\
    \ value: int) -> None:\n        self._pupdr7.value = value\n\n    @property\n\
    \    def pupdr6(self) -> Field:\n        \"\"\"\n        PUPDR6\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr6\n\n    @pupdr6.setter\n    def pupdr6(self, value: int)\
    \ -> None:\n        self._pupdr6.value = value\n\n    @property\n    def pupdr5(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR5\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr5\n\
    \n    @pupdr5.setter\n    def pupdr5(self, value: int) -> None:\n        self._pupdr5.value\
    \ = value\n\n    @property\n    def pupdr4(self) -> Field:\n        \"\"\"\n \
    \       PUPDR4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr4\n\n    @pupdr4.setter\n    def pupdr4(self,\
    \ value: int) -> None:\n        self._pupdr4.value = value\n\n    @property\n\
    \    def pupdr3(self) -> Field:\n        \"\"\"\n        PUPDR3\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr3\n\n    @pupdr3.setter\n    def pupdr3(self, value: int)\
    \ -> None:\n        self._pupdr3.value = value\n\n    @property\n    def pupdr2(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR2\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr2\n\
    \n    @pupdr2.setter\n    def pupdr2(self, value: int) -> None:\n        self._pupdr2.value\
    \ = value\n\n    @property\n    def pupdr1(self) -> Field:\n        \"\"\"\n \
    \       PUPDR1\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr1\n\n    @pupdr1.setter\n    def pupdr1(self,\
    \ value: int) -> None:\n        self._pupdr1.value = value\n\n    @property\n\
    \    def pupdr0(self) -> Field:\n        \"\"\"\n        PUPDR0\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr0\n\n    @pupdr0.setter\n    def pupdr0(self, value: int)\
    \ -> None:\n        self._pupdr0.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    GPIO port input data register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._idr15 = Field(\"idr15\", 15, 1)\n        self._idr14\
    \ = Field(\"idr14\", 14, 1)\n        self._idr13 = Field(\"idr13\", 13, 1)\n \
    \       self._idr12 = Field(\"idr12\", 12, 1)\n        self._idr11 = Field(\"\
    idr11\", 11, 1)\n        self._idr10 = Field(\"idr10\", 10, 1)\n        self._idr9\
    \ = Field(\"idr9\", 9, 1)\n        self._idr8 = Field(\"idr8\", 8, 1)\n      \
    \  self._idr7 = Field(\"idr7\", 7, 1)\n        self._idr6 = Field(\"idr6\", 6,\
    \ 1)\n        self._idr5 = Field(\"idr5\", 5, 1)\n        self._idr4 = Field(\"\
    idr4\", 4, 1)\n        self._idr3 = Field(\"idr3\", 3, 1)\n        self._idr2\
    \ = Field(\"idr2\", 2, 1)\n        self._idr1 = Field(\"idr1\", 1, 1)\n      \
    \  self._idr0 = Field(\"idr0\", 0, 1)\n        super().__init__(\"IDR\", 0x40021000\
    \ + 0x10)\n\n    @property\n    def idr15(self) -> Field:\n        \"\"\"\n  \
    \      IDR15\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr15\n\n    @idr15.setter\n    def idr15(self,\
    \ value: int) -> None:\n        self._idr15.value = value\n\n    @property\n \
    \   def idr14(self) -> Field:\n        \"\"\"\n        IDR14\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr14\n\
    \n    @idr14.setter\n    def idr14(self, value: int) -> None:\n        self._idr14.value\
    \ = value\n\n    @property\n    def idr13(self) -> Field:\n        \"\"\"\n  \
    \      IDR13\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr13\n\n    @idr13.setter\n    def idr13(self,\
    \ value: int) -> None:\n        self._idr13.value = value\n\n    @property\n \
    \   def idr12(self) -> Field:\n        \"\"\"\n        IDR12\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr12\n\
    \n    @idr12.setter\n    def idr12(self, value: int) -> None:\n        self._idr12.value\
    \ = value\n\n    @property\n    def idr11(self) -> Field:\n        \"\"\"\n  \
    \      IDR11\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr11\n\n    @idr11.setter\n    def idr11(self,\
    \ value: int) -> None:\n        self._idr11.value = value\n\n    @property\n \
    \   def idr10(self) -> Field:\n        \"\"\"\n        IDR10\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr10\n\
    \n    @idr10.setter\n    def idr10(self, value: int) -> None:\n        self._idr10.value\
    \ = value\n\n    @property\n    def idr9(self) -> Field:\n        \"\"\"\n   \
    \     IDR9\n\n        Port input data (y =\n                  0..15)\n       \
    \ \"\"\"\n        return self._idr9\n\n    @idr9.setter\n    def idr9(self, value:\
    \ int) -> None:\n        self._idr9.value = value\n\n    @property\n    def idr8(self)\
    \ -> Field:\n        \"\"\"\n        IDR8\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr8\n\n    @idr8.setter\n\
    \    def idr8(self, value: int) -> None:\n        self._idr8.value = value\n\n\
    \    @property\n    def idr7(self) -> Field:\n        \"\"\"\n        IDR7\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr7\n\n    @idr7.setter\n    def idr7(self, value: int) ->\
    \ None:\n        self._idr7.value = value\n\n    @property\n    def idr6(self)\
    \ -> Field:\n        \"\"\"\n        IDR6\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr6\n\n    @idr6.setter\n\
    \    def idr6(self, value: int) -> None:\n        self._idr6.value = value\n\n\
    \    @property\n    def idr5(self) -> Field:\n        \"\"\"\n        IDR5\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr5\n\n    @idr5.setter\n    def idr5(self, value: int) ->\
    \ None:\n        self._idr5.value = value\n\n    @property\n    def idr4(self)\
    \ -> Field:\n        \"\"\"\n        IDR4\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr4\n\n    @idr4.setter\n\
    \    def idr4(self, value: int) -> None:\n        self._idr4.value = value\n\n\
    \    @property\n    def idr3(self) -> Field:\n        \"\"\"\n        IDR3\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr3\n\n    @idr3.setter\n    def idr3(self, value: int) ->\
    \ None:\n        self._idr3.value = value\n\n    @property\n    def idr2(self)\
    \ -> Field:\n        \"\"\"\n        IDR2\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr2\n\n    @idr2.setter\n\
    \    def idr2(self, value: int) -> None:\n        self._idr2.value = value\n\n\
    \    @property\n    def idr1(self) -> Field:\n        \"\"\"\n        IDR1\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr1\n\n    @idr1.setter\n    def idr1(self, value: int) ->\
    \ None:\n        self._idr1.value = value\n\n    @property\n    def idr0(self)\
    \ -> Field:\n        \"\"\"\n        IDR0\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr0\n\n    @idr0.setter\n\
    \    def idr0(self, value: int) -> None:\n        self._idr0.value = value\n\n\
    \nclass OdrRegister(Register):\n    \"\"\"\n    ODR\n\n    GPIO port output data\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._odr15 = Field(\"\
    odr15\", 15, 1)\n        self._odr14 = Field(\"odr14\", 14, 1)\n        self._odr13\
    \ = Field(\"odr13\", 13, 1)\n        self._odr12 = Field(\"odr12\", 12, 1)\n \
    \       self._odr11 = Field(\"odr11\", 11, 1)\n        self._odr10 = Field(\"\
    odr10\", 10, 1)\n        self._odr9 = Field(\"odr9\", 9, 1)\n        self._odr8\
    \ = Field(\"odr8\", 8, 1)\n        self._odr7 = Field(\"odr7\", 7, 1)\n      \
    \  self._odr6 = Field(\"odr6\", 6, 1)\n        self._odr5 = Field(\"odr5\", 5,\
    \ 1)\n        self._odr4 = Field(\"odr4\", 4, 1)\n        self._odr3 = Field(\"\
    odr3\", 3, 1)\n        self._odr2 = Field(\"odr2\", 2, 1)\n        self._odr1\
    \ = Field(\"odr1\", 1, 1)\n        self._odr0 = Field(\"odr0\", 0, 1)\n      \
    \  super().__init__(\"ODR\", 0x40021000 + 0x14)\n\n    @property\n    def odr15(self)\
    \ -> Field:\n        \"\"\"\n        ODR15\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr15\n\n    @odr15.setter\n\
    \    def odr15(self, value: int) -> None:\n        self._odr15.value = value\n\
    \n    @property\n    def odr14(self) -> Field:\n        \"\"\"\n        ODR14\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr14\n\n    @odr14.setter\n    def odr14(self, value: int)\
    \ -> None:\n        self._odr14.value = value\n\n    @property\n    def odr13(self)\
    \ -> Field:\n        \"\"\"\n        ODR13\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr13\n\n    @odr13.setter\n\
    \    def odr13(self, value: int) -> None:\n        self._odr13.value = value\n\
    \n    @property\n    def odr12(self) -> Field:\n        \"\"\"\n        ODR12\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr12\n\n    @odr12.setter\n    def odr12(self, value: int)\
    \ -> None:\n        self._odr12.value = value\n\n    @property\n    def odr11(self)\
    \ -> Field:\n        \"\"\"\n        ODR11\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr11\n\n    @odr11.setter\n\
    \    def odr11(self, value: int) -> None:\n        self._odr11.value = value\n\
    \n    @property\n    def odr10(self) -> Field:\n        \"\"\"\n        ODR10\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr10\n\n    @odr10.setter\n    def odr10(self, value: int)\
    \ -> None:\n        self._odr10.value = value\n\n    @property\n    def odr9(self)\
    \ -> Field:\n        \"\"\"\n        ODR9\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr9\n\n    @odr9.setter\n\
    \    def odr9(self, value: int) -> None:\n        self._odr9.value = value\n\n\
    \    @property\n    def odr8(self) -> Field:\n        \"\"\"\n        ODR8\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr8\n\n    @odr8.setter\n    def odr8(self, value: int) ->\
    \ None:\n        self._odr8.value = value\n\n    @property\n    def odr7(self)\
    \ -> Field:\n        \"\"\"\n        ODR7\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr7\n\n    @odr7.setter\n\
    \    def odr7(self, value: int) -> None:\n        self._odr7.value = value\n\n\
    \    @property\n    def odr6(self) -> Field:\n        \"\"\"\n        ODR6\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr6\n\n    @odr6.setter\n    def odr6(self, value: int) ->\
    \ None:\n        self._odr6.value = value\n\n    @property\n    def odr5(self)\
    \ -> Field:\n        \"\"\"\n        ODR5\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr5\n\n    @odr5.setter\n\
    \    def odr5(self, value: int) -> None:\n        self._odr5.value = value\n\n\
    \    @property\n    def odr4(self) -> Field:\n        \"\"\"\n        ODR4\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr4\n\n    @odr4.setter\n    def odr4(self, value: int) ->\
    \ None:\n        self._odr4.value = value\n\n    @property\n    def odr3(self)\
    \ -> Field:\n        \"\"\"\n        ODR3\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr3\n\n    @odr3.setter\n\
    \    def odr3(self, value: int) -> None:\n        self._odr3.value = value\n\n\
    \    @property\n    def odr2(self) -> Field:\n        \"\"\"\n        ODR2\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr2\n\n    @odr2.setter\n    def odr2(self, value: int) ->\
    \ None:\n        self._odr2.value = value\n\n    @property\n    def odr1(self)\
    \ -> Field:\n        \"\"\"\n        ODR1\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr1\n\n    @odr1.setter\n\
    \    def odr1(self, value: int) -> None:\n        self._odr1.value = value\n\n\
    \    @property\n    def odr0(self) -> Field:\n        \"\"\"\n        ODR0\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr0\n\n    @odr0.setter\n    def odr0(self, value: int) ->\
    \ None:\n        self._odr0.value = value\n\n\nclass BsrrRegister(Register):\n\
    \    \"\"\"\n    BSRR\n\n    GPIO port bit set/reset\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._br15 = Field(\"br15\", 31,\
    \ 1)\n        self._br14 = Field(\"br14\", 30, 1)\n        self._br13 = Field(\"\
    br13\", 29, 1)\n        self._br12 = Field(\"br12\", 28, 1)\n        self._br11\
    \ = Field(\"br11\", 27, 1)\n        self._br10 = Field(\"br10\", 26, 1)\n    \
    \    self._br9 = Field(\"br9\", 25, 1)\n        self._br8 = Field(\"br8\", 24,\
    \ 1)\n        self._br7 = Field(\"br7\", 23, 1)\n        self._br6 = Field(\"\
    br6\", 22, 1)\n        self._br5 = Field(\"br5\", 21, 1)\n        self._br4 =\
    \ Field(\"br4\", 20, 1)\n        self._br3 = Field(\"br3\", 19, 1)\n        self._br2\
    \ = Field(\"br2\", 18, 1)\n        self._br1 = Field(\"br1\", 17, 1)\n       \
    \ self._br0 = Field(\"br0\", 16, 1)\n        self._bs15 = Field(\"bs15\", 15,\
    \ 1)\n        self._bs14 = Field(\"bs14\", 14, 1)\n        self._bs13 = Field(\"\
    bs13\", 13, 1)\n        self._bs12 = Field(\"bs12\", 12, 1)\n        self._bs11\
    \ = Field(\"bs11\", 11, 1)\n        self._bs10 = Field(\"bs10\", 10, 1)\n    \
    \    self._bs9 = Field(\"bs9\", 9, 1)\n        self._bs8 = Field(\"bs8\", 8, 1)\n\
    \        self._bs7 = Field(\"bs7\", 7, 1)\n        self._bs6 = Field(\"bs6\",\
    \ 6, 1)\n        self._bs5 = Field(\"bs5\", 5, 1)\n        self._bs4 = Field(\"\
    bs4\", 4, 1)\n        self._bs3 = Field(\"bs3\", 3, 1)\n        self._bs2 = Field(\"\
    bs2\", 2, 1)\n        self._bs1 = Field(\"bs1\", 1, 1)\n        self._bs0 = Field(\"\
    bs0\", 0, 1)\n        super().__init__(\"BSRR\", 0x40021000 + 0x18)\n\n    @property\n\
    \    def br15(self) -> Field:\n        \"\"\"\n        BR15\n\n        Port x\
    \ reset bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br15\n\
    \n    @br15.setter\n    def br15(self, value: int) -> None:\n        self._br15.value\
    \ = value\n\n    @property\n    def br14(self) -> Field:\n        \"\"\"\n   \
    \     BR14\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br14\n\n    @br14.setter\n    def br14(self,\
    \ value: int) -> None:\n        self._br14.value = value\n\n    @property\n  \
    \  def br13(self) -> Field:\n        \"\"\"\n        BR13\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br13\n\
    \n    @br13.setter\n    def br13(self, value: int) -> None:\n        self._br13.value\
    \ = value\n\n    @property\n    def br12(self) -> Field:\n        \"\"\"\n   \
    \     BR12\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br12\n\n    @br12.setter\n    def br12(self,\
    \ value: int) -> None:\n        self._br12.value = value\n\n    @property\n  \
    \  def br11(self) -> Field:\n        \"\"\"\n        BR11\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br11\n\
    \n    @br11.setter\n    def br11(self, value: int) -> None:\n        self._br11.value\
    \ = value\n\n    @property\n    def br10(self) -> Field:\n        \"\"\"\n   \
    \     BR10\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br10\n\n    @br10.setter\n    def br10(self,\
    \ value: int) -> None:\n        self._br10.value = value\n\n    @property\n  \
    \  def br9(self) -> Field:\n        \"\"\"\n        BR9\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br9\n\
    \n    @br9.setter\n    def br9(self, value: int) -> None:\n        self._br9.value\
    \ = value\n\n    @property\n    def br8(self) -> Field:\n        \"\"\"\n    \
    \    BR8\n\n        Port x reset bit y (y =\n                  0..15)\n      \
    \  \"\"\"\n        return self._br8\n\n    @br8.setter\n    def br8(self, value:\
    \ int) -> None:\n        self._br8.value = value\n\n    @property\n    def br7(self)\
    \ -> Field:\n        \"\"\"\n        BR7\n\n        Port x reset bit y (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._br7\n\n    @br7.setter\n\
    \    def br7(self, value: int) -> None:\n        self._br7.value = value\n\n \
    \   @property\n    def br6(self) -> Field:\n        \"\"\"\n        BR6\n\n  \
    \      Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._br6\n\n    @br6.setter\n    def br6(self, value: int) -> None:\n\
    \        self._br6.value = value\n\n    @property\n    def br5(self) -> Field:\n\
    \        \"\"\"\n        BR5\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br5\n\n    @br5.setter\n \
    \   def br5(self, value: int) -> None:\n        self._br5.value = value\n\n  \
    \  @property\n    def br4(self) -> Field:\n        \"\"\"\n        BR4\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br4\n\n    @br4.setter\n    def br4(self, value: int) -> None:\n\
    \        self._br4.value = value\n\n    @property\n    def br3(self) -> Field:\n\
    \        \"\"\"\n        BR3\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br3\n\n    @br3.setter\n \
    \   def br3(self, value: int) -> None:\n        self._br3.value = value\n\n  \
    \  @property\n    def br2(self) -> Field:\n        \"\"\"\n        BR2\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br2\n\n    @br2.setter\n    def br2(self, value: int) -> None:\n\
    \        self._br2.value = value\n\n    @property\n    def br1(self) -> Field:\n\
    \        \"\"\"\n        BR1\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br1\n\n    @br1.setter\n \
    \   def br1(self, value: int) -> None:\n        self._br1.value = value\n\n  \
    \  @property\n    def br0(self) -> Field:\n        \"\"\"\n        BR0\n\n   \
    \     Port x set bit y (y=\n                  0..15)\n        \"\"\"\n       \
    \ return self._br0\n\n    @br0.setter\n    def br0(self, value: int) -> None:\n\
    \        self._br0.value = value\n\n    @property\n    def bs15(self) -> Field:\n\
    \        \"\"\"\n        BS15\n\n        Port x set bit y (y=\n              \
    \    0..15)\n        \"\"\"\n        return self._bs15\n\n    @bs15.setter\n \
    \   def bs15(self, value: int) -> None:\n        self._bs15.value = value\n\n\
    \    @property\n    def bs14(self) -> Field:\n        \"\"\"\n        BS14\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs14\n\n    @bs14.setter\n    def bs14(self, value: int) ->\
    \ None:\n        self._bs14.value = value\n\n    @property\n    def bs13(self)\
    \ -> Field:\n        \"\"\"\n        BS13\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs13\n\n    @bs13.setter\n\
    \    def bs13(self, value: int) -> None:\n        self._bs13.value = value\n\n\
    \    @property\n    def bs12(self) -> Field:\n        \"\"\"\n        BS12\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs12\n\n    @bs12.setter\n    def bs12(self, value: int) ->\
    \ None:\n        self._bs12.value = value\n\n    @property\n    def bs11(self)\
    \ -> Field:\n        \"\"\"\n        BS11\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs11\n\n    @bs11.setter\n\
    \    def bs11(self, value: int) -> None:\n        self._bs11.value = value\n\n\
    \    @property\n    def bs10(self) -> Field:\n        \"\"\"\n        BS10\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs10\n\n    @bs10.setter\n    def bs10(self, value: int) ->\
    \ None:\n        self._bs10.value = value\n\n    @property\n    def bs9(self)\
    \ -> Field:\n        \"\"\"\n        BS9\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs9\n\n    @bs9.setter\n\
    \    def bs9(self, value: int) -> None:\n        self._bs9.value = value\n\n \
    \   @property\n    def bs8(self) -> Field:\n        \"\"\"\n        BS8\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs8\n\n    @bs8.setter\n    def bs8(self, value: int) -> None:\n\
    \        self._bs8.value = value\n\n    @property\n    def bs7(self) -> Field:\n\
    \        \"\"\"\n        BS7\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs7\n\n    @bs7.setter\n    def\
    \ bs7(self, value: int) -> None:\n        self._bs7.value = value\n\n    @property\n\
    \    def bs6(self) -> Field:\n        \"\"\"\n        BS6\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs6\n\
    \n    @bs6.setter\n    def bs6(self, value: int) -> None:\n        self._bs6.value\
    \ = value\n\n    @property\n    def bs5(self) -> Field:\n        \"\"\"\n    \
    \    BS5\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs5\n\n    @bs5.setter\n    def bs5(self, value: int)\
    \ -> None:\n        self._bs5.value = value\n\n    @property\n    def bs4(self)\
    \ -> Field:\n        \"\"\"\n        BS4\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs4\n\n    @bs4.setter\n\
    \    def bs4(self, value: int) -> None:\n        self._bs4.value = value\n\n \
    \   @property\n    def bs3(self) -> Field:\n        \"\"\"\n        BS3\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs3\n\n    @bs3.setter\n    def bs3(self, value: int) -> None:\n\
    \        self._bs3.value = value\n\n    @property\n    def bs2(self) -> Field:\n\
    \        \"\"\"\n        BS2\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs2\n\n    @bs2.setter\n    def\
    \ bs2(self, value: int) -> None:\n        self._bs2.value = value\n\n    @property\n\
    \    def bs1(self) -> Field:\n        \"\"\"\n        BS1\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs1\n\
    \n    @bs1.setter\n    def bs1(self, value: int) -> None:\n        self._bs1.value\
    \ = value\n\n    @property\n    def bs0(self) -> Field:\n        \"\"\"\n    \
    \    BS0\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs0\n\n    @bs0.setter\n    def bs0(self, value: int)\
    \ -> None:\n        self._bs0.value = value\n\n\nclass LckrRegister(Register):\n\
    \    \"\"\"\n    LCKR\n\n    GPIO port configuration lock\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lckk = Field(\"lckk\", 16,\
    \ 1)\n        self._lck15 = Field(\"lck15\", 15, 1)\n        self._lck14 = Field(\"\
    lck14\", 14, 1)\n        self._lck13 = Field(\"lck13\", 13, 1)\n        self._lck12\
    \ = Field(\"lck12\", 12, 1)\n        self._lck11 = Field(\"lck11\", 11, 1)\n \
    \       self._lck10 = Field(\"lck10\", 10, 1)\n        self._lck9 = Field(\"lck9\"\
    , 9, 1)\n        self._lck8 = Field(\"lck8\", 8, 1)\n        self._lck7 = Field(\"\
    lck7\", 7, 1)\n        self._lck6 = Field(\"lck6\", 6, 1)\n        self._lck5\
    \ = Field(\"lck5\", 5, 1)\n        self._lck4 = Field(\"lck4\", 4, 1)\n      \
    \  self._lck3 = Field(\"lck3\", 3, 1)\n        self._lck2 = Field(\"lck2\", 2,\
    \ 1)\n        self._lck1 = Field(\"lck1\", 1, 1)\n        self._lck0 = Field(\"\
    lck0\", 0, 1)\n        super().__init__(\"LCKR\", 0x40021000 + 0x1C)\n\n    @property\n\
    \    def lckk(self) -> Field:\n        \"\"\"\n        LCKK\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lckk\n\
    \n    @lckk.setter\n    def lckk(self, value: int) -> None:\n        self._lckk.value\
    \ = value\n\n    @property\n    def lck15(self) -> Field:\n        \"\"\"\n  \
    \      LCK15\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck15\n\n    @lck15.setter\n    def lck15(self,\
    \ value: int) -> None:\n        self._lck15.value = value\n\n    @property\n \
    \   def lck14(self) -> Field:\n        \"\"\"\n        LCK14\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck14\n\
    \n    @lck14.setter\n    def lck14(self, value: int) -> None:\n        self._lck14.value\
    \ = value\n\n    @property\n    def lck13(self) -> Field:\n        \"\"\"\n  \
    \      LCK13\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck13\n\n    @lck13.setter\n    def lck13(self,\
    \ value: int) -> None:\n        self._lck13.value = value\n\n    @property\n \
    \   def lck12(self) -> Field:\n        \"\"\"\n        LCK12\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck12\n\
    \n    @lck12.setter\n    def lck12(self, value: int) -> None:\n        self._lck12.value\
    \ = value\n\n    @property\n    def lck11(self) -> Field:\n        \"\"\"\n  \
    \      LCK11\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck11\n\n    @lck11.setter\n    def lck11(self,\
    \ value: int) -> None:\n        self._lck11.value = value\n\n    @property\n \
    \   def lck10(self) -> Field:\n        \"\"\"\n        LCK10\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck10\n\
    \n    @lck10.setter\n    def lck10(self, value: int) -> None:\n        self._lck10.value\
    \ = value\n\n    @property\n    def lck9(self) -> Field:\n        \"\"\"\n   \
    \     LCK9\n\n        Port x lock bit y (y=\n                  0..15)\n      \
    \  \"\"\"\n        return self._lck9\n\n    @lck9.setter\n    def lck9(self, value:\
    \ int) -> None:\n        self._lck9.value = value\n\n    @property\n    def lck8(self)\
    \ -> Field:\n        \"\"\"\n        LCK8\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck8\n\n    @lck8.setter\n\
    \    def lck8(self, value: int) -> None:\n        self._lck8.value = value\n\n\
    \    @property\n    def lck7(self) -> Field:\n        \"\"\"\n        LCK7\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck7\n\n    @lck7.setter\n    def lck7(self, value: int) ->\
    \ None:\n        self._lck7.value = value\n\n    @property\n    def lck6(self)\
    \ -> Field:\n        \"\"\"\n        LCK6\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck6\n\n    @lck6.setter\n\
    \    def lck6(self, value: int) -> None:\n        self._lck6.value = value\n\n\
    \    @property\n    def lck5(self) -> Field:\n        \"\"\"\n        LCK5\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck5\n\n    @lck5.setter\n    def lck5(self, value: int) ->\
    \ None:\n        self._lck5.value = value\n\n    @property\n    def lck4(self)\
    \ -> Field:\n        \"\"\"\n        LCK4\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck4\n\n    @lck4.setter\n\
    \    def lck4(self, value: int) -> None:\n        self._lck4.value = value\n\n\
    \    @property\n    def lck3(self) -> Field:\n        \"\"\"\n        LCK3\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck3\n\n    @lck3.setter\n    def lck3(self, value: int) ->\
    \ None:\n        self._lck3.value = value\n\n    @property\n    def lck2(self)\
    \ -> Field:\n        \"\"\"\n        LCK2\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck2\n\n    @lck2.setter\n\
    \    def lck2(self, value: int) -> None:\n        self._lck2.value = value\n\n\
    \    @property\n    def lck1(self) -> Field:\n        \"\"\"\n        LCK1\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck1\n\n    @lck1.setter\n    def lck1(self, value: int) ->\
    \ None:\n        self._lck1.value = value\n\n    @property\n    def lck0(self)\
    \ -> Field:\n        \"\"\"\n        LCK0\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck0\n\n    @lck0.setter\n\
    \    def lck0(self, value: int) -> None:\n        self._lck0.value = value\n\n\
    \nclass AfrlRegister(Register):\n    \"\"\"\n    AFRL\n\n    GPIO alternate function\
    \ low\n              register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._afrl7 = Field(\"afrl7\", 28, 4)\n        self._afrl6 = Field(\"afrl6\"\
    , 24, 4)\n        self._afrl5 = Field(\"afrl5\", 20, 4)\n        self._afrl4 =\
    \ Field(\"afrl4\", 16, 4)\n        self._afrl3 = Field(\"afrl3\", 12, 4)\n   \
    \     self._afrl2 = Field(\"afrl2\", 8, 4)\n        self._afrl1 = Field(\"afrl1\"\
    , 4, 4)\n        self._afrl0 = Field(\"afrl0\", 0, 4)\n        super().__init__(\"\
    AFRL\", 0x40021000 + 0x20)\n\n    @property\n    def afrl7(self) -> Field:\n \
    \       \"\"\"\n        AFRL7\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 0..7)\n        \"\"\"\n        return self._afrl7\n\
    \n    @afrl7.setter\n    def afrl7(self, value: int) -> None:\n        self._afrl7.value\
    \ = value\n\n    @property\n    def afrl6(self) -> Field:\n        \"\"\"\n  \
    \      AFRL6\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 0..7)\n        \"\"\"\n        return self._afrl6\n\n    @afrl6.setter\n\
    \    def afrl6(self, value: int) -> None:\n        self._afrl6.value = value\n\
    \n    @property\n    def afrl5(self) -> Field:\n        \"\"\"\n        AFRL5\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl5\n\n    @afrl5.setter\n \
    \   def afrl5(self, value: int) -> None:\n        self._afrl5.value = value\n\n\
    \    @property\n    def afrl4(self) -> Field:\n        \"\"\"\n        AFRL4\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl4\n\n    @afrl4.setter\n \
    \   def afrl4(self, value: int) -> None:\n        self._afrl4.value = value\n\n\
    \    @property\n    def afrl3(self) -> Field:\n        \"\"\"\n        AFRL3\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl3\n\n    @afrl3.setter\n \
    \   def afrl3(self, value: int) -> None:\n        self._afrl3.value = value\n\n\
    \    @property\n    def afrl2(self) -> Field:\n        \"\"\"\n        AFRL2\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl2\n\n    @afrl2.setter\n \
    \   def afrl2(self, value: int) -> None:\n        self._afrl2.value = value\n\n\
    \    @property\n    def afrl1(self) -> Field:\n        \"\"\"\n        AFRL1\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl1\n\n    @afrl1.setter\n \
    \   def afrl1(self, value: int) -> None:\n        self._afrl1.value = value\n\n\
    \    @property\n    def afrl0(self) -> Field:\n        \"\"\"\n        AFRL0\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl0\n\n    @afrl0.setter\n \
    \   def afrl0(self, value: int) -> None:\n        self._afrl0.value = value\n\n\
    \nclass AfrhRegister(Register):\n    \"\"\"\n    AFRH\n\n    GPIO alternate function\
    \ high\n              register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._afrh15 = Field(\"afrh15\", 28, 4)\n        self._afrh14 = Field(\"afrh14\"\
    , 24, 4)\n        self._afrh13 = Field(\"afrh13\", 20, 4)\n        self._afrh12\
    \ = Field(\"afrh12\", 16, 4)\n        self._afrh11 = Field(\"afrh11\", 12, 4)\n\
    \        self._afrh10 = Field(\"afrh10\", 8, 4)\n        self._afrh9 = Field(\"\
    afrh9\", 4, 4)\n        self._afrh8 = Field(\"afrh8\", 0, 4)\n        super().__init__(\"\
    AFRH\", 0x40021000 + 0x24)\n\n    @property\n    def afrh15(self) -> Field:\n\
    \        \"\"\"\n        AFRH15\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 8..15)\n        \"\"\"\n        return self._afrh15\n\
    \n    @afrh15.setter\n    def afrh15(self, value: int) -> None:\n        self._afrh15.value\
    \ = value\n\n    @property\n    def afrh14(self) -> Field:\n        \"\"\"\n \
    \       AFRH14\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh14\n\n  \
    \  @afrh14.setter\n    def afrh14(self, value: int) -> None:\n        self._afrh14.value\
    \ = value\n\n    @property\n    def afrh13(self) -> Field:\n        \"\"\"\n \
    \       AFRH13\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh13\n\n  \
    \  @afrh13.setter\n    def afrh13(self, value: int) -> None:\n        self._afrh13.value\
    \ = value\n\n    @property\n    def afrh12(self) -> Field:\n        \"\"\"\n \
    \       AFRH12\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh12\n\n  \
    \  @afrh12.setter\n    def afrh12(self, value: int) -> None:\n        self._afrh12.value\
    \ = value\n\n    @property\n    def afrh11(self) -> Field:\n        \"\"\"\n \
    \       AFRH11\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh11\n\n  \
    \  @afrh11.setter\n    def afrh11(self, value: int) -> None:\n        self._afrh11.value\
    \ = value\n\n    @property\n    def afrh10(self) -> Field:\n        \"\"\"\n \
    \       AFRH10\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh10\n\n  \
    \  @afrh10.setter\n    def afrh10(self, value: int) -> None:\n        self._afrh10.value\
    \ = value\n\n    @property\n    def afrh9(self) -> Field:\n        \"\"\"\n  \
    \      AFRH9\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 8..15)\n        \"\"\"\n        return self._afrh9\n\n    @afrh9.setter\n\
    \    def afrh9(self, value: int) -> None:\n        self._afrh9.value = value\n\
    \n    @property\n    def afrh8(self) -> Field:\n        \"\"\"\n        AFRH8\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 8..15)\n        \"\"\"\n        return self._afrh8\n\n    @afrh8.setter\n\
    \    def afrh8(self, value: int) -> None:\n        self._afrh8.value = value\n\
    \n\nclass Gpioe(Peripheral):\n    \"\"\"\n    GPIOE\n\n    General-purpose I/Os\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._moder = ModerRegister()\n\
    \        self._otyper = OtyperRegister()\n        self._ospeedr = OspeedrRegister()\n\
    \        self._pupdr = PupdrRegister()\n        self._idr = IdrRegister()\n  \
    \      self._odr = OdrRegister()\n        self._bsrr = BsrrRegister()\n      \
    \  self._lckr = LckrRegister()\n        self._afrl = AfrlRegister()\n        self._afrh\
    \ = AfrhRegister()\n        super().__init__(\"gpioe\", 0x40021000)\n\n    @property\n\
    \    def moder(self) -> ModerRegister:\n        return self._moder\n\n    @moder.setter\n\
    \    def moder(self, value: int) -> None:\n        self._moder.value = value\n\
    \n    @property\n    def otyper(self) -> OtyperRegister:\n        return self._otyper\n\
    \n    @otyper.setter\n    def otyper(self, value: int) -> None:\n        self._otyper.value\
    \ = value\n\n    @property\n    def ospeedr(self) -> OspeedrRegister:\n      \
    \  return self._ospeedr\n\n    @ospeedr.setter\n    def ospeedr(self, value: int)\
    \ -> None:\n        self._ospeedr.value = value\n\n    @property\n    def pupdr(self)\
    \ -> PupdrRegister:\n        return self._pupdr\n\n    @pupdr.setter\n    def\
    \ pupdr(self, value: int) -> None:\n        self._pupdr.value = value\n\n    @property\n\
    \    def idr(self) -> IdrRegister:\n        return self._idr\n\n    @idr.setter\n\
    \    def idr(self, value: int) -> None:\n        self._idr.value = value\n\n \
    \   @property\n    def odr(self) -> OdrRegister:\n        return self._odr\n\n\
    \    @odr.setter\n    def odr(self, value: int) -> None:\n        self._odr.value\
    \ = value\n\n    @property\n    def bsrr(self) -> BsrrRegister:\n        return\
    \ self._bsrr\n\n    @bsrr.setter\n    def bsrr(self, value: int) -> None:\n  \
    \      self._bsrr.value = value\n\n    @property\n    def lckr(self) -> LckrRegister:\n\
    \        return self._lckr\n\n    @lckr.setter\n    def lckr(self, value: int)\
    \ -> None:\n        self._lckr.value = value\n\n    @property\n    def afrl(self)\
    \ -> AfrlRegister:\n        return self._afrl\n\n    @afrl.setter\n    def afrl(self,\
    \ value: int) -> None:\n        self._afrl.value = value\n\n    @property\n  \
    \  def afrh(self) -> AfrhRegister:\n        return self._afrh\n\n    @afrh.setter\n\
    \    def afrh(self, value: int) -> None:\n        self._afrh.value = value\n"
  name: GPIOE
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ModerRegister(Register):\n    \"\"\"\n    MODER\n\n    GPIO\
    \ port mode register\n    \"\"\"\n\n    def __init__(self):\n        self._moder15\
    \ = Field(\"moder15\", 30, 2)\n        self._moder14 = Field(\"moder14\", 28,\
    \ 2)\n        self._moder13 = Field(\"moder13\", 26, 2)\n        self._moder12\
    \ = Field(\"moder12\", 24, 2)\n        self._moder11 = Field(\"moder11\", 22,\
    \ 2)\n        self._moder10 = Field(\"moder10\", 20, 2)\n        self._moder9\
    \ = Field(\"moder9\", 18, 2)\n        self._moder8 = Field(\"moder8\", 16, 2)\n\
    \        self._moder7 = Field(\"moder7\", 14, 2)\n        self._moder6 = Field(\"\
    moder6\", 12, 2)\n        self._moder5 = Field(\"moder5\", 10, 2)\n        self._moder4\
    \ = Field(\"moder4\", 8, 2)\n        self._moder3 = Field(\"moder3\", 6, 2)\n\
    \        self._moder2 = Field(\"moder2\", 4, 2)\n        self._moder1 = Field(\"\
    moder1\", 2, 2)\n        self._moder0 = Field(\"moder0\", 0, 2)\n        super().__init__(\"\
    MODER\", 0x40020C00 + 0x0)\n\n    @property\n    def moder15(self) -> Field:\n\
    \        \"\"\"\n        MODER15\n\n        Port x configuration bits (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._moder15\n\n   \
    \ @moder15.setter\n    def moder15(self, value: int) -> None:\n        self._moder15.value\
    \ = value\n\n    @property\n    def moder14(self) -> Field:\n        \"\"\"\n\
    \        MODER14\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder14\n\n    @moder14.setter\n\
    \    def moder14(self, value: int) -> None:\n        self._moder14.value = value\n\
    \n    @property\n    def moder13(self) -> Field:\n        \"\"\"\n        MODER13\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder13\n\n    @moder13.setter\n    def moder13(self,\
    \ value: int) -> None:\n        self._moder13.value = value\n\n    @property\n\
    \    def moder12(self) -> Field:\n        \"\"\"\n        MODER12\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder12\n\n    @moder12.setter\n    def moder12(self, value: int)\
    \ -> None:\n        self._moder12.value = value\n\n    @property\n    def moder11(self)\
    \ -> Field:\n        \"\"\"\n        MODER11\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder11\n\
    \n    @moder11.setter\n    def moder11(self, value: int) -> None:\n        self._moder11.value\
    \ = value\n\n    @property\n    def moder10(self) -> Field:\n        \"\"\"\n\
    \        MODER10\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder10\n\n    @moder10.setter\n\
    \    def moder10(self, value: int) -> None:\n        self._moder10.value = value\n\
    \n    @property\n    def moder9(self) -> Field:\n        \"\"\"\n        MODER9\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder9\n\n    @moder9.setter\n    def moder9(self,\
    \ value: int) -> None:\n        self._moder9.value = value\n\n    @property\n\
    \    def moder8(self) -> Field:\n        \"\"\"\n        MODER8\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder8\n\n    @moder8.setter\n    def moder8(self, value: int)\
    \ -> None:\n        self._moder8.value = value\n\n    @property\n    def moder7(self)\
    \ -> Field:\n        \"\"\"\n        MODER7\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder7\n\
    \n    @moder7.setter\n    def moder7(self, value: int) -> None:\n        self._moder7.value\
    \ = value\n\n    @property\n    def moder6(self) -> Field:\n        \"\"\"\n \
    \       MODER6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder6\n\n    @moder6.setter\n    def moder6(self,\
    \ value: int) -> None:\n        self._moder6.value = value\n\n    @property\n\
    \    def moder5(self) -> Field:\n        \"\"\"\n        MODER5\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder5\n\n    @moder5.setter\n    def moder5(self, value: int)\
    \ -> None:\n        self._moder5.value = value\n\n    @property\n    def moder4(self)\
    \ -> Field:\n        \"\"\"\n        MODER4\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder4\n\
    \n    @moder4.setter\n    def moder4(self, value: int) -> None:\n        self._moder4.value\
    \ = value\n\n    @property\n    def moder3(self) -> Field:\n        \"\"\"\n \
    \       MODER3\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder3\n\n    @moder3.setter\n    def moder3(self,\
    \ value: int) -> None:\n        self._moder3.value = value\n\n    @property\n\
    \    def moder2(self) -> Field:\n        \"\"\"\n        MODER2\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder2\n\n    @moder2.setter\n    def moder2(self, value: int)\
    \ -> None:\n        self._moder2.value = value\n\n    @property\n    def moder1(self)\
    \ -> Field:\n        \"\"\"\n        MODER1\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder1\n\
    \n    @moder1.setter\n    def moder1(self, value: int) -> None:\n        self._moder1.value\
    \ = value\n\n    @property\n    def moder0(self) -> Field:\n        \"\"\"\n \
    \       MODER0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder0\n\n    @moder0.setter\n    def moder0(self,\
    \ value: int) -> None:\n        self._moder0.value = value\n\n\nclass OtyperRegister(Register):\n\
    \    \"\"\"\n    OTYPER\n\n    GPIO port output type register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._ot15 = Field(\"ot15\", 15, 1)\n      \
    \  self._ot14 = Field(\"ot14\", 14, 1)\n        self._ot13 = Field(\"ot13\", 13,\
    \ 1)\n        self._ot12 = Field(\"ot12\", 12, 1)\n        self._ot11 = Field(\"\
    ot11\", 11, 1)\n        self._ot10 = Field(\"ot10\", 10, 1)\n        self._ot9\
    \ = Field(\"ot9\", 9, 1)\n        self._ot8 = Field(\"ot8\", 8, 1)\n        self._ot7\
    \ = Field(\"ot7\", 7, 1)\n        self._ot6 = Field(\"ot6\", 6, 1)\n        self._ot5\
    \ = Field(\"ot5\", 5, 1)\n        self._ot4 = Field(\"ot4\", 4, 1)\n        self._ot3\
    \ = Field(\"ot3\", 3, 1)\n        self._ot2 = Field(\"ot2\", 2, 1)\n        self._ot1\
    \ = Field(\"ot1\", 1, 1)\n        self._ot0 = Field(\"ot0\", 0, 1)\n        super().__init__(\"\
    OTYPER\", 0x40020C00 + 0x4)\n\n    @property\n    def ot15(self) -> Field:\n \
    \       \"\"\"\n        OT15\n\n        Port x configuration bits (y =\n     \
    \             0..15)\n        \"\"\"\n        return self._ot15\n\n    @ot15.setter\n\
    \    def ot15(self, value: int) -> None:\n        self._ot15.value = value\n\n\
    \    @property\n    def ot14(self) -> Field:\n        \"\"\"\n        OT14\n\n\
    \        Port x configuration bits (y =\n                  0..15)\n        \"\"\
    \"\n        return self._ot14\n\n    @ot14.setter\n    def ot14(self, value: int)\
    \ -> None:\n        self._ot14.value = value\n\n    @property\n    def ot13(self)\
    \ -> Field:\n        \"\"\"\n        OT13\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._ot13\n\n\
    \    @ot13.setter\n    def ot13(self, value: int) -> None:\n        self._ot13.value\
    \ = value\n\n    @property\n    def ot12(self) -> Field:\n        \"\"\"\n   \
    \     OT12\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot12\n\n    @ot12.setter\n    def ot12(self,\
    \ value: int) -> None:\n        self._ot12.value = value\n\n    @property\n  \
    \  def ot11(self) -> Field:\n        \"\"\"\n        OT11\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot11\n\
    \n    @ot11.setter\n    def ot11(self, value: int) -> None:\n        self._ot11.value\
    \ = value\n\n    @property\n    def ot10(self) -> Field:\n        \"\"\"\n   \
    \     OT10\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot10\n\n    @ot10.setter\n    def ot10(self,\
    \ value: int) -> None:\n        self._ot10.value = value\n\n    @property\n  \
    \  def ot9(self) -> Field:\n        \"\"\"\n        OT9\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot9\n\
    \n    @ot9.setter\n    def ot9(self, value: int) -> None:\n        self._ot9.value\
    \ = value\n\n    @property\n    def ot8(self) -> Field:\n        \"\"\"\n    \
    \    OT8\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot8\n\n    @ot8.setter\n    def ot8(self,\
    \ value: int) -> None:\n        self._ot8.value = value\n\n    @property\n   \
    \ def ot7(self) -> Field:\n        \"\"\"\n        OT7\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot7\n\
    \n    @ot7.setter\n    def ot7(self, value: int) -> None:\n        self._ot7.value\
    \ = value\n\n    @property\n    def ot6(self) -> Field:\n        \"\"\"\n    \
    \    OT6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot6\n\n    @ot6.setter\n    def ot6(self,\
    \ value: int) -> None:\n        self._ot6.value = value\n\n    @property\n   \
    \ def ot5(self) -> Field:\n        \"\"\"\n        OT5\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot5\n\
    \n    @ot5.setter\n    def ot5(self, value: int) -> None:\n        self._ot5.value\
    \ = value\n\n    @property\n    def ot4(self) -> Field:\n        \"\"\"\n    \
    \    OT4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot4\n\n    @ot4.setter\n    def ot4(self,\
    \ value: int) -> None:\n        self._ot4.value = value\n\n    @property\n   \
    \ def ot3(self) -> Field:\n        \"\"\"\n        OT3\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot3\n\
    \n    @ot3.setter\n    def ot3(self, value: int) -> None:\n        self._ot3.value\
    \ = value\n\n    @property\n    def ot2(self) -> Field:\n        \"\"\"\n    \
    \    OT2\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot2\n\n    @ot2.setter\n    def ot2(self,\
    \ value: int) -> None:\n        self._ot2.value = value\n\n    @property\n   \
    \ def ot1(self) -> Field:\n        \"\"\"\n        OT1\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot1\n\
    \n    @ot1.setter\n    def ot1(self, value: int) -> None:\n        self._ot1.value\
    \ = value\n\n    @property\n    def ot0(self) -> Field:\n        \"\"\"\n    \
    \    OT0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot0\n\n    @ot0.setter\n    def ot0(self,\
    \ value: int) -> None:\n        self._ot0.value = value\n\n\nclass OspeedrRegister(Register):\n\
    \    \"\"\"\n    OSPEEDR\n\n    GPIO port output speed\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ospeedr15 = Field(\"ospeedr15\"\
    , 30, 2)\n        self._ospeedr14 = Field(\"ospeedr14\", 28, 2)\n        self._ospeedr13\
    \ = Field(\"ospeedr13\", 26, 2)\n        self._ospeedr12 = Field(\"ospeedr12\"\
    , 24, 2)\n        self._ospeedr11 = Field(\"ospeedr11\", 22, 2)\n        self._ospeedr10\
    \ = Field(\"ospeedr10\", 20, 2)\n        self._ospeedr9 = Field(\"ospeedr9\",\
    \ 18, 2)\n        self._ospeedr8 = Field(\"ospeedr8\", 16, 2)\n        self._ospeedr7\
    \ = Field(\"ospeedr7\", 14, 2)\n        self._ospeedr6 = Field(\"ospeedr6\", 12,\
    \ 2)\n        self._ospeedr5 = Field(\"ospeedr5\", 10, 2)\n        self._ospeedr4\
    \ = Field(\"ospeedr4\", 8, 2)\n        self._ospeedr3 = Field(\"ospeedr3\", 6,\
    \ 2)\n        self._ospeedr2 = Field(\"ospeedr2\", 4, 2)\n        self._ospeedr1\
    \ = Field(\"ospeedr1\", 2, 2)\n        self._ospeedr0 = Field(\"ospeedr0\", 0,\
    \ 2)\n        super().__init__(\"OSPEEDR\", 0x40020C00 + 0x8)\n\n    @property\n\
    \    def ospeedr15(self) -> Field:\n        \"\"\"\n        OSPEEDR15\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr15\n\n    @ospeedr15.setter\n    def ospeedr15(self,\
    \ value: int) -> None:\n        self._ospeedr15.value = value\n\n    @property\n\
    \    def ospeedr14(self) -> Field:\n        \"\"\"\n        OSPEEDR14\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr14\n\n    @ospeedr14.setter\n    def ospeedr14(self,\
    \ value: int) -> None:\n        self._ospeedr14.value = value\n\n    @property\n\
    \    def ospeedr13(self) -> Field:\n        \"\"\"\n        OSPEEDR13\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr13\n\n    @ospeedr13.setter\n    def ospeedr13(self,\
    \ value: int) -> None:\n        self._ospeedr13.value = value\n\n    @property\n\
    \    def ospeedr12(self) -> Field:\n        \"\"\"\n        OSPEEDR12\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr12\n\n    @ospeedr12.setter\n    def ospeedr12(self,\
    \ value: int) -> None:\n        self._ospeedr12.value = value\n\n    @property\n\
    \    def ospeedr11(self) -> Field:\n        \"\"\"\n        OSPEEDR11\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr11\n\n    @ospeedr11.setter\n    def ospeedr11(self,\
    \ value: int) -> None:\n        self._ospeedr11.value = value\n\n    @property\n\
    \    def ospeedr10(self) -> Field:\n        \"\"\"\n        OSPEEDR10\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr10\n\n    @ospeedr10.setter\n    def ospeedr10(self,\
    \ value: int) -> None:\n        self._ospeedr10.value = value\n\n    @property\n\
    \    def ospeedr9(self) -> Field:\n        \"\"\"\n        OSPEEDR9\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr9\n\n    @ospeedr9.setter\n    def ospeedr9(self,\
    \ value: int) -> None:\n        self._ospeedr9.value = value\n\n    @property\n\
    \    def ospeedr8(self) -> Field:\n        \"\"\"\n        OSPEEDR8\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr8\n\n    @ospeedr8.setter\n    def ospeedr8(self,\
    \ value: int) -> None:\n        self._ospeedr8.value = value\n\n    @property\n\
    \    def ospeedr7(self) -> Field:\n        \"\"\"\n        OSPEEDR7\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr7\n\n    @ospeedr7.setter\n    def ospeedr7(self,\
    \ value: int) -> None:\n        self._ospeedr7.value = value\n\n    @property\n\
    \    def ospeedr6(self) -> Field:\n        \"\"\"\n        OSPEEDR6\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr6\n\n    @ospeedr6.setter\n    def ospeedr6(self,\
    \ value: int) -> None:\n        self._ospeedr6.value = value\n\n    @property\n\
    \    def ospeedr5(self) -> Field:\n        \"\"\"\n        OSPEEDR5\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr5\n\n    @ospeedr5.setter\n    def ospeedr5(self,\
    \ value: int) -> None:\n        self._ospeedr5.value = value\n\n    @property\n\
    \    def ospeedr4(self) -> Field:\n        \"\"\"\n        OSPEEDR4\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr4\n\n    @ospeedr4.setter\n    def ospeedr4(self,\
    \ value: int) -> None:\n        self._ospeedr4.value = value\n\n    @property\n\
    \    def ospeedr3(self) -> Field:\n        \"\"\"\n        OSPEEDR3\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr3\n\n    @ospeedr3.setter\n    def ospeedr3(self,\
    \ value: int) -> None:\n        self._ospeedr3.value = value\n\n    @property\n\
    \    def ospeedr2(self) -> Field:\n        \"\"\"\n        OSPEEDR2\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr2\n\n    @ospeedr2.setter\n    def ospeedr2(self,\
    \ value: int) -> None:\n        self._ospeedr2.value = value\n\n    @property\n\
    \    def ospeedr1(self) -> Field:\n        \"\"\"\n        OSPEEDR1\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr1\n\n    @ospeedr1.setter\n    def ospeedr1(self,\
    \ value: int) -> None:\n        self._ospeedr1.value = value\n\n    @property\n\
    \    def ospeedr0(self) -> Field:\n        \"\"\"\n        OSPEEDR0\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr0\n\n    @ospeedr0.setter\n    def ospeedr0(self,\
    \ value: int) -> None:\n        self._ospeedr0.value = value\n\n\nclass PupdrRegister(Register):\n\
    \    \"\"\"\n    PUPDR\n\n    GPIO port pull-up/pull-down\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pupdr15 = Field(\"pupdr15\"\
    , 30, 2)\n        self._pupdr14 = Field(\"pupdr14\", 28, 2)\n        self._pupdr13\
    \ = Field(\"pupdr13\", 26, 2)\n        self._pupdr12 = Field(\"pupdr12\", 24,\
    \ 2)\n        self._pupdr11 = Field(\"pupdr11\", 22, 2)\n        self._pupdr10\
    \ = Field(\"pupdr10\", 20, 2)\n        self._pupdr9 = Field(\"pupdr9\", 18, 2)\n\
    \        self._pupdr8 = Field(\"pupdr8\", 16, 2)\n        self._pupdr7 = Field(\"\
    pupdr7\", 14, 2)\n        self._pupdr6 = Field(\"pupdr6\", 12, 2)\n        self._pupdr5\
    \ = Field(\"pupdr5\", 10, 2)\n        self._pupdr4 = Field(\"pupdr4\", 8, 2)\n\
    \        self._pupdr3 = Field(\"pupdr3\", 6, 2)\n        self._pupdr2 = Field(\"\
    pupdr2\", 4, 2)\n        self._pupdr1 = Field(\"pupdr1\", 2, 2)\n        self._pupdr0\
    \ = Field(\"pupdr0\", 0, 2)\n        super().__init__(\"PUPDR\", 0x40020C00 +\
    \ 0xC)\n\n    @property\n    def pupdr15(self) -> Field:\n        \"\"\"\n   \
    \     PUPDR15\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr15\n\n    @pupdr15.setter\n    def\
    \ pupdr15(self, value: int) -> None:\n        self._pupdr15.value = value\n\n\
    \    @property\n    def pupdr14(self) -> Field:\n        \"\"\"\n        PUPDR14\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr14\n\n    @pupdr14.setter\n    def pupdr14(self,\
    \ value: int) -> None:\n        self._pupdr14.value = value\n\n    @property\n\
    \    def pupdr13(self) -> Field:\n        \"\"\"\n        PUPDR13\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr13\n\n    @pupdr13.setter\n    def pupdr13(self, value: int)\
    \ -> None:\n        self._pupdr13.value = value\n\n    @property\n    def pupdr12(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR12\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr12\n\
    \n    @pupdr12.setter\n    def pupdr12(self, value: int) -> None:\n        self._pupdr12.value\
    \ = value\n\n    @property\n    def pupdr11(self) -> Field:\n        \"\"\"\n\
    \        PUPDR11\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._pupdr11\n\n    @pupdr11.setter\n\
    \    def pupdr11(self, value: int) -> None:\n        self._pupdr11.value = value\n\
    \n    @property\n    def pupdr10(self) -> Field:\n        \"\"\"\n        PUPDR10\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr10\n\n    @pupdr10.setter\n    def pupdr10(self,\
    \ value: int) -> None:\n        self._pupdr10.value = value\n\n    @property\n\
    \    def pupdr9(self) -> Field:\n        \"\"\"\n        PUPDR9\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr9\n\n    @pupdr9.setter\n    def pupdr9(self, value: int)\
    \ -> None:\n        self._pupdr9.value = value\n\n    @property\n    def pupdr8(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR8\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr8\n\
    \n    @pupdr8.setter\n    def pupdr8(self, value: int) -> None:\n        self._pupdr8.value\
    \ = value\n\n    @property\n    def pupdr7(self) -> Field:\n        \"\"\"\n \
    \       PUPDR7\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr7\n\n    @pupdr7.setter\n    def pupdr7(self,\
    \ value: int) -> None:\n        self._pupdr7.value = value\n\n    @property\n\
    \    def pupdr6(self) -> Field:\n        \"\"\"\n        PUPDR6\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr6\n\n    @pupdr6.setter\n    def pupdr6(self, value: int)\
    \ -> None:\n        self._pupdr6.value = value\n\n    @property\n    def pupdr5(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR5\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr5\n\
    \n    @pupdr5.setter\n    def pupdr5(self, value: int) -> None:\n        self._pupdr5.value\
    \ = value\n\n    @property\n    def pupdr4(self) -> Field:\n        \"\"\"\n \
    \       PUPDR4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr4\n\n    @pupdr4.setter\n    def pupdr4(self,\
    \ value: int) -> None:\n        self._pupdr4.value = value\n\n    @property\n\
    \    def pupdr3(self) -> Field:\n        \"\"\"\n        PUPDR3\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr3\n\n    @pupdr3.setter\n    def pupdr3(self, value: int)\
    \ -> None:\n        self._pupdr3.value = value\n\n    @property\n    def pupdr2(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR2\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr2\n\
    \n    @pupdr2.setter\n    def pupdr2(self, value: int) -> None:\n        self._pupdr2.value\
    \ = value\n\n    @property\n    def pupdr1(self) -> Field:\n        \"\"\"\n \
    \       PUPDR1\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr1\n\n    @pupdr1.setter\n    def pupdr1(self,\
    \ value: int) -> None:\n        self._pupdr1.value = value\n\n    @property\n\
    \    def pupdr0(self) -> Field:\n        \"\"\"\n        PUPDR0\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr0\n\n    @pupdr0.setter\n    def pupdr0(self, value: int)\
    \ -> None:\n        self._pupdr0.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    GPIO port input data register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._idr15 = Field(\"idr15\", 15, 1)\n        self._idr14\
    \ = Field(\"idr14\", 14, 1)\n        self._idr13 = Field(\"idr13\", 13, 1)\n \
    \       self._idr12 = Field(\"idr12\", 12, 1)\n        self._idr11 = Field(\"\
    idr11\", 11, 1)\n        self._idr10 = Field(\"idr10\", 10, 1)\n        self._idr9\
    \ = Field(\"idr9\", 9, 1)\n        self._idr8 = Field(\"idr8\", 8, 1)\n      \
    \  self._idr7 = Field(\"idr7\", 7, 1)\n        self._idr6 = Field(\"idr6\", 6,\
    \ 1)\n        self._idr5 = Field(\"idr5\", 5, 1)\n        self._idr4 = Field(\"\
    idr4\", 4, 1)\n        self._idr3 = Field(\"idr3\", 3, 1)\n        self._idr2\
    \ = Field(\"idr2\", 2, 1)\n        self._idr1 = Field(\"idr1\", 1, 1)\n      \
    \  self._idr0 = Field(\"idr0\", 0, 1)\n        super().__init__(\"IDR\", 0x40020C00\
    \ + 0x10)\n\n    @property\n    def idr15(self) -> Field:\n        \"\"\"\n  \
    \      IDR15\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr15\n\n    @idr15.setter\n    def idr15(self,\
    \ value: int) -> None:\n        self._idr15.value = value\n\n    @property\n \
    \   def idr14(self) -> Field:\n        \"\"\"\n        IDR14\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr14\n\
    \n    @idr14.setter\n    def idr14(self, value: int) -> None:\n        self._idr14.value\
    \ = value\n\n    @property\n    def idr13(self) -> Field:\n        \"\"\"\n  \
    \      IDR13\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr13\n\n    @idr13.setter\n    def idr13(self,\
    \ value: int) -> None:\n        self._idr13.value = value\n\n    @property\n \
    \   def idr12(self) -> Field:\n        \"\"\"\n        IDR12\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr12\n\
    \n    @idr12.setter\n    def idr12(self, value: int) -> None:\n        self._idr12.value\
    \ = value\n\n    @property\n    def idr11(self) -> Field:\n        \"\"\"\n  \
    \      IDR11\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr11\n\n    @idr11.setter\n    def idr11(self,\
    \ value: int) -> None:\n        self._idr11.value = value\n\n    @property\n \
    \   def idr10(self) -> Field:\n        \"\"\"\n        IDR10\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr10\n\
    \n    @idr10.setter\n    def idr10(self, value: int) -> None:\n        self._idr10.value\
    \ = value\n\n    @property\n    def idr9(self) -> Field:\n        \"\"\"\n   \
    \     IDR9\n\n        Port input data (y =\n                  0..15)\n       \
    \ \"\"\"\n        return self._idr9\n\n    @idr9.setter\n    def idr9(self, value:\
    \ int) -> None:\n        self._idr9.value = value\n\n    @property\n    def idr8(self)\
    \ -> Field:\n        \"\"\"\n        IDR8\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr8\n\n    @idr8.setter\n\
    \    def idr8(self, value: int) -> None:\n        self._idr8.value = value\n\n\
    \    @property\n    def idr7(self) -> Field:\n        \"\"\"\n        IDR7\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr7\n\n    @idr7.setter\n    def idr7(self, value: int) ->\
    \ None:\n        self._idr7.value = value\n\n    @property\n    def idr6(self)\
    \ -> Field:\n        \"\"\"\n        IDR6\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr6\n\n    @idr6.setter\n\
    \    def idr6(self, value: int) -> None:\n        self._idr6.value = value\n\n\
    \    @property\n    def idr5(self) -> Field:\n        \"\"\"\n        IDR5\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr5\n\n    @idr5.setter\n    def idr5(self, value: int) ->\
    \ None:\n        self._idr5.value = value\n\n    @property\n    def idr4(self)\
    \ -> Field:\n        \"\"\"\n        IDR4\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr4\n\n    @idr4.setter\n\
    \    def idr4(self, value: int) -> None:\n        self._idr4.value = value\n\n\
    \    @property\n    def idr3(self) -> Field:\n        \"\"\"\n        IDR3\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr3\n\n    @idr3.setter\n    def idr3(self, value: int) ->\
    \ None:\n        self._idr3.value = value\n\n    @property\n    def idr2(self)\
    \ -> Field:\n        \"\"\"\n        IDR2\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr2\n\n    @idr2.setter\n\
    \    def idr2(self, value: int) -> None:\n        self._idr2.value = value\n\n\
    \    @property\n    def idr1(self) -> Field:\n        \"\"\"\n        IDR1\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr1\n\n    @idr1.setter\n    def idr1(self, value: int) ->\
    \ None:\n        self._idr1.value = value\n\n    @property\n    def idr0(self)\
    \ -> Field:\n        \"\"\"\n        IDR0\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr0\n\n    @idr0.setter\n\
    \    def idr0(self, value: int) -> None:\n        self._idr0.value = value\n\n\
    \nclass OdrRegister(Register):\n    \"\"\"\n    ODR\n\n    GPIO port output data\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._odr15 = Field(\"\
    odr15\", 15, 1)\n        self._odr14 = Field(\"odr14\", 14, 1)\n        self._odr13\
    \ = Field(\"odr13\", 13, 1)\n        self._odr12 = Field(\"odr12\", 12, 1)\n \
    \       self._odr11 = Field(\"odr11\", 11, 1)\n        self._odr10 = Field(\"\
    odr10\", 10, 1)\n        self._odr9 = Field(\"odr9\", 9, 1)\n        self._odr8\
    \ = Field(\"odr8\", 8, 1)\n        self._odr7 = Field(\"odr7\", 7, 1)\n      \
    \  self._odr6 = Field(\"odr6\", 6, 1)\n        self._odr5 = Field(\"odr5\", 5,\
    \ 1)\n        self._odr4 = Field(\"odr4\", 4, 1)\n        self._odr3 = Field(\"\
    odr3\", 3, 1)\n        self._odr2 = Field(\"odr2\", 2, 1)\n        self._odr1\
    \ = Field(\"odr1\", 1, 1)\n        self._odr0 = Field(\"odr0\", 0, 1)\n      \
    \  super().__init__(\"ODR\", 0x40020C00 + 0x14)\n\n    @property\n    def odr15(self)\
    \ -> Field:\n        \"\"\"\n        ODR15\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr15\n\n    @odr15.setter\n\
    \    def odr15(self, value: int) -> None:\n        self._odr15.value = value\n\
    \n    @property\n    def odr14(self) -> Field:\n        \"\"\"\n        ODR14\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr14\n\n    @odr14.setter\n    def odr14(self, value: int)\
    \ -> None:\n        self._odr14.value = value\n\n    @property\n    def odr13(self)\
    \ -> Field:\n        \"\"\"\n        ODR13\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr13\n\n    @odr13.setter\n\
    \    def odr13(self, value: int) -> None:\n        self._odr13.value = value\n\
    \n    @property\n    def odr12(self) -> Field:\n        \"\"\"\n        ODR12\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr12\n\n    @odr12.setter\n    def odr12(self, value: int)\
    \ -> None:\n        self._odr12.value = value\n\n    @property\n    def odr11(self)\
    \ -> Field:\n        \"\"\"\n        ODR11\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr11\n\n    @odr11.setter\n\
    \    def odr11(self, value: int) -> None:\n        self._odr11.value = value\n\
    \n    @property\n    def odr10(self) -> Field:\n        \"\"\"\n        ODR10\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr10\n\n    @odr10.setter\n    def odr10(self, value: int)\
    \ -> None:\n        self._odr10.value = value\n\n    @property\n    def odr9(self)\
    \ -> Field:\n        \"\"\"\n        ODR9\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr9\n\n    @odr9.setter\n\
    \    def odr9(self, value: int) -> None:\n        self._odr9.value = value\n\n\
    \    @property\n    def odr8(self) -> Field:\n        \"\"\"\n        ODR8\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr8\n\n    @odr8.setter\n    def odr8(self, value: int) ->\
    \ None:\n        self._odr8.value = value\n\n    @property\n    def odr7(self)\
    \ -> Field:\n        \"\"\"\n        ODR7\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr7\n\n    @odr7.setter\n\
    \    def odr7(self, value: int) -> None:\n        self._odr7.value = value\n\n\
    \    @property\n    def odr6(self) -> Field:\n        \"\"\"\n        ODR6\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr6\n\n    @odr6.setter\n    def odr6(self, value: int) ->\
    \ None:\n        self._odr6.value = value\n\n    @property\n    def odr5(self)\
    \ -> Field:\n        \"\"\"\n        ODR5\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr5\n\n    @odr5.setter\n\
    \    def odr5(self, value: int) -> None:\n        self._odr5.value = value\n\n\
    \    @property\n    def odr4(self) -> Field:\n        \"\"\"\n        ODR4\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr4\n\n    @odr4.setter\n    def odr4(self, value: int) ->\
    \ None:\n        self._odr4.value = value\n\n    @property\n    def odr3(self)\
    \ -> Field:\n        \"\"\"\n        ODR3\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr3\n\n    @odr3.setter\n\
    \    def odr3(self, value: int) -> None:\n        self._odr3.value = value\n\n\
    \    @property\n    def odr2(self) -> Field:\n        \"\"\"\n        ODR2\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr2\n\n    @odr2.setter\n    def odr2(self, value: int) ->\
    \ None:\n        self._odr2.value = value\n\n    @property\n    def odr1(self)\
    \ -> Field:\n        \"\"\"\n        ODR1\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr1\n\n    @odr1.setter\n\
    \    def odr1(self, value: int) -> None:\n        self._odr1.value = value\n\n\
    \    @property\n    def odr0(self) -> Field:\n        \"\"\"\n        ODR0\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr0\n\n    @odr0.setter\n    def odr0(self, value: int) ->\
    \ None:\n        self._odr0.value = value\n\n\nclass BsrrRegister(Register):\n\
    \    \"\"\"\n    BSRR\n\n    GPIO port bit set/reset\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._br15 = Field(\"br15\", 31,\
    \ 1)\n        self._br14 = Field(\"br14\", 30, 1)\n        self._br13 = Field(\"\
    br13\", 29, 1)\n        self._br12 = Field(\"br12\", 28, 1)\n        self._br11\
    \ = Field(\"br11\", 27, 1)\n        self._br10 = Field(\"br10\", 26, 1)\n    \
    \    self._br9 = Field(\"br9\", 25, 1)\n        self._br8 = Field(\"br8\", 24,\
    \ 1)\n        self._br7 = Field(\"br7\", 23, 1)\n        self._br6 = Field(\"\
    br6\", 22, 1)\n        self._br5 = Field(\"br5\", 21, 1)\n        self._br4 =\
    \ Field(\"br4\", 20, 1)\n        self._br3 = Field(\"br3\", 19, 1)\n        self._br2\
    \ = Field(\"br2\", 18, 1)\n        self._br1 = Field(\"br1\", 17, 1)\n       \
    \ self._br0 = Field(\"br0\", 16, 1)\n        self._bs15 = Field(\"bs15\", 15,\
    \ 1)\n        self._bs14 = Field(\"bs14\", 14, 1)\n        self._bs13 = Field(\"\
    bs13\", 13, 1)\n        self._bs12 = Field(\"bs12\", 12, 1)\n        self._bs11\
    \ = Field(\"bs11\", 11, 1)\n        self._bs10 = Field(\"bs10\", 10, 1)\n    \
    \    self._bs9 = Field(\"bs9\", 9, 1)\n        self._bs8 = Field(\"bs8\", 8, 1)\n\
    \        self._bs7 = Field(\"bs7\", 7, 1)\n        self._bs6 = Field(\"bs6\",\
    \ 6, 1)\n        self._bs5 = Field(\"bs5\", 5, 1)\n        self._bs4 = Field(\"\
    bs4\", 4, 1)\n        self._bs3 = Field(\"bs3\", 3, 1)\n        self._bs2 = Field(\"\
    bs2\", 2, 1)\n        self._bs1 = Field(\"bs1\", 1, 1)\n        self._bs0 = Field(\"\
    bs0\", 0, 1)\n        super().__init__(\"BSRR\", 0x40020C00 + 0x18)\n\n    @property\n\
    \    def br15(self) -> Field:\n        \"\"\"\n        BR15\n\n        Port x\
    \ reset bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br15\n\
    \n    @br15.setter\n    def br15(self, value: int) -> None:\n        self._br15.value\
    \ = value\n\n    @property\n    def br14(self) -> Field:\n        \"\"\"\n   \
    \     BR14\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br14\n\n    @br14.setter\n    def br14(self,\
    \ value: int) -> None:\n        self._br14.value = value\n\n    @property\n  \
    \  def br13(self) -> Field:\n        \"\"\"\n        BR13\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br13\n\
    \n    @br13.setter\n    def br13(self, value: int) -> None:\n        self._br13.value\
    \ = value\n\n    @property\n    def br12(self) -> Field:\n        \"\"\"\n   \
    \     BR12\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br12\n\n    @br12.setter\n    def br12(self,\
    \ value: int) -> None:\n        self._br12.value = value\n\n    @property\n  \
    \  def br11(self) -> Field:\n        \"\"\"\n        BR11\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br11\n\
    \n    @br11.setter\n    def br11(self, value: int) -> None:\n        self._br11.value\
    \ = value\n\n    @property\n    def br10(self) -> Field:\n        \"\"\"\n   \
    \     BR10\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br10\n\n    @br10.setter\n    def br10(self,\
    \ value: int) -> None:\n        self._br10.value = value\n\n    @property\n  \
    \  def br9(self) -> Field:\n        \"\"\"\n        BR9\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br9\n\
    \n    @br9.setter\n    def br9(self, value: int) -> None:\n        self._br9.value\
    \ = value\n\n    @property\n    def br8(self) -> Field:\n        \"\"\"\n    \
    \    BR8\n\n        Port x reset bit y (y =\n                  0..15)\n      \
    \  \"\"\"\n        return self._br8\n\n    @br8.setter\n    def br8(self, value:\
    \ int) -> None:\n        self._br8.value = value\n\n    @property\n    def br7(self)\
    \ -> Field:\n        \"\"\"\n        BR7\n\n        Port x reset bit y (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._br7\n\n    @br7.setter\n\
    \    def br7(self, value: int) -> None:\n        self._br7.value = value\n\n \
    \   @property\n    def br6(self) -> Field:\n        \"\"\"\n        BR6\n\n  \
    \      Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._br6\n\n    @br6.setter\n    def br6(self, value: int) -> None:\n\
    \        self._br6.value = value\n\n    @property\n    def br5(self) -> Field:\n\
    \        \"\"\"\n        BR5\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br5\n\n    @br5.setter\n \
    \   def br5(self, value: int) -> None:\n        self._br5.value = value\n\n  \
    \  @property\n    def br4(self) -> Field:\n        \"\"\"\n        BR4\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br4\n\n    @br4.setter\n    def br4(self, value: int) -> None:\n\
    \        self._br4.value = value\n\n    @property\n    def br3(self) -> Field:\n\
    \        \"\"\"\n        BR3\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br3\n\n    @br3.setter\n \
    \   def br3(self, value: int) -> None:\n        self._br3.value = value\n\n  \
    \  @property\n    def br2(self) -> Field:\n        \"\"\"\n        BR2\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br2\n\n    @br2.setter\n    def br2(self, value: int) -> None:\n\
    \        self._br2.value = value\n\n    @property\n    def br1(self) -> Field:\n\
    \        \"\"\"\n        BR1\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br1\n\n    @br1.setter\n \
    \   def br1(self, value: int) -> None:\n        self._br1.value = value\n\n  \
    \  @property\n    def br0(self) -> Field:\n        \"\"\"\n        BR0\n\n   \
    \     Port x set bit y (y=\n                  0..15)\n        \"\"\"\n       \
    \ return self._br0\n\n    @br0.setter\n    def br0(self, value: int) -> None:\n\
    \        self._br0.value = value\n\n    @property\n    def bs15(self) -> Field:\n\
    \        \"\"\"\n        BS15\n\n        Port x set bit y (y=\n              \
    \    0..15)\n        \"\"\"\n        return self._bs15\n\n    @bs15.setter\n \
    \   def bs15(self, value: int) -> None:\n        self._bs15.value = value\n\n\
    \    @property\n    def bs14(self) -> Field:\n        \"\"\"\n        BS14\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs14\n\n    @bs14.setter\n    def bs14(self, value: int) ->\
    \ None:\n        self._bs14.value = value\n\n    @property\n    def bs13(self)\
    \ -> Field:\n        \"\"\"\n        BS13\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs13\n\n    @bs13.setter\n\
    \    def bs13(self, value: int) -> None:\n        self._bs13.value = value\n\n\
    \    @property\n    def bs12(self) -> Field:\n        \"\"\"\n        BS12\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs12\n\n    @bs12.setter\n    def bs12(self, value: int) ->\
    \ None:\n        self._bs12.value = value\n\n    @property\n    def bs11(self)\
    \ -> Field:\n        \"\"\"\n        BS11\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs11\n\n    @bs11.setter\n\
    \    def bs11(self, value: int) -> None:\n        self._bs11.value = value\n\n\
    \    @property\n    def bs10(self) -> Field:\n        \"\"\"\n        BS10\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs10\n\n    @bs10.setter\n    def bs10(self, value: int) ->\
    \ None:\n        self._bs10.value = value\n\n    @property\n    def bs9(self)\
    \ -> Field:\n        \"\"\"\n        BS9\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs9\n\n    @bs9.setter\n\
    \    def bs9(self, value: int) -> None:\n        self._bs9.value = value\n\n \
    \   @property\n    def bs8(self) -> Field:\n        \"\"\"\n        BS8\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs8\n\n    @bs8.setter\n    def bs8(self, value: int) -> None:\n\
    \        self._bs8.value = value\n\n    @property\n    def bs7(self) -> Field:\n\
    \        \"\"\"\n        BS7\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs7\n\n    @bs7.setter\n    def\
    \ bs7(self, value: int) -> None:\n        self._bs7.value = value\n\n    @property\n\
    \    def bs6(self) -> Field:\n        \"\"\"\n        BS6\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs6\n\
    \n    @bs6.setter\n    def bs6(self, value: int) -> None:\n        self._bs6.value\
    \ = value\n\n    @property\n    def bs5(self) -> Field:\n        \"\"\"\n    \
    \    BS5\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs5\n\n    @bs5.setter\n    def bs5(self, value: int)\
    \ -> None:\n        self._bs5.value = value\n\n    @property\n    def bs4(self)\
    \ -> Field:\n        \"\"\"\n        BS4\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs4\n\n    @bs4.setter\n\
    \    def bs4(self, value: int) -> None:\n        self._bs4.value = value\n\n \
    \   @property\n    def bs3(self) -> Field:\n        \"\"\"\n        BS3\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs3\n\n    @bs3.setter\n    def bs3(self, value: int) -> None:\n\
    \        self._bs3.value = value\n\n    @property\n    def bs2(self) -> Field:\n\
    \        \"\"\"\n        BS2\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs2\n\n    @bs2.setter\n    def\
    \ bs2(self, value: int) -> None:\n        self._bs2.value = value\n\n    @property\n\
    \    def bs1(self) -> Field:\n        \"\"\"\n        BS1\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs1\n\
    \n    @bs1.setter\n    def bs1(self, value: int) -> None:\n        self._bs1.value\
    \ = value\n\n    @property\n    def bs0(self) -> Field:\n        \"\"\"\n    \
    \    BS0\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs0\n\n    @bs0.setter\n    def bs0(self, value: int)\
    \ -> None:\n        self._bs0.value = value\n\n\nclass LckrRegister(Register):\n\
    \    \"\"\"\n    LCKR\n\n    GPIO port configuration lock\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lckk = Field(\"lckk\", 16,\
    \ 1)\n        self._lck15 = Field(\"lck15\", 15, 1)\n        self._lck14 = Field(\"\
    lck14\", 14, 1)\n        self._lck13 = Field(\"lck13\", 13, 1)\n        self._lck12\
    \ = Field(\"lck12\", 12, 1)\n        self._lck11 = Field(\"lck11\", 11, 1)\n \
    \       self._lck10 = Field(\"lck10\", 10, 1)\n        self._lck9 = Field(\"lck9\"\
    , 9, 1)\n        self._lck8 = Field(\"lck8\", 8, 1)\n        self._lck7 = Field(\"\
    lck7\", 7, 1)\n        self._lck6 = Field(\"lck6\", 6, 1)\n        self._lck5\
    \ = Field(\"lck5\", 5, 1)\n        self._lck4 = Field(\"lck4\", 4, 1)\n      \
    \  self._lck3 = Field(\"lck3\", 3, 1)\n        self._lck2 = Field(\"lck2\", 2,\
    \ 1)\n        self._lck1 = Field(\"lck1\", 1, 1)\n        self._lck0 = Field(\"\
    lck0\", 0, 1)\n        super().__init__(\"LCKR\", 0x40020C00 + 0x1C)\n\n    @property\n\
    \    def lckk(self) -> Field:\n        \"\"\"\n        LCKK\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lckk\n\
    \n    @lckk.setter\n    def lckk(self, value: int) -> None:\n        self._lckk.value\
    \ = value\n\n    @property\n    def lck15(self) -> Field:\n        \"\"\"\n  \
    \      LCK15\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck15\n\n    @lck15.setter\n    def lck15(self,\
    \ value: int) -> None:\n        self._lck15.value = value\n\n    @property\n \
    \   def lck14(self) -> Field:\n        \"\"\"\n        LCK14\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck14\n\
    \n    @lck14.setter\n    def lck14(self, value: int) -> None:\n        self._lck14.value\
    \ = value\n\n    @property\n    def lck13(self) -> Field:\n        \"\"\"\n  \
    \      LCK13\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck13\n\n    @lck13.setter\n    def lck13(self,\
    \ value: int) -> None:\n        self._lck13.value = value\n\n    @property\n \
    \   def lck12(self) -> Field:\n        \"\"\"\n        LCK12\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck12\n\
    \n    @lck12.setter\n    def lck12(self, value: int) -> None:\n        self._lck12.value\
    \ = value\n\n    @property\n    def lck11(self) -> Field:\n        \"\"\"\n  \
    \      LCK11\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck11\n\n    @lck11.setter\n    def lck11(self,\
    \ value: int) -> None:\n        self._lck11.value = value\n\n    @property\n \
    \   def lck10(self) -> Field:\n        \"\"\"\n        LCK10\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck10\n\
    \n    @lck10.setter\n    def lck10(self, value: int) -> None:\n        self._lck10.value\
    \ = value\n\n    @property\n    def lck9(self) -> Field:\n        \"\"\"\n   \
    \     LCK9\n\n        Port x lock bit y (y=\n                  0..15)\n      \
    \  \"\"\"\n        return self._lck9\n\n    @lck9.setter\n    def lck9(self, value:\
    \ int) -> None:\n        self._lck9.value = value\n\n    @property\n    def lck8(self)\
    \ -> Field:\n        \"\"\"\n        LCK8\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck8\n\n    @lck8.setter\n\
    \    def lck8(self, value: int) -> None:\n        self._lck8.value = value\n\n\
    \    @property\n    def lck7(self) -> Field:\n        \"\"\"\n        LCK7\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck7\n\n    @lck7.setter\n    def lck7(self, value: int) ->\
    \ None:\n        self._lck7.value = value\n\n    @property\n    def lck6(self)\
    \ -> Field:\n        \"\"\"\n        LCK6\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck6\n\n    @lck6.setter\n\
    \    def lck6(self, value: int) -> None:\n        self._lck6.value = value\n\n\
    \    @property\n    def lck5(self) -> Field:\n        \"\"\"\n        LCK5\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck5\n\n    @lck5.setter\n    def lck5(self, value: int) ->\
    \ None:\n        self._lck5.value = value\n\n    @property\n    def lck4(self)\
    \ -> Field:\n        \"\"\"\n        LCK4\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck4\n\n    @lck4.setter\n\
    \    def lck4(self, value: int) -> None:\n        self._lck4.value = value\n\n\
    \    @property\n    def lck3(self) -> Field:\n        \"\"\"\n        LCK3\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck3\n\n    @lck3.setter\n    def lck3(self, value: int) ->\
    \ None:\n        self._lck3.value = value\n\n    @property\n    def lck2(self)\
    \ -> Field:\n        \"\"\"\n        LCK2\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck2\n\n    @lck2.setter\n\
    \    def lck2(self, value: int) -> None:\n        self._lck2.value = value\n\n\
    \    @property\n    def lck1(self) -> Field:\n        \"\"\"\n        LCK1\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck1\n\n    @lck1.setter\n    def lck1(self, value: int) ->\
    \ None:\n        self._lck1.value = value\n\n    @property\n    def lck0(self)\
    \ -> Field:\n        \"\"\"\n        LCK0\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck0\n\n    @lck0.setter\n\
    \    def lck0(self, value: int) -> None:\n        self._lck0.value = value\n\n\
    \nclass AfrlRegister(Register):\n    \"\"\"\n    AFRL\n\n    GPIO alternate function\
    \ low\n              register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._afrl7 = Field(\"afrl7\", 28, 4)\n        self._afrl6 = Field(\"afrl6\"\
    , 24, 4)\n        self._afrl5 = Field(\"afrl5\", 20, 4)\n        self._afrl4 =\
    \ Field(\"afrl4\", 16, 4)\n        self._afrl3 = Field(\"afrl3\", 12, 4)\n   \
    \     self._afrl2 = Field(\"afrl2\", 8, 4)\n        self._afrl1 = Field(\"afrl1\"\
    , 4, 4)\n        self._afrl0 = Field(\"afrl0\", 0, 4)\n        super().__init__(\"\
    AFRL\", 0x40020C00 + 0x20)\n\n    @property\n    def afrl7(self) -> Field:\n \
    \       \"\"\"\n        AFRL7\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 0..7)\n        \"\"\"\n        return self._afrl7\n\
    \n    @afrl7.setter\n    def afrl7(self, value: int) -> None:\n        self._afrl7.value\
    \ = value\n\n    @property\n    def afrl6(self) -> Field:\n        \"\"\"\n  \
    \      AFRL6\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 0..7)\n        \"\"\"\n        return self._afrl6\n\n    @afrl6.setter\n\
    \    def afrl6(self, value: int) -> None:\n        self._afrl6.value = value\n\
    \n    @property\n    def afrl5(self) -> Field:\n        \"\"\"\n        AFRL5\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl5\n\n    @afrl5.setter\n \
    \   def afrl5(self, value: int) -> None:\n        self._afrl5.value = value\n\n\
    \    @property\n    def afrl4(self) -> Field:\n        \"\"\"\n        AFRL4\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl4\n\n    @afrl4.setter\n \
    \   def afrl4(self, value: int) -> None:\n        self._afrl4.value = value\n\n\
    \    @property\n    def afrl3(self) -> Field:\n        \"\"\"\n        AFRL3\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl3\n\n    @afrl3.setter\n \
    \   def afrl3(self, value: int) -> None:\n        self._afrl3.value = value\n\n\
    \    @property\n    def afrl2(self) -> Field:\n        \"\"\"\n        AFRL2\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl2\n\n    @afrl2.setter\n \
    \   def afrl2(self, value: int) -> None:\n        self._afrl2.value = value\n\n\
    \    @property\n    def afrl1(self) -> Field:\n        \"\"\"\n        AFRL1\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl1\n\n    @afrl1.setter\n \
    \   def afrl1(self, value: int) -> None:\n        self._afrl1.value = value\n\n\
    \    @property\n    def afrl0(self) -> Field:\n        \"\"\"\n        AFRL0\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl0\n\n    @afrl0.setter\n \
    \   def afrl0(self, value: int) -> None:\n        self._afrl0.value = value\n\n\
    \nclass AfrhRegister(Register):\n    \"\"\"\n    AFRH\n\n    GPIO alternate function\
    \ high\n              register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._afrh15 = Field(\"afrh15\", 28, 4)\n        self._afrh14 = Field(\"afrh14\"\
    , 24, 4)\n        self._afrh13 = Field(\"afrh13\", 20, 4)\n        self._afrh12\
    \ = Field(\"afrh12\", 16, 4)\n        self._afrh11 = Field(\"afrh11\", 12, 4)\n\
    \        self._afrh10 = Field(\"afrh10\", 8, 4)\n        self._afrh9 = Field(\"\
    afrh9\", 4, 4)\n        self._afrh8 = Field(\"afrh8\", 0, 4)\n        super().__init__(\"\
    AFRH\", 0x40020C00 + 0x24)\n\n    @property\n    def afrh15(self) -> Field:\n\
    \        \"\"\"\n        AFRH15\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 8..15)\n        \"\"\"\n        return self._afrh15\n\
    \n    @afrh15.setter\n    def afrh15(self, value: int) -> None:\n        self._afrh15.value\
    \ = value\n\n    @property\n    def afrh14(self) -> Field:\n        \"\"\"\n \
    \       AFRH14\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh14\n\n  \
    \  @afrh14.setter\n    def afrh14(self, value: int) -> None:\n        self._afrh14.value\
    \ = value\n\n    @property\n    def afrh13(self) -> Field:\n        \"\"\"\n \
    \       AFRH13\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh13\n\n  \
    \  @afrh13.setter\n    def afrh13(self, value: int) -> None:\n        self._afrh13.value\
    \ = value\n\n    @property\n    def afrh12(self) -> Field:\n        \"\"\"\n \
    \       AFRH12\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh12\n\n  \
    \  @afrh12.setter\n    def afrh12(self, value: int) -> None:\n        self._afrh12.value\
    \ = value\n\n    @property\n    def afrh11(self) -> Field:\n        \"\"\"\n \
    \       AFRH11\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh11\n\n  \
    \  @afrh11.setter\n    def afrh11(self, value: int) -> None:\n        self._afrh11.value\
    \ = value\n\n    @property\n    def afrh10(self) -> Field:\n        \"\"\"\n \
    \       AFRH10\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh10\n\n  \
    \  @afrh10.setter\n    def afrh10(self, value: int) -> None:\n        self._afrh10.value\
    \ = value\n\n    @property\n    def afrh9(self) -> Field:\n        \"\"\"\n  \
    \      AFRH9\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 8..15)\n        \"\"\"\n        return self._afrh9\n\n    @afrh9.setter\n\
    \    def afrh9(self, value: int) -> None:\n        self._afrh9.value = value\n\
    \n    @property\n    def afrh8(self) -> Field:\n        \"\"\"\n        AFRH8\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 8..15)\n        \"\"\"\n        return self._afrh8\n\n    @afrh8.setter\n\
    \    def afrh8(self, value: int) -> None:\n        self._afrh8.value = value\n\
    \n\nclass Gpiod(Peripheral):\n    \"\"\"\n    GPIOD\n\n    General-purpose I/Os\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._moder = ModerRegister()\n\
    \        self._otyper = OtyperRegister()\n        self._ospeedr = OspeedrRegister()\n\
    \        self._pupdr = PupdrRegister()\n        self._idr = IdrRegister()\n  \
    \      self._odr = OdrRegister()\n        self._bsrr = BsrrRegister()\n      \
    \  self._lckr = LckrRegister()\n        self._afrl = AfrlRegister()\n        self._afrh\
    \ = AfrhRegister()\n        super().__init__(\"gpiod\", 0x40020C00)\n\n    @property\n\
    \    def moder(self) -> ModerRegister:\n        return self._moder\n\n    @moder.setter\n\
    \    def moder(self, value: int) -> None:\n        self._moder.value = value\n\
    \n    @property\n    def otyper(self) -> OtyperRegister:\n        return self._otyper\n\
    \n    @otyper.setter\n    def otyper(self, value: int) -> None:\n        self._otyper.value\
    \ = value\n\n    @property\n    def ospeedr(self) -> OspeedrRegister:\n      \
    \  return self._ospeedr\n\n    @ospeedr.setter\n    def ospeedr(self, value: int)\
    \ -> None:\n        self._ospeedr.value = value\n\n    @property\n    def pupdr(self)\
    \ -> PupdrRegister:\n        return self._pupdr\n\n    @pupdr.setter\n    def\
    \ pupdr(self, value: int) -> None:\n        self._pupdr.value = value\n\n    @property\n\
    \    def idr(self) -> IdrRegister:\n        return self._idr\n\n    @idr.setter\n\
    \    def idr(self, value: int) -> None:\n        self._idr.value = value\n\n \
    \   @property\n    def odr(self) -> OdrRegister:\n        return self._odr\n\n\
    \    @odr.setter\n    def odr(self, value: int) -> None:\n        self._odr.value\
    \ = value\n\n    @property\n    def bsrr(self) -> BsrrRegister:\n        return\
    \ self._bsrr\n\n    @bsrr.setter\n    def bsrr(self, value: int) -> None:\n  \
    \      self._bsrr.value = value\n\n    @property\n    def lckr(self) -> LckrRegister:\n\
    \        return self._lckr\n\n    @lckr.setter\n    def lckr(self, value: int)\
    \ -> None:\n        self._lckr.value = value\n\n    @property\n    def afrl(self)\
    \ -> AfrlRegister:\n        return self._afrl\n\n    @afrl.setter\n    def afrl(self,\
    \ value: int) -> None:\n        self._afrl.value = value\n\n    @property\n  \
    \  def afrh(self) -> AfrhRegister:\n        return self._afrh\n\n    @afrh.setter\n\
    \    def afrh(self, value: int) -> None:\n        self._afrh.value = value\n"
  name: GPIOD
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ModerRegister(Register):\n    \"\"\"\n    MODER\n\n    GPIO\
    \ port mode register\n    \"\"\"\n\n    def __init__(self):\n        self._moder15\
    \ = Field(\"moder15\", 30, 2)\n        self._moder14 = Field(\"moder14\", 28,\
    \ 2)\n        self._moder13 = Field(\"moder13\", 26, 2)\n        self._moder12\
    \ = Field(\"moder12\", 24, 2)\n        self._moder11 = Field(\"moder11\", 22,\
    \ 2)\n        self._moder10 = Field(\"moder10\", 20, 2)\n        self._moder9\
    \ = Field(\"moder9\", 18, 2)\n        self._moder8 = Field(\"moder8\", 16, 2)\n\
    \        self._moder7 = Field(\"moder7\", 14, 2)\n        self._moder6 = Field(\"\
    moder6\", 12, 2)\n        self._moder5 = Field(\"moder5\", 10, 2)\n        self._moder4\
    \ = Field(\"moder4\", 8, 2)\n        self._moder3 = Field(\"moder3\", 6, 2)\n\
    \        self._moder2 = Field(\"moder2\", 4, 2)\n        self._moder1 = Field(\"\
    moder1\", 2, 2)\n        self._moder0 = Field(\"moder0\", 0, 2)\n        super().__init__(\"\
    MODER\", 0x40020800 + 0x0)\n\n    @property\n    def moder15(self) -> Field:\n\
    \        \"\"\"\n        MODER15\n\n        Port x configuration bits (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._moder15\n\n   \
    \ @moder15.setter\n    def moder15(self, value: int) -> None:\n        self._moder15.value\
    \ = value\n\n    @property\n    def moder14(self) -> Field:\n        \"\"\"\n\
    \        MODER14\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder14\n\n    @moder14.setter\n\
    \    def moder14(self, value: int) -> None:\n        self._moder14.value = value\n\
    \n    @property\n    def moder13(self) -> Field:\n        \"\"\"\n        MODER13\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder13\n\n    @moder13.setter\n    def moder13(self,\
    \ value: int) -> None:\n        self._moder13.value = value\n\n    @property\n\
    \    def moder12(self) -> Field:\n        \"\"\"\n        MODER12\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder12\n\n    @moder12.setter\n    def moder12(self, value: int)\
    \ -> None:\n        self._moder12.value = value\n\n    @property\n    def moder11(self)\
    \ -> Field:\n        \"\"\"\n        MODER11\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder11\n\
    \n    @moder11.setter\n    def moder11(self, value: int) -> None:\n        self._moder11.value\
    \ = value\n\n    @property\n    def moder10(self) -> Field:\n        \"\"\"\n\
    \        MODER10\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder10\n\n    @moder10.setter\n\
    \    def moder10(self, value: int) -> None:\n        self._moder10.value = value\n\
    \n    @property\n    def moder9(self) -> Field:\n        \"\"\"\n        MODER9\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder9\n\n    @moder9.setter\n    def moder9(self,\
    \ value: int) -> None:\n        self._moder9.value = value\n\n    @property\n\
    \    def moder8(self) -> Field:\n        \"\"\"\n        MODER8\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder8\n\n    @moder8.setter\n    def moder8(self, value: int)\
    \ -> None:\n        self._moder8.value = value\n\n    @property\n    def moder7(self)\
    \ -> Field:\n        \"\"\"\n        MODER7\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder7\n\
    \n    @moder7.setter\n    def moder7(self, value: int) -> None:\n        self._moder7.value\
    \ = value\n\n    @property\n    def moder6(self) -> Field:\n        \"\"\"\n \
    \       MODER6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder6\n\n    @moder6.setter\n    def moder6(self,\
    \ value: int) -> None:\n        self._moder6.value = value\n\n    @property\n\
    \    def moder5(self) -> Field:\n        \"\"\"\n        MODER5\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder5\n\n    @moder5.setter\n    def moder5(self, value: int)\
    \ -> None:\n        self._moder5.value = value\n\n    @property\n    def moder4(self)\
    \ -> Field:\n        \"\"\"\n        MODER4\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder4\n\
    \n    @moder4.setter\n    def moder4(self, value: int) -> None:\n        self._moder4.value\
    \ = value\n\n    @property\n    def moder3(self) -> Field:\n        \"\"\"\n \
    \       MODER3\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder3\n\n    @moder3.setter\n    def moder3(self,\
    \ value: int) -> None:\n        self._moder3.value = value\n\n    @property\n\
    \    def moder2(self) -> Field:\n        \"\"\"\n        MODER2\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder2\n\n    @moder2.setter\n    def moder2(self, value: int)\
    \ -> None:\n        self._moder2.value = value\n\n    @property\n    def moder1(self)\
    \ -> Field:\n        \"\"\"\n        MODER1\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder1\n\
    \n    @moder1.setter\n    def moder1(self, value: int) -> None:\n        self._moder1.value\
    \ = value\n\n    @property\n    def moder0(self) -> Field:\n        \"\"\"\n \
    \       MODER0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder0\n\n    @moder0.setter\n    def moder0(self,\
    \ value: int) -> None:\n        self._moder0.value = value\n\n\nclass OtyperRegister(Register):\n\
    \    \"\"\"\n    OTYPER\n\n    GPIO port output type register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._ot15 = Field(\"ot15\", 15, 1)\n      \
    \  self._ot14 = Field(\"ot14\", 14, 1)\n        self._ot13 = Field(\"ot13\", 13,\
    \ 1)\n        self._ot12 = Field(\"ot12\", 12, 1)\n        self._ot11 = Field(\"\
    ot11\", 11, 1)\n        self._ot10 = Field(\"ot10\", 10, 1)\n        self._ot9\
    \ = Field(\"ot9\", 9, 1)\n        self._ot8 = Field(\"ot8\", 8, 1)\n        self._ot7\
    \ = Field(\"ot7\", 7, 1)\n        self._ot6 = Field(\"ot6\", 6, 1)\n        self._ot5\
    \ = Field(\"ot5\", 5, 1)\n        self._ot4 = Field(\"ot4\", 4, 1)\n        self._ot3\
    \ = Field(\"ot3\", 3, 1)\n        self._ot2 = Field(\"ot2\", 2, 1)\n        self._ot1\
    \ = Field(\"ot1\", 1, 1)\n        self._ot0 = Field(\"ot0\", 0, 1)\n        super().__init__(\"\
    OTYPER\", 0x40020800 + 0x4)\n\n    @property\n    def ot15(self) -> Field:\n \
    \       \"\"\"\n        OT15\n\n        Port x configuration bits (y =\n     \
    \             0..15)\n        \"\"\"\n        return self._ot15\n\n    @ot15.setter\n\
    \    def ot15(self, value: int) -> None:\n        self._ot15.value = value\n\n\
    \    @property\n    def ot14(self) -> Field:\n        \"\"\"\n        OT14\n\n\
    \        Port x configuration bits (y =\n                  0..15)\n        \"\"\
    \"\n        return self._ot14\n\n    @ot14.setter\n    def ot14(self, value: int)\
    \ -> None:\n        self._ot14.value = value\n\n    @property\n    def ot13(self)\
    \ -> Field:\n        \"\"\"\n        OT13\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._ot13\n\n\
    \    @ot13.setter\n    def ot13(self, value: int) -> None:\n        self._ot13.value\
    \ = value\n\n    @property\n    def ot12(self) -> Field:\n        \"\"\"\n   \
    \     OT12\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot12\n\n    @ot12.setter\n    def ot12(self,\
    \ value: int) -> None:\n        self._ot12.value = value\n\n    @property\n  \
    \  def ot11(self) -> Field:\n        \"\"\"\n        OT11\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot11\n\
    \n    @ot11.setter\n    def ot11(self, value: int) -> None:\n        self._ot11.value\
    \ = value\n\n    @property\n    def ot10(self) -> Field:\n        \"\"\"\n   \
    \     OT10\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot10\n\n    @ot10.setter\n    def ot10(self,\
    \ value: int) -> None:\n        self._ot10.value = value\n\n    @property\n  \
    \  def ot9(self) -> Field:\n        \"\"\"\n        OT9\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot9\n\
    \n    @ot9.setter\n    def ot9(self, value: int) -> None:\n        self._ot9.value\
    \ = value\n\n    @property\n    def ot8(self) -> Field:\n        \"\"\"\n    \
    \    OT8\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot8\n\n    @ot8.setter\n    def ot8(self,\
    \ value: int) -> None:\n        self._ot8.value = value\n\n    @property\n   \
    \ def ot7(self) -> Field:\n        \"\"\"\n        OT7\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot7\n\
    \n    @ot7.setter\n    def ot7(self, value: int) -> None:\n        self._ot7.value\
    \ = value\n\n    @property\n    def ot6(self) -> Field:\n        \"\"\"\n    \
    \    OT6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot6\n\n    @ot6.setter\n    def ot6(self,\
    \ value: int) -> None:\n        self._ot6.value = value\n\n    @property\n   \
    \ def ot5(self) -> Field:\n        \"\"\"\n        OT5\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot5\n\
    \n    @ot5.setter\n    def ot5(self, value: int) -> None:\n        self._ot5.value\
    \ = value\n\n    @property\n    def ot4(self) -> Field:\n        \"\"\"\n    \
    \    OT4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot4\n\n    @ot4.setter\n    def ot4(self,\
    \ value: int) -> None:\n        self._ot4.value = value\n\n    @property\n   \
    \ def ot3(self) -> Field:\n        \"\"\"\n        OT3\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot3\n\
    \n    @ot3.setter\n    def ot3(self, value: int) -> None:\n        self._ot3.value\
    \ = value\n\n    @property\n    def ot2(self) -> Field:\n        \"\"\"\n    \
    \    OT2\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot2\n\n    @ot2.setter\n    def ot2(self,\
    \ value: int) -> None:\n        self._ot2.value = value\n\n    @property\n   \
    \ def ot1(self) -> Field:\n        \"\"\"\n        OT1\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot1\n\
    \n    @ot1.setter\n    def ot1(self, value: int) -> None:\n        self._ot1.value\
    \ = value\n\n    @property\n    def ot0(self) -> Field:\n        \"\"\"\n    \
    \    OT0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot0\n\n    @ot0.setter\n    def ot0(self,\
    \ value: int) -> None:\n        self._ot0.value = value\n\n\nclass OspeedrRegister(Register):\n\
    \    \"\"\"\n    OSPEEDR\n\n    GPIO port output speed\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ospeedr15 = Field(\"ospeedr15\"\
    , 30, 2)\n        self._ospeedr14 = Field(\"ospeedr14\", 28, 2)\n        self._ospeedr13\
    \ = Field(\"ospeedr13\", 26, 2)\n        self._ospeedr12 = Field(\"ospeedr12\"\
    , 24, 2)\n        self._ospeedr11 = Field(\"ospeedr11\", 22, 2)\n        self._ospeedr10\
    \ = Field(\"ospeedr10\", 20, 2)\n        self._ospeedr9 = Field(\"ospeedr9\",\
    \ 18, 2)\n        self._ospeedr8 = Field(\"ospeedr8\", 16, 2)\n        self._ospeedr7\
    \ = Field(\"ospeedr7\", 14, 2)\n        self._ospeedr6 = Field(\"ospeedr6\", 12,\
    \ 2)\n        self._ospeedr5 = Field(\"ospeedr5\", 10, 2)\n        self._ospeedr4\
    \ = Field(\"ospeedr4\", 8, 2)\n        self._ospeedr3 = Field(\"ospeedr3\", 6,\
    \ 2)\n        self._ospeedr2 = Field(\"ospeedr2\", 4, 2)\n        self._ospeedr1\
    \ = Field(\"ospeedr1\", 2, 2)\n        self._ospeedr0 = Field(\"ospeedr0\", 0,\
    \ 2)\n        super().__init__(\"OSPEEDR\", 0x40020800 + 0x8)\n\n    @property\n\
    \    def ospeedr15(self) -> Field:\n        \"\"\"\n        OSPEEDR15\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr15\n\n    @ospeedr15.setter\n    def ospeedr15(self,\
    \ value: int) -> None:\n        self._ospeedr15.value = value\n\n    @property\n\
    \    def ospeedr14(self) -> Field:\n        \"\"\"\n        OSPEEDR14\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr14\n\n    @ospeedr14.setter\n    def ospeedr14(self,\
    \ value: int) -> None:\n        self._ospeedr14.value = value\n\n    @property\n\
    \    def ospeedr13(self) -> Field:\n        \"\"\"\n        OSPEEDR13\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr13\n\n    @ospeedr13.setter\n    def ospeedr13(self,\
    \ value: int) -> None:\n        self._ospeedr13.value = value\n\n    @property\n\
    \    def ospeedr12(self) -> Field:\n        \"\"\"\n        OSPEEDR12\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr12\n\n    @ospeedr12.setter\n    def ospeedr12(self,\
    \ value: int) -> None:\n        self._ospeedr12.value = value\n\n    @property\n\
    \    def ospeedr11(self) -> Field:\n        \"\"\"\n        OSPEEDR11\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr11\n\n    @ospeedr11.setter\n    def ospeedr11(self,\
    \ value: int) -> None:\n        self._ospeedr11.value = value\n\n    @property\n\
    \    def ospeedr10(self) -> Field:\n        \"\"\"\n        OSPEEDR10\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr10\n\n    @ospeedr10.setter\n    def ospeedr10(self,\
    \ value: int) -> None:\n        self._ospeedr10.value = value\n\n    @property\n\
    \    def ospeedr9(self) -> Field:\n        \"\"\"\n        OSPEEDR9\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr9\n\n    @ospeedr9.setter\n    def ospeedr9(self,\
    \ value: int) -> None:\n        self._ospeedr9.value = value\n\n    @property\n\
    \    def ospeedr8(self) -> Field:\n        \"\"\"\n        OSPEEDR8\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr8\n\n    @ospeedr8.setter\n    def ospeedr8(self,\
    \ value: int) -> None:\n        self._ospeedr8.value = value\n\n    @property\n\
    \    def ospeedr7(self) -> Field:\n        \"\"\"\n        OSPEEDR7\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr7\n\n    @ospeedr7.setter\n    def ospeedr7(self,\
    \ value: int) -> None:\n        self._ospeedr7.value = value\n\n    @property\n\
    \    def ospeedr6(self) -> Field:\n        \"\"\"\n        OSPEEDR6\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr6\n\n    @ospeedr6.setter\n    def ospeedr6(self,\
    \ value: int) -> None:\n        self._ospeedr6.value = value\n\n    @property\n\
    \    def ospeedr5(self) -> Field:\n        \"\"\"\n        OSPEEDR5\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr5\n\n    @ospeedr5.setter\n    def ospeedr5(self,\
    \ value: int) -> None:\n        self._ospeedr5.value = value\n\n    @property\n\
    \    def ospeedr4(self) -> Field:\n        \"\"\"\n        OSPEEDR4\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr4\n\n    @ospeedr4.setter\n    def ospeedr4(self,\
    \ value: int) -> None:\n        self._ospeedr4.value = value\n\n    @property\n\
    \    def ospeedr3(self) -> Field:\n        \"\"\"\n        OSPEEDR3\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr3\n\n    @ospeedr3.setter\n    def ospeedr3(self,\
    \ value: int) -> None:\n        self._ospeedr3.value = value\n\n    @property\n\
    \    def ospeedr2(self) -> Field:\n        \"\"\"\n        OSPEEDR2\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr2\n\n    @ospeedr2.setter\n    def ospeedr2(self,\
    \ value: int) -> None:\n        self._ospeedr2.value = value\n\n    @property\n\
    \    def ospeedr1(self) -> Field:\n        \"\"\"\n        OSPEEDR1\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr1\n\n    @ospeedr1.setter\n    def ospeedr1(self,\
    \ value: int) -> None:\n        self._ospeedr1.value = value\n\n    @property\n\
    \    def ospeedr0(self) -> Field:\n        \"\"\"\n        OSPEEDR0\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr0\n\n    @ospeedr0.setter\n    def ospeedr0(self,\
    \ value: int) -> None:\n        self._ospeedr0.value = value\n\n\nclass PupdrRegister(Register):\n\
    \    \"\"\"\n    PUPDR\n\n    GPIO port pull-up/pull-down\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pupdr15 = Field(\"pupdr15\"\
    , 30, 2)\n        self._pupdr14 = Field(\"pupdr14\", 28, 2)\n        self._pupdr13\
    \ = Field(\"pupdr13\", 26, 2)\n        self._pupdr12 = Field(\"pupdr12\", 24,\
    \ 2)\n        self._pupdr11 = Field(\"pupdr11\", 22, 2)\n        self._pupdr10\
    \ = Field(\"pupdr10\", 20, 2)\n        self._pupdr9 = Field(\"pupdr9\", 18, 2)\n\
    \        self._pupdr8 = Field(\"pupdr8\", 16, 2)\n        self._pupdr7 = Field(\"\
    pupdr7\", 14, 2)\n        self._pupdr6 = Field(\"pupdr6\", 12, 2)\n        self._pupdr5\
    \ = Field(\"pupdr5\", 10, 2)\n        self._pupdr4 = Field(\"pupdr4\", 8, 2)\n\
    \        self._pupdr3 = Field(\"pupdr3\", 6, 2)\n        self._pupdr2 = Field(\"\
    pupdr2\", 4, 2)\n        self._pupdr1 = Field(\"pupdr1\", 2, 2)\n        self._pupdr0\
    \ = Field(\"pupdr0\", 0, 2)\n        super().__init__(\"PUPDR\", 0x40020800 +\
    \ 0xC)\n\n    @property\n    def pupdr15(self) -> Field:\n        \"\"\"\n   \
    \     PUPDR15\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr15\n\n    @pupdr15.setter\n    def\
    \ pupdr15(self, value: int) -> None:\n        self._pupdr15.value = value\n\n\
    \    @property\n    def pupdr14(self) -> Field:\n        \"\"\"\n        PUPDR14\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr14\n\n    @pupdr14.setter\n    def pupdr14(self,\
    \ value: int) -> None:\n        self._pupdr14.value = value\n\n    @property\n\
    \    def pupdr13(self) -> Field:\n        \"\"\"\n        PUPDR13\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr13\n\n    @pupdr13.setter\n    def pupdr13(self, value: int)\
    \ -> None:\n        self._pupdr13.value = value\n\n    @property\n    def pupdr12(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR12\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr12\n\
    \n    @pupdr12.setter\n    def pupdr12(self, value: int) -> None:\n        self._pupdr12.value\
    \ = value\n\n    @property\n    def pupdr11(self) -> Field:\n        \"\"\"\n\
    \        PUPDR11\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._pupdr11\n\n    @pupdr11.setter\n\
    \    def pupdr11(self, value: int) -> None:\n        self._pupdr11.value = value\n\
    \n    @property\n    def pupdr10(self) -> Field:\n        \"\"\"\n        PUPDR10\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr10\n\n    @pupdr10.setter\n    def pupdr10(self,\
    \ value: int) -> None:\n        self._pupdr10.value = value\n\n    @property\n\
    \    def pupdr9(self) -> Field:\n        \"\"\"\n        PUPDR9\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr9\n\n    @pupdr9.setter\n    def pupdr9(self, value: int)\
    \ -> None:\n        self._pupdr9.value = value\n\n    @property\n    def pupdr8(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR8\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr8\n\
    \n    @pupdr8.setter\n    def pupdr8(self, value: int) -> None:\n        self._pupdr8.value\
    \ = value\n\n    @property\n    def pupdr7(self) -> Field:\n        \"\"\"\n \
    \       PUPDR7\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr7\n\n    @pupdr7.setter\n    def pupdr7(self,\
    \ value: int) -> None:\n        self._pupdr7.value = value\n\n    @property\n\
    \    def pupdr6(self) -> Field:\n        \"\"\"\n        PUPDR6\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr6\n\n    @pupdr6.setter\n    def pupdr6(self, value: int)\
    \ -> None:\n        self._pupdr6.value = value\n\n    @property\n    def pupdr5(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR5\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr5\n\
    \n    @pupdr5.setter\n    def pupdr5(self, value: int) -> None:\n        self._pupdr5.value\
    \ = value\n\n    @property\n    def pupdr4(self) -> Field:\n        \"\"\"\n \
    \       PUPDR4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr4\n\n    @pupdr4.setter\n    def pupdr4(self,\
    \ value: int) -> None:\n        self._pupdr4.value = value\n\n    @property\n\
    \    def pupdr3(self) -> Field:\n        \"\"\"\n        PUPDR3\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr3\n\n    @pupdr3.setter\n    def pupdr3(self, value: int)\
    \ -> None:\n        self._pupdr3.value = value\n\n    @property\n    def pupdr2(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR2\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr2\n\
    \n    @pupdr2.setter\n    def pupdr2(self, value: int) -> None:\n        self._pupdr2.value\
    \ = value\n\n    @property\n    def pupdr1(self) -> Field:\n        \"\"\"\n \
    \       PUPDR1\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr1\n\n    @pupdr1.setter\n    def pupdr1(self,\
    \ value: int) -> None:\n        self._pupdr1.value = value\n\n    @property\n\
    \    def pupdr0(self) -> Field:\n        \"\"\"\n        PUPDR0\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr0\n\n    @pupdr0.setter\n    def pupdr0(self, value: int)\
    \ -> None:\n        self._pupdr0.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    GPIO port input data register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._idr15 = Field(\"idr15\", 15, 1)\n        self._idr14\
    \ = Field(\"idr14\", 14, 1)\n        self._idr13 = Field(\"idr13\", 13, 1)\n \
    \       self._idr12 = Field(\"idr12\", 12, 1)\n        self._idr11 = Field(\"\
    idr11\", 11, 1)\n        self._idr10 = Field(\"idr10\", 10, 1)\n        self._idr9\
    \ = Field(\"idr9\", 9, 1)\n        self._idr8 = Field(\"idr8\", 8, 1)\n      \
    \  self._idr7 = Field(\"idr7\", 7, 1)\n        self._idr6 = Field(\"idr6\", 6,\
    \ 1)\n        self._idr5 = Field(\"idr5\", 5, 1)\n        self._idr4 = Field(\"\
    idr4\", 4, 1)\n        self._idr3 = Field(\"idr3\", 3, 1)\n        self._idr2\
    \ = Field(\"idr2\", 2, 1)\n        self._idr1 = Field(\"idr1\", 1, 1)\n      \
    \  self._idr0 = Field(\"idr0\", 0, 1)\n        super().__init__(\"IDR\", 0x40020800\
    \ + 0x10)\n\n    @property\n    def idr15(self) -> Field:\n        \"\"\"\n  \
    \      IDR15\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr15\n\n    @idr15.setter\n    def idr15(self,\
    \ value: int) -> None:\n        self._idr15.value = value\n\n    @property\n \
    \   def idr14(self) -> Field:\n        \"\"\"\n        IDR14\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr14\n\
    \n    @idr14.setter\n    def idr14(self, value: int) -> None:\n        self._idr14.value\
    \ = value\n\n    @property\n    def idr13(self) -> Field:\n        \"\"\"\n  \
    \      IDR13\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr13\n\n    @idr13.setter\n    def idr13(self,\
    \ value: int) -> None:\n        self._idr13.value = value\n\n    @property\n \
    \   def idr12(self) -> Field:\n        \"\"\"\n        IDR12\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr12\n\
    \n    @idr12.setter\n    def idr12(self, value: int) -> None:\n        self._idr12.value\
    \ = value\n\n    @property\n    def idr11(self) -> Field:\n        \"\"\"\n  \
    \      IDR11\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr11\n\n    @idr11.setter\n    def idr11(self,\
    \ value: int) -> None:\n        self._idr11.value = value\n\n    @property\n \
    \   def idr10(self) -> Field:\n        \"\"\"\n        IDR10\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr10\n\
    \n    @idr10.setter\n    def idr10(self, value: int) -> None:\n        self._idr10.value\
    \ = value\n\n    @property\n    def idr9(self) -> Field:\n        \"\"\"\n   \
    \     IDR9\n\n        Port input data (y =\n                  0..15)\n       \
    \ \"\"\"\n        return self._idr9\n\n    @idr9.setter\n    def idr9(self, value:\
    \ int) -> None:\n        self._idr9.value = value\n\n    @property\n    def idr8(self)\
    \ -> Field:\n        \"\"\"\n        IDR8\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr8\n\n    @idr8.setter\n\
    \    def idr8(self, value: int) -> None:\n        self._idr8.value = value\n\n\
    \    @property\n    def idr7(self) -> Field:\n        \"\"\"\n        IDR7\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr7\n\n    @idr7.setter\n    def idr7(self, value: int) ->\
    \ None:\n        self._idr7.value = value\n\n    @property\n    def idr6(self)\
    \ -> Field:\n        \"\"\"\n        IDR6\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr6\n\n    @idr6.setter\n\
    \    def idr6(self, value: int) -> None:\n        self._idr6.value = value\n\n\
    \    @property\n    def idr5(self) -> Field:\n        \"\"\"\n        IDR5\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr5\n\n    @idr5.setter\n    def idr5(self, value: int) ->\
    \ None:\n        self._idr5.value = value\n\n    @property\n    def idr4(self)\
    \ -> Field:\n        \"\"\"\n        IDR4\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr4\n\n    @idr4.setter\n\
    \    def idr4(self, value: int) -> None:\n        self._idr4.value = value\n\n\
    \    @property\n    def idr3(self) -> Field:\n        \"\"\"\n        IDR3\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr3\n\n    @idr3.setter\n    def idr3(self, value: int) ->\
    \ None:\n        self._idr3.value = value\n\n    @property\n    def idr2(self)\
    \ -> Field:\n        \"\"\"\n        IDR2\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr2\n\n    @idr2.setter\n\
    \    def idr2(self, value: int) -> None:\n        self._idr2.value = value\n\n\
    \    @property\n    def idr1(self) -> Field:\n        \"\"\"\n        IDR1\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr1\n\n    @idr1.setter\n    def idr1(self, value: int) ->\
    \ None:\n        self._idr1.value = value\n\n    @property\n    def idr0(self)\
    \ -> Field:\n        \"\"\"\n        IDR0\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr0\n\n    @idr0.setter\n\
    \    def idr0(self, value: int) -> None:\n        self._idr0.value = value\n\n\
    \nclass OdrRegister(Register):\n    \"\"\"\n    ODR\n\n    GPIO port output data\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._odr15 = Field(\"\
    odr15\", 15, 1)\n        self._odr14 = Field(\"odr14\", 14, 1)\n        self._odr13\
    \ = Field(\"odr13\", 13, 1)\n        self._odr12 = Field(\"odr12\", 12, 1)\n \
    \       self._odr11 = Field(\"odr11\", 11, 1)\n        self._odr10 = Field(\"\
    odr10\", 10, 1)\n        self._odr9 = Field(\"odr9\", 9, 1)\n        self._odr8\
    \ = Field(\"odr8\", 8, 1)\n        self._odr7 = Field(\"odr7\", 7, 1)\n      \
    \  self._odr6 = Field(\"odr6\", 6, 1)\n        self._odr5 = Field(\"odr5\", 5,\
    \ 1)\n        self._odr4 = Field(\"odr4\", 4, 1)\n        self._odr3 = Field(\"\
    odr3\", 3, 1)\n        self._odr2 = Field(\"odr2\", 2, 1)\n        self._odr1\
    \ = Field(\"odr1\", 1, 1)\n        self._odr0 = Field(\"odr0\", 0, 1)\n      \
    \  super().__init__(\"ODR\", 0x40020800 + 0x14)\n\n    @property\n    def odr15(self)\
    \ -> Field:\n        \"\"\"\n        ODR15\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr15\n\n    @odr15.setter\n\
    \    def odr15(self, value: int) -> None:\n        self._odr15.value = value\n\
    \n    @property\n    def odr14(self) -> Field:\n        \"\"\"\n        ODR14\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr14\n\n    @odr14.setter\n    def odr14(self, value: int)\
    \ -> None:\n        self._odr14.value = value\n\n    @property\n    def odr13(self)\
    \ -> Field:\n        \"\"\"\n        ODR13\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr13\n\n    @odr13.setter\n\
    \    def odr13(self, value: int) -> None:\n        self._odr13.value = value\n\
    \n    @property\n    def odr12(self) -> Field:\n        \"\"\"\n        ODR12\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr12\n\n    @odr12.setter\n    def odr12(self, value: int)\
    \ -> None:\n        self._odr12.value = value\n\n    @property\n    def odr11(self)\
    \ -> Field:\n        \"\"\"\n        ODR11\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr11\n\n    @odr11.setter\n\
    \    def odr11(self, value: int) -> None:\n        self._odr11.value = value\n\
    \n    @property\n    def odr10(self) -> Field:\n        \"\"\"\n        ODR10\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr10\n\n    @odr10.setter\n    def odr10(self, value: int)\
    \ -> None:\n        self._odr10.value = value\n\n    @property\n    def odr9(self)\
    \ -> Field:\n        \"\"\"\n        ODR9\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr9\n\n    @odr9.setter\n\
    \    def odr9(self, value: int) -> None:\n        self._odr9.value = value\n\n\
    \    @property\n    def odr8(self) -> Field:\n        \"\"\"\n        ODR8\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr8\n\n    @odr8.setter\n    def odr8(self, value: int) ->\
    \ None:\n        self._odr8.value = value\n\n    @property\n    def odr7(self)\
    \ -> Field:\n        \"\"\"\n        ODR7\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr7\n\n    @odr7.setter\n\
    \    def odr7(self, value: int) -> None:\n        self._odr7.value = value\n\n\
    \    @property\n    def odr6(self) -> Field:\n        \"\"\"\n        ODR6\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr6\n\n    @odr6.setter\n    def odr6(self, value: int) ->\
    \ None:\n        self._odr6.value = value\n\n    @property\n    def odr5(self)\
    \ -> Field:\n        \"\"\"\n        ODR5\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr5\n\n    @odr5.setter\n\
    \    def odr5(self, value: int) -> None:\n        self._odr5.value = value\n\n\
    \    @property\n    def odr4(self) -> Field:\n        \"\"\"\n        ODR4\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr4\n\n    @odr4.setter\n    def odr4(self, value: int) ->\
    \ None:\n        self._odr4.value = value\n\n    @property\n    def odr3(self)\
    \ -> Field:\n        \"\"\"\n        ODR3\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr3\n\n    @odr3.setter\n\
    \    def odr3(self, value: int) -> None:\n        self._odr3.value = value\n\n\
    \    @property\n    def odr2(self) -> Field:\n        \"\"\"\n        ODR2\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr2\n\n    @odr2.setter\n    def odr2(self, value: int) ->\
    \ None:\n        self._odr2.value = value\n\n    @property\n    def odr1(self)\
    \ -> Field:\n        \"\"\"\n        ODR1\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr1\n\n    @odr1.setter\n\
    \    def odr1(self, value: int) -> None:\n        self._odr1.value = value\n\n\
    \    @property\n    def odr0(self) -> Field:\n        \"\"\"\n        ODR0\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr0\n\n    @odr0.setter\n    def odr0(self, value: int) ->\
    \ None:\n        self._odr0.value = value\n\n\nclass BsrrRegister(Register):\n\
    \    \"\"\"\n    BSRR\n\n    GPIO port bit set/reset\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._br15 = Field(\"br15\", 31,\
    \ 1)\n        self._br14 = Field(\"br14\", 30, 1)\n        self._br13 = Field(\"\
    br13\", 29, 1)\n        self._br12 = Field(\"br12\", 28, 1)\n        self._br11\
    \ = Field(\"br11\", 27, 1)\n        self._br10 = Field(\"br10\", 26, 1)\n    \
    \    self._br9 = Field(\"br9\", 25, 1)\n        self._br8 = Field(\"br8\", 24,\
    \ 1)\n        self._br7 = Field(\"br7\", 23, 1)\n        self._br6 = Field(\"\
    br6\", 22, 1)\n        self._br5 = Field(\"br5\", 21, 1)\n        self._br4 =\
    \ Field(\"br4\", 20, 1)\n        self._br3 = Field(\"br3\", 19, 1)\n        self._br2\
    \ = Field(\"br2\", 18, 1)\n        self._br1 = Field(\"br1\", 17, 1)\n       \
    \ self._br0 = Field(\"br0\", 16, 1)\n        self._bs15 = Field(\"bs15\", 15,\
    \ 1)\n        self._bs14 = Field(\"bs14\", 14, 1)\n        self._bs13 = Field(\"\
    bs13\", 13, 1)\n        self._bs12 = Field(\"bs12\", 12, 1)\n        self._bs11\
    \ = Field(\"bs11\", 11, 1)\n        self._bs10 = Field(\"bs10\", 10, 1)\n    \
    \    self._bs9 = Field(\"bs9\", 9, 1)\n        self._bs8 = Field(\"bs8\", 8, 1)\n\
    \        self._bs7 = Field(\"bs7\", 7, 1)\n        self._bs6 = Field(\"bs6\",\
    \ 6, 1)\n        self._bs5 = Field(\"bs5\", 5, 1)\n        self._bs4 = Field(\"\
    bs4\", 4, 1)\n        self._bs3 = Field(\"bs3\", 3, 1)\n        self._bs2 = Field(\"\
    bs2\", 2, 1)\n        self._bs1 = Field(\"bs1\", 1, 1)\n        self._bs0 = Field(\"\
    bs0\", 0, 1)\n        super().__init__(\"BSRR\", 0x40020800 + 0x18)\n\n    @property\n\
    \    def br15(self) -> Field:\n        \"\"\"\n        BR15\n\n        Port x\
    \ reset bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br15\n\
    \n    @br15.setter\n    def br15(self, value: int) -> None:\n        self._br15.value\
    \ = value\n\n    @property\n    def br14(self) -> Field:\n        \"\"\"\n   \
    \     BR14\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br14\n\n    @br14.setter\n    def br14(self,\
    \ value: int) -> None:\n        self._br14.value = value\n\n    @property\n  \
    \  def br13(self) -> Field:\n        \"\"\"\n        BR13\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br13\n\
    \n    @br13.setter\n    def br13(self, value: int) -> None:\n        self._br13.value\
    \ = value\n\n    @property\n    def br12(self) -> Field:\n        \"\"\"\n   \
    \     BR12\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br12\n\n    @br12.setter\n    def br12(self,\
    \ value: int) -> None:\n        self._br12.value = value\n\n    @property\n  \
    \  def br11(self) -> Field:\n        \"\"\"\n        BR11\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br11\n\
    \n    @br11.setter\n    def br11(self, value: int) -> None:\n        self._br11.value\
    \ = value\n\n    @property\n    def br10(self) -> Field:\n        \"\"\"\n   \
    \     BR10\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br10\n\n    @br10.setter\n    def br10(self,\
    \ value: int) -> None:\n        self._br10.value = value\n\n    @property\n  \
    \  def br9(self) -> Field:\n        \"\"\"\n        BR9\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br9\n\
    \n    @br9.setter\n    def br9(self, value: int) -> None:\n        self._br9.value\
    \ = value\n\n    @property\n    def br8(self) -> Field:\n        \"\"\"\n    \
    \    BR8\n\n        Port x reset bit y (y =\n                  0..15)\n      \
    \  \"\"\"\n        return self._br8\n\n    @br8.setter\n    def br8(self, value:\
    \ int) -> None:\n        self._br8.value = value\n\n    @property\n    def br7(self)\
    \ -> Field:\n        \"\"\"\n        BR7\n\n        Port x reset bit y (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._br7\n\n    @br7.setter\n\
    \    def br7(self, value: int) -> None:\n        self._br7.value = value\n\n \
    \   @property\n    def br6(self) -> Field:\n        \"\"\"\n        BR6\n\n  \
    \      Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._br6\n\n    @br6.setter\n    def br6(self, value: int) -> None:\n\
    \        self._br6.value = value\n\n    @property\n    def br5(self) -> Field:\n\
    \        \"\"\"\n        BR5\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br5\n\n    @br5.setter\n \
    \   def br5(self, value: int) -> None:\n        self._br5.value = value\n\n  \
    \  @property\n    def br4(self) -> Field:\n        \"\"\"\n        BR4\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br4\n\n    @br4.setter\n    def br4(self, value: int) -> None:\n\
    \        self._br4.value = value\n\n    @property\n    def br3(self) -> Field:\n\
    \        \"\"\"\n        BR3\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br3\n\n    @br3.setter\n \
    \   def br3(self, value: int) -> None:\n        self._br3.value = value\n\n  \
    \  @property\n    def br2(self) -> Field:\n        \"\"\"\n        BR2\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br2\n\n    @br2.setter\n    def br2(self, value: int) -> None:\n\
    \        self._br2.value = value\n\n    @property\n    def br1(self) -> Field:\n\
    \        \"\"\"\n        BR1\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br1\n\n    @br1.setter\n \
    \   def br1(self, value: int) -> None:\n        self._br1.value = value\n\n  \
    \  @property\n    def br0(self) -> Field:\n        \"\"\"\n        BR0\n\n   \
    \     Port x set bit y (y=\n                  0..15)\n        \"\"\"\n       \
    \ return self._br0\n\n    @br0.setter\n    def br0(self, value: int) -> None:\n\
    \        self._br0.value = value\n\n    @property\n    def bs15(self) -> Field:\n\
    \        \"\"\"\n        BS15\n\n        Port x set bit y (y=\n              \
    \    0..15)\n        \"\"\"\n        return self._bs15\n\n    @bs15.setter\n \
    \   def bs15(self, value: int) -> None:\n        self._bs15.value = value\n\n\
    \    @property\n    def bs14(self) -> Field:\n        \"\"\"\n        BS14\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs14\n\n    @bs14.setter\n    def bs14(self, value: int) ->\
    \ None:\n        self._bs14.value = value\n\n    @property\n    def bs13(self)\
    \ -> Field:\n        \"\"\"\n        BS13\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs13\n\n    @bs13.setter\n\
    \    def bs13(self, value: int) -> None:\n        self._bs13.value = value\n\n\
    \    @property\n    def bs12(self) -> Field:\n        \"\"\"\n        BS12\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs12\n\n    @bs12.setter\n    def bs12(self, value: int) ->\
    \ None:\n        self._bs12.value = value\n\n    @property\n    def bs11(self)\
    \ -> Field:\n        \"\"\"\n        BS11\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs11\n\n    @bs11.setter\n\
    \    def bs11(self, value: int) -> None:\n        self._bs11.value = value\n\n\
    \    @property\n    def bs10(self) -> Field:\n        \"\"\"\n        BS10\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs10\n\n    @bs10.setter\n    def bs10(self, value: int) ->\
    \ None:\n        self._bs10.value = value\n\n    @property\n    def bs9(self)\
    \ -> Field:\n        \"\"\"\n        BS9\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs9\n\n    @bs9.setter\n\
    \    def bs9(self, value: int) -> None:\n        self._bs9.value = value\n\n \
    \   @property\n    def bs8(self) -> Field:\n        \"\"\"\n        BS8\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs8\n\n    @bs8.setter\n    def bs8(self, value: int) -> None:\n\
    \        self._bs8.value = value\n\n    @property\n    def bs7(self) -> Field:\n\
    \        \"\"\"\n        BS7\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs7\n\n    @bs7.setter\n    def\
    \ bs7(self, value: int) -> None:\n        self._bs7.value = value\n\n    @property\n\
    \    def bs6(self) -> Field:\n        \"\"\"\n        BS6\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs6\n\
    \n    @bs6.setter\n    def bs6(self, value: int) -> None:\n        self._bs6.value\
    \ = value\n\n    @property\n    def bs5(self) -> Field:\n        \"\"\"\n    \
    \    BS5\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs5\n\n    @bs5.setter\n    def bs5(self, value: int)\
    \ -> None:\n        self._bs5.value = value\n\n    @property\n    def bs4(self)\
    \ -> Field:\n        \"\"\"\n        BS4\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs4\n\n    @bs4.setter\n\
    \    def bs4(self, value: int) -> None:\n        self._bs4.value = value\n\n \
    \   @property\n    def bs3(self) -> Field:\n        \"\"\"\n        BS3\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs3\n\n    @bs3.setter\n    def bs3(self, value: int) -> None:\n\
    \        self._bs3.value = value\n\n    @property\n    def bs2(self) -> Field:\n\
    \        \"\"\"\n        BS2\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs2\n\n    @bs2.setter\n    def\
    \ bs2(self, value: int) -> None:\n        self._bs2.value = value\n\n    @property\n\
    \    def bs1(self) -> Field:\n        \"\"\"\n        BS1\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs1\n\
    \n    @bs1.setter\n    def bs1(self, value: int) -> None:\n        self._bs1.value\
    \ = value\n\n    @property\n    def bs0(self) -> Field:\n        \"\"\"\n    \
    \    BS0\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs0\n\n    @bs0.setter\n    def bs0(self, value: int)\
    \ -> None:\n        self._bs0.value = value\n\n\nclass LckrRegister(Register):\n\
    \    \"\"\"\n    LCKR\n\n    GPIO port configuration lock\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lckk = Field(\"lckk\", 16,\
    \ 1)\n        self._lck15 = Field(\"lck15\", 15, 1)\n        self._lck14 = Field(\"\
    lck14\", 14, 1)\n        self._lck13 = Field(\"lck13\", 13, 1)\n        self._lck12\
    \ = Field(\"lck12\", 12, 1)\n        self._lck11 = Field(\"lck11\", 11, 1)\n \
    \       self._lck10 = Field(\"lck10\", 10, 1)\n        self._lck9 = Field(\"lck9\"\
    , 9, 1)\n        self._lck8 = Field(\"lck8\", 8, 1)\n        self._lck7 = Field(\"\
    lck7\", 7, 1)\n        self._lck6 = Field(\"lck6\", 6, 1)\n        self._lck5\
    \ = Field(\"lck5\", 5, 1)\n        self._lck4 = Field(\"lck4\", 4, 1)\n      \
    \  self._lck3 = Field(\"lck3\", 3, 1)\n        self._lck2 = Field(\"lck2\", 2,\
    \ 1)\n        self._lck1 = Field(\"lck1\", 1, 1)\n        self._lck0 = Field(\"\
    lck0\", 0, 1)\n        super().__init__(\"LCKR\", 0x40020800 + 0x1C)\n\n    @property\n\
    \    def lckk(self) -> Field:\n        \"\"\"\n        LCKK\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lckk\n\
    \n    @lckk.setter\n    def lckk(self, value: int) -> None:\n        self._lckk.value\
    \ = value\n\n    @property\n    def lck15(self) -> Field:\n        \"\"\"\n  \
    \      LCK15\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck15\n\n    @lck15.setter\n    def lck15(self,\
    \ value: int) -> None:\n        self._lck15.value = value\n\n    @property\n \
    \   def lck14(self) -> Field:\n        \"\"\"\n        LCK14\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck14\n\
    \n    @lck14.setter\n    def lck14(self, value: int) -> None:\n        self._lck14.value\
    \ = value\n\n    @property\n    def lck13(self) -> Field:\n        \"\"\"\n  \
    \      LCK13\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck13\n\n    @lck13.setter\n    def lck13(self,\
    \ value: int) -> None:\n        self._lck13.value = value\n\n    @property\n \
    \   def lck12(self) -> Field:\n        \"\"\"\n        LCK12\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck12\n\
    \n    @lck12.setter\n    def lck12(self, value: int) -> None:\n        self._lck12.value\
    \ = value\n\n    @property\n    def lck11(self) -> Field:\n        \"\"\"\n  \
    \      LCK11\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck11\n\n    @lck11.setter\n    def lck11(self,\
    \ value: int) -> None:\n        self._lck11.value = value\n\n    @property\n \
    \   def lck10(self) -> Field:\n        \"\"\"\n        LCK10\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck10\n\
    \n    @lck10.setter\n    def lck10(self, value: int) -> None:\n        self._lck10.value\
    \ = value\n\n    @property\n    def lck9(self) -> Field:\n        \"\"\"\n   \
    \     LCK9\n\n        Port x lock bit y (y=\n                  0..15)\n      \
    \  \"\"\"\n        return self._lck9\n\n    @lck9.setter\n    def lck9(self, value:\
    \ int) -> None:\n        self._lck9.value = value\n\n    @property\n    def lck8(self)\
    \ -> Field:\n        \"\"\"\n        LCK8\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck8\n\n    @lck8.setter\n\
    \    def lck8(self, value: int) -> None:\n        self._lck8.value = value\n\n\
    \    @property\n    def lck7(self) -> Field:\n        \"\"\"\n        LCK7\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck7\n\n    @lck7.setter\n    def lck7(self, value: int) ->\
    \ None:\n        self._lck7.value = value\n\n    @property\n    def lck6(self)\
    \ -> Field:\n        \"\"\"\n        LCK6\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck6\n\n    @lck6.setter\n\
    \    def lck6(self, value: int) -> None:\n        self._lck6.value = value\n\n\
    \    @property\n    def lck5(self) -> Field:\n        \"\"\"\n        LCK5\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck5\n\n    @lck5.setter\n    def lck5(self, value: int) ->\
    \ None:\n        self._lck5.value = value\n\n    @property\n    def lck4(self)\
    \ -> Field:\n        \"\"\"\n        LCK4\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck4\n\n    @lck4.setter\n\
    \    def lck4(self, value: int) -> None:\n        self._lck4.value = value\n\n\
    \    @property\n    def lck3(self) -> Field:\n        \"\"\"\n        LCK3\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck3\n\n    @lck3.setter\n    def lck3(self, value: int) ->\
    \ None:\n        self._lck3.value = value\n\n    @property\n    def lck2(self)\
    \ -> Field:\n        \"\"\"\n        LCK2\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck2\n\n    @lck2.setter\n\
    \    def lck2(self, value: int) -> None:\n        self._lck2.value = value\n\n\
    \    @property\n    def lck1(self) -> Field:\n        \"\"\"\n        LCK1\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck1\n\n    @lck1.setter\n    def lck1(self, value: int) ->\
    \ None:\n        self._lck1.value = value\n\n    @property\n    def lck0(self)\
    \ -> Field:\n        \"\"\"\n        LCK0\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck0\n\n    @lck0.setter\n\
    \    def lck0(self, value: int) -> None:\n        self._lck0.value = value\n\n\
    \nclass AfrlRegister(Register):\n    \"\"\"\n    AFRL\n\n    GPIO alternate function\
    \ low\n              register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._afrl7 = Field(\"afrl7\", 28, 4)\n        self._afrl6 = Field(\"afrl6\"\
    , 24, 4)\n        self._afrl5 = Field(\"afrl5\", 20, 4)\n        self._afrl4 =\
    \ Field(\"afrl4\", 16, 4)\n        self._afrl3 = Field(\"afrl3\", 12, 4)\n   \
    \     self._afrl2 = Field(\"afrl2\", 8, 4)\n        self._afrl1 = Field(\"afrl1\"\
    , 4, 4)\n        self._afrl0 = Field(\"afrl0\", 0, 4)\n        super().__init__(\"\
    AFRL\", 0x40020800 + 0x20)\n\n    @property\n    def afrl7(self) -> Field:\n \
    \       \"\"\"\n        AFRL7\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 0..7)\n        \"\"\"\n        return self._afrl7\n\
    \n    @afrl7.setter\n    def afrl7(self, value: int) -> None:\n        self._afrl7.value\
    \ = value\n\n    @property\n    def afrl6(self) -> Field:\n        \"\"\"\n  \
    \      AFRL6\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 0..7)\n        \"\"\"\n        return self._afrl6\n\n    @afrl6.setter\n\
    \    def afrl6(self, value: int) -> None:\n        self._afrl6.value = value\n\
    \n    @property\n    def afrl5(self) -> Field:\n        \"\"\"\n        AFRL5\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl5\n\n    @afrl5.setter\n \
    \   def afrl5(self, value: int) -> None:\n        self._afrl5.value = value\n\n\
    \    @property\n    def afrl4(self) -> Field:\n        \"\"\"\n        AFRL4\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl4\n\n    @afrl4.setter\n \
    \   def afrl4(self, value: int) -> None:\n        self._afrl4.value = value\n\n\
    \    @property\n    def afrl3(self) -> Field:\n        \"\"\"\n        AFRL3\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl3\n\n    @afrl3.setter\n \
    \   def afrl3(self, value: int) -> None:\n        self._afrl3.value = value\n\n\
    \    @property\n    def afrl2(self) -> Field:\n        \"\"\"\n        AFRL2\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl2\n\n    @afrl2.setter\n \
    \   def afrl2(self, value: int) -> None:\n        self._afrl2.value = value\n\n\
    \    @property\n    def afrl1(self) -> Field:\n        \"\"\"\n        AFRL1\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl1\n\n    @afrl1.setter\n \
    \   def afrl1(self, value: int) -> None:\n        self._afrl1.value = value\n\n\
    \    @property\n    def afrl0(self) -> Field:\n        \"\"\"\n        AFRL0\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl0\n\n    @afrl0.setter\n \
    \   def afrl0(self, value: int) -> None:\n        self._afrl0.value = value\n\n\
    \nclass AfrhRegister(Register):\n    \"\"\"\n    AFRH\n\n    GPIO alternate function\
    \ high\n              register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._afrh15 = Field(\"afrh15\", 28, 4)\n        self._afrh14 = Field(\"afrh14\"\
    , 24, 4)\n        self._afrh13 = Field(\"afrh13\", 20, 4)\n        self._afrh12\
    \ = Field(\"afrh12\", 16, 4)\n        self._afrh11 = Field(\"afrh11\", 12, 4)\n\
    \        self._afrh10 = Field(\"afrh10\", 8, 4)\n        self._afrh9 = Field(\"\
    afrh9\", 4, 4)\n        self._afrh8 = Field(\"afrh8\", 0, 4)\n        super().__init__(\"\
    AFRH\", 0x40020800 + 0x24)\n\n    @property\n    def afrh15(self) -> Field:\n\
    \        \"\"\"\n        AFRH15\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 8..15)\n        \"\"\"\n        return self._afrh15\n\
    \n    @afrh15.setter\n    def afrh15(self, value: int) -> None:\n        self._afrh15.value\
    \ = value\n\n    @property\n    def afrh14(self) -> Field:\n        \"\"\"\n \
    \       AFRH14\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh14\n\n  \
    \  @afrh14.setter\n    def afrh14(self, value: int) -> None:\n        self._afrh14.value\
    \ = value\n\n    @property\n    def afrh13(self) -> Field:\n        \"\"\"\n \
    \       AFRH13\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh13\n\n  \
    \  @afrh13.setter\n    def afrh13(self, value: int) -> None:\n        self._afrh13.value\
    \ = value\n\n    @property\n    def afrh12(self) -> Field:\n        \"\"\"\n \
    \       AFRH12\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh12\n\n  \
    \  @afrh12.setter\n    def afrh12(self, value: int) -> None:\n        self._afrh12.value\
    \ = value\n\n    @property\n    def afrh11(self) -> Field:\n        \"\"\"\n \
    \       AFRH11\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh11\n\n  \
    \  @afrh11.setter\n    def afrh11(self, value: int) -> None:\n        self._afrh11.value\
    \ = value\n\n    @property\n    def afrh10(self) -> Field:\n        \"\"\"\n \
    \       AFRH10\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh10\n\n  \
    \  @afrh10.setter\n    def afrh10(self, value: int) -> None:\n        self._afrh10.value\
    \ = value\n\n    @property\n    def afrh9(self) -> Field:\n        \"\"\"\n  \
    \      AFRH9\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 8..15)\n        \"\"\"\n        return self._afrh9\n\n    @afrh9.setter\n\
    \    def afrh9(self, value: int) -> None:\n        self._afrh9.value = value\n\
    \n    @property\n    def afrh8(self) -> Field:\n        \"\"\"\n        AFRH8\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 8..15)\n        \"\"\"\n        return self._afrh8\n\n    @afrh8.setter\n\
    \    def afrh8(self, value: int) -> None:\n        self._afrh8.value = value\n\
    \n\nclass Gpioc(Peripheral):\n    \"\"\"\n    GPIOC\n\n    General-purpose I/Os\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._moder = ModerRegister()\n\
    \        self._otyper = OtyperRegister()\n        self._ospeedr = OspeedrRegister()\n\
    \        self._pupdr = PupdrRegister()\n        self._idr = IdrRegister()\n  \
    \      self._odr = OdrRegister()\n        self._bsrr = BsrrRegister()\n      \
    \  self._lckr = LckrRegister()\n        self._afrl = AfrlRegister()\n        self._afrh\
    \ = AfrhRegister()\n        super().__init__(\"gpioc\", 0x40020800)\n\n    @property\n\
    \    def moder(self) -> ModerRegister:\n        return self._moder\n\n    @moder.setter\n\
    \    def moder(self, value: int) -> None:\n        self._moder.value = value\n\
    \n    @property\n    def otyper(self) -> OtyperRegister:\n        return self._otyper\n\
    \n    @otyper.setter\n    def otyper(self, value: int) -> None:\n        self._otyper.value\
    \ = value\n\n    @property\n    def ospeedr(self) -> OspeedrRegister:\n      \
    \  return self._ospeedr\n\n    @ospeedr.setter\n    def ospeedr(self, value: int)\
    \ -> None:\n        self._ospeedr.value = value\n\n    @property\n    def pupdr(self)\
    \ -> PupdrRegister:\n        return self._pupdr\n\n    @pupdr.setter\n    def\
    \ pupdr(self, value: int) -> None:\n        self._pupdr.value = value\n\n    @property\n\
    \    def idr(self) -> IdrRegister:\n        return self._idr\n\n    @idr.setter\n\
    \    def idr(self, value: int) -> None:\n        self._idr.value = value\n\n \
    \   @property\n    def odr(self) -> OdrRegister:\n        return self._odr\n\n\
    \    @odr.setter\n    def odr(self, value: int) -> None:\n        self._odr.value\
    \ = value\n\n    @property\n    def bsrr(self) -> BsrrRegister:\n        return\
    \ self._bsrr\n\n    @bsrr.setter\n    def bsrr(self, value: int) -> None:\n  \
    \      self._bsrr.value = value\n\n    @property\n    def lckr(self) -> LckrRegister:\n\
    \        return self._lckr\n\n    @lckr.setter\n    def lckr(self, value: int)\
    \ -> None:\n        self._lckr.value = value\n\n    @property\n    def afrl(self)\
    \ -> AfrlRegister:\n        return self._afrl\n\n    @afrl.setter\n    def afrl(self,\
    \ value: int) -> None:\n        self._afrl.value = value\n\n    @property\n  \
    \  def afrh(self) -> AfrhRegister:\n        return self._afrh\n\n    @afrh.setter\n\
    \    def afrh(self, value: int) -> None:\n        self._afrh.value = value\n"
  name: GPIOC
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ModerRegister(Register):\n    \"\"\"\n    MODER\n\n    GPIO\
    \ port mode register\n    \"\"\"\n\n    def __init__(self):\n        self._moder15\
    \ = Field(\"moder15\", 30, 2)\n        self._moder14 = Field(\"moder14\", 28,\
    \ 2)\n        self._moder13 = Field(\"moder13\", 26, 2)\n        self._moder12\
    \ = Field(\"moder12\", 24, 2)\n        self._moder11 = Field(\"moder11\", 22,\
    \ 2)\n        self._moder10 = Field(\"moder10\", 20, 2)\n        self._moder9\
    \ = Field(\"moder9\", 18, 2)\n        self._moder8 = Field(\"moder8\", 16, 2)\n\
    \        self._moder7 = Field(\"moder7\", 14, 2)\n        self._moder6 = Field(\"\
    moder6\", 12, 2)\n        self._moder5 = Field(\"moder5\", 10, 2)\n        self._moder4\
    \ = Field(\"moder4\", 8, 2)\n        self._moder3 = Field(\"moder3\", 6, 2)\n\
    \        self._moder2 = Field(\"moder2\", 4, 2)\n        self._moder1 = Field(\"\
    moder1\", 2, 2)\n        self._moder0 = Field(\"moder0\", 0, 2)\n        super().__init__(\"\
    MODER\", 0x40020400 + 0x0)\n\n    @property\n    def moder15(self) -> Field:\n\
    \        \"\"\"\n        MODER15\n\n        Port x configuration bits (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._moder15\n\n   \
    \ @moder15.setter\n    def moder15(self, value: int) -> None:\n        self._moder15.value\
    \ = value\n\n    @property\n    def moder14(self) -> Field:\n        \"\"\"\n\
    \        MODER14\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder14\n\n    @moder14.setter\n\
    \    def moder14(self, value: int) -> None:\n        self._moder14.value = value\n\
    \n    @property\n    def moder13(self) -> Field:\n        \"\"\"\n        MODER13\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder13\n\n    @moder13.setter\n    def moder13(self,\
    \ value: int) -> None:\n        self._moder13.value = value\n\n    @property\n\
    \    def moder12(self) -> Field:\n        \"\"\"\n        MODER12\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder12\n\n    @moder12.setter\n    def moder12(self, value: int)\
    \ -> None:\n        self._moder12.value = value\n\n    @property\n    def moder11(self)\
    \ -> Field:\n        \"\"\"\n        MODER11\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder11\n\
    \n    @moder11.setter\n    def moder11(self, value: int) -> None:\n        self._moder11.value\
    \ = value\n\n    @property\n    def moder10(self) -> Field:\n        \"\"\"\n\
    \        MODER10\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder10\n\n    @moder10.setter\n\
    \    def moder10(self, value: int) -> None:\n        self._moder10.value = value\n\
    \n    @property\n    def moder9(self) -> Field:\n        \"\"\"\n        MODER9\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder9\n\n    @moder9.setter\n    def moder9(self,\
    \ value: int) -> None:\n        self._moder9.value = value\n\n    @property\n\
    \    def moder8(self) -> Field:\n        \"\"\"\n        MODER8\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder8\n\n    @moder8.setter\n    def moder8(self, value: int)\
    \ -> None:\n        self._moder8.value = value\n\n    @property\n    def moder7(self)\
    \ -> Field:\n        \"\"\"\n        MODER7\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder7\n\
    \n    @moder7.setter\n    def moder7(self, value: int) -> None:\n        self._moder7.value\
    \ = value\n\n    @property\n    def moder6(self) -> Field:\n        \"\"\"\n \
    \       MODER6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder6\n\n    @moder6.setter\n    def moder6(self,\
    \ value: int) -> None:\n        self._moder6.value = value\n\n    @property\n\
    \    def moder5(self) -> Field:\n        \"\"\"\n        MODER5\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder5\n\n    @moder5.setter\n    def moder5(self, value: int)\
    \ -> None:\n        self._moder5.value = value\n\n    @property\n    def moder4(self)\
    \ -> Field:\n        \"\"\"\n        MODER4\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder4\n\
    \n    @moder4.setter\n    def moder4(self, value: int) -> None:\n        self._moder4.value\
    \ = value\n\n    @property\n    def moder3(self) -> Field:\n        \"\"\"\n \
    \       MODER3\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder3\n\n    @moder3.setter\n    def moder3(self,\
    \ value: int) -> None:\n        self._moder3.value = value\n\n    @property\n\
    \    def moder2(self) -> Field:\n        \"\"\"\n        MODER2\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder2\n\n    @moder2.setter\n    def moder2(self, value: int)\
    \ -> None:\n        self._moder2.value = value\n\n    @property\n    def moder1(self)\
    \ -> Field:\n        \"\"\"\n        MODER1\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder1\n\
    \n    @moder1.setter\n    def moder1(self, value: int) -> None:\n        self._moder1.value\
    \ = value\n\n    @property\n    def moder0(self) -> Field:\n        \"\"\"\n \
    \       MODER0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder0\n\n    @moder0.setter\n    def moder0(self,\
    \ value: int) -> None:\n        self._moder0.value = value\n\n\nclass OtyperRegister(Register):\n\
    \    \"\"\"\n    OTYPER\n\n    GPIO port output type register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._ot15 = Field(\"ot15\", 15, 1)\n      \
    \  self._ot14 = Field(\"ot14\", 14, 1)\n        self._ot13 = Field(\"ot13\", 13,\
    \ 1)\n        self._ot12 = Field(\"ot12\", 12, 1)\n        self._ot11 = Field(\"\
    ot11\", 11, 1)\n        self._ot10 = Field(\"ot10\", 10, 1)\n        self._ot9\
    \ = Field(\"ot9\", 9, 1)\n        self._ot8 = Field(\"ot8\", 8, 1)\n        self._ot7\
    \ = Field(\"ot7\", 7, 1)\n        self._ot6 = Field(\"ot6\", 6, 1)\n        self._ot5\
    \ = Field(\"ot5\", 5, 1)\n        self._ot4 = Field(\"ot4\", 4, 1)\n        self._ot3\
    \ = Field(\"ot3\", 3, 1)\n        self._ot2 = Field(\"ot2\", 2, 1)\n        self._ot1\
    \ = Field(\"ot1\", 1, 1)\n        self._ot0 = Field(\"ot0\", 0, 1)\n        super().__init__(\"\
    OTYPER\", 0x40020400 + 0x4)\n\n    @property\n    def ot15(self) -> Field:\n \
    \       \"\"\"\n        OT15\n\n        Port x configuration bits (y =\n     \
    \             0..15)\n        \"\"\"\n        return self._ot15\n\n    @ot15.setter\n\
    \    def ot15(self, value: int) -> None:\n        self._ot15.value = value\n\n\
    \    @property\n    def ot14(self) -> Field:\n        \"\"\"\n        OT14\n\n\
    \        Port x configuration bits (y =\n                  0..15)\n        \"\"\
    \"\n        return self._ot14\n\n    @ot14.setter\n    def ot14(self, value: int)\
    \ -> None:\n        self._ot14.value = value\n\n    @property\n    def ot13(self)\
    \ -> Field:\n        \"\"\"\n        OT13\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._ot13\n\n\
    \    @ot13.setter\n    def ot13(self, value: int) -> None:\n        self._ot13.value\
    \ = value\n\n    @property\n    def ot12(self) -> Field:\n        \"\"\"\n   \
    \     OT12\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot12\n\n    @ot12.setter\n    def ot12(self,\
    \ value: int) -> None:\n        self._ot12.value = value\n\n    @property\n  \
    \  def ot11(self) -> Field:\n        \"\"\"\n        OT11\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot11\n\
    \n    @ot11.setter\n    def ot11(self, value: int) -> None:\n        self._ot11.value\
    \ = value\n\n    @property\n    def ot10(self) -> Field:\n        \"\"\"\n   \
    \     OT10\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot10\n\n    @ot10.setter\n    def ot10(self,\
    \ value: int) -> None:\n        self._ot10.value = value\n\n    @property\n  \
    \  def ot9(self) -> Field:\n        \"\"\"\n        OT9\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot9\n\
    \n    @ot9.setter\n    def ot9(self, value: int) -> None:\n        self._ot9.value\
    \ = value\n\n    @property\n    def ot8(self) -> Field:\n        \"\"\"\n    \
    \    OT8\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot8\n\n    @ot8.setter\n    def ot8(self,\
    \ value: int) -> None:\n        self._ot8.value = value\n\n    @property\n   \
    \ def ot7(self) -> Field:\n        \"\"\"\n        OT7\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot7\n\
    \n    @ot7.setter\n    def ot7(self, value: int) -> None:\n        self._ot7.value\
    \ = value\n\n    @property\n    def ot6(self) -> Field:\n        \"\"\"\n    \
    \    OT6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot6\n\n    @ot6.setter\n    def ot6(self,\
    \ value: int) -> None:\n        self._ot6.value = value\n\n    @property\n   \
    \ def ot5(self) -> Field:\n        \"\"\"\n        OT5\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot5\n\
    \n    @ot5.setter\n    def ot5(self, value: int) -> None:\n        self._ot5.value\
    \ = value\n\n    @property\n    def ot4(self) -> Field:\n        \"\"\"\n    \
    \    OT4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot4\n\n    @ot4.setter\n    def ot4(self,\
    \ value: int) -> None:\n        self._ot4.value = value\n\n    @property\n   \
    \ def ot3(self) -> Field:\n        \"\"\"\n        OT3\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot3\n\
    \n    @ot3.setter\n    def ot3(self, value: int) -> None:\n        self._ot3.value\
    \ = value\n\n    @property\n    def ot2(self) -> Field:\n        \"\"\"\n    \
    \    OT2\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot2\n\n    @ot2.setter\n    def ot2(self,\
    \ value: int) -> None:\n        self._ot2.value = value\n\n    @property\n   \
    \ def ot1(self) -> Field:\n        \"\"\"\n        OT1\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot1\n\
    \n    @ot1.setter\n    def ot1(self, value: int) -> None:\n        self._ot1.value\
    \ = value\n\n    @property\n    def ot0(self) -> Field:\n        \"\"\"\n    \
    \    OT0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot0\n\n    @ot0.setter\n    def ot0(self,\
    \ value: int) -> None:\n        self._ot0.value = value\n\n\nclass OspeedrRegister(Register):\n\
    \    \"\"\"\n    OSPEEDR\n\n    GPIO port output speed\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ospeedr15 = Field(\"ospeedr15\"\
    , 30, 2)\n        self._ospeedr14 = Field(\"ospeedr14\", 28, 2)\n        self._ospeedr13\
    \ = Field(\"ospeedr13\", 26, 2)\n        self._ospeedr12 = Field(\"ospeedr12\"\
    , 24, 2)\n        self._ospeedr11 = Field(\"ospeedr11\", 22, 2)\n        self._ospeedr10\
    \ = Field(\"ospeedr10\", 20, 2)\n        self._ospeedr9 = Field(\"ospeedr9\",\
    \ 18, 2)\n        self._ospeedr8 = Field(\"ospeedr8\", 16, 2)\n        self._ospeedr7\
    \ = Field(\"ospeedr7\", 14, 2)\n        self._ospeedr6 = Field(\"ospeedr6\", 12,\
    \ 2)\n        self._ospeedr5 = Field(\"ospeedr5\", 10, 2)\n        self._ospeedr4\
    \ = Field(\"ospeedr4\", 8, 2)\n        self._ospeedr3 = Field(\"ospeedr3\", 6,\
    \ 2)\n        self._ospeedr2 = Field(\"ospeedr2\", 4, 2)\n        self._ospeedr1\
    \ = Field(\"ospeedr1\", 2, 2)\n        self._ospeedr0 = Field(\"ospeedr0\", 0,\
    \ 2)\n        super().__init__(\"OSPEEDR\", 0x40020400 + 0x8)\n\n    @property\n\
    \    def ospeedr15(self) -> Field:\n        \"\"\"\n        OSPEEDR15\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr15\n\n    @ospeedr15.setter\n    def ospeedr15(self,\
    \ value: int) -> None:\n        self._ospeedr15.value = value\n\n    @property\n\
    \    def ospeedr14(self) -> Field:\n        \"\"\"\n        OSPEEDR14\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr14\n\n    @ospeedr14.setter\n    def ospeedr14(self,\
    \ value: int) -> None:\n        self._ospeedr14.value = value\n\n    @property\n\
    \    def ospeedr13(self) -> Field:\n        \"\"\"\n        OSPEEDR13\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr13\n\n    @ospeedr13.setter\n    def ospeedr13(self,\
    \ value: int) -> None:\n        self._ospeedr13.value = value\n\n    @property\n\
    \    def ospeedr12(self) -> Field:\n        \"\"\"\n        OSPEEDR12\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr12\n\n    @ospeedr12.setter\n    def ospeedr12(self,\
    \ value: int) -> None:\n        self._ospeedr12.value = value\n\n    @property\n\
    \    def ospeedr11(self) -> Field:\n        \"\"\"\n        OSPEEDR11\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr11\n\n    @ospeedr11.setter\n    def ospeedr11(self,\
    \ value: int) -> None:\n        self._ospeedr11.value = value\n\n    @property\n\
    \    def ospeedr10(self) -> Field:\n        \"\"\"\n        OSPEEDR10\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr10\n\n    @ospeedr10.setter\n    def ospeedr10(self,\
    \ value: int) -> None:\n        self._ospeedr10.value = value\n\n    @property\n\
    \    def ospeedr9(self) -> Field:\n        \"\"\"\n        OSPEEDR9\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr9\n\n    @ospeedr9.setter\n    def ospeedr9(self,\
    \ value: int) -> None:\n        self._ospeedr9.value = value\n\n    @property\n\
    \    def ospeedr8(self) -> Field:\n        \"\"\"\n        OSPEEDR8\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr8\n\n    @ospeedr8.setter\n    def ospeedr8(self,\
    \ value: int) -> None:\n        self._ospeedr8.value = value\n\n    @property\n\
    \    def ospeedr7(self) -> Field:\n        \"\"\"\n        OSPEEDR7\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr7\n\n    @ospeedr7.setter\n    def ospeedr7(self,\
    \ value: int) -> None:\n        self._ospeedr7.value = value\n\n    @property\n\
    \    def ospeedr6(self) -> Field:\n        \"\"\"\n        OSPEEDR6\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr6\n\n    @ospeedr6.setter\n    def ospeedr6(self,\
    \ value: int) -> None:\n        self._ospeedr6.value = value\n\n    @property\n\
    \    def ospeedr5(self) -> Field:\n        \"\"\"\n        OSPEEDR5\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr5\n\n    @ospeedr5.setter\n    def ospeedr5(self,\
    \ value: int) -> None:\n        self._ospeedr5.value = value\n\n    @property\n\
    \    def ospeedr4(self) -> Field:\n        \"\"\"\n        OSPEEDR4\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr4\n\n    @ospeedr4.setter\n    def ospeedr4(self,\
    \ value: int) -> None:\n        self._ospeedr4.value = value\n\n    @property\n\
    \    def ospeedr3(self) -> Field:\n        \"\"\"\n        OSPEEDR3\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr3\n\n    @ospeedr3.setter\n    def ospeedr3(self,\
    \ value: int) -> None:\n        self._ospeedr3.value = value\n\n    @property\n\
    \    def ospeedr2(self) -> Field:\n        \"\"\"\n        OSPEEDR2\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr2\n\n    @ospeedr2.setter\n    def ospeedr2(self,\
    \ value: int) -> None:\n        self._ospeedr2.value = value\n\n    @property\n\
    \    def ospeedr1(self) -> Field:\n        \"\"\"\n        OSPEEDR1\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr1\n\n    @ospeedr1.setter\n    def ospeedr1(self,\
    \ value: int) -> None:\n        self._ospeedr1.value = value\n\n    @property\n\
    \    def ospeedr0(self) -> Field:\n        \"\"\"\n        OSPEEDR0\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr0\n\n    @ospeedr0.setter\n    def ospeedr0(self,\
    \ value: int) -> None:\n        self._ospeedr0.value = value\n\n\nclass PupdrRegister(Register):\n\
    \    \"\"\"\n    PUPDR\n\n    GPIO port pull-up/pull-down\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pupdr15 = Field(\"pupdr15\"\
    , 30, 2)\n        self._pupdr14 = Field(\"pupdr14\", 28, 2)\n        self._pupdr13\
    \ = Field(\"pupdr13\", 26, 2)\n        self._pupdr12 = Field(\"pupdr12\", 24,\
    \ 2)\n        self._pupdr11 = Field(\"pupdr11\", 22, 2)\n        self._pupdr10\
    \ = Field(\"pupdr10\", 20, 2)\n        self._pupdr9 = Field(\"pupdr9\", 18, 2)\n\
    \        self._pupdr8 = Field(\"pupdr8\", 16, 2)\n        self._pupdr7 = Field(\"\
    pupdr7\", 14, 2)\n        self._pupdr6 = Field(\"pupdr6\", 12, 2)\n        self._pupdr5\
    \ = Field(\"pupdr5\", 10, 2)\n        self._pupdr4 = Field(\"pupdr4\", 8, 2)\n\
    \        self._pupdr3 = Field(\"pupdr3\", 6, 2)\n        self._pupdr2 = Field(\"\
    pupdr2\", 4, 2)\n        self._pupdr1 = Field(\"pupdr1\", 2, 2)\n        self._pupdr0\
    \ = Field(\"pupdr0\", 0, 2)\n        super().__init__(\"PUPDR\", 0x40020400 +\
    \ 0xC)\n\n    @property\n    def pupdr15(self) -> Field:\n        \"\"\"\n   \
    \     PUPDR15\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr15\n\n    @pupdr15.setter\n    def\
    \ pupdr15(self, value: int) -> None:\n        self._pupdr15.value = value\n\n\
    \    @property\n    def pupdr14(self) -> Field:\n        \"\"\"\n        PUPDR14\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr14\n\n    @pupdr14.setter\n    def pupdr14(self,\
    \ value: int) -> None:\n        self._pupdr14.value = value\n\n    @property\n\
    \    def pupdr13(self) -> Field:\n        \"\"\"\n        PUPDR13\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr13\n\n    @pupdr13.setter\n    def pupdr13(self, value: int)\
    \ -> None:\n        self._pupdr13.value = value\n\n    @property\n    def pupdr12(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR12\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr12\n\
    \n    @pupdr12.setter\n    def pupdr12(self, value: int) -> None:\n        self._pupdr12.value\
    \ = value\n\n    @property\n    def pupdr11(self) -> Field:\n        \"\"\"\n\
    \        PUPDR11\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._pupdr11\n\n    @pupdr11.setter\n\
    \    def pupdr11(self, value: int) -> None:\n        self._pupdr11.value = value\n\
    \n    @property\n    def pupdr10(self) -> Field:\n        \"\"\"\n        PUPDR10\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr10\n\n    @pupdr10.setter\n    def pupdr10(self,\
    \ value: int) -> None:\n        self._pupdr10.value = value\n\n    @property\n\
    \    def pupdr9(self) -> Field:\n        \"\"\"\n        PUPDR9\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr9\n\n    @pupdr9.setter\n    def pupdr9(self, value: int)\
    \ -> None:\n        self._pupdr9.value = value\n\n    @property\n    def pupdr8(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR8\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr8\n\
    \n    @pupdr8.setter\n    def pupdr8(self, value: int) -> None:\n        self._pupdr8.value\
    \ = value\n\n    @property\n    def pupdr7(self) -> Field:\n        \"\"\"\n \
    \       PUPDR7\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr7\n\n    @pupdr7.setter\n    def pupdr7(self,\
    \ value: int) -> None:\n        self._pupdr7.value = value\n\n    @property\n\
    \    def pupdr6(self) -> Field:\n        \"\"\"\n        PUPDR6\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr6\n\n    @pupdr6.setter\n    def pupdr6(self, value: int)\
    \ -> None:\n        self._pupdr6.value = value\n\n    @property\n    def pupdr5(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR5\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr5\n\
    \n    @pupdr5.setter\n    def pupdr5(self, value: int) -> None:\n        self._pupdr5.value\
    \ = value\n\n    @property\n    def pupdr4(self) -> Field:\n        \"\"\"\n \
    \       PUPDR4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr4\n\n    @pupdr4.setter\n    def pupdr4(self,\
    \ value: int) -> None:\n        self._pupdr4.value = value\n\n    @property\n\
    \    def pupdr3(self) -> Field:\n        \"\"\"\n        PUPDR3\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr3\n\n    @pupdr3.setter\n    def pupdr3(self, value: int)\
    \ -> None:\n        self._pupdr3.value = value\n\n    @property\n    def pupdr2(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR2\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr2\n\
    \n    @pupdr2.setter\n    def pupdr2(self, value: int) -> None:\n        self._pupdr2.value\
    \ = value\n\n    @property\n    def pupdr1(self) -> Field:\n        \"\"\"\n \
    \       PUPDR1\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr1\n\n    @pupdr1.setter\n    def pupdr1(self,\
    \ value: int) -> None:\n        self._pupdr1.value = value\n\n    @property\n\
    \    def pupdr0(self) -> Field:\n        \"\"\"\n        PUPDR0\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr0\n\n    @pupdr0.setter\n    def pupdr0(self, value: int)\
    \ -> None:\n        self._pupdr0.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    GPIO port input data register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._idr15 = Field(\"idr15\", 15, 1)\n        self._idr14\
    \ = Field(\"idr14\", 14, 1)\n        self._idr13 = Field(\"idr13\", 13, 1)\n \
    \       self._idr12 = Field(\"idr12\", 12, 1)\n        self._idr11 = Field(\"\
    idr11\", 11, 1)\n        self._idr10 = Field(\"idr10\", 10, 1)\n        self._idr9\
    \ = Field(\"idr9\", 9, 1)\n        self._idr8 = Field(\"idr8\", 8, 1)\n      \
    \  self._idr7 = Field(\"idr7\", 7, 1)\n        self._idr6 = Field(\"idr6\", 6,\
    \ 1)\n        self._idr5 = Field(\"idr5\", 5, 1)\n        self._idr4 = Field(\"\
    idr4\", 4, 1)\n        self._idr3 = Field(\"idr3\", 3, 1)\n        self._idr2\
    \ = Field(\"idr2\", 2, 1)\n        self._idr1 = Field(\"idr1\", 1, 1)\n      \
    \  self._idr0 = Field(\"idr0\", 0, 1)\n        super().__init__(\"IDR\", 0x40020400\
    \ + 0x10)\n\n    @property\n    def idr15(self) -> Field:\n        \"\"\"\n  \
    \      IDR15\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr15\n\n    @idr15.setter\n    def idr15(self,\
    \ value: int) -> None:\n        self._idr15.value = value\n\n    @property\n \
    \   def idr14(self) -> Field:\n        \"\"\"\n        IDR14\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr14\n\
    \n    @idr14.setter\n    def idr14(self, value: int) -> None:\n        self._idr14.value\
    \ = value\n\n    @property\n    def idr13(self) -> Field:\n        \"\"\"\n  \
    \      IDR13\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr13\n\n    @idr13.setter\n    def idr13(self,\
    \ value: int) -> None:\n        self._idr13.value = value\n\n    @property\n \
    \   def idr12(self) -> Field:\n        \"\"\"\n        IDR12\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr12\n\
    \n    @idr12.setter\n    def idr12(self, value: int) -> None:\n        self._idr12.value\
    \ = value\n\n    @property\n    def idr11(self) -> Field:\n        \"\"\"\n  \
    \      IDR11\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr11\n\n    @idr11.setter\n    def idr11(self,\
    \ value: int) -> None:\n        self._idr11.value = value\n\n    @property\n \
    \   def idr10(self) -> Field:\n        \"\"\"\n        IDR10\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr10\n\
    \n    @idr10.setter\n    def idr10(self, value: int) -> None:\n        self._idr10.value\
    \ = value\n\n    @property\n    def idr9(self) -> Field:\n        \"\"\"\n   \
    \     IDR9\n\n        Port input data (y =\n                  0..15)\n       \
    \ \"\"\"\n        return self._idr9\n\n    @idr9.setter\n    def idr9(self, value:\
    \ int) -> None:\n        self._idr9.value = value\n\n    @property\n    def idr8(self)\
    \ -> Field:\n        \"\"\"\n        IDR8\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr8\n\n    @idr8.setter\n\
    \    def idr8(self, value: int) -> None:\n        self._idr8.value = value\n\n\
    \    @property\n    def idr7(self) -> Field:\n        \"\"\"\n        IDR7\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr7\n\n    @idr7.setter\n    def idr7(self, value: int) ->\
    \ None:\n        self._idr7.value = value\n\n    @property\n    def idr6(self)\
    \ -> Field:\n        \"\"\"\n        IDR6\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr6\n\n    @idr6.setter\n\
    \    def idr6(self, value: int) -> None:\n        self._idr6.value = value\n\n\
    \    @property\n    def idr5(self) -> Field:\n        \"\"\"\n        IDR5\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr5\n\n    @idr5.setter\n    def idr5(self, value: int) ->\
    \ None:\n        self._idr5.value = value\n\n    @property\n    def idr4(self)\
    \ -> Field:\n        \"\"\"\n        IDR4\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr4\n\n    @idr4.setter\n\
    \    def idr4(self, value: int) -> None:\n        self._idr4.value = value\n\n\
    \    @property\n    def idr3(self) -> Field:\n        \"\"\"\n        IDR3\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr3\n\n    @idr3.setter\n    def idr3(self, value: int) ->\
    \ None:\n        self._idr3.value = value\n\n    @property\n    def idr2(self)\
    \ -> Field:\n        \"\"\"\n        IDR2\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr2\n\n    @idr2.setter\n\
    \    def idr2(self, value: int) -> None:\n        self._idr2.value = value\n\n\
    \    @property\n    def idr1(self) -> Field:\n        \"\"\"\n        IDR1\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr1\n\n    @idr1.setter\n    def idr1(self, value: int) ->\
    \ None:\n        self._idr1.value = value\n\n    @property\n    def idr0(self)\
    \ -> Field:\n        \"\"\"\n        IDR0\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr0\n\n    @idr0.setter\n\
    \    def idr0(self, value: int) -> None:\n        self._idr0.value = value\n\n\
    \nclass OdrRegister(Register):\n    \"\"\"\n    ODR\n\n    GPIO port output data\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._odr15 = Field(\"\
    odr15\", 15, 1)\n        self._odr14 = Field(\"odr14\", 14, 1)\n        self._odr13\
    \ = Field(\"odr13\", 13, 1)\n        self._odr12 = Field(\"odr12\", 12, 1)\n \
    \       self._odr11 = Field(\"odr11\", 11, 1)\n        self._odr10 = Field(\"\
    odr10\", 10, 1)\n        self._odr9 = Field(\"odr9\", 9, 1)\n        self._odr8\
    \ = Field(\"odr8\", 8, 1)\n        self._odr7 = Field(\"odr7\", 7, 1)\n      \
    \  self._odr6 = Field(\"odr6\", 6, 1)\n        self._odr5 = Field(\"odr5\", 5,\
    \ 1)\n        self._odr4 = Field(\"odr4\", 4, 1)\n        self._odr3 = Field(\"\
    odr3\", 3, 1)\n        self._odr2 = Field(\"odr2\", 2, 1)\n        self._odr1\
    \ = Field(\"odr1\", 1, 1)\n        self._odr0 = Field(\"odr0\", 0, 1)\n      \
    \  super().__init__(\"ODR\", 0x40020400 + 0x14)\n\n    @property\n    def odr15(self)\
    \ -> Field:\n        \"\"\"\n        ODR15\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr15\n\n    @odr15.setter\n\
    \    def odr15(self, value: int) -> None:\n        self._odr15.value = value\n\
    \n    @property\n    def odr14(self) -> Field:\n        \"\"\"\n        ODR14\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr14\n\n    @odr14.setter\n    def odr14(self, value: int)\
    \ -> None:\n        self._odr14.value = value\n\n    @property\n    def odr13(self)\
    \ -> Field:\n        \"\"\"\n        ODR13\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr13\n\n    @odr13.setter\n\
    \    def odr13(self, value: int) -> None:\n        self._odr13.value = value\n\
    \n    @property\n    def odr12(self) -> Field:\n        \"\"\"\n        ODR12\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr12\n\n    @odr12.setter\n    def odr12(self, value: int)\
    \ -> None:\n        self._odr12.value = value\n\n    @property\n    def odr11(self)\
    \ -> Field:\n        \"\"\"\n        ODR11\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr11\n\n    @odr11.setter\n\
    \    def odr11(self, value: int) -> None:\n        self._odr11.value = value\n\
    \n    @property\n    def odr10(self) -> Field:\n        \"\"\"\n        ODR10\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr10\n\n    @odr10.setter\n    def odr10(self, value: int)\
    \ -> None:\n        self._odr10.value = value\n\n    @property\n    def odr9(self)\
    \ -> Field:\n        \"\"\"\n        ODR9\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr9\n\n    @odr9.setter\n\
    \    def odr9(self, value: int) -> None:\n        self._odr9.value = value\n\n\
    \    @property\n    def odr8(self) -> Field:\n        \"\"\"\n        ODR8\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr8\n\n    @odr8.setter\n    def odr8(self, value: int) ->\
    \ None:\n        self._odr8.value = value\n\n    @property\n    def odr7(self)\
    \ -> Field:\n        \"\"\"\n        ODR7\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr7\n\n    @odr7.setter\n\
    \    def odr7(self, value: int) -> None:\n        self._odr7.value = value\n\n\
    \    @property\n    def odr6(self) -> Field:\n        \"\"\"\n        ODR6\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr6\n\n    @odr6.setter\n    def odr6(self, value: int) ->\
    \ None:\n        self._odr6.value = value\n\n    @property\n    def odr5(self)\
    \ -> Field:\n        \"\"\"\n        ODR5\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr5\n\n    @odr5.setter\n\
    \    def odr5(self, value: int) -> None:\n        self._odr5.value = value\n\n\
    \    @property\n    def odr4(self) -> Field:\n        \"\"\"\n        ODR4\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr4\n\n    @odr4.setter\n    def odr4(self, value: int) ->\
    \ None:\n        self._odr4.value = value\n\n    @property\n    def odr3(self)\
    \ -> Field:\n        \"\"\"\n        ODR3\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr3\n\n    @odr3.setter\n\
    \    def odr3(self, value: int) -> None:\n        self._odr3.value = value\n\n\
    \    @property\n    def odr2(self) -> Field:\n        \"\"\"\n        ODR2\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr2\n\n    @odr2.setter\n    def odr2(self, value: int) ->\
    \ None:\n        self._odr2.value = value\n\n    @property\n    def odr1(self)\
    \ -> Field:\n        \"\"\"\n        ODR1\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr1\n\n    @odr1.setter\n\
    \    def odr1(self, value: int) -> None:\n        self._odr1.value = value\n\n\
    \    @property\n    def odr0(self) -> Field:\n        \"\"\"\n        ODR0\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr0\n\n    @odr0.setter\n    def odr0(self, value: int) ->\
    \ None:\n        self._odr0.value = value\n\n\nclass BsrrRegister(Register):\n\
    \    \"\"\"\n    BSRR\n\n    GPIO port bit set/reset\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._br15 = Field(\"br15\", 31,\
    \ 1)\n        self._br14 = Field(\"br14\", 30, 1)\n        self._br13 = Field(\"\
    br13\", 29, 1)\n        self._br12 = Field(\"br12\", 28, 1)\n        self._br11\
    \ = Field(\"br11\", 27, 1)\n        self._br10 = Field(\"br10\", 26, 1)\n    \
    \    self._br9 = Field(\"br9\", 25, 1)\n        self._br8 = Field(\"br8\", 24,\
    \ 1)\n        self._br7 = Field(\"br7\", 23, 1)\n        self._br6 = Field(\"\
    br6\", 22, 1)\n        self._br5 = Field(\"br5\", 21, 1)\n        self._br4 =\
    \ Field(\"br4\", 20, 1)\n        self._br3 = Field(\"br3\", 19, 1)\n        self._br2\
    \ = Field(\"br2\", 18, 1)\n        self._br1 = Field(\"br1\", 17, 1)\n       \
    \ self._br0 = Field(\"br0\", 16, 1)\n        self._bs15 = Field(\"bs15\", 15,\
    \ 1)\n        self._bs14 = Field(\"bs14\", 14, 1)\n        self._bs13 = Field(\"\
    bs13\", 13, 1)\n        self._bs12 = Field(\"bs12\", 12, 1)\n        self._bs11\
    \ = Field(\"bs11\", 11, 1)\n        self._bs10 = Field(\"bs10\", 10, 1)\n    \
    \    self._bs9 = Field(\"bs9\", 9, 1)\n        self._bs8 = Field(\"bs8\", 8, 1)\n\
    \        self._bs7 = Field(\"bs7\", 7, 1)\n        self._bs6 = Field(\"bs6\",\
    \ 6, 1)\n        self._bs5 = Field(\"bs5\", 5, 1)\n        self._bs4 = Field(\"\
    bs4\", 4, 1)\n        self._bs3 = Field(\"bs3\", 3, 1)\n        self._bs2 = Field(\"\
    bs2\", 2, 1)\n        self._bs1 = Field(\"bs1\", 1, 1)\n        self._bs0 = Field(\"\
    bs0\", 0, 1)\n        super().__init__(\"BSRR\", 0x40020400 + 0x18)\n\n    @property\n\
    \    def br15(self) -> Field:\n        \"\"\"\n        BR15\n\n        Port x\
    \ reset bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br15\n\
    \n    @br15.setter\n    def br15(self, value: int) -> None:\n        self._br15.value\
    \ = value\n\n    @property\n    def br14(self) -> Field:\n        \"\"\"\n   \
    \     BR14\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br14\n\n    @br14.setter\n    def br14(self,\
    \ value: int) -> None:\n        self._br14.value = value\n\n    @property\n  \
    \  def br13(self) -> Field:\n        \"\"\"\n        BR13\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br13\n\
    \n    @br13.setter\n    def br13(self, value: int) -> None:\n        self._br13.value\
    \ = value\n\n    @property\n    def br12(self) -> Field:\n        \"\"\"\n   \
    \     BR12\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br12\n\n    @br12.setter\n    def br12(self,\
    \ value: int) -> None:\n        self._br12.value = value\n\n    @property\n  \
    \  def br11(self) -> Field:\n        \"\"\"\n        BR11\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br11\n\
    \n    @br11.setter\n    def br11(self, value: int) -> None:\n        self._br11.value\
    \ = value\n\n    @property\n    def br10(self) -> Field:\n        \"\"\"\n   \
    \     BR10\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br10\n\n    @br10.setter\n    def br10(self,\
    \ value: int) -> None:\n        self._br10.value = value\n\n    @property\n  \
    \  def br9(self) -> Field:\n        \"\"\"\n        BR9\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br9\n\
    \n    @br9.setter\n    def br9(self, value: int) -> None:\n        self._br9.value\
    \ = value\n\n    @property\n    def br8(self) -> Field:\n        \"\"\"\n    \
    \    BR8\n\n        Port x reset bit y (y =\n                  0..15)\n      \
    \  \"\"\"\n        return self._br8\n\n    @br8.setter\n    def br8(self, value:\
    \ int) -> None:\n        self._br8.value = value\n\n    @property\n    def br7(self)\
    \ -> Field:\n        \"\"\"\n        BR7\n\n        Port x reset bit y (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._br7\n\n    @br7.setter\n\
    \    def br7(self, value: int) -> None:\n        self._br7.value = value\n\n \
    \   @property\n    def br6(self) -> Field:\n        \"\"\"\n        BR6\n\n  \
    \      Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._br6\n\n    @br6.setter\n    def br6(self, value: int) -> None:\n\
    \        self._br6.value = value\n\n    @property\n    def br5(self) -> Field:\n\
    \        \"\"\"\n        BR5\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br5\n\n    @br5.setter\n \
    \   def br5(self, value: int) -> None:\n        self._br5.value = value\n\n  \
    \  @property\n    def br4(self) -> Field:\n        \"\"\"\n        BR4\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br4\n\n    @br4.setter\n    def br4(self, value: int) -> None:\n\
    \        self._br4.value = value\n\n    @property\n    def br3(self) -> Field:\n\
    \        \"\"\"\n        BR3\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br3\n\n    @br3.setter\n \
    \   def br3(self, value: int) -> None:\n        self._br3.value = value\n\n  \
    \  @property\n    def br2(self) -> Field:\n        \"\"\"\n        BR2\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br2\n\n    @br2.setter\n    def br2(self, value: int) -> None:\n\
    \        self._br2.value = value\n\n    @property\n    def br1(self) -> Field:\n\
    \        \"\"\"\n        BR1\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br1\n\n    @br1.setter\n \
    \   def br1(self, value: int) -> None:\n        self._br1.value = value\n\n  \
    \  @property\n    def br0(self) -> Field:\n        \"\"\"\n        BR0\n\n   \
    \     Port x set bit y (y=\n                  0..15)\n        \"\"\"\n       \
    \ return self._br0\n\n    @br0.setter\n    def br0(self, value: int) -> None:\n\
    \        self._br0.value = value\n\n    @property\n    def bs15(self) -> Field:\n\
    \        \"\"\"\n        BS15\n\n        Port x set bit y (y=\n              \
    \    0..15)\n        \"\"\"\n        return self._bs15\n\n    @bs15.setter\n \
    \   def bs15(self, value: int) -> None:\n        self._bs15.value = value\n\n\
    \    @property\n    def bs14(self) -> Field:\n        \"\"\"\n        BS14\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs14\n\n    @bs14.setter\n    def bs14(self, value: int) ->\
    \ None:\n        self._bs14.value = value\n\n    @property\n    def bs13(self)\
    \ -> Field:\n        \"\"\"\n        BS13\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs13\n\n    @bs13.setter\n\
    \    def bs13(self, value: int) -> None:\n        self._bs13.value = value\n\n\
    \    @property\n    def bs12(self) -> Field:\n        \"\"\"\n        BS12\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs12\n\n    @bs12.setter\n    def bs12(self, value: int) ->\
    \ None:\n        self._bs12.value = value\n\n    @property\n    def bs11(self)\
    \ -> Field:\n        \"\"\"\n        BS11\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs11\n\n    @bs11.setter\n\
    \    def bs11(self, value: int) -> None:\n        self._bs11.value = value\n\n\
    \    @property\n    def bs10(self) -> Field:\n        \"\"\"\n        BS10\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs10\n\n    @bs10.setter\n    def bs10(self, value: int) ->\
    \ None:\n        self._bs10.value = value\n\n    @property\n    def bs9(self)\
    \ -> Field:\n        \"\"\"\n        BS9\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs9\n\n    @bs9.setter\n\
    \    def bs9(self, value: int) -> None:\n        self._bs9.value = value\n\n \
    \   @property\n    def bs8(self) -> Field:\n        \"\"\"\n        BS8\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs8\n\n    @bs8.setter\n    def bs8(self, value: int) -> None:\n\
    \        self._bs8.value = value\n\n    @property\n    def bs7(self) -> Field:\n\
    \        \"\"\"\n        BS7\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs7\n\n    @bs7.setter\n    def\
    \ bs7(self, value: int) -> None:\n        self._bs7.value = value\n\n    @property\n\
    \    def bs6(self) -> Field:\n        \"\"\"\n        BS6\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs6\n\
    \n    @bs6.setter\n    def bs6(self, value: int) -> None:\n        self._bs6.value\
    \ = value\n\n    @property\n    def bs5(self) -> Field:\n        \"\"\"\n    \
    \    BS5\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs5\n\n    @bs5.setter\n    def bs5(self, value: int)\
    \ -> None:\n        self._bs5.value = value\n\n    @property\n    def bs4(self)\
    \ -> Field:\n        \"\"\"\n        BS4\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs4\n\n    @bs4.setter\n\
    \    def bs4(self, value: int) -> None:\n        self._bs4.value = value\n\n \
    \   @property\n    def bs3(self) -> Field:\n        \"\"\"\n        BS3\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs3\n\n    @bs3.setter\n    def bs3(self, value: int) -> None:\n\
    \        self._bs3.value = value\n\n    @property\n    def bs2(self) -> Field:\n\
    \        \"\"\"\n        BS2\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs2\n\n    @bs2.setter\n    def\
    \ bs2(self, value: int) -> None:\n        self._bs2.value = value\n\n    @property\n\
    \    def bs1(self) -> Field:\n        \"\"\"\n        BS1\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs1\n\
    \n    @bs1.setter\n    def bs1(self, value: int) -> None:\n        self._bs1.value\
    \ = value\n\n    @property\n    def bs0(self) -> Field:\n        \"\"\"\n    \
    \    BS0\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs0\n\n    @bs0.setter\n    def bs0(self, value: int)\
    \ -> None:\n        self._bs0.value = value\n\n\nclass LckrRegister(Register):\n\
    \    \"\"\"\n    LCKR\n\n    GPIO port configuration lock\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lckk = Field(\"lckk\", 16,\
    \ 1)\n        self._lck15 = Field(\"lck15\", 15, 1)\n        self._lck14 = Field(\"\
    lck14\", 14, 1)\n        self._lck13 = Field(\"lck13\", 13, 1)\n        self._lck12\
    \ = Field(\"lck12\", 12, 1)\n        self._lck11 = Field(\"lck11\", 11, 1)\n \
    \       self._lck10 = Field(\"lck10\", 10, 1)\n        self._lck9 = Field(\"lck9\"\
    , 9, 1)\n        self._lck8 = Field(\"lck8\", 8, 1)\n        self._lck7 = Field(\"\
    lck7\", 7, 1)\n        self._lck6 = Field(\"lck6\", 6, 1)\n        self._lck5\
    \ = Field(\"lck5\", 5, 1)\n        self._lck4 = Field(\"lck4\", 4, 1)\n      \
    \  self._lck3 = Field(\"lck3\", 3, 1)\n        self._lck2 = Field(\"lck2\", 2,\
    \ 1)\n        self._lck1 = Field(\"lck1\", 1, 1)\n        self._lck0 = Field(\"\
    lck0\", 0, 1)\n        super().__init__(\"LCKR\", 0x40020400 + 0x1C)\n\n    @property\n\
    \    def lckk(self) -> Field:\n        \"\"\"\n        LCKK\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lckk\n\
    \n    @lckk.setter\n    def lckk(self, value: int) -> None:\n        self._lckk.value\
    \ = value\n\n    @property\n    def lck15(self) -> Field:\n        \"\"\"\n  \
    \      LCK15\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck15\n\n    @lck15.setter\n    def lck15(self,\
    \ value: int) -> None:\n        self._lck15.value = value\n\n    @property\n \
    \   def lck14(self) -> Field:\n        \"\"\"\n        LCK14\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck14\n\
    \n    @lck14.setter\n    def lck14(self, value: int) -> None:\n        self._lck14.value\
    \ = value\n\n    @property\n    def lck13(self) -> Field:\n        \"\"\"\n  \
    \      LCK13\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck13\n\n    @lck13.setter\n    def lck13(self,\
    \ value: int) -> None:\n        self._lck13.value = value\n\n    @property\n \
    \   def lck12(self) -> Field:\n        \"\"\"\n        LCK12\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck12\n\
    \n    @lck12.setter\n    def lck12(self, value: int) -> None:\n        self._lck12.value\
    \ = value\n\n    @property\n    def lck11(self) -> Field:\n        \"\"\"\n  \
    \      LCK11\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck11\n\n    @lck11.setter\n    def lck11(self,\
    \ value: int) -> None:\n        self._lck11.value = value\n\n    @property\n \
    \   def lck10(self) -> Field:\n        \"\"\"\n        LCK10\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck10\n\
    \n    @lck10.setter\n    def lck10(self, value: int) -> None:\n        self._lck10.value\
    \ = value\n\n    @property\n    def lck9(self) -> Field:\n        \"\"\"\n   \
    \     LCK9\n\n        Port x lock bit y (y=\n                  0..15)\n      \
    \  \"\"\"\n        return self._lck9\n\n    @lck9.setter\n    def lck9(self, value:\
    \ int) -> None:\n        self._lck9.value = value\n\n    @property\n    def lck8(self)\
    \ -> Field:\n        \"\"\"\n        LCK8\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck8\n\n    @lck8.setter\n\
    \    def lck8(self, value: int) -> None:\n        self._lck8.value = value\n\n\
    \    @property\n    def lck7(self) -> Field:\n        \"\"\"\n        LCK7\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck7\n\n    @lck7.setter\n    def lck7(self, value: int) ->\
    \ None:\n        self._lck7.value = value\n\n    @property\n    def lck6(self)\
    \ -> Field:\n        \"\"\"\n        LCK6\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck6\n\n    @lck6.setter\n\
    \    def lck6(self, value: int) -> None:\n        self._lck6.value = value\n\n\
    \    @property\n    def lck5(self) -> Field:\n        \"\"\"\n        LCK5\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck5\n\n    @lck5.setter\n    def lck5(self, value: int) ->\
    \ None:\n        self._lck5.value = value\n\n    @property\n    def lck4(self)\
    \ -> Field:\n        \"\"\"\n        LCK4\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck4\n\n    @lck4.setter\n\
    \    def lck4(self, value: int) -> None:\n        self._lck4.value = value\n\n\
    \    @property\n    def lck3(self) -> Field:\n        \"\"\"\n        LCK3\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck3\n\n    @lck3.setter\n    def lck3(self, value: int) ->\
    \ None:\n        self._lck3.value = value\n\n    @property\n    def lck2(self)\
    \ -> Field:\n        \"\"\"\n        LCK2\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck2\n\n    @lck2.setter\n\
    \    def lck2(self, value: int) -> None:\n        self._lck2.value = value\n\n\
    \    @property\n    def lck1(self) -> Field:\n        \"\"\"\n        LCK1\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck1\n\n    @lck1.setter\n    def lck1(self, value: int) ->\
    \ None:\n        self._lck1.value = value\n\n    @property\n    def lck0(self)\
    \ -> Field:\n        \"\"\"\n        LCK0\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck0\n\n    @lck0.setter\n\
    \    def lck0(self, value: int) -> None:\n        self._lck0.value = value\n\n\
    \nclass AfrlRegister(Register):\n    \"\"\"\n    AFRL\n\n    GPIO alternate function\
    \ low\n              register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._afrl7 = Field(\"afrl7\", 28, 4)\n        self._afrl6 = Field(\"afrl6\"\
    , 24, 4)\n        self._afrl5 = Field(\"afrl5\", 20, 4)\n        self._afrl4 =\
    \ Field(\"afrl4\", 16, 4)\n        self._afrl3 = Field(\"afrl3\", 12, 4)\n   \
    \     self._afrl2 = Field(\"afrl2\", 8, 4)\n        self._afrl1 = Field(\"afrl1\"\
    , 4, 4)\n        self._afrl0 = Field(\"afrl0\", 0, 4)\n        super().__init__(\"\
    AFRL\", 0x40020400 + 0x20)\n\n    @property\n    def afrl7(self) -> Field:\n \
    \       \"\"\"\n        AFRL7\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 0..7)\n        \"\"\"\n        return self._afrl7\n\
    \n    @afrl7.setter\n    def afrl7(self, value: int) -> None:\n        self._afrl7.value\
    \ = value\n\n    @property\n    def afrl6(self) -> Field:\n        \"\"\"\n  \
    \      AFRL6\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 0..7)\n        \"\"\"\n        return self._afrl6\n\n    @afrl6.setter\n\
    \    def afrl6(self, value: int) -> None:\n        self._afrl6.value = value\n\
    \n    @property\n    def afrl5(self) -> Field:\n        \"\"\"\n        AFRL5\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl5\n\n    @afrl5.setter\n \
    \   def afrl5(self, value: int) -> None:\n        self._afrl5.value = value\n\n\
    \    @property\n    def afrl4(self) -> Field:\n        \"\"\"\n        AFRL4\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl4\n\n    @afrl4.setter\n \
    \   def afrl4(self, value: int) -> None:\n        self._afrl4.value = value\n\n\
    \    @property\n    def afrl3(self) -> Field:\n        \"\"\"\n        AFRL3\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl3\n\n    @afrl3.setter\n \
    \   def afrl3(self, value: int) -> None:\n        self._afrl3.value = value\n\n\
    \    @property\n    def afrl2(self) -> Field:\n        \"\"\"\n        AFRL2\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl2\n\n    @afrl2.setter\n \
    \   def afrl2(self, value: int) -> None:\n        self._afrl2.value = value\n\n\
    \    @property\n    def afrl1(self) -> Field:\n        \"\"\"\n        AFRL1\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl1\n\n    @afrl1.setter\n \
    \   def afrl1(self, value: int) -> None:\n        self._afrl1.value = value\n\n\
    \    @property\n    def afrl0(self) -> Field:\n        \"\"\"\n        AFRL0\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl0\n\n    @afrl0.setter\n \
    \   def afrl0(self, value: int) -> None:\n        self._afrl0.value = value\n\n\
    \nclass AfrhRegister(Register):\n    \"\"\"\n    AFRH\n\n    GPIO alternate function\
    \ high\n              register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._afrh15 = Field(\"afrh15\", 28, 4)\n        self._afrh14 = Field(\"afrh14\"\
    , 24, 4)\n        self._afrh13 = Field(\"afrh13\", 20, 4)\n        self._afrh12\
    \ = Field(\"afrh12\", 16, 4)\n        self._afrh11 = Field(\"afrh11\", 12, 4)\n\
    \        self._afrh10 = Field(\"afrh10\", 8, 4)\n        self._afrh9 = Field(\"\
    afrh9\", 4, 4)\n        self._afrh8 = Field(\"afrh8\", 0, 4)\n        super().__init__(\"\
    AFRH\", 0x40020400 + 0x24)\n\n    @property\n    def afrh15(self) -> Field:\n\
    \        \"\"\"\n        AFRH15\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 8..15)\n        \"\"\"\n        return self._afrh15\n\
    \n    @afrh15.setter\n    def afrh15(self, value: int) -> None:\n        self._afrh15.value\
    \ = value\n\n    @property\n    def afrh14(self) -> Field:\n        \"\"\"\n \
    \       AFRH14\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh14\n\n  \
    \  @afrh14.setter\n    def afrh14(self, value: int) -> None:\n        self._afrh14.value\
    \ = value\n\n    @property\n    def afrh13(self) -> Field:\n        \"\"\"\n \
    \       AFRH13\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh13\n\n  \
    \  @afrh13.setter\n    def afrh13(self, value: int) -> None:\n        self._afrh13.value\
    \ = value\n\n    @property\n    def afrh12(self) -> Field:\n        \"\"\"\n \
    \       AFRH12\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh12\n\n  \
    \  @afrh12.setter\n    def afrh12(self, value: int) -> None:\n        self._afrh12.value\
    \ = value\n\n    @property\n    def afrh11(self) -> Field:\n        \"\"\"\n \
    \       AFRH11\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh11\n\n  \
    \  @afrh11.setter\n    def afrh11(self, value: int) -> None:\n        self._afrh11.value\
    \ = value\n\n    @property\n    def afrh10(self) -> Field:\n        \"\"\"\n \
    \       AFRH10\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh10\n\n  \
    \  @afrh10.setter\n    def afrh10(self, value: int) -> None:\n        self._afrh10.value\
    \ = value\n\n    @property\n    def afrh9(self) -> Field:\n        \"\"\"\n  \
    \      AFRH9\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 8..15)\n        \"\"\"\n        return self._afrh9\n\n    @afrh9.setter\n\
    \    def afrh9(self, value: int) -> None:\n        self._afrh9.value = value\n\
    \n    @property\n    def afrh8(self) -> Field:\n        \"\"\"\n        AFRH8\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 8..15)\n        \"\"\"\n        return self._afrh8\n\n    @afrh8.setter\n\
    \    def afrh8(self, value: int) -> None:\n        self._afrh8.value = value\n\
    \n\nclass Gpiob(Peripheral):\n    \"\"\"\n    GPIOB\n\n    General-purpose I/Os\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._moder = ModerRegister()\n\
    \        self._otyper = OtyperRegister()\n        self._ospeedr = OspeedrRegister()\n\
    \        self._pupdr = PupdrRegister()\n        self._idr = IdrRegister()\n  \
    \      self._odr = OdrRegister()\n        self._bsrr = BsrrRegister()\n      \
    \  self._lckr = LckrRegister()\n        self._afrl = AfrlRegister()\n        self._afrh\
    \ = AfrhRegister()\n        super().__init__(\"gpiob\", 0x40020400)\n\n    @property\n\
    \    def moder(self) -> ModerRegister:\n        return self._moder\n\n    @moder.setter\n\
    \    def moder(self, value: int) -> None:\n        self._moder.value = value\n\
    \n    @property\n    def otyper(self) -> OtyperRegister:\n        return self._otyper\n\
    \n    @otyper.setter\n    def otyper(self, value: int) -> None:\n        self._otyper.value\
    \ = value\n\n    @property\n    def ospeedr(self) -> OspeedrRegister:\n      \
    \  return self._ospeedr\n\n    @ospeedr.setter\n    def ospeedr(self, value: int)\
    \ -> None:\n        self._ospeedr.value = value\n\n    @property\n    def pupdr(self)\
    \ -> PupdrRegister:\n        return self._pupdr\n\n    @pupdr.setter\n    def\
    \ pupdr(self, value: int) -> None:\n        self._pupdr.value = value\n\n    @property\n\
    \    def idr(self) -> IdrRegister:\n        return self._idr\n\n    @idr.setter\n\
    \    def idr(self, value: int) -> None:\n        self._idr.value = value\n\n \
    \   @property\n    def odr(self) -> OdrRegister:\n        return self._odr\n\n\
    \    @odr.setter\n    def odr(self, value: int) -> None:\n        self._odr.value\
    \ = value\n\n    @property\n    def bsrr(self) -> BsrrRegister:\n        return\
    \ self._bsrr\n\n    @bsrr.setter\n    def bsrr(self, value: int) -> None:\n  \
    \      self._bsrr.value = value\n\n    @property\n    def lckr(self) -> LckrRegister:\n\
    \        return self._lckr\n\n    @lckr.setter\n    def lckr(self, value: int)\
    \ -> None:\n        self._lckr.value = value\n\n    @property\n    def afrl(self)\
    \ -> AfrlRegister:\n        return self._afrl\n\n    @afrl.setter\n    def afrl(self,\
    \ value: int) -> None:\n        self._afrl.value = value\n\n    @property\n  \
    \  def afrh(self) -> AfrhRegister:\n        return self._afrh\n\n    @afrh.setter\n\
    \    def afrh(self, value: int) -> None:\n        self._afrh.value = value\n"
  name: GPIOB
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ModerRegister(Register):\n    \"\"\"\n    MODER\n\n    GPIO\
    \ port mode register\n    \"\"\"\n\n    def __init__(self):\n        self._moder15\
    \ = Field(\"moder15\", 30, 2)\n        self._moder14 = Field(\"moder14\", 28,\
    \ 2)\n        self._moder13 = Field(\"moder13\", 26, 2)\n        self._moder12\
    \ = Field(\"moder12\", 24, 2)\n        self._moder11 = Field(\"moder11\", 22,\
    \ 2)\n        self._moder10 = Field(\"moder10\", 20, 2)\n        self._moder9\
    \ = Field(\"moder9\", 18, 2)\n        self._moder8 = Field(\"moder8\", 16, 2)\n\
    \        self._moder7 = Field(\"moder7\", 14, 2)\n        self._moder6 = Field(\"\
    moder6\", 12, 2)\n        self._moder5 = Field(\"moder5\", 10, 2)\n        self._moder4\
    \ = Field(\"moder4\", 8, 2)\n        self._moder3 = Field(\"moder3\", 6, 2)\n\
    \        self._moder2 = Field(\"moder2\", 4, 2)\n        self._moder1 = Field(\"\
    moder1\", 2, 2)\n        self._moder0 = Field(\"moder0\", 0, 2)\n        super().__init__(\"\
    MODER\", 0x40020000 + 0x0)\n\n    @property\n    def moder15(self) -> Field:\n\
    \        \"\"\"\n        MODER15\n\n        Port x configuration bits (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._moder15\n\n   \
    \ @moder15.setter\n    def moder15(self, value: int) -> None:\n        self._moder15.value\
    \ = value\n\n    @property\n    def moder14(self) -> Field:\n        \"\"\"\n\
    \        MODER14\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder14\n\n    @moder14.setter\n\
    \    def moder14(self, value: int) -> None:\n        self._moder14.value = value\n\
    \n    @property\n    def moder13(self) -> Field:\n        \"\"\"\n        MODER13\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder13\n\n    @moder13.setter\n    def moder13(self,\
    \ value: int) -> None:\n        self._moder13.value = value\n\n    @property\n\
    \    def moder12(self) -> Field:\n        \"\"\"\n        MODER12\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder12\n\n    @moder12.setter\n    def moder12(self, value: int)\
    \ -> None:\n        self._moder12.value = value\n\n    @property\n    def moder11(self)\
    \ -> Field:\n        \"\"\"\n        MODER11\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder11\n\
    \n    @moder11.setter\n    def moder11(self, value: int) -> None:\n        self._moder11.value\
    \ = value\n\n    @property\n    def moder10(self) -> Field:\n        \"\"\"\n\
    \        MODER10\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._moder10\n\n    @moder10.setter\n\
    \    def moder10(self, value: int) -> None:\n        self._moder10.value = value\n\
    \n    @property\n    def moder9(self) -> Field:\n        \"\"\"\n        MODER9\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._moder9\n\n    @moder9.setter\n    def moder9(self,\
    \ value: int) -> None:\n        self._moder9.value = value\n\n    @property\n\
    \    def moder8(self) -> Field:\n        \"\"\"\n        MODER8\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder8\n\n    @moder8.setter\n    def moder8(self, value: int)\
    \ -> None:\n        self._moder8.value = value\n\n    @property\n    def moder7(self)\
    \ -> Field:\n        \"\"\"\n        MODER7\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder7\n\
    \n    @moder7.setter\n    def moder7(self, value: int) -> None:\n        self._moder7.value\
    \ = value\n\n    @property\n    def moder6(self) -> Field:\n        \"\"\"\n \
    \       MODER6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder6\n\n    @moder6.setter\n    def moder6(self,\
    \ value: int) -> None:\n        self._moder6.value = value\n\n    @property\n\
    \    def moder5(self) -> Field:\n        \"\"\"\n        MODER5\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder5\n\n    @moder5.setter\n    def moder5(self, value: int)\
    \ -> None:\n        self._moder5.value = value\n\n    @property\n    def moder4(self)\
    \ -> Field:\n        \"\"\"\n        MODER4\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder4\n\
    \n    @moder4.setter\n    def moder4(self, value: int) -> None:\n        self._moder4.value\
    \ = value\n\n    @property\n    def moder3(self) -> Field:\n        \"\"\"\n \
    \       MODER3\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder3\n\n    @moder3.setter\n    def moder3(self,\
    \ value: int) -> None:\n        self._moder3.value = value\n\n    @property\n\
    \    def moder2(self) -> Field:\n        \"\"\"\n        MODER2\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._moder2\n\n    @moder2.setter\n    def moder2(self, value: int)\
    \ -> None:\n        self._moder2.value = value\n\n    @property\n    def moder1(self)\
    \ -> Field:\n        \"\"\"\n        MODER1\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._moder1\n\
    \n    @moder1.setter\n    def moder1(self, value: int) -> None:\n        self._moder1.value\
    \ = value\n\n    @property\n    def moder0(self) -> Field:\n        \"\"\"\n \
    \       MODER0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._moder0\n\n    @moder0.setter\n    def moder0(self,\
    \ value: int) -> None:\n        self._moder0.value = value\n\n\nclass OtyperRegister(Register):\n\
    \    \"\"\"\n    OTYPER\n\n    GPIO port output type register\n    \"\"\"\n\n\
    \    def __init__(self):\n        self._ot15 = Field(\"ot15\", 15, 1)\n      \
    \  self._ot14 = Field(\"ot14\", 14, 1)\n        self._ot13 = Field(\"ot13\", 13,\
    \ 1)\n        self._ot12 = Field(\"ot12\", 12, 1)\n        self._ot11 = Field(\"\
    ot11\", 11, 1)\n        self._ot10 = Field(\"ot10\", 10, 1)\n        self._ot9\
    \ = Field(\"ot9\", 9, 1)\n        self._ot8 = Field(\"ot8\", 8, 1)\n        self._ot7\
    \ = Field(\"ot7\", 7, 1)\n        self._ot6 = Field(\"ot6\", 6, 1)\n        self._ot5\
    \ = Field(\"ot5\", 5, 1)\n        self._ot4 = Field(\"ot4\", 4, 1)\n        self._ot3\
    \ = Field(\"ot3\", 3, 1)\n        self._ot2 = Field(\"ot2\", 2, 1)\n        self._ot1\
    \ = Field(\"ot1\", 1, 1)\n        self._ot0 = Field(\"ot0\", 0, 1)\n        super().__init__(\"\
    OTYPER\", 0x40020000 + 0x4)\n\n    @property\n    def ot15(self) -> Field:\n \
    \       \"\"\"\n        OT15\n\n        Port x configuration bits (y =\n     \
    \             0..15)\n        \"\"\"\n        return self._ot15\n\n    @ot15.setter\n\
    \    def ot15(self, value: int) -> None:\n        self._ot15.value = value\n\n\
    \    @property\n    def ot14(self) -> Field:\n        \"\"\"\n        OT14\n\n\
    \        Port x configuration bits (y =\n                  0..15)\n        \"\"\
    \"\n        return self._ot14\n\n    @ot14.setter\n    def ot14(self, value: int)\
    \ -> None:\n        self._ot14.value = value\n\n    @property\n    def ot13(self)\
    \ -> Field:\n        \"\"\"\n        OT13\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._ot13\n\n\
    \    @ot13.setter\n    def ot13(self, value: int) -> None:\n        self._ot13.value\
    \ = value\n\n    @property\n    def ot12(self) -> Field:\n        \"\"\"\n   \
    \     OT12\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot12\n\n    @ot12.setter\n    def ot12(self,\
    \ value: int) -> None:\n        self._ot12.value = value\n\n    @property\n  \
    \  def ot11(self) -> Field:\n        \"\"\"\n        OT11\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot11\n\
    \n    @ot11.setter\n    def ot11(self, value: int) -> None:\n        self._ot11.value\
    \ = value\n\n    @property\n    def ot10(self) -> Field:\n        \"\"\"\n   \
    \     OT10\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot10\n\n    @ot10.setter\n    def ot10(self,\
    \ value: int) -> None:\n        self._ot10.value = value\n\n    @property\n  \
    \  def ot9(self) -> Field:\n        \"\"\"\n        OT9\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot9\n\
    \n    @ot9.setter\n    def ot9(self, value: int) -> None:\n        self._ot9.value\
    \ = value\n\n    @property\n    def ot8(self) -> Field:\n        \"\"\"\n    \
    \    OT8\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot8\n\n    @ot8.setter\n    def ot8(self,\
    \ value: int) -> None:\n        self._ot8.value = value\n\n    @property\n   \
    \ def ot7(self) -> Field:\n        \"\"\"\n        OT7\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot7\n\
    \n    @ot7.setter\n    def ot7(self, value: int) -> None:\n        self._ot7.value\
    \ = value\n\n    @property\n    def ot6(self) -> Field:\n        \"\"\"\n    \
    \    OT6\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot6\n\n    @ot6.setter\n    def ot6(self,\
    \ value: int) -> None:\n        self._ot6.value = value\n\n    @property\n   \
    \ def ot5(self) -> Field:\n        \"\"\"\n        OT5\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot5\n\
    \n    @ot5.setter\n    def ot5(self, value: int) -> None:\n        self._ot5.value\
    \ = value\n\n    @property\n    def ot4(self) -> Field:\n        \"\"\"\n    \
    \    OT4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot4\n\n    @ot4.setter\n    def ot4(self,\
    \ value: int) -> None:\n        self._ot4.value = value\n\n    @property\n   \
    \ def ot3(self) -> Field:\n        \"\"\"\n        OT3\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot3\n\
    \n    @ot3.setter\n    def ot3(self, value: int) -> None:\n        self._ot3.value\
    \ = value\n\n    @property\n    def ot2(self) -> Field:\n        \"\"\"\n    \
    \    OT2\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot2\n\n    @ot2.setter\n    def ot2(self,\
    \ value: int) -> None:\n        self._ot2.value = value\n\n    @property\n   \
    \ def ot1(self) -> Field:\n        \"\"\"\n        OT1\n\n        Port x configuration\
    \ bits (y =\n                  0..15)\n        \"\"\"\n        return self._ot1\n\
    \n    @ot1.setter\n    def ot1(self, value: int) -> None:\n        self._ot1.value\
    \ = value\n\n    @property\n    def ot0(self) -> Field:\n        \"\"\"\n    \
    \    OT0\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._ot0\n\n    @ot0.setter\n    def ot0(self,\
    \ value: int) -> None:\n        self._ot0.value = value\n\n\nclass OspeedrRegister(Register):\n\
    \    \"\"\"\n    OSPEEDR\n\n    GPIO port output speed\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ospeedr15 = Field(\"ospeedr15\"\
    , 30, 2)\n        self._ospeedr14 = Field(\"ospeedr14\", 28, 2)\n        self._ospeedr13\
    \ = Field(\"ospeedr13\", 26, 2)\n        self._ospeedr12 = Field(\"ospeedr12\"\
    , 24, 2)\n        self._ospeedr11 = Field(\"ospeedr11\", 22, 2)\n        self._ospeedr10\
    \ = Field(\"ospeedr10\", 20, 2)\n        self._ospeedr9 = Field(\"ospeedr9\",\
    \ 18, 2)\n        self._ospeedr8 = Field(\"ospeedr8\", 16, 2)\n        self._ospeedr7\
    \ = Field(\"ospeedr7\", 14, 2)\n        self._ospeedr6 = Field(\"ospeedr6\", 12,\
    \ 2)\n        self._ospeedr5 = Field(\"ospeedr5\", 10, 2)\n        self._ospeedr4\
    \ = Field(\"ospeedr4\", 8, 2)\n        self._ospeedr3 = Field(\"ospeedr3\", 6,\
    \ 2)\n        self._ospeedr2 = Field(\"ospeedr2\", 4, 2)\n        self._ospeedr1\
    \ = Field(\"ospeedr1\", 2, 2)\n        self._ospeedr0 = Field(\"ospeedr0\", 0,\
    \ 2)\n        super().__init__(\"OSPEEDR\", 0x40020000 + 0x8)\n\n    @property\n\
    \    def ospeedr15(self) -> Field:\n        \"\"\"\n        OSPEEDR15\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr15\n\n    @ospeedr15.setter\n    def ospeedr15(self,\
    \ value: int) -> None:\n        self._ospeedr15.value = value\n\n    @property\n\
    \    def ospeedr14(self) -> Field:\n        \"\"\"\n        OSPEEDR14\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr14\n\n    @ospeedr14.setter\n    def ospeedr14(self,\
    \ value: int) -> None:\n        self._ospeedr14.value = value\n\n    @property\n\
    \    def ospeedr13(self) -> Field:\n        \"\"\"\n        OSPEEDR13\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr13\n\n    @ospeedr13.setter\n    def ospeedr13(self,\
    \ value: int) -> None:\n        self._ospeedr13.value = value\n\n    @property\n\
    \    def ospeedr12(self) -> Field:\n        \"\"\"\n        OSPEEDR12\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr12\n\n    @ospeedr12.setter\n    def ospeedr12(self,\
    \ value: int) -> None:\n        self._ospeedr12.value = value\n\n    @property\n\
    \    def ospeedr11(self) -> Field:\n        \"\"\"\n        OSPEEDR11\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr11\n\n    @ospeedr11.setter\n    def ospeedr11(self,\
    \ value: int) -> None:\n        self._ospeedr11.value = value\n\n    @property\n\
    \    def ospeedr10(self) -> Field:\n        \"\"\"\n        OSPEEDR10\n\n    \
    \    Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr10\n\n    @ospeedr10.setter\n    def ospeedr10(self,\
    \ value: int) -> None:\n        self._ospeedr10.value = value\n\n    @property\n\
    \    def ospeedr9(self) -> Field:\n        \"\"\"\n        OSPEEDR9\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr9\n\n    @ospeedr9.setter\n    def ospeedr9(self,\
    \ value: int) -> None:\n        self._ospeedr9.value = value\n\n    @property\n\
    \    def ospeedr8(self) -> Field:\n        \"\"\"\n        OSPEEDR8\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr8\n\n    @ospeedr8.setter\n    def ospeedr8(self,\
    \ value: int) -> None:\n        self._ospeedr8.value = value\n\n    @property\n\
    \    def ospeedr7(self) -> Field:\n        \"\"\"\n        OSPEEDR7\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr7\n\n    @ospeedr7.setter\n    def ospeedr7(self,\
    \ value: int) -> None:\n        self._ospeedr7.value = value\n\n    @property\n\
    \    def ospeedr6(self) -> Field:\n        \"\"\"\n        OSPEEDR6\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr6\n\n    @ospeedr6.setter\n    def ospeedr6(self,\
    \ value: int) -> None:\n        self._ospeedr6.value = value\n\n    @property\n\
    \    def ospeedr5(self) -> Field:\n        \"\"\"\n        OSPEEDR5\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr5\n\n    @ospeedr5.setter\n    def ospeedr5(self,\
    \ value: int) -> None:\n        self._ospeedr5.value = value\n\n    @property\n\
    \    def ospeedr4(self) -> Field:\n        \"\"\"\n        OSPEEDR4\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr4\n\n    @ospeedr4.setter\n    def ospeedr4(self,\
    \ value: int) -> None:\n        self._ospeedr4.value = value\n\n    @property\n\
    \    def ospeedr3(self) -> Field:\n        \"\"\"\n        OSPEEDR3\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr3\n\n    @ospeedr3.setter\n    def ospeedr3(self,\
    \ value: int) -> None:\n        self._ospeedr3.value = value\n\n    @property\n\
    \    def ospeedr2(self) -> Field:\n        \"\"\"\n        OSPEEDR2\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr2\n\n    @ospeedr2.setter\n    def ospeedr2(self,\
    \ value: int) -> None:\n        self._ospeedr2.value = value\n\n    @property\n\
    \    def ospeedr1(self) -> Field:\n        \"\"\"\n        OSPEEDR1\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr1\n\n    @ospeedr1.setter\n    def ospeedr1(self,\
    \ value: int) -> None:\n        self._ospeedr1.value = value\n\n    @property\n\
    \    def ospeedr0(self) -> Field:\n        \"\"\"\n        OSPEEDR0\n\n      \
    \  Port x configuration bits (y =\n                  0..15)\n        \"\"\"\n\
    \        return self._ospeedr0\n\n    @ospeedr0.setter\n    def ospeedr0(self,\
    \ value: int) -> None:\n        self._ospeedr0.value = value\n\n\nclass PupdrRegister(Register):\n\
    \    \"\"\"\n    PUPDR\n\n    GPIO port pull-up/pull-down\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pupdr15 = Field(\"pupdr15\"\
    , 30, 2)\n        self._pupdr14 = Field(\"pupdr14\", 28, 2)\n        self._pupdr13\
    \ = Field(\"pupdr13\", 26, 2)\n        self._pupdr12 = Field(\"pupdr12\", 24,\
    \ 2)\n        self._pupdr11 = Field(\"pupdr11\", 22, 2)\n        self._pupdr10\
    \ = Field(\"pupdr10\", 20, 2)\n        self._pupdr9 = Field(\"pupdr9\", 18, 2)\n\
    \        self._pupdr8 = Field(\"pupdr8\", 16, 2)\n        self._pupdr7 = Field(\"\
    pupdr7\", 14, 2)\n        self._pupdr6 = Field(\"pupdr6\", 12, 2)\n        self._pupdr5\
    \ = Field(\"pupdr5\", 10, 2)\n        self._pupdr4 = Field(\"pupdr4\", 8, 2)\n\
    \        self._pupdr3 = Field(\"pupdr3\", 6, 2)\n        self._pupdr2 = Field(\"\
    pupdr2\", 4, 2)\n        self._pupdr1 = Field(\"pupdr1\", 2, 2)\n        self._pupdr0\
    \ = Field(\"pupdr0\", 0, 2)\n        super().__init__(\"PUPDR\", 0x40020000 +\
    \ 0xC)\n\n    @property\n    def pupdr15(self) -> Field:\n        \"\"\"\n   \
    \     PUPDR15\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr15\n\n    @pupdr15.setter\n    def\
    \ pupdr15(self, value: int) -> None:\n        self._pupdr15.value = value\n\n\
    \    @property\n    def pupdr14(self) -> Field:\n        \"\"\"\n        PUPDR14\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr14\n\n    @pupdr14.setter\n    def pupdr14(self,\
    \ value: int) -> None:\n        self._pupdr14.value = value\n\n    @property\n\
    \    def pupdr13(self) -> Field:\n        \"\"\"\n        PUPDR13\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr13\n\n    @pupdr13.setter\n    def pupdr13(self, value: int)\
    \ -> None:\n        self._pupdr13.value = value\n\n    @property\n    def pupdr12(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR12\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr12\n\
    \n    @pupdr12.setter\n    def pupdr12(self, value: int) -> None:\n        self._pupdr12.value\
    \ = value\n\n    @property\n    def pupdr11(self) -> Field:\n        \"\"\"\n\
    \        PUPDR11\n\n        Port x configuration bits (y =\n                 \
    \ 0..15)\n        \"\"\"\n        return self._pupdr11\n\n    @pupdr11.setter\n\
    \    def pupdr11(self, value: int) -> None:\n        self._pupdr11.value = value\n\
    \n    @property\n    def pupdr10(self) -> Field:\n        \"\"\"\n        PUPDR10\n\
    \n        Port x configuration bits (y =\n                  0..15)\n        \"\
    \"\"\n        return self._pupdr10\n\n    @pupdr10.setter\n    def pupdr10(self,\
    \ value: int) -> None:\n        self._pupdr10.value = value\n\n    @property\n\
    \    def pupdr9(self) -> Field:\n        \"\"\"\n        PUPDR9\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr9\n\n    @pupdr9.setter\n    def pupdr9(self, value: int)\
    \ -> None:\n        self._pupdr9.value = value\n\n    @property\n    def pupdr8(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR8\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr8\n\
    \n    @pupdr8.setter\n    def pupdr8(self, value: int) -> None:\n        self._pupdr8.value\
    \ = value\n\n    @property\n    def pupdr7(self) -> Field:\n        \"\"\"\n \
    \       PUPDR7\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr7\n\n    @pupdr7.setter\n    def pupdr7(self,\
    \ value: int) -> None:\n        self._pupdr7.value = value\n\n    @property\n\
    \    def pupdr6(self) -> Field:\n        \"\"\"\n        PUPDR6\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr6\n\n    @pupdr6.setter\n    def pupdr6(self, value: int)\
    \ -> None:\n        self._pupdr6.value = value\n\n    @property\n    def pupdr5(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR5\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr5\n\
    \n    @pupdr5.setter\n    def pupdr5(self, value: int) -> None:\n        self._pupdr5.value\
    \ = value\n\n    @property\n    def pupdr4(self) -> Field:\n        \"\"\"\n \
    \       PUPDR4\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr4\n\n    @pupdr4.setter\n    def pupdr4(self,\
    \ value: int) -> None:\n        self._pupdr4.value = value\n\n    @property\n\
    \    def pupdr3(self) -> Field:\n        \"\"\"\n        PUPDR3\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr3\n\n    @pupdr3.setter\n    def pupdr3(self, value: int)\
    \ -> None:\n        self._pupdr3.value = value\n\n    @property\n    def pupdr2(self)\
    \ -> Field:\n        \"\"\"\n        PUPDR2\n\n        Port x configuration bits\
    \ (y =\n                  0..15)\n        \"\"\"\n        return self._pupdr2\n\
    \n    @pupdr2.setter\n    def pupdr2(self, value: int) -> None:\n        self._pupdr2.value\
    \ = value\n\n    @property\n    def pupdr1(self) -> Field:\n        \"\"\"\n \
    \       PUPDR1\n\n        Port x configuration bits (y =\n                  0..15)\n\
    \        \"\"\"\n        return self._pupdr1\n\n    @pupdr1.setter\n    def pupdr1(self,\
    \ value: int) -> None:\n        self._pupdr1.value = value\n\n    @property\n\
    \    def pupdr0(self) -> Field:\n        \"\"\"\n        PUPDR0\n\n        Port\
    \ x configuration bits (y =\n                  0..15)\n        \"\"\"\n      \
    \  return self._pupdr0\n\n    @pupdr0.setter\n    def pupdr0(self, value: int)\
    \ -> None:\n        self._pupdr0.value = value\n\n\nclass IdrRegister(Register):\n\
    \    \"\"\"\n    IDR\n\n    GPIO port input data register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._idr15 = Field(\"idr15\", 15, 1)\n        self._idr14\
    \ = Field(\"idr14\", 14, 1)\n        self._idr13 = Field(\"idr13\", 13, 1)\n \
    \       self._idr12 = Field(\"idr12\", 12, 1)\n        self._idr11 = Field(\"\
    idr11\", 11, 1)\n        self._idr10 = Field(\"idr10\", 10, 1)\n        self._idr9\
    \ = Field(\"idr9\", 9, 1)\n        self._idr8 = Field(\"idr8\", 8, 1)\n      \
    \  self._idr7 = Field(\"idr7\", 7, 1)\n        self._idr6 = Field(\"idr6\", 6,\
    \ 1)\n        self._idr5 = Field(\"idr5\", 5, 1)\n        self._idr4 = Field(\"\
    idr4\", 4, 1)\n        self._idr3 = Field(\"idr3\", 3, 1)\n        self._idr2\
    \ = Field(\"idr2\", 2, 1)\n        self._idr1 = Field(\"idr1\", 1, 1)\n      \
    \  self._idr0 = Field(\"idr0\", 0, 1)\n        super().__init__(\"IDR\", 0x40020000\
    \ + 0x10)\n\n    @property\n    def idr15(self) -> Field:\n        \"\"\"\n  \
    \      IDR15\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr15\n\n    @idr15.setter\n    def idr15(self,\
    \ value: int) -> None:\n        self._idr15.value = value\n\n    @property\n \
    \   def idr14(self) -> Field:\n        \"\"\"\n        IDR14\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr14\n\
    \n    @idr14.setter\n    def idr14(self, value: int) -> None:\n        self._idr14.value\
    \ = value\n\n    @property\n    def idr13(self) -> Field:\n        \"\"\"\n  \
    \      IDR13\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr13\n\n    @idr13.setter\n    def idr13(self,\
    \ value: int) -> None:\n        self._idr13.value = value\n\n    @property\n \
    \   def idr12(self) -> Field:\n        \"\"\"\n        IDR12\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr12\n\
    \n    @idr12.setter\n    def idr12(self, value: int) -> None:\n        self._idr12.value\
    \ = value\n\n    @property\n    def idr11(self) -> Field:\n        \"\"\"\n  \
    \      IDR11\n\n        Port input data (y =\n                  0..15)\n     \
    \   \"\"\"\n        return self._idr11\n\n    @idr11.setter\n    def idr11(self,\
    \ value: int) -> None:\n        self._idr11.value = value\n\n    @property\n \
    \   def idr10(self) -> Field:\n        \"\"\"\n        IDR10\n\n        Port input\
    \ data (y =\n                  0..15)\n        \"\"\"\n        return self._idr10\n\
    \n    @idr10.setter\n    def idr10(self, value: int) -> None:\n        self._idr10.value\
    \ = value\n\n    @property\n    def idr9(self) -> Field:\n        \"\"\"\n   \
    \     IDR9\n\n        Port input data (y =\n                  0..15)\n       \
    \ \"\"\"\n        return self._idr9\n\n    @idr9.setter\n    def idr9(self, value:\
    \ int) -> None:\n        self._idr9.value = value\n\n    @property\n    def idr8(self)\
    \ -> Field:\n        \"\"\"\n        IDR8\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr8\n\n    @idr8.setter\n\
    \    def idr8(self, value: int) -> None:\n        self._idr8.value = value\n\n\
    \    @property\n    def idr7(self) -> Field:\n        \"\"\"\n        IDR7\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr7\n\n    @idr7.setter\n    def idr7(self, value: int) ->\
    \ None:\n        self._idr7.value = value\n\n    @property\n    def idr6(self)\
    \ -> Field:\n        \"\"\"\n        IDR6\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr6\n\n    @idr6.setter\n\
    \    def idr6(self, value: int) -> None:\n        self._idr6.value = value\n\n\
    \    @property\n    def idr5(self) -> Field:\n        \"\"\"\n        IDR5\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr5\n\n    @idr5.setter\n    def idr5(self, value: int) ->\
    \ None:\n        self._idr5.value = value\n\n    @property\n    def idr4(self)\
    \ -> Field:\n        \"\"\"\n        IDR4\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr4\n\n    @idr4.setter\n\
    \    def idr4(self, value: int) -> None:\n        self._idr4.value = value\n\n\
    \    @property\n    def idr3(self) -> Field:\n        \"\"\"\n        IDR3\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr3\n\n    @idr3.setter\n    def idr3(self, value: int) ->\
    \ None:\n        self._idr3.value = value\n\n    @property\n    def idr2(self)\
    \ -> Field:\n        \"\"\"\n        IDR2\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr2\n\n    @idr2.setter\n\
    \    def idr2(self, value: int) -> None:\n        self._idr2.value = value\n\n\
    \    @property\n    def idr1(self) -> Field:\n        \"\"\"\n        IDR1\n\n\
    \        Port input data (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._idr1\n\n    @idr1.setter\n    def idr1(self, value: int) ->\
    \ None:\n        self._idr1.value = value\n\n    @property\n    def idr0(self)\
    \ -> Field:\n        \"\"\"\n        IDR0\n\n        Port input data (y =\n  \
    \                0..15)\n        \"\"\"\n        return self._idr0\n\n    @idr0.setter\n\
    \    def idr0(self, value: int) -> None:\n        self._idr0.value = value\n\n\
    \nclass OdrRegister(Register):\n    \"\"\"\n    ODR\n\n    GPIO port output data\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._odr15 = Field(\"\
    odr15\", 15, 1)\n        self._odr14 = Field(\"odr14\", 14, 1)\n        self._odr13\
    \ = Field(\"odr13\", 13, 1)\n        self._odr12 = Field(\"odr12\", 12, 1)\n \
    \       self._odr11 = Field(\"odr11\", 11, 1)\n        self._odr10 = Field(\"\
    odr10\", 10, 1)\n        self._odr9 = Field(\"odr9\", 9, 1)\n        self._odr8\
    \ = Field(\"odr8\", 8, 1)\n        self._odr7 = Field(\"odr7\", 7, 1)\n      \
    \  self._odr6 = Field(\"odr6\", 6, 1)\n        self._odr5 = Field(\"odr5\", 5,\
    \ 1)\n        self._odr4 = Field(\"odr4\", 4, 1)\n        self._odr3 = Field(\"\
    odr3\", 3, 1)\n        self._odr2 = Field(\"odr2\", 2, 1)\n        self._odr1\
    \ = Field(\"odr1\", 1, 1)\n        self._odr0 = Field(\"odr0\", 0, 1)\n      \
    \  super().__init__(\"ODR\", 0x40020000 + 0x14)\n\n    @property\n    def odr15(self)\
    \ -> Field:\n        \"\"\"\n        ODR15\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr15\n\n    @odr15.setter\n\
    \    def odr15(self, value: int) -> None:\n        self._odr15.value = value\n\
    \n    @property\n    def odr14(self) -> Field:\n        \"\"\"\n        ODR14\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr14\n\n    @odr14.setter\n    def odr14(self, value: int)\
    \ -> None:\n        self._odr14.value = value\n\n    @property\n    def odr13(self)\
    \ -> Field:\n        \"\"\"\n        ODR13\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr13\n\n    @odr13.setter\n\
    \    def odr13(self, value: int) -> None:\n        self._odr13.value = value\n\
    \n    @property\n    def odr12(self) -> Field:\n        \"\"\"\n        ODR12\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr12\n\n    @odr12.setter\n    def odr12(self, value: int)\
    \ -> None:\n        self._odr12.value = value\n\n    @property\n    def odr11(self)\
    \ -> Field:\n        \"\"\"\n        ODR11\n\n        Port output data (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._odr11\n\n    @odr11.setter\n\
    \    def odr11(self, value: int) -> None:\n        self._odr11.value = value\n\
    \n    @property\n    def odr10(self) -> Field:\n        \"\"\"\n        ODR10\n\
    \n        Port output data (y =\n                  0..15)\n        \"\"\"\n  \
    \      return self._odr10\n\n    @odr10.setter\n    def odr10(self, value: int)\
    \ -> None:\n        self._odr10.value = value\n\n    @property\n    def odr9(self)\
    \ -> Field:\n        \"\"\"\n        ODR9\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr9\n\n    @odr9.setter\n\
    \    def odr9(self, value: int) -> None:\n        self._odr9.value = value\n\n\
    \    @property\n    def odr8(self) -> Field:\n        \"\"\"\n        ODR8\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr8\n\n    @odr8.setter\n    def odr8(self, value: int) ->\
    \ None:\n        self._odr8.value = value\n\n    @property\n    def odr7(self)\
    \ -> Field:\n        \"\"\"\n        ODR7\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr7\n\n    @odr7.setter\n\
    \    def odr7(self, value: int) -> None:\n        self._odr7.value = value\n\n\
    \    @property\n    def odr6(self) -> Field:\n        \"\"\"\n        ODR6\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr6\n\n    @odr6.setter\n    def odr6(self, value: int) ->\
    \ None:\n        self._odr6.value = value\n\n    @property\n    def odr5(self)\
    \ -> Field:\n        \"\"\"\n        ODR5\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr5\n\n    @odr5.setter\n\
    \    def odr5(self, value: int) -> None:\n        self._odr5.value = value\n\n\
    \    @property\n    def odr4(self) -> Field:\n        \"\"\"\n        ODR4\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr4\n\n    @odr4.setter\n    def odr4(self, value: int) ->\
    \ None:\n        self._odr4.value = value\n\n    @property\n    def odr3(self)\
    \ -> Field:\n        \"\"\"\n        ODR3\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr3\n\n    @odr3.setter\n\
    \    def odr3(self, value: int) -> None:\n        self._odr3.value = value\n\n\
    \    @property\n    def odr2(self) -> Field:\n        \"\"\"\n        ODR2\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr2\n\n    @odr2.setter\n    def odr2(self, value: int) ->\
    \ None:\n        self._odr2.value = value\n\n    @property\n    def odr1(self)\
    \ -> Field:\n        \"\"\"\n        ODR1\n\n        Port output data (y =\n \
    \                 0..15)\n        \"\"\"\n        return self._odr1\n\n    @odr1.setter\n\
    \    def odr1(self, value: int) -> None:\n        self._odr1.value = value\n\n\
    \    @property\n    def odr0(self) -> Field:\n        \"\"\"\n        ODR0\n\n\
    \        Port output data (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._odr0\n\n    @odr0.setter\n    def odr0(self, value: int) ->\
    \ None:\n        self._odr0.value = value\n\n\nclass BsrrRegister(Register):\n\
    \    \"\"\"\n    BSRR\n\n    GPIO port bit set/reset\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._br15 = Field(\"br15\", 31,\
    \ 1)\n        self._br14 = Field(\"br14\", 30, 1)\n        self._br13 = Field(\"\
    br13\", 29, 1)\n        self._br12 = Field(\"br12\", 28, 1)\n        self._br11\
    \ = Field(\"br11\", 27, 1)\n        self._br10 = Field(\"br10\", 26, 1)\n    \
    \    self._br9 = Field(\"br9\", 25, 1)\n        self._br8 = Field(\"br8\", 24,\
    \ 1)\n        self._br7 = Field(\"br7\", 23, 1)\n        self._br6 = Field(\"\
    br6\", 22, 1)\n        self._br5 = Field(\"br5\", 21, 1)\n        self._br4 =\
    \ Field(\"br4\", 20, 1)\n        self._br3 = Field(\"br3\", 19, 1)\n        self._br2\
    \ = Field(\"br2\", 18, 1)\n        self._br1 = Field(\"br1\", 17, 1)\n       \
    \ self._br0 = Field(\"br0\", 16, 1)\n        self._bs15 = Field(\"bs15\", 15,\
    \ 1)\n        self._bs14 = Field(\"bs14\", 14, 1)\n        self._bs13 = Field(\"\
    bs13\", 13, 1)\n        self._bs12 = Field(\"bs12\", 12, 1)\n        self._bs11\
    \ = Field(\"bs11\", 11, 1)\n        self._bs10 = Field(\"bs10\", 10, 1)\n    \
    \    self._bs9 = Field(\"bs9\", 9, 1)\n        self._bs8 = Field(\"bs8\", 8, 1)\n\
    \        self._bs7 = Field(\"bs7\", 7, 1)\n        self._bs6 = Field(\"bs6\",\
    \ 6, 1)\n        self._bs5 = Field(\"bs5\", 5, 1)\n        self._bs4 = Field(\"\
    bs4\", 4, 1)\n        self._bs3 = Field(\"bs3\", 3, 1)\n        self._bs2 = Field(\"\
    bs2\", 2, 1)\n        self._bs1 = Field(\"bs1\", 1, 1)\n        self._bs0 = Field(\"\
    bs0\", 0, 1)\n        super().__init__(\"BSRR\", 0x40020000 + 0x18)\n\n    @property\n\
    \    def br15(self) -> Field:\n        \"\"\"\n        BR15\n\n        Port x\
    \ reset bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br15\n\
    \n    @br15.setter\n    def br15(self, value: int) -> None:\n        self._br15.value\
    \ = value\n\n    @property\n    def br14(self) -> Field:\n        \"\"\"\n   \
    \     BR14\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br14\n\n    @br14.setter\n    def br14(self,\
    \ value: int) -> None:\n        self._br14.value = value\n\n    @property\n  \
    \  def br13(self) -> Field:\n        \"\"\"\n        BR13\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br13\n\
    \n    @br13.setter\n    def br13(self, value: int) -> None:\n        self._br13.value\
    \ = value\n\n    @property\n    def br12(self) -> Field:\n        \"\"\"\n   \
    \     BR12\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br12\n\n    @br12.setter\n    def br12(self,\
    \ value: int) -> None:\n        self._br12.value = value\n\n    @property\n  \
    \  def br11(self) -> Field:\n        \"\"\"\n        BR11\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br11\n\
    \n    @br11.setter\n    def br11(self, value: int) -> None:\n        self._br11.value\
    \ = value\n\n    @property\n    def br10(self) -> Field:\n        \"\"\"\n   \
    \     BR10\n\n        Port x reset bit y (y =\n                  0..15)\n    \
    \    \"\"\"\n        return self._br10\n\n    @br10.setter\n    def br10(self,\
    \ value: int) -> None:\n        self._br10.value = value\n\n    @property\n  \
    \  def br9(self) -> Field:\n        \"\"\"\n        BR9\n\n        Port x reset\
    \ bit y (y =\n                  0..15)\n        \"\"\"\n        return self._br9\n\
    \n    @br9.setter\n    def br9(self, value: int) -> None:\n        self._br9.value\
    \ = value\n\n    @property\n    def br8(self) -> Field:\n        \"\"\"\n    \
    \    BR8\n\n        Port x reset bit y (y =\n                  0..15)\n      \
    \  \"\"\"\n        return self._br8\n\n    @br8.setter\n    def br8(self, value:\
    \ int) -> None:\n        self._br8.value = value\n\n    @property\n    def br7(self)\
    \ -> Field:\n        \"\"\"\n        BR7\n\n        Port x reset bit y (y =\n\
    \                  0..15)\n        \"\"\"\n        return self._br7\n\n    @br7.setter\n\
    \    def br7(self, value: int) -> None:\n        self._br7.value = value\n\n \
    \   @property\n    def br6(self) -> Field:\n        \"\"\"\n        BR6\n\n  \
    \      Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n   \
    \     return self._br6\n\n    @br6.setter\n    def br6(self, value: int) -> None:\n\
    \        self._br6.value = value\n\n    @property\n    def br5(self) -> Field:\n\
    \        \"\"\"\n        BR5\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br5\n\n    @br5.setter\n \
    \   def br5(self, value: int) -> None:\n        self._br5.value = value\n\n  \
    \  @property\n    def br4(self) -> Field:\n        \"\"\"\n        BR4\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br4\n\n    @br4.setter\n    def br4(self, value: int) -> None:\n\
    \        self._br4.value = value\n\n    @property\n    def br3(self) -> Field:\n\
    \        \"\"\"\n        BR3\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br3\n\n    @br3.setter\n \
    \   def br3(self, value: int) -> None:\n        self._br3.value = value\n\n  \
    \  @property\n    def br2(self) -> Field:\n        \"\"\"\n        BR2\n\n   \
    \     Port x reset bit y (y =\n                  0..15)\n        \"\"\"\n    \
    \    return self._br2\n\n    @br2.setter\n    def br2(self, value: int) -> None:\n\
    \        self._br2.value = value\n\n    @property\n    def br1(self) -> Field:\n\
    \        \"\"\"\n        BR1\n\n        Port x reset bit y (y =\n            \
    \      0..15)\n        \"\"\"\n        return self._br1\n\n    @br1.setter\n \
    \   def br1(self, value: int) -> None:\n        self._br1.value = value\n\n  \
    \  @property\n    def br0(self) -> Field:\n        \"\"\"\n        BR0\n\n   \
    \     Port x set bit y (y=\n                  0..15)\n        \"\"\"\n       \
    \ return self._br0\n\n    @br0.setter\n    def br0(self, value: int) -> None:\n\
    \        self._br0.value = value\n\n    @property\n    def bs15(self) -> Field:\n\
    \        \"\"\"\n        BS15\n\n        Port x set bit y (y=\n              \
    \    0..15)\n        \"\"\"\n        return self._bs15\n\n    @bs15.setter\n \
    \   def bs15(self, value: int) -> None:\n        self._bs15.value = value\n\n\
    \    @property\n    def bs14(self) -> Field:\n        \"\"\"\n        BS14\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs14\n\n    @bs14.setter\n    def bs14(self, value: int) ->\
    \ None:\n        self._bs14.value = value\n\n    @property\n    def bs13(self)\
    \ -> Field:\n        \"\"\"\n        BS13\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs13\n\n    @bs13.setter\n\
    \    def bs13(self, value: int) -> None:\n        self._bs13.value = value\n\n\
    \    @property\n    def bs12(self) -> Field:\n        \"\"\"\n        BS12\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs12\n\n    @bs12.setter\n    def bs12(self, value: int) ->\
    \ None:\n        self._bs12.value = value\n\n    @property\n    def bs11(self)\
    \ -> Field:\n        \"\"\"\n        BS11\n\n        Port x set bit y (y=\n  \
    \                0..15)\n        \"\"\"\n        return self._bs11\n\n    @bs11.setter\n\
    \    def bs11(self, value: int) -> None:\n        self._bs11.value = value\n\n\
    \    @property\n    def bs10(self) -> Field:\n        \"\"\"\n        BS10\n\n\
    \        Port x set bit y (y=\n                  0..15)\n        \"\"\"\n    \
    \    return self._bs10\n\n    @bs10.setter\n    def bs10(self, value: int) ->\
    \ None:\n        self._bs10.value = value\n\n    @property\n    def bs9(self)\
    \ -> Field:\n        \"\"\"\n        BS9\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs9\n\n    @bs9.setter\n\
    \    def bs9(self, value: int) -> None:\n        self._bs9.value = value\n\n \
    \   @property\n    def bs8(self) -> Field:\n        \"\"\"\n        BS8\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs8\n\n    @bs8.setter\n    def bs8(self, value: int) -> None:\n\
    \        self._bs8.value = value\n\n    @property\n    def bs7(self) -> Field:\n\
    \        \"\"\"\n        BS7\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs7\n\n    @bs7.setter\n    def\
    \ bs7(self, value: int) -> None:\n        self._bs7.value = value\n\n    @property\n\
    \    def bs6(self) -> Field:\n        \"\"\"\n        BS6\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs6\n\
    \n    @bs6.setter\n    def bs6(self, value: int) -> None:\n        self._bs6.value\
    \ = value\n\n    @property\n    def bs5(self) -> Field:\n        \"\"\"\n    \
    \    BS5\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs5\n\n    @bs5.setter\n    def bs5(self, value: int)\
    \ -> None:\n        self._bs5.value = value\n\n    @property\n    def bs4(self)\
    \ -> Field:\n        \"\"\"\n        BS4\n\n        Port x set bit y (y=\n   \
    \               0..15)\n        \"\"\"\n        return self._bs4\n\n    @bs4.setter\n\
    \    def bs4(self, value: int) -> None:\n        self._bs4.value = value\n\n \
    \   @property\n    def bs3(self) -> Field:\n        \"\"\"\n        BS3\n\n  \
    \      Port x set bit y (y=\n                  0..15)\n        \"\"\"\n      \
    \  return self._bs3\n\n    @bs3.setter\n    def bs3(self, value: int) -> None:\n\
    \        self._bs3.value = value\n\n    @property\n    def bs2(self) -> Field:\n\
    \        \"\"\"\n        BS2\n\n        Port x set bit y (y=\n               \
    \   0..15)\n        \"\"\"\n        return self._bs2\n\n    @bs2.setter\n    def\
    \ bs2(self, value: int) -> None:\n        self._bs2.value = value\n\n    @property\n\
    \    def bs1(self) -> Field:\n        \"\"\"\n        BS1\n\n        Port x set\
    \ bit y (y=\n                  0..15)\n        \"\"\"\n        return self._bs1\n\
    \n    @bs1.setter\n    def bs1(self, value: int) -> None:\n        self._bs1.value\
    \ = value\n\n    @property\n    def bs0(self) -> Field:\n        \"\"\"\n    \
    \    BS0\n\n        Port x set bit y (y=\n                  0..15)\n        \"\
    \"\"\n        return self._bs0\n\n    @bs0.setter\n    def bs0(self, value: int)\
    \ -> None:\n        self._bs0.value = value\n\n\nclass LckrRegister(Register):\n\
    \    \"\"\"\n    LCKR\n\n    GPIO port configuration lock\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._lckk = Field(\"lckk\", 16,\
    \ 1)\n        self._lck15 = Field(\"lck15\", 15, 1)\n        self._lck14 = Field(\"\
    lck14\", 14, 1)\n        self._lck13 = Field(\"lck13\", 13, 1)\n        self._lck12\
    \ = Field(\"lck12\", 12, 1)\n        self._lck11 = Field(\"lck11\", 11, 1)\n \
    \       self._lck10 = Field(\"lck10\", 10, 1)\n        self._lck9 = Field(\"lck9\"\
    , 9, 1)\n        self._lck8 = Field(\"lck8\", 8, 1)\n        self._lck7 = Field(\"\
    lck7\", 7, 1)\n        self._lck6 = Field(\"lck6\", 6, 1)\n        self._lck5\
    \ = Field(\"lck5\", 5, 1)\n        self._lck4 = Field(\"lck4\", 4, 1)\n      \
    \  self._lck3 = Field(\"lck3\", 3, 1)\n        self._lck2 = Field(\"lck2\", 2,\
    \ 1)\n        self._lck1 = Field(\"lck1\", 1, 1)\n        self._lck0 = Field(\"\
    lck0\", 0, 1)\n        super().__init__(\"LCKR\", 0x40020000 + 0x1C)\n\n    @property\n\
    \    def lckk(self) -> Field:\n        \"\"\"\n        LCKK\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lckk\n\
    \n    @lckk.setter\n    def lckk(self, value: int) -> None:\n        self._lckk.value\
    \ = value\n\n    @property\n    def lck15(self) -> Field:\n        \"\"\"\n  \
    \      LCK15\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck15\n\n    @lck15.setter\n    def lck15(self,\
    \ value: int) -> None:\n        self._lck15.value = value\n\n    @property\n \
    \   def lck14(self) -> Field:\n        \"\"\"\n        LCK14\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck14\n\
    \n    @lck14.setter\n    def lck14(self, value: int) -> None:\n        self._lck14.value\
    \ = value\n\n    @property\n    def lck13(self) -> Field:\n        \"\"\"\n  \
    \      LCK13\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck13\n\n    @lck13.setter\n    def lck13(self,\
    \ value: int) -> None:\n        self._lck13.value = value\n\n    @property\n \
    \   def lck12(self) -> Field:\n        \"\"\"\n        LCK12\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck12\n\
    \n    @lck12.setter\n    def lck12(self, value: int) -> None:\n        self._lck12.value\
    \ = value\n\n    @property\n    def lck11(self) -> Field:\n        \"\"\"\n  \
    \      LCK11\n\n        Port x lock bit y (y=\n                  0..15)\n    \
    \    \"\"\"\n        return self._lck11\n\n    @lck11.setter\n    def lck11(self,\
    \ value: int) -> None:\n        self._lck11.value = value\n\n    @property\n \
    \   def lck10(self) -> Field:\n        \"\"\"\n        LCK10\n\n        Port x\
    \ lock bit y (y=\n                  0..15)\n        \"\"\"\n        return self._lck10\n\
    \n    @lck10.setter\n    def lck10(self, value: int) -> None:\n        self._lck10.value\
    \ = value\n\n    @property\n    def lck9(self) -> Field:\n        \"\"\"\n   \
    \     LCK9\n\n        Port x lock bit y (y=\n                  0..15)\n      \
    \  \"\"\"\n        return self._lck9\n\n    @lck9.setter\n    def lck9(self, value:\
    \ int) -> None:\n        self._lck9.value = value\n\n    @property\n    def lck8(self)\
    \ -> Field:\n        \"\"\"\n        LCK8\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck8\n\n    @lck8.setter\n\
    \    def lck8(self, value: int) -> None:\n        self._lck8.value = value\n\n\
    \    @property\n    def lck7(self) -> Field:\n        \"\"\"\n        LCK7\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck7\n\n    @lck7.setter\n    def lck7(self, value: int) ->\
    \ None:\n        self._lck7.value = value\n\n    @property\n    def lck6(self)\
    \ -> Field:\n        \"\"\"\n        LCK6\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck6\n\n    @lck6.setter\n\
    \    def lck6(self, value: int) -> None:\n        self._lck6.value = value\n\n\
    \    @property\n    def lck5(self) -> Field:\n        \"\"\"\n        LCK5\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck5\n\n    @lck5.setter\n    def lck5(self, value: int) ->\
    \ None:\n        self._lck5.value = value\n\n    @property\n    def lck4(self)\
    \ -> Field:\n        \"\"\"\n        LCK4\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck4\n\n    @lck4.setter\n\
    \    def lck4(self, value: int) -> None:\n        self._lck4.value = value\n\n\
    \    @property\n    def lck3(self) -> Field:\n        \"\"\"\n        LCK3\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck3\n\n    @lck3.setter\n    def lck3(self, value: int) ->\
    \ None:\n        self._lck3.value = value\n\n    @property\n    def lck2(self)\
    \ -> Field:\n        \"\"\"\n        LCK2\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck2\n\n    @lck2.setter\n\
    \    def lck2(self, value: int) -> None:\n        self._lck2.value = value\n\n\
    \    @property\n    def lck1(self) -> Field:\n        \"\"\"\n        LCK1\n\n\
    \        Port x lock bit y (y=\n                  0..15)\n        \"\"\"\n   \
    \     return self._lck1\n\n    @lck1.setter\n    def lck1(self, value: int) ->\
    \ None:\n        self._lck1.value = value\n\n    @property\n    def lck0(self)\
    \ -> Field:\n        \"\"\"\n        LCK0\n\n        Port x lock bit y (y=\n \
    \                 0..15)\n        \"\"\"\n        return self._lck0\n\n    @lck0.setter\n\
    \    def lck0(self, value: int) -> None:\n        self._lck0.value = value\n\n\
    \nclass AfrlRegister(Register):\n    \"\"\"\n    AFRL\n\n    GPIO alternate function\
    \ low\n              register\n    \"\"\"\n\n    def __init__(self):\n       \
    \ self._afrl7 = Field(\"afrl7\", 28, 4)\n        self._afrl6 = Field(\"afrl6\"\
    , 24, 4)\n        self._afrl5 = Field(\"afrl5\", 20, 4)\n        self._afrl4 =\
    \ Field(\"afrl4\", 16, 4)\n        self._afrl3 = Field(\"afrl3\", 12, 4)\n   \
    \     self._afrl2 = Field(\"afrl2\", 8, 4)\n        self._afrl1 = Field(\"afrl1\"\
    , 4, 4)\n        self._afrl0 = Field(\"afrl0\", 0, 4)\n        super().__init__(\"\
    AFRL\", 0x40020000 + 0x20)\n\n    @property\n    def afrl7(self) -> Field:\n \
    \       \"\"\"\n        AFRL7\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 0..7)\n        \"\"\"\n        return self._afrl7\n\
    \n    @afrl7.setter\n    def afrl7(self, value: int) -> None:\n        self._afrl7.value\
    \ = value\n\n    @property\n    def afrl6(self) -> Field:\n        \"\"\"\n  \
    \      AFRL6\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 0..7)\n        \"\"\"\n        return self._afrl6\n\n    @afrl6.setter\n\
    \    def afrl6(self, value: int) -> None:\n        self._afrl6.value = value\n\
    \n    @property\n    def afrl5(self) -> Field:\n        \"\"\"\n        AFRL5\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl5\n\n    @afrl5.setter\n \
    \   def afrl5(self, value: int) -> None:\n        self._afrl5.value = value\n\n\
    \    @property\n    def afrl4(self) -> Field:\n        \"\"\"\n        AFRL4\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl4\n\n    @afrl4.setter\n \
    \   def afrl4(self, value: int) -> None:\n        self._afrl4.value = value\n\n\
    \    @property\n    def afrl3(self) -> Field:\n        \"\"\"\n        AFRL3\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl3\n\n    @afrl3.setter\n \
    \   def afrl3(self, value: int) -> None:\n        self._afrl3.value = value\n\n\
    \    @property\n    def afrl2(self) -> Field:\n        \"\"\"\n        AFRL2\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl2\n\n    @afrl2.setter\n \
    \   def afrl2(self, value: int) -> None:\n        self._afrl2.value = value\n\n\
    \    @property\n    def afrl1(self) -> Field:\n        \"\"\"\n        AFRL1\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl1\n\n    @afrl1.setter\n \
    \   def afrl1(self, value: int) -> None:\n        self._afrl1.value = value\n\n\
    \    @property\n    def afrl0(self) -> Field:\n        \"\"\"\n        AFRL0\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 0..7)\n        \"\"\"\n        return self._afrl0\n\n    @afrl0.setter\n \
    \   def afrl0(self, value: int) -> None:\n        self._afrl0.value = value\n\n\
    \nclass AfrhRegister(Register):\n    \"\"\"\n    AFRH\n\n    GPIO alternate function\
    \ high\n              register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._afrh15 = Field(\"afrh15\", 28, 4)\n        self._afrh14 = Field(\"afrh14\"\
    , 24, 4)\n        self._afrh13 = Field(\"afrh13\", 20, 4)\n        self._afrh12\
    \ = Field(\"afrh12\", 16, 4)\n        self._afrh11 = Field(\"afrh11\", 12, 4)\n\
    \        self._afrh10 = Field(\"afrh10\", 8, 4)\n        self._afrh9 = Field(\"\
    afrh9\", 4, 4)\n        self._afrh8 = Field(\"afrh8\", 0, 4)\n        super().__init__(\"\
    AFRH\", 0x40020000 + 0x24)\n\n    @property\n    def afrh15(self) -> Field:\n\
    \        \"\"\"\n        AFRH15\n\n        Alternate function selection for port\
    \ x\n                  bit y (y = 8..15)\n        \"\"\"\n        return self._afrh15\n\
    \n    @afrh15.setter\n    def afrh15(self, value: int) -> None:\n        self._afrh15.value\
    \ = value\n\n    @property\n    def afrh14(self) -> Field:\n        \"\"\"\n \
    \       AFRH14\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh14\n\n  \
    \  @afrh14.setter\n    def afrh14(self, value: int) -> None:\n        self._afrh14.value\
    \ = value\n\n    @property\n    def afrh13(self) -> Field:\n        \"\"\"\n \
    \       AFRH13\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh13\n\n  \
    \  @afrh13.setter\n    def afrh13(self, value: int) -> None:\n        self._afrh13.value\
    \ = value\n\n    @property\n    def afrh12(self) -> Field:\n        \"\"\"\n \
    \       AFRH12\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh12\n\n  \
    \  @afrh12.setter\n    def afrh12(self, value: int) -> None:\n        self._afrh12.value\
    \ = value\n\n    @property\n    def afrh11(self) -> Field:\n        \"\"\"\n \
    \       AFRH11\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh11\n\n  \
    \  @afrh11.setter\n    def afrh11(self, value: int) -> None:\n        self._afrh11.value\
    \ = value\n\n    @property\n    def afrh10(self) -> Field:\n        \"\"\"\n \
    \       AFRH10\n\n        Alternate function selection for port x\n          \
    \        bit y (y = 8..15)\n        \"\"\"\n        return self._afrh10\n\n  \
    \  @afrh10.setter\n    def afrh10(self, value: int) -> None:\n        self._afrh10.value\
    \ = value\n\n    @property\n    def afrh9(self) -> Field:\n        \"\"\"\n  \
    \      AFRH9\n\n        Alternate function selection for port x\n            \
    \      bit y (y = 8..15)\n        \"\"\"\n        return self._afrh9\n\n    @afrh9.setter\n\
    \    def afrh9(self, value: int) -> None:\n        self._afrh9.value = value\n\
    \n    @property\n    def afrh8(self) -> Field:\n        \"\"\"\n        AFRH8\n\
    \n        Alternate function selection for port x\n                  bit y (y\
    \ = 8..15)\n        \"\"\"\n        return self._afrh8\n\n    @afrh8.setter\n\
    \    def afrh8(self, value: int) -> None:\n        self._afrh8.value = value\n\
    \n\nclass Gpioa(Peripheral):\n    \"\"\"\n    GPIOA\n\n    General-purpose I/Os\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._moder = ModerRegister()\n\
    \        self._otyper = OtyperRegister()\n        self._ospeedr = OspeedrRegister()\n\
    \        self._pupdr = PupdrRegister()\n        self._idr = IdrRegister()\n  \
    \      self._odr = OdrRegister()\n        self._bsrr = BsrrRegister()\n      \
    \  self._lckr = LckrRegister()\n        self._afrl = AfrlRegister()\n        self._afrh\
    \ = AfrhRegister()\n        super().__init__(\"gpioa\", 0x40020000)\n\n    @property\n\
    \    def moder(self) -> ModerRegister:\n        return self._moder\n\n    @moder.setter\n\
    \    def moder(self, value: int) -> None:\n        self._moder.value = value\n\
    \n    @property\n    def otyper(self) -> OtyperRegister:\n        return self._otyper\n\
    \n    @otyper.setter\n    def otyper(self, value: int) -> None:\n        self._otyper.value\
    \ = value\n\n    @property\n    def ospeedr(self) -> OspeedrRegister:\n      \
    \  return self._ospeedr\n\n    @ospeedr.setter\n    def ospeedr(self, value: int)\
    \ -> None:\n        self._ospeedr.value = value\n\n    @property\n    def pupdr(self)\
    \ -> PupdrRegister:\n        return self._pupdr\n\n    @pupdr.setter\n    def\
    \ pupdr(self, value: int) -> None:\n        self._pupdr.value = value\n\n    @property\n\
    \    def idr(self) -> IdrRegister:\n        return self._idr\n\n    @idr.setter\n\
    \    def idr(self, value: int) -> None:\n        self._idr.value = value\n\n \
    \   @property\n    def odr(self) -> OdrRegister:\n        return self._odr\n\n\
    \    @odr.setter\n    def odr(self, value: int) -> None:\n        self._odr.value\
    \ = value\n\n    @property\n    def bsrr(self) -> BsrrRegister:\n        return\
    \ self._bsrr\n\n    @bsrr.setter\n    def bsrr(self, value: int) -> None:\n  \
    \      self._bsrr.value = value\n\n    @property\n    def lckr(self) -> LckrRegister:\n\
    \        return self._lckr\n\n    @lckr.setter\n    def lckr(self, value: int)\
    \ -> None:\n        self._lckr.value = value\n\n    @property\n    def afrl(self)\
    \ -> AfrlRegister:\n        return self._afrl\n\n    @afrl.setter\n    def afrl(self,\
    \ value: int) -> None:\n        self._afrl.value = value\n\n    @property\n  \
    \  def afrh(self) -> AfrhRegister:\n        return self._afrh\n\n    @afrh.setter\n\
    \    def afrh(self, value: int) -> None:\n        self._afrh.value = value\n"
  name: GPIOA
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    Control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._swrst = Field(\"\
    swrst\", 15, 1)\n        self._alert = Field(\"alert\", 13, 1)\n        self._pec\
    \ = Field(\"pec\", 12, 1)\n        self._pos = Field(\"pos\", 11, 1)\n       \
    \ self._ack = Field(\"ack\", 10, 1)\n        self._stop = Field(\"stop\", 9, 1)\n\
    \        self._start = Field(\"start\", 8, 1)\n        self._nostretch = Field(\"\
    nostretch\", 7, 1)\n        self._engc = Field(\"engc\", 6, 1)\n        self._enpec\
    \ = Field(\"enpec\", 5, 1)\n        self._enarp = Field(\"enarp\", 4, 1)\n   \
    \     self._smbtype = Field(\"smbtype\", 3, 1)\n        self._smbus = Field(\"\
    smbus\", 1, 1)\n        self._pe = Field(\"pe\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40005C00 + 0x0)\n\n    @property\n    def swrst(self) -> Field:\n   \
    \     \"\"\"\n        SWRST\n\n        Software reset\n        \"\"\"\n      \
    \  return self._swrst\n\n    @swrst.setter\n    def swrst(self, value: int) ->\
    \ None:\n        self._swrst.value = value\n\n    @property\n    def alert(self)\
    \ -> Field:\n        \"\"\"\n        ALERT\n\n        SMBus alert\n        \"\"\
    \"\n        return self._alert\n\n    @alert.setter\n    def alert(self, value:\
    \ int) -> None:\n        self._alert.value = value\n\n    @property\n    def pec(self)\
    \ -> Field:\n        \"\"\"\n        PEC\n\n        Packet error checking\n  \
    \      \"\"\"\n        return self._pec\n\n    @pec.setter\n    def pec(self,\
    \ value: int) -> None:\n        self._pec.value = value\n\n    @property\n   \
    \ def pos(self) -> Field:\n        \"\"\"\n        POS\n\n        Acknowledge/PEC\
    \ Position (for data\n                  reception)\n        \"\"\"\n        return\
    \ self._pos\n\n    @pos.setter\n    def pos(self, value: int) -> None:\n     \
    \   self._pos.value = value\n\n    @property\n    def ack(self) -> Field:\n  \
    \      \"\"\"\n        ACK\n\n        Acknowledge enable\n        \"\"\"\n   \
    \     return self._ack\n\n    @ack.setter\n    def ack(self, value: int) -> None:\n\
    \        self._ack.value = value\n\n    @property\n    def stop(self) -> Field:\n\
    \        \"\"\"\n        STOP\n\n        Stop generation\n        \"\"\"\n   \
    \     return self._stop\n\n    @stop.setter\n    def stop(self, value: int) ->\
    \ None:\n        self._stop.value = value\n\n    @property\n    def start(self)\
    \ -> Field:\n        \"\"\"\n        START\n\n        Start generation\n     \
    \   \"\"\"\n        return self._start\n\n    @start.setter\n    def start(self,\
    \ value: int) -> None:\n        self._start.value = value\n\n    @property\n \
    \   def nostretch(self) -> Field:\n        \"\"\"\n        NOSTRETCH\n\n     \
    \   Clock stretching disable (Slave\n                  mode)\n        \"\"\"\n\
    \        return self._nostretch\n\n    @nostretch.setter\n    def nostretch(self,\
    \ value: int) -> None:\n        self._nostretch.value = value\n\n    @property\n\
    \    def engc(self) -> Field:\n        \"\"\"\n        ENGC\n\n        General\
    \ call enable\n        \"\"\"\n        return self._engc\n\n    @engc.setter\n\
    \    def engc(self, value: int) -> None:\n        self._engc.value = value\n\n\
    \    @property\n    def enpec(self) -> Field:\n        \"\"\"\n        ENPEC\n\
    \n        PEC enable\n        \"\"\"\n        return self._enpec\n\n    @enpec.setter\n\
    \    def enpec(self, value: int) -> None:\n        self._enpec.value = value\n\
    \n    @property\n    def enarp(self) -> Field:\n        \"\"\"\n        ENARP\n\
    \n        ARP enable\n        \"\"\"\n        return self._enarp\n\n    @enarp.setter\n\
    \    def enarp(self, value: int) -> None:\n        self._enarp.value = value\n\
    \n    @property\n    def smbtype(self) -> Field:\n        \"\"\"\n        SMBTYPE\n\
    \n        SMBus type\n        \"\"\"\n        return self._smbtype\n\n    @smbtype.setter\n\
    \    def smbtype(self, value: int) -> None:\n        self._smbtype.value = value\n\
    \n    @property\n    def smbus(self) -> Field:\n        \"\"\"\n        SMBUS\n\
    \n        SMBus mode\n        \"\"\"\n        return self._smbus\n\n    @smbus.setter\n\
    \    def smbus(self, value: int) -> None:\n        self._smbus.value = value\n\
    \n    @property\n    def pe(self) -> Field:\n        \"\"\"\n        PE\n\n  \
    \      Peripheral enable\n        \"\"\"\n        return self._pe\n\n    @pe.setter\n\
    \    def pe(self, value: int) -> None:\n        self._pe.value = value\n\n\nclass\
    \ Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    Control register 2\n    \"\
    \"\"\n\n    def __init__(self):\n        self._last = Field(\"last\", 12, 1)\n\
    \        self._dmaen = Field(\"dmaen\", 11, 1)\n        self._itbufen = Field(\"\
    itbufen\", 10, 1)\n        self._itevten = Field(\"itevten\", 9, 1)\n        self._iterren\
    \ = Field(\"iterren\", 8, 1)\n        self._freq = Field(\"freq\", 0, 6)\n   \
    \     super().__init__(\"CR2\", 0x40005C00 + 0x4)\n\n    @property\n    def last(self)\
    \ -> Field:\n        \"\"\"\n        LAST\n\n        DMA last transfer\n     \
    \   \"\"\"\n        return self._last\n\n    @last.setter\n    def last(self,\
    \ value: int) -> None:\n        self._last.value = value\n\n    @property\n  \
    \  def dmaen(self) -> Field:\n        \"\"\"\n        DMAEN\n\n        DMA requests\
    \ enable\n        \"\"\"\n        return self._dmaen\n\n    @dmaen.setter\n  \
    \  def dmaen(self, value: int) -> None:\n        self._dmaen.value = value\n\n\
    \    @property\n    def itbufen(self) -> Field:\n        \"\"\"\n        ITBUFEN\n\
    \n        Buffer interrupt enable\n        \"\"\"\n        return self._itbufen\n\
    \n    @itbufen.setter\n    def itbufen(self, value: int) -> None:\n        self._itbufen.value\
    \ = value\n\n    @property\n    def itevten(self) -> Field:\n        \"\"\"\n\
    \        ITEVTEN\n\n        Event interrupt enable\n        \"\"\"\n        return\
    \ self._itevten\n\n    @itevten.setter\n    def itevten(self, value: int) -> None:\n\
    \        self._itevten.value = value\n\n    @property\n    def iterren(self) ->\
    \ Field:\n        \"\"\"\n        ITERREN\n\n        Error interrupt enable\n\
    \        \"\"\"\n        return self._iterren\n\n    @iterren.setter\n    def\
    \ iterren(self, value: int) -> None:\n        self._iterren.value = value\n\n\
    \    @property\n    def freq(self) -> Field:\n        \"\"\"\n        FREQ\n\n\
    \        Peripheral clock frequency\n        \"\"\"\n        return self._freq\n\
    \n    @freq.setter\n    def freq(self, value: int) -> None:\n        self._freq.value\
    \ = value\n\n\nclass Oar1Register(Register):\n    \"\"\"\n    OAR1\n\n    Own\
    \ address register 1\n    \"\"\"\n\n    def __init__(self):\n        self._addmode\
    \ = Field(\"addmode\", 15, 1)\n        self._add10 = Field(\"add10\", 8, 2)\n\
    \        self._add7 = Field(\"add7\", 1, 7)\n        self._add0 = Field(\"add0\"\
    , 0, 1)\n        super().__init__(\"OAR1\", 0x40005C00 + 0x8)\n\n    @property\n\
    \    def addmode(self) -> Field:\n        \"\"\"\n        ADDMODE\n\n        Addressing\
    \ mode (slave\n                  mode)\n        \"\"\"\n        return self._addmode\n\
    \n    @addmode.setter\n    def addmode(self, value: int) -> None:\n        self._addmode.value\
    \ = value\n\n    @property\n    def add10(self) -> Field:\n        \"\"\"\n  \
    \      ADD10\n\n        Interface address\n        \"\"\"\n        return self._add10\n\
    \n    @add10.setter\n    def add10(self, value: int) -> None:\n        self._add10.value\
    \ = value\n\n    @property\n    def add7(self) -> Field:\n        \"\"\"\n   \
    \     ADD7\n\n        Interface address\n        \"\"\"\n        return self._add7\n\
    \n    @add7.setter\n    def add7(self, value: int) -> None:\n        self._add7.value\
    \ = value\n\n    @property\n    def add0(self) -> Field:\n        \"\"\"\n   \
    \     ADD0\n\n        Interface address\n        \"\"\"\n        return self._add0\n\
    \n    @add0.setter\n    def add0(self, value: int) -> None:\n        self._add0.value\
    \ = value\n\n\nclass Oar2Register(Register):\n    \"\"\"\n    OAR2\n\n    Own\
    \ address register 2\n    \"\"\"\n\n    def __init__(self):\n        self._add2\
    \ = Field(\"add2\", 1, 7)\n        self._endual = Field(\"endual\", 0, 1)\n  \
    \      super().__init__(\"OAR2\", 0x40005C00 + 0xC)\n\n    @property\n    def\
    \ add2(self) -> Field:\n        \"\"\"\n        ADD2\n\n        Interface address\n\
    \        \"\"\"\n        return self._add2\n\n    @add2.setter\n    def add2(self,\
    \ value: int) -> None:\n        self._add2.value = value\n\n    @property\n  \
    \  def endual(self) -> Field:\n        \"\"\"\n        ENDUAL\n\n        Dual\
    \ addressing mode\n                  enable\n        \"\"\"\n        return self._endual\n\
    \n    @endual.setter\n    def endual(self, value: int) -> None:\n        self._endual.value\
    \ = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 8)\n\
    \        super().__init__(\"DR\", 0x40005C00 + 0x10)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        8-bit data register\n\
    \        \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass Sr1Register(Register):\n\
    \    \"\"\"\n    SR1\n\n    Status register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._smbalert = Field(\"smbalert\", 15, 1)\n        self._timeout =\
    \ Field(\"timeout\", 14, 1)\n        self._pecerr = Field(\"pecerr\", 12, 1)\n\
    \        self._ovr = Field(\"ovr\", 11, 1)\n        self._af = Field(\"af\", 10,\
    \ 1)\n        self._arlo = Field(\"arlo\", 9, 1)\n        self._berr = Field(\"\
    berr\", 8, 1)\n        self._txe = Field(\"txe\", 7, 1)\n        self._rxne =\
    \ Field(\"rxne\", 6, 1)\n        self._stopf = Field(\"stopf\", 4, 1)\n      \
    \  self._add10 = Field(\"add10\", 3, 1)\n        self._btf = Field(\"btf\", 2,\
    \ 1)\n        self._addr = Field(\"addr\", 1, 1)\n        self._sb = Field(\"\
    sb\", 0, 1)\n        super().__init__(\"SR1\", 0x40005C00 + 0x14)\n\n    @property\n\
    \    def smbalert(self) -> Field:\n        \"\"\"\n        SMBALERT\n\n      \
    \  SMBus alert\n        \"\"\"\n        return self._smbalert\n\n    @smbalert.setter\n\
    \    def smbalert(self, value: int) -> None:\n        self._smbalert.value = value\n\
    \n    @property\n    def timeout(self) -> Field:\n        \"\"\"\n        TIMEOUT\n\
    \n        Timeout or Tlow error\n        \"\"\"\n        return self._timeout\n\
    \n    @timeout.setter\n    def timeout(self, value: int) -> None:\n        self._timeout.value\
    \ = value\n\n    @property\n    def pecerr(self) -> Field:\n        \"\"\"\n \
    \       PECERR\n\n        PEC Error in reception\n        \"\"\"\n        return\
    \ self._pecerr\n\n    @pecerr.setter\n    def pecerr(self, value: int) -> None:\n\
    \        self._pecerr.value = value\n\n    @property\n    def ovr(self) -> Field:\n\
    \        \"\"\"\n        OVR\n\n        Overrun/Underrun\n        \"\"\"\n   \
    \     return self._ovr\n\n    @ovr.setter\n    def ovr(self, value: int) -> None:\n\
    \        self._ovr.value = value\n\n    @property\n    def af(self) -> Field:\n\
    \        \"\"\"\n        AF\n\n        Acknowledge failure\n        \"\"\"\n \
    \       return self._af\n\n    @af.setter\n    def af(self, value: int) -> None:\n\
    \        self._af.value = value\n\n    @property\n    def arlo(self) -> Field:\n\
    \        \"\"\"\n        ARLO\n\n        Arbitration lost (master\n          \
    \        mode)\n        \"\"\"\n        return self._arlo\n\n    @arlo.setter\n\
    \    def arlo(self, value: int) -> None:\n        self._arlo.value = value\n\n\
    \    @property\n    def berr(self) -> Field:\n        \"\"\"\n        BERR\n\n\
    \        Bus error\n        \"\"\"\n        return self._berr\n\n    @berr.setter\n\
    \    def berr(self, value: int) -> None:\n        self._berr.value = value\n\n\
    \    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n \
    \       Data register empty\n                  (transmitters)\n        \"\"\"\n\
    \        return self._txe\n\n    @txe.setter\n    def txe(self, value: int) ->\
    \ None:\n        self._txe.value = value\n\n    @property\n    def rxne(self)\
    \ -> Field:\n        \"\"\"\n        RXNE\n\n        Data register not empty\n\
    \                  (receivers)\n        \"\"\"\n        return self._rxne\n\n\
    \    @rxne.setter\n    def rxne(self, value: int) -> None:\n        self._rxne.value\
    \ = value\n\n    @property\n    def stopf(self) -> Field:\n        \"\"\"\n  \
    \      STOPF\n\n        Stop detection (slave\n                  mode)\n     \
    \   \"\"\"\n        return self._stopf\n\n    @stopf.setter\n    def stopf(self,\
    \ value: int) -> None:\n        self._stopf.value = value\n\n    @property\n \
    \   def add10(self) -> Field:\n        \"\"\"\n        ADD10\n\n        10-bit\
    \ header sent (Master\n                  mode)\n        \"\"\"\n        return\
    \ self._add10\n\n    @add10.setter\n    def add10(self, value: int) -> None:\n\
    \        self._add10.value = value\n\n    @property\n    def btf(self) -> Field:\n\
    \        \"\"\"\n        BTF\n\n        Byte transfer finished\n        \"\"\"\
    \n        return self._btf\n\n    @btf.setter\n    def btf(self, value: int) ->\
    \ None:\n        self._btf.value = value\n\n    @property\n    def addr(self)\
    \ -> Field:\n        \"\"\"\n        ADDR\n\n        Address sent (master mode)/matched\n\
    \                  (slave mode)\n        \"\"\"\n        return self._addr\n\n\
    \    @addr.setter\n    def addr(self, value: int) -> None:\n        self._addr.value\
    \ = value\n\n    @property\n    def sb(self) -> Field:\n        \"\"\"\n     \
    \   SB\n\n        Start bit (Master mode)\n        \"\"\"\n        return self._sb\n\
    \n    @sb.setter\n    def sb(self, value: int) -> None:\n        self._sb.value\
    \ = value\n\n\nclass Sr2Register(Register):\n    \"\"\"\n    SR2\n\n    Status\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._pec = Field(\"\
    pec\", 8, 8)\n        self._dualf = Field(\"dualf\", 7, 1)\n        self._smbhost\
    \ = Field(\"smbhost\", 6, 1)\n        self._smbdefault = Field(\"smbdefault\"\
    , 5, 1)\n        self._gencall = Field(\"gencall\", 4, 1)\n        self._tra =\
    \ Field(\"tra\", 2, 1)\n        self._busy = Field(\"busy\", 1, 1)\n        self._msl\
    \ = Field(\"msl\", 0, 1)\n        super().__init__(\"SR2\", 0x40005C00 + 0x18)\n\
    \n    @property\n    def pec(self) -> Field:\n        \"\"\"\n        PEC\n\n\
    \        acket error checking\n                  register\n        \"\"\"\n  \
    \      return self._pec\n\n    @pec.setter\n    def pec(self, value: int) -> None:\n\
    \        self._pec.value = value\n\n    @property\n    def dualf(self) -> Field:\n\
    \        \"\"\"\n        DUALF\n\n        Dual flag (Slave mode)\n        \"\"\
    \"\n        return self._dualf\n\n    @dualf.setter\n    def dualf(self, value:\
    \ int) -> None:\n        self._dualf.value = value\n\n    @property\n    def smbhost(self)\
    \ -> Field:\n        \"\"\"\n        SMBHOST\n\n        SMBus host header (Slave\n\
    \                  mode)\n        \"\"\"\n        return self._smbhost\n\n   \
    \ @smbhost.setter\n    def smbhost(self, value: int) -> None:\n        self._smbhost.value\
    \ = value\n\n    @property\n    def smbdefault(self) -> Field:\n        \"\"\"\
    \n        SMBDEFAULT\n\n        SMBus device default address (Slave\n        \
    \          mode)\n        \"\"\"\n        return self._smbdefault\n\n    @smbdefault.setter\n\
    \    def smbdefault(self, value: int) -> None:\n        self._smbdefault.value\
    \ = value\n\n    @property\n    def gencall(self) -> Field:\n        \"\"\"\n\
    \        GENCALL\n\n        General call address (Slave\n                  mode)\n\
    \        \"\"\"\n        return self._gencall\n\n    @gencall.setter\n    def\
    \ gencall(self, value: int) -> None:\n        self._gencall.value = value\n\n\
    \    @property\n    def tra(self) -> Field:\n        \"\"\"\n        TRA\n\n \
    \       Transmitter/receiver\n        \"\"\"\n        return self._tra\n\n   \
    \ @tra.setter\n    def tra(self, value: int) -> None:\n        self._tra.value\
    \ = value\n\n    @property\n    def busy(self) -> Field:\n        \"\"\"\n   \
    \     BUSY\n\n        Bus busy\n        \"\"\"\n        return self._busy\n\n\
    \    @busy.setter\n    def busy(self, value: int) -> None:\n        self._busy.value\
    \ = value\n\n    @property\n    def msl(self) -> Field:\n        \"\"\"\n    \
    \    MSL\n\n        Master/slave\n        \"\"\"\n        return self._msl\n\n\
    \    @msl.setter\n    def msl(self, value: int) -> None:\n        self._msl.value\
    \ = value\n\n\nclass CcrRegister(Register):\n    \"\"\"\n    CCR\n\n    Clock\
    \ control register\n    \"\"\"\n\n    def __init__(self):\n        self._f_s =\
    \ Field(\"f_s\", 15, 1)\n        self._duty = Field(\"duty\", 14, 1)\n       \
    \ self._ccr = Field(\"ccr\", 0, 12)\n        super().__init__(\"CCR\", 0x40005C00\
    \ + 0x1C)\n\n    @property\n    def f_s(self) -> Field:\n        \"\"\"\n    \
    \    F_S\n\n        I2C master mode selection\n        \"\"\"\n        return\
    \ self._f_s\n\n    @f_s.setter\n    def f_s(self, value: int) -> None:\n     \
    \   self._f_s.value = value\n\n    @property\n    def duty(self) -> Field:\n \
    \       \"\"\"\n        DUTY\n\n        Fast mode duty cycle\n        \"\"\"\n\
    \        return self._duty\n\n    @duty.setter\n    def duty(self, value: int)\
    \ -> None:\n        self._duty.value = value\n\n    @property\n    def ccr(self)\
    \ -> Field:\n        \"\"\"\n        CCR\n\n        Clock control register in\
    \ Fast/Standard\n                  mode (Master mode)\n        \"\"\"\n      \
    \  return self._ccr\n\n    @ccr.setter\n    def ccr(self, value: int) -> None:\n\
    \        self._ccr.value = value\n\n\nclass TriseRegister(Register):\n    \"\"\
    \"\n    TRISE\n\n    TRISE register\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._trise = Field(\"trise\", 0, 6)\n        super().__init__(\"TRISE\"\
    , 0x40005C00 + 0x20)\n\n    @property\n    def trise(self) -> Field:\n       \
    \ \"\"\"\n        TRISE\n\n        Maximum rise time in Fast/Standard mode\n \
    \                 (Master mode)\n        \"\"\"\n        return self._trise\n\n\
    \    @trise.setter\n    def trise(self, value: int) -> None:\n        self._trise.value\
    \ = value\n\n\nclass I2c3(Peripheral):\n    \"\"\"\n    I2C3\n\n    Inter-integrated\
    \ circuit\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._oar1 = Oar1Register()\n    \
    \    self._oar2 = Oar2Register()\n        self._dr = DrRegister()\n        self._sr1\
    \ = Sr1Register()\n        self._sr2 = Sr2Register()\n        self._ccr = CcrRegister()\n\
    \        self._trise = TriseRegister()\n        super().__init__(\"i2c3\", 0x40005C00)\n\
    \n    @property\n    def cr1(self) -> Cr1Register:\n        return self._cr1\n\
    \n    @cr1.setter\n    def cr1(self, value: int) -> None:\n        self._cr1.value\
    \ = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n        return\
    \ self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) -> None:\n     \
    \   self._cr2.value = value\n\n    @property\n    def oar1(self) -> Oar1Register:\n\
    \        return self._oar1\n\n    @oar1.setter\n    def oar1(self, value: int)\
    \ -> None:\n        self._oar1.value = value\n\n    @property\n    def oar2(self)\
    \ -> Oar2Register:\n        return self._oar2\n\n    @oar2.setter\n    def oar2(self,\
    \ value: int) -> None:\n        self._oar2.value = value\n\n    @property\n  \
    \  def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n  \
    \  def dr(self, value: int) -> None:\n        self._dr.value = value\n\n    @property\n\
    \    def sr1(self) -> Sr1Register:\n        return self._sr1\n\n    @sr1.setter\n\
    \    def sr1(self, value: int) -> None:\n        self._sr1.value = value\n\n \
    \   @property\n    def sr2(self) -> Sr2Register:\n        return self._sr2\n\n\
    \    @sr2.setter\n    def sr2(self, value: int) -> None:\n        self._sr2.value\
    \ = value\n\n    @property\n    def ccr(self) -> CcrRegister:\n        return\
    \ self._ccr\n\n    @ccr.setter\n    def ccr(self, value: int) -> None:\n     \
    \   self._ccr.value = value\n\n    @property\n    def trise(self) -> TriseRegister:\n\
    \        return self._trise\n\n    @trise.setter\n    def trise(self, value: int)\
    \ -> None:\n        self._trise.value = value\n"
  name: I2C3
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    Control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._swrst = Field(\"\
    swrst\", 15, 1)\n        self._alert = Field(\"alert\", 13, 1)\n        self._pec\
    \ = Field(\"pec\", 12, 1)\n        self._pos = Field(\"pos\", 11, 1)\n       \
    \ self._ack = Field(\"ack\", 10, 1)\n        self._stop = Field(\"stop\", 9, 1)\n\
    \        self._start = Field(\"start\", 8, 1)\n        self._nostretch = Field(\"\
    nostretch\", 7, 1)\n        self._engc = Field(\"engc\", 6, 1)\n        self._enpec\
    \ = Field(\"enpec\", 5, 1)\n        self._enarp = Field(\"enarp\", 4, 1)\n   \
    \     self._smbtype = Field(\"smbtype\", 3, 1)\n        self._smbus = Field(\"\
    smbus\", 1, 1)\n        self._pe = Field(\"pe\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40005800 + 0x0)\n\n    @property\n    def swrst(self) -> Field:\n   \
    \     \"\"\"\n        SWRST\n\n        Software reset\n        \"\"\"\n      \
    \  return self._swrst\n\n    @swrst.setter\n    def swrst(self, value: int) ->\
    \ None:\n        self._swrst.value = value\n\n    @property\n    def alert(self)\
    \ -> Field:\n        \"\"\"\n        ALERT\n\n        SMBus alert\n        \"\"\
    \"\n        return self._alert\n\n    @alert.setter\n    def alert(self, value:\
    \ int) -> None:\n        self._alert.value = value\n\n    @property\n    def pec(self)\
    \ -> Field:\n        \"\"\"\n        PEC\n\n        Packet error checking\n  \
    \      \"\"\"\n        return self._pec\n\n    @pec.setter\n    def pec(self,\
    \ value: int) -> None:\n        self._pec.value = value\n\n    @property\n   \
    \ def pos(self) -> Field:\n        \"\"\"\n        POS\n\n        Acknowledge/PEC\
    \ Position (for data\n                  reception)\n        \"\"\"\n        return\
    \ self._pos\n\n    @pos.setter\n    def pos(self, value: int) -> None:\n     \
    \   self._pos.value = value\n\n    @property\n    def ack(self) -> Field:\n  \
    \      \"\"\"\n        ACK\n\n        Acknowledge enable\n        \"\"\"\n   \
    \     return self._ack\n\n    @ack.setter\n    def ack(self, value: int) -> None:\n\
    \        self._ack.value = value\n\n    @property\n    def stop(self) -> Field:\n\
    \        \"\"\"\n        STOP\n\n        Stop generation\n        \"\"\"\n   \
    \     return self._stop\n\n    @stop.setter\n    def stop(self, value: int) ->\
    \ None:\n        self._stop.value = value\n\n    @property\n    def start(self)\
    \ -> Field:\n        \"\"\"\n        START\n\n        Start generation\n     \
    \   \"\"\"\n        return self._start\n\n    @start.setter\n    def start(self,\
    \ value: int) -> None:\n        self._start.value = value\n\n    @property\n \
    \   def nostretch(self) -> Field:\n        \"\"\"\n        NOSTRETCH\n\n     \
    \   Clock stretching disable (Slave\n                  mode)\n        \"\"\"\n\
    \        return self._nostretch\n\n    @nostretch.setter\n    def nostretch(self,\
    \ value: int) -> None:\n        self._nostretch.value = value\n\n    @property\n\
    \    def engc(self) -> Field:\n        \"\"\"\n        ENGC\n\n        General\
    \ call enable\n        \"\"\"\n        return self._engc\n\n    @engc.setter\n\
    \    def engc(self, value: int) -> None:\n        self._engc.value = value\n\n\
    \    @property\n    def enpec(self) -> Field:\n        \"\"\"\n        ENPEC\n\
    \n        PEC enable\n        \"\"\"\n        return self._enpec\n\n    @enpec.setter\n\
    \    def enpec(self, value: int) -> None:\n        self._enpec.value = value\n\
    \n    @property\n    def enarp(self) -> Field:\n        \"\"\"\n        ENARP\n\
    \n        ARP enable\n        \"\"\"\n        return self._enarp\n\n    @enarp.setter\n\
    \    def enarp(self, value: int) -> None:\n        self._enarp.value = value\n\
    \n    @property\n    def smbtype(self) -> Field:\n        \"\"\"\n        SMBTYPE\n\
    \n        SMBus type\n        \"\"\"\n        return self._smbtype\n\n    @smbtype.setter\n\
    \    def smbtype(self, value: int) -> None:\n        self._smbtype.value = value\n\
    \n    @property\n    def smbus(self) -> Field:\n        \"\"\"\n        SMBUS\n\
    \n        SMBus mode\n        \"\"\"\n        return self._smbus\n\n    @smbus.setter\n\
    \    def smbus(self, value: int) -> None:\n        self._smbus.value = value\n\
    \n    @property\n    def pe(self) -> Field:\n        \"\"\"\n        PE\n\n  \
    \      Peripheral enable\n        \"\"\"\n        return self._pe\n\n    @pe.setter\n\
    \    def pe(self, value: int) -> None:\n        self._pe.value = value\n\n\nclass\
    \ Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    Control register 2\n    \"\
    \"\"\n\n    def __init__(self):\n        self._last = Field(\"last\", 12, 1)\n\
    \        self._dmaen = Field(\"dmaen\", 11, 1)\n        self._itbufen = Field(\"\
    itbufen\", 10, 1)\n        self._itevten = Field(\"itevten\", 9, 1)\n        self._iterren\
    \ = Field(\"iterren\", 8, 1)\n        self._freq = Field(\"freq\", 0, 6)\n   \
    \     super().__init__(\"CR2\", 0x40005800 + 0x4)\n\n    @property\n    def last(self)\
    \ -> Field:\n        \"\"\"\n        LAST\n\n        DMA last transfer\n     \
    \   \"\"\"\n        return self._last\n\n    @last.setter\n    def last(self,\
    \ value: int) -> None:\n        self._last.value = value\n\n    @property\n  \
    \  def dmaen(self) -> Field:\n        \"\"\"\n        DMAEN\n\n        DMA requests\
    \ enable\n        \"\"\"\n        return self._dmaen\n\n    @dmaen.setter\n  \
    \  def dmaen(self, value: int) -> None:\n        self._dmaen.value = value\n\n\
    \    @property\n    def itbufen(self) -> Field:\n        \"\"\"\n        ITBUFEN\n\
    \n        Buffer interrupt enable\n        \"\"\"\n        return self._itbufen\n\
    \n    @itbufen.setter\n    def itbufen(self, value: int) -> None:\n        self._itbufen.value\
    \ = value\n\n    @property\n    def itevten(self) -> Field:\n        \"\"\"\n\
    \        ITEVTEN\n\n        Event interrupt enable\n        \"\"\"\n        return\
    \ self._itevten\n\n    @itevten.setter\n    def itevten(self, value: int) -> None:\n\
    \        self._itevten.value = value\n\n    @property\n    def iterren(self) ->\
    \ Field:\n        \"\"\"\n        ITERREN\n\n        Error interrupt enable\n\
    \        \"\"\"\n        return self._iterren\n\n    @iterren.setter\n    def\
    \ iterren(self, value: int) -> None:\n        self._iterren.value = value\n\n\
    \    @property\n    def freq(self) -> Field:\n        \"\"\"\n        FREQ\n\n\
    \        Peripheral clock frequency\n        \"\"\"\n        return self._freq\n\
    \n    @freq.setter\n    def freq(self, value: int) -> None:\n        self._freq.value\
    \ = value\n\n\nclass Oar1Register(Register):\n    \"\"\"\n    OAR1\n\n    Own\
    \ address register 1\n    \"\"\"\n\n    def __init__(self):\n        self._addmode\
    \ = Field(\"addmode\", 15, 1)\n        self._add10 = Field(\"add10\", 8, 2)\n\
    \        self._add7 = Field(\"add7\", 1, 7)\n        self._add0 = Field(\"add0\"\
    , 0, 1)\n        super().__init__(\"OAR1\", 0x40005800 + 0x8)\n\n    @property\n\
    \    def addmode(self) -> Field:\n        \"\"\"\n        ADDMODE\n\n        Addressing\
    \ mode (slave\n                  mode)\n        \"\"\"\n        return self._addmode\n\
    \n    @addmode.setter\n    def addmode(self, value: int) -> None:\n        self._addmode.value\
    \ = value\n\n    @property\n    def add10(self) -> Field:\n        \"\"\"\n  \
    \      ADD10\n\n        Interface address\n        \"\"\"\n        return self._add10\n\
    \n    @add10.setter\n    def add10(self, value: int) -> None:\n        self._add10.value\
    \ = value\n\n    @property\n    def add7(self) -> Field:\n        \"\"\"\n   \
    \     ADD7\n\n        Interface address\n        \"\"\"\n        return self._add7\n\
    \n    @add7.setter\n    def add7(self, value: int) -> None:\n        self._add7.value\
    \ = value\n\n    @property\n    def add0(self) -> Field:\n        \"\"\"\n   \
    \     ADD0\n\n        Interface address\n        \"\"\"\n        return self._add0\n\
    \n    @add0.setter\n    def add0(self, value: int) -> None:\n        self._add0.value\
    \ = value\n\n\nclass Oar2Register(Register):\n    \"\"\"\n    OAR2\n\n    Own\
    \ address register 2\n    \"\"\"\n\n    def __init__(self):\n        self._add2\
    \ = Field(\"add2\", 1, 7)\n        self._endual = Field(\"endual\", 0, 1)\n  \
    \      super().__init__(\"OAR2\", 0x40005800 + 0xC)\n\n    @property\n    def\
    \ add2(self) -> Field:\n        \"\"\"\n        ADD2\n\n        Interface address\n\
    \        \"\"\"\n        return self._add2\n\n    @add2.setter\n    def add2(self,\
    \ value: int) -> None:\n        self._add2.value = value\n\n    @property\n  \
    \  def endual(self) -> Field:\n        \"\"\"\n        ENDUAL\n\n        Dual\
    \ addressing mode\n                  enable\n        \"\"\"\n        return self._endual\n\
    \n    @endual.setter\n    def endual(self, value: int) -> None:\n        self._endual.value\
    \ = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 8)\n\
    \        super().__init__(\"DR\", 0x40005800 + 0x10)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        8-bit data register\n\
    \        \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass Sr1Register(Register):\n\
    \    \"\"\"\n    SR1\n\n    Status register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._smbalert = Field(\"smbalert\", 15, 1)\n        self._timeout =\
    \ Field(\"timeout\", 14, 1)\n        self._pecerr = Field(\"pecerr\", 12, 1)\n\
    \        self._ovr = Field(\"ovr\", 11, 1)\n        self._af = Field(\"af\", 10,\
    \ 1)\n        self._arlo = Field(\"arlo\", 9, 1)\n        self._berr = Field(\"\
    berr\", 8, 1)\n        self._txe = Field(\"txe\", 7, 1)\n        self._rxne =\
    \ Field(\"rxne\", 6, 1)\n        self._stopf = Field(\"stopf\", 4, 1)\n      \
    \  self._add10 = Field(\"add10\", 3, 1)\n        self._btf = Field(\"btf\", 2,\
    \ 1)\n        self._addr = Field(\"addr\", 1, 1)\n        self._sb = Field(\"\
    sb\", 0, 1)\n        super().__init__(\"SR1\", 0x40005800 + 0x14)\n\n    @property\n\
    \    def smbalert(self) -> Field:\n        \"\"\"\n        SMBALERT\n\n      \
    \  SMBus alert\n        \"\"\"\n        return self._smbalert\n\n    @smbalert.setter\n\
    \    def smbalert(self, value: int) -> None:\n        self._smbalert.value = value\n\
    \n    @property\n    def timeout(self) -> Field:\n        \"\"\"\n        TIMEOUT\n\
    \n        Timeout or Tlow error\n        \"\"\"\n        return self._timeout\n\
    \n    @timeout.setter\n    def timeout(self, value: int) -> None:\n        self._timeout.value\
    \ = value\n\n    @property\n    def pecerr(self) -> Field:\n        \"\"\"\n \
    \       PECERR\n\n        PEC Error in reception\n        \"\"\"\n        return\
    \ self._pecerr\n\n    @pecerr.setter\n    def pecerr(self, value: int) -> None:\n\
    \        self._pecerr.value = value\n\n    @property\n    def ovr(self) -> Field:\n\
    \        \"\"\"\n        OVR\n\n        Overrun/Underrun\n        \"\"\"\n   \
    \     return self._ovr\n\n    @ovr.setter\n    def ovr(self, value: int) -> None:\n\
    \        self._ovr.value = value\n\n    @property\n    def af(self) -> Field:\n\
    \        \"\"\"\n        AF\n\n        Acknowledge failure\n        \"\"\"\n \
    \       return self._af\n\n    @af.setter\n    def af(self, value: int) -> None:\n\
    \        self._af.value = value\n\n    @property\n    def arlo(self) -> Field:\n\
    \        \"\"\"\n        ARLO\n\n        Arbitration lost (master\n          \
    \        mode)\n        \"\"\"\n        return self._arlo\n\n    @arlo.setter\n\
    \    def arlo(self, value: int) -> None:\n        self._arlo.value = value\n\n\
    \    @property\n    def berr(self) -> Field:\n        \"\"\"\n        BERR\n\n\
    \        Bus error\n        \"\"\"\n        return self._berr\n\n    @berr.setter\n\
    \    def berr(self, value: int) -> None:\n        self._berr.value = value\n\n\
    \    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n \
    \       Data register empty\n                  (transmitters)\n        \"\"\"\n\
    \        return self._txe\n\n    @txe.setter\n    def txe(self, value: int) ->\
    \ None:\n        self._txe.value = value\n\n    @property\n    def rxne(self)\
    \ -> Field:\n        \"\"\"\n        RXNE\n\n        Data register not empty\n\
    \                  (receivers)\n        \"\"\"\n        return self._rxne\n\n\
    \    @rxne.setter\n    def rxne(self, value: int) -> None:\n        self._rxne.value\
    \ = value\n\n    @property\n    def stopf(self) -> Field:\n        \"\"\"\n  \
    \      STOPF\n\n        Stop detection (slave\n                  mode)\n     \
    \   \"\"\"\n        return self._stopf\n\n    @stopf.setter\n    def stopf(self,\
    \ value: int) -> None:\n        self._stopf.value = value\n\n    @property\n \
    \   def add10(self) -> Field:\n        \"\"\"\n        ADD10\n\n        10-bit\
    \ header sent (Master\n                  mode)\n        \"\"\"\n        return\
    \ self._add10\n\n    @add10.setter\n    def add10(self, value: int) -> None:\n\
    \        self._add10.value = value\n\n    @property\n    def btf(self) -> Field:\n\
    \        \"\"\"\n        BTF\n\n        Byte transfer finished\n        \"\"\"\
    \n        return self._btf\n\n    @btf.setter\n    def btf(self, value: int) ->\
    \ None:\n        self._btf.value = value\n\n    @property\n    def addr(self)\
    \ -> Field:\n        \"\"\"\n        ADDR\n\n        Address sent (master mode)/matched\n\
    \                  (slave mode)\n        \"\"\"\n        return self._addr\n\n\
    \    @addr.setter\n    def addr(self, value: int) -> None:\n        self._addr.value\
    \ = value\n\n    @property\n    def sb(self) -> Field:\n        \"\"\"\n     \
    \   SB\n\n        Start bit (Master mode)\n        \"\"\"\n        return self._sb\n\
    \n    @sb.setter\n    def sb(self, value: int) -> None:\n        self._sb.value\
    \ = value\n\n\nclass Sr2Register(Register):\n    \"\"\"\n    SR2\n\n    Status\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._pec = Field(\"\
    pec\", 8, 8)\n        self._dualf = Field(\"dualf\", 7, 1)\n        self._smbhost\
    \ = Field(\"smbhost\", 6, 1)\n        self._smbdefault = Field(\"smbdefault\"\
    , 5, 1)\n        self._gencall = Field(\"gencall\", 4, 1)\n        self._tra =\
    \ Field(\"tra\", 2, 1)\n        self._busy = Field(\"busy\", 1, 1)\n        self._msl\
    \ = Field(\"msl\", 0, 1)\n        super().__init__(\"SR2\", 0x40005800 + 0x18)\n\
    \n    @property\n    def pec(self) -> Field:\n        \"\"\"\n        PEC\n\n\
    \        acket error checking\n                  register\n        \"\"\"\n  \
    \      return self._pec\n\n    @pec.setter\n    def pec(self, value: int) -> None:\n\
    \        self._pec.value = value\n\n    @property\n    def dualf(self) -> Field:\n\
    \        \"\"\"\n        DUALF\n\n        Dual flag (Slave mode)\n        \"\"\
    \"\n        return self._dualf\n\n    @dualf.setter\n    def dualf(self, value:\
    \ int) -> None:\n        self._dualf.value = value\n\n    @property\n    def smbhost(self)\
    \ -> Field:\n        \"\"\"\n        SMBHOST\n\n        SMBus host header (Slave\n\
    \                  mode)\n        \"\"\"\n        return self._smbhost\n\n   \
    \ @smbhost.setter\n    def smbhost(self, value: int) -> None:\n        self._smbhost.value\
    \ = value\n\n    @property\n    def smbdefault(self) -> Field:\n        \"\"\"\
    \n        SMBDEFAULT\n\n        SMBus device default address (Slave\n        \
    \          mode)\n        \"\"\"\n        return self._smbdefault\n\n    @smbdefault.setter\n\
    \    def smbdefault(self, value: int) -> None:\n        self._smbdefault.value\
    \ = value\n\n    @property\n    def gencall(self) -> Field:\n        \"\"\"\n\
    \        GENCALL\n\n        General call address (Slave\n                  mode)\n\
    \        \"\"\"\n        return self._gencall\n\n    @gencall.setter\n    def\
    \ gencall(self, value: int) -> None:\n        self._gencall.value = value\n\n\
    \    @property\n    def tra(self) -> Field:\n        \"\"\"\n        TRA\n\n \
    \       Transmitter/receiver\n        \"\"\"\n        return self._tra\n\n   \
    \ @tra.setter\n    def tra(self, value: int) -> None:\n        self._tra.value\
    \ = value\n\n    @property\n    def busy(self) -> Field:\n        \"\"\"\n   \
    \     BUSY\n\n        Bus busy\n        \"\"\"\n        return self._busy\n\n\
    \    @busy.setter\n    def busy(self, value: int) -> None:\n        self._busy.value\
    \ = value\n\n    @property\n    def msl(self) -> Field:\n        \"\"\"\n    \
    \    MSL\n\n        Master/slave\n        \"\"\"\n        return self._msl\n\n\
    \    @msl.setter\n    def msl(self, value: int) -> None:\n        self._msl.value\
    \ = value\n\n\nclass CcrRegister(Register):\n    \"\"\"\n    CCR\n\n    Clock\
    \ control register\n    \"\"\"\n\n    def __init__(self):\n        self._f_s =\
    \ Field(\"f_s\", 15, 1)\n        self._duty = Field(\"duty\", 14, 1)\n       \
    \ self._ccr = Field(\"ccr\", 0, 12)\n        super().__init__(\"CCR\", 0x40005800\
    \ + 0x1C)\n\n    @property\n    def f_s(self) -> Field:\n        \"\"\"\n    \
    \    F_S\n\n        I2C master mode selection\n        \"\"\"\n        return\
    \ self._f_s\n\n    @f_s.setter\n    def f_s(self, value: int) -> None:\n     \
    \   self._f_s.value = value\n\n    @property\n    def duty(self) -> Field:\n \
    \       \"\"\"\n        DUTY\n\n        Fast mode duty cycle\n        \"\"\"\n\
    \        return self._duty\n\n    @duty.setter\n    def duty(self, value: int)\
    \ -> None:\n        self._duty.value = value\n\n    @property\n    def ccr(self)\
    \ -> Field:\n        \"\"\"\n        CCR\n\n        Clock control register in\
    \ Fast/Standard\n                  mode (Master mode)\n        \"\"\"\n      \
    \  return self._ccr\n\n    @ccr.setter\n    def ccr(self, value: int) -> None:\n\
    \        self._ccr.value = value\n\n\nclass TriseRegister(Register):\n    \"\"\
    \"\n    TRISE\n\n    TRISE register\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._trise = Field(\"trise\", 0, 6)\n        super().__init__(\"TRISE\"\
    , 0x40005800 + 0x20)\n\n    @property\n    def trise(self) -> Field:\n       \
    \ \"\"\"\n        TRISE\n\n        Maximum rise time in Fast/Standard mode\n \
    \                 (Master mode)\n        \"\"\"\n        return self._trise\n\n\
    \    @trise.setter\n    def trise(self, value: int) -> None:\n        self._trise.value\
    \ = value\n\n\nclass I2c2(Peripheral):\n    \"\"\"\n    I2C2\n\n    Inter-integrated\
    \ circuit\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._oar1 = Oar1Register()\n    \
    \    self._oar2 = Oar2Register()\n        self._dr = DrRegister()\n        self._sr1\
    \ = Sr1Register()\n        self._sr2 = Sr2Register()\n        self._ccr = CcrRegister()\n\
    \        self._trise = TriseRegister()\n        super().__init__(\"i2c2\", 0x40005800)\n\
    \n    @property\n    def cr1(self) -> Cr1Register:\n        return self._cr1\n\
    \n    @cr1.setter\n    def cr1(self, value: int) -> None:\n        self._cr1.value\
    \ = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n        return\
    \ self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) -> None:\n     \
    \   self._cr2.value = value\n\n    @property\n    def oar1(self) -> Oar1Register:\n\
    \        return self._oar1\n\n    @oar1.setter\n    def oar1(self, value: int)\
    \ -> None:\n        self._oar1.value = value\n\n    @property\n    def oar2(self)\
    \ -> Oar2Register:\n        return self._oar2\n\n    @oar2.setter\n    def oar2(self,\
    \ value: int) -> None:\n        self._oar2.value = value\n\n    @property\n  \
    \  def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n  \
    \  def dr(self, value: int) -> None:\n        self._dr.value = value\n\n    @property\n\
    \    def sr1(self) -> Sr1Register:\n        return self._sr1\n\n    @sr1.setter\n\
    \    def sr1(self, value: int) -> None:\n        self._sr1.value = value\n\n \
    \   @property\n    def sr2(self) -> Sr2Register:\n        return self._sr2\n\n\
    \    @sr2.setter\n    def sr2(self, value: int) -> None:\n        self._sr2.value\
    \ = value\n\n    @property\n    def ccr(self) -> CcrRegister:\n        return\
    \ self._ccr\n\n    @ccr.setter\n    def ccr(self, value: int) -> None:\n     \
    \   self._ccr.value = value\n\n    @property\n    def trise(self) -> TriseRegister:\n\
    \        return self._trise\n\n    @trise.setter\n    def trise(self, value: int)\
    \ -> None:\n        self._trise.value = value\n"
  name: I2C2
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    Control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._swrst = Field(\"\
    swrst\", 15, 1)\n        self._alert = Field(\"alert\", 13, 1)\n        self._pec\
    \ = Field(\"pec\", 12, 1)\n        self._pos = Field(\"pos\", 11, 1)\n       \
    \ self._ack = Field(\"ack\", 10, 1)\n        self._stop = Field(\"stop\", 9, 1)\n\
    \        self._start = Field(\"start\", 8, 1)\n        self._nostretch = Field(\"\
    nostretch\", 7, 1)\n        self._engc = Field(\"engc\", 6, 1)\n        self._enpec\
    \ = Field(\"enpec\", 5, 1)\n        self._enarp = Field(\"enarp\", 4, 1)\n   \
    \     self._smbtype = Field(\"smbtype\", 3, 1)\n        self._smbus = Field(\"\
    smbus\", 1, 1)\n        self._pe = Field(\"pe\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40005400 + 0x0)\n\n    @property\n    def swrst(self) -> Field:\n   \
    \     \"\"\"\n        SWRST\n\n        Software reset\n        \"\"\"\n      \
    \  return self._swrst\n\n    @swrst.setter\n    def swrst(self, value: int) ->\
    \ None:\n        self._swrst.value = value\n\n    @property\n    def alert(self)\
    \ -> Field:\n        \"\"\"\n        ALERT\n\n        SMBus alert\n        \"\"\
    \"\n        return self._alert\n\n    @alert.setter\n    def alert(self, value:\
    \ int) -> None:\n        self._alert.value = value\n\n    @property\n    def pec(self)\
    \ -> Field:\n        \"\"\"\n        PEC\n\n        Packet error checking\n  \
    \      \"\"\"\n        return self._pec\n\n    @pec.setter\n    def pec(self,\
    \ value: int) -> None:\n        self._pec.value = value\n\n    @property\n   \
    \ def pos(self) -> Field:\n        \"\"\"\n        POS\n\n        Acknowledge/PEC\
    \ Position (for data\n                  reception)\n        \"\"\"\n        return\
    \ self._pos\n\n    @pos.setter\n    def pos(self, value: int) -> None:\n     \
    \   self._pos.value = value\n\n    @property\n    def ack(self) -> Field:\n  \
    \      \"\"\"\n        ACK\n\n        Acknowledge enable\n        \"\"\"\n   \
    \     return self._ack\n\n    @ack.setter\n    def ack(self, value: int) -> None:\n\
    \        self._ack.value = value\n\n    @property\n    def stop(self) -> Field:\n\
    \        \"\"\"\n        STOP\n\n        Stop generation\n        \"\"\"\n   \
    \     return self._stop\n\n    @stop.setter\n    def stop(self, value: int) ->\
    \ None:\n        self._stop.value = value\n\n    @property\n    def start(self)\
    \ -> Field:\n        \"\"\"\n        START\n\n        Start generation\n     \
    \   \"\"\"\n        return self._start\n\n    @start.setter\n    def start(self,\
    \ value: int) -> None:\n        self._start.value = value\n\n    @property\n \
    \   def nostretch(self) -> Field:\n        \"\"\"\n        NOSTRETCH\n\n     \
    \   Clock stretching disable (Slave\n                  mode)\n        \"\"\"\n\
    \        return self._nostretch\n\n    @nostretch.setter\n    def nostretch(self,\
    \ value: int) -> None:\n        self._nostretch.value = value\n\n    @property\n\
    \    def engc(self) -> Field:\n        \"\"\"\n        ENGC\n\n        General\
    \ call enable\n        \"\"\"\n        return self._engc\n\n    @engc.setter\n\
    \    def engc(self, value: int) -> None:\n        self._engc.value = value\n\n\
    \    @property\n    def enpec(self) -> Field:\n        \"\"\"\n        ENPEC\n\
    \n        PEC enable\n        \"\"\"\n        return self._enpec\n\n    @enpec.setter\n\
    \    def enpec(self, value: int) -> None:\n        self._enpec.value = value\n\
    \n    @property\n    def enarp(self) -> Field:\n        \"\"\"\n        ENARP\n\
    \n        ARP enable\n        \"\"\"\n        return self._enarp\n\n    @enarp.setter\n\
    \    def enarp(self, value: int) -> None:\n        self._enarp.value = value\n\
    \n    @property\n    def smbtype(self) -> Field:\n        \"\"\"\n        SMBTYPE\n\
    \n        SMBus type\n        \"\"\"\n        return self._smbtype\n\n    @smbtype.setter\n\
    \    def smbtype(self, value: int) -> None:\n        self._smbtype.value = value\n\
    \n    @property\n    def smbus(self) -> Field:\n        \"\"\"\n        SMBUS\n\
    \n        SMBus mode\n        \"\"\"\n        return self._smbus\n\n    @smbus.setter\n\
    \    def smbus(self, value: int) -> None:\n        self._smbus.value = value\n\
    \n    @property\n    def pe(self) -> Field:\n        \"\"\"\n        PE\n\n  \
    \      Peripheral enable\n        \"\"\"\n        return self._pe\n\n    @pe.setter\n\
    \    def pe(self, value: int) -> None:\n        self._pe.value = value\n\n\nclass\
    \ Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    Control register 2\n    \"\
    \"\"\n\n    def __init__(self):\n        self._last = Field(\"last\", 12, 1)\n\
    \        self._dmaen = Field(\"dmaen\", 11, 1)\n        self._itbufen = Field(\"\
    itbufen\", 10, 1)\n        self._itevten = Field(\"itevten\", 9, 1)\n        self._iterren\
    \ = Field(\"iterren\", 8, 1)\n        self._freq = Field(\"freq\", 0, 6)\n   \
    \     super().__init__(\"CR2\", 0x40005400 + 0x4)\n\n    @property\n    def last(self)\
    \ -> Field:\n        \"\"\"\n        LAST\n\n        DMA last transfer\n     \
    \   \"\"\"\n        return self._last\n\n    @last.setter\n    def last(self,\
    \ value: int) -> None:\n        self._last.value = value\n\n    @property\n  \
    \  def dmaen(self) -> Field:\n        \"\"\"\n        DMAEN\n\n        DMA requests\
    \ enable\n        \"\"\"\n        return self._dmaen\n\n    @dmaen.setter\n  \
    \  def dmaen(self, value: int) -> None:\n        self._dmaen.value = value\n\n\
    \    @property\n    def itbufen(self) -> Field:\n        \"\"\"\n        ITBUFEN\n\
    \n        Buffer interrupt enable\n        \"\"\"\n        return self._itbufen\n\
    \n    @itbufen.setter\n    def itbufen(self, value: int) -> None:\n        self._itbufen.value\
    \ = value\n\n    @property\n    def itevten(self) -> Field:\n        \"\"\"\n\
    \        ITEVTEN\n\n        Event interrupt enable\n        \"\"\"\n        return\
    \ self._itevten\n\n    @itevten.setter\n    def itevten(self, value: int) -> None:\n\
    \        self._itevten.value = value\n\n    @property\n    def iterren(self) ->\
    \ Field:\n        \"\"\"\n        ITERREN\n\n        Error interrupt enable\n\
    \        \"\"\"\n        return self._iterren\n\n    @iterren.setter\n    def\
    \ iterren(self, value: int) -> None:\n        self._iterren.value = value\n\n\
    \    @property\n    def freq(self) -> Field:\n        \"\"\"\n        FREQ\n\n\
    \        Peripheral clock frequency\n        \"\"\"\n        return self._freq\n\
    \n    @freq.setter\n    def freq(self, value: int) -> None:\n        self._freq.value\
    \ = value\n\n\nclass Oar1Register(Register):\n    \"\"\"\n    OAR1\n\n    Own\
    \ address register 1\n    \"\"\"\n\n    def __init__(self):\n        self._addmode\
    \ = Field(\"addmode\", 15, 1)\n        self._add10 = Field(\"add10\", 8, 2)\n\
    \        self._add7 = Field(\"add7\", 1, 7)\n        self._add0 = Field(\"add0\"\
    , 0, 1)\n        super().__init__(\"OAR1\", 0x40005400 + 0x8)\n\n    @property\n\
    \    def addmode(self) -> Field:\n        \"\"\"\n        ADDMODE\n\n        Addressing\
    \ mode (slave\n                  mode)\n        \"\"\"\n        return self._addmode\n\
    \n    @addmode.setter\n    def addmode(self, value: int) -> None:\n        self._addmode.value\
    \ = value\n\n    @property\n    def add10(self) -> Field:\n        \"\"\"\n  \
    \      ADD10\n\n        Interface address\n        \"\"\"\n        return self._add10\n\
    \n    @add10.setter\n    def add10(self, value: int) -> None:\n        self._add10.value\
    \ = value\n\n    @property\n    def add7(self) -> Field:\n        \"\"\"\n   \
    \     ADD7\n\n        Interface address\n        \"\"\"\n        return self._add7\n\
    \n    @add7.setter\n    def add7(self, value: int) -> None:\n        self._add7.value\
    \ = value\n\n    @property\n    def add0(self) -> Field:\n        \"\"\"\n   \
    \     ADD0\n\n        Interface address\n        \"\"\"\n        return self._add0\n\
    \n    @add0.setter\n    def add0(self, value: int) -> None:\n        self._add0.value\
    \ = value\n\n\nclass Oar2Register(Register):\n    \"\"\"\n    OAR2\n\n    Own\
    \ address register 2\n    \"\"\"\n\n    def __init__(self):\n        self._add2\
    \ = Field(\"add2\", 1, 7)\n        self._endual = Field(\"endual\", 0, 1)\n  \
    \      super().__init__(\"OAR2\", 0x40005400 + 0xC)\n\n    @property\n    def\
    \ add2(self) -> Field:\n        \"\"\"\n        ADD2\n\n        Interface address\n\
    \        \"\"\"\n        return self._add2\n\n    @add2.setter\n    def add2(self,\
    \ value: int) -> None:\n        self._add2.value = value\n\n    @property\n  \
    \  def endual(self) -> Field:\n        \"\"\"\n        ENDUAL\n\n        Dual\
    \ addressing mode\n                  enable\n        \"\"\"\n        return self._endual\n\
    \n    @endual.setter\n    def endual(self, value: int) -> None:\n        self._endual.value\
    \ = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n    DR\n\n    Data register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._dr = Field(\"dr\", 0, 8)\n\
    \        super().__init__(\"DR\", 0x40005400 + 0x10)\n\n    @property\n    def\
    \ dr(self) -> Field:\n        \"\"\"\n        DR\n\n        8-bit data register\n\
    \        \"\"\"\n        return self._dr\n\n    @dr.setter\n    def dr(self, value:\
    \ int) -> None:\n        self._dr.value = value\n\n\nclass Sr1Register(Register):\n\
    \    \"\"\"\n    SR1\n\n    Status register 1\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._smbalert = Field(\"smbalert\", 15, 1)\n        self._timeout =\
    \ Field(\"timeout\", 14, 1)\n        self._pecerr = Field(\"pecerr\", 12, 1)\n\
    \        self._ovr = Field(\"ovr\", 11, 1)\n        self._af = Field(\"af\", 10,\
    \ 1)\n        self._arlo = Field(\"arlo\", 9, 1)\n        self._berr = Field(\"\
    berr\", 8, 1)\n        self._txe = Field(\"txe\", 7, 1)\n        self._rxne =\
    \ Field(\"rxne\", 6, 1)\n        self._stopf = Field(\"stopf\", 4, 1)\n      \
    \  self._add10 = Field(\"add10\", 3, 1)\n        self._btf = Field(\"btf\", 2,\
    \ 1)\n        self._addr = Field(\"addr\", 1, 1)\n        self._sb = Field(\"\
    sb\", 0, 1)\n        super().__init__(\"SR1\", 0x40005400 + 0x14)\n\n    @property\n\
    \    def smbalert(self) -> Field:\n        \"\"\"\n        SMBALERT\n\n      \
    \  SMBus alert\n        \"\"\"\n        return self._smbalert\n\n    @smbalert.setter\n\
    \    def smbalert(self, value: int) -> None:\n        self._smbalert.value = value\n\
    \n    @property\n    def timeout(self) -> Field:\n        \"\"\"\n        TIMEOUT\n\
    \n        Timeout or Tlow error\n        \"\"\"\n        return self._timeout\n\
    \n    @timeout.setter\n    def timeout(self, value: int) -> None:\n        self._timeout.value\
    \ = value\n\n    @property\n    def pecerr(self) -> Field:\n        \"\"\"\n \
    \       PECERR\n\n        PEC Error in reception\n        \"\"\"\n        return\
    \ self._pecerr\n\n    @pecerr.setter\n    def pecerr(self, value: int) -> None:\n\
    \        self._pecerr.value = value\n\n    @property\n    def ovr(self) -> Field:\n\
    \        \"\"\"\n        OVR\n\n        Overrun/Underrun\n        \"\"\"\n   \
    \     return self._ovr\n\n    @ovr.setter\n    def ovr(self, value: int) -> None:\n\
    \        self._ovr.value = value\n\n    @property\n    def af(self) -> Field:\n\
    \        \"\"\"\n        AF\n\n        Acknowledge failure\n        \"\"\"\n \
    \       return self._af\n\n    @af.setter\n    def af(self, value: int) -> None:\n\
    \        self._af.value = value\n\n    @property\n    def arlo(self) -> Field:\n\
    \        \"\"\"\n        ARLO\n\n        Arbitration lost (master\n          \
    \        mode)\n        \"\"\"\n        return self._arlo\n\n    @arlo.setter\n\
    \    def arlo(self, value: int) -> None:\n        self._arlo.value = value\n\n\
    \    @property\n    def berr(self) -> Field:\n        \"\"\"\n        BERR\n\n\
    \        Bus error\n        \"\"\"\n        return self._berr\n\n    @berr.setter\n\
    \    def berr(self, value: int) -> None:\n        self._berr.value = value\n\n\
    \    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n \
    \       Data register empty\n                  (transmitters)\n        \"\"\"\n\
    \        return self._txe\n\n    @txe.setter\n    def txe(self, value: int) ->\
    \ None:\n        self._txe.value = value\n\n    @property\n    def rxne(self)\
    \ -> Field:\n        \"\"\"\n        RXNE\n\n        Data register not empty\n\
    \                  (receivers)\n        \"\"\"\n        return self._rxne\n\n\
    \    @rxne.setter\n    def rxne(self, value: int) -> None:\n        self._rxne.value\
    \ = value\n\n    @property\n    def stopf(self) -> Field:\n        \"\"\"\n  \
    \      STOPF\n\n        Stop detection (slave\n                  mode)\n     \
    \   \"\"\"\n        return self._stopf\n\n    @stopf.setter\n    def stopf(self,\
    \ value: int) -> None:\n        self._stopf.value = value\n\n    @property\n \
    \   def add10(self) -> Field:\n        \"\"\"\n        ADD10\n\n        10-bit\
    \ header sent (Master\n                  mode)\n        \"\"\"\n        return\
    \ self._add10\n\n    @add10.setter\n    def add10(self, value: int) -> None:\n\
    \        self._add10.value = value\n\n    @property\n    def btf(self) -> Field:\n\
    \        \"\"\"\n        BTF\n\n        Byte transfer finished\n        \"\"\"\
    \n        return self._btf\n\n    @btf.setter\n    def btf(self, value: int) ->\
    \ None:\n        self._btf.value = value\n\n    @property\n    def addr(self)\
    \ -> Field:\n        \"\"\"\n        ADDR\n\n        Address sent (master mode)/matched\n\
    \                  (slave mode)\n        \"\"\"\n        return self._addr\n\n\
    \    @addr.setter\n    def addr(self, value: int) -> None:\n        self._addr.value\
    \ = value\n\n    @property\n    def sb(self) -> Field:\n        \"\"\"\n     \
    \   SB\n\n        Start bit (Master mode)\n        \"\"\"\n        return self._sb\n\
    \n    @sb.setter\n    def sb(self, value: int) -> None:\n        self._sb.value\
    \ = value\n\n\nclass Sr2Register(Register):\n    \"\"\"\n    SR2\n\n    Status\
    \ register 2\n    \"\"\"\n\n    def __init__(self):\n        self._pec = Field(\"\
    pec\", 8, 8)\n        self._dualf = Field(\"dualf\", 7, 1)\n        self._smbhost\
    \ = Field(\"smbhost\", 6, 1)\n        self._smbdefault = Field(\"smbdefault\"\
    , 5, 1)\n        self._gencall = Field(\"gencall\", 4, 1)\n        self._tra =\
    \ Field(\"tra\", 2, 1)\n        self._busy = Field(\"busy\", 1, 1)\n        self._msl\
    \ = Field(\"msl\", 0, 1)\n        super().__init__(\"SR2\", 0x40005400 + 0x18)\n\
    \n    @property\n    def pec(self) -> Field:\n        \"\"\"\n        PEC\n\n\
    \        acket error checking\n                  register\n        \"\"\"\n  \
    \      return self._pec\n\n    @pec.setter\n    def pec(self, value: int) -> None:\n\
    \        self._pec.value = value\n\n    @property\n    def dualf(self) -> Field:\n\
    \        \"\"\"\n        DUALF\n\n        Dual flag (Slave mode)\n        \"\"\
    \"\n        return self._dualf\n\n    @dualf.setter\n    def dualf(self, value:\
    \ int) -> None:\n        self._dualf.value = value\n\n    @property\n    def smbhost(self)\
    \ -> Field:\n        \"\"\"\n        SMBHOST\n\n        SMBus host header (Slave\n\
    \                  mode)\n        \"\"\"\n        return self._smbhost\n\n   \
    \ @smbhost.setter\n    def smbhost(self, value: int) -> None:\n        self._smbhost.value\
    \ = value\n\n    @property\n    def smbdefault(self) -> Field:\n        \"\"\"\
    \n        SMBDEFAULT\n\n        SMBus device default address (Slave\n        \
    \          mode)\n        \"\"\"\n        return self._smbdefault\n\n    @smbdefault.setter\n\
    \    def smbdefault(self, value: int) -> None:\n        self._smbdefault.value\
    \ = value\n\n    @property\n    def gencall(self) -> Field:\n        \"\"\"\n\
    \        GENCALL\n\n        General call address (Slave\n                  mode)\n\
    \        \"\"\"\n        return self._gencall\n\n    @gencall.setter\n    def\
    \ gencall(self, value: int) -> None:\n        self._gencall.value = value\n\n\
    \    @property\n    def tra(self) -> Field:\n        \"\"\"\n        TRA\n\n \
    \       Transmitter/receiver\n        \"\"\"\n        return self._tra\n\n   \
    \ @tra.setter\n    def tra(self, value: int) -> None:\n        self._tra.value\
    \ = value\n\n    @property\n    def busy(self) -> Field:\n        \"\"\"\n   \
    \     BUSY\n\n        Bus busy\n        \"\"\"\n        return self._busy\n\n\
    \    @busy.setter\n    def busy(self, value: int) -> None:\n        self._busy.value\
    \ = value\n\n    @property\n    def msl(self) -> Field:\n        \"\"\"\n    \
    \    MSL\n\n        Master/slave\n        \"\"\"\n        return self._msl\n\n\
    \    @msl.setter\n    def msl(self, value: int) -> None:\n        self._msl.value\
    \ = value\n\n\nclass CcrRegister(Register):\n    \"\"\"\n    CCR\n\n    Clock\
    \ control register\n    \"\"\"\n\n    def __init__(self):\n        self._f_s =\
    \ Field(\"f_s\", 15, 1)\n        self._duty = Field(\"duty\", 14, 1)\n       \
    \ self._ccr = Field(\"ccr\", 0, 12)\n        super().__init__(\"CCR\", 0x40005400\
    \ + 0x1C)\n\n    @property\n    def f_s(self) -> Field:\n        \"\"\"\n    \
    \    F_S\n\n        I2C master mode selection\n        \"\"\"\n        return\
    \ self._f_s\n\n    @f_s.setter\n    def f_s(self, value: int) -> None:\n     \
    \   self._f_s.value = value\n\n    @property\n    def duty(self) -> Field:\n \
    \       \"\"\"\n        DUTY\n\n        Fast mode duty cycle\n        \"\"\"\n\
    \        return self._duty\n\n    @duty.setter\n    def duty(self, value: int)\
    \ -> None:\n        self._duty.value = value\n\n    @property\n    def ccr(self)\
    \ -> Field:\n        \"\"\"\n        CCR\n\n        Clock control register in\
    \ Fast/Standard\n                  mode (Master mode)\n        \"\"\"\n      \
    \  return self._ccr\n\n    @ccr.setter\n    def ccr(self, value: int) -> None:\n\
    \        self._ccr.value = value\n\n\nclass TriseRegister(Register):\n    \"\"\
    \"\n    TRISE\n\n    TRISE register\n    \"\"\"\n\n    def __init__(self):\n \
    \       self._trise = Field(\"trise\", 0, 6)\n        super().__init__(\"TRISE\"\
    , 0x40005400 + 0x20)\n\n    @property\n    def trise(self) -> Field:\n       \
    \ \"\"\"\n        TRISE\n\n        Maximum rise time in Fast/Standard mode\n \
    \                 (Master mode)\n        \"\"\"\n        return self._trise\n\n\
    \    @trise.setter\n    def trise(self, value: int) -> None:\n        self._trise.value\
    \ = value\n\n\nclass I2c1(Peripheral):\n    \"\"\"\n    I2C1\n\n    Inter-integrated\
    \ circuit\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._oar1 = Oar1Register()\n    \
    \    self._oar2 = Oar2Register()\n        self._dr = DrRegister()\n        self._sr1\
    \ = Sr1Register()\n        self._sr2 = Sr2Register()\n        self._ccr = CcrRegister()\n\
    \        self._trise = TriseRegister()\n        super().__init__(\"i2c1\", 0x40005400)\n\
    \n    @property\n    def cr1(self) -> Cr1Register:\n        return self._cr1\n\
    \n    @cr1.setter\n    def cr1(self, value: int) -> None:\n        self._cr1.value\
    \ = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n        return\
    \ self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) -> None:\n     \
    \   self._cr2.value = value\n\n    @property\n    def oar1(self) -> Oar1Register:\n\
    \        return self._oar1\n\n    @oar1.setter\n    def oar1(self, value: int)\
    \ -> None:\n        self._oar1.value = value\n\n    @property\n    def oar2(self)\
    \ -> Oar2Register:\n        return self._oar2\n\n    @oar2.setter\n    def oar2(self,\
    \ value: int) -> None:\n        self._oar2.value = value\n\n    @property\n  \
    \  def dr(self) -> DrRegister:\n        return self._dr\n\n    @dr.setter\n  \
    \  def dr(self, value: int) -> None:\n        self._dr.value = value\n\n    @property\n\
    \    def sr1(self) -> Sr1Register:\n        return self._sr1\n\n    @sr1.setter\n\
    \    def sr1(self, value: int) -> None:\n        self._sr1.value = value\n\n \
    \   @property\n    def sr2(self) -> Sr2Register:\n        return self._sr2\n\n\
    \    @sr2.setter\n    def sr2(self, value: int) -> None:\n        self._sr2.value\
    \ = value\n\n    @property\n    def ccr(self) -> CcrRegister:\n        return\
    \ self._ccr\n\n    @ccr.setter\n    def ccr(self, value: int) -> None:\n     \
    \   self._ccr.value = value\n\n    @property\n    def trise(self) -> TriseRegister:\n\
    \        return self._trise\n\n    @trise.setter\n    def trise(self, value: int)\
    \ -> None:\n        self._trise.value = value\n"
  name: I2C1
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40003400 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40003400 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40003400 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40003400 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40003400 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40003400 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40003400 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40003400 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40003400 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass I2s2ext(Peripheral):\n    \"\"\"\n    I2S2EXT\n\n    Serial\
    \ peripheral interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1\
    \ = Cr1Register()\n        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n\
    \        self._dr = DrRegister()\n        self._crcpr = CrcprRegister()\n    \
    \    self._rxcrcr = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n\
    \        self._i2scfgr = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n\
    \        super().__init__(\"i2s2ext\", 0x40003400)\n\n    @property\n    def cr1(self)\
    \ -> Cr1Register:\n        return self._cr1\n\n    @cr1.setter\n    def cr1(self,\
    \ value: int) -> None:\n        self._cr1.value = value\n\n    @property\n   \
    \ def cr2(self) -> Cr2Register:\n        return self._cr2\n\n    @cr2.setter\n\
    \    def cr2(self, value: int) -> None:\n        self._cr2.value = value\n\n \
    \   @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\n  \
    \  @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value =\
    \ value\n\n    @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\
    \n    @dr.setter\n    def dr(self, value: int) -> None:\n        self._dr.value\
    \ = value\n\n    @property\n    def crcpr(self) -> CrcprRegister:\n        return\
    \ self._crcpr\n\n    @crcpr.setter\n    def crcpr(self, value: int) -> None:\n\
    \        self._crcpr.value = value\n\n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n\
    \        return self._rxcrcr\n\n    @rxcrcr.setter\n    def rxcrcr(self, value:\
    \ int) -> None:\n        self._rxcrcr.value = value\n\n    @property\n    def\
    \ txcrcr(self) -> TxcrcrRegister:\n        return self._txcrcr\n\n    @txcrcr.setter\n\
    \    def txcrcr(self, value: int) -> None:\n        self._txcrcr.value = value\n\
    \n    @property\n    def i2scfgr(self) -> I2scfgrRegister:\n        return self._i2scfgr\n\
    \n    @i2scfgr.setter\n    def i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value\
    \ = value\n\n    @property\n    def i2spr(self) -> I2sprRegister:\n        return\
    \ self._i2spr\n\n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n\
    \        self._i2spr.value = value\n"
  name: I2S2ext
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40004000 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40004000 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40004000 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40004000 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40004000 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40004000 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40004000 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40004000 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40004000 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass I2s3ext(Peripheral):\n    \"\"\"\n    I2S3EXT\n\n    Serial\
    \ peripheral interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1\
    \ = Cr1Register()\n        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n\
    \        self._dr = DrRegister()\n        self._crcpr = CrcprRegister()\n    \
    \    self._rxcrcr = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n\
    \        self._i2scfgr = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n\
    \        super().__init__(\"i2s3ext\", 0x40004000)\n\n    @property\n    def cr1(self)\
    \ -> Cr1Register:\n        return self._cr1\n\n    @cr1.setter\n    def cr1(self,\
    \ value: int) -> None:\n        self._cr1.value = value\n\n    @property\n   \
    \ def cr2(self) -> Cr2Register:\n        return self._cr2\n\n    @cr2.setter\n\
    \    def cr2(self, value: int) -> None:\n        self._cr2.value = value\n\n \
    \   @property\n    def sr(self) -> SrRegister:\n        return self._sr\n\n  \
    \  @sr.setter\n    def sr(self, value: int) -> None:\n        self._sr.value =\
    \ value\n\n    @property\n    def dr(self) -> DrRegister:\n        return self._dr\n\
    \n    @dr.setter\n    def dr(self, value: int) -> None:\n        self._dr.value\
    \ = value\n\n    @property\n    def crcpr(self) -> CrcprRegister:\n        return\
    \ self._crcpr\n\n    @crcpr.setter\n    def crcpr(self, value: int) -> None:\n\
    \        self._crcpr.value = value\n\n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n\
    \        return self._rxcrcr\n\n    @rxcrcr.setter\n    def rxcrcr(self, value:\
    \ int) -> None:\n        self._rxcrcr.value = value\n\n    @property\n    def\
    \ txcrcr(self) -> TxcrcrRegister:\n        return self._txcrcr\n\n    @txcrcr.setter\n\
    \    def txcrcr(self, value: int) -> None:\n        self._txcrcr.value = value\n\
    \n    @property\n    def i2scfgr(self) -> I2scfgrRegister:\n        return self._i2scfgr\n\
    \n    @i2scfgr.setter\n    def i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value\
    \ = value\n\n    @property\n    def i2spr(self) -> I2sprRegister:\n        return\
    \ self._i2spr\n\n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n\
    \        self._i2spr.value = value\n"
  name: I2S3ext
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40013000 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40013000 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40013000 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40013000 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40013000 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40013000 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40013000 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40013000 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40013000 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass Spi1(Peripheral):\n    \"\"\"\n    SPI1\n\n    Serial peripheral\
    \ interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n        self._dr\
    \ = DrRegister()\n        self._crcpr = CrcprRegister()\n        self._rxcrcr\
    \ = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n        self._i2scfgr\
    \ = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n        super().__init__(\"\
    spi1\", 0x40013000)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n\n    @property\n    def dr(self)\
    \ -> DrRegister:\n        return self._dr\n\n    @dr.setter\n    def dr(self,\
    \ value: int) -> None:\n        self._dr.value = value\n\n    @property\n    def\
    \ crcpr(self) -> CrcprRegister:\n        return self._crcpr\n\n    @crcpr.setter\n\
    \    def crcpr(self, value: int) -> None:\n        self._crcpr.value = value\n\
    \n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n        return self._rxcrcr\n\
    \n    @rxcrcr.setter\n    def rxcrcr(self, value: int) -> None:\n        self._rxcrcr.value\
    \ = value\n\n    @property\n    def txcrcr(self) -> TxcrcrRegister:\n        return\
    \ self._txcrcr\n\n    @txcrcr.setter\n    def txcrcr(self, value: int) -> None:\n\
    \        self._txcrcr.value = value\n\n    @property\n    def i2scfgr(self) ->\
    \ I2scfgrRegister:\n        return self._i2scfgr\n\n    @i2scfgr.setter\n    def\
    \ i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value = value\n\n\
    \    @property\n    def i2spr(self) -> I2sprRegister:\n        return self._i2spr\n\
    \n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n        self._i2spr.value\
    \ = value\n"
  name: SPI1
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40003800 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40003800 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40003800 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40003800 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40003800 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40003800 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40003800 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40003800 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40003800 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass Spi2(Peripheral):\n    \"\"\"\n    SPI2\n\n    Serial peripheral\
    \ interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n        self._dr\
    \ = DrRegister()\n        self._crcpr = CrcprRegister()\n        self._rxcrcr\
    \ = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n        self._i2scfgr\
    \ = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n        super().__init__(\"\
    spi2\", 0x40003800)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n\n    @property\n    def dr(self)\
    \ -> DrRegister:\n        return self._dr\n\n    @dr.setter\n    def dr(self,\
    \ value: int) -> None:\n        self._dr.value = value\n\n    @property\n    def\
    \ crcpr(self) -> CrcprRegister:\n        return self._crcpr\n\n    @crcpr.setter\n\
    \    def crcpr(self, value: int) -> None:\n        self._crcpr.value = value\n\
    \n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n        return self._rxcrcr\n\
    \n    @rxcrcr.setter\n    def rxcrcr(self, value: int) -> None:\n        self._rxcrcr.value\
    \ = value\n\n    @property\n    def txcrcr(self) -> TxcrcrRegister:\n        return\
    \ self._txcrcr\n\n    @txcrcr.setter\n    def txcrcr(self, value: int) -> None:\n\
    \        self._txcrcr.value = value\n\n    @property\n    def i2scfgr(self) ->\
    \ I2scfgrRegister:\n        return self._i2scfgr\n\n    @i2scfgr.setter\n    def\
    \ i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value = value\n\n\
    \    @property\n    def i2spr(self) -> I2sprRegister:\n        return self._i2spr\n\
    \n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n        self._i2spr.value\
    \ = value\n"
  name: SPI2
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40003C00 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40003C00 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40003C00 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40003C00 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40003C00 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40003C00 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40003C00 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40003C00 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40003C00 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass Spi3(Peripheral):\n    \"\"\"\n    SPI3\n\n    Serial peripheral\
    \ interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n        self._dr\
    \ = DrRegister()\n        self._crcpr = CrcprRegister()\n        self._rxcrcr\
    \ = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n        self._i2scfgr\
    \ = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n        super().__init__(\"\
    spi3\", 0x40003C00)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n\n    @property\n    def dr(self)\
    \ -> DrRegister:\n        return self._dr\n\n    @dr.setter\n    def dr(self,\
    \ value: int) -> None:\n        self._dr.value = value\n\n    @property\n    def\
    \ crcpr(self) -> CrcprRegister:\n        return self._crcpr\n\n    @crcpr.setter\n\
    \    def crcpr(self, value: int) -> None:\n        self._crcpr.value = value\n\
    \n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n        return self._rxcrcr\n\
    \n    @rxcrcr.setter\n    def rxcrcr(self, value: int) -> None:\n        self._rxcrcr.value\
    \ = value\n\n    @property\n    def txcrcr(self) -> TxcrcrRegister:\n        return\
    \ self._txcrcr\n\n    @txcrcr.setter\n    def txcrcr(self, value: int) -> None:\n\
    \        self._txcrcr.value = value\n\n    @property\n    def i2scfgr(self) ->\
    \ I2scfgrRegister:\n        return self._i2scfgr\n\n    @i2scfgr.setter\n    def\
    \ i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value = value\n\n\
    \    @property\n    def i2spr(self) -> I2sprRegister:\n        return self._i2spr\n\
    \n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n        self._i2spr.value\
    \ = value\n"
  name: SPI3
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40013400 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40013400 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40013400 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40013400 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40013400 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40013400 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40013400 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40013400 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40013400 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass Spi4(Peripheral):\n    \"\"\"\n    SPI4\n\n    Serial peripheral\
    \ interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n        self._dr\
    \ = DrRegister()\n        self._crcpr = CrcprRegister()\n        self._rxcrcr\
    \ = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n        self._i2scfgr\
    \ = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n        super().__init__(\"\
    spi4\", 0x40013400)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n\n    @property\n    def dr(self)\
    \ -> DrRegister:\n        return self._dr\n\n    @dr.setter\n    def dr(self,\
    \ value: int) -> None:\n        self._dr.value = value\n\n    @property\n    def\
    \ crcpr(self) -> CrcprRegister:\n        return self._crcpr\n\n    @crcpr.setter\n\
    \    def crcpr(self, value: int) -> None:\n        self._crcpr.value = value\n\
    \n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n        return self._rxcrcr\n\
    \n    @rxcrcr.setter\n    def rxcrcr(self, value: int) -> None:\n        self._rxcrcr.value\
    \ = value\n\n    @property\n    def txcrcr(self) -> TxcrcrRegister:\n        return\
    \ self._txcrcr\n\n    @txcrcr.setter\n    def txcrcr(self, value: int) -> None:\n\
    \        self._txcrcr.value = value\n\n    @property\n    def i2scfgr(self) ->\
    \ I2scfgrRegister:\n        return self._i2scfgr\n\n    @i2scfgr.setter\n    def\
    \ i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value = value\n\n\
    \    @property\n    def i2spr(self) -> I2sprRegister:\n        return self._i2spr\n\
    \n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n        self._i2spr.value\
    \ = value\n"
  name: SPI4
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Cr1Register(Register):\n    \"\"\"\n    CR1\n\n    control\
    \ register 1\n    \"\"\"\n\n    def __init__(self):\n        self._bidimode =\
    \ Field(\"bidimode\", 15, 1)\n        self._bidioe = Field(\"bidioe\", 14, 1)\n\
    \        self._crcen = Field(\"crcen\", 13, 1)\n        self._crcnext = Field(\"\
    crcnext\", 12, 1)\n        self._dff = Field(\"dff\", 11, 1)\n        self._rxonly\
    \ = Field(\"rxonly\", 10, 1)\n        self._ssm = Field(\"ssm\", 9, 1)\n     \
    \   self._ssi = Field(\"ssi\", 8, 1)\n        self._lsbfirst = Field(\"lsbfirst\"\
    , 7, 1)\n        self._spe = Field(\"spe\", 6, 1)\n        self._br = Field(\"\
    br\", 3, 3)\n        self._mstr = Field(\"mstr\", 2, 1)\n        self._cpol =\
    \ Field(\"cpol\", 1, 1)\n        self._cpha = Field(\"cpha\", 0, 1)\n        super().__init__(\"\
    CR1\", 0x40015000 + 0x0)\n\n    @property\n    def bidimode(self) -> Field:\n\
    \        \"\"\"\n        BIDIMODE\n\n        Bidirectional data mode\n       \
    \           enable\n        \"\"\"\n        return self._bidimode\n\n    @bidimode.setter\n\
    \    def bidimode(self, value: int) -> None:\n        self._bidimode.value = value\n\
    \n    @property\n    def bidioe(self) -> Field:\n        \"\"\"\n        BIDIOE\n\
    \n        Output enable in bidirectional\n                  mode\n        \"\"\
    \"\n        return self._bidioe\n\n    @bidioe.setter\n    def bidioe(self, value:\
    \ int) -> None:\n        self._bidioe.value = value\n\n    @property\n    def\
    \ crcen(self) -> Field:\n        \"\"\"\n        CRCEN\n\n        Hardware CRC\
    \ calculation\n                  enable\n        \"\"\"\n        return self._crcen\n\
    \n    @crcen.setter\n    def crcen(self, value: int) -> None:\n        self._crcen.value\
    \ = value\n\n    @property\n    def crcnext(self) -> Field:\n        \"\"\"\n\
    \        CRCNEXT\n\n        CRC transfer next\n        \"\"\"\n        return\
    \ self._crcnext\n\n    @crcnext.setter\n    def crcnext(self, value: int) -> None:\n\
    \        self._crcnext.value = value\n\n    @property\n    def dff(self) -> Field:\n\
    \        \"\"\"\n        DFF\n\n        Data frame format\n        \"\"\"\n  \
    \      return self._dff\n\n    @dff.setter\n    def dff(self, value: int) -> None:\n\
    \        self._dff.value = value\n\n    @property\n    def rxonly(self) -> Field:\n\
    \        \"\"\"\n        RXONLY\n\n        Receive only\n        \"\"\"\n    \
    \    return self._rxonly\n\n    @rxonly.setter\n    def rxonly(self, value: int)\
    \ -> None:\n        self._rxonly.value = value\n\n    @property\n    def ssm(self)\
    \ -> Field:\n        \"\"\"\n        SSM\n\n        Software slave management\n\
    \        \"\"\"\n        return self._ssm\n\n    @ssm.setter\n    def ssm(self,\
    \ value: int) -> None:\n        self._ssm.value = value\n\n    @property\n   \
    \ def ssi(self) -> Field:\n        \"\"\"\n        SSI\n\n        Internal slave\
    \ select\n        \"\"\"\n        return self._ssi\n\n    @ssi.setter\n    def\
    \ ssi(self, value: int) -> None:\n        self._ssi.value = value\n\n    @property\n\
    \    def lsbfirst(self) -> Field:\n        \"\"\"\n        LSBFIRST\n\n      \
    \  Frame format\n        \"\"\"\n        return self._lsbfirst\n\n    @lsbfirst.setter\n\
    \    def lsbfirst(self, value: int) -> None:\n        self._lsbfirst.value = value\n\
    \n    @property\n    def spe(self) -> Field:\n        \"\"\"\n        SPE\n\n\
    \        SPI enable\n        \"\"\"\n        return self._spe\n\n    @spe.setter\n\
    \    def spe(self, value: int) -> None:\n        self._spe.value = value\n\n \
    \   @property\n    def br(self) -> Field:\n        \"\"\"\n        BR\n\n    \
    \    Baud rate control\n        \"\"\"\n        return self._br\n\n    @br.setter\n\
    \    def br(self, value: int) -> None:\n        self._br.value = value\n\n   \
    \ @property\n    def mstr(self) -> Field:\n        \"\"\"\n        MSTR\n\n  \
    \      Master selection\n        \"\"\"\n        return self._mstr\n\n    @mstr.setter\n\
    \    def mstr(self, value: int) -> None:\n        self._mstr.value = value\n\n\
    \    @property\n    def cpol(self) -> Field:\n        \"\"\"\n        CPOL\n\n\
    \        Clock polarity\n        \"\"\"\n        return self._cpol\n\n    @cpol.setter\n\
    \    def cpol(self, value: int) -> None:\n        self._cpol.value = value\n\n\
    \    @property\n    def cpha(self) -> Field:\n        \"\"\"\n        CPHA\n\n\
    \        Clock phase\n        \"\"\"\n        return self._cpha\n\n    @cpha.setter\n\
    \    def cpha(self, value: int) -> None:\n        self._cpha.value = value\n\n\
    \nclass Cr2Register(Register):\n    \"\"\"\n    CR2\n\n    control register 2\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txeie = Field(\"txeie\"\
    , 7, 1)\n        self._rxneie = Field(\"rxneie\", 6, 1)\n        self._errie =\
    \ Field(\"errie\", 5, 1)\n        self._frf = Field(\"frf\", 4, 1)\n        self._ssoe\
    \ = Field(\"ssoe\", 2, 1)\n        self._txdmaen = Field(\"txdmaen\", 1, 1)\n\
    \        self._rxdmaen = Field(\"rxdmaen\", 0, 1)\n        super().__init__(\"\
    CR2\", 0x40015000 + 0x4)\n\n    @property\n    def txeie(self) -> Field:\n   \
    \     \"\"\"\n        TXEIE\n\n        Tx buffer empty interrupt\n           \
    \       enable\n        \"\"\"\n        return self._txeie\n\n    @txeie.setter\n\
    \    def txeie(self, value: int) -> None:\n        self._txeie.value = value\n\
    \n    @property\n    def rxneie(self) -> Field:\n        \"\"\"\n        RXNEIE\n\
    \n        RX buffer not empty interrupt\n                  enable\n        \"\"\
    \"\n        return self._rxneie\n\n    @rxneie.setter\n    def rxneie(self, value:\
    \ int) -> None:\n        self._rxneie.value = value\n\n    @property\n    def\
    \ errie(self) -> Field:\n        \"\"\"\n        ERRIE\n\n        Error interrupt\
    \ enable\n        \"\"\"\n        return self._errie\n\n    @errie.setter\n  \
    \  def errie(self, value: int) -> None:\n        self._errie.value = value\n\n\
    \    @property\n    def frf(self) -> Field:\n        \"\"\"\n        FRF\n\n \
    \       Frame format\n        \"\"\"\n        return self._frf\n\n    @frf.setter\n\
    \    def frf(self, value: int) -> None:\n        self._frf.value = value\n\n \
    \   @property\n    def ssoe(self) -> Field:\n        \"\"\"\n        SSOE\n\n\
    \        SS output enable\n        \"\"\"\n        return self._ssoe\n\n    @ssoe.setter\n\
    \    def ssoe(self, value: int) -> None:\n        self._ssoe.value = value\n\n\
    \    @property\n    def txdmaen(self) -> Field:\n        \"\"\"\n        TXDMAEN\n\
    \n        Tx buffer DMA enable\n        \"\"\"\n        return self._txdmaen\n\
    \n    @txdmaen.setter\n    def txdmaen(self, value: int) -> None:\n        self._txdmaen.value\
    \ = value\n\n    @property\n    def rxdmaen(self) -> Field:\n        \"\"\"\n\
    \        RXDMAEN\n\n        Rx buffer DMA enable\n        \"\"\"\n        return\
    \ self._rxdmaen\n\n    @rxdmaen.setter\n    def rxdmaen(self, value: int) -> None:\n\
    \        self._rxdmaen.value = value\n\n\nclass SrRegister(Register):\n    \"\"\
    \"\n    SR\n\n    status register\n    \"\"\"\n\n    def __init__(self):\n   \
    \     self._tifrfe = Field(\"tifrfe\", 8, 1)\n        self._bsy = Field(\"bsy\"\
    , 7, 1)\n        self._ovr = Field(\"ovr\", 6, 1)\n        self._modf = Field(\"\
    modf\", 5, 1)\n        self._crcerr = Field(\"crcerr\", 4, 1)\n        self._udr\
    \ = Field(\"udr\", 3, 1)\n        self._chside = Field(\"chside\", 2, 1)\n   \
    \     self._txe = Field(\"txe\", 1, 1)\n        self._rxne = Field(\"rxne\", 0,\
    \ 1)\n        super().__init__(\"SR\", 0x40015000 + 0x8)\n\n    @property\n  \
    \  def tifrfe(self) -> Field:\n        \"\"\"\n        TIFRFE\n\n        TI frame\
    \ format error\n        \"\"\"\n        return self._tifrfe\n\n    @tifrfe.setter\n\
    \    def tifrfe(self, value: int) -> None:\n        self._tifrfe.value = value\n\
    \n    @property\n    def bsy(self) -> Field:\n        \"\"\"\n        BSY\n\n\
    \        Busy flag\n        \"\"\"\n        return self._bsy\n\n    @bsy.setter\n\
    \    def bsy(self, value: int) -> None:\n        self._bsy.value = value\n\n \
    \   @property\n    def ovr(self) -> Field:\n        \"\"\"\n        OVR\n\n  \
    \      Overrun flag\n        \"\"\"\n        return self._ovr\n\n    @ovr.setter\n\
    \    def ovr(self, value: int) -> None:\n        self._ovr.value = value\n\n \
    \   @property\n    def modf(self) -> Field:\n        \"\"\"\n        MODF\n\n\
    \        Mode fault\n        \"\"\"\n        return self._modf\n\n    @modf.setter\n\
    \    def modf(self, value: int) -> None:\n        self._modf.value = value\n\n\
    \    @property\n    def crcerr(self) -> Field:\n        \"\"\"\n        CRCERR\n\
    \n        CRC error flag\n        \"\"\"\n        return self._crcerr\n\n    @crcerr.setter\n\
    \    def crcerr(self, value: int) -> None:\n        self._crcerr.value = value\n\
    \n    @property\n    def udr(self) -> Field:\n        \"\"\"\n        UDR\n\n\
    \        Underrun flag\n        \"\"\"\n        return self._udr\n\n    @udr.setter\n\
    \    def udr(self, value: int) -> None:\n        self._udr.value = value\n\n \
    \   @property\n    def chside(self) -> Field:\n        \"\"\"\n        CHSIDE\n\
    \n        Channel side\n        \"\"\"\n        return self._chside\n\n    @chside.setter\n\
    \    def chside(self, value: int) -> None:\n        self._chside.value = value\n\
    \n    @property\n    def txe(self) -> Field:\n        \"\"\"\n        TXE\n\n\
    \        Transmit buffer empty\n        \"\"\"\n        return self._txe\n\n \
    \   @txe.setter\n    def txe(self, value: int) -> None:\n        self._txe.value\
    \ = value\n\n    @property\n    def rxne(self) -> Field:\n        \"\"\"\n   \
    \     RXNE\n\n        Receive buffer not empty\n        \"\"\"\n        return\
    \ self._rxne\n\n    @rxne.setter\n    def rxne(self, value: int) -> None:\n  \
    \      self._rxne.value = value\n\n\nclass DrRegister(Register):\n    \"\"\"\n\
    \    DR\n\n    data register\n    \"\"\"\n\n    def __init__(self):\n        self._dr\
    \ = Field(\"dr\", 0, 16)\n        super().__init__(\"DR\", 0x40015000 + 0xC)\n\
    \n    @property\n    def dr(self) -> Field:\n        \"\"\"\n        DR\n\n  \
    \      Data register\n        \"\"\"\n        return self._dr\n\n    @dr.setter\n\
    \    def dr(self, value: int) -> None:\n        self._dr.value = value\n\n\nclass\
    \ CrcprRegister(Register):\n    \"\"\"\n    CRCPR\n\n    CRC polynomial register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._crcpoly = Field(\"crcpoly\"\
    , 0, 16)\n        super().__init__(\"CRCPR\", 0x40015000 + 0x10)\n\n    @property\n\
    \    def crcpoly(self) -> Field:\n        \"\"\"\n        CRCPOLY\n\n        CRC\
    \ polynomial register\n        \"\"\"\n        return self._crcpoly\n\n    @crcpoly.setter\n\
    \    def crcpoly(self, value: int) -> None:\n        self._crcpoly.value = value\n\
    \n\nclass RxcrcrRegister(Register):\n    \"\"\"\n    RXCRCR\n\n    RX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._rxcrc = Field(\"rxcrc\"\
    , 0, 16)\n        super().__init__(\"RXCRCR\", 0x40015000 + 0x14)\n\n    @property\n\
    \    def rxcrc(self) -> Field:\n        \"\"\"\n        RXCRC\n\n        Rx CRC\
    \ register\n        \"\"\"\n        return self._rxcrc\n\n    @rxcrc.setter\n\
    \    def rxcrc(self, value: int) -> None:\n        self._rxcrc.value = value\n\
    \n\nclass TxcrcrRegister(Register):\n    \"\"\"\n    TXCRCR\n\n    TX CRC register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._txcrc = Field(\"txcrc\"\
    , 0, 16)\n        super().__init__(\"TXCRCR\", 0x40015000 + 0x18)\n\n    @property\n\
    \    def txcrc(self) -> Field:\n        \"\"\"\n        TXCRC\n\n        Tx CRC\
    \ register\n        \"\"\"\n        return self._txcrc\n\n    @txcrc.setter\n\
    \    def txcrc(self, value: int) -> None:\n        self._txcrc.value = value\n\
    \n\nclass I2scfgrRegister(Register):\n    \"\"\"\n    I2SCFGR\n\n    I2S configuration\
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._i2smod = Field(\"\
    i2smod\", 11, 1)\n        self._i2se = Field(\"i2se\", 10, 1)\n        self._i2scfg\
    \ = Field(\"i2scfg\", 8, 2)\n        self._pcmsync = Field(\"pcmsync\", 7, 1)\n\
    \        self._i2sstd = Field(\"i2sstd\", 4, 2)\n        self._ckpol = Field(\"\
    ckpol\", 3, 1)\n        self._datlen = Field(\"datlen\", 1, 2)\n        self._chlen\
    \ = Field(\"chlen\", 0, 1)\n        super().__init__(\"I2SCFGR\", 0x40015000 +\
    \ 0x1C)\n\n    @property\n    def i2smod(self) -> Field:\n        \"\"\"\n   \
    \     I2SMOD\n\n        I2S mode selection\n        \"\"\"\n        return self._i2smod\n\
    \n    @i2smod.setter\n    def i2smod(self, value: int) -> None:\n        self._i2smod.value\
    \ = value\n\n    @property\n    def i2se(self) -> Field:\n        \"\"\"\n   \
    \     I2SE\n\n        I2S Enable\n        \"\"\"\n        return self._i2se\n\n\
    \    @i2se.setter\n    def i2se(self, value: int) -> None:\n        self._i2se.value\
    \ = value\n\n    @property\n    def i2scfg(self) -> Field:\n        \"\"\"\n \
    \       I2SCFG\n\n        I2S configuration mode\n        \"\"\"\n        return\
    \ self._i2scfg\n\n    @i2scfg.setter\n    def i2scfg(self, value: int) -> None:\n\
    \        self._i2scfg.value = value\n\n    @property\n    def pcmsync(self) ->\
    \ Field:\n        \"\"\"\n        PCMSYNC\n\n        PCM frame synchronization\n\
    \        \"\"\"\n        return self._pcmsync\n\n    @pcmsync.setter\n    def\
    \ pcmsync(self, value: int) -> None:\n        self._pcmsync.value = value\n\n\
    \    @property\n    def i2sstd(self) -> Field:\n        \"\"\"\n        I2SSTD\n\
    \n        I2S standard selection\n        \"\"\"\n        return self._i2sstd\n\
    \n    @i2sstd.setter\n    def i2sstd(self, value: int) -> None:\n        self._i2sstd.value\
    \ = value\n\n    @property\n    def ckpol(self) -> Field:\n        \"\"\"\n  \
    \      CKPOL\n\n        Steady state clock\n                  polarity\n     \
    \   \"\"\"\n        return self._ckpol\n\n    @ckpol.setter\n    def ckpol(self,\
    \ value: int) -> None:\n        self._ckpol.value = value\n\n    @property\n \
    \   def datlen(self) -> Field:\n        \"\"\"\n        DATLEN\n\n        Data\
    \ length to be\n                  transferred\n        \"\"\"\n        return\
    \ self._datlen\n\n    @datlen.setter\n    def datlen(self, value: int) -> None:\n\
    \        self._datlen.value = value\n\n    @property\n    def chlen(self) -> Field:\n\
    \        \"\"\"\n        CHLEN\n\n        Channel length (number of bits per audio\n\
    \                  channel)\n        \"\"\"\n        return self._chlen\n\n  \
    \  @chlen.setter\n    def chlen(self, value: int) -> None:\n        self._chlen.value\
    \ = value\n\n\nclass I2sprRegister(Register):\n    \"\"\"\n    I2SPR\n\n    I2S\
    \ prescaler register\n    \"\"\"\n\n    def __init__(self):\n        self._mckoe\
    \ = Field(\"mckoe\", 9, 1)\n        self._odd = Field(\"odd\", 8, 1)\n       \
    \ self._i2sdiv = Field(\"i2sdiv\", 0, 8)\n        super().__init__(\"I2SPR\",\
    \ 0x40015000 + 0x20)\n\n    @property\n    def mckoe(self) -> Field:\n       \
    \ \"\"\"\n        MCKOE\n\n        Master clock output enable\n        \"\"\"\n\
    \        return self._mckoe\n\n    @mckoe.setter\n    def mckoe(self, value: int)\
    \ -> None:\n        self._mckoe.value = value\n\n    @property\n    def odd(self)\
    \ -> Field:\n        \"\"\"\n        ODD\n\n        Odd factor for the\n     \
    \             prescaler\n        \"\"\"\n        return self._odd\n\n    @odd.setter\n\
    \    def odd(self, value: int) -> None:\n        self._odd.value = value\n\n \
    \   @property\n    def i2sdiv(self) -> Field:\n        \"\"\"\n        I2SDIV\n\
    \n        I2S Linear prescaler\n        \"\"\"\n        return self._i2sdiv\n\n\
    \    @i2sdiv.setter\n    def i2sdiv(self, value: int) -> None:\n        self._i2sdiv.value\
    \ = value\n\n\nclass Spi5(Peripheral):\n    \"\"\"\n    SPI5\n\n    Serial peripheral\
    \ interface\n    \"\"\"\n\n    def __init__(self):\n        self._cr1 = Cr1Register()\n\
    \        self._cr2 = Cr2Register()\n        self._sr = SrRegister()\n        self._dr\
    \ = DrRegister()\n        self._crcpr = CrcprRegister()\n        self._rxcrcr\
    \ = RxcrcrRegister()\n        self._txcrcr = TxcrcrRegister()\n        self._i2scfgr\
    \ = I2scfgrRegister()\n        self._i2spr = I2sprRegister()\n        super().__init__(\"\
    spi5\", 0x40015000)\n\n    @property\n    def cr1(self) -> Cr1Register:\n    \
    \    return self._cr1\n\n    @cr1.setter\n    def cr1(self, value: int) -> None:\n\
    \        self._cr1.value = value\n\n    @property\n    def cr2(self) -> Cr2Register:\n\
    \        return self._cr2\n\n    @cr2.setter\n    def cr2(self, value: int) ->\
    \ None:\n        self._cr2.value = value\n\n    @property\n    def sr(self) ->\
    \ SrRegister:\n        return self._sr\n\n    @sr.setter\n    def sr(self, value:\
    \ int) -> None:\n        self._sr.value = value\n\n    @property\n    def dr(self)\
    \ -> DrRegister:\n        return self._dr\n\n    @dr.setter\n    def dr(self,\
    \ value: int) -> None:\n        self._dr.value = value\n\n    @property\n    def\
    \ crcpr(self) -> CrcprRegister:\n        return self._crcpr\n\n    @crcpr.setter\n\
    \    def crcpr(self, value: int) -> None:\n        self._crcpr.value = value\n\
    \n    @property\n    def rxcrcr(self) -> RxcrcrRegister:\n        return self._rxcrcr\n\
    \n    @rxcrcr.setter\n    def rxcrcr(self, value: int) -> None:\n        self._rxcrcr.value\
    \ = value\n\n    @property\n    def txcrcr(self) -> TxcrcrRegister:\n        return\
    \ self._txcrcr\n\n    @txcrcr.setter\n    def txcrcr(self, value: int) -> None:\n\
    \        self._txcrcr.value = value\n\n    @property\n    def i2scfgr(self) ->\
    \ I2scfgrRegister:\n        return self._i2scfgr\n\n    @i2scfgr.setter\n    def\
    \ i2scfgr(self, value: int) -> None:\n        self._i2scfgr.value = value\n\n\
    \    @property\n    def i2spr(self) -> I2sprRegister:\n        return self._i2spr\n\
    \n    @i2spr.setter\n    def i2spr(self, value: int) -> None:\n        self._i2spr.value\
    \ = value\n"
  name: SPI5
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Iser0Register(Register):\n    \"\"\"\n    ISER0\n\n    Interrupt\
    \ Set-Enable Register\n    \"\"\"\n\n    def __init__(self):\n        self._setena\
    \ = Field(\"setena\", 0, 32)\n        super().__init__(\"ISER0\", 0xE000E100 +\
    \ 0x0)\n\n    @property\n    def setena(self) -> Field:\n        \"\"\"\n    \
    \    SETENA\n\n        SETENA\n        \"\"\"\n        return self._setena\n\n\
    \    @setena.setter\n    def setena(self, value: int) -> None:\n        self._setena.value\
    \ = value\n\n\nclass Iser1Register(Register):\n    \"\"\"\n    ISER1\n\n    Interrupt\
    \ Set-Enable Register\n    \"\"\"\n\n    def __init__(self):\n        self._setena\
    \ = Field(\"setena\", 0, 32)\n        super().__init__(\"ISER1\", 0xE000E100 +\
    \ 0x4)\n\n    @property\n    def setena(self) -> Field:\n        \"\"\"\n    \
    \    SETENA\n\n        SETENA\n        \"\"\"\n        return self._setena\n\n\
    \    @setena.setter\n    def setena(self, value: int) -> None:\n        self._setena.value\
    \ = value\n\n\nclass Icer0Register(Register):\n    \"\"\"\n    ICER0\n\n    Interrupt\
    \ Clear-Enable\n              Register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._clrena = Field(\"clrena\", 0, 32)\n        super().__init__(\"\
    ICER0\", 0xE000E100 + 0x80)\n\n    @property\n    def clrena(self) -> Field:\n\
    \        \"\"\"\n        CLRENA\n\n        CLRENA\n        \"\"\"\n        return\
    \ self._clrena\n\n    @clrena.setter\n    def clrena(self, value: int) -> None:\n\
    \        self._clrena.value = value\n\n\nclass Icer1Register(Register):\n    \"\
    \"\"\n    ICER1\n\n    Interrupt Clear-Enable\n              Register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._clrena = Field(\"clrena\", 0, 32)\n\
    \        super().__init__(\"ICER1\", 0xE000E100 + 0x84)\n\n    @property\n   \
    \ def clrena(self) -> Field:\n        \"\"\"\n        CLRENA\n\n        CLRENA\n\
    \        \"\"\"\n        return self._clrena\n\n    @clrena.setter\n    def clrena(self,\
    \ value: int) -> None:\n        self._clrena.value = value\n\n\nclass Ispr0Register(Register):\n\
    \    \"\"\"\n    ISPR0\n\n    Interrupt Set-Pending Register\n    \"\"\"\n\n \
    \   def __init__(self):\n        self._setpend = Field(\"setpend\", 0, 32)\n \
    \       super().__init__(\"ISPR0\", 0xE000E100 + 0x100)\n\n    @property\n   \
    \ def setpend(self) -> Field:\n        \"\"\"\n        SETPEND\n\n        SETPEND\n\
    \        \"\"\"\n        return self._setpend\n\n    @setpend.setter\n    def\
    \ setpend(self, value: int) -> None:\n        self._setpend.value = value\n\n\n\
    class Ispr1Register(Register):\n    \"\"\"\n    ISPR1\n\n    Interrupt Set-Pending\
    \ Register\n    \"\"\"\n\n    def __init__(self):\n        self._setpend = Field(\"\
    setpend\", 0, 32)\n        super().__init__(\"ISPR1\", 0xE000E100 + 0x104)\n\n\
    \    @property\n    def setpend(self) -> Field:\n        \"\"\"\n        SETPEND\n\
    \n        SETPEND\n        \"\"\"\n        return self._setpend\n\n    @setpend.setter\n\
    \    def setpend(self, value: int) -> None:\n        self._setpend.value = value\n\
    \n\nclass Icpr0Register(Register):\n    \"\"\"\n    ICPR0\n\n    Interrupt Clear-Pending\n\
    \              Register\n    \"\"\"\n\n    def __init__(self):\n        self._clrpend\
    \ = Field(\"clrpend\", 0, 32)\n        super().__init__(\"ICPR0\", 0xE000E100\
    \ + 0x180)\n\n    @property\n    def clrpend(self) -> Field:\n        \"\"\"\n\
    \        CLRPEND\n\n        CLRPEND\n        \"\"\"\n        return self._clrpend\n\
    \n    @clrpend.setter\n    def clrpend(self, value: int) -> None:\n        self._clrpend.value\
    \ = value\n\n\nclass Icpr1Register(Register):\n    \"\"\"\n    ICPR1\n\n    Interrupt\
    \ Clear-Pending\n              Register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._clrpend = Field(\"clrpend\", 0, 32)\n        super().__init__(\"\
    ICPR1\", 0xE000E100 + 0x184)\n\n    @property\n    def clrpend(self) -> Field:\n\
    \        \"\"\"\n        CLRPEND\n\n        CLRPEND\n        \"\"\"\n        return\
    \ self._clrpend\n\n    @clrpend.setter\n    def clrpend(self, value: int) -> None:\n\
    \        self._clrpend.value = value\n\n\nclass Iabr0Register(Register):\n   \
    \ \"\"\"\n    IABR0\n\n    Interrupt Active Bit Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._active = Field(\"active\", 0, 32)\n        super().__init__(\"\
    IABR0\", 0xE000E100 + 0x200)\n\n    @property\n    def active(self) -> Field:\n\
    \        \"\"\"\n        ACTIVE\n\n        ACTIVE\n        \"\"\"\n        return\
    \ self._active\n\n    @active.setter\n    def active(self, value: int) -> None:\n\
    \        self._active.value = value\n\n\nclass Iabr1Register(Register):\n    \"\
    \"\"\n    IABR1\n\n    Interrupt Active Bit Register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._active = Field(\"active\", 0, 32)\n        super().__init__(\"\
    IABR1\", 0xE000E100 + 0x204)\n\n    @property\n    def active(self) -> Field:\n\
    \        \"\"\"\n        ACTIVE\n\n        ACTIVE\n        \"\"\"\n        return\
    \ self._active\n\n    @active.setter\n    def active(self, value: int) -> None:\n\
    \        self._active.value = value\n\n\nclass Ipr0Register(Register):\n    \"\
    \"\"\n    IPR0\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1 = Field(\"\
    ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n        self._ipr_n3\
    \ = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"IPR0\", 0xE000E100 +\
    \ 0x300)\n\n    @property\n    def ipr_n0(self) -> Field:\n        \"\"\"\n  \
    \      IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return self._ipr_n0\n\
    \n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n        self._ipr_n0.value\
    \ = value\n\n    @property\n    def ipr_n1(self) -> Field:\n        \"\"\"\n \
    \       IPR_N1\n\n        IPR_N1\n        \"\"\"\n        return self._ipr_n1\n\
    \n    @ipr_n1.setter\n    def ipr_n1(self, value: int) -> None:\n        self._ipr_n1.value\
    \ = value\n\n    @property\n    def ipr_n2(self) -> Field:\n        \"\"\"\n \
    \       IPR_N2\n\n        IPR_N2\n        \"\"\"\n        return self._ipr_n2\n\
    \n    @ipr_n2.setter\n    def ipr_n2(self, value: int) -> None:\n        self._ipr_n2.value\
    \ = value\n\n    @property\n    def ipr_n3(self) -> Field:\n        \"\"\"\n \
    \       IPR_N3\n\n        IPR_N3\n        \"\"\"\n        return self._ipr_n3\n\
    \n    @ipr_n3.setter\n    def ipr_n3(self, value: int) -> None:\n        self._ipr_n3.value\
    \ = value\n\n\nclass Ipr1Register(Register):\n    \"\"\"\n    IPR1\n\n    Interrupt\
    \ Priority Register\n    \"\"\"\n\n    def __init__(self):\n        self._ipr_n0\
    \ = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1 = Field(\"ipr_n1\", 8, 8)\n\
    \        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n        self._ipr_n3 = Field(\"\
    ipr_n3\", 24, 8)\n        super().__init__(\"IPR1\", 0xE000E100 + 0x304)\n\n \
    \   @property\n    def ipr_n0(self) -> Field:\n        \"\"\"\n        IPR_N0\n\
    \n        IPR_N0\n        \"\"\"\n        return self._ipr_n0\n\n    @ipr_n0.setter\n\
    \    def ipr_n0(self, value: int) -> None:\n        self._ipr_n0.value = value\n\
    \n    @property\n    def ipr_n1(self) -> Field:\n        \"\"\"\n        IPR_N1\n\
    \n        IPR_N1\n        \"\"\"\n        return self._ipr_n1\n\n    @ipr_n1.setter\n\
    \    def ipr_n1(self, value: int) -> None:\n        self._ipr_n1.value = value\n\
    \n    @property\n    def ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\
    \n        IPR_N2\n        \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n\
    \    def ipr_n2(self, value: int) -> None:\n        self._ipr_n2.value = value\n\
    \n    @property\n    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\
    \n        IPR_N3\n        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n\
    \    def ipr_n3(self, value: int) -> None:\n        self._ipr_n3.value = value\n\
    \n\nclass Ipr2Register(Register):\n    \"\"\"\n    IPR2\n\n    Interrupt Priority\
    \ Register\n    \"\"\"\n\n    def __init__(self):\n        self._ipr_n0 = Field(\"\
    ipr_n0\", 0, 8)\n        self._ipr_n1 = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2\
    \ = Field(\"ipr_n2\", 16, 8)\n        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n\
    \        super().__init__(\"IPR2\", 0xE000E100 + 0x308)\n\n    @property\n   \
    \ def ipr_n0(self) -> Field:\n        \"\"\"\n        IPR_N0\n\n        IPR_N0\n\
    \        \"\"\"\n        return self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self,\
    \ value: int) -> None:\n        self._ipr_n0.value = value\n\n    @property\n\
    \    def ipr_n1(self) -> Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n\
    \        \"\"\"\n        return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self,\
    \ value: int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n\
    \    def ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n\
    \        \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr3Register(Register):\n\
    \    \"\"\"\n    IPR3\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR3\", 0xE000E100 + 0x30C)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr4Register(Register):\n\
    \    \"\"\"\n    IPR4\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR4\", 0xE000E100 + 0x310)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr5Register(Register):\n\
    \    \"\"\"\n    IPR5\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR5\", 0xE000E100 + 0x314)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr6Register(Register):\n\
    \    \"\"\"\n    IPR6\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR6\", 0xE000E100 + 0x318)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr7Register(Register):\n\
    \    \"\"\"\n    IPR7\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR7\", 0xE000E100 + 0x31C)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr8Register(Register):\n\
    \    \"\"\"\n    IPR8\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR8\", 0xE000E100 + 0x320)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr9Register(Register):\n\
    \    \"\"\"\n    IPR9\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR9\", 0xE000E100 + 0x324)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr10Register(Register):\n\
    \    \"\"\"\n    IPR10\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR10\", 0xE000E100 + 0x328)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr11Register(Register):\n\
    \    \"\"\"\n    IPR11\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR11\", 0xE000E100 + 0x32C)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr12Register(Register):\n\
    \    \"\"\"\n    IPR12\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR12\", 0xE000E100 + 0x330)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr13Register(Register):\n\
    \    \"\"\"\n    IPR13\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR13\", 0xE000E100 + 0x334)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr14Register(Register):\n\
    \    \"\"\"\n    IPR14\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR14\", 0xE000E100 + 0x338)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr15Register(Register):\n\
    \    \"\"\"\n    IPR15\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR15\", 0xE000E100 + 0x33C)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr16Register(Register):\n\
    \    \"\"\"\n    IPR16\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR16\", 0xE000E100 + 0x340)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr17Register(Register):\n\
    \    \"\"\"\n    IPR17\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR17\", 0xE000E100 + 0x344)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr18Register(Register):\n\
    \    \"\"\"\n    IPR18\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR18\", 0xE000E100 + 0x348)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr19Register(Register):\n\
    \    \"\"\"\n    IPR19\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._ipr_n0 = Field(\"ipr_n0\", 0, 8)\n        self._ipr_n1\
    \ = Field(\"ipr_n1\", 8, 8)\n        self._ipr_n2 = Field(\"ipr_n2\", 16, 8)\n\
    \        self._ipr_n3 = Field(\"ipr_n3\", 24, 8)\n        super().__init__(\"\
    IPR19\", 0xE000E100 + 0x34C)\n\n    @property\n    def ipr_n0(self) -> Field:\n\
    \        \"\"\"\n        IPR_N0\n\n        IPR_N0\n        \"\"\"\n        return\
    \ self._ipr_n0\n\n    @ipr_n0.setter\n    def ipr_n0(self, value: int) -> None:\n\
    \        self._ipr_n0.value = value\n\n    @property\n    def ipr_n1(self) ->\
    \ Field:\n        \"\"\"\n        IPR_N1\n\n        IPR_N1\n        \"\"\"\n \
    \       return self._ipr_n1\n\n    @ipr_n1.setter\n    def ipr_n1(self, value:\
    \ int) -> None:\n        self._ipr_n1.value = value\n\n    @property\n    def\
    \ ipr_n2(self) -> Field:\n        \"\"\"\n        IPR_N2\n\n        IPR_N2\n \
    \       \"\"\"\n        return self._ipr_n2\n\n    @ipr_n2.setter\n    def ipr_n2(self,\
    \ value: int) -> None:\n        self._ipr_n2.value = value\n\n    @property\n\
    \    def ipr_n3(self) -> Field:\n        \"\"\"\n        IPR_N3\n\n        IPR_N3\n\
    \        \"\"\"\n        return self._ipr_n3\n\n    @ipr_n3.setter\n    def ipr_n3(self,\
    \ value: int) -> None:\n        self._ipr_n3.value = value\n\n\nclass Ipr20Register(Register):\n\
    \    \"\"\"\n    IPR20\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        super().__init__(\"IPR20\", 0xE000E100 + 0x350)\n\n\
    \nclass Ipr21Register(Register):\n    \"\"\"\n    IPR21\n\n    Interrupt Priority\
    \ Register\n    \"\"\"\n\n    def __init__(self):\n        super().__init__(\"\
    IPR21\", 0xE000E100 + 0x354)\n\n\nclass Ipr22Register(Register):\n    \"\"\"\n\
    \    IPR22\n\n    Interrupt Priority Register\n    \"\"\"\n\n    def __init__(self):\n\
    \        super().__init__(\"IPR22\", 0xE000E100 + 0x358)\n\n\nclass Nvic(Peripheral):\n\
    \    \"\"\"\n    NVIC\n\n    Nested Vectored Interrupt\n          Controller\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._iser0 = Iser0Register()\n\
    \        self._iser1 = Iser1Register()\n        self._icer0 = Icer0Register()\n\
    \        self._icer1 = Icer1Register()\n        self._ispr0 = Ispr0Register()\n\
    \        self._ispr1 = Ispr1Register()\n        self._icpr0 = Icpr0Register()\n\
    \        self._icpr1 = Icpr1Register()\n        self._iabr0 = Iabr0Register()\n\
    \        self._iabr1 = Iabr1Register()\n        self._ipr0 = Ipr0Register()\n\
    \        self._ipr1 = Ipr1Register()\n        self._ipr2 = Ipr2Register()\n  \
    \      self._ipr3 = Ipr3Register()\n        self._ipr4 = Ipr4Register()\n    \
    \    self._ipr5 = Ipr5Register()\n        self._ipr6 = Ipr6Register()\n      \
    \  self._ipr7 = Ipr7Register()\n        self._ipr8 = Ipr8Register()\n        self._ipr9\
    \ = Ipr9Register()\n        self._ipr10 = Ipr10Register()\n        self._ipr11\
    \ = Ipr11Register()\n        self._ipr12 = Ipr12Register()\n        self._ipr13\
    \ = Ipr13Register()\n        self._ipr14 = Ipr14Register()\n        self._ipr15\
    \ = Ipr15Register()\n        self._ipr16 = Ipr16Register()\n        self._ipr17\
    \ = Ipr17Register()\n        self._ipr18 = Ipr18Register()\n        self._ipr19\
    \ = Ipr19Register()\n        self._ipr20 = Ipr20Register()\n        self._ipr21\
    \ = Ipr21Register()\n        self._ipr22 = Ipr22Register()\n        super().__init__(\"\
    nvic\", 0xE000E100)\n\n    @property\n    def iser0(self) -> Iser0Register:\n\
    \        return self._iser0\n\n    @iser0.setter\n    def iser0(self, value: int)\
    \ -> None:\n        self._iser0.value = value\n\n    @property\n    def iser1(self)\
    \ -> Iser1Register:\n        return self._iser1\n\n    @iser1.setter\n    def\
    \ iser1(self, value: int) -> None:\n        self._iser1.value = value\n\n    @property\n\
    \    def icer0(self) -> Icer0Register:\n        return self._icer0\n\n    @icer0.setter\n\
    \    def icer0(self, value: int) -> None:\n        self._icer0.value = value\n\
    \n    @property\n    def icer1(self) -> Icer1Register:\n        return self._icer1\n\
    \n    @icer1.setter\n    def icer1(self, value: int) -> None:\n        self._icer1.value\
    \ = value\n\n    @property\n    def ispr0(self) -> Ispr0Register:\n        return\
    \ self._ispr0\n\n    @ispr0.setter\n    def ispr0(self, value: int) -> None:\n\
    \        self._ispr0.value = value\n\n    @property\n    def ispr1(self) -> Ispr1Register:\n\
    \        return self._ispr1\n\n    @ispr1.setter\n    def ispr1(self, value: int)\
    \ -> None:\n        self._ispr1.value = value\n\n    @property\n    def icpr0(self)\
    \ -> Icpr0Register:\n        return self._icpr0\n\n    @icpr0.setter\n    def\
    \ icpr0(self, value: int) -> None:\n        self._icpr0.value = value\n\n    @property\n\
    \    def icpr1(self) -> Icpr1Register:\n        return self._icpr1\n\n    @icpr1.setter\n\
    \    def icpr1(self, value: int) -> None:\n        self._icpr1.value = value\n\
    \n    @property\n    def iabr0(self) -> Iabr0Register:\n        return self._iabr0\n\
    \n    @iabr0.setter\n    def iabr0(self, value: int) -> None:\n        self._iabr0.value\
    \ = value\n\n    @property\n    def iabr1(self) -> Iabr1Register:\n        return\
    \ self._iabr1\n\n    @iabr1.setter\n    def iabr1(self, value: int) -> None:\n\
    \        self._iabr1.value = value\n\n    @property\n    def ipr0(self) -> Ipr0Register:\n\
    \        return self._ipr0\n\n    @ipr0.setter\n    def ipr0(self, value: int)\
    \ -> None:\n        self._ipr0.value = value\n\n    @property\n    def ipr1(self)\
    \ -> Ipr1Register:\n        return self._ipr1\n\n    @ipr1.setter\n    def ipr1(self,\
    \ value: int) -> None:\n        self._ipr1.value = value\n\n    @property\n  \
    \  def ipr2(self) -> Ipr2Register:\n        return self._ipr2\n\n    @ipr2.setter\n\
    \    def ipr2(self, value: int) -> None:\n        self._ipr2.value = value\n\n\
    \    @property\n    def ipr3(self) -> Ipr3Register:\n        return self._ipr3\n\
    \n    @ipr3.setter\n    def ipr3(self, value: int) -> None:\n        self._ipr3.value\
    \ = value\n\n    @property\n    def ipr4(self) -> Ipr4Register:\n        return\
    \ self._ipr4\n\n    @ipr4.setter\n    def ipr4(self, value: int) -> None:\n  \
    \      self._ipr4.value = value\n\n    @property\n    def ipr5(self) -> Ipr5Register:\n\
    \        return self._ipr5\n\n    @ipr5.setter\n    def ipr5(self, value: int)\
    \ -> None:\n        self._ipr5.value = value\n\n    @property\n    def ipr6(self)\
    \ -> Ipr6Register:\n        return self._ipr6\n\n    @ipr6.setter\n    def ipr6(self,\
    \ value: int) -> None:\n        self._ipr6.value = value\n\n    @property\n  \
    \  def ipr7(self) -> Ipr7Register:\n        return self._ipr7\n\n    @ipr7.setter\n\
    \    def ipr7(self, value: int) -> None:\n        self._ipr7.value = value\n\n\
    \    @property\n    def ipr8(self) -> Ipr8Register:\n        return self._ipr8\n\
    \n    @ipr8.setter\n    def ipr8(self, value: int) -> None:\n        self._ipr8.value\
    \ = value\n\n    @property\n    def ipr9(self) -> Ipr9Register:\n        return\
    \ self._ipr9\n\n    @ipr9.setter\n    def ipr9(self, value: int) -> None:\n  \
    \      self._ipr9.value = value\n\n    @property\n    def ipr10(self) -> Ipr10Register:\n\
    \        return self._ipr10\n\n    @ipr10.setter\n    def ipr10(self, value: int)\
    \ -> None:\n        self._ipr10.value = value\n\n    @property\n    def ipr11(self)\
    \ -> Ipr11Register:\n        return self._ipr11\n\n    @ipr11.setter\n    def\
    \ ipr11(self, value: int) -> None:\n        self._ipr11.value = value\n\n    @property\n\
    \    def ipr12(self) -> Ipr12Register:\n        return self._ipr12\n\n    @ipr12.setter\n\
    \    def ipr12(self, value: int) -> None:\n        self._ipr12.value = value\n\
    \n    @property\n    def ipr13(self) -> Ipr13Register:\n        return self._ipr13\n\
    \n    @ipr13.setter\n    def ipr13(self, value: int) -> None:\n        self._ipr13.value\
    \ = value\n\n    @property\n    def ipr14(self) -> Ipr14Register:\n        return\
    \ self._ipr14\n\n    @ipr14.setter\n    def ipr14(self, value: int) -> None:\n\
    \        self._ipr14.value = value\n\n    @property\n    def ipr15(self) -> Ipr15Register:\n\
    \        return self._ipr15\n\n    @ipr15.setter\n    def ipr15(self, value: int)\
    \ -> None:\n        self._ipr15.value = value\n\n    @property\n    def ipr16(self)\
    \ -> Ipr16Register:\n        return self._ipr16\n\n    @ipr16.setter\n    def\
    \ ipr16(self, value: int) -> None:\n        self._ipr16.value = value\n\n    @property\n\
    \    def ipr17(self) -> Ipr17Register:\n        return self._ipr17\n\n    @ipr17.setter\n\
    \    def ipr17(self, value: int) -> None:\n        self._ipr17.value = value\n\
    \n    @property\n    def ipr18(self) -> Ipr18Register:\n        return self._ipr18\n\
    \n    @ipr18.setter\n    def ipr18(self, value: int) -> None:\n        self._ipr18.value\
    \ = value\n\n    @property\n    def ipr19(self) -> Ipr19Register:\n        return\
    \ self._ipr19\n\n    @ipr19.setter\n    def ipr19(self, value: int) -> None:\n\
    \        self._ipr19.value = value\n\n    @property\n    def ipr20(self) -> Ipr20Register:\n\
    \        return self._ipr20\n\n    @ipr20.setter\n    def ipr20(self, value: int)\
    \ -> None:\n        self._ipr20.value = value\n\n    @property\n    def ipr21(self)\
    \ -> Ipr21Register:\n        return self._ipr21\n\n    @ipr21.setter\n    def\
    \ ipr21(self, value: int) -> None:\n        self._ipr21.value = value\n\n    @property\n\
    \    def ipr22(self) -> Ipr22Register:\n        return self._ipr22\n\n    @ipr22.setter\n\
    \    def ipr22(self, value: int) -> None:\n        self._ipr22.value = value\n"
  name: NVIC
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass FpccrRegister(Register):\n    \"\"\"\n    FPCCR\n\n    Floating-point\
    \ context control\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._lspact = Field(\"lspact\", 0, 1)\n        self._user = Field(\"\
    user\", 1, 1)\n        self._thread = Field(\"thread\", 3, 1)\n        self._hfrdy\
    \ = Field(\"hfrdy\", 4, 1)\n        self._mmrdy = Field(\"mmrdy\", 5, 1)\n   \
    \     self._bfrdy = Field(\"bfrdy\", 6, 1)\n        self._monrdy = Field(\"monrdy\"\
    , 8, 1)\n        self._lspen = Field(\"lspen\", 30, 1)\n        self._aspen =\
    \ Field(\"aspen\", 31, 1)\n        super().__init__(\"FPCCR\", 0xE000EF34 + 0x0)\n\
    \n    @property\n    def lspact(self) -> Field:\n        \"\"\"\n        LSPACT\n\
    \n        LSPACT\n        \"\"\"\n        return self._lspact\n\n    @lspact.setter\n\
    \    def lspact(self, value: int) -> None:\n        self._lspact.value = value\n\
    \n    @property\n    def user(self) -> Field:\n        \"\"\"\n        USER\n\n\
    \        USER\n        \"\"\"\n        return self._user\n\n    @user.setter\n\
    \    def user(self, value: int) -> None:\n        self._user.value = value\n\n\
    \    @property\n    def thread(self) -> Field:\n        \"\"\"\n        THREAD\n\
    \n        THREAD\n        \"\"\"\n        return self._thread\n\n    @thread.setter\n\
    \    def thread(self, value: int) -> None:\n        self._thread.value = value\n\
    \n    @property\n    def hfrdy(self) -> Field:\n        \"\"\"\n        HFRDY\n\
    \n        HFRDY\n        \"\"\"\n        return self._hfrdy\n\n    @hfrdy.setter\n\
    \    def hfrdy(self, value: int) -> None:\n        self._hfrdy.value = value\n\
    \n    @property\n    def mmrdy(self) -> Field:\n        \"\"\"\n        MMRDY\n\
    \n        MMRDY\n        \"\"\"\n        return self._mmrdy\n\n    @mmrdy.setter\n\
    \    def mmrdy(self, value: int) -> None:\n        self._mmrdy.value = value\n\
    \n    @property\n    def bfrdy(self) -> Field:\n        \"\"\"\n        BFRDY\n\
    \n        BFRDY\n        \"\"\"\n        return self._bfrdy\n\n    @bfrdy.setter\n\
    \    def bfrdy(self, value: int) -> None:\n        self._bfrdy.value = value\n\
    \n    @property\n    def monrdy(self) -> Field:\n        \"\"\"\n        MONRDY\n\
    \n        MONRDY\n        \"\"\"\n        return self._monrdy\n\n    @monrdy.setter\n\
    \    def monrdy(self, value: int) -> None:\n        self._monrdy.value = value\n\
    \n    @property\n    def lspen(self) -> Field:\n        \"\"\"\n        LSPEN\n\
    \n        LSPEN\n        \"\"\"\n        return self._lspen\n\n    @lspen.setter\n\
    \    def lspen(self, value: int) -> None:\n        self._lspen.value = value\n\
    \n    @property\n    def aspen(self) -> Field:\n        \"\"\"\n        ASPEN\n\
    \n        ASPEN\n        \"\"\"\n        return self._aspen\n\n    @aspen.setter\n\
    \    def aspen(self, value: int) -> None:\n        self._aspen.value = value\n\
    \n\nclass FpcarRegister(Register):\n    \"\"\"\n    FPCAR\n\n    Floating-point\
    \ context address\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._address = Field(\"address\", 3, 29)\n        super().__init__(\"\
    FPCAR\", 0xE000EF34 + 0x4)\n\n    @property\n    def address(self) -> Field:\n\
    \        \"\"\"\n        ADDRESS\n\n        Location of unpopulated\n        \
    \          floating-point\n        \"\"\"\n        return self._address\n\n  \
    \  @address.setter\n    def address(self, value: int) -> None:\n        self._address.value\
    \ = value\n\n\nclass FpscrRegister(Register):\n    \"\"\"\n    FPSCR\n\n    Floating-point\
    \ status control\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._ioc = Field(\"ioc\", 0, 1)\n        self._dzc = Field(\"dzc\",\
    \ 1, 1)\n        self._ofc = Field(\"ofc\", 2, 1)\n        self._ufc = Field(\"\
    ufc\", 3, 1)\n        self._ixc = Field(\"ixc\", 4, 1)\n        self._idc = Field(\"\
    idc\", 7, 1)\n        self._rmode = Field(\"rmode\", 22, 2)\n        self._fz\
    \ = Field(\"fz\", 24, 1)\n        self._dn = Field(\"dn\", 25, 1)\n        self._ahp\
    \ = Field(\"ahp\", 26, 1)\n        self._v = Field(\"v\", 28, 1)\n        self._c\
    \ = Field(\"c\", 29, 1)\n        self._z = Field(\"z\", 30, 1)\n        self._n\
    \ = Field(\"n\", 31, 1)\n        super().__init__(\"FPSCR\", 0xE000EF34 + 0x8)\n\
    \n    @property\n    def ioc(self) -> Field:\n        \"\"\"\n        IOC\n\n\
    \        Invalid operation cumulative exception\n                  bit\n     \
    \   \"\"\"\n        return self._ioc\n\n    @ioc.setter\n    def ioc(self, value:\
    \ int) -> None:\n        self._ioc.value = value\n\n    @property\n    def dzc(self)\
    \ -> Field:\n        \"\"\"\n        DZC\n\n        Division by zero cumulative\
    \ exception\n                  bit.\n        \"\"\"\n        return self._dzc\n\
    \n    @dzc.setter\n    def dzc(self, value: int) -> None:\n        self._dzc.value\
    \ = value\n\n    @property\n    def ofc(self) -> Field:\n        \"\"\"\n    \
    \    OFC\n\n        Overflow cumulative exception\n                  bit\n   \
    \     \"\"\"\n        return self._ofc\n\n    @ofc.setter\n    def ofc(self, value:\
    \ int) -> None:\n        self._ofc.value = value\n\n    @property\n    def ufc(self)\
    \ -> Field:\n        \"\"\"\n        UFC\n\n        Underflow cumulative exception\n\
    \                  bit\n        \"\"\"\n        return self._ufc\n\n    @ufc.setter\n\
    \    def ufc(self, value: int) -> None:\n        self._ufc.value = value\n\n \
    \   @property\n    def ixc(self) -> Field:\n        \"\"\"\n        IXC\n\n  \
    \      Inexact cumulative exception\n                  bit\n        \"\"\"\n \
    \       return self._ixc\n\n    @ixc.setter\n    def ixc(self, value: int) ->\
    \ None:\n        self._ixc.value = value\n\n    @property\n    def idc(self) ->\
    \ Field:\n        \"\"\"\n        IDC\n\n        Input denormal cumulative exception\n\
    \                  bit.\n        \"\"\"\n        return self._idc\n\n    @idc.setter\n\
    \    def idc(self, value: int) -> None:\n        self._idc.value = value\n\n \
    \   @property\n    def rmode(self) -> Field:\n        \"\"\"\n        RMODE\n\n\
    \        Rounding Mode control\n                  field\n        \"\"\"\n    \
    \    return self._rmode\n\n    @rmode.setter\n    def rmode(self, value: int)\
    \ -> None:\n        self._rmode.value = value\n\n    @property\n    def fz(self)\
    \ -> Field:\n        \"\"\"\n        FZ\n\n        Flush-to-zero mode control\n\
    \                  bit:\n        \"\"\"\n        return self._fz\n\n    @fz.setter\n\
    \    def fz(self, value: int) -> None:\n        self._fz.value = value\n\n   \
    \ @property\n    def dn(self) -> Field:\n        \"\"\"\n        DN\n\n      \
    \  Default NaN mode control\n                  bit\n        \"\"\"\n        return\
    \ self._dn\n\n    @dn.setter\n    def dn(self, value: int) -> None:\n        self._dn.value\
    \ = value\n\n    @property\n    def ahp(self) -> Field:\n        \"\"\"\n    \
    \    AHP\n\n        Alternative half-precision control\n                  bit\n\
    \        \"\"\"\n        return self._ahp\n\n    @ahp.setter\n    def ahp(self,\
    \ value: int) -> None:\n        self._ahp.value = value\n\n    @property\n   \
    \ def v(self) -> Field:\n        \"\"\"\n        V\n\n        Overflow condition\
    \ code\n                  flag\n        \"\"\"\n        return self._v\n\n   \
    \ @v.setter\n    def v(self, value: int) -> None:\n        self._v.value = value\n\
    \n    @property\n    def c(self) -> Field:\n        \"\"\"\n        C\n\n    \
    \    Carry condition code flag\n        \"\"\"\n        return self._c\n\n   \
    \ @c.setter\n    def c(self, value: int) -> None:\n        self._c.value = value\n\
    \n    @property\n    def z(self) -> Field:\n        \"\"\"\n        Z\n\n    \
    \    Zero condition code flag\n        \"\"\"\n        return self._z\n\n    @z.setter\n\
    \    def z(self, value: int) -> None:\n        self._z.value = value\n\n    @property\n\
    \    def n(self) -> Field:\n        \"\"\"\n        N\n\n        Negative condition\
    \ code\n                  flag\n        \"\"\"\n        return self._n\n\n   \
    \ @n.setter\n    def n(self, value: int) -> None:\n        self._n.value = value\n\
    \n\nclass Fpu(Peripheral):\n    \"\"\"\n    FPU\n\n    Floting point unit\n  \
    \  \"\"\"\n\n    def __init__(self):\n        self._fpccr = FpccrRegister()\n\
    \        self._fpcar = FpcarRegister()\n        self._fpscr = FpscrRegister()\n\
    \        super().__init__(\"fpu\", 0xE000EF34)\n\n    @property\n    def fpccr(self)\
    \ -> FpccrRegister:\n        return self._fpccr\n\n    @fpccr.setter\n    def\
    \ fpccr(self, value: int) -> None:\n        self._fpccr.value = value\n\n    @property\n\
    \    def fpcar(self) -> FpcarRegister:\n        return self._fpcar\n\n    @fpcar.setter\n\
    \    def fpcar(self, value: int) -> None:\n        self._fpcar.value = value\n\
    \n    @property\n    def fpscr(self) -> FpscrRegister:\n        return self._fpscr\n\
    \n    @fpscr.setter\n    def fpscr(self, value: int) -> None:\n        self._fpscr.value\
    \ = value\n"
  name: FPU
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass Mpu_typerRegister(Register):\n    \"\"\"\n    MPU_TYPER\n\
    \n    MPU type register\n    \"\"\"\n\n    def __init__(self):\n        self._separate\
    \ = Field(\"separate\", 0, 1)\n        self._dregion = Field(\"dregion\", 8, 8)\n\
    \        self._iregion = Field(\"iregion\", 16, 8)\n        super().__init__(\"\
    MPU_TYPER\", 0xE000ED90 + 0x0)\n\n    @property\n    def separate(self) -> Field:\n\
    \        \"\"\"\n        SEPARATE\n\n        Separate flag\n        \"\"\"\n \
    \       return self._separate\n\n    @separate.setter\n    def separate(self,\
    \ value: int) -> None:\n        self._separate.value = value\n\n    @property\n\
    \    def dregion(self) -> Field:\n        \"\"\"\n        DREGION\n\n        Number\
    \ of MPU data regions\n        \"\"\"\n        return self._dregion\n\n    @dregion.setter\n\
    \    def dregion(self, value: int) -> None:\n        self._dregion.value = value\n\
    \n    @property\n    def iregion(self) -> Field:\n        \"\"\"\n        IREGION\n\
    \n        Number of MPU instruction\n                  regions\n        \"\"\"\
    \n        return self._iregion\n\n    @iregion.setter\n    def iregion(self, value:\
    \ int) -> None:\n        self._iregion.value = value\n\n\nclass Mpu_ctrlRegister(Register):\n\
    \    \"\"\"\n    MPU_CTRL\n\n    MPU control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._enable = Field(\"enable\", 0, 1)\n        self._hfnmiena = Field(\"\
    hfnmiena\", 1, 1)\n        self._privdefena = Field(\"privdefena\", 2, 1)\n  \
    \      super().__init__(\"MPU_CTRL\", 0xE000ED90 + 0x4)\n\n    @property\n   \
    \ def enable(self) -> Field:\n        \"\"\"\n        ENABLE\n\n        Enables\
    \ the MPU\n        \"\"\"\n        return self._enable\n\n    @enable.setter\n\
    \    def enable(self, value: int) -> None:\n        self._enable.value = value\n\
    \n    @property\n    def hfnmiena(self) -> Field:\n        \"\"\"\n        HFNMIENA\n\
    \n        Enables the operation of MPU during hard\n                  fault\n\
    \        \"\"\"\n        return self._hfnmiena\n\n    @hfnmiena.setter\n    def\
    \ hfnmiena(self, value: int) -> None:\n        self._hfnmiena.value = value\n\n\
    \    @property\n    def privdefena(self) -> Field:\n        \"\"\"\n        PRIVDEFENA\n\
    \n        Enable priviliged software access to\n                  default memory\
    \ map\n        \"\"\"\n        return self._privdefena\n\n    @privdefena.setter\n\
    \    def privdefena(self, value: int) -> None:\n        self._privdefena.value\
    \ = value\n\n\nclass Mpu_rnrRegister(Register):\n    \"\"\"\n    MPU_RNR\n\n \
    \   MPU region number register\n    \"\"\"\n\n    def __init__(self):\n      \
    \  self._region = Field(\"region\", 0, 8)\n        super().__init__(\"MPU_RNR\"\
    , 0xE000ED90 + 0x8)\n\n    @property\n    def region(self) -> Field:\n       \
    \ \"\"\"\n        REGION\n\n        MPU region\n        \"\"\"\n        return\
    \ self._region\n\n    @region.setter\n    def region(self, value: int) -> None:\n\
    \        self._region.value = value\n\n\nclass Mpu_rbarRegister(Register):\n \
    \   \"\"\"\n    MPU_RBAR\n\n    MPU region base address\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._region = Field(\"region\"\
    , 0, 4)\n        self._valid = Field(\"valid\", 4, 1)\n        self._addr = Field(\"\
    addr\", 5, 27)\n        super().__init__(\"MPU_RBAR\", 0xE000ED90 + 0xC)\n\n \
    \   @property\n    def region(self) -> Field:\n        \"\"\"\n        REGION\n\
    \n        MPU region field\n        \"\"\"\n        return self._region\n\n  \
    \  @region.setter\n    def region(self, value: int) -> None:\n        self._region.value\
    \ = value\n\n    @property\n    def valid(self) -> Field:\n        \"\"\"\n  \
    \      VALID\n\n        MPU region number valid\n        \"\"\"\n        return\
    \ self._valid\n\n    @valid.setter\n    def valid(self, value: int) -> None:\n\
    \        self._valid.value = value\n\n    @property\n    def addr(self) -> Field:\n\
    \        \"\"\"\n        ADDR\n\n        Region base address field\n        \"\
    \"\"\n        return self._addr\n\n    @addr.setter\n    def addr(self, value:\
    \ int) -> None:\n        self._addr.value = value\n\n\nclass Mpu_rasrRegister(Register):\n\
    \    \"\"\"\n    MPU_RASR\n\n    MPU region attribute and size\n             \
    \ register\n    \"\"\"\n\n    def __init__(self):\n        self._enable = Field(\"\
    enable\", 0, 1)\n        self._size = Field(\"size\", 1, 5)\n        self._srd\
    \ = Field(\"srd\", 8, 8)\n        self._b = Field(\"b\", 16, 1)\n        self._c\
    \ = Field(\"c\", 17, 1)\n        self._s = Field(\"s\", 18, 1)\n        self._tex\
    \ = Field(\"tex\", 19, 3)\n        self._ap = Field(\"ap\", 24, 3)\n        self._xn\
    \ = Field(\"xn\", 28, 1)\n        super().__init__(\"MPU_RASR\", 0xE000ED90 +\
    \ 0x10)\n\n    @property\n    def enable(self) -> Field:\n        \"\"\"\n   \
    \     ENABLE\n\n        Region enable bit.\n        \"\"\"\n        return self._enable\n\
    \n    @enable.setter\n    def enable(self, value: int) -> None:\n        self._enable.value\
    \ = value\n\n    @property\n    def size(self) -> Field:\n        \"\"\"\n   \
    \     SIZE\n\n        Size of the MPU protection\n                  region\n \
    \       \"\"\"\n        return self._size\n\n    @size.setter\n    def size(self,\
    \ value: int) -> None:\n        self._size.value = value\n\n    @property\n  \
    \  def srd(self) -> Field:\n        \"\"\"\n        SRD\n\n        Subregion disable\
    \ bits\n        \"\"\"\n        return self._srd\n\n    @srd.setter\n    def srd(self,\
    \ value: int) -> None:\n        self._srd.value = value\n\n    @property\n   \
    \ def b(self) -> Field:\n        \"\"\"\n        B\n\n        memory attribute\n\
    \        \"\"\"\n        return self._b\n\n    @b.setter\n    def b(self, value:\
    \ int) -> None:\n        self._b.value = value\n\n    @property\n    def c(self)\
    \ -> Field:\n        \"\"\"\n        C\n\n        memory attribute\n        \"\
    \"\"\n        return self._c\n\n    @c.setter\n    def c(self, value: int) ->\
    \ None:\n        self._c.value = value\n\n    @property\n    def s(self) -> Field:\n\
    \        \"\"\"\n        S\n\n        Shareable memory attribute\n        \"\"\
    \"\n        return self._s\n\n    @s.setter\n    def s(self, value: int) -> None:\n\
    \        self._s.value = value\n\n    @property\n    def tex(self) -> Field:\n\
    \        \"\"\"\n        TEX\n\n        memory attribute\n        \"\"\"\n   \
    \     return self._tex\n\n    @tex.setter\n    def tex(self, value: int) -> None:\n\
    \        self._tex.value = value\n\n    @property\n    def ap(self) -> Field:\n\
    \        \"\"\"\n        AP\n\n        Access permission\n        \"\"\"\n   \
    \     return self._ap\n\n    @ap.setter\n    def ap(self, value: int) -> None:\n\
    \        self._ap.value = value\n\n    @property\n    def xn(self) -> Field:\n\
    \        \"\"\"\n        XN\n\n        Instruction access disable\n          \
    \        bit\n        \"\"\"\n        return self._xn\n\n    @xn.setter\n    def\
    \ xn(self, value: int) -> None:\n        self._xn.value = value\n\n\nclass Mpu(Peripheral):\n\
    \    \"\"\"\n    MPU\n\n    Memory protection unit\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._mpu_typer = Mpu_typerRegister()\n        self._mpu_ctrl = Mpu_ctrlRegister()\n\
    \        self._mpu_rnr = Mpu_rnrRegister()\n        self._mpu_rbar = Mpu_rbarRegister()\n\
    \        self._mpu_rasr = Mpu_rasrRegister()\n        super().__init__(\"mpu\"\
    , 0xE000ED90)\n\n    @property\n    def mpu_typer(self) -> Mpu_typerRegister:\n\
    \        return self._mpu_typer\n\n    @mpu_typer.setter\n    def mpu_typer(self,\
    \ value: int) -> None:\n        self._mpu_typer.value = value\n\n    @property\n\
    \    def mpu_ctrl(self) -> Mpu_ctrlRegister:\n        return self._mpu_ctrl\n\n\
    \    @mpu_ctrl.setter\n    def mpu_ctrl(self, value: int) -> None:\n        self._mpu_ctrl.value\
    \ = value\n\n    @property\n    def mpu_rnr(self) -> Mpu_rnrRegister:\n      \
    \  return self._mpu_rnr\n\n    @mpu_rnr.setter\n    def mpu_rnr(self, value: int)\
    \ -> None:\n        self._mpu_rnr.value = value\n\n    @property\n    def mpu_rbar(self)\
    \ -> Mpu_rbarRegister:\n        return self._mpu_rbar\n\n    @mpu_rbar.setter\n\
    \    def mpu_rbar(self, value: int) -> None:\n        self._mpu_rbar.value = value\n\
    \n    @property\n    def mpu_rasr(self) -> Mpu_rasrRegister:\n        return self._mpu_rasr\n\
    \n    @mpu_rasr.setter\n    def mpu_rasr(self, value: int) -> None:\n        self._mpu_rasr.value\
    \ = value\n"
  name: MPU
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CtrlRegister(Register):\n    \"\"\"\n    CTRL\n\n    SysTick\
    \ control and status\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._enable = Field(\"enable\", 0, 1)\n        self._tickint = Field(\"\
    tickint\", 1, 1)\n        self._clksource = Field(\"clksource\", 2, 1)\n     \
    \   self._countflag = Field(\"countflag\", 16, 1)\n        super().__init__(\"\
    CTRL\", 0xE000E010 + 0x0)\n\n    @property\n    def enable(self) -> Field:\n \
    \       \"\"\"\n        ENABLE\n\n        Counter enable\n        \"\"\"\n   \
    \     return self._enable\n\n    @enable.setter\n    def enable(self, value: int)\
    \ -> None:\n        self._enable.value = value\n\n    @property\n    def tickint(self)\
    \ -> Field:\n        \"\"\"\n        TICKINT\n\n        SysTick exception request\n\
    \                  enable\n        \"\"\"\n        return self._tickint\n\n  \
    \  @tickint.setter\n    def tickint(self, value: int) -> None:\n        self._tickint.value\
    \ = value\n\n    @property\n    def clksource(self) -> Field:\n        \"\"\"\n\
    \        CLKSOURCE\n\n        Clock source selection\n        \"\"\"\n       \
    \ return self._clksource\n\n    @clksource.setter\n    def clksource(self, value:\
    \ int) -> None:\n        self._clksource.value = value\n\n    @property\n    def\
    \ countflag(self) -> Field:\n        \"\"\"\n        COUNTFLAG\n\n        COUNTFLAG\n\
    \        \"\"\"\n        return self._countflag\n\n    @countflag.setter\n   \
    \ def countflag(self, value: int) -> None:\n        self._countflag.value = value\n\
    \n\nclass LoadRegister(Register):\n    \"\"\"\n    LOAD\n\n    SysTick reload\
    \ value register\n    \"\"\"\n\n    def __init__(self):\n        self._reload\
    \ = Field(\"reload\", 0, 24)\n        super().__init__(\"LOAD\", 0xE000E010 +\
    \ 0x4)\n\n    @property\n    def reload(self) -> Field:\n        \"\"\"\n    \
    \    RELOAD\n\n        RELOAD value\n        \"\"\"\n        return self._reload\n\
    \n    @reload.setter\n    def reload(self, value: int) -> None:\n        self._reload.value\
    \ = value\n\n\nclass ValRegister(Register):\n    \"\"\"\n    VAL\n\n    SysTick\
    \ current value register\n    \"\"\"\n\n    def __init__(self):\n        self._current\
    \ = Field(\"current\", 0, 24)\n        super().__init__(\"VAL\", 0xE000E010 +\
    \ 0x8)\n\n    @property\n    def current(self) -> Field:\n        \"\"\"\n   \
    \     CURRENT\n\n        Current counter value\n        \"\"\"\n        return\
    \ self._current\n\n    @current.setter\n    def current(self, value: int) -> None:\n\
    \        self._current.value = value\n\n\nclass CalibRegister(Register):\n   \
    \ \"\"\"\n    CALIB\n\n    SysTick calibration value\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._tenms = Field(\"tenms\"\
    , 0, 24)\n        self._skew = Field(\"skew\", 30, 1)\n        self._noref = Field(\"\
    noref\", 31, 1)\n        super().__init__(\"CALIB\", 0xE000E010 + 0xC)\n\n   \
    \ @property\n    def tenms(self) -> Field:\n        \"\"\"\n        TENMS\n\n\
    \        Calibration value\n        \"\"\"\n        return self._tenms\n\n   \
    \ @tenms.setter\n    def tenms(self, value: int) -> None:\n        self._tenms.value\
    \ = value\n\n    @property\n    def skew(self) -> Field:\n        \"\"\"\n   \
    \     SKEW\n\n        SKEW flag: Indicates whether the TENMS\n               \
    \   value is exact\n        \"\"\"\n        return self._skew\n\n    @skew.setter\n\
    \    def skew(self, value: int) -> None:\n        self._skew.value = value\n\n\
    \    @property\n    def noref(self) -> Field:\n        \"\"\"\n        NOREF\n\
    \n        NOREF flag. Reads as zero\n        \"\"\"\n        return self._noref\n\
    \n    @noref.setter\n    def noref(self, value: int) -> None:\n        self._noref.value\
    \ = value\n\n\nclass Stk(Peripheral):\n    \"\"\"\n    STK\n\n    SysTick timer\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._ctrl = CtrlRegister()\n\
    \        self._load = LoadRegister()\n        self._val = ValRegister()\n    \
    \    self._calib = CalibRegister()\n        super().__init__(\"stk\", 0xE000E010)\n\
    \n    @property\n    def ctrl(self) -> CtrlRegister:\n        return self._ctrl\n\
    \n    @ctrl.setter\n    def ctrl(self, value: int) -> None:\n        self._ctrl.value\
    \ = value\n\n    @property\n    def load(self) -> LoadRegister:\n        return\
    \ self._load\n\n    @load.setter\n    def load(self, value: int) -> None:\n  \
    \      self._load.value = value\n\n    @property\n    def val(self) -> ValRegister:\n\
    \        return self._val\n\n    @val.setter\n    def val(self, value: int) ->\
    \ None:\n        self._val.value = value\n\n    @property\n    def calib(self)\
    \ -> CalibRegister:\n        return self._calib\n\n    @calib.setter\n    def\
    \ calib(self, value: int) -> None:\n        self._calib.value = value\n"
  name: STK
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CpuidRegister(Register):\n    \"\"\"\n    CPUID\n\n    CPUID\
    \ base register\n    \"\"\"\n\n    def __init__(self):\n        self._revision\
    \ = Field(\"revision\", 0, 4)\n        self._partno = Field(\"partno\", 4, 12)\n\
    \        self._constant = Field(\"constant\", 16, 4)\n        self._variant =\
    \ Field(\"variant\", 20, 4)\n        self._implementer = Field(\"implementer\"\
    , 24, 8)\n        super().__init__(\"CPUID\", 0xE000ED00 + 0x0)\n\n    @property\n\
    \    def revision(self) -> Field:\n        \"\"\"\n        REVISION\n\n      \
    \  Revision number\n        \"\"\"\n        return self._revision\n\n    @revision.setter\n\
    \    def revision(self, value: int) -> None:\n        self._revision.value = value\n\
    \n    @property\n    def partno(self) -> Field:\n        \"\"\"\n        PARTNO\n\
    \n        Part number of the\n                  processor\n        \"\"\"\n  \
    \      return self._partno\n\n    @partno.setter\n    def partno(self, value:\
    \ int) -> None:\n        self._partno.value = value\n\n    @property\n    def\
    \ constant(self) -> Field:\n        \"\"\"\n        CONSTANT\n\n        Reads\
    \ as 0xF\n        \"\"\"\n        return self._constant\n\n    @constant.setter\n\
    \    def constant(self, value: int) -> None:\n        self._constant.value = value\n\
    \n    @property\n    def variant(self) -> Field:\n        \"\"\"\n        VARIANT\n\
    \n        Variant number\n        \"\"\"\n        return self._variant\n\n   \
    \ @variant.setter\n    def variant(self, value: int) -> None:\n        self._variant.value\
    \ = value\n\n    @property\n    def implementer(self) -> Field:\n        \"\"\"\
    \n        IMPLEMENTER\n\n        Implementer code\n        \"\"\"\n        return\
    \ self._implementer\n\n    @implementer.setter\n    def implementer(self, value:\
    \ int) -> None:\n        self._implementer.value = value\n\n\nclass IcsrRegister(Register):\n\
    \    \"\"\"\n    ICSR\n\n    Interrupt control and state\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._vectactive = Field(\"vectactive\"\
    , 0, 9)\n        self._rettobase = Field(\"rettobase\", 11, 1)\n        self._vectpending\
    \ = Field(\"vectpending\", 12, 7)\n        self._isrpending = Field(\"isrpending\"\
    , 22, 1)\n        self._pendstclr = Field(\"pendstclr\", 25, 1)\n        self._pendstset\
    \ = Field(\"pendstset\", 26, 1)\n        self._pendsvclr = Field(\"pendsvclr\"\
    , 27, 1)\n        self._pendsvset = Field(\"pendsvset\", 28, 1)\n        self._nmipendset\
    \ = Field(\"nmipendset\", 31, 1)\n        super().__init__(\"ICSR\", 0xE000ED00\
    \ + 0x4)\n\n    @property\n    def vectactive(self) -> Field:\n        \"\"\"\n\
    \        VECTACTIVE\n\n        Active vector\n        \"\"\"\n        return self._vectactive\n\
    \n    @vectactive.setter\n    def vectactive(self, value: int) -> None:\n    \
    \    self._vectactive.value = value\n\n    @property\n    def rettobase(self)\
    \ -> Field:\n        \"\"\"\n        RETTOBASE\n\n        Return to base level\n\
    \        \"\"\"\n        return self._rettobase\n\n    @rettobase.setter\n   \
    \ def rettobase(self, value: int) -> None:\n        self._rettobase.value = value\n\
    \n    @property\n    def vectpending(self) -> Field:\n        \"\"\"\n       \
    \ VECTPENDING\n\n        Pending vector\n        \"\"\"\n        return self._vectpending\n\
    \n    @vectpending.setter\n    def vectpending(self, value: int) -> None:\n  \
    \      self._vectpending.value = value\n\n    @property\n    def isrpending(self)\
    \ -> Field:\n        \"\"\"\n        ISRPENDING\n\n        Interrupt pending flag\n\
    \        \"\"\"\n        return self._isrpending\n\n    @isrpending.setter\n \
    \   def isrpending(self, value: int) -> None:\n        self._isrpending.value\
    \ = value\n\n    @property\n    def pendstclr(self) -> Field:\n        \"\"\"\n\
    \        PENDSTCLR\n\n        SysTick exception clear-pending\n              \
    \    bit\n        \"\"\"\n        return self._pendstclr\n\n    @pendstclr.setter\n\
    \    def pendstclr(self, value: int) -> None:\n        self._pendstclr.value =\
    \ value\n\n    @property\n    def pendstset(self) -> Field:\n        \"\"\"\n\
    \        PENDSTSET\n\n        SysTick exception set-pending\n                \
    \  bit\n        \"\"\"\n        return self._pendstset\n\n    @pendstset.setter\n\
    \    def pendstset(self, value: int) -> None:\n        self._pendstset.value =\
    \ value\n\n    @property\n    def pendsvclr(self) -> Field:\n        \"\"\"\n\
    \        PENDSVCLR\n\n        PendSV clear-pending bit\n        \"\"\"\n     \
    \   return self._pendsvclr\n\n    @pendsvclr.setter\n    def pendsvclr(self, value:\
    \ int) -> None:\n        self._pendsvclr.value = value\n\n    @property\n    def\
    \ pendsvset(self) -> Field:\n        \"\"\"\n        PENDSVSET\n\n        PendSV\
    \ set-pending bit\n        \"\"\"\n        return self._pendsvset\n\n    @pendsvset.setter\n\
    \    def pendsvset(self, value: int) -> None:\n        self._pendsvset.value =\
    \ value\n\n    @property\n    def nmipendset(self) -> Field:\n        \"\"\"\n\
    \        NMIPENDSET\n\n        NMI set-pending bit.\n        \"\"\"\n        return\
    \ self._nmipendset\n\n    @nmipendset.setter\n    def nmipendset(self, value:\
    \ int) -> None:\n        self._nmipendset.value = value\n\n\nclass VtorRegister(Register):\n\
    \    \"\"\"\n    VTOR\n\n    Vector table offset register\n    \"\"\"\n\n    def\
    \ __init__(self):\n        self._tbloff = Field(\"tbloff\", 9, 21)\n        super().__init__(\"\
    VTOR\", 0xE000ED00 + 0x8)\n\n    @property\n    def tbloff(self) -> Field:\n \
    \       \"\"\"\n        TBLOFF\n\n        Vector table base offset\n         \
    \         field\n        \"\"\"\n        return self._tbloff\n\n    @tbloff.setter\n\
    \    def tbloff(self, value: int) -> None:\n        self._tbloff.value = value\n\
    \n\nclass AircrRegister(Register):\n    \"\"\"\n    AIRCR\n\n    Application interrupt\
    \ and reset control\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._vectreset = Field(\"vectreset\", 0, 1)\n        self._vectclractive\
    \ = Field(\"vectclractive\", 1, 1)\n        self._sysresetreq = Field(\"sysresetreq\"\
    , 2, 1)\n        self._prigroup = Field(\"prigroup\", 8, 3)\n        self._endianess\
    \ = Field(\"endianess\", 15, 1)\n        self._vectkeystat = Field(\"vectkeystat\"\
    , 16, 16)\n        super().__init__(\"AIRCR\", 0xE000ED00 + 0xC)\n\n    @property\n\
    \    def vectreset(self) -> Field:\n        \"\"\"\n        VECTRESET\n\n    \
    \    VECTRESET\n        \"\"\"\n        return self._vectreset\n\n    @vectreset.setter\n\
    \    def vectreset(self, value: int) -> None:\n        self._vectreset.value =\
    \ value\n\n    @property\n    def vectclractive(self) -> Field:\n        \"\"\"\
    \n        VECTCLRACTIVE\n\n        VECTCLRACTIVE\n        \"\"\"\n        return\
    \ self._vectclractive\n\n    @vectclractive.setter\n    def vectclractive(self,\
    \ value: int) -> None:\n        self._vectclractive.value = value\n\n    @property\n\
    \    def sysresetreq(self) -> Field:\n        \"\"\"\n        SYSRESETREQ\n\n\
    \        SYSRESETREQ\n        \"\"\"\n        return self._sysresetreq\n\n   \
    \ @sysresetreq.setter\n    def sysresetreq(self, value: int) -> None:\n      \
    \  self._sysresetreq.value = value\n\n    @property\n    def prigroup(self) ->\
    \ Field:\n        \"\"\"\n        PRIGROUP\n\n        PRIGROUP\n        \"\"\"\
    \n        return self._prigroup\n\n    @prigroup.setter\n    def prigroup(self,\
    \ value: int) -> None:\n        self._prigroup.value = value\n\n    @property\n\
    \    def endianess(self) -> Field:\n        \"\"\"\n        ENDIANESS\n\n    \
    \    ENDIANESS\n        \"\"\"\n        return self._endianess\n\n    @endianess.setter\n\
    \    def endianess(self, value: int) -> None:\n        self._endianess.value =\
    \ value\n\n    @property\n    def vectkeystat(self) -> Field:\n        \"\"\"\n\
    \        VECTKEYSTAT\n\n        Register key\n        \"\"\"\n        return self._vectkeystat\n\
    \n    @vectkeystat.setter\n    def vectkeystat(self, value: int) -> None:\n  \
    \      self._vectkeystat.value = value\n\n\nclass ScrRegister(Register):\n   \
    \ \"\"\"\n    SCR\n\n    System control register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._sleeponexit = Field(\"sleeponexit\", 1, 1)\n        self._sleepdeep\
    \ = Field(\"sleepdeep\", 2, 1)\n        self._seveonpend = Field(\"seveonpend\"\
    , 4, 1)\n        super().__init__(\"SCR\", 0xE000ED00 + 0x10)\n\n    @property\n\
    \    def sleeponexit(self) -> Field:\n        \"\"\"\n        SLEEPONEXIT\n\n\
    \        SLEEPONEXIT\n        \"\"\"\n        return self._sleeponexit\n\n   \
    \ @sleeponexit.setter\n    def sleeponexit(self, value: int) -> None:\n      \
    \  self._sleeponexit.value = value\n\n    @property\n    def sleepdeep(self) ->\
    \ Field:\n        \"\"\"\n        SLEEPDEEP\n\n        SLEEPDEEP\n        \"\"\
    \"\n        return self._sleepdeep\n\n    @sleepdeep.setter\n    def sleepdeep(self,\
    \ value: int) -> None:\n        self._sleepdeep.value = value\n\n    @property\n\
    \    def seveonpend(self) -> Field:\n        \"\"\"\n        SEVEONPEND\n\n  \
    \      Send Event on Pending bit\n        \"\"\"\n        return self._seveonpend\n\
    \n    @seveonpend.setter\n    def seveonpend(self, value: int) -> None:\n    \
    \    self._seveonpend.value = value\n\n\nclass CcrRegister(Register):\n    \"\"\
    \"\n    CCR\n\n    Configuration and control\n              register\n    \"\"\
    \"\n\n    def __init__(self):\n        self._nonbasethrdena = Field(\"nonbasethrdena\"\
    , 0, 1)\n        self._usersetmpend = Field(\"usersetmpend\", 1, 1)\n        self._unalign__trp\
    \ = Field(\"unalign__trp\", 3, 1)\n        self._div_0_trp = Field(\"div_0_trp\"\
    , 4, 1)\n        self._bfhfnmign = Field(\"bfhfnmign\", 8, 1)\n        self._stkalign\
    \ = Field(\"stkalign\", 9, 1)\n        super().__init__(\"CCR\", 0xE000ED00 +\
    \ 0x14)\n\n    @property\n    def nonbasethrdena(self) -> Field:\n        \"\"\
    \"\n        NONBASETHRDENA\n\n        Configures how the processor enters\n  \
    \                Thread mode\n        \"\"\"\n        return self._nonbasethrdena\n\
    \n    @nonbasethrdena.setter\n    def nonbasethrdena(self, value: int) -> None:\n\
    \        self._nonbasethrdena.value = value\n\n    @property\n    def usersetmpend(self)\
    \ -> Field:\n        \"\"\"\n        USERSETMPEND\n\n        USERSETMPEND\n  \
    \      \"\"\"\n        return self._usersetmpend\n\n    @usersetmpend.setter\n\
    \    def usersetmpend(self, value: int) -> None:\n        self._usersetmpend.value\
    \ = value\n\n    @property\n    def unalign__trp(self) -> Field:\n        \"\"\
    \"\n        UNALIGN__TRP\n\n        UNALIGN_ TRP\n        \"\"\"\n        return\
    \ self._unalign__trp\n\n    @unalign__trp.setter\n    def unalign__trp(self, value:\
    \ int) -> None:\n        self._unalign__trp.value = value\n\n    @property\n \
    \   def div_0_trp(self) -> Field:\n        \"\"\"\n        DIV_0_TRP\n\n     \
    \   DIV_0_TRP\n        \"\"\"\n        return self._div_0_trp\n\n    @div_0_trp.setter\n\
    \    def div_0_trp(self, value: int) -> None:\n        self._div_0_trp.value =\
    \ value\n\n    @property\n    def bfhfnmign(self) -> Field:\n        \"\"\"\n\
    \        BFHFNMIGN\n\n        BFHFNMIGN\n        \"\"\"\n        return self._bfhfnmign\n\
    \n    @bfhfnmign.setter\n    def bfhfnmign(self, value: int) -> None:\n      \
    \  self._bfhfnmign.value = value\n\n    @property\n    def stkalign(self) -> Field:\n\
    \        \"\"\"\n        STKALIGN\n\n        STKALIGN\n        \"\"\"\n      \
    \  return self._stkalign\n\n    @stkalign.setter\n    def stkalign(self, value:\
    \ int) -> None:\n        self._stkalign.value = value\n\n\nclass Shpr1Register(Register):\n\
    \    \"\"\"\n    SHPR1\n\n    System handler priority\n              registers\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pri_4 = Field(\"pri_4\"\
    , 0, 8)\n        self._pri_5 = Field(\"pri_5\", 8, 8)\n        self._pri_6 = Field(\"\
    pri_6\", 16, 8)\n        super().__init__(\"SHPR1\", 0xE000ED00 + 0x18)\n\n  \
    \  @property\n    def pri_4(self) -> Field:\n        \"\"\"\n        PRI_4\n\n\
    \        Priority of system handler\n                  4\n        \"\"\"\n   \
    \     return self._pri_4\n\n    @pri_4.setter\n    def pri_4(self, value: int)\
    \ -> None:\n        self._pri_4.value = value\n\n    @property\n    def pri_5(self)\
    \ -> Field:\n        \"\"\"\n        PRI_5\n\n        Priority of system handler\n\
    \                  5\n        \"\"\"\n        return self._pri_5\n\n    @pri_5.setter\n\
    \    def pri_5(self, value: int) -> None:\n        self._pri_5.value = value\n\
    \n    @property\n    def pri_6(self) -> Field:\n        \"\"\"\n        PRI_6\n\
    \n        Priority of system handler\n                  6\n        \"\"\"\n  \
    \      return self._pri_6\n\n    @pri_6.setter\n    def pri_6(self, value: int)\
    \ -> None:\n        self._pri_6.value = value\n\n\nclass Shpr2Register(Register):\n\
    \    \"\"\"\n    SHPR2\n\n    System handler priority\n              registers\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._pri_11 = Field(\"pri_11\"\
    , 24, 8)\n        super().__init__(\"SHPR2\", 0xE000ED00 + 0x1C)\n\n    @property\n\
    \    def pri_11(self) -> Field:\n        \"\"\"\n        PRI_11\n\n        Priority\
    \ of system handler\n                  11\n        \"\"\"\n        return self._pri_11\n\
    \n    @pri_11.setter\n    def pri_11(self, value: int) -> None:\n        self._pri_11.value\
    \ = value\n\n\nclass Shpr3Register(Register):\n    \"\"\"\n    SHPR3\n\n    System\
    \ handler priority\n              registers\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._pri_14 = Field(\"pri_14\", 16, 8)\n        self._pri_15 = Field(\"\
    pri_15\", 24, 8)\n        super().__init__(\"SHPR3\", 0xE000ED00 + 0x20)\n\n \
    \   @property\n    def pri_14(self) -> Field:\n        \"\"\"\n        PRI_14\n\
    \n        Priority of system handler\n                  14\n        \"\"\"\n \
    \       return self._pri_14\n\n    @pri_14.setter\n    def pri_14(self, value:\
    \ int) -> None:\n        self._pri_14.value = value\n\n    @property\n    def\
    \ pri_15(self) -> Field:\n        \"\"\"\n        PRI_15\n\n        Priority of\
    \ system handler\n                  15\n        \"\"\"\n        return self._pri_15\n\
    \n    @pri_15.setter\n    def pri_15(self, value: int) -> None:\n        self._pri_15.value\
    \ = value\n\n\nclass ShcsrRegister(Register):\n    \"\"\"\n    SHCSR\n\n    System\
    \ handler control and state\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._memfaultact = Field(\"memfaultact\", 0, 1)\n        self._busfaultact\
    \ = Field(\"busfaultact\", 1, 1)\n        self._usgfaultact = Field(\"usgfaultact\"\
    , 3, 1)\n        self._svcallact = Field(\"svcallact\", 7, 1)\n        self._monitoract\
    \ = Field(\"monitoract\", 8, 1)\n        self._pendsvact = Field(\"pendsvact\"\
    , 10, 1)\n        self._systickact = Field(\"systickact\", 11, 1)\n        self._usgfaultpended\
    \ = Field(\"usgfaultpended\", 12, 1)\n        self._memfaultpended = Field(\"\
    memfaultpended\", 13, 1)\n        self._busfaultpended = Field(\"busfaultpended\"\
    , 14, 1)\n        self._svcallpended = Field(\"svcallpended\", 15, 1)\n      \
    \  self._memfaultena = Field(\"memfaultena\", 16, 1)\n        self._busfaultena\
    \ = Field(\"busfaultena\", 17, 1)\n        self._usgfaultena = Field(\"usgfaultena\"\
    , 18, 1)\n        super().__init__(\"SHCSR\", 0xE000ED00 + 0x24)\n\n    @property\n\
    \    def memfaultact(self) -> Field:\n        \"\"\"\n        MEMFAULTACT\n\n\
    \        Memory management fault exception active\n                  bit\n   \
    \     \"\"\"\n        return self._memfaultact\n\n    @memfaultact.setter\n  \
    \  def memfaultact(self, value: int) -> None:\n        self._memfaultact.value\
    \ = value\n\n    @property\n    def busfaultact(self) -> Field:\n        \"\"\"\
    \n        BUSFAULTACT\n\n        Bus fault exception active\n                \
    \  bit\n        \"\"\"\n        return self._busfaultact\n\n    @busfaultact.setter\n\
    \    def busfaultact(self, value: int) -> None:\n        self._busfaultact.value\
    \ = value\n\n    @property\n    def usgfaultact(self) -> Field:\n        \"\"\"\
    \n        USGFAULTACT\n\n        Usage fault exception active\n              \
    \    bit\n        \"\"\"\n        return self._usgfaultact\n\n    @usgfaultact.setter\n\
    \    def usgfaultact(self, value: int) -> None:\n        self._usgfaultact.value\
    \ = value\n\n    @property\n    def svcallact(self) -> Field:\n        \"\"\"\n\
    \        SVCALLACT\n\n        SVC call active bit\n        \"\"\"\n        return\
    \ self._svcallact\n\n    @svcallact.setter\n    def svcallact(self, value: int)\
    \ -> None:\n        self._svcallact.value = value\n\n    @property\n    def monitoract(self)\
    \ -> Field:\n        \"\"\"\n        MONITORACT\n\n        Debug monitor active\
    \ bit\n        \"\"\"\n        return self._monitoract\n\n    @monitoract.setter\n\
    \    def monitoract(self, value: int) -> None:\n        self._monitoract.value\
    \ = value\n\n    @property\n    def pendsvact(self) -> Field:\n        \"\"\"\n\
    \        PENDSVACT\n\n        PendSV exception active\n                  bit\n\
    \        \"\"\"\n        return self._pendsvact\n\n    @pendsvact.setter\n   \
    \ def pendsvact(self, value: int) -> None:\n        self._pendsvact.value = value\n\
    \n    @property\n    def systickact(self) -> Field:\n        \"\"\"\n        SYSTICKACT\n\
    \n        SysTick exception active\n                  bit\n        \"\"\"\n  \
    \      return self._systickact\n\n    @systickact.setter\n    def systickact(self,\
    \ value: int) -> None:\n        self._systickact.value = value\n\n    @property\n\
    \    def usgfaultpended(self) -> Field:\n        \"\"\"\n        USGFAULTPENDED\n\
    \n        Usage fault exception pending\n                  bit\n        \"\"\"\
    \n        return self._usgfaultpended\n\n    @usgfaultpended.setter\n    def usgfaultpended(self,\
    \ value: int) -> None:\n        self._usgfaultpended.value = value\n\n    @property\n\
    \    def memfaultpended(self) -> Field:\n        \"\"\"\n        MEMFAULTPENDED\n\
    \n        Memory management fault exception\n                  pending bit\n \
    \       \"\"\"\n        return self._memfaultpended\n\n    @memfaultpended.setter\n\
    \    def memfaultpended(self, value: int) -> None:\n        self._memfaultpended.value\
    \ = value\n\n    @property\n    def busfaultpended(self) -> Field:\n        \"\
    \"\"\n        BUSFAULTPENDED\n\n        Bus fault exception pending\n        \
    \          bit\n        \"\"\"\n        return self._busfaultpended\n\n    @busfaultpended.setter\n\
    \    def busfaultpended(self, value: int) -> None:\n        self._busfaultpended.value\
    \ = value\n\n    @property\n    def svcallpended(self) -> Field:\n        \"\"\
    \"\n        SVCALLPENDED\n\n        SVC call pending bit\n        \"\"\"\n   \
    \     return self._svcallpended\n\n    @svcallpended.setter\n    def svcallpended(self,\
    \ value: int) -> None:\n        self._svcallpended.value = value\n\n    @property\n\
    \    def memfaultena(self) -> Field:\n        \"\"\"\n        MEMFAULTENA\n\n\
    \        Memory management fault enable\n                  bit\n        \"\"\"\
    \n        return self._memfaultena\n\n    @memfaultena.setter\n    def memfaultena(self,\
    \ value: int) -> None:\n        self._memfaultena.value = value\n\n    @property\n\
    \    def busfaultena(self) -> Field:\n        \"\"\"\n        BUSFAULTENA\n\n\
    \        Bus fault enable bit\n        \"\"\"\n        return self._busfaultena\n\
    \n    @busfaultena.setter\n    def busfaultena(self, value: int) -> None:\n  \
    \      self._busfaultena.value = value\n\n    @property\n    def usgfaultena(self)\
    \ -> Field:\n        \"\"\"\n        USGFAULTENA\n\n        Usage fault enable\
    \ bit\n        \"\"\"\n        return self._usgfaultena\n\n    @usgfaultena.setter\n\
    \    def usgfaultena(self, value: int) -> None:\n        self._usgfaultena.value\
    \ = value\n\n\nclass Cfsr_ufsr_bfsr_mmfsrRegister(Register):\n    \"\"\"\n   \
    \ CFSR_UFSR_BFSR_MMFSR\n\n    Configurable fault status\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._iaccviol = Field(\"iaccviol\"\
    , 1, 1)\n        self._munstkerr = Field(\"munstkerr\", 3, 1)\n        self._mstkerr\
    \ = Field(\"mstkerr\", 4, 1)\n        self._mlsperr = Field(\"mlsperr\", 5, 1)\n\
    \        self._mmarvalid = Field(\"mmarvalid\", 7, 1)\n        self._ibuserr =\
    \ Field(\"ibuserr\", 8, 1)\n        self._preciserr = Field(\"preciserr\", 9,\
    \ 1)\n        self._impreciserr = Field(\"impreciserr\", 10, 1)\n        self._unstkerr\
    \ = Field(\"unstkerr\", 11, 1)\n        self._stkerr = Field(\"stkerr\", 12, 1)\n\
    \        self._lsperr = Field(\"lsperr\", 13, 1)\n        self._bfarvalid = Field(\"\
    bfarvalid\", 15, 1)\n        self._undefinstr = Field(\"undefinstr\", 16, 1)\n\
    \        self._invstate = Field(\"invstate\", 17, 1)\n        self._invpc = Field(\"\
    invpc\", 18, 1)\n        self._nocp = Field(\"nocp\", 19, 1)\n        self._unaligned\
    \ = Field(\"unaligned\", 24, 1)\n        self._divbyzero = Field(\"divbyzero\"\
    , 25, 1)\n        super().__init__(\"CFSR_UFSR_BFSR_MMFSR\", 0xE000ED00 + 0x28)\n\
    \n    @property\n    def iaccviol(self) -> Field:\n        \"\"\"\n        IACCVIOL\n\
    \n        Instruction access violation\n                  flag\n        \"\"\"\
    \n        return self._iaccviol\n\n    @iaccviol.setter\n    def iaccviol(self,\
    \ value: int) -> None:\n        self._iaccviol.value = value\n\n    @property\n\
    \    def munstkerr(self) -> Field:\n        \"\"\"\n        MUNSTKERR\n\n    \
    \    Memory manager fault on unstacking for a\n                  return from exception\n\
    \        \"\"\"\n        return self._munstkerr\n\n    @munstkerr.setter\n   \
    \ def munstkerr(self, value: int) -> None:\n        self._munstkerr.value = value\n\
    \n    @property\n    def mstkerr(self) -> Field:\n        \"\"\"\n        MSTKERR\n\
    \n        Memory manager fault on stacking for\n                  exception entry.\n\
    \        \"\"\"\n        return self._mstkerr\n\n    @mstkerr.setter\n    def\
    \ mstkerr(self, value: int) -> None:\n        self._mstkerr.value = value\n\n\
    \    @property\n    def mlsperr(self) -> Field:\n        \"\"\"\n        MLSPERR\n\
    \n        MLSPERR\n        \"\"\"\n        return self._mlsperr\n\n    @mlsperr.setter\n\
    \    def mlsperr(self, value: int) -> None:\n        self._mlsperr.value = value\n\
    \n    @property\n    def mmarvalid(self) -> Field:\n        \"\"\"\n        MMARVALID\n\
    \n        Memory Management Fault Address Register\n                  (MMAR) valid\
    \ flag\n        \"\"\"\n        return self._mmarvalid\n\n    @mmarvalid.setter\n\
    \    def mmarvalid(self, value: int) -> None:\n        self._mmarvalid.value =\
    \ value\n\n    @property\n    def ibuserr(self) -> Field:\n        \"\"\"\n  \
    \      IBUSERR\n\n        Instruction bus error\n        \"\"\"\n        return\
    \ self._ibuserr\n\n    @ibuserr.setter\n    def ibuserr(self, value: int) -> None:\n\
    \        self._ibuserr.value = value\n\n    @property\n    def preciserr(self)\
    \ -> Field:\n        \"\"\"\n        PRECISERR\n\n        Precise data bus error\n\
    \        \"\"\"\n        return self._preciserr\n\n    @preciserr.setter\n   \
    \ def preciserr(self, value: int) -> None:\n        self._preciserr.value = value\n\
    \n    @property\n    def impreciserr(self) -> Field:\n        \"\"\"\n       \
    \ IMPRECISERR\n\n        Imprecise data bus error\n        \"\"\"\n        return\
    \ self._impreciserr\n\n    @impreciserr.setter\n    def impreciserr(self, value:\
    \ int) -> None:\n        self._impreciserr.value = value\n\n    @property\n  \
    \  def unstkerr(self) -> Field:\n        \"\"\"\n        UNSTKERR\n\n        Bus\
    \ fault on unstacking for a return\n                  from exception\n       \
    \ \"\"\"\n        return self._unstkerr\n\n    @unstkerr.setter\n    def unstkerr(self,\
    \ value: int) -> None:\n        self._unstkerr.value = value\n\n    @property\n\
    \    def stkerr(self) -> Field:\n        \"\"\"\n        STKERR\n\n        Bus\
    \ fault on stacking for exception\n                  entry\n        \"\"\"\n \
    \       return self._stkerr\n\n    @stkerr.setter\n    def stkerr(self, value:\
    \ int) -> None:\n        self._stkerr.value = value\n\n    @property\n    def\
    \ lsperr(self) -> Field:\n        \"\"\"\n        LSPERR\n\n        Bus fault\
    \ on floating-point lazy state\n                  preservation\n        \"\"\"\
    \n        return self._lsperr\n\n    @lsperr.setter\n    def lsperr(self, value:\
    \ int) -> None:\n        self._lsperr.value = value\n\n    @property\n    def\
    \ bfarvalid(self) -> Field:\n        \"\"\"\n        BFARVALID\n\n        Bus\
    \ Fault Address Register (BFAR) valid\n                  flag\n        \"\"\"\n\
    \        return self._bfarvalid\n\n    @bfarvalid.setter\n    def bfarvalid(self,\
    \ value: int) -> None:\n        self._bfarvalid.value = value\n\n    @property\n\
    \    def undefinstr(self) -> Field:\n        \"\"\"\n        UNDEFINSTR\n\n  \
    \      Undefined instruction usage\n                  fault\n        \"\"\"\n\
    \        return self._undefinstr\n\n    @undefinstr.setter\n    def undefinstr(self,\
    \ value: int) -> None:\n        self._undefinstr.value = value\n\n    @property\n\
    \    def invstate(self) -> Field:\n        \"\"\"\n        INVSTATE\n\n      \
    \  Invalid state usage fault\n        \"\"\"\n        return self._invstate\n\n\
    \    @invstate.setter\n    def invstate(self, value: int) -> None:\n        self._invstate.value\
    \ = value\n\n    @property\n    def invpc(self) -> Field:\n        \"\"\"\n  \
    \      INVPC\n\n        Invalid PC load usage\n                  fault\n     \
    \   \"\"\"\n        return self._invpc\n\n    @invpc.setter\n    def invpc(self,\
    \ value: int) -> None:\n        self._invpc.value = value\n\n    @property\n \
    \   def nocp(self) -> Field:\n        \"\"\"\n        NOCP\n\n        No coprocessor\
    \ usage\n                  fault.\n        \"\"\"\n        return self._nocp\n\
    \n    @nocp.setter\n    def nocp(self, value: int) -> None:\n        self._nocp.value\
    \ = value\n\n    @property\n    def unaligned(self) -> Field:\n        \"\"\"\n\
    \        UNALIGNED\n\n        Unaligned access usage\n                  fault\n\
    \        \"\"\"\n        return self._unaligned\n\n    @unaligned.setter\n   \
    \ def unaligned(self, value: int) -> None:\n        self._unaligned.value = value\n\
    \n    @property\n    def divbyzero(self) -> Field:\n        \"\"\"\n        DIVBYZERO\n\
    \n        Divide by zero usage fault\n        \"\"\"\n        return self._divbyzero\n\
    \n    @divbyzero.setter\n    def divbyzero(self, value: int) -> None:\n      \
    \  self._divbyzero.value = value\n\n\nclass HfsrRegister(Register):\n    \"\"\"\
    \n    HFSR\n\n    Hard fault status register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._vecttbl = Field(\"vecttbl\", 1, 1)\n        self._forced = Field(\"\
    forced\", 30, 1)\n        self._debug_vt = Field(\"debug_vt\", 31, 1)\n      \
    \  super().__init__(\"HFSR\", 0xE000ED00 + 0x2C)\n\n    @property\n    def vecttbl(self)\
    \ -> Field:\n        \"\"\"\n        VECTTBL\n\n        Vector table hard fault\n\
    \        \"\"\"\n        return self._vecttbl\n\n    @vecttbl.setter\n    def\
    \ vecttbl(self, value: int) -> None:\n        self._vecttbl.value = value\n\n\
    \    @property\n    def forced(self) -> Field:\n        \"\"\"\n        FORCED\n\
    \n        Forced hard fault\n        \"\"\"\n        return self._forced\n\n \
    \   @forced.setter\n    def forced(self, value: int) -> None:\n        self._forced.value\
    \ = value\n\n    @property\n    def debug_vt(self) -> Field:\n        \"\"\"\n\
    \        DEBUG_VT\n\n        Reserved for Debug use\n        \"\"\"\n        return\
    \ self._debug_vt\n\n    @debug_vt.setter\n    def debug_vt(self, value: int) ->\
    \ None:\n        self._debug_vt.value = value\n\n\nclass MmfarRegister(Register):\n\
    \    \"\"\"\n    MMFAR\n\n    Memory management fault address\n              register\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._mmfar = Field(\"mmfar\"\
    , 0, 32)\n        super().__init__(\"MMFAR\", 0xE000ED00 + 0x34)\n\n    @property\n\
    \    def mmfar(self) -> Field:\n        \"\"\"\n        MMFAR\n\n        Memory\
    \ management fault\n                  address\n        \"\"\"\n        return\
    \ self._mmfar\n\n    @mmfar.setter\n    def mmfar(self, value: int) -> None:\n\
    \        self._mmfar.value = value\n\n\nclass BfarRegister(Register):\n    \"\"\
    \"\n    BFAR\n\n    Bus fault address register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._bfar = Field(\"bfar\", 0, 32)\n        super().__init__(\"BFAR\"\
    , 0xE000ED00 + 0x38)\n\n    @property\n    def bfar(self) -> Field:\n        \"\
    \"\"\n        BFAR\n\n        Bus fault address\n        \"\"\"\n        return\
    \ self._bfar\n\n    @bfar.setter\n    def bfar(self, value: int) -> None:\n  \
    \      self._bfar.value = value\n\n\nclass AfsrRegister(Register):\n    \"\"\"\
    \n    AFSR\n\n    Auxiliary fault status\n              register\n    \"\"\"\n\
    \n    def __init__(self):\n        self._impdef = Field(\"impdef\", 0, 32)\n \
    \       super().__init__(\"AFSR\", 0xE000ED00 + 0x3C)\n\n    @property\n    def\
    \ impdef(self) -> Field:\n        \"\"\"\n        IMPDEF\n\n        Implementation\
    \ defined\n        \"\"\"\n        return self._impdef\n\n    @impdef.setter\n\
    \    def impdef(self, value: int) -> None:\n        self._impdef.value = value\n\
    \n\nclass Scb(Peripheral):\n    \"\"\"\n    SCB\n\n    System control block\n\
    \    \"\"\"\n\n    def __init__(self):\n        self._cpuid = CpuidRegister()\n\
    \        self._icsr = IcsrRegister()\n        self._vtor = VtorRegister()\n  \
    \      self._aircr = AircrRegister()\n        self._scr = ScrRegister()\n    \
    \    self._ccr = CcrRegister()\n        self._shpr1 = Shpr1Register()\n      \
    \  self._shpr2 = Shpr2Register()\n        self._shpr3 = Shpr3Register()\n    \
    \    self._shcsr = ShcsrRegister()\n        self._cfsr_ufsr_bfsr_mmfsr = Cfsr_ufsr_bfsr_mmfsrRegister()\n\
    \        self._hfsr = HfsrRegister()\n        self._mmfar = MmfarRegister()\n\
    \        self._bfar = BfarRegister()\n        self._afsr = AfsrRegister()\n  \
    \      super().__init__(\"scb\", 0xE000ED00)\n\n    @property\n    def cpuid(self)\
    \ -> CpuidRegister:\n        return self._cpuid\n\n    @cpuid.setter\n    def\
    \ cpuid(self, value: int) -> None:\n        self._cpuid.value = value\n\n    @property\n\
    \    def icsr(self) -> IcsrRegister:\n        return self._icsr\n\n    @icsr.setter\n\
    \    def icsr(self, value: int) -> None:\n        self._icsr.value = value\n\n\
    \    @property\n    def vtor(self) -> VtorRegister:\n        return self._vtor\n\
    \n    @vtor.setter\n    def vtor(self, value: int) -> None:\n        self._vtor.value\
    \ = value\n\n    @property\n    def aircr(self) -> AircrRegister:\n        return\
    \ self._aircr\n\n    @aircr.setter\n    def aircr(self, value: int) -> None:\n\
    \        self._aircr.value = value\n\n    @property\n    def scr(self) -> ScrRegister:\n\
    \        return self._scr\n\n    @scr.setter\n    def scr(self, value: int) ->\
    \ None:\n        self._scr.value = value\n\n    @property\n    def ccr(self) ->\
    \ CcrRegister:\n        return self._ccr\n\n    @ccr.setter\n    def ccr(self,\
    \ value: int) -> None:\n        self._ccr.value = value\n\n    @property\n   \
    \ def shpr1(self) -> Shpr1Register:\n        return self._shpr1\n\n    @shpr1.setter\n\
    \    def shpr1(self, value: int) -> None:\n        self._shpr1.value = value\n\
    \n    @property\n    def shpr2(self) -> Shpr2Register:\n        return self._shpr2\n\
    \n    @shpr2.setter\n    def shpr2(self, value: int) -> None:\n        self._shpr2.value\
    \ = value\n\n    @property\n    def shpr3(self) -> Shpr3Register:\n        return\
    \ self._shpr3\n\n    @shpr3.setter\n    def shpr3(self, value: int) -> None:\n\
    \        self._shpr3.value = value\n\n    @property\n    def shcsr(self) -> ShcsrRegister:\n\
    \        return self._shcsr\n\n    @shcsr.setter\n    def shcsr(self, value: int)\
    \ -> None:\n        self._shcsr.value = value\n\n    @property\n    def cfsr_ufsr_bfsr_mmfsr(self)\
    \ -> Cfsr_ufsr_bfsr_mmfsrRegister:\n        return self._cfsr_ufsr_bfsr_mmfsr\n\
    \n    @cfsr_ufsr_bfsr_mmfsr.setter\n    def cfsr_ufsr_bfsr_mmfsr(self, value:\
    \ int) -> None:\n        self._cfsr_ufsr_bfsr_mmfsr.value = value\n\n    @property\n\
    \    def hfsr(self) -> HfsrRegister:\n        return self._hfsr\n\n    @hfsr.setter\n\
    \    def hfsr(self, value: int) -> None:\n        self._hfsr.value = value\n\n\
    \    @property\n    def mmfar(self) -> MmfarRegister:\n        return self._mmfar\n\
    \n    @mmfar.setter\n    def mmfar(self, value: int) -> None:\n        self._mmfar.value\
    \ = value\n\n    @property\n    def bfar(self) -> BfarRegister:\n        return\
    \ self._bfar\n\n    @bfar.setter\n    def bfar(self, value: int) -> None:\n  \
    \      self._bfar.value = value\n\n    @property\n    def afsr(self) -> AfsrRegister:\n\
    \        return self._afsr\n\n    @afsr.setter\n    def afsr(self, value: int)\
    \ -> None:\n        self._afsr.value = value\n"
  name: SCB
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass StirRegister(Register):\n    \"\"\"\n    STIR\n\n    Software\
    \ trigger interrupt\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._intid = Field(\"intid\", 0, 9)\n        super().__init__(\"STIR\"\
    , 0xE000EF00 + 0x0)\n\n    @property\n    def intid(self) -> Field:\n        \"\
    \"\"\n        INTID\n\n        Software generated interrupt\n                \
    \  ID\n        \"\"\"\n        return self._intid\n\n    @intid.setter\n    def\
    \ intid(self, value: int) -> None:\n        self._intid.value = value\n\n\nclass\
    \ Nvic_stir(Peripheral):\n    \"\"\"\n    NVIC_STIR\n\n    Nested vectored interrupt\n\
    \          controller\n    \"\"\"\n\n    def __init__(self):\n        self._stir\
    \ = StirRegister()\n        super().__init__(\"nvic_stir\", 0xE000EF00)\n\n  \
    \  @property\n    def stir(self) -> StirRegister:\n        return self._stir\n\
    \n    @stir.setter\n    def stir(self, value: int) -> None:\n        self._stir.value\
    \ = value\n"
  name: NVIC_STIR
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass CpacrRegister(Register):\n    \"\"\"\n    CPACR\n\n    Coprocessor\
    \ access control\n              register\n    \"\"\"\n\n    def __init__(self):\n\
    \        self._cp = Field(\"cp\", 20, 4)\n        super().__init__(\"CPACR\",\
    \ 0xE000ED88 + 0x0)\n\n    @property\n    def cp(self) -> Field:\n        \"\"\
    \"\n        CP\n\n        CP\n        \"\"\"\n        return self._cp\n\n    @cp.setter\n\
    \    def cp(self, value: int) -> None:\n        self._cp.value = value\n\n\nclass\
    \ Fpu_cpacr(Peripheral):\n    \"\"\"\n    FPU_CPACR\n\n    Floating point unit\
    \ CPACR\n    \"\"\"\n\n    def __init__(self):\n        self._cpacr = CpacrRegister()\n\
    \        super().__init__(\"fpu_cpacr\", 0xE000ED88)\n\n    @property\n    def\
    \ cpacr(self) -> CpacrRegister:\n        return self._cpacr\n\n    @cpacr.setter\n\
    \    def cpacr(self, value: int) -> None:\n        self._cpacr.value = value\n"
  name: FPU_CPACR
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom ..register_model import Field, Peripheral,\
    \ Register\n\n\nclass ActrlRegister(Register):\n    \"\"\"\n    ACTRL\n\n    Auxiliary\
    \ control register\n    \"\"\"\n\n    def __init__(self):\n        self._dismcycint\
    \ = Field(\"dismcycint\", 0, 1)\n        self._disdefwbuf = Field(\"disdefwbuf\"\
    , 1, 1)\n        self._disfold = Field(\"disfold\", 2, 1)\n        self._disfpca\
    \ = Field(\"disfpca\", 8, 1)\n        self._disoofp = Field(\"disoofp\", 9, 1)\n\
    \        super().__init__(\"ACTRL\", 0xE000E008 + 0x0)\n\n    @property\n    def\
    \ dismcycint(self) -> Field:\n        \"\"\"\n        DISMCYCINT\n\n        DISMCYCINT\n\
    \        \"\"\"\n        return self._dismcycint\n\n    @dismcycint.setter\n \
    \   def dismcycint(self, value: int) -> None:\n        self._dismcycint.value\
    \ = value\n\n    @property\n    def disdefwbuf(self) -> Field:\n        \"\"\"\
    \n        DISDEFWBUF\n\n        DISDEFWBUF\n        \"\"\"\n        return self._disdefwbuf\n\
    \n    @disdefwbuf.setter\n    def disdefwbuf(self, value: int) -> None:\n    \
    \    self._disdefwbuf.value = value\n\n    @property\n    def disfold(self) ->\
    \ Field:\n        \"\"\"\n        DISFOLD\n\n        DISFOLD\n        \"\"\"\n\
    \        return self._disfold\n\n    @disfold.setter\n    def disfold(self, value:\
    \ int) -> None:\n        self._disfold.value = value\n\n    @property\n    def\
    \ disfpca(self) -> Field:\n        \"\"\"\n        DISFPCA\n\n        DISFPCA\n\
    \        \"\"\"\n        return self._disfpca\n\n    @disfpca.setter\n    def\
    \ disfpca(self, value: int) -> None:\n        self._disfpca.value = value\n\n\
    \    @property\n    def disoofp(self) -> Field:\n        \"\"\"\n        DISOOFP\n\
    \n        DISOOFP\n        \"\"\"\n        return self._disoofp\n\n    @disoofp.setter\n\
    \    def disoofp(self, value: int) -> None:\n        self._disoofp.value = value\n\
    \n\nclass Scb_actrl(Peripheral):\n    \"\"\"\n    SCB_ACTRL\n\n    System control\
    \ block ACTLR\n    \"\"\"\n\n    def __init__(self):\n        self._actrl = ActrlRegister()\n\
    \        super().__init__(\"scb_actrl\", 0xE000E008)\n\n    @property\n    def\
    \ actrl(self) -> ActrlRegister:\n        return self._actrl\n\n    @actrl.setter\n\
    \    def actrl(self, value: int) -> None:\n        self._actrl.value = value\n"
  name: SCB_ACTRL
- content: "\"\"\"\nD-RAL - Device Register Access Layer\nhttps://github.com/gembcior/d-ral\n\
    \nMIT License\n\nCopyright (c) 2023 Gembcior\n\nPermission is hereby granted,\
    \ free of charge, to any person obtaining a copy\nof this software and associated\
    \ documentation files (the \"Software\"), to deal\nin the Software without restriction,\
    \ including without limitation the rights\nto use, copy, modify, merge, publish,\
    \ distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons\
    \ to whom the Software is\nfurnished to do so, subject to the following conditions:\n\
    \nThe above copyright notice and this permission notice shall be included in all\n\
    copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"\
    AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE\
    \ AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE\
    \ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,\
    \ TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis is an auto generated\
    \ file. Do not modify!\n\"\"\"\n\n\nfrom .adc_common import Adc_common\nfrom .adc1\
    \ import Adc1\nfrom .crc import Crc\nfrom .dbg import Dbg\nfrom .exti import Exti\n\
    from .flash import Flash\nfrom .iwdg import Iwdg\nfrom .otg_fs_device import Otg_fs_device\n\
    from .otg_fs_global import Otg_fs_global\nfrom .otg_fs_host import Otg_fs_host\n\
    from .otg_fs_pwrclk import Otg_fs_pwrclk\nfrom .pwr import Pwr\nfrom .rcc import\
    \ Rcc\nfrom .rtc import Rtc\nfrom .sdio import Sdio\nfrom .syscfg import Syscfg\n\
    from .tim1 import Tim1\nfrom .tim8 import Tim8\nfrom .tim10 import Tim10\nfrom\
    \ .tim11 import Tim11\nfrom .tim2 import Tim2\nfrom .tim3 import Tim3\nfrom .tim4\
    \ import Tim4\nfrom .tim5 import Tim5\nfrom .tim9 import Tim9\nfrom .usart1 import\
    \ Usart1\nfrom .usart2 import Usart2\nfrom .usart6 import Usart6\nfrom .wwdg import\
    \ Wwdg\nfrom .dma2 import Dma2\nfrom .dma1 import Dma1\nfrom .gpioh import Gpioh\n\
    from .gpioe import Gpioe\nfrom .gpiod import Gpiod\nfrom .gpioc import Gpioc\n\
    from .gpiob import Gpiob\nfrom .gpioa import Gpioa\nfrom .i2c3 import I2c3\nfrom\
    \ .i2c2 import I2c2\nfrom .i2c1 import I2c1\nfrom .i2s2ext import I2s2ext\nfrom\
    \ .i2s3ext import I2s3ext\nfrom .spi1 import Spi1\nfrom .spi2 import Spi2\nfrom\
    \ .spi3 import Spi3\nfrom .spi4 import Spi4\nfrom .spi5 import Spi5\nfrom .nvic\
    \ import Nvic\nfrom .fpu import Fpu\nfrom .mpu import Mpu\nfrom .stk import Stk\n\
    from .scb import Scb\nfrom .nvic_stir import Nvic_stir\nfrom .fpu_cpacr import\
    \ Fpu_cpacr\nfrom .scb_actrl import Scb_actrl\nfrom ..register_model import DralDevice\n\
    \n\nclass STM32F411(DralDevice):\n    def __init__(self):\n        self.adc_common\
    \ = Adc_common()\n        self.adc1 = Adc1()\n        self.crc = Crc()\n     \
    \   self.dbg = Dbg()\n        self.exti = Exti()\n        self.flash = Flash()\n\
    \        self.iwdg = Iwdg()\n        self.otg_fs_device = Otg_fs_device()\n  \
    \      self.otg_fs_global = Otg_fs_global()\n        self.otg_fs_host = Otg_fs_host()\n\
    \        self.otg_fs_pwrclk = Otg_fs_pwrclk()\n        self.pwr = Pwr()\n    \
    \    self.rcc = Rcc()\n        self.rtc = Rtc()\n        self.sdio = Sdio()\n\
    \        self.syscfg = Syscfg()\n        self.tim1 = Tim1()\n        self.tim8\
    \ = Tim8()\n        self.tim10 = Tim10()\n        self.tim11 = Tim11()\n     \
    \   self.tim2 = Tim2()\n        self.tim3 = Tim3()\n        self.tim4 = Tim4()\n\
    \        self.tim5 = Tim5()\n        self.tim9 = Tim9()\n        self.usart1 =\
    \ Usart1()\n        self.usart2 = Usart2()\n        self.usart6 = Usart6()\n \
    \       self.wwdg = Wwdg()\n        self.dma2 = Dma2()\n        self.dma1 = Dma1()\n\
    \        self.gpioh = Gpioh()\n        self.gpioe = Gpioe()\n        self.gpiod\
    \ = Gpiod()\n        self.gpioc = Gpioc()\n        self.gpiob = Gpiob()\n    \
    \    self.gpioa = Gpioa()\n        self.i2c3 = I2c3()\n        self.i2c2 = I2c2()\n\
    \        self.i2c1 = I2c1()\n        self.i2s2ext = I2s2ext()\n        self.i2s3ext\
    \ = I2s3ext()\n        self.spi1 = Spi1()\n        self.spi2 = Spi2()\n      \
    \  self.spi3 = Spi3()\n        self.spi4 = Spi4()\n        self.spi5 = Spi5()\n\
    \        self.nvic = Nvic()\n        self.fpu = Fpu()\n        self.mpu = Mpu()\n\
    \        self.stk = Stk()\n        self.scb = Scb()\n        self.nvic_stir =\
    \ Nvic_stir()\n        self.fpu_cpacr = Fpu_cpacr()\n        self.scb_actrl =\
    \ Scb_actrl()\n        super().__init__()"
  name: STM32F411
