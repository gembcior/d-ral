- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Timer0(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"Control Register\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.en = Field(\"en\", \"Enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.rst = Field(\"rst\", \"\
    Reset Timer\", self._address, 1, 0x0001, 1, proxy)\n            self.cnt = Field(\"\
    cnt\", \"Counting direction\", self._address, 2, 0x0003, 2, proxy)\n         \
    \   self.mode = Field(\"mode\", \"Operation Mode\", self._address, 4, 0x0007,\
    \ 3, proxy)\n            self.psc = Field(\"psc\", \"Use Prescaler\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cntsrc = Field(\"cntsrc\", \"Timer /\
    \ Counter Source Divider\", self._address, 8, 0x000F, 4, proxy)\n            self.capsrc\
    \ = Field(\"capsrc\", \"Timer / Counter Capture Source\", self._address, 12, 0x000F,\
    \ 4, proxy)\n            self.capedge = Field(\"capedge\", \"Capture Edge, select\
    \ which Edge should result in a counter increment or decrement\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.trgext = Field(\"trgext\", \"Triggers\
    \ an other Peripheral\", self._address, 20, 0x0003, 2, proxy)\n            self.reload\
    \ = Field(\"reload\", \"Select RELOAD Register n to reload Timer on condition\"\
    , self._address, 24, 0x0003, 2, proxy)\n            self.idr = Field(\"idr\",\
    \ \"Selects, if Reload Register number is incremented, decremented or not modified\"\
    , self._address, 26, 0x0003, 2, proxy)\n            self.s = Field(\"s\", \"Starts\
    \ and Stops the Timer / Counter\", self._address, 31, 0x0001, 1, proxy)\n    \n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status Register\", address + 0x0004, 16,\
    \ \"read-write\", 0x0000, proxy)\n            self.run = Field(\"run\", \"Shows\
    \ if Timer is running or not\", self._address, 0, 0x0001, 1, proxy)\n        \
    \    self.match = Field(\"match\", \"Shows if the MATCH was hit\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.un = Field(\"un\", \"Shows if an underflow\
    \ occured. This flag is sticky\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.ov = Field(\"ov\", \"Shows if an overflow occured. This flag is sticky\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.rst = Field(\"rst\",\
    \ \"Shows if Timer is in RESET state\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.reload = Field(\"reload\", \"Shows the currently active RELOAD\
    \ Register\", self._address, 14, 0x0003, 2, proxy)\n    \n    class IntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    INT\", \"Interrupt Register\", address + 0x0010, 16, \"read-write\", 0x0000, proxy)\n\
    \            self.en = Field(\"en\", \"Interrupt Enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.mode = Field(\"mode\", \"Interrupt Mode, selects\
    \ on which condition the Timer should generate an Interrupt\", self._address,\
    \ 4, 0x0007, 3, proxy)\n    \n    class CountRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"COUNT\", \"\
    The Counter Register reflects the actual Value of the Timer/Counter\", address\
    \ + 0x0020, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    class\
    \ MatchRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"MATCH\", \"The Match Register stores the compare Value\
    \ for the MATCH condition\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n\
    \            \n    \n    class Prescale_rdRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PRESCALE_RD\", \"The Prescale\
    \ Register stores the Value for the prescaler. The cont event gets divided by\
    \ this value\", address + 0x0028, 32, \"read-only\", 0x0000, proxy)\n        \
    \    \n    \n    class Prescale_wrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PRESCALE_WR\", \"The Prescale\
    \ Register stores the Value for the prescaler. The cont event gets divided by\
    \ this value\", address + 0x0028, 32, \"write-only\", 0x0000, proxy)\n       \
    \     \n    \n    class Reload[0]Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RELOAD[0]\", \"The Reload Register\
    \ stores the Value the COUNT Register gets reloaded on a when a condition was\
    \ met.\", address + 0x0050, 32, \"read-write\", 0x0000, proxy)\n            \n\
    \    \n    class Reload[1]Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"RELOAD[1]\", \"The Reload Register stores\
    \ the Value the COUNT Register gets reloaded on a when a condition was met.\"\
    , address + 0x0054, 32, \"read-write\", 0x0000, proxy)\n            \n    \n \
    \   class Reload[2]Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RELOAD[2]\", \"The Reload Register stores the\
    \ Value the COUNT Register gets reloaded on a when a condition was met.\", address\
    \ + 0x0058, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    class\
    \ Reload[3]Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RELOAD[3]\", \"The Reload Register stores the\
    \ Value the COUNT Register gets reloaded on a when a condition was met.\", address\
    \ + 0x005C, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"timer0\", \"32 Timer / Counter, counting\
    \ up or down from different sources\", 0x40010000)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.sr = self.SrRegister(self.address, proxy)\n        self.int\
    \ = self.IntRegister(self.address, proxy)\n        self.count = self.CountRegister(self.address,\
    \ proxy)\n        self.match = self.MatchRegister(self.address, proxy)\n     \
    \   self.prescale_rd = self.Prescale_rdRegister(self.address, proxy)\n       \
    \ self.prescale_wr = self.Prescale_wrRegister(self.address, proxy)\n        self.reload[0]\
    \ = self.Reload[0]Register(self.address, proxy)\n        self.reload[1] = self.Reload[1]Register(self.address,\
    \ proxy)\n        self.reload[2] = self.Reload[2]Register(self.address, proxy)\n\
    \        self.reload[3] = self.Reload[3]Register(self.address, proxy)\n"
  name: TIMER0
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Timer1(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"Control Register\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.en = Field(\"en\", \"Enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.rst = Field(\"rst\", \"\
    Reset Timer\", self._address, 1, 0x0001, 1, proxy)\n            self.cnt = Field(\"\
    cnt\", \"Counting direction\", self._address, 2, 0x0003, 2, proxy)\n         \
    \   self.mode = Field(\"mode\", \"Operation Mode\", self._address, 4, 0x0007,\
    \ 3, proxy)\n            self.psc = Field(\"psc\", \"Use Prescaler\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cntsrc = Field(\"cntsrc\", \"Timer /\
    \ Counter Source Divider\", self._address, 8, 0x000F, 4, proxy)\n            self.capsrc\
    \ = Field(\"capsrc\", \"Timer / Counter Capture Source\", self._address, 12, 0x000F,\
    \ 4, proxy)\n            self.capedge = Field(\"capedge\", \"Capture Edge, select\
    \ which Edge should result in a counter increment or decrement\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.trgext = Field(\"trgext\", \"Triggers\
    \ an other Peripheral\", self._address, 20, 0x0003, 2, proxy)\n            self.reload\
    \ = Field(\"reload\", \"Select RELOAD Register n to reload Timer on condition\"\
    , self._address, 24, 0x0003, 2, proxy)\n            self.idr = Field(\"idr\",\
    \ \"Selects, if Reload Register number is incremented, decremented or not modified\"\
    , self._address, 26, 0x0003, 2, proxy)\n            self.s = Field(\"s\", \"Starts\
    \ and Stops the Timer / Counter\", self._address, 31, 0x0001, 1, proxy)\n    \n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status Register\", address + 0x0004, 16,\
    \ \"read-write\", 0x0000, proxy)\n            self.run = Field(\"run\", \"Shows\
    \ if Timer is running or not\", self._address, 0, 0x0001, 1, proxy)\n        \
    \    self.match = Field(\"match\", \"Shows if the MATCH was hit\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.un = Field(\"un\", \"Shows if an underflow\
    \ occured. This flag is sticky\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.ov = Field(\"ov\", \"Shows if an overflow occured. This flag is sticky\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.rst = Field(\"rst\",\
    \ \"Shows if Timer is in RESET state\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.reload = Field(\"reload\", \"Shows the currently active RELOAD\
    \ Register\", self._address, 14, 0x0003, 2, proxy)\n    \n    class IntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    INT\", \"Interrupt Register\", address + 0x0010, 16, \"read-write\", 0x0000, proxy)\n\
    \            self.en = Field(\"en\", \"Interrupt Enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.mode = Field(\"mode\", \"Interrupt Mode, selects\
    \ on which condition the Timer should generate an Interrupt\", self._address,\
    \ 4, 0x0007, 3, proxy)\n    \n    class CountRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"COUNT\", \"\
    The Counter Register reflects the actual Value of the Timer/Counter\", address\
    \ + 0x0020, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    class\
    \ MatchRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"MATCH\", \"The Match Register stores the compare Value\
    \ for the MATCH condition\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n\
    \            \n    \n    class Prescale_rdRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PRESCALE_RD\", \"The Prescale\
    \ Register stores the Value for the prescaler. The cont event gets divided by\
    \ this value\", address + 0x0028, 32, \"read-only\", 0x0000, proxy)\n        \
    \    \n    \n    class Prescale_wrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PRESCALE_WR\", \"The Prescale\
    \ Register stores the Value for the prescaler. The cont event gets divided by\
    \ this value\", address + 0x0028, 32, \"write-only\", 0x0000, proxy)\n       \
    \     \n    \n    class Reload[0]Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RELOAD[0]\", \"The Reload Register\
    \ stores the Value the COUNT Register gets reloaded on a when a condition was\
    \ met.\", address + 0x0050, 32, \"read-write\", 0x0000, proxy)\n            \n\
    \    \n    class Reload[1]Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"RELOAD[1]\", \"The Reload Register stores\
    \ the Value the COUNT Register gets reloaded on a when a condition was met.\"\
    , address + 0x0054, 32, \"read-write\", 0x0000, proxy)\n            \n    \n \
    \   class Reload[2]Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RELOAD[2]\", \"The Reload Register stores the\
    \ Value the COUNT Register gets reloaded on a when a condition was met.\", address\
    \ + 0x0058, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    class\
    \ Reload[3]Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RELOAD[3]\", \"The Reload Register stores the\
    \ Value the COUNT Register gets reloaded on a when a condition was met.\", address\
    \ + 0x005C, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"timer1\", \"32 Timer / Counter, counting\
    \ up or down from different sources\", 0x40010100)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.sr = self.SrRegister(self.address, proxy)\n        self.int\
    \ = self.IntRegister(self.address, proxy)\n        self.count = self.CountRegister(self.address,\
    \ proxy)\n        self.match = self.MatchRegister(self.address, proxy)\n     \
    \   self.prescale_rd = self.Prescale_rdRegister(self.address, proxy)\n       \
    \ self.prescale_wr = self.Prescale_wrRegister(self.address, proxy)\n        self.reload[0]\
    \ = self.Reload[0]Register(self.address, proxy)\n        self.reload[1] = self.Reload[1]Register(self.address,\
    \ proxy)\n        self.reload[2] = self.Reload[2]Register(self.address, proxy)\n\
    \        self.reload[3] = self.Reload[3]Register(self.address, proxy)\n"
  name: TIMER1
- content: "from mbedautomatify.reg.base import Peripheral\nfrom mbedautomatify.reg.base\
    \ import Register\nfrom mbedautomatify.reg.base import Field\n\n\nclass Timer2(Peripheral):\n\
    \    class CrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"CR\", \"Control Register\", address + 0x0000,\
    \ 32, \"read-write\", 0x0000, proxy)\n            self.en = Field(\"en\", \"Enable\"\
    , self._address, 0, 0x0001, 1, proxy)\n            self.rst = Field(\"rst\", \"\
    Reset Timer\", self._address, 1, 0x0001, 1, proxy)\n            self.cnt = Field(\"\
    cnt\", \"Counting direction\", self._address, 2, 0x0003, 2, proxy)\n         \
    \   self.mode = Field(\"mode\", \"Operation Mode\", self._address, 4, 0x0007,\
    \ 3, proxy)\n            self.psc = Field(\"psc\", \"Use Prescaler\", self._address,\
    \ 7, 0x0001, 1, proxy)\n            self.cntsrc = Field(\"cntsrc\", \"Timer /\
    \ Counter Source Divider\", self._address, 8, 0x000F, 4, proxy)\n            self.capsrc\
    \ = Field(\"capsrc\", \"Timer / Counter Capture Source\", self._address, 12, 0x000F,\
    \ 4, proxy)\n            self.capedge = Field(\"capedge\", \"Capture Edge, select\
    \ which Edge should result in a counter increment or decrement\", self._address,\
    \ 16, 0x0003, 2, proxy)\n            self.trgext = Field(\"trgext\", \"Triggers\
    \ an other Peripheral\", self._address, 20, 0x0003, 2, proxy)\n            self.reload\
    \ = Field(\"reload\", \"Select RELOAD Register n to reload Timer on condition\"\
    , self._address, 24, 0x0003, 2, proxy)\n            self.idr = Field(\"idr\",\
    \ \"Selects, if Reload Register number is incremented, decremented or not modified\"\
    , self._address, 26, 0x0003, 2, proxy)\n            self.s = Field(\"s\", \"Starts\
    \ and Stops the Timer / Counter\", self._address, 31, 0x0001, 1, proxy)\n    \n\
    \    class SrRegister(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"SR\", \"Status Register\", address + 0x0004, 16,\
    \ \"read-write\", 0x0000, proxy)\n            self.run = Field(\"run\", \"Shows\
    \ if Timer is running or not\", self._address, 0, 0x0001, 1, proxy)\n        \
    \    self.match = Field(\"match\", \"Shows if the MATCH was hit\", self._address,\
    \ 8, 0x0001, 1, proxy)\n            self.un = Field(\"un\", \"Shows if an underflow\
    \ occured. This flag is sticky\", self._address, 9, 0x0001, 1, proxy)\n      \
    \      self.ov = Field(\"ov\", \"Shows if an overflow occured. This flag is sticky\"\
    , self._address, 10, 0x0001, 1, proxy)\n            self.rst = Field(\"rst\",\
    \ \"Shows if Timer is in RESET state\", self._address, 12, 0x0001, 1, proxy)\n\
    \            self.reload = Field(\"reload\", \"Shows the currently active RELOAD\
    \ Register\", self._address, 14, 0x0003, 2, proxy)\n    \n    class IntRegister(Register):\n\
    \        def __init__(self, address, proxy):\n            super().__init__(\"\
    INT\", \"Interrupt Register\", address + 0x0010, 16, \"read-write\", 0x0000, proxy)\n\
    \            self.en = Field(\"en\", \"Interrupt Enable\", self._address, 0, 0x0001,\
    \ 1, proxy)\n            self.mode = Field(\"mode\", \"Interrupt Mode, selects\
    \ on which condition the Timer should generate an Interrupt\", self._address,\
    \ 4, 0x0007, 3, proxy)\n    \n    class CountRegister(Register):\n        def\
    \ __init__(self, address, proxy):\n            super().__init__(\"COUNT\", \"\
    The Counter Register reflects the actual Value of the Timer/Counter\", address\
    \ + 0x0020, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    class\
    \ MatchRegister(Register):\n        def __init__(self, address, proxy):\n    \
    \        super().__init__(\"MATCH\", \"The Match Register stores the compare Value\
    \ for the MATCH condition\", address + 0x0024, 32, \"read-write\", 0x0000, proxy)\n\
    \            \n    \n    class Prescale_rdRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PRESCALE_RD\", \"The Prescale\
    \ Register stores the Value for the prescaler. The cont event gets divided by\
    \ this value\", address + 0x0028, 32, \"read-only\", 0x0000, proxy)\n        \
    \    \n    \n    class Prescale_wrRegister(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"PRESCALE_WR\", \"The Prescale\
    \ Register stores the Value for the prescaler. The cont event gets divided by\
    \ this value\", address + 0x0028, 32, \"write-only\", 0x0000, proxy)\n       \
    \     \n    \n    class Reload[0]Register(Register):\n        def __init__(self,\
    \ address, proxy):\n            super().__init__(\"RELOAD[0]\", \"The Reload Register\
    \ stores the Value the COUNT Register gets reloaded on a when a condition was\
    \ met.\", address + 0x0050, 32, \"read-write\", 0x0000, proxy)\n            \n\
    \    \n    class Reload[1]Register(Register):\n        def __init__(self, address,\
    \ proxy):\n            super().__init__(\"RELOAD[1]\", \"The Reload Register stores\
    \ the Value the COUNT Register gets reloaded on a when a condition was met.\"\
    , address + 0x0054, 32, \"read-write\", 0x0000, proxy)\n            \n    \n \
    \   class Reload[2]Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RELOAD[2]\", \"The Reload Register stores the\
    \ Value the COUNT Register gets reloaded on a when a condition was met.\", address\
    \ + 0x0058, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    class\
    \ Reload[3]Register(Register):\n        def __init__(self, address, proxy):\n\
    \            super().__init__(\"RELOAD[3]\", \"The Reload Register stores the\
    \ Value the COUNT Register gets reloaded on a when a condition was met.\", address\
    \ + 0x005C, 32, \"read-write\", 0x0000, proxy)\n            \n    \n    def __init__(self,\
    \ proxy):\n        super().__init__(\"timer2\", \"32 Timer / Counter, counting\
    \ up or down from different sources\", 0x40010200)\n        self.cr = self.CrRegister(self.address,\
    \ proxy)\n        self.sr = self.SrRegister(self.address, proxy)\n        self.int\
    \ = self.IntRegister(self.address, proxy)\n        self.count = self.CountRegister(self.address,\
    \ proxy)\n        self.match = self.MatchRegister(self.address, proxy)\n     \
    \   self.prescale_rd = self.Prescale_rdRegister(self.address, proxy)\n       \
    \ self.prescale_wr = self.Prescale_wrRegister(self.address, proxy)\n        self.reload[0]\
    \ = self.Reload[0]Register(self.address, proxy)\n        self.reload[1] = self.Reload[1]Register(self.address,\
    \ proxy)\n        self.reload[2] = self.Reload[2]Register(self.address, proxy)\n\
    \        self.reload[3] = self.Reload[3]Register(self.address, proxy)\n"
  name: TIMER2
