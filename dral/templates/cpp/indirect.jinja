{% import 'utils.jinja' as utils with context %}

{%- macro getGroup(group, groupIndent) %}
/**
 * GROUP {{ group.name | upper }}
 */
  class {{ utils.getGroupName(group.name) }} final
  {
  private:
{% filter indent(groupIndent + 2, True) %}
{{ utils.getGroupBaseAddress(group) }}

{{ utils.getGroupEnum(group) }}

{{ utils.getGroupPolicy(group) }}
{% endfilter -%}
    {% for child in group.registers recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}

    {% for child in group.groups recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}
  };
{%- endmacro -%}

{%- macro getSimpleGroup(group, groupIndent) %}
/**
 * GROUP {{ group.name | upper }}
 */
  class {{ utils.getGroupName(group.name) }} final
  {
  private:
{% filter indent(groupIndent + 2, True) %}
{{ utils.getGroupBaseAddress(group) }}

{{ utils.getSimpleGroupPolicy(group) }}

{% endfilter -%}
    {% for child in group.registers recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}

    {% for child in group.groups recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}
  };
{%- endmacro -%}

{%- macro getRegister(register, registerIndent) %}
private:
    {% if register.fields %}
    enum class {{register.name | upperCamelCase}}Fields { {{ utils.getFieldEnumName(register.fields[0].name) }} {% for x in register.fields[1:] %}, {{ utils.getFieldEnumName(x.name) }} {% endfor %} };

    using {{register.name | upperCamelCase}}AllMasks = std::tuple<MaskPolicy<{{register.value_type}}, {{ register.fields[0].position }}, {{ register.fields[0].width }}> {% for x in register.fields[1:] %}, MaskPolicy<{{register.value_type}}, {{ x.position }}, {{ x.width }}> {% endfor %}>;
    {% else %}
    enum class {{register.name | upperCamelCase}}Fields {};

    using {{register.name | upperCamelCase}}AllMasks = std::tuple<>;
    {% endif %}
public:
/**
 * REGISTER {{ register.name | upper }}
 */
  class {{ register.name | upperCamelCase }}Type : public RegisterValue<{{ register.value_type }}, {{register.name | upperCamelCase}}Fields, {{register.name | upperCamelCase}}AllMasks>
  {
  public:
    using RegisterValue<{{ register.value_type }}, {{register.name | upperCamelCase}}Fields, {{register.name | upperCamelCase}}AllMasks>::RegisterValue;
    using enum {{register.name | upperCamelCase}}Fields;
  };
{%- endmacro -%}

{%- macro getChild(child, childIndent) %}
{% if child is dralRegister %}
  {% filter indent(childIndent, True) %}
  {{- getRegister(child, childIndent) }}
  {% endfilter %}
{% elif child is dralGroup %}
  {% filter indent(childIndent, True) %}
{% if child is multiInstance %}
  {{- getGroup(child, childIndent) }}
{% else %}
  {{- getSimpleGroup(child, childIndent) }}
{% endif %}
  {% endfilter %}
{% endif %}
{%- endmacro -%}

{%- include 'header.jinja' +%}

#ifndef {{ utils.getIncludeGuard(device, root) }}
#define {{ utils.getIncludeGuard(device, root) }}

{% include 'model.import.jinja' +%}

namespace dral::{{ device | lower }} {

class {{ utils.getGroupName(root.name) }} final
{
private:
{% if root is multiInstance %}
{{ utils.getGroupBaseAddress(root) }}

{{ utils.getGroupEnum(root) }}

{{ utils.getGroupPolicy(root) }}
{% else %}
{{ utils.getGroupBaseAddress(root) }}

{{ utils.getSimpleGroupPolicy(root) }}
{% endif %}

public:
{% for register in root.registers %}
  {{- getChild(register, 0) }}
{% endfor %}

{% for group in root.groups recursive %}
  {{- getChild(group, 0) }}
{% endfor %}
};

}

#endif /* {{ utils.getIncludeGuard(device, root) }} */
