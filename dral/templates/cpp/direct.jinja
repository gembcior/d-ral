{% macro getName(name, suffix) -%}
{{ name ~ '_' ~ suffix }}
{%- endmacro -%}

{% macro getGroupName(name) -%}
{{ getName(name, suffix.group) | upperCamelCase }}
{%- endmacro -%}

{% macro getRegisterName(name) -%}
{{ getName(name, suffix.register) | upperCamelCase }}
{%- endmacro -%}

{% macro getFieldName(name) -%}
{{ getName(name, suffix.field) | lowerCamelCase | isForbidden }}
{%- endmacro -%}

{% macro getIncludeGuard(device, root) -%}
{% if device == root.name %}
DRAL_{{ device | upper }}_H
{%- else -%}
DRAL_{{ device | upper }}_{{ root.name | upper }}_H
{% endif %}
{%- endmacro -%}

{% macro getFieldEnumName(name) -%}
{{ name | lowerCamelCase | isForbidden }}
{%- endmacro %}

{% macro getAccessType(access) -%}
{% set mapping = ["AccessType::ReadOnly", "AccessType::WriteOnly", "AccessType::ReadWrite"] %}
{{ mapping[access.value] }}
{%- endmacro -%}

{%- macro getGroupBaseAddress(group) %}
  static constexpr uintptr_t BaseAddress {{ '{' }}{{ "0x{:08X}".format(group.address) }}{{ '}' }};
{%- endmacro -%}

{%- macro getGroupEnum(group) %}
public:
  enum class IndexType
  {
    {% for instance in group.instances %}
    {{ instance.name | upperCamelCase }},
    {% endfor %}
  };

  struct Index final
  {
    using enum IndexType;
    static constexpr std::array All {{ '{ ' }}{% for instance in group.instances[:-1] %}{{ instance.name | upperCamelCase }}, {% endfor %}{{ group.instances[-1].name | upperCamelCase }}{{ ' }' }};
  };
{%- endmacro -%}

{%- macro getGroupPolicy(group) %}
private:
{% if group is nonUniformOffset %}
  using OffsetPolicy = NonUniformLayerOffsetPolicy<IndexType, std::integer_sequence<std::uintptr_t, {% for x in group.offset[:-1] %}{{ "0x{:08X}".format(x) }}, {% endfor %}{{ "0x{:08X}".format(group.offset[-1]) }}>>;
{% else %}
  using OffsetPolicy = LayerOffsetPolicy<IndexType, {{ "0x{:08X}".format(group.offset) }}>;
{% endif %}

  template<std::uintptr_t Address>
  using AddressPolicy = GroupAddressPolicy<BaseAddress + Address, std::tuple<{% for x in group.parent[1:] if x is multiInstance %}{{ getGroupName(x.name) }}::OffsetPolicy, {% endfor %}OffsetPolicy>>;
{%- endmacro -%}

{%- macro getSimpleGroupPolicy(group) %}
  template<std::uintptr_t Address>
  {% if group is inMultiInstanceScope %}
  using AddressPolicy = GroupAddressPolicy<BaseAddress + Address, std::tuple<{% for x in group.parent[1:] if x is multiInstance %}{{ getGroupName(x.name) }}::OffsetPolicy, {% endfor %}>>;
  {% else %}
  using AddressPolicy = GroupAddressPolicy<BaseAddress + Address>;
  {%- endif %}
{%- endmacro -%}

{%- macro getGroup(group, groupIndent) %}
/**
 * GROUP {{ group.name | upper }}
 */
  class {{ getGroupName(group.name) }} final
  {
  private:
{% filter indent(groupIndent + 2, True) %}
{{ getGroupBaseAddress(group) }}

{{ getGroupEnum(group) }}

{{ getGroupPolicy(group) }}
{% endfilter -%}
    {% for child in group.registers recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}

    {% for child in group.groups recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}
  };
{%- endmacro -%}

{%- macro getSimpleGroup(group, groupIndent) %}
/**
 * GROUP {{ group.name | upper }}
 */
  class {{ getGroupName(group.name) }} final
  {
  private:
{% filter indent(groupIndent + 2, True) %}
{{ getGroupBaseAddress(group) }}

{{ getSimpleGroupPolicy(group) }}

{% endfilter -%}
    {% for child in group.registers recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}

    {% for child in group.groups recursive %}
    {{- getChild(child, groupIndent + 2) }}
    {% endfor %}
  };
{%- endmacro -%}

{%- macro getRegister(register, registerIndent) %}
private:
    {% if register.fields %}
    enum class {{register.name | upperCamelCase}}Fields { {{ getFieldEnumName(register.fields[0].name) }} {% for x in register.fields[1:] %}, {{ getFieldEnumName(x.name) }} {% endfor %} };

    using {{register.name | upperCamelCase}}AllMasks = std::tuple<MaskPolicy<{{register.value_type}}, {{ register.fields[0].position }}, {{ register.fields[0].width }}> {% for x in register.fields[1:] %}, MaskPolicy<{{register.value_type}}, {{ x.position }}, {{ x.width }}> {% endfor %}>;
    {% else %}
    enum class {{register.name | upperCamelCase}}Fields {};

    using {{register.name | upperCamelCase}}AllMasks = std::tuple<>;
    {% endif %}
public:
/**
 * REGISTER {{ register.name | upper }}
 */
  class {{ register.name | upperCamelCase }}Type : public RegisterValue<{{ register.value_type }}, {{register.name | upperCamelCase}}Fields, {{register.name | upperCamelCase}}AllMasks>
  {
  public:
    using RegisterValue<{{ register.value_type }}, {{register.name | upperCamelCase}}Fields, {{register.name | upperCamelCase}}AllMasks>::RegisterValue;
    using enum {{register.name | upperCamelCase}}Fields;
  };

  class {{ getRegisterName(register.name) }} final: public RegisterModel<{{ register.name | upperCamelCase }}Type, AddressPolicy<{{ "0x{:08X}".format(register.address) }}>, {{ getAccessType(register.access) }}>
  {
  public:
    using reg = RegisterModel<{{ register.name | upperCamelCase }}Type, AddressPolicy<{{ "0x{:08X}".format(register.address) }}>, {{ getAccessType(register.access) }}>;
  {% if register.fields %}
    {% for field in register.fields %}
    using {{ getFieldName(field.name) }} = FieldModel<reg, {{ field.position }}, {{ field.width }}>;
    {% endfor %}

    using AllFields = std::tuple<{{ getFieldName(register.fields[0].name) }} {% for x in register.fields[1:] %}, {{ getFieldName(x.name) }} {% endfor %}>;
  {% else %}
  using AllFields = std::tuple<>;
  {% endif %}
  };
{%- endmacro -%}

{%- macro getChild(child, childIndent) %}
{% if child is dralRegister %}
  {% filter indent(childIndent, True) %}
  {{- getRegister(child, childIndent) }}
  {% endfilter %}
{% elif child is dralGroup %}
  {% filter indent(childIndent, True) %}
{% if child is multiInstance %}
  {{- getGroup(child, childIndent) }}
{% else %}
  {{- getSimpleGroup(child, childIndent) }}
{% endif %}
  {% endfilter %}
{% endif %}
{%- endmacro -%}

{%- include 'header.jinja' +%}

#ifndef {{ getIncludeGuard(device, root) }}
#define {{ getIncludeGuard(device, root) }}

{% include 'model.import.jinja' +%}

namespace dral::{{ device | lower }} {

class {{ getGroupName(root.name) }} final
{
private:
{% if root is multiInstance %}
{{ getGroupBaseAddress(root) }}

{{ getGroupEnum(root) }}

{{ getGroupPolicy(root) }}
{% else %}
{{ getGroupBaseAddress(root) }}

{{ getSimpleGroupPolicy(root) }}
{% endif %}

public:
{% for register in root.registers %}
  {{- getChild(register, 0) }}
{% endfor %}

{% for group in root.groups recursive %}
  {{- getChild(group, 0) }}
{% endfor %}
};

}

#endif /* {{ getIncludeGuard(device, root) }} */
