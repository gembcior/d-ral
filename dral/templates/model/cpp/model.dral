{% include 'header.dral' %}

#ifndef DRAL_REGISTER_MODEL_H
#define DRAL_REGISTER_MODEL_H

#include <cstdint>
#include <type_traits>
#include <tuple>
#include <utility>

namespace dral {

/**
 * Group description
 */
template<std::uintptr_t offset, std::size_t groupsCount>
struct GroupDescription
{
  static_assert(offset > 0);
  static_assert(groupsCount > 1);

  static constexpr std::uintptr_t Offset = offset;
  static constexpr std::size_t GroupsCount = groupsCount;

  template<std::size_t GroupId>
  [[nodiscard]] constexpr static std::uintptr_t GetOffset()
  {
    static_assert(GroupId < GroupsCount);
    return Offset * GroupId;
  }

  [[nodiscard]] static std::uintptr_t GetOffset(std::size_t GroupId)
  {
    static_assert(GroupId < GroupsCount);
    return Offset * GroupId;
  }

  [[nodiscard]] constexpr static std::uintptr_t AddressesRange()
  {
    return Offset * GroupsCount;
  }

  [[nodiscard]] constexpr static std::uintptr_t MinOffset()
  {
    return Offset;
  }
};


/**
 * Group Address Policy
 */
template <std::uintptr_t BaseAddress, unsigned int GroupOffset = 0>
class GroupAddressPolicy
{
public:
  template <unsigned int Index>
  using StaticIndexValue = std::integer_sequence<unsigned int, Index>;

  [[nodiscard]] static std::uintptr_t GetAddress(const unsigned int &index)
  {
    return BaseAddress + (static_cast<std::size_t>(index) * GroupOffset);
  }

  template <unsigned int Index>
  [[nodiscard]] static constexpr std::uintptr_t GetAddress(StaticIndexValue<Index> = {})
  {
    return BaseAddress + (static_cast<std::size_t>(Index) * GroupOffset);
  }
};

template <std::uintptr_t BaseAddress>
class GroupAddressPolicy<BaseAddress>
{
public:
  [[nodiscard]] static constexpr std::uintptr_t GetAddress()
  {
    return BaseAddress;
  }
};


/**
 * Register Model Template
 */
template<typename SizeType, typename IndexPolicy>
class RegisterModel
{
public:
  /**
   * Read value from the register
   *
   * @return Register value
   */
  template <typename ...Index>
  static SizeType read(Index&&... index)
  {
    volatile const SizeType* const reg = reinterpret_cast<volatile const SizeType*>(IndexPolicy::GetAddress(std::forward<Index>(index)...));
    return *reg;
  }

  /**
   * @brief Write value to the register
   *
   * @param value Value to be written
   */
  template <typename ...Index>
  static void write(SizeType value, Index&&... index)
  {
    volatile SizeType* const reg = reinterpret_cast<volatile SizeType*>(IndexPolicy::GetAddress(std::forward<Index>(index)...));
    *reg = value;
  }
};


/**
 * Field Model Template
 */
template<typename SizeType, typename IndexPolicy, unsigned int position, unsigned int width>
class FieldModel
{
public:
  static constexpr unsigned int Width = width; /**< Field width */
  static constexpr unsigned int Mask = (1U << width) - 1U; /**< Field mask relative to position */
  static constexpr unsigned int Position = position; /**< Field position */

public:
  /**
   * @brief Read the field value from the register
   *
   * @return Field value
   */
  template <typename ...Index>
  static SizeType read(Index&&...index)
  {
    volatile const SizeType* const reg = reinterpret_cast<volatile const SizeType*>(IndexPolicy::GetAddress(std::forward<Index>(index)...));
    return (*reg >> position) & Mask;
  }

  /**
   * @brief Write value to the register's field
   *
   * @param value Value to be written
   */
  template <typename ...Index>
  static void write(SizeType value, Index&&... index)
  {
    volatile SizeType* const reg = reinterpret_cast<volatile SizeType*>(IndexPolicy::GetAddress(std::forward<Index>(index)...));
    *reg = (*reg & ~(Mask << position)) | ((value & Mask) << position);
  }

  static_assert(position >= 0 && position <= (sizeof(SizeType) * 8 - 1), "The position of the field can't exceed the register size or be less than 0.");
  static_assert(width >= 1 && width <= ((sizeof(SizeType) * 8) - position), "The width of the field starting from the position can't exceed the register size or be less than 1.");
};


/**
 * Bit Field Mode Template
 */
template<typename SizeType, unsigned int position, unsigned int width = 1>
class BitFieldModel
{
public:
  static constexpr unsigned int Width = width; /**< Field width */
  static constexpr unsigned int Mask = (1U << width) - 1U; /**< Field mask relative to position */
  static constexpr unsigned int Position = position; /**< Field position */

public:
  template<typename T>
  BitFieldModel& operator=(T value)
  {
    m_value = (m_value & ~(Mask << position)) | ((value & Mask) << position);
    return *this;
  }

  operator SizeType() const
  {
    return (m_value >> position) & Mask;
  }

  explicit operator bool() const
  {
    return m_value & (Mask << position);
  }

  BitFieldModel& operator++()
  {
    return *this = *this + 1U;
  }

  SizeType operator++(int)
  {
    const SizeType result = *this;
    ++*this;
    return result;
  }

  BitFieldModel& operator--()
  {
    return *this = *this - 1U;
  }

  SizeType operator--(int)
  {
    const SizeType result = *this;
    --*this;
    return result;
  }

private:
  SizeType m_value;

  static_assert(position >= 0 && position <= (sizeof(SizeType) * 8 - 1), "The position of the field can't exceed the register size or be less than 0.");
  static_assert(width >= 1 && width <= ((sizeof(SizeType) * 8) - position), "The width of the field starting from the position can't exceed the register size or be less than 1.");
};

/**
 * Bit Field Mode Template specialization for 1 bit field
 */
template<typename SizeType, unsigned int position>
class BitFieldModel<SizeType, position>
{
public:
  static constexpr unsigned int Width = 1U; /**< Field width */
  static constexpr unsigned int Mask = (1U << Width) - 1U; /**< Field mask relative to position */
  static constexpr unsigned int Position = position; /**< Field position */

public:
  BitFieldModel& operator=(bool value)
  {
    m_value = (m_value & ~(Mask << position)) | (value << position);
    return *this;
  }

  explicit operator bool() const
  {
    return m_value & (Mask << position);
  }

private:
  SizeType m_value;

  static_assert(position >= 0 && position <= (sizeof(SizeType) * 8 - 1), "The position of the field can't exceed the register size or be less than 0.");
};

}  // namespace

#endif /* DRAL_REGISTER_MODEL_H */
